
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	80 84 00 20 09 36 01 00 05 1c 02 00 c1 35 01 00     ... .6.......5..
    1010:	c1 35 01 00 c1 35 01 00 c1 35 01 00 00 00 00 00     .5...5...5......
	...
    102c:	8d 30 01 00 c1 35 01 00 00 00 00 00 f9 2f 01 00     .0...5......./..
    103c:	c1 35 01 00                                         .5..

00001040 <_irq_vector_table>:
    1040:	49 32 01 00 a5 3b 02 00 49 32 01 00 49 32 01 00     I2...;..I2..I2..
    1050:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    1060:	6d 3b 02 00 49 32 01 00 49 32 01 00 8b 3b 02 00     m;..I2..I2...;..
    1070:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    1080:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    1090:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    10a0:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    10b0:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    10c0:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    10d0:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    10e0:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..
    10f0:	49 32 01 00 49 32 01 00 49 32 01 00 49 32 01 00     I2..I2..I2..I2..

Disassembly of section text:

00001100 <memchr>:
    1100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    1104:	2a10      	cmp	r2, #16
    1106:	db2b      	blt.n	1160 <memchr+0x60>
    1108:	f010 0f07 	tst.w	r0, #7
    110c:	d008      	beq.n	1120 <memchr+0x20>
    110e:	f810 3b01 	ldrb.w	r3, [r0], #1
    1112:	3a01      	subs	r2, #1
    1114:	428b      	cmp	r3, r1
    1116:	d02d      	beq.n	1174 <memchr+0x74>
    1118:	f010 0f07 	tst.w	r0, #7
    111c:	b342      	cbz	r2, 1170 <memchr+0x70>
    111e:	d1f6      	bne.n	110e <memchr+0xe>
    1120:	b4f0      	push	{r4, r5, r6, r7}
    1122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    112a:	f022 0407 	bic.w	r4, r2, #7
    112e:	f07f 0700 	mvns.w	r7, #0
    1132:	2300      	movs	r3, #0
    1134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    1138:	3c08      	subs	r4, #8
    113a:	ea85 0501 	eor.w	r5, r5, r1
    113e:	ea86 0601 	eor.w	r6, r6, r1
    1142:	fa85 f547 	uadd8	r5, r5, r7
    1146:	faa3 f587 	sel	r5, r3, r7
    114a:	fa86 f647 	uadd8	r6, r6, r7
    114e:	faa5 f687 	sel	r6, r5, r7
    1152:	b98e      	cbnz	r6, 1178 <memchr+0x78>
    1154:	d1ee      	bne.n	1134 <memchr+0x34>
    1156:	bcf0      	pop	{r4, r5, r6, r7}
    1158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    115c:	f002 0207 	and.w	r2, r2, #7
    1160:	b132      	cbz	r2, 1170 <memchr+0x70>
    1162:	f810 3b01 	ldrb.w	r3, [r0], #1
    1166:	3a01      	subs	r2, #1
    1168:	ea83 0301 	eor.w	r3, r3, r1
    116c:	b113      	cbz	r3, 1174 <memchr+0x74>
    116e:	d1f8      	bne.n	1162 <memchr+0x62>
    1170:	2000      	movs	r0, #0
    1172:	4770      	bx	lr
    1174:	3801      	subs	r0, #1
    1176:	4770      	bx	lr
    1178:	2d00      	cmp	r5, #0
    117a:	bf06      	itte	eq
    117c:	4635      	moveq	r5, r6
    117e:	3803      	subeq	r0, #3
    1180:	3807      	subne	r0, #7
    1182:	f015 0f01 	tst.w	r5, #1
    1186:	d107      	bne.n	1198 <memchr+0x98>
    1188:	3001      	adds	r0, #1
    118a:	f415 7f80 	tst.w	r5, #256	; 0x100
    118e:	bf02      	ittt	eq
    1190:	3001      	addeq	r0, #1
    1192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    1196:	3001      	addeq	r0, #1
    1198:	bcf0      	pop	{r4, r5, r6, r7}
    119a:	3801      	subs	r0, #1
    119c:	4770      	bx	lr
    119e:	bf00      	nop

000011a0 <__aeabi_drsub>:
    11a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    11a4:	e002      	b.n	11ac <__adddf3>
    11a6:	bf00      	nop

000011a8 <__aeabi_dsub>:
    11a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000011ac <__adddf3>:
    11ac:	b530      	push	{r4, r5, lr}
    11ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
    11b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    11b6:	ea94 0f05 	teq	r4, r5
    11ba:	bf08      	it	eq
    11bc:	ea90 0f02 	teqeq	r0, r2
    11c0:	bf1f      	itttt	ne
    11c2:	ea54 0c00 	orrsne.w	ip, r4, r0
    11c6:	ea55 0c02 	orrsne.w	ip, r5, r2
    11ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    11ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    11d2:	f000 80e2 	beq.w	139a <__adddf3+0x1ee>
    11d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    11da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    11de:	bfb8      	it	lt
    11e0:	426d      	neglt	r5, r5
    11e2:	dd0c      	ble.n	11fe <__adddf3+0x52>
    11e4:	442c      	add	r4, r5
    11e6:	ea80 0202 	eor.w	r2, r0, r2
    11ea:	ea81 0303 	eor.w	r3, r1, r3
    11ee:	ea82 0000 	eor.w	r0, r2, r0
    11f2:	ea83 0101 	eor.w	r1, r3, r1
    11f6:	ea80 0202 	eor.w	r2, r0, r2
    11fa:	ea81 0303 	eor.w	r3, r1, r3
    11fe:	2d36      	cmp	r5, #54	; 0x36
    1200:	bf88      	it	hi
    1202:	bd30      	pophi	{r4, r5, pc}
    1204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1208:	ea4f 3101 	mov.w	r1, r1, lsl #12
    120c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1214:	d002      	beq.n	121c <__adddf3+0x70>
    1216:	4240      	negs	r0, r0
    1218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    121c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1220:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1228:	d002      	beq.n	1230 <__adddf3+0x84>
    122a:	4252      	negs	r2, r2
    122c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1230:	ea94 0f05 	teq	r4, r5
    1234:	f000 80a7 	beq.w	1386 <__adddf3+0x1da>
    1238:	f1a4 0401 	sub.w	r4, r4, #1
    123c:	f1d5 0e20 	rsbs	lr, r5, #32
    1240:	db0d      	blt.n	125e <__adddf3+0xb2>
    1242:	fa02 fc0e 	lsl.w	ip, r2, lr
    1246:	fa22 f205 	lsr.w	r2, r2, r5
    124a:	1880      	adds	r0, r0, r2
    124c:	f141 0100 	adc.w	r1, r1, #0
    1250:	fa03 f20e 	lsl.w	r2, r3, lr
    1254:	1880      	adds	r0, r0, r2
    1256:	fa43 f305 	asr.w	r3, r3, r5
    125a:	4159      	adcs	r1, r3
    125c:	e00e      	b.n	127c <__adddf3+0xd0>
    125e:	f1a5 0520 	sub.w	r5, r5, #32
    1262:	f10e 0e20 	add.w	lr, lr, #32
    1266:	2a01      	cmp	r2, #1
    1268:	fa03 fc0e 	lsl.w	ip, r3, lr
    126c:	bf28      	it	cs
    126e:	f04c 0c02 	orrcs.w	ip, ip, #2
    1272:	fa43 f305 	asr.w	r3, r3, r5
    1276:	18c0      	adds	r0, r0, r3
    1278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    127c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1280:	d507      	bpl.n	1292 <__adddf3+0xe6>
    1282:	f04f 0e00 	mov.w	lr, #0
    1286:	f1dc 0c00 	rsbs	ip, ip, #0
    128a:	eb7e 0000 	sbcs.w	r0, lr, r0
    128e:	eb6e 0101 	sbc.w	r1, lr, r1
    1292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    1296:	d31b      	bcc.n	12d0 <__adddf3+0x124>
    1298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    129c:	d30c      	bcc.n	12b8 <__adddf3+0x10c>
    129e:	0849      	lsrs	r1, r1, #1
    12a0:	ea5f 0030 	movs.w	r0, r0, rrx
    12a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    12a8:	f104 0401 	add.w	r4, r4, #1
    12ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
    12b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    12b4:	f080 809a 	bcs.w	13ec <__adddf3+0x240>
    12b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    12bc:	bf08      	it	eq
    12be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    12c2:	f150 0000 	adcs.w	r0, r0, #0
    12c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    12ca:	ea41 0105 	orr.w	r1, r1, r5
    12ce:	bd30      	pop	{r4, r5, pc}
    12d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    12d4:	4140      	adcs	r0, r0
    12d6:	eb41 0101 	adc.w	r1, r1, r1
    12da:	3c01      	subs	r4, #1
    12dc:	bf28      	it	cs
    12de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    12e2:	d2e9      	bcs.n	12b8 <__adddf3+0x10c>
    12e4:	f091 0f00 	teq	r1, #0
    12e8:	bf04      	itt	eq
    12ea:	4601      	moveq	r1, r0
    12ec:	2000      	moveq	r0, #0
    12ee:	fab1 f381 	clz	r3, r1
    12f2:	bf08      	it	eq
    12f4:	3320      	addeq	r3, #32
    12f6:	f1a3 030b 	sub.w	r3, r3, #11
    12fa:	f1b3 0220 	subs.w	r2, r3, #32
    12fe:	da0c      	bge.n	131a <__adddf3+0x16e>
    1300:	320c      	adds	r2, #12
    1302:	dd08      	ble.n	1316 <__adddf3+0x16a>
    1304:	f102 0c14 	add.w	ip, r2, #20
    1308:	f1c2 020c 	rsb	r2, r2, #12
    130c:	fa01 f00c 	lsl.w	r0, r1, ip
    1310:	fa21 f102 	lsr.w	r1, r1, r2
    1314:	e00c      	b.n	1330 <__adddf3+0x184>
    1316:	f102 0214 	add.w	r2, r2, #20
    131a:	bfd8      	it	le
    131c:	f1c2 0c20 	rsble	ip, r2, #32
    1320:	fa01 f102 	lsl.w	r1, r1, r2
    1324:	fa20 fc0c 	lsr.w	ip, r0, ip
    1328:	bfdc      	itt	le
    132a:	ea41 010c 	orrle.w	r1, r1, ip
    132e:	4090      	lslle	r0, r2
    1330:	1ae4      	subs	r4, r4, r3
    1332:	bfa2      	ittt	ge
    1334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1338:	4329      	orrge	r1, r5
    133a:	bd30      	popge	{r4, r5, pc}
    133c:	ea6f 0404 	mvn.w	r4, r4
    1340:	3c1f      	subs	r4, #31
    1342:	da1c      	bge.n	137e <__adddf3+0x1d2>
    1344:	340c      	adds	r4, #12
    1346:	dc0e      	bgt.n	1366 <__adddf3+0x1ba>
    1348:	f104 0414 	add.w	r4, r4, #20
    134c:	f1c4 0220 	rsb	r2, r4, #32
    1350:	fa20 f004 	lsr.w	r0, r0, r4
    1354:	fa01 f302 	lsl.w	r3, r1, r2
    1358:	ea40 0003 	orr.w	r0, r0, r3
    135c:	fa21 f304 	lsr.w	r3, r1, r4
    1360:	ea45 0103 	orr.w	r1, r5, r3
    1364:	bd30      	pop	{r4, r5, pc}
    1366:	f1c4 040c 	rsb	r4, r4, #12
    136a:	f1c4 0220 	rsb	r2, r4, #32
    136e:	fa20 f002 	lsr.w	r0, r0, r2
    1372:	fa01 f304 	lsl.w	r3, r1, r4
    1376:	ea40 0003 	orr.w	r0, r0, r3
    137a:	4629      	mov	r1, r5
    137c:	bd30      	pop	{r4, r5, pc}
    137e:	fa21 f004 	lsr.w	r0, r1, r4
    1382:	4629      	mov	r1, r5
    1384:	bd30      	pop	{r4, r5, pc}
    1386:	f094 0f00 	teq	r4, #0
    138a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    138e:	bf06      	itte	eq
    1390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    1394:	3401      	addeq	r4, #1
    1396:	3d01      	subne	r5, #1
    1398:	e74e      	b.n	1238 <__adddf3+0x8c>
    139a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    139e:	bf18      	it	ne
    13a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    13a4:	d029      	beq.n	13fa <__adddf3+0x24e>
    13a6:	ea94 0f05 	teq	r4, r5
    13aa:	bf08      	it	eq
    13ac:	ea90 0f02 	teqeq	r0, r2
    13b0:	d005      	beq.n	13be <__adddf3+0x212>
    13b2:	ea54 0c00 	orrs.w	ip, r4, r0
    13b6:	bf04      	itt	eq
    13b8:	4619      	moveq	r1, r3
    13ba:	4610      	moveq	r0, r2
    13bc:	bd30      	pop	{r4, r5, pc}
    13be:	ea91 0f03 	teq	r1, r3
    13c2:	bf1e      	ittt	ne
    13c4:	2100      	movne	r1, #0
    13c6:	2000      	movne	r0, #0
    13c8:	bd30      	popne	{r4, r5, pc}
    13ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    13ce:	d105      	bne.n	13dc <__adddf3+0x230>
    13d0:	0040      	lsls	r0, r0, #1
    13d2:	4149      	adcs	r1, r1
    13d4:	bf28      	it	cs
    13d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    13da:	bd30      	pop	{r4, r5, pc}
    13dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    13e0:	bf3c      	itt	cc
    13e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    13e6:	bd30      	popcc	{r4, r5, pc}
    13e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    13ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    13f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    13f4:	f04f 0000 	mov.w	r0, #0
    13f8:	bd30      	pop	{r4, r5, pc}
    13fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    13fe:	bf1a      	itte	ne
    1400:	4619      	movne	r1, r3
    1402:	4610      	movne	r0, r2
    1404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1408:	bf1c      	itt	ne
    140a:	460b      	movne	r3, r1
    140c:	4602      	movne	r2, r0
    140e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1412:	bf06      	itte	eq
    1414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1418:	ea91 0f03 	teqeq	r1, r3
    141c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1420:	bd30      	pop	{r4, r5, pc}
    1422:	bf00      	nop

00001424 <__aeabi_ui2d>:
    1424:	f090 0f00 	teq	r0, #0
    1428:	bf04      	itt	eq
    142a:	2100      	moveq	r1, #0
    142c:	4770      	bxeq	lr
    142e:	b530      	push	{r4, r5, lr}
    1430:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1434:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1438:	f04f 0500 	mov.w	r5, #0
    143c:	f04f 0100 	mov.w	r1, #0
    1440:	e750      	b.n	12e4 <__adddf3+0x138>
    1442:	bf00      	nop

00001444 <__aeabi_i2d>:
    1444:	f090 0f00 	teq	r0, #0
    1448:	bf04      	itt	eq
    144a:	2100      	moveq	r1, #0
    144c:	4770      	bxeq	lr
    144e:	b530      	push	{r4, r5, lr}
    1450:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1454:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    145c:	bf48      	it	mi
    145e:	4240      	negmi	r0, r0
    1460:	f04f 0100 	mov.w	r1, #0
    1464:	e73e      	b.n	12e4 <__adddf3+0x138>
    1466:	bf00      	nop

00001468 <__aeabi_f2d>:
    1468:	0042      	lsls	r2, r0, #1
    146a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    146e:	ea4f 0131 	mov.w	r1, r1, rrx
    1472:	ea4f 7002 	mov.w	r0, r2, lsl #28
    1476:	bf1f      	itttt	ne
    1478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    147c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    1484:	4770      	bxne	lr
    1486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    148a:	bf08      	it	eq
    148c:	4770      	bxeq	lr
    148e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    1492:	bf04      	itt	eq
    1494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    1498:	4770      	bxeq	lr
    149a:	b530      	push	{r4, r5, lr}
    149c:	f44f 7460 	mov.w	r4, #896	; 0x380
    14a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    14a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    14a8:	e71c      	b.n	12e4 <__adddf3+0x138>
    14aa:	bf00      	nop

000014ac <__aeabi_ul2d>:
    14ac:	ea50 0201 	orrs.w	r2, r0, r1
    14b0:	bf08      	it	eq
    14b2:	4770      	bxeq	lr
    14b4:	b530      	push	{r4, r5, lr}
    14b6:	f04f 0500 	mov.w	r5, #0
    14ba:	e00a      	b.n	14d2 <__aeabi_l2d+0x16>

000014bc <__aeabi_l2d>:
    14bc:	ea50 0201 	orrs.w	r2, r0, r1
    14c0:	bf08      	it	eq
    14c2:	4770      	bxeq	lr
    14c4:	b530      	push	{r4, r5, lr}
    14c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    14ca:	d502      	bpl.n	14d2 <__aeabi_l2d+0x16>
    14cc:	4240      	negs	r0, r0
    14ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    14d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    14d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    14da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    14de:	f43f aed8 	beq.w	1292 <__adddf3+0xe6>
    14e2:	f04f 0203 	mov.w	r2, #3
    14e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    14ea:	bf18      	it	ne
    14ec:	3203      	addne	r2, #3
    14ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    14f2:	bf18      	it	ne
    14f4:	3203      	addne	r2, #3
    14f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    14fa:	f1c2 0320 	rsb	r3, r2, #32
    14fe:	fa00 fc03 	lsl.w	ip, r0, r3
    1502:	fa20 f002 	lsr.w	r0, r0, r2
    1506:	fa01 fe03 	lsl.w	lr, r1, r3
    150a:	ea40 000e 	orr.w	r0, r0, lr
    150e:	fa21 f102 	lsr.w	r1, r1, r2
    1512:	4414      	add	r4, r2
    1514:	e6bd      	b.n	1292 <__adddf3+0xe6>
    1516:	bf00      	nop

00001518 <__aeabi_dmul>:
    1518:	b570      	push	{r4, r5, r6, lr}
    151a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    151e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1526:	bf1d      	ittte	ne
    1528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    152c:	ea94 0f0c 	teqne	r4, ip
    1530:	ea95 0f0c 	teqne	r5, ip
    1534:	f000 f8de 	bleq	16f4 <__aeabi_dmul+0x1dc>
    1538:	442c      	add	r4, r5
    153a:	ea81 0603 	eor.w	r6, r1, r3
    153e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    1542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    1546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    154a:	bf18      	it	ne
    154c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    1550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1558:	d038      	beq.n	15cc <__aeabi_dmul+0xb4>
    155a:	fba0 ce02 	umull	ip, lr, r0, r2
    155e:	f04f 0500 	mov.w	r5, #0
    1562:	fbe1 e502 	umlal	lr, r5, r1, r2
    1566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    156a:	fbe0 e503 	umlal	lr, r5, r0, r3
    156e:	f04f 0600 	mov.w	r6, #0
    1572:	fbe1 5603 	umlal	r5, r6, r1, r3
    1576:	f09c 0f00 	teq	ip, #0
    157a:	bf18      	it	ne
    157c:	f04e 0e01 	orrne.w	lr, lr, #1
    1580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    1584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    158c:	d204      	bcs.n	1598 <__aeabi_dmul+0x80>
    158e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    1592:	416d      	adcs	r5, r5
    1594:	eb46 0606 	adc.w	r6, r6, r6
    1598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    159c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    15a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    15a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    15a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    15ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    15b0:	bf88      	it	hi
    15b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    15b6:	d81e      	bhi.n	15f6 <__aeabi_dmul+0xde>
    15b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    15bc:	bf08      	it	eq
    15be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    15c2:	f150 0000 	adcs.w	r0, r0, #0
    15c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    15ca:	bd70      	pop	{r4, r5, r6, pc}
    15cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    15d0:	ea46 0101 	orr.w	r1, r6, r1
    15d4:	ea40 0002 	orr.w	r0, r0, r2
    15d8:	ea81 0103 	eor.w	r1, r1, r3
    15dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    15e0:	bfc2      	ittt	gt
    15e2:	ebd4 050c 	rsbsgt	r5, r4, ip
    15e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    15ea:	bd70      	popgt	{r4, r5, r6, pc}
    15ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    15f0:	f04f 0e00 	mov.w	lr, #0
    15f4:	3c01      	subs	r4, #1
    15f6:	f300 80ab 	bgt.w	1750 <__aeabi_dmul+0x238>
    15fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    15fe:	bfde      	ittt	le
    1600:	2000      	movle	r0, #0
    1602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1606:	bd70      	pople	{r4, r5, r6, pc}
    1608:	f1c4 0400 	rsb	r4, r4, #0
    160c:	3c20      	subs	r4, #32
    160e:	da35      	bge.n	167c <__aeabi_dmul+0x164>
    1610:	340c      	adds	r4, #12
    1612:	dc1b      	bgt.n	164c <__aeabi_dmul+0x134>
    1614:	f104 0414 	add.w	r4, r4, #20
    1618:	f1c4 0520 	rsb	r5, r4, #32
    161c:	fa00 f305 	lsl.w	r3, r0, r5
    1620:	fa20 f004 	lsr.w	r0, r0, r4
    1624:	fa01 f205 	lsl.w	r2, r1, r5
    1628:	ea40 0002 	orr.w	r0, r0, r2
    162c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1638:	fa21 f604 	lsr.w	r6, r1, r4
    163c:	eb42 0106 	adc.w	r1, r2, r6
    1640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1644:	bf08      	it	eq
    1646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    164a:	bd70      	pop	{r4, r5, r6, pc}
    164c:	f1c4 040c 	rsb	r4, r4, #12
    1650:	f1c4 0520 	rsb	r5, r4, #32
    1654:	fa00 f304 	lsl.w	r3, r0, r4
    1658:	fa20 f005 	lsr.w	r0, r0, r5
    165c:	fa01 f204 	lsl.w	r2, r1, r4
    1660:	ea40 0002 	orr.w	r0, r0, r2
    1664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    166c:	f141 0100 	adc.w	r1, r1, #0
    1670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1674:	bf08      	it	eq
    1676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    167a:	bd70      	pop	{r4, r5, r6, pc}
    167c:	f1c4 0520 	rsb	r5, r4, #32
    1680:	fa00 f205 	lsl.w	r2, r0, r5
    1684:	ea4e 0e02 	orr.w	lr, lr, r2
    1688:	fa20 f304 	lsr.w	r3, r0, r4
    168c:	fa01 f205 	lsl.w	r2, r1, r5
    1690:	ea43 0302 	orr.w	r3, r3, r2
    1694:	fa21 f004 	lsr.w	r0, r1, r4
    1698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    169c:	fa21 f204 	lsr.w	r2, r1, r4
    16a0:	ea20 0002 	bic.w	r0, r0, r2
    16a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    16a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    16ac:	bf08      	it	eq
    16ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    16b2:	bd70      	pop	{r4, r5, r6, pc}
    16b4:	f094 0f00 	teq	r4, #0
    16b8:	d10f      	bne.n	16da <__aeabi_dmul+0x1c2>
    16ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    16be:	0040      	lsls	r0, r0, #1
    16c0:	eb41 0101 	adc.w	r1, r1, r1
    16c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    16c8:	bf08      	it	eq
    16ca:	3c01      	subeq	r4, #1
    16cc:	d0f7      	beq.n	16be <__aeabi_dmul+0x1a6>
    16ce:	ea41 0106 	orr.w	r1, r1, r6
    16d2:	f095 0f00 	teq	r5, #0
    16d6:	bf18      	it	ne
    16d8:	4770      	bxne	lr
    16da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    16de:	0052      	lsls	r2, r2, #1
    16e0:	eb43 0303 	adc.w	r3, r3, r3
    16e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    16e8:	bf08      	it	eq
    16ea:	3d01      	subeq	r5, #1
    16ec:	d0f7      	beq.n	16de <__aeabi_dmul+0x1c6>
    16ee:	ea43 0306 	orr.w	r3, r3, r6
    16f2:	4770      	bx	lr
    16f4:	ea94 0f0c 	teq	r4, ip
    16f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    16fc:	bf18      	it	ne
    16fe:	ea95 0f0c 	teqne	r5, ip
    1702:	d00c      	beq.n	171e <__aeabi_dmul+0x206>
    1704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1708:	bf18      	it	ne
    170a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    170e:	d1d1      	bne.n	16b4 <__aeabi_dmul+0x19c>
    1710:	ea81 0103 	eor.w	r1, r1, r3
    1714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1718:	f04f 0000 	mov.w	r0, #0
    171c:	bd70      	pop	{r4, r5, r6, pc}
    171e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1722:	bf06      	itte	eq
    1724:	4610      	moveq	r0, r2
    1726:	4619      	moveq	r1, r3
    1728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    172c:	d019      	beq.n	1762 <__aeabi_dmul+0x24a>
    172e:	ea94 0f0c 	teq	r4, ip
    1732:	d102      	bne.n	173a <__aeabi_dmul+0x222>
    1734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1738:	d113      	bne.n	1762 <__aeabi_dmul+0x24a>
    173a:	ea95 0f0c 	teq	r5, ip
    173e:	d105      	bne.n	174c <__aeabi_dmul+0x234>
    1740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    1744:	bf1c      	itt	ne
    1746:	4610      	movne	r0, r2
    1748:	4619      	movne	r1, r3
    174a:	d10a      	bne.n	1762 <__aeabi_dmul+0x24a>
    174c:	ea81 0103 	eor.w	r1, r1, r3
    1750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    175c:	f04f 0000 	mov.w	r0, #0
    1760:	bd70      	pop	{r4, r5, r6, pc}
    1762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    176a:	bd70      	pop	{r4, r5, r6, pc}

0000176c <__aeabi_ddiv>:
    176c:	b570      	push	{r4, r5, r6, lr}
    176e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    177a:	bf1d      	ittte	ne
    177c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1780:	ea94 0f0c 	teqne	r4, ip
    1784:	ea95 0f0c 	teqne	r5, ip
    1788:	f000 f8a7 	bleq	18da <__aeabi_ddiv+0x16e>
    178c:	eba4 0405 	sub.w	r4, r4, r5
    1790:	ea81 0e03 	eor.w	lr, r1, r3
    1794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1798:	ea4f 3101 	mov.w	r1, r1, lsl #12
    179c:	f000 8088 	beq.w	18b0 <__aeabi_ddiv+0x144>
    17a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    17a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    17a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    17ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    17b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    17b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    17b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    17bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    17c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    17c4:	429d      	cmp	r5, r3
    17c6:	bf08      	it	eq
    17c8:	4296      	cmpeq	r6, r2
    17ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    17ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
    17d2:	d202      	bcs.n	17da <__aeabi_ddiv+0x6e>
    17d4:	085b      	lsrs	r3, r3, #1
    17d6:	ea4f 0232 	mov.w	r2, r2, rrx
    17da:	1ab6      	subs	r6, r6, r2
    17dc:	eb65 0503 	sbc.w	r5, r5, r3
    17e0:	085b      	lsrs	r3, r3, #1
    17e2:	ea4f 0232 	mov.w	r2, r2, rrx
    17e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    17ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    17ee:	ebb6 0e02 	subs.w	lr, r6, r2
    17f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    17f6:	bf22      	ittt	cs
    17f8:	1ab6      	subcs	r6, r6, r2
    17fa:	4675      	movcs	r5, lr
    17fc:	ea40 000c 	orrcs.w	r0, r0, ip
    1800:	085b      	lsrs	r3, r3, #1
    1802:	ea4f 0232 	mov.w	r2, r2, rrx
    1806:	ebb6 0e02 	subs.w	lr, r6, r2
    180a:	eb75 0e03 	sbcs.w	lr, r5, r3
    180e:	bf22      	ittt	cs
    1810:	1ab6      	subcs	r6, r6, r2
    1812:	4675      	movcs	r5, lr
    1814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1818:	085b      	lsrs	r3, r3, #1
    181a:	ea4f 0232 	mov.w	r2, r2, rrx
    181e:	ebb6 0e02 	subs.w	lr, r6, r2
    1822:	eb75 0e03 	sbcs.w	lr, r5, r3
    1826:	bf22      	ittt	cs
    1828:	1ab6      	subcs	r6, r6, r2
    182a:	4675      	movcs	r5, lr
    182c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1830:	085b      	lsrs	r3, r3, #1
    1832:	ea4f 0232 	mov.w	r2, r2, rrx
    1836:	ebb6 0e02 	subs.w	lr, r6, r2
    183a:	eb75 0e03 	sbcs.w	lr, r5, r3
    183e:	bf22      	ittt	cs
    1840:	1ab6      	subcs	r6, r6, r2
    1842:	4675      	movcs	r5, lr
    1844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1848:	ea55 0e06 	orrs.w	lr, r5, r6
    184c:	d018      	beq.n	1880 <__aeabi_ddiv+0x114>
    184e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    1852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    1856:	ea4f 1606 	mov.w	r6, r6, lsl #4
    185a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    185e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    1862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    186a:	d1c0      	bne.n	17ee <__aeabi_ddiv+0x82>
    186c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1870:	d10b      	bne.n	188a <__aeabi_ddiv+0x11e>
    1872:	ea41 0100 	orr.w	r1, r1, r0
    1876:	f04f 0000 	mov.w	r0, #0
    187a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    187e:	e7b6      	b.n	17ee <__aeabi_ddiv+0x82>
    1880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1884:	bf04      	itt	eq
    1886:	4301      	orreq	r1, r0
    1888:	2000      	moveq	r0, #0
    188a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    188e:	bf88      	it	hi
    1890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1894:	f63f aeaf 	bhi.w	15f6 <__aeabi_dmul+0xde>
    1898:	ebb5 0c03 	subs.w	ip, r5, r3
    189c:	bf04      	itt	eq
    189e:	ebb6 0c02 	subseq.w	ip, r6, r2
    18a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    18a6:	f150 0000 	adcs.w	r0, r0, #0
    18aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    18ae:	bd70      	pop	{r4, r5, r6, pc}
    18b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    18b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    18b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    18bc:	bfc2      	ittt	gt
    18be:	ebd4 050c 	rsbsgt	r5, r4, ip
    18c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    18c6:	bd70      	popgt	{r4, r5, r6, pc}
    18c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    18cc:	f04f 0e00 	mov.w	lr, #0
    18d0:	3c01      	subs	r4, #1
    18d2:	e690      	b.n	15f6 <__aeabi_dmul+0xde>
    18d4:	ea45 0e06 	orr.w	lr, r5, r6
    18d8:	e68d      	b.n	15f6 <__aeabi_dmul+0xde>
    18da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    18de:	ea94 0f0c 	teq	r4, ip
    18e2:	bf08      	it	eq
    18e4:	ea95 0f0c 	teqeq	r5, ip
    18e8:	f43f af3b 	beq.w	1762 <__aeabi_dmul+0x24a>
    18ec:	ea94 0f0c 	teq	r4, ip
    18f0:	d10a      	bne.n	1908 <__aeabi_ddiv+0x19c>
    18f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    18f6:	f47f af34 	bne.w	1762 <__aeabi_dmul+0x24a>
    18fa:	ea95 0f0c 	teq	r5, ip
    18fe:	f47f af25 	bne.w	174c <__aeabi_dmul+0x234>
    1902:	4610      	mov	r0, r2
    1904:	4619      	mov	r1, r3
    1906:	e72c      	b.n	1762 <__aeabi_dmul+0x24a>
    1908:	ea95 0f0c 	teq	r5, ip
    190c:	d106      	bne.n	191c <__aeabi_ddiv+0x1b0>
    190e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1912:	f43f aefd 	beq.w	1710 <__aeabi_dmul+0x1f8>
    1916:	4610      	mov	r0, r2
    1918:	4619      	mov	r1, r3
    191a:	e722      	b.n	1762 <__aeabi_dmul+0x24a>
    191c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1920:	bf18      	it	ne
    1922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1926:	f47f aec5 	bne.w	16b4 <__aeabi_dmul+0x19c>
    192a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    192e:	f47f af0d 	bne.w	174c <__aeabi_dmul+0x234>
    1932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1936:	f47f aeeb 	bne.w	1710 <__aeabi_dmul+0x1f8>
    193a:	e712      	b.n	1762 <__aeabi_dmul+0x24a>

0000193c <__gedf2>:
    193c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    1940:	e006      	b.n	1950 <__cmpdf2+0x4>
    1942:	bf00      	nop

00001944 <__ledf2>:
    1944:	f04f 0c01 	mov.w	ip, #1
    1948:	e002      	b.n	1950 <__cmpdf2+0x4>
    194a:	bf00      	nop

0000194c <__cmpdf2>:
    194c:	f04f 0c01 	mov.w	ip, #1
    1950:	f84d cd04 	str.w	ip, [sp, #-4]!
    1954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    195c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1960:	bf18      	it	ne
    1962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    1966:	d01b      	beq.n	19a0 <__cmpdf2+0x54>
    1968:	b001      	add	sp, #4
    196a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    196e:	bf0c      	ite	eq
    1970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    1974:	ea91 0f03 	teqne	r1, r3
    1978:	bf02      	ittt	eq
    197a:	ea90 0f02 	teqeq	r0, r2
    197e:	2000      	moveq	r0, #0
    1980:	4770      	bxeq	lr
    1982:	f110 0f00 	cmn.w	r0, #0
    1986:	ea91 0f03 	teq	r1, r3
    198a:	bf58      	it	pl
    198c:	4299      	cmppl	r1, r3
    198e:	bf08      	it	eq
    1990:	4290      	cmpeq	r0, r2
    1992:	bf2c      	ite	cs
    1994:	17d8      	asrcs	r0, r3, #31
    1996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    199a:	f040 0001 	orr.w	r0, r0, #1
    199e:	4770      	bx	lr
    19a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    19a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    19a8:	d102      	bne.n	19b0 <__cmpdf2+0x64>
    19aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    19ae:	d107      	bne.n	19c0 <__cmpdf2+0x74>
    19b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    19b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    19b8:	d1d6      	bne.n	1968 <__cmpdf2+0x1c>
    19ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    19be:	d0d3      	beq.n	1968 <__cmpdf2+0x1c>
    19c0:	f85d 0b04 	ldr.w	r0, [sp], #4
    19c4:	4770      	bx	lr
    19c6:	bf00      	nop

000019c8 <__aeabi_cdrcmple>:
    19c8:	4684      	mov	ip, r0
    19ca:	4610      	mov	r0, r2
    19cc:	4662      	mov	r2, ip
    19ce:	468c      	mov	ip, r1
    19d0:	4619      	mov	r1, r3
    19d2:	4663      	mov	r3, ip
    19d4:	e000      	b.n	19d8 <__aeabi_cdcmpeq>
    19d6:	bf00      	nop

000019d8 <__aeabi_cdcmpeq>:
    19d8:	b501      	push	{r0, lr}
    19da:	f7ff ffb7 	bl	194c <__cmpdf2>
    19de:	2800      	cmp	r0, #0
    19e0:	bf48      	it	mi
    19e2:	f110 0f00 	cmnmi.w	r0, #0
    19e6:	bd01      	pop	{r0, pc}

000019e8 <__aeabi_dcmpeq>:
    19e8:	f84d ed08 	str.w	lr, [sp, #-8]!
    19ec:	f7ff fff4 	bl	19d8 <__aeabi_cdcmpeq>
    19f0:	bf0c      	ite	eq
    19f2:	2001      	moveq	r0, #1
    19f4:	2000      	movne	r0, #0
    19f6:	f85d fb08 	ldr.w	pc, [sp], #8
    19fa:	bf00      	nop

000019fc <__aeabi_dcmplt>:
    19fc:	f84d ed08 	str.w	lr, [sp, #-8]!
    1a00:	f7ff ffea 	bl	19d8 <__aeabi_cdcmpeq>
    1a04:	bf34      	ite	cc
    1a06:	2001      	movcc	r0, #1
    1a08:	2000      	movcs	r0, #0
    1a0a:	f85d fb08 	ldr.w	pc, [sp], #8
    1a0e:	bf00      	nop

00001a10 <__aeabi_dcmple>:
    1a10:	f84d ed08 	str.w	lr, [sp, #-8]!
    1a14:	f7ff ffe0 	bl	19d8 <__aeabi_cdcmpeq>
    1a18:	bf94      	ite	ls
    1a1a:	2001      	movls	r0, #1
    1a1c:	2000      	movhi	r0, #0
    1a1e:	f85d fb08 	ldr.w	pc, [sp], #8
    1a22:	bf00      	nop

00001a24 <__aeabi_dcmpge>:
    1a24:	f84d ed08 	str.w	lr, [sp, #-8]!
    1a28:	f7ff ffce 	bl	19c8 <__aeabi_cdrcmple>
    1a2c:	bf94      	ite	ls
    1a2e:	2001      	movls	r0, #1
    1a30:	2000      	movhi	r0, #0
    1a32:	f85d fb08 	ldr.w	pc, [sp], #8
    1a36:	bf00      	nop

00001a38 <__aeabi_dcmpgt>:
    1a38:	f84d ed08 	str.w	lr, [sp, #-8]!
    1a3c:	f7ff ffc4 	bl	19c8 <__aeabi_cdrcmple>
    1a40:	bf34      	ite	cc
    1a42:	2001      	movcc	r0, #1
    1a44:	2000      	movcs	r0, #0
    1a46:	f85d fb08 	ldr.w	pc, [sp], #8
    1a4a:	bf00      	nop

00001a4c <__aeabi_d2uiz>:
    1a4c:	004a      	lsls	r2, r1, #1
    1a4e:	d211      	bcs.n	1a74 <__aeabi_d2uiz+0x28>
    1a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1a54:	d211      	bcs.n	1a7a <__aeabi_d2uiz+0x2e>
    1a56:	d50d      	bpl.n	1a74 <__aeabi_d2uiz+0x28>
    1a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1a60:	d40e      	bmi.n	1a80 <__aeabi_d2uiz+0x34>
    1a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1a6e:	fa23 f002 	lsr.w	r0, r3, r2
    1a72:	4770      	bx	lr
    1a74:	f04f 0000 	mov.w	r0, #0
    1a78:	4770      	bx	lr
    1a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1a7e:	d102      	bne.n	1a86 <__aeabi_d2uiz+0x3a>
    1a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a84:	4770      	bx	lr
    1a86:	f04f 0000 	mov.w	r0, #0
    1a8a:	4770      	bx	lr

00001a8c <__aeabi_d2f>:
    1a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    1a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    1a94:	bf24      	itt	cs
    1a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    1a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    1a9e:	d90d      	bls.n	1abc <__aeabi_d2f+0x30>
    1aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    1aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    1aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    1ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    1ab4:	bf08      	it	eq
    1ab6:	f020 0001 	biceq.w	r0, r0, #1
    1aba:	4770      	bx	lr
    1abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    1ac0:	d121      	bne.n	1b06 <__aeabi_d2f+0x7a>
    1ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    1ac6:	bfbc      	itt	lt
    1ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    1acc:	4770      	bxlt	lr
    1ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    1ad6:	f1c2 0218 	rsb	r2, r2, #24
    1ada:	f1c2 0c20 	rsb	ip, r2, #32
    1ade:	fa10 f30c 	lsls.w	r3, r0, ip
    1ae2:	fa20 f002 	lsr.w	r0, r0, r2
    1ae6:	bf18      	it	ne
    1ae8:	f040 0001 	orrne.w	r0, r0, #1
    1aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    1af4:	fa03 fc0c 	lsl.w	ip, r3, ip
    1af8:	ea40 000c 	orr.w	r0, r0, ip
    1afc:	fa23 f302 	lsr.w	r3, r3, r2
    1b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1b04:	e7cc      	b.n	1aa0 <__aeabi_d2f+0x14>
    1b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
    1b0a:	d107      	bne.n	1b1c <__aeabi_d2f+0x90>
    1b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    1b10:	bf1e      	ittt	ne
    1b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    1b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    1b1a:	4770      	bxne	lr
    1b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    1b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop

00001b2c <__aeabi_frsub>:
    1b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    1b30:	e002      	b.n	1b38 <__addsf3>
    1b32:	bf00      	nop

00001b34 <__aeabi_fsub>:
    1b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00001b38 <__addsf3>:
    1b38:	0042      	lsls	r2, r0, #1
    1b3a:	bf1f      	itttt	ne
    1b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    1b40:	ea92 0f03 	teqne	r2, r3
    1b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    1b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1b4c:	d06a      	beq.n	1c24 <__addsf3+0xec>
    1b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    1b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    1b56:	bfc1      	itttt	gt
    1b58:	18d2      	addgt	r2, r2, r3
    1b5a:	4041      	eorgt	r1, r0
    1b5c:	4048      	eorgt	r0, r1
    1b5e:	4041      	eorgt	r1, r0
    1b60:	bfb8      	it	lt
    1b62:	425b      	neglt	r3, r3
    1b64:	2b19      	cmp	r3, #25
    1b66:	bf88      	it	hi
    1b68:	4770      	bxhi	lr
    1b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    1b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b76:	bf18      	it	ne
    1b78:	4240      	negne	r0, r0
    1b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    1b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1b86:	bf18      	it	ne
    1b88:	4249      	negne	r1, r1
    1b8a:	ea92 0f03 	teq	r2, r3
    1b8e:	d03f      	beq.n	1c10 <__addsf3+0xd8>
    1b90:	f1a2 0201 	sub.w	r2, r2, #1
    1b94:	fa41 fc03 	asr.w	ip, r1, r3
    1b98:	eb10 000c 	adds.w	r0, r0, ip
    1b9c:	f1c3 0320 	rsb	r3, r3, #32
    1ba0:	fa01 f103 	lsl.w	r1, r1, r3
    1ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    1ba8:	d502      	bpl.n	1bb0 <__addsf3+0x78>
    1baa:	4249      	negs	r1, r1
    1bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    1bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1bb4:	d313      	bcc.n	1bde <__addsf3+0xa6>
    1bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    1bba:	d306      	bcc.n	1bca <__addsf3+0x92>
    1bbc:	0840      	lsrs	r0, r0, #1
    1bbe:	ea4f 0131 	mov.w	r1, r1, rrx
    1bc2:	f102 0201 	add.w	r2, r2, #1
    1bc6:	2afe      	cmp	r2, #254	; 0xfe
    1bc8:	d251      	bcs.n	1c6e <__addsf3+0x136>
    1bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    1bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1bd2:	bf08      	it	eq
    1bd4:	f020 0001 	biceq.w	r0, r0, #1
    1bd8:	ea40 0003 	orr.w	r0, r0, r3
    1bdc:	4770      	bx	lr
    1bde:	0049      	lsls	r1, r1, #1
    1be0:	eb40 0000 	adc.w	r0, r0, r0
    1be4:	3a01      	subs	r2, #1
    1be6:	bf28      	it	cs
    1be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    1bec:	d2ed      	bcs.n	1bca <__addsf3+0x92>
    1bee:	fab0 fc80 	clz	ip, r0
    1bf2:	f1ac 0c08 	sub.w	ip, ip, #8
    1bf6:	ebb2 020c 	subs.w	r2, r2, ip
    1bfa:	fa00 f00c 	lsl.w	r0, r0, ip
    1bfe:	bfaa      	itet	ge
    1c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    1c04:	4252      	neglt	r2, r2
    1c06:	4318      	orrge	r0, r3
    1c08:	bfbc      	itt	lt
    1c0a:	40d0      	lsrlt	r0, r2
    1c0c:	4318      	orrlt	r0, r3
    1c0e:	4770      	bx	lr
    1c10:	f092 0f00 	teq	r2, #0
    1c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    1c18:	bf06      	itte	eq
    1c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    1c1e:	3201      	addeq	r2, #1
    1c20:	3b01      	subne	r3, #1
    1c22:	e7b5      	b.n	1b90 <__addsf3+0x58>
    1c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
    1c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1c2c:	bf18      	it	ne
    1c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1c32:	d021      	beq.n	1c78 <__addsf3+0x140>
    1c34:	ea92 0f03 	teq	r2, r3
    1c38:	d004      	beq.n	1c44 <__addsf3+0x10c>
    1c3a:	f092 0f00 	teq	r2, #0
    1c3e:	bf08      	it	eq
    1c40:	4608      	moveq	r0, r1
    1c42:	4770      	bx	lr
    1c44:	ea90 0f01 	teq	r0, r1
    1c48:	bf1c      	itt	ne
    1c4a:	2000      	movne	r0, #0
    1c4c:	4770      	bxne	lr
    1c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    1c52:	d104      	bne.n	1c5e <__addsf3+0x126>
    1c54:	0040      	lsls	r0, r0, #1
    1c56:	bf28      	it	cs
    1c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    1c5c:	4770      	bx	lr
    1c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    1c62:	bf3c      	itt	cc
    1c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    1c68:	4770      	bxcc	lr
    1c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    1c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    1c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1c76:	4770      	bx	lr
    1c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
    1c7c:	bf16      	itet	ne
    1c7e:	4608      	movne	r0, r1
    1c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    1c84:	4601      	movne	r1, r0
    1c86:	0242      	lsls	r2, r0, #9
    1c88:	bf06      	itte	eq
    1c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    1c8e:	ea90 0f01 	teqeq	r0, r1
    1c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    1c96:	4770      	bx	lr

00001c98 <__aeabi_ui2f>:
    1c98:	f04f 0300 	mov.w	r3, #0
    1c9c:	e004      	b.n	1ca8 <__aeabi_i2f+0x8>
    1c9e:	bf00      	nop

00001ca0 <__aeabi_i2f>:
    1ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    1ca4:	bf48      	it	mi
    1ca6:	4240      	negmi	r0, r0
    1ca8:	ea5f 0c00 	movs.w	ip, r0
    1cac:	bf08      	it	eq
    1cae:	4770      	bxeq	lr
    1cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    1cb4:	4601      	mov	r1, r0
    1cb6:	f04f 0000 	mov.w	r0, #0
    1cba:	e01c      	b.n	1cf6 <__aeabi_l2f+0x2a>

00001cbc <__aeabi_ul2f>:
    1cbc:	ea50 0201 	orrs.w	r2, r0, r1
    1cc0:	bf08      	it	eq
    1cc2:	4770      	bxeq	lr
    1cc4:	f04f 0300 	mov.w	r3, #0
    1cc8:	e00a      	b.n	1ce0 <__aeabi_l2f+0x14>
    1cca:	bf00      	nop

00001ccc <__aeabi_l2f>:
    1ccc:	ea50 0201 	orrs.w	r2, r0, r1
    1cd0:	bf08      	it	eq
    1cd2:	4770      	bxeq	lr
    1cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    1cd8:	d502      	bpl.n	1ce0 <__aeabi_l2f+0x14>
    1cda:	4240      	negs	r0, r0
    1cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1ce0:	ea5f 0c01 	movs.w	ip, r1
    1ce4:	bf02      	ittt	eq
    1ce6:	4684      	moveq	ip, r0
    1ce8:	4601      	moveq	r1, r0
    1cea:	2000      	moveq	r0, #0
    1cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    1cf0:	bf08      	it	eq
    1cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    1cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    1cfa:	fabc f28c 	clz	r2, ip
    1cfe:	3a08      	subs	r2, #8
    1d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    1d04:	db10      	blt.n	1d28 <__aeabi_l2f+0x5c>
    1d06:	fa01 fc02 	lsl.w	ip, r1, r2
    1d0a:	4463      	add	r3, ip
    1d0c:	fa00 fc02 	lsl.w	ip, r0, r2
    1d10:	f1c2 0220 	rsb	r2, r2, #32
    1d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1d18:	fa20 f202 	lsr.w	r2, r0, r2
    1d1c:	eb43 0002 	adc.w	r0, r3, r2
    1d20:	bf08      	it	eq
    1d22:	f020 0001 	biceq.w	r0, r0, #1
    1d26:	4770      	bx	lr
    1d28:	f102 0220 	add.w	r2, r2, #32
    1d2c:	fa01 fc02 	lsl.w	ip, r1, r2
    1d30:	f1c2 0220 	rsb	r2, r2, #32
    1d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    1d38:	fa21 f202 	lsr.w	r2, r1, r2
    1d3c:	eb43 0002 	adc.w	r0, r3, r2
    1d40:	bf08      	it	eq
    1d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1d46:	4770      	bx	lr

00001d48 <__aeabi_uldivmod>:
    1d48:	b953      	cbnz	r3, 1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>
    1d4a:	b94a      	cbnz	r2, 1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>
    1d4c:	2900      	cmp	r1, #0
    1d4e:	bf08      	it	eq
    1d50:	2800      	cmpeq	r0, #0
    1d52:	bf1c      	itt	ne
    1d54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1d58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1d5c:	f000 b82a 	b.w	1db4 <__aeabi_idiv0>
    1d60:	f1ad 0c08 	sub.w	ip, sp, #8
    1d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1d68:	f007 fd9f 	bl	98aa <__udivmoddi4>
    1d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1d74:	b004      	add	sp, #16
    1d76:	4770      	bx	lr

00001d78 <__aeabi_d2ulz>:
    1d78:	b5d0      	push	{r4, r6, r7, lr}
    1d7a:	4b0c      	ldr	r3, [pc, #48]	; (1dac <__aeabi_d2ulz+0x34>)
    1d7c:	2200      	movs	r2, #0
    1d7e:	4606      	mov	r6, r0
    1d80:	460f      	mov	r7, r1
    1d82:	f7ff fbc9 	bl	1518 <__aeabi_dmul>
    1d86:	f7ff fe61 	bl	1a4c <__aeabi_d2uiz>
    1d8a:	4604      	mov	r4, r0
    1d8c:	f7ff fb4a 	bl	1424 <__aeabi_ui2d>
    1d90:	4b07      	ldr	r3, [pc, #28]	; (1db0 <__aeabi_d2ulz+0x38>)
    1d92:	2200      	movs	r2, #0
    1d94:	f7ff fbc0 	bl	1518 <__aeabi_dmul>
    1d98:	4602      	mov	r2, r0
    1d9a:	460b      	mov	r3, r1
    1d9c:	4630      	mov	r0, r6
    1d9e:	4639      	mov	r1, r7
    1da0:	f7ff fa02 	bl	11a8 <__aeabi_dsub>
    1da4:	f7ff fe52 	bl	1a4c <__aeabi_d2uiz>
    1da8:	4621      	mov	r1, r4
    1daa:	bdd0      	pop	{r4, r6, r7, pc}
    1dac:	3df00000 	.word	0x3df00000
    1db0:	41f00000 	.word	0x41f00000

00001db4 <__aeabi_idiv0>:
    1db4:	4770      	bx	lr
    1db6:	bf00      	nop

00001db8 <__aeabi_dcmpun>:
    1db8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1dbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1dc0:	d102      	bne.n	1dc8 <__aeabi_dcmpun+0x10>
    1dc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1dc6:	d10a      	bne.n	1dde <__aeabi_dcmpun+0x26>
    1dc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1dcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1dd0:	d102      	bne.n	1dd8 <__aeabi_dcmpun+0x20>
    1dd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1dd6:	d102      	bne.n	1dde <__aeabi_dcmpun+0x26>
    1dd8:	f04f 0000 	mov.w	r0, #0
    1ddc:	4770      	bx	lr
    1dde:	f04f 0001 	mov.w	r0, #1
    1de2:	4770      	bx	lr

00001de4 <__aeabi_d2iz>:
    1de4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    1de8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1dec:	d215      	bcs.n	1e1a <__aeabi_d2iz+0x36>
    1dee:	d511      	bpl.n	1e14 <__aeabi_d2iz+0x30>
    1df0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1df4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1df8:	d912      	bls.n	1e20 <__aeabi_d2iz+0x3c>
    1dfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1e02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1e06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1e0a:	fa23 f002 	lsr.w	r0, r3, r2
    1e0e:	bf18      	it	ne
    1e10:	4240      	negne	r0, r0
    1e12:	4770      	bx	lr
    1e14:	f04f 0000 	mov.w	r0, #0
    1e18:	4770      	bx	lr
    1e1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1e1e:	d105      	bne.n	1e2c <__aeabi_d2iz+0x48>
    1e20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    1e24:	bf08      	it	eq
    1e26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1e2a:	4770      	bx	lr
    1e2c:	f04f 0000 	mov.w	r0, #0
    1e30:	4770      	bx	lr
    1e32:	bf00      	nop
    1e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1e36:	4c14      	ldr	r4, [pc, #80]	; (1e88 <__aeabi_d2iz+0xa4>)
    1e38:	7a20      	ldrb	r0, [r4, #8]
    1e3a:	f88d 0001 	strb.w	r0, [sp, #1]
    1e3e:	79e0      	ldrb	r0, [r4, #7]
    1e40:	f88d 0000 	strb.w	r0, [sp]
    1e44:	79a0      	ldrb	r0, [r4, #6]
    1e46:	f8ad 0004 	strh.w	r0, [sp, #4]
    1e4a:	7960      	ldrb	r0, [r4, #5]
    1e4c:	f8ad 0002 	strh.w	r0, [sp, #2]
    1e50:	4668      	mov	r0, sp
    1e52:	f002 fbe1 	bl	4618 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    1e56:	b108      	cbz	r0, 1e5c <__aeabi_d2iz+0x78>
    1e58:	21ad      	movs	r1, #173	; 0xad
    1e5a:	e010      	b.n	1e7e <__aeabi_d2iz+0x9a>
    1e5c:	68e0      	ldr	r0, [r4, #12]
    1e5e:	9002      	str	r0, [sp, #8]
    1e60:	a802      	add	r0, sp, #8
    1e62:	f002 fbef 	bl	4644 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    1e66:	b108      	cbz	r0, 1e6c <__aeabi_d2iz+0x88>
    1e68:	21b1      	movs	r1, #177	; 0xb1
    1e6a:	e008      	b.n	1e7e <__aeabi_d2iz+0x9a>
    1e6c:	4807      	ldr	r0, [pc, #28]	; (1e8c <__aeabi_d2iz+0xa8>)
    1e6e:	6800      	ldr	r0, [r0, #0]
    1e70:	9003      	str	r0, [sp, #12]
    1e72:	a803      	add	r0, sp, #12
    1e74:	f009 fc98 	bl	b7a8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    1e78:	2800      	cmp	r0, #0
    1e7a:	d003      	beq.n	1e84 <__aeabi_d2iz+0xa0>
    1e7c:	21b5      	movs	r1, #181	; 0xb5
    1e7e:	2003      	movs	r0, #3
    1e80:	f000 f8e4 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e84:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1e86:	0000      	.short	0x0000
    1e88:	20000f78 	.word	0x20000f78
    1e8c:	000020d4 	.word	0x000020d4

00001e90 <sdc_build_revision_get>:
    1e90:	b510      	push	{r4, lr}
    1e92:	b128      	cbz	r0, 1ea0 <sdc_build_revision_get+0x10>
    1e94:	2214      	movs	r2, #20
    1e96:	4904      	ldr	r1, [pc, #16]	; (1ea8 <sdc_build_revision_get+0x18>)
    1e98:	f00a fa3f 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1e9c:	2000      	movs	r0, #0
    1e9e:	bd10      	pop	{r4, pc}
    1ea0:	f06f 0015 	mvn.w	r0, #21
    1ea4:	bd10      	pop	{r4, pc}
    1ea6:	0000      	.short	0x0000
    1ea8:	000020fc 	.word	0x000020fc

00001eac <sdc_cfg_set>:
    1eac:	b570      	push	{r4, r5, r6, lr}
    1eae:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    1eb2:	bb78      	cbnz	r0, 1f14 <sdc_cfg_set+0x68>
    1eb4:	4c22      	ldr	r4, [pc, #136]	; (1f40 <sdc_cfg_set+0x94>)
    1eb6:	7860      	ldrb	r0, [r4, #1]
    1eb8:	b108      	cbz	r0, 1ebe <sdc_cfg_set+0x12>
    1eba:	11a8      	asrs	r0, r5, #6
    1ebc:	bd70      	pop	{r4, r5, r6, pc}
    1ebe:	b1f9      	cbz	r1, 1f00 <sdc_cfg_set+0x54>
    1ec0:	f06f 0015 	mvn.w	r0, #21
    1ec4:	2a00      	cmp	r2, #0
    1ec6:	d0f9      	beq.n	1ebc <sdc_cfg_set+0x10>
    1ec8:	4b1e      	ldr	r3, [pc, #120]	; (1f44 <sdc_cfg_set+0x98>)
    1eca:	1e89      	subs	r1, r1, #2
    1ecc:	2907      	cmp	r1, #7
    1ece:	d231      	bcs.n	1f34 <sdc_cfg_set+0x88>
    1ed0:	e8df f001 	tbb	[pc, r1]
    1ed4:	1a170704 	.word	0x1a170704
    1ed8:	00211d30 	.word	0x00211d30
    1edc:	7810      	ldrb	r0, [r2, #0]
    1ede:	7058      	strb	r0, [r3, #1]
    1ee0:	e01d      	b.n	1f1e <sdc_cfg_set+0x72>
    1ee2:	7891      	ldrb	r1, [r2, #2]
    1ee4:	2900      	cmp	r1, #0
    1ee6:	d0e9      	beq.n	1ebc <sdc_cfg_set+0x10>
    1ee8:	78d1      	ldrb	r1, [r2, #3]
    1eea:	2900      	cmp	r1, #0
    1eec:	d0e6      	beq.n	1ebc <sdc_cfg_set+0x10>
    1eee:	7811      	ldrb	r1, [r2, #0]
    1ef0:	291b      	cmp	r1, #27
    1ef2:	d3e3      	bcc.n	1ebc <sdc_cfg_set+0x10>
    1ef4:	7851      	ldrb	r1, [r2, #1]
    1ef6:	291b      	cmp	r1, #27
    1ef8:	d3e0      	bcc.n	1ebc <sdc_cfg_set+0x10>
    1efa:	6810      	ldr	r0, [r2, #0]
    1efc:	f8c3 0005 	str.w	r0, [r3, #5]
    1f00:	e00d      	b.n	1f1e <sdc_cfg_set+0x72>
    1f02:	6810      	ldr	r0, [r2, #0]
    1f04:	60d8      	str	r0, [r3, #12]
    1f06:	e00a      	b.n	1f1e <sdc_cfg_set+0x72>
    1f08:	7810      	ldrb	r0, [r2, #0]
    1f0a:	7098      	strb	r0, [r3, #2]
    1f0c:	e007      	b.n	1f1e <sdc_cfg_set+0x72>
    1f0e:	8810      	ldrh	r0, [r2, #0]
    1f10:	8258      	strh	r0, [r3, #18]
    1f12:	e004      	b.n	1f1e <sdc_cfg_set+0x72>
    1f14:	e00e      	b.n	1f34 <sdc_cfg_set+0x88>
    1f16:	8811      	ldrh	r1, [r2, #0]
    1f18:	29ff      	cmp	r1, #255	; 0xff
    1f1a:	d8cf      	bhi.n	1ebc <sdc_cfg_set+0x10>
    1f1c:	7519      	strb	r1, [r3, #20]
    1f1e:	2201      	movs	r2, #1
    1f20:	4908      	ldr	r1, [pc, #32]	; (1f44 <sdc_cfg_set+0x98>)
    1f22:	2000      	movs	r0, #0
    1f24:	f007 fe23 	bl	9b6e <strlen+0x10>
    1f28:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    1f2c:	db04      	blt.n	1f38 <sdc_cfg_set+0x8c>
    1f2e:	f06f 000b 	mvn.w	r0, #11
    1f32:	bd70      	pop	{r4, r5, r6, pc}
    1f34:	4628      	mov	r0, r5
    1f36:	bd70      	pop	{r4, r5, r6, pc}
    1f38:	2101      	movs	r1, #1
    1f3a:	70a1      	strb	r1, [r4, #2]
    1f3c:	bd70      	pop	{r4, r5, r6, pc}
    1f3e:	0000      	.short	0x0000
    1f40:	20000040 	.word	0x20000040
    1f44:	20000f78 	.word	0x20000f78

00001f48 <sdc_disable>:
    1f48:	b510      	push	{r4, lr}
    1f4a:	4c07      	ldr	r4, [pc, #28]	; (1f68 <sdc_disable+0x20>)
    1f4c:	7860      	ldrb	r0, [r4, #1]
    1f4e:	b120      	cbz	r0, 1f5a <sdc_disable+0x12>
    1f50:	f002 fd10 	bl	4974 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    1f54:	7820      	ldrb	r0, [r4, #0]
    1f56:	f007 fbb1 	bl	96bc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1f5a:	f000 fddb 	bl	2b14 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    1f5e:	f000 feb3 	bl	2cc8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    1f62:	2000      	movs	r0, #0
    1f64:	7060      	strb	r0, [r4, #1]
    1f66:	bd10      	pop	{r4, pc}
    1f68:	20000040 	.word	0x20000040

00001f6c <sdc_enable>:
    1f6c:	b570      	push	{r4, r5, r6, lr}
    1f6e:	460c      	mov	r4, r1
    1f70:	0005      	movs	r5, r0
    1f72:	d002      	beq.n	1f7a <sdc_enable+0xe>
    1f74:	b10c      	cbz	r4, 1f7a <sdc_enable+0xe>
    1f76:	0760      	lsls	r0, r4, #29
    1f78:	d002      	beq.n	1f80 <sdc_enable+0x14>
    1f7a:	f06f 0015 	mvn.w	r0, #21
    1f7e:	bd70      	pop	{r4, r5, r6, pc}
    1f80:	f000 f8e2 	bl	2148 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    1f84:	b1a8      	cbz	r0, 1fb2 <sdc_enable+0x46>
    1f86:	4628      	mov	r0, r5
    1f88:	f007 fb5e 	bl	9648 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1f8c:	4d0a      	ldr	r5, [pc, #40]	; (1fb8 <sdc_enable+0x4c>)
    1f8e:	2200      	movs	r2, #0
    1f90:	490a      	ldr	r1, [pc, #40]	; (1fbc <sdc_enable+0x50>)
    1f92:	7028      	strb	r0, [r5, #0]
    1f94:	4620      	mov	r0, r4
    1f96:	f007 fdea 	bl	9b6e <strlen+0x10>
    1f9a:	f009 fe59 	bl	bc50 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    1f9e:	2100      	movs	r1, #0
    1fa0:	7828      	ldrb	r0, [r5, #0]
    1fa2:	f002 fcd1 	bl	4948 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    1fa6:	f7ff ff45 	bl	1e34 <__aeabi_d2iz+0x50>
    1faa:	2001      	movs	r0, #1
    1fac:	7068      	strb	r0, [r5, #1]
    1fae:	2000      	movs	r0, #0
    1fb0:	bd70      	pop	{r4, r5, r6, pc}
    1fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1fb6:	bd70      	pop	{r4, r5, r6, pc}
    1fb8:	20000040 	.word	0x20000040
    1fbc:	20000f78 	.word	0x20000f78

00001fc0 <sdc_init>:
    1fc0:	b530      	push	{r4, r5, lr}
    1fc2:	b089      	sub	sp, #36	; 0x24
    1fc4:	0004      	movs	r4, r0
    1fc6:	d00c      	beq.n	1fe2 <sdc_init+0x22>
    1fc8:	f007 fae6 	bl	9598 <mpsl_is_initialized>
    1fcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1fd0:	b120      	cbz	r0, 1fdc <sdc_init+0x1c>
    1fd2:	f007 f997 	bl	9304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    1fd6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    1fda:	d905      	bls.n	1fe8 <sdc_init+0x28>
    1fdc:	4628      	mov	r0, r5
    1fde:	b009      	add	sp, #36	; 0x24
    1fe0:	bd30      	pop	{r4, r5, pc}
    1fe2:	f06f 0015 	mvn.w	r0, #21
    1fe6:	e7fa      	b.n	1fde <sdc_init+0x1e>
    1fe8:	4d13      	ldr	r5, [pc, #76]	; (2038 <sdc_init+0x78>)
    1fea:	4814      	ldr	r0, [pc, #80]	; (203c <sdc_init+0x7c>)
    1fec:	606c      	str	r4, [r5, #4]
    1fee:	f000 f9bf 	bl	2370 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    1ff2:	2000      	movs	r0, #0
    1ff4:	7068      	strb	r0, [r5, #1]
    1ff6:	70a8      	strb	r0, [r5, #2]
    1ff8:	4601      	mov	r1, r0
    1ffa:	2224      	movs	r2, #36	; 0x24
    1ffc:	4668      	mov	r0, sp
    1ffe:	f00a fa06 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2002:	2224      	movs	r2, #36	; 0x24
    2004:	490e      	ldr	r1, [pc, #56]	; (2040 <sdc_init+0x80>)
    2006:	4668      	mov	r0, sp
    2008:	f00a f987 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    200c:	2224      	movs	r2, #36	; 0x24
    200e:	4669      	mov	r1, sp
    2010:	480c      	ldr	r0, [pc, #48]	; (2044 <sdc_init+0x84>)
    2012:	f00a f982 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2016:	f3ef 8410 	mrs	r4, PRIMASK
    201a:	b672      	cpsid	i
    201c:	f000 fd88 	bl	2b30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    2020:	4809      	ldr	r0, [pc, #36]	; (2048 <sdc_init+0x88>)
    2022:	f000 fe5d 	bl	2ce0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    2026:	b118      	cbz	r0, 2030 <sdc_init+0x70>
    2028:	21cb      	movs	r1, #203	; 0xcb
    202a:	2003      	movs	r0, #3
    202c:	f000 f80e 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2030:	b904      	cbnz	r4, 2034 <sdc_init+0x74>
    2032:	b662      	cpsie	i
    2034:	2000      	movs	r0, #0
    2036:	e7d2      	b.n	1fde <sdc_init+0x1e>
    2038:	20000040 	.word	0x20000040
    203c:	00001e35 	.word	0x00001e35
    2040:	000020d8 	.word	0x000020d8
    2044:	20000f78 	.word	0x20000f78
    2048:	00002175 	.word	0x00002175

0000204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    204c:	b50e      	push	{r1, r2, r3, lr}
    204e:	b672      	cpsid	i
    2050:	4a15      	ldr	r2, [pc, #84]	; (20a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    2052:	6855      	ldr	r5, [r2, #4]
    2054:	b1dd      	cbz	r5, 208e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    2056:	2200      	movs	r2, #0
    2058:	4603      	mov	r3, r0
    205a:	466e      	mov	r6, sp
    205c:	240a      	movs	r4, #10
    205e:	e003      	b.n	2068 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    2060:	fbb0 f0f4 	udiv	r0, r0, r4
    2064:	1c52      	adds	r2, r2, #1
    2066:	b2d2      	uxtb	r2, r2
    2068:	2800      	cmp	r0, #0
    206a:	d1f9      	bne.n	2060 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    206c:	54b0      	strb	r0, [r6, r2]
    206e:	e00a      	b.n	2086 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    2070:	b2d8      	uxtb	r0, r3
    2072:	fbb0 f7f4 	udiv	r7, r0, r4
    2076:	fbb3 f3f4 	udiv	r3, r3, r4
    207a:	fb04 0017 	mls	r0, r4, r7, r0
    207e:	1e52      	subs	r2, r2, #1
    2080:	b2d2      	uxtb	r2, r2
    2082:	3030      	adds	r0, #48	; 0x30
    2084:	54b0      	strb	r0, [r6, r2]
    2086:	2a00      	cmp	r2, #0
    2088:	d1f2      	bne.n	2070 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    208a:	4630      	mov	r0, r6
    208c:	47a8      	blx	r5
    208e:	f3bf 8f4f 	dsb	sy
    2092:	4806      	ldr	r0, [pc, #24]	; (20ac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    2094:	6801      	ldr	r1, [r0, #0]
    2096:	4a06      	ldr	r2, [pc, #24]	; (20b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    2098:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    209c:	4311      	orrs	r1, r2
    209e:	6001      	str	r1, [r0, #0]
    20a0:	f3bf 8f4f 	dsb	sy
    20a4:	bf00      	nop
    20a6:	e7fd      	b.n	20a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    20a8:	20000040 	.word	0x20000040
    20ac:	e000ed0c 	.word	0xe000ed0c
    20b0:	05fa0004 	.word	0x05fa0004

000020b4 <sdc_support_adv>:
    20b4:	4806      	ldr	r0, [pc, #24]	; (20d0 <sdc_support_adv+0x1c>)
    20b6:	b510      	push	{r4, lr}
    20b8:	7881      	ldrb	r1, [r0, #2]
    20ba:	7840      	ldrb	r0, [r0, #1]
    20bc:	4301      	orrs	r1, r0
    20be:	d002      	beq.n	20c6 <sdc_support_adv+0x12>
    20c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    20c4:	bd10      	pop	{r4, pc}
    20c6:	f002 fc65 	bl	4994 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    20ca:	2000      	movs	r0, #0
    20cc:	bd10      	pop	{r4, pc}
    20ce:	0000      	.short	0x0000
    20d0:	20000040 	.word	0x20000040
    20d4:	00000001 	.word	0x00000001
    20d8:	00010100 	.word	0x00010100
    20dc:	031b1b00 	.word	0x031b1b00
    20e0:	00000002 	.word	0x00000002
    20e4:	00001d4c 	.word	0x00001d4c
    20e8:	001f0000 	.word	0x001f0000
    20ec:	00000008 	.word	0x00000008
	...
    20fc:	c12e7ee0 	.word	0xc12e7ee0
    2100:	2385055e 	.word	0x2385055e
    2104:	fadc1546 	.word	0xfadc1546
    2108:	707d298e 	.word	0x707d298e
    210c:	fca59310 	.word	0xfca59310

00002110 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    2110:	4a05      	ldr	r2, [pc, #20]	; (2128 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    2112:	b510      	push	{r4, lr}
    2114:	6852      	ldr	r2, [r2, #4]
    2116:	b112      	cbz	r2, 211e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    2118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    211c:	4710      	bx	r2
    211e:	2192      	movs	r1, #146	; 0x92
    2120:	2004      	movs	r0, #4
    2122:	f7ff ff93 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2126:	0000      	.short	0x0000
    2128:	20000f9c 	.word	0x20000f9c

0000212c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    212c:	4a05      	ldr	r2, [pc, #20]	; (2144 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    212e:	b510      	push	{r4, lr}
    2130:	6892      	ldr	r2, [r2, #8]
    2132:	b112      	cbz	r2, 213a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    2134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2138:	4710      	bx	r2
    213a:	2198      	movs	r1, #152	; 0x98
    213c:	2004      	movs	r0, #4
    213e:	f7ff ff85 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2142:	0000      	.short	0x0000
    2144:	20000f9c 	.word	0x20000f9c

00002148 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    2148:	4805      	ldr	r0, [pc, #20]	; (2160 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    214a:	6801      	ldr	r1, [r0, #0]
    214c:	b129      	cbz	r1, 215a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    214e:	6841      	ldr	r1, [r0, #4]
    2150:	b119      	cbz	r1, 215a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    2152:	6880      	ldr	r0, [r0, #8]
    2154:	b108      	cbz	r0, 215a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    2156:	2001      	movs	r0, #1
    2158:	4770      	bx	lr
    215a:	2000      	movs	r0, #0
    215c:	4770      	bx	lr
    215e:	0000      	.short	0x0000
    2160:	20000f9c 	.word	0x20000f9c

00002164 <sdc_rand_source_register>:
    2164:	4902      	ldr	r1, [pc, #8]	; (2170 <sdc_rand_source_register+0xc>)
    2166:	c80d      	ldmia	r0, {r0, r2, r3}
    2168:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    216c:	2000      	movs	r0, #0
    216e:	4770      	bx	lr
    2170:	20000f9c 	.word	0x20000f9c

00002174 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    2174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2176:	4c12      	ldr	r4, [pc, #72]	; (21c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    2178:	2600      	movs	r6, #0
    217a:	6825      	ldr	r5, [r4, #0]
    217c:	e011      	b.n	21a2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    217e:	9800      	ldr	r0, [sp, #0]
    2180:	2802      	cmp	r0, #2
    2182:	d002      	beq.n	218a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    2184:	2803      	cmp	r0, #3
    2186:	d10c      	bne.n	21a2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    2188:	e006      	b.n	2198 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    218a:	6820      	ldr	r0, [r4, #0]
    218c:	b110      	cbz	r0, 2194 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    218e:	2000      	movs	r0, #0
    2190:	6026      	str	r6, [r4, #0]
    2192:	e005      	b.n	21a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    2194:	2128      	movs	r1, #40	; 0x28
    2196:	e00c      	b.n	21b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    2198:	6820      	ldr	r0, [r4, #0]
    219a:	b168      	cbz	r0, 21b8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    219c:	2001      	movs	r0, #1
    219e:	6026      	str	r6, [r4, #0]
    21a0:	47a8      	blx	r5
    21a2:	4668      	mov	r0, sp
    21a4:	f000 fd62 	bl	2c6c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    21a8:	2800      	cmp	r0, #0
    21aa:	d0e8      	beq.n	217e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    21ac:	2805      	cmp	r0, #5
    21ae:	d005      	beq.n	21bc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    21b0:	2135      	movs	r1, #53	; 0x35
    21b2:	2004      	movs	r0, #4
    21b4:	f7ff ff4a 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    21b8:	212d      	movs	r1, #45	; 0x2d
    21ba:	e7fa      	b.n	21b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    21bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21be:	0000      	.short	0x0000
    21c0:	20000048 	.word	0x20000048

000021c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    21c4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    21c8:	4e28      	ldr	r6, [pc, #160]	; (226c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    21ca:	4605      	mov	r5, r0
    21cc:	1d00      	adds	r0, r0, #4
    21ce:	f106 0744 	add.w	r7, r6, #68	; 0x44
    21d2:	6030      	str	r0, [r6, #0]
    21d4:	7838      	ldrb	r0, [r7, #0]
    21d6:	b158      	cbz	r0, 21f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    21d8:	78ba      	ldrb	r2, [r7, #2]
    21da:	463c      	mov	r4, r7
    21dc:	1c79      	adds	r1, r7, #1
    21de:	4628      	mov	r0, r5
    21e0:	1c92      	adds	r2, r2, #2
    21e2:	f00a f89a 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21e6:	2000      	movs	r0, #0
    21e8:	7020      	strb	r0, [r4, #0]
    21ea:	2004      	movs	r0, #4
    21ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    21f0:	481e      	ldr	r0, [pc, #120]	; (226c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    21f2:	f000 ff7d 	bl	30f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    21f6:	4604      	mov	r4, r0
    21f8:	2802      	cmp	r0, #2
    21fa:	d004      	beq.n	2206 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
    21fc:	2c04      	cmp	r4, #4
    21fe:	d007      	beq.n	2210 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
    2200:	2c08      	cmp	r4, #8
    2202:	d02c      	beq.n	225e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
    2204:	e02f      	b.n	2266 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
    2206:	4919      	ldr	r1, [pc, #100]	; (226c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    2208:	4628      	mov	r0, r5
    220a:	f007 fd35 	bl	9c78 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    220e:	e02a      	b.n	2266 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
    2210:	7830      	ldrb	r0, [r6, #0]
    2212:	2808      	cmp	r0, #8
    2214:	d104      	bne.n	2220 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
    2216:	2105      	movs	r1, #5
    2218:	203e      	movs	r0, #62	; 0x3e
    221a:	f007 fd19 	bl	9c50 <strlen+0xf2>
    221e:	b150      	cbz	r0, 2236 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
    2220:	4912      	ldr	r1, [pc, #72]	; (226c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    2222:	4628      	mov	r0, r5
    2224:	f007 fd8d 	bl	9d42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    2228:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    222c:	d30e      	bcc.n	224c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
    222e:	21c7      	movs	r1, #199	; 0xc7
    2230:	2008      	movs	r0, #8
    2232:	f7ff ff0b 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2236:	88b0      	ldrh	r0, [r6, #4]
    2238:	f8ad 0000 	strh.w	r0, [sp]
    223c:	a901      	add	r1, sp, #4
    223e:	4668      	mov	r0, sp
    2240:	f007 ffd1 	bl	a1e6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    2244:	2800      	cmp	r0, #0
    2246:	d0c5      	beq.n	21d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    2248:	21a8      	movs	r1, #168	; 0xa8
    224a:	e7f1      	b.n	2230 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
    224c:	2800      	cmp	r0, #0
    224e:	d0c1      	beq.n	21d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    2250:	78a9      	ldrb	r1, [r5, #2]
    2252:	7828      	ldrb	r0, [r5, #0]
    2254:	f007 fcfc 	bl	9c50 <strlen+0xf2>
    2258:	2800      	cmp	r0, #0
    225a:	d0bb      	beq.n	21d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    225c:	e003      	b.n	2266 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
    225e:	4903      	ldr	r1, [pc, #12]	; (226c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
    2260:	4628      	mov	r0, r5
    2262:	f007 fd37 	bl	9cd4 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    2266:	4620      	mov	r0, r4
    2268:	e7c0      	b.n	21ec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    226a:	0000      	.short	0x0000
    226c:	20000fa8 	.word	0x20000fa8
    2270:	b570      	push	{r4, r5, r6, lr}
    2272:	780a      	ldrb	r2, [r1, #0]
    2274:	7082      	strb	r2, [r0, #2]
    2276:	b33a      	cbz	r2, 22c8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
    2278:	2a01      	cmp	r2, #1
    227a:	d825      	bhi.n	22c8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
    227c:	2313      	movs	r3, #19
    227e:	7003      	strb	r3, [r0, #0]
    2280:	2300      	movs	r3, #0
    2282:	e00a      	b.n	229a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
    2284:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    2288:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    228c:	78a6      	ldrb	r6, [r4, #2]
    228e:	70ee      	strb	r6, [r5, #3]
    2290:	8864      	ldrh	r4, [r4, #2]
    2292:	0a24      	lsrs	r4, r4, #8
    2294:	1c5b      	adds	r3, r3, #1
    2296:	712c      	strb	r4, [r5, #4]
    2298:	b2db      	uxtb	r3, r3
    229a:	4293      	cmp	r3, r2
    229c:	d3f2      	bcc.n	2284 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
    229e:	2300      	movs	r3, #0
    22a0:	e00b      	b.n	22ba <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
    22a2:	bf00      	nop
    22a4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    22a8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    22ac:	792e      	ldrb	r6, [r5, #4]
    22ae:	7166      	strb	r6, [r4, #5]
    22b0:	88ad      	ldrh	r5, [r5, #4]
    22b2:	0a2d      	lsrs	r5, r5, #8
    22b4:	1c5b      	adds	r3, r3, #1
    22b6:	71a5      	strb	r5, [r4, #6]
    22b8:	b2db      	uxtb	r3, r3
    22ba:	4293      	cmp	r3, r2
    22bc:	d3f2      	bcc.n	22a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
    22be:	2101      	movs	r1, #1
    22c0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    22c4:	b2c0      	uxtb	r0, r0
    22c6:	bd70      	pop	{r4, r5, r6, pc}
    22c8:	2000      	movs	r0, #0
    22ca:	bd70      	pop	{r4, r5, r6, pc}

000022cc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    22cc:	2840      	cmp	r0, #64	; 0x40
    22ce:	d203      	bcs.n	22d8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    22d0:	1e40      	subs	r0, r0, #1
    22d2:	b2c1      	uxtb	r1, r0
    22d4:	4805      	ldr	r0, [pc, #20]	; (22ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    22d6:	e005      	b.n	22e4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    22d8:	28ff      	cmp	r0, #255	; 0xff
    22da:	d005      	beq.n	22e8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    22dc:	3840      	subs	r0, #64	; 0x40
    22de:	b2c1      	uxtb	r1, r0
    22e0:	4802      	ldr	r0, [pc, #8]	; (22ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    22e2:	3008      	adds	r0, #8
    22e4:	f007 bf2c 	b.w	a140 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    22e8:	2001      	movs	r0, #1
    22ea:	4770      	bx	lr
    22ec:	2000004c 	.word	0x2000004c

000022f0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    22f0:	1e40      	subs	r0, r0, #1
    22f2:	b2c1      	uxtb	r1, r0
    22f4:	4801      	ldr	r0, [pc, #4]	; (22fc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    22f6:	f007 bf23 	b.w	a140 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    22fa:	0000      	.short	0x0000
    22fc:	2000005c 	.word	0x2000005c

00002300 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    2300:	4902      	ldr	r1, [pc, #8]	; (230c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    2302:	6802      	ldr	r2, [r0, #0]
    2304:	610a      	str	r2, [r1, #16]
    2306:	6840      	ldr	r0, [r0, #4]
    2308:	6148      	str	r0, [r1, #20]
    230a:	4770      	bx	lr
    230c:	2000004c 	.word	0x2000004c

00002310 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    2310:	4905      	ldr	r1, [pc, #20]	; (2328 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    2312:	6802      	ldr	r2, [r0, #0]
    2314:	600a      	str	r2, [r1, #0]
    2316:	6840      	ldr	r0, [r0, #4]
    2318:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    231c:	600a      	str	r2, [r1, #0]
    231e:	4a03      	ldr	r2, [pc, #12]	; (232c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    2320:	4310      	orrs	r0, r2
    2322:	6048      	str	r0, [r1, #4]
    2324:	4770      	bx	lr
    2326:	0000      	.short	0x0000
    2328:	2000004c 	.word	0x2000004c
    232c:	024007f8 	.word	0x024007f8

00002330 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    2330:	4807      	ldr	r0, [pc, #28]	; (2350 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    2332:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2336:	2200      	movs	r2, #0
    2338:	6001      	str	r1, [r0, #0]
    233a:	0cc9      	lsrs	r1, r1, #19
    233c:	6041      	str	r1, [r0, #4]
    233e:	f100 0108 	add.w	r1, r0, #8
    2342:	201f      	movs	r0, #31
    2344:	600a      	str	r2, [r1, #0]
    2346:	604a      	str	r2, [r1, #4]
    2348:	3108      	adds	r1, #8
    234a:	e9c1 0200 	strd	r0, r2, [r1]
    234e:	4770      	bx	lr
    2350:	2000004c 	.word	0x2000004c

00002354 <sdc_hci_cmd_cb_reset>:
    2354:	b510      	push	{r4, lr}
    2356:	f7ff ffeb 	bl	2330 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    235a:	f009 faf4 	bl	b946 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    235e:	4604      	mov	r4, r0
    2360:	4802      	ldr	r0, [pc, #8]	; (236c <sdc_hci_cmd_cb_reset+0x18>)
    2362:	6800      	ldr	r0, [r0, #0]
    2364:	b100      	cbz	r0, 2368 <sdc_hci_cmd_cb_reset+0x14>
    2366:	4780      	blx	r0
    2368:	4620      	mov	r0, r4
    236a:	bd10      	pop	{r4, pc}
    236c:	20000064 	.word	0x20000064

00002370 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    2370:	4901      	ldr	r1, [pc, #4]	; (2378 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    2372:	6008      	str	r0, [r1, #0]
    2374:	4770      	bx	lr
    2376:	0000      	.short	0x0000
    2378:	20000064 	.word	0x20000064

0000237c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2380:	4604      	mov	r4, r0
    2382:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    2386:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
    238a:	4d1f      	ldr	r5, [pc, #124]	; (2408 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    238c:	4e1e      	ldr	r6, [pc, #120]	; (2408 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    238e:	3d10      	subs	r5, #16
    2390:	2210      	movs	r2, #16
    2392:	2100      	movs	r1, #0
    2394:	4620      	mov	r0, r4
    2396:	f00a f83a 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    239a:	2210      	movs	r2, #16
    239c:	2100      	movs	r1, #0
    239e:	f104 0010 	add.w	r0, r4, #16
    23a2:	f00a f834 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    23a6:	6828      	ldr	r0, [r5, #0]
    23a8:	1c40      	adds	r0, r0, #1
    23aa:	d108      	bne.n	23be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    23ac:	6868      	ldr	r0, [r5, #4]
    23ae:	1c40      	adds	r0, r0, #1
    23b0:	d105      	bne.n	23be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    23b2:	68a8      	ldr	r0, [r5, #8]
    23b4:	1c40      	adds	r0, r0, #1
    23b6:	d102      	bne.n	23be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    23b8:	68e8      	ldr	r0, [r5, #12]
    23ba:	1c40      	adds	r0, r0, #1
    23bc:	d007      	beq.n	23ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
    23be:	6828      	ldr	r0, [r5, #0]
    23c0:	686a      	ldr	r2, [r5, #4]
    23c2:	68a9      	ldr	r1, [r5, #8]
    23c4:	68eb      	ldr	r3, [r5, #12]
    23c6:	6120      	str	r0, [r4, #16]
    23c8:	6162      	str	r2, [r4, #20]
    23ca:	61a1      	str	r1, [r4, #24]
    23cc:	61e3      	str	r3, [r4, #28]
    23ce:	2000      	movs	r0, #0
    23d0:	f000 fcda 	bl	2d88 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    23d4:	4387      	bics	r7, r0
    23d6:	07f8      	lsls	r0, r7, #31
    23d8:	d113      	bne.n	2402 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    23da:	6830      	ldr	r0, [r6, #0]
    23dc:	1c40      	adds	r0, r0, #1
    23de:	d108      	bne.n	23f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    23e0:	6870      	ldr	r0, [r6, #4]
    23e2:	1c40      	adds	r0, r0, #1
    23e4:	d105      	bne.n	23f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    23e6:	68b0      	ldr	r0, [r6, #8]
    23e8:	1c40      	adds	r0, r0, #1
    23ea:	d102      	bne.n	23f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    23ec:	68f0      	ldr	r0, [r6, #12]
    23ee:	1c40      	adds	r0, r0, #1
    23f0:	d007      	beq.n	2402 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    23f2:	6832      	ldr	r2, [r6, #0]
    23f4:	6870      	ldr	r0, [r6, #4]
    23f6:	68b1      	ldr	r1, [r6, #8]
    23f8:	68f3      	ldr	r3, [r6, #12]
    23fa:	6022      	str	r2, [r4, #0]
    23fc:	6060      	str	r0, [r4, #4]
    23fe:	60a1      	str	r1, [r4, #8]
    2400:	60e3      	str	r3, [r4, #12]
    2402:	2000      	movs	r0, #0
    2404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2408:	10000090 	.word	0x10000090

0000240c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    240c:	b538      	push	{r3, r4, r5, lr}
    240e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    2412:	4604      	mov	r4, r0
    2414:	4822      	ldr	r0, [pc, #136]	; (24a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    2416:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    241a:	4d21      	ldr	r5, [pc, #132]	; (24a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    241c:	6802      	ldr	r2, [r0, #0]
    241e:	3d14      	subs	r5, #20
    2420:	1c52      	adds	r2, r2, #1
    2422:	d104      	bne.n	242e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
    2424:	6842      	ldr	r2, [r0, #4]
    2426:	43d2      	mvns	r2, r2
    2428:	0412      	lsls	r2, r2, #16
    242a:	0c12      	lsrs	r2, r2, #16
    242c:	d035      	beq.n	249a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    242e:	07c9      	lsls	r1, r1, #31
    2430:	d033      	beq.n	249a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    2432:	6801      	ldr	r1, [r0, #0]
    2434:	6840      	ldr	r0, [r0, #4]
    2436:	f8ad 0000 	strh.w	r0, [sp]
    243a:	f8c4 1001 	str.w	r1, [r4, #1]
    243e:	f8bd 0000 	ldrh.w	r0, [sp]
    2442:	f8a4 0005 	strh.w	r0, [r4, #5]
    2446:	79a0      	ldrb	r0, [r4, #6]
    2448:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    244c:	71a0      	strb	r0, [r4, #6]
    244e:	6828      	ldr	r0, [r5, #0]
    2450:	1c40      	adds	r0, r0, #1
    2452:	d00c      	beq.n	246e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    2454:	6868      	ldr	r0, [r5, #4]
    2456:	1c40      	adds	r0, r0, #1
    2458:	d009      	beq.n	246e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    245a:	68a8      	ldr	r0, [r5, #8]
    245c:	1c40      	adds	r0, r0, #1
    245e:	d006      	beq.n	246e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    2460:	68e8      	ldr	r0, [r5, #12]
    2462:	1c40      	adds	r0, r0, #1
    2464:	d003      	beq.n	246e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    2466:	2000      	movs	r0, #0
    2468:	f000 fc8e 	bl	2d88 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    246c:	b140      	cbz	r0, 2480 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
    246e:	2210      	movs	r2, #16
    2470:	2100      	movs	r1, #0
    2472:	1de0      	adds	r0, r4, #7
    2474:	f009 ffcb 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2478:	2001      	movs	r0, #1
    247a:	7020      	strb	r0, [r4, #0]
    247c:	2000      	movs	r0, #0
    247e:	bd38      	pop	{r3, r4, r5, pc}
    2480:	682a      	ldr	r2, [r5, #0]
    2482:	6869      	ldr	r1, [r5, #4]
    2484:	68a8      	ldr	r0, [r5, #8]
    2486:	68eb      	ldr	r3, [r5, #12]
    2488:	f8c4 2007 	str.w	r2, [r4, #7]
    248c:	f8c4 100b 	str.w	r1, [r4, #11]
    2490:	f8c4 000f 	str.w	r0, [r4, #15]
    2494:	f8c4 3013 	str.w	r3, [r4, #19]
    2498:	e7ee      	b.n	2478 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    249a:	2000      	movs	r0, #0
    249c:	e7ed      	b.n	247a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    249e:	0000      	.short	0x0000
    24a0:	100000a4 	.word	0x100000a4

000024a4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    24a4:	2102      	movs	r1, #2
    24a6:	8001      	strh	r1, [r0, #0]
    24a8:	8041      	strh	r1, [r0, #2]
    24aa:	2100      	movs	r1, #0
    24ac:	7101      	strb	r1, [r0, #4]
    24ae:	21e0      	movs	r1, #224	; 0xe0
    24b0:	7141      	strb	r1, [r0, #5]
    24b2:	f642 617e 	movw	r1, #11902	; 0x2e7e
    24b6:	80c1      	strh	r1, [r0, #6]
    24b8:	4901      	ldr	r1, [pc, #4]	; (24c0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    24ba:	6081      	str	r1, [r0, #8]
    24bc:	2000      	movs	r0, #0
    24be:	4770      	bx	lr
    24c0:	85055ec1 	.word	0x85055ec1
    24c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24c8:	798c      	ldrb	r4, [r1, #6]
    24ca:	f8dd e018 	ldr.w	lr, [sp, #24]
    24ce:	2c08      	cmp	r4, #8
    24d0:	d901      	bls.n	24d6 <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
    24d2:	21db      	movs	r1, #219	; 0xdb
    24d4:	e02c      	b.n	2530 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    24d6:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 257c <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
    24da:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
    24de:	b10d      	cbz	r5, 24e4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
    24e0:	21dc      	movs	r1, #220	; 0xdc
    24e2:	e025      	b.n	2530 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    24e4:	79cd      	ldrb	r5, [r1, #7]
    24e6:	2d00      	cmp	r5, #0
    24e8:	d045      	beq.n	2576 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
    24ea:	006f      	lsls	r7, r5, #1
    24ec:	370a      	adds	r7, #10
    24ee:	681d      	ldr	r5, [r3, #0]
    24f0:	2c02      	cmp	r4, #2
    24f2:	443d      	add	r5, r7
    24f4:	d901      	bls.n	24fa <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
    24f6:	4626      	mov	r6, r4
    24f8:	e001      	b.n	24fe <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
    24fa:	f04f 0602 	mov.w	r6, #2
    24fe:	442e      	add	r6, r5
    2500:	f1a6 0601 	sub.w	r6, r6, #1
    2504:	d901      	bls.n	250a <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
    2506:	4625      	mov	r5, r4
    2508:	e001      	b.n	250e <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
    250a:	f04f 0502 	mov.w	r5, #2
    250e:	f1a5 0501 	sub.w	r5, r5, #1
    2512:	ea26 0605 	bic.w	r6, r6, r5
    2516:	888d      	ldrh	r5, [r1, #4]
    2518:	4425      	add	r5, r4
    251a:	f1a4 0401 	sub.w	r4, r4, #1
    251e:	f1a5 0501 	sub.w	r5, r5, #1
    2522:	ea25 0504 	bic.w	r5, r5, r4
    2526:	f64f 74ff 	movw	r4, #65535	; 0xffff
    252a:	42a5      	cmp	r5, r4
    252c:	d303      	bcc.n	2536 <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
    252e:	21e7      	movs	r1, #231	; 0xe7
    2530:	2017      	movs	r0, #23
    2532:	f7ff fd8b 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2536:	f1be 0f00 	cmp.w	lr, #0
    253a:	d118      	bne.n	256e <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
    253c:	1bf4      	subs	r4, r6, r7
    253e:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
    2542:	8025      	strh	r5, [r4, #0]
    2544:	79c8      	ldrb	r0, [r1, #7]
    2546:	70a0      	strb	r0, [r4, #2]
    2548:	2001      	movs	r0, #1
    254a:	70e0      	strb	r0, [r4, #3]
    254c:	7122      	strb	r2, [r4, #4]
    254e:	6808      	ldr	r0, [r1, #0]
    2550:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    2554:	0c00      	lsrs	r0, r0, #16
    2556:	80e0      	strh	r0, [r4, #6]
    2558:	8808      	ldrh	r0, [r1, #0]
    255a:	8120      	strh	r0, [r4, #8]
    255c:	2000      	movs	r0, #0
    255e:	e003      	b.n	2568 <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
    2560:	eb04 0740 	add.w	r7, r4, r0, lsl #1
    2564:	1c40      	adds	r0, r0, #1
    2566:	817a      	strh	r2, [r7, #10]
    2568:	79cf      	ldrb	r7, [r1, #7]
    256a:	4287      	cmp	r7, r0
    256c:	d8f8      	bhi.n	2560 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
    256e:	79c8      	ldrb	r0, [r1, #7]
    2570:	fb00 6005 	mla	r0, r0, r5, r6
    2574:	6018      	str	r0, [r3, #0]
    2576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    257a:	0000      	.short	0x0000
    257c:	20000068 	.word	0x20000068
    2580:	b530      	push	{r4, r5, lr}
    2582:	4603      	mov	r3, r0
    2584:	ea4f 0002 	mov.w	r0, r2
    2588:	eb03 0440 	add.w	r4, r3, r0, lsl #1
    258c:	8964      	ldrh	r4, [r4, #10]
    258e:	428c      	cmp	r4, r1
    2590:	d009      	beq.n	25a6 <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
    2592:	789c      	ldrb	r4, [r3, #2]
    2594:	1c40      	adds	r0, r0, #1
    2596:	fbb0 f5f4 	udiv	r5, r0, r4
    259a:	fb04 0015 	mls	r0, r4, r5, r0
    259e:	b2c0      	uxtb	r0, r0
    25a0:	4290      	cmp	r0, r2
    25a2:	d1f1      	bne.n	2588 <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
    25a4:	20ff      	movs	r0, #255	; 0xff
    25a6:	bd30      	pop	{r4, r5, pc}

000025a8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    25a8:	b570      	push	{r4, r5, r6, lr}
    25aa:	4605      	mov	r5, r0
    25ac:	4819      	ldr	r0, [pc, #100]	; (2614 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
    25ae:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    25b2:	b364      	cbz	r4, 260e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    25b4:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
    25b8:	d304      	bcc.n	25c4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
    25ba:	f240 2125 	movw	r1, #549	; 0x225
    25be:	2017      	movs	r0, #23
    25c0:	f7ff fd44 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    25c4:	4629      	mov	r1, r5
    25c6:	4620      	mov	r0, r4
    25c8:	f007 ff0d 	bl	a3e6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    25cc:	4601      	mov	r1, r0
    25ce:	28ff      	cmp	r0, #255	; 0xff
    25d0:	d004      	beq.n	25dc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
    25d2:	4620      	mov	r0, r4
    25d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25d8:	f007 bf19 	b.w	a40e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    25dc:	78a0      	ldrb	r0, [r4, #2]
    25de:	fbb5 f1f0 	udiv	r1, r5, r0
    25e2:	fb00 5011 	mls	r0, r0, r1, r5
    25e6:	b2c6      	uxtb	r6, r0
    25e8:	4632      	mov	r2, r6
    25ea:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    25ee:	4620      	mov	r0, r4
    25f0:	f7ff ffc6 	bl	2580 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    25f4:	4602      	mov	r2, r0
    25f6:	28ff      	cmp	r0, #255	; 0xff
    25f8:	d009      	beq.n	260e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    25fa:	42b2      	cmp	r2, r6
    25fc:	d001      	beq.n	2602 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
    25fe:	2000      	movs	r0, #0
    2600:	70e0      	strb	r0, [r4, #3]
    2602:	4629      	mov	r1, r5
    2604:	4620      	mov	r0, r4
    2606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    260a:	f007 bee6 	b.w	a3da <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    260e:	2000      	movs	r0, #0
    2610:	bd70      	pop	{r4, r5, r6, pc}
    2612:	0000      	.short	0x0000
    2614:	20000068 	.word	0x20000068

00002618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    2618:	4a08      	ldr	r2, [pc, #32]	; (263c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    261a:	b510      	push	{r4, lr}
    261c:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    2620:	4601      	mov	r1, r0
    2622:	4620      	mov	r0, r4
    2624:	f007 fedf 	bl	a3e6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    2628:	4601      	mov	r1, r0
    262a:	28ff      	cmp	r0, #255	; 0xff
    262c:	d004      	beq.n	2638 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    262e:	4620      	mov	r0, r4
    2630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2634:	f007 beeb 	b.w	a40e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    2638:	2000      	movs	r0, #0
    263a:	bd10      	pop	{r4, pc}
    263c:	20000068 	.word	0x20000068

00002640 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    2640:	b5f0      	push	{r4, r5, r6, r7, lr}
    2642:	b089      	sub	sp, #36	; 0x24
    2644:	0004      	movs	r4, r0
    2646:	460e      	mov	r6, r1
    2648:	9406      	str	r4, [sp, #24]
    264a:	d007      	beq.n	265c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    264c:	2500      	movs	r5, #0
    264e:	0760      	lsls	r0, r4, #29
    2650:	d006      	beq.n	2660 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    2652:	f240 1119 	movw	r1, #281	; 0x119
    2656:	2017      	movs	r0, #23
    2658:	f7ff fcf8 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    265c:	2501      	movs	r5, #1
    265e:	e7f6      	b.n	264e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    2660:	4814      	ldr	r0, [pc, #80]	; (26b4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    2662:	2200      	movs	r2, #0
    2664:	4f14      	ldr	r7, [pc, #80]	; (26b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    2666:	6002      	str	r2, [r0, #0]
    2668:	6042      	str	r2, [r0, #4]
    266a:	e9d7 1000 	ldrd	r1, r0, [r7]
    266e:	f896 c000 	ldrb.w	ip, [r6]
    2672:	68bb      	ldr	r3, [r7, #8]
    2674:	f36c 601f 	bfi	r0, ip, #24, #8
    2678:	e9cd 0302 	strd	r0, r3, [sp, #8]
    267c:	e9cd 5100 	strd	r5, r1, [sp]
    2680:	ab06      	add	r3, sp, #24
    2682:	a901      	add	r1, sp, #4
    2684:	4610      	mov	r0, r2
    2686:	f7ff ff1d 	bl	24c4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    268a:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    268e:	7873      	ldrb	r3, [r6, #1]
    2690:	697a      	ldr	r2, [r7, #20]
    2692:	f363 601f 	bfi	r0, r3, #24, #8
    2696:	e9cd 0202 	strd	r0, r2, [sp, #8]
    269a:	e9cd 5100 	strd	r5, r1, [sp]
    269e:	ab06      	add	r3, sp, #24
    26a0:	2200      	movs	r2, #0
    26a2:	a901      	add	r1, sp, #4
    26a4:	2001      	movs	r0, #1
    26a6:	f7ff ff0d 	bl	24c4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    26aa:	9806      	ldr	r0, [sp, #24]
    26ac:	b009      	add	sp, #36	; 0x24
    26ae:	1b00      	subs	r0, r0, r4
    26b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26b2:	0000      	.short	0x0000
    26b4:	20000068 	.word	0x20000068
    26b8:	000027a8 	.word	0x000027a8

000026bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    26bc:	b510      	push	{r4, lr}
    26be:	4604      	mov	r4, r0
    26c0:	7980      	ldrb	r0, [r0, #6]
    26c2:	490e      	ldr	r1, [pc, #56]	; (26fc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    26c4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    26c8:	b1a8      	cbz	r0, 26f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    26ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    26ce:	79e1      	ldrb	r1, [r4, #7]
    26d0:	7882      	ldrb	r2, [r0, #2]
    26d2:	4291      	cmp	r1, r2
    26d4:	d20f      	bcs.n	26f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    26d6:	1c4a      	adds	r2, r1, #1
    26d8:	71e2      	strb	r2, [r4, #7]
    26da:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    26de:	8952      	ldrh	r2, [r2, #10]
    26e0:	429a      	cmp	r2, r3
    26e2:	d0f4      	beq.n	26ce <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    26e4:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    26e8:	8952      	ldrh	r2, [r2, #10]
    26ea:	80a2      	strh	r2, [r4, #4]
    26ec:	f007 fe8f 	bl	a40e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    26f0:	6020      	str	r0, [r4, #0]
    26f2:	2000      	movs	r0, #0
    26f4:	bd10      	pop	{r4, pc}
    26f6:	2005      	movs	r0, #5
    26f8:	bd10      	pop	{r4, pc}
    26fa:	0000      	.short	0x0000
    26fc:	20000068 	.word	0x20000068

00002700 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    2700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2704:	4607      	mov	r7, r0
    2706:	f64f 70ff 	movw	r0, #65535	; 0xffff
    270a:	8038      	strh	r0, [r7, #0]
    270c:	4812      	ldr	r0, [pc, #72]	; (2758 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    270e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    2712:	b1ec      	cbz	r4, 2750 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    2714:	78a5      	ldrb	r5, [r4, #2]
    2716:	7920      	ldrb	r0, [r4, #4]
    2718:	fbb0 f1f5 	udiv	r1, r0, r5
    271c:	fb05 0611 	mls	r6, r5, r1, r0
    2720:	4632      	mov	r2, r6
    2722:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    2726:	4620      	mov	r0, r4
    2728:	f7ff ff2a 	bl	2580 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    272c:	4602      	mov	r2, r0
    272e:	28ff      	cmp	r0, #255	; 0xff
    2730:	d00e      	beq.n	2750 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    2732:	1ba8      	subs	r0, r5, r6
    2734:	4410      	add	r0, r2
    2736:	fbb0 f1f5 	udiv	r1, r0, r5
    273a:	fb05 0011 	mls	r0, r5, r1, r0
    273e:	7921      	ldrb	r1, [r4, #4]
    2740:	4408      	add	r0, r1
    2742:	b281      	uxth	r1, r0
    2744:	8039      	strh	r1, [r7, #0]
    2746:	4620      	mov	r0, r4
    2748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    274c:	f007 be45 	b.w	a3da <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    2750:	2000      	movs	r0, #0
    2752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2756:	0000      	.short	0x0000
    2758:	20000068 	.word	0x20000068

0000275c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    275c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2760:	4606      	mov	r6, r0
    2762:	4810      	ldr	r0, [pc, #64]	; (27a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    2764:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    2768:	4631      	mov	r1, r6
    276a:	4628      	mov	r0, r5
    276c:	f007 fe3b 	bl	a3e6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    2770:	4604      	mov	r4, r0
    2772:	28ff      	cmp	r0, #255	; 0xff
    2774:	d012      	beq.n	279c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    2776:	f8d5 0006 	ldr.w	r0, [r5, #6]
    277a:	4621      	mov	r1, r4
    277c:	ea4f 4730 	mov.w	r7, r0, ror #16
    2780:	4628      	mov	r0, r5
    2782:	f007 fe44 	bl	a40e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    2786:	4601      	mov	r1, r0
    2788:	4630      	mov	r0, r6
    278a:	47b8      	blx	r7
    278c:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    2790:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    2794:	8148      	strh	r0, [r1, #10]
    2796:	2000      	movs	r0, #0
    2798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    279c:	f243 0002 	movw	r0, #12290	; 0x3002
    27a0:	e7fa      	b.n	2798 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    27a2:	0000      	.short	0x0000
    27a4:	20000068 	.word	0x20000068
    27a8:	0000b36f 	.word	0x0000b36f
    27ac:	000802f8 	.word	0x000802f8
    27b0:	00000000 	.word	0x00000000
    27b4:	0000ac63 	.word	0x0000ac63
    27b8:	00080118 	.word	0x00080118
    27bc:	00000000 	.word	0x00000000

000027c0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    27c0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27c4:	4c24      	ldr	r4, [pc, #144]	; (2858 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    27c6:	4606      	mov	r6, r0
    27c8:	b081      	sub	sp, #4
    27ca:	6820      	ldr	r0, [r4, #0]
    27cc:	469a      	mov	sl, r3
    27ce:	4693      	mov	fp, r2
    27d0:	b158      	cbz	r0, 27ea <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    27d2:	7a01      	ldrb	r1, [r0, #8]
    27d4:	42b1      	cmp	r1, r6
    27d6:	d903      	bls.n	27e0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    27d8:	6840      	ldr	r0, [r0, #4]
    27da:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    27de:	b140      	cbz	r0, 27f2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    27e0:	f243 0002 	movw	r0, #12290	; 0x3002
    27e4:	b005      	add	sp, #20
    27e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27ea:	21a5      	movs	r1, #165	; 0xa5
    27ec:	2018      	movs	r0, #24
    27ee:	f7ff fc2d 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    27f2:	4619      	mov	r1, r3
    27f4:	9802      	ldr	r0, [sp, #8]
    27f6:	f007 fe45 	bl	a484 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    27fa:	4680      	mov	r8, r0
    27fc:	4658      	mov	r0, fp
    27fe:	990e      	ldr	r1, [sp, #56]	; 0x38
    2800:	f007 fe36 	bl	a470 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    2804:	4605      	mov	r5, r0
    2806:	eb08 0005 	add.w	r0, r8, r5
    280a:	1d00      	adds	r0, r0, #4
    280c:	b287      	uxth	r7, r0
    280e:	6820      	ldr	r0, [r4, #0]
    2810:	46a1      	mov	r9, r4
    2812:	4639      	mov	r1, r7
    2814:	6800      	ldr	r0, [r0, #0]
    2816:	f007 fd7b 	bl	a310 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    281a:	0004      	movs	r4, r0
    281c:	d01a      	beq.n	2854 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    281e:	8067      	strh	r7, [r4, #2]
    2820:	8025      	strh	r5, [r4, #0]
    2822:	4629      	mov	r1, r5
    2824:	1d20      	adds	r0, r4, #4
    2826:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2828:	4607      	mov	r7, r0
    282a:	465a      	mov	r2, fp
    282c:	2309      	movs	r3, #9
    282e:	9500      	str	r5, [sp, #0]
    2830:	f007 fd1b 	bl	a26a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    2834:	8820      	ldrh	r0, [r4, #0]
    2836:	4641      	mov	r1, r8
    2838:	4438      	add	r0, r7
    283a:	230a      	movs	r3, #10
    283c:	9a02      	ldr	r2, [sp, #8]
    283e:	f8cd a000 	str.w	sl, [sp]
    2842:	f007 fd12 	bl	a26a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    2846:	f8d9 0000 	ldr.w	r0, [r9]
    284a:	6840      	ldr	r0, [r0, #4]
    284c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    2850:	2000      	movs	r0, #0
    2852:	e7c7      	b.n	27e4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    2854:	2004      	movs	r0, #4
    2856:	e7c5      	b.n	27e4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    2858:	20000070 	.word	0x20000070

0000285c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    285c:	b570      	push	{r4, r5, r6, lr}
    285e:	4c14      	ldr	r4, [pc, #80]	; (28b0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    2860:	6823      	ldr	r3, [r4, #0]
    2862:	b18b      	cbz	r3, 2888 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    2864:	7a19      	ldrb	r1, [r3, #8]
    2866:	4281      	cmp	r1, r0
    2868:	d912      	bls.n	2890 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    286a:	685a      	ldr	r2, [r3, #4]
    286c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    2870:	b171      	cbz	r1, 2890 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    2872:	2500      	movs	r5, #0
    2874:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    2878:	884a      	ldrh	r2, [r1, #2]
    287a:	6818      	ldr	r0, [r3, #0]
    287c:	f007 fda0 	bl	a3c0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    2880:	6821      	ldr	r1, [r4, #0]
    2882:	2000      	movs	r0, #0
    2884:	7a0a      	ldrb	r2, [r1, #8]
    2886:	e00c      	b.n	28a2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    2888:	21c6      	movs	r1, #198	; 0xc6
    288a:	2018      	movs	r0, #24
    288c:	f7ff fbde 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2890:	f243 0002 	movw	r0, #12290	; 0x3002
    2894:	bd70      	pop	{r4, r5, r6, pc}
    2896:	684b      	ldr	r3, [r1, #4]
    2898:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    289c:	b933      	cbnz	r3, 28ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    289e:	1c40      	adds	r0, r0, #1
    28a0:	b2c0      	uxtb	r0, r0
    28a2:	4282      	cmp	r2, r0
    28a4:	d8f7      	bhi.n	2896 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    28a6:	6808      	ldr	r0, [r1, #0]
    28a8:	f007 fd7f 	bl	a3aa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    28ac:	2000      	movs	r0, #0
    28ae:	bd70      	pop	{r4, r5, r6, pc}
    28b0:	20000070 	.word	0x20000070

000028b4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    28b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28b8:	460d      	mov	r5, r1
    28ba:	0004      	movs	r4, r0
    28bc:	4690      	mov	r8, r2
    28be:	f04f 0600 	mov.w	r6, #0
    28c2:	d006      	beq.n	28d2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    28c4:	2700      	movs	r7, #0
    28c6:	07a0      	lsls	r0, r4, #30
    28c8:	d005      	beq.n	28d6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    28ca:	2186      	movs	r1, #134	; 0x86
    28cc:	2018      	movs	r0, #24
    28ce:	f7ff fbbd 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28d2:	2701      	movs	r7, #1
    28d4:	e7f7      	b.n	28c6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    28d6:	b1cd      	cbz	r5, 290c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    28d8:	4611      	mov	r1, r2
    28da:	2000      	movs	r0, #0
    28dc:	f007 fd49 	bl	a372 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    28e0:	300c      	adds	r0, #12
    28e2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    28e6:	b98f      	cbnz	r7, 290c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    28e8:	4f0a      	ldr	r7, [pc, #40]	; (2914 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    28ea:	f104 000c 	add.w	r0, r4, #12
    28ee:	00aa      	lsls	r2, r5, #2
    28f0:	603c      	str	r4, [r7, #0]
    28f2:	7225      	strb	r5, [r4, #8]
    28f4:	6060      	str	r0, [r4, #4]
    28f6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    28fa:	6020      	str	r0, [r4, #0]
    28fc:	2100      	movs	r1, #0
    28fe:	6860      	ldr	r0, [r4, #4]
    2900:	f009 fd85 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2904:	4641      	mov	r1, r8
    2906:	6838      	ldr	r0, [r7, #0]
    2908:	f007 fd33 	bl	a372 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    290c:	4630      	mov	r0, r6
    290e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2912:	0000      	.short	0x0000
    2914:	20000070 	.word	0x20000070

00002918 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    2918:	490a      	ldr	r1, [pc, #40]	; (2944 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    291a:	b510      	push	{r4, lr}
    291c:	4602      	mov	r2, r0
    291e:	6809      	ldr	r1, [r1, #0]
    2920:	2000      	movs	r0, #0
    2922:	b159      	cbz	r1, 293c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    2924:	7a0b      	ldrb	r3, [r1, #8]
    2926:	4293      	cmp	r3, r2
    2928:	d907      	bls.n	293a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    292a:	6849      	ldr	r1, [r1, #4]
    292c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    2930:	2900      	cmp	r1, #0
    2932:	d002      	beq.n	293a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    2934:	f831 0b04 	ldrh.w	r0, [r1], #4
    2938:	4408      	add	r0, r1
    293a:	bd10      	pop	{r4, pc}
    293c:	21fa      	movs	r1, #250	; 0xfa
    293e:	2018      	movs	r0, #24
    2940:	f7ff fb84 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2944:	20000070 	.word	0x20000070
    2948:	b570      	push	{r4, r5, r6, lr}
    294a:	4b1e      	ldr	r3, [pc, #120]	; (29c4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    294c:	6845      	ldr	r5, [r0, #4]
    294e:	4604      	mov	r4, r0
    2950:	2200      	movs	r2, #0
    2952:	b1a1      	cbz	r1, 297e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    2954:	2001      	movs	r0, #1
    2956:	7060      	strb	r0, [r4, #1]
    2958:	8858      	ldrh	r0, [r3, #2]
    295a:	0881      	lsrs	r1, r0, #2
    295c:	f05f 0000 	movs.w	r0, #0
    2960:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    2964:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    2968:	831a      	strh	r2, [r3, #24]
    296a:	8419      	strh	r1, [r3, #32]
    296c:	fb00 5301 	mla	r3, r0, r1, r5
    2970:	6073      	str	r3, [r6, #4]
    2972:	1823      	adds	r3, r4, r0
    2974:	1c40      	adds	r0, r0, #1
    2976:	751a      	strb	r2, [r3, #20]
    2978:	2804      	cmp	r0, #4
    297a:	d3f1      	bcc.n	2960 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    297c:	bd70      	pop	{r4, r5, r6, pc}
    297e:	7062      	strb	r2, [r4, #1]
    2980:	f05f 0000 	movs.w	r0, #0
    2984:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    2988:	830a      	strh	r2, [r1, #24]
    298a:	840a      	strh	r2, [r1, #32]
    298c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    2990:	604a      	str	r2, [r1, #4]
    2992:	1821      	adds	r1, r4, r0
    2994:	1c40      	adds	r0, r0, #1
    2996:	750a      	strb	r2, [r1, #20]
    2998:	2804      	cmp	r0, #4
    299a:	d3f3      	bcc.n	2984 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    299c:	8858      	ldrh	r0, [r3, #2]
    299e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    29a2:	d201      	bcs.n	29a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    29a4:	0846      	lsrs	r6, r0, #1
    29a6:	e000      	b.n	29aa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    29a8:	26ff      	movs	r6, #255	; 0xff
    29aa:	f007 fddf 	bl	a56c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    29ae:	6065      	str	r5, [r4, #4]
    29b0:	8420      	strh	r0, [r4, #32]
    29b2:	1829      	adds	r1, r5, r0
    29b4:	60a1      	str	r1, [r4, #8]
    29b6:	8466      	strh	r6, [r4, #34]	; 0x22
    29b8:	60e5      	str	r5, [r4, #12]
    29ba:	84a0      	strh	r0, [r4, #36]	; 0x24
    29bc:	6121      	str	r1, [r4, #16]
    29be:	84e6      	strh	r6, [r4, #38]	; 0x26
    29c0:	bd70      	pop	{r4, r5, r6, pc}
    29c2:	0000      	.short	0x0000
    29c4:	20000074 	.word	0x20000074

000029c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    29c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29cc:	b158      	cbz	r0, 29e6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    29ce:	2500      	movs	r5, #0
    29d0:	4411      	add	r1, r2
    29d2:	4e24      	ldr	r6, [pc, #144]	; (2a64 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    29d4:	b2cc      	uxtb	r4, r1
    29d6:	2700      	movs	r7, #0
    29d8:	7034      	strb	r4, [r6, #0]
    29da:	0781      	lsls	r1, r0, #30
    29dc:	d005      	beq.n	29ea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    29de:	214e      	movs	r1, #78	; 0x4e
    29e0:	2009      	movs	r0, #9
    29e2:	f7ff fb33 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29e6:	2501      	movs	r5, #1
    29e8:	e7f2      	b.n	29d0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    29ea:	2b1f      	cmp	r3, #31
    29ec:	d804      	bhi.n	29f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    29ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    29f2:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    29f6:	e009      	b.n	2a0c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    29f8:	0059      	lsls	r1, r3, #1
    29fa:	2bff      	cmp	r3, #255	; 0xff
    29fc:	d90c      	bls.n	2a18 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    29fe:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    2a02:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    2a06:	d200      	bcs.n	2a0a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    2a08:	4611      	mov	r1, r2
    2a0a:	b289      	uxth	r1, r1
    2a0c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    2a10:	1cc9      	adds	r1, r1, #3
    2a12:	4011      	ands	r1, r2
    2a14:	b135      	cbz	r5, 2a24 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    2a16:	e007      	b.n	2a28 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    2a18:	227c      	movs	r2, #124	; 0x7c
    2a1a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    2a1e:	d3f4      	bcc.n	2a0a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    2a20:	217c      	movs	r1, #124	; 0x7c
    2a22:	e7f2      	b.n	2a0a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    2a24:	6070      	str	r0, [r6, #4]
    2a26:	8071      	strh	r1, [r6, #2]
    2a28:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    2a2c:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    2a30:	2200      	movs	r2, #0
    2a32:	6876      	ldr	r6, [r6, #4]
    2a34:	f04f 0c01 	mov.w	ip, #1
    2a38:	e00d      	b.n	2a56 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    2a3a:	b94d      	cbnz	r5, 2a50 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    2a3c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    2a40:	eb00 0e03 	add.w	lr, r0, r3
    2a44:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    2a48:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    2a4c:	f8c7 e004 	str.w	lr, [r7, #4]
    2a50:	1c52      	adds	r2, r2, #1
    2a52:	440b      	add	r3, r1
    2a54:	b2d2      	uxtb	r2, r2
    2a56:	42a2      	cmp	r2, r4
    2a58:	d3ef      	bcc.n	2a3a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    2a5a:	1ddb      	adds	r3, r3, #7
    2a5c:	f023 0007 	bic.w	r0, r3, #7
    2a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a64:	20000074 	.word	0x20000074

00002a68 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    2a68:	b570      	push	{r4, r5, r6, lr}
    2a6a:	4a10      	ldr	r2, [pc, #64]	; (2aac <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    2a6c:	2000      	movs	r0, #0
    2a6e:	6851      	ldr	r1, [r2, #4]
    2a70:	7812      	ldrb	r2, [r2, #0]
    2a72:	e014      	b.n	2a9e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    2a74:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2a78:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    2a7c:	b16b      	cbz	r3, 2a9a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    2a7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2a82:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    2a86:	d00c      	beq.n	2aa2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    2a88:	2500      	movs	r5, #0
    2a8a:	70a5      	strb	r5, [r4, #2]
    2a8c:	2101      	movs	r1, #1
    2a8e:	4620      	mov	r0, r4
    2a90:	f7ff ff5a 	bl	2948 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    2a94:	7025      	strb	r5, [r4, #0]
    2a96:	4620      	mov	r0, r4
    2a98:	bd70      	pop	{r4, r5, r6, pc}
    2a9a:	1c40      	adds	r0, r0, #1
    2a9c:	b2c0      	uxtb	r0, r0
    2a9e:	4290      	cmp	r0, r2
    2aa0:	d3e8      	bcc.n	2a74 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    2aa2:	21a9      	movs	r1, #169	; 0xa9
    2aa4:	2009      	movs	r0, #9
    2aa6:	f7ff fad1 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2aaa:	0000      	.short	0x0000
    2aac:	20000074 	.word	0x20000074

00002ab0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    2ab0:	4804      	ldr	r0, [pc, #16]	; (2ac4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    2ab2:	b510      	push	{r4, lr}
    2ab4:	8840      	ldrh	r0, [r0, #2]
    2ab6:	0884      	lsrs	r4, r0, #2
    2ab8:	f007 fd58 	bl	a56c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    2abc:	4284      	cmp	r4, r0
    2abe:	d300      	bcc.n	2ac2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    2ac0:	4620      	mov	r0, r4
    2ac2:	bd10      	pop	{r4, pc}
    2ac4:	20000074 	.word	0x20000074
    2ac8:	b530      	push	{r4, r5, lr}
    2aca:	490d      	ldr	r1, [pc, #52]	; (2b00 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    2acc:	2001      	movs	r0, #1
    2ace:	6048      	str	r0, [r1, #4]
    2ad0:	1e82      	subs	r2, r0, #2
    2ad2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2ad6:	490b      	ldr	r1, [pc, #44]	; (2b04 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    2ad8:	6088      	str	r0, [r1, #8]
    2ada:	2300      	movs	r3, #0
    2adc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2ae0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2ae4:	4c08      	ldr	r4, [pc, #32]	; (2b08 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    2ae6:	6023      	str	r3, [r4, #0]
    2ae8:	1d25      	adds	r5, r4, #4
    2aea:	6028      	str	r0, [r5, #0]
    2aec:	6088      	str	r0, [r1, #8]
    2aee:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2af2:	6023      	str	r3, [r4, #0]
    2af4:	6028      	str	r0, [r5, #0]
    2af6:	4906      	ldr	r1, [pc, #24]	; (2b10 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    2af8:	4804      	ldr	r0, [pc, #16]	; (2b0c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    2afa:	6008      	str	r0, [r1, #0]
    2afc:	bd30      	pop	{r4, r5, pc}
    2afe:	0000      	.short	0x0000
    2b00:	4000e000 	.word	0x4000e000
    2b04:	4000f000 	.word	0x4000f000
    2b08:	4000f500 	.word	0x4000f500
    2b0c:	3ff60000 	.word	0x3ff60000
    2b10:	4001f508 	.word	0x4001f508

00002b14 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    2b14:	b510      	push	{r4, lr}
    2b16:	f7ff ffd7 	bl	2ac8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    2b1a:	f007 fdfe 	bl	a71a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    2b1e:	4903      	ldr	r1, [pc, #12]	; (2b2c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    2b20:	4801      	ldr	r0, [pc, #4]	; (2b28 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    2b22:	6008      	str	r0, [r1, #0]
    2b24:	bd10      	pop	{r4, pc}
    2b26:	0000      	.short	0x0000
    2b28:	3ff60000 	.word	0x3ff60000
    2b2c:	4001f508 	.word	0x4001f508

00002b30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    2b30:	b510      	push	{r4, lr}
    2b32:	f7ff ffc9 	bl	2ac8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    2b36:	f007 fdf0 	bl	a71a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    2b3a:	f000 f887 	bl	2c4c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    2b3e:	4905      	ldr	r1, [pc, #20]	; (2b54 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    2b40:	4803      	ldr	r0, [pc, #12]	; (2b50 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    2b42:	6008      	str	r0, [r1, #0]
    2b44:	f000 f8b8 	bl	2cb8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    2b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2b4c:	f000 b8dc 	b.w	2d08 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    2b50:	3ff60000 	.word	0x3ff60000
    2b54:	4001f508 	.word	0x4001f508
    2b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b5c:	4682      	mov	sl, r0
    2b5e:	4838      	ldr	r0, [pc, #224]	; (2c40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    2b60:	f009 faea 	bl	c138 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    2b64:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 2c40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    2b68:	b128      	cbz	r0, 2b76 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    2b6a:	2601      	movs	r6, #1
    2b6c:	f10b 0001 	add.w	r0, fp, #1
    2b70:	21ff      	movs	r1, #255	; 0xff
    2b72:	7001      	strb	r1, [r0, #0]
    2b74:	e000      	b.n	2b78 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    2b76:	2600      	movs	r6, #0
    2b78:	f44f 7580 	mov.w	r5, #256	; 0x100
    2b7c:	4c31      	ldr	r4, [pc, #196]	; (2c44 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    2b7e:	f04f 0800 	mov.w	r8, #0
    2b82:	1d2f      	adds	r7, r5, #4
    2b84:	2101      	movs	r1, #1
    2b86:	6061      	str	r1, [r4, #4]
    2b88:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    2b8c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    2b90:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    2b94:	6021      	str	r1, [r4, #0]
    2b96:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 2c48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    2b9a:	e01c      	b.n	2bd6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    2b9c:	f8d9 0000 	ldr.w	r0, [r9]
    2ba0:	06c0      	lsls	r0, r0, #27
    2ba2:	d518      	bpl.n	2bd6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    2ba4:	200e      	movs	r0, #14
    2ba6:	f007 fdc7 	bl	a738 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    2baa:	f3ef 8010 	mrs	r0, PRIMASK
    2bae:	9000      	str	r0, [sp, #0]
    2bb0:	b672      	cpsid	i
    2bb2:	2103      	movs	r1, #3
    2bb4:	4620      	mov	r0, r4
    2bb6:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    2bba:	4629      	mov	r1, r5
    2bbc:	f007 fdc9 	bl	a752 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2bc0:	b930      	cbnz	r0, 2bd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    2bc2:	4639      	mov	r1, r7
    2bc4:	4620      	mov	r0, r4
    2bc6:	f007 fdc4 	bl	a752 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2bca:	b908      	cbnz	r0, 2bd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    2bcc:	f009 fb4b 	bl	c266 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2bd0:	9800      	ldr	r0, [sp, #0]
    2bd2:	b900      	cbnz	r0, 2bd6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    2bd4:	b662      	cpsie	i
    2bd6:	4629      	mov	r1, r5
    2bd8:	4620      	mov	r0, r4
    2bda:	f007 fdba 	bl	a752 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2bde:	b928      	cbnz	r0, 2bec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    2be0:	4639      	mov	r1, r7
    2be2:	4620      	mov	r0, r4
    2be4:	f007 fdb5 	bl	a752 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2be8:	2800      	cmp	r0, #0
    2bea:	d0d7      	beq.n	2b9c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    2bec:	4639      	mov	r1, r7
    2bee:	4620      	mov	r0, r4
    2bf0:	f007 fdaf 	bl	a752 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    2bf4:	2800      	cmp	r0, #0
    2bf6:	d1c5      	bne.n	2b84 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    2bf8:	bb06      	cbnz	r6, 2c3c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    2bfa:	f89b 1001 	ldrb.w	r1, [fp, #1]
    2bfe:	f88d 1000 	strb.w	r1, [sp]
    2c02:	9900      	ldr	r1, [sp, #0]
    2c04:	9100      	str	r1, [sp, #0]
    2c06:	f89d 1000 	ldrb.w	r1, [sp]
    2c0a:	b109      	cbz	r1, 2c10 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    2c0c:	2501      	movs	r5, #1
    2c0e:	e000      	b.n	2c12 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    2c10:	2500      	movs	r5, #0
    2c12:	f10b 0001 	add.w	r0, fp, #1
    2c16:	f880 8000 	strb.w	r8, [r0]
    2c1a:	2003      	movs	r0, #3
    2c1c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2c20:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    2c24:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    2c28:	200e      	movs	r0, #14
    2c2a:	f007 fd85 	bl	a738 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    2c2e:	4804      	ldr	r0, [pc, #16]	; (2c40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    2c30:	f009 fa99 	bl	c166 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    2c34:	b115      	cbz	r5, 2c3c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    2c36:	2011      	movs	r0, #17
    2c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c3c:	2000      	movs	r0, #0
    2c3e:	e7fb      	b.n	2c38 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    2c40:	20000178 	.word	0x20000178
    2c44:	4000e000 	.word	0x4000e000
    2c48:	e000ed10 	.word	0xe000ed10

00002c4c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    2c4c:	b510      	push	{r4, lr}
    2c4e:	4806      	ldr	r0, [pc, #24]	; (2c68 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    2c50:	f009 fa85 	bl	c15e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    2c54:	b118      	cbz	r0, 2c5e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    2c56:	2130      	movs	r1, #48	; 0x30
    2c58:	201d      	movs	r0, #29
    2c5a:	f7ff f9f7 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c5e:	4802      	ldr	r0, [pc, #8]	; (2c68 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    2c60:	2100      	movs	r1, #0
    2c62:	7041      	strb	r1, [r0, #1]
    2c64:	bd10      	pop	{r4, pc}
    2c66:	0000      	.short	0x0000
    2c68:	20000178 	.word	0x20000178

00002c6c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    2c6c:	b570      	push	{r4, r5, r6, lr}
    2c6e:	4911      	ldr	r1, [pc, #68]	; (2cb4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    2c70:	680a      	ldr	r2, [r1, #0]
    2c72:	b1ea      	cbz	r2, 2cb0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    2c74:	2300      	movs	r3, #0
    2c76:	461d      	mov	r5, r3
    2c78:	2401      	movs	r4, #1
    2c7a:	684a      	ldr	r2, [r1, #4]
    2c7c:	1c52      	adds	r2, r2, #1
    2c7e:	604a      	str	r2, [r1, #4]
    2c80:	2a09      	cmp	r2, #9
    2c82:	d300      	bcc.n	2c86 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    2c84:	604d      	str	r5, [r1, #4]
    2c86:	790e      	ldrb	r6, [r1, #4]
    2c88:	fa04 f206 	lsl.w	r2, r4, r6
    2c8c:	680e      	ldr	r6, [r1, #0]
    2c8e:	4216      	tst	r6, r2
    2c90:	d00b      	beq.n	2caa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    2c92:	f3ef 8310 	mrs	r3, PRIMASK
    2c96:	b672      	cpsid	i
    2c98:	680c      	ldr	r4, [r1, #0]
    2c9a:	4394      	bics	r4, r2
    2c9c:	600c      	str	r4, [r1, #0]
    2c9e:	b903      	cbnz	r3, 2ca2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    2ca0:	b662      	cpsie	i
    2ca2:	6849      	ldr	r1, [r1, #4]
    2ca4:	6001      	str	r1, [r0, #0]
    2ca6:	2000      	movs	r0, #0
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
    2caa:	1c5b      	adds	r3, r3, #1
    2cac:	2b09      	cmp	r3, #9
    2cae:	d3e4      	bcc.n	2c7a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    2cb0:	2005      	movs	r0, #5
    2cb2:	bd70      	pop	{r4, r5, r6, pc}
    2cb4:	2000007c 	.word	0x2000007c

00002cb8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    2cb8:	4802      	ldr	r0, [pc, #8]	; (2cc4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    2cba:	2100      	movs	r1, #0
    2cbc:	6001      	str	r1, [r0, #0]
    2cbe:	6041      	str	r1, [r0, #4]
    2cc0:	4770      	bx	lr
    2cc2:	0000      	.short	0x0000
    2cc4:	2000007c 	.word	0x2000007c

00002cc8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    2cc8:	b510      	push	{r4, lr}
    2cca:	4c04      	ldr	r4, [pc, #16]	; (2cdc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    2ccc:	7820      	ldrb	r0, [r4, #0]
    2cce:	28ff      	cmp	r0, #255	; 0xff
    2cd0:	d003      	beq.n	2cda <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    2cd2:	f006 fcf3 	bl	96bc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    2cd6:	20ff      	movs	r0, #255	; 0xff
    2cd8:	7020      	strb	r0, [r4, #0]
    2cda:	bd10      	pop	{r4, pc}
    2cdc:	20000000 	.word	0x20000000

00002ce0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    2ce0:	b510      	push	{r4, lr}
    2ce2:	4c08      	ldr	r4, [pc, #32]	; (2d04 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    2ce4:	7861      	ldrb	r1, [r4, #1]
    2ce6:	b109      	cbz	r1, 2cec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    2ce8:	200f      	movs	r0, #15
    2cea:	bd10      	pop	{r4, pc}
    2cec:	f006 fcac 	bl	9648 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2cf0:	7020      	strb	r0, [r4, #0]
    2cf2:	28ff      	cmp	r0, #255	; 0xff
    2cf4:	d001      	beq.n	2cfa <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    2cf6:	2000      	movs	r0, #0
    2cf8:	bd10      	pop	{r4, pc}
    2cfa:	2173      	movs	r1, #115	; 0x73
    2cfc:	201f      	movs	r0, #31
    2cfe:	f7ff f9a5 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d02:	0000      	.short	0x0000
    2d04:	20000000 	.word	0x20000000

00002d08 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    2d08:	4901      	ldr	r1, [pc, #4]	; (2d10 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    2d0a:	2000      	movs	r0, #0
    2d0c:	7048      	strb	r0, [r1, #1]
    2d0e:	4770      	bx	lr
    2d10:	20000000 	.word	0x20000000
    2d14:	4905      	ldr	r1, [pc, #20]	; (2d2c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
    2d16:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    2d18:	4282      	cmp	r2, r0
    2d1a:	d105      	bne.n	2d28 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
    2d1c:	2000      	movs	r0, #0
    2d1e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    2d22:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2d26:	8488      	strh	r0, [r1, #36]	; 0x24
    2d28:	4770      	bx	lr
    2d2a:	0000      	.short	0x0000
    2d2c:	200011c8 	.word	0x200011c8

00002d30 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    2d30:	4a0a      	ldr	r2, [pc, #40]	; (2d5c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    2d32:	b110      	cbz	r0, 2d3a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    2d34:	2801      	cmp	r0, #1
    2d36:	d007      	beq.n	2d48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    2d38:	e00e      	b.n	2d58 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2d3a:	7850      	ldrb	r0, [r2, #1]
    2d3c:	b160      	cbz	r0, 2d58 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2d3e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    2d42:	6008      	str	r0, [r1, #0]
    2d44:	88d0      	ldrh	r0, [r2, #6]
    2d46:	e004      	b.n	2d52 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    2d48:	7810      	ldrb	r0, [r2, #0]
    2d4a:	b128      	cbz	r0, 2d58 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2d4c:	6890      	ldr	r0, [r2, #8]
    2d4e:	6008      	str	r0, [r1, #0]
    2d50:	8990      	ldrh	r0, [r2, #12]
    2d52:	8088      	strh	r0, [r1, #4]
    2d54:	2001      	movs	r0, #1
    2d56:	4770      	bx	lr
    2d58:	2000      	movs	r0, #0
    2d5a:	4770      	bx	lr
    2d5c:	2000017a 	.word	0x2000017a

00002d60 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    2d60:	4a08      	ldr	r2, [pc, #32]	; (2d84 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    2d62:	2301      	movs	r3, #1
    2d64:	b138      	cbz	r0, 2d76 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    2d66:	2801      	cmp	r0, #1
    2d68:	d104      	bne.n	2d74 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    2d6a:	7013      	strb	r3, [r2, #0]
    2d6c:	6808      	ldr	r0, [r1, #0]
    2d6e:	6090      	str	r0, [r2, #8]
    2d70:	8888      	ldrh	r0, [r1, #4]
    2d72:	8190      	strh	r0, [r2, #12]
    2d74:	4770      	bx	lr
    2d76:	7053      	strb	r3, [r2, #1]
    2d78:	6808      	ldr	r0, [r1, #0]
    2d7a:	f8c2 0002 	str.w	r0, [r2, #2]
    2d7e:	8888      	ldrh	r0, [r1, #4]
    2d80:	80d0      	strh	r0, [r2, #6]
    2d82:	4770      	bx	lr
    2d84:	2000017a 	.word	0x2000017a

00002d88 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    2d88:	4906      	ldr	r1, [pc, #24]	; (2da4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    2d8a:	b110      	cbz	r0, 2d92 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    2d8c:	2801      	cmp	r0, #1
    2d8e:	d002      	beq.n	2d96 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    2d90:	e005      	b.n	2d9e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    2d92:	7848      	ldrb	r0, [r1, #1]
    2d94:	e000      	b.n	2d98 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    2d96:	7808      	ldrb	r0, [r1, #0]
    2d98:	b108      	cbz	r0, 2d9e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    2d9a:	2001      	movs	r0, #1
    2d9c:	4770      	bx	lr
    2d9e:	2000      	movs	r0, #0
    2da0:	4770      	bx	lr
    2da2:	0000      	.short	0x0000
    2da4:	2000017a 	.word	0x2000017a

00002da8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    2da8:	4901      	ldr	r1, [pc, #4]	; (2db0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    2daa:	7708      	strb	r0, [r1, #28]
    2dac:	4770      	bx	lr
    2dae:	0000      	.short	0x0000
    2db0:	20000a8a 	.word	0x20000a8a

00002db4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2db4:	4800      	ldr	r0, [pc, #0]	; (2db8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2db6:	4770      	bx	lr
    2db8:	20001378 	.word	0x20001378

00002dbc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2dbc:	4904      	ldr	r1, [pc, #16]	; (2dd0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2dbe:	784a      	ldrb	r2, [r1, #1]
    2dc0:	4282      	cmp	r2, r0
    2dc2:	d903      	bls.n	2dcc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2dc4:	4408      	add	r0, r1
    2dc6:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    2dca:	4770      	bx	lr
    2dcc:	2000      	movs	r0, #0
    2dce:	4770      	bx	lr
    2dd0:	200011ee 	.word	0x200011ee

00002dd4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2dd4:	4904      	ldr	r1, [pc, #16]	; (2de8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2dd6:	784a      	ldrb	r2, [r1, #1]
    2dd8:	4282      	cmp	r2, r0
    2dda:	d903      	bls.n	2de4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2ddc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2de0:	3082      	adds	r0, #130	; 0x82
    2de2:	4770      	bx	lr
    2de4:	2000      	movs	r0, #0
    2de6:	4770      	bx	lr
    2de8:	200011ee 	.word	0x200011ee

00002dec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2dec:	4a05      	ldr	r2, [pc, #20]	; (2e04 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2dee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2df2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2df6:	6802      	ldr	r2, [r0, #0]
    2df8:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    2dfc:	8880      	ldrh	r0, [r0, #4]
    2dfe:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2e02:	4770      	bx	lr
    2e04:	200011ee 	.word	0x200011ee

00002e08 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2e08:	4904      	ldr	r1, [pc, #16]	; (2e1c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2e0a:	784a      	ldrb	r2, [r1, #1]
    2e0c:	4282      	cmp	r2, r0
    2e0e:	d903      	bls.n	2e18 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2e10:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2e14:	1c80      	adds	r0, r0, #2
    2e16:	4770      	bx	lr
    2e18:	2000      	movs	r0, #0
    2e1a:	4770      	bx	lr
    2e1c:	200011ee 	.word	0x200011ee

00002e20 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2e20:	b510      	push	{r4, lr}
    2e22:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    2e26:	2100      	movs	r1, #0
    2e28:	4805      	ldr	r0, [pc, #20]	; (2e40 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    2e2a:	f009 faf0 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2e2e:	4805      	ldr	r0, [pc, #20]	; (2e44 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    2e30:	2100      	movs	r1, #0
    2e32:	7001      	strb	r1, [r0, #0]
    2e34:	7041      	strb	r1, [r0, #1]
    2e36:	f44f 7161 	mov.w	r1, #900	; 0x384
    2e3a:	8041      	strh	r1, [r0, #2]
    2e3c:	bd10      	pop	{r4, pc}
    2e3e:	0000      	.short	0x0000
    2e40:	200011ee 	.word	0x200011ee
    2e44:	20000170 	.word	0x20000170

00002e48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2e48:	4b0b      	ldr	r3, [pc, #44]	; (2e78 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2e4a:	b510      	push	{r4, lr}
    2e4c:	785c      	ldrb	r4, [r3, #1]
    2e4e:	4284      	cmp	r4, r0
    2e50:	d910      	bls.n	2e74 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    2e52:	4418      	add	r0, r3
    2e54:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2e58:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e5c:	4418      	add	r0, r3
    2e5e:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    2e62:	700b      	strb	r3, [r1, #0]
    2e64:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2e68:	6011      	str	r1, [r2, #0]
    2e6a:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    2e6e:	8090      	strh	r0, [r2, #4]
    2e70:	2001      	movs	r0, #1
    2e72:	bd10      	pop	{r4, pc}
    2e74:	2000      	movs	r0, #0
    2e76:	bd10      	pop	{r4, pc}
    2e78:	200011ee 	.word	0x200011ee

00002e7c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2e7c:	4801      	ldr	r0, [pc, #4]	; (2e84 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2e7e:	8840      	ldrh	r0, [r0, #2]
    2e80:	4770      	bx	lr
    2e82:	0000      	.short	0x0000
    2e84:	20000170 	.word	0x20000170

00002e88 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2e88:	4905      	ldr	r1, [pc, #20]	; (2ea0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2e8a:	784a      	ldrb	r2, [r1, #1]
    2e8c:	4282      	cmp	r2, r0
    2e8e:	d903      	bls.n	2e98 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2e90:	4408      	add	r0, r1
    2e92:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2e96:	b108      	cbz	r0, 2e9c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2e98:	2000      	movs	r0, #0
    2e9a:	4770      	bx	lr
    2e9c:	2001      	movs	r0, #1
    2e9e:	4770      	bx	lr
    2ea0:	200011ee 	.word	0x200011ee

00002ea4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    2ea4:	4901      	ldr	r1, [pc, #4]	; (2eac <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    2ea6:	7048      	strb	r0, [r1, #1]
    2ea8:	4770      	bx	lr
    2eaa:	0000      	.short	0x0000
    2eac:	20000170 	.word	0x20000170
    2eb0:	4602      	mov	r2, r0
    2eb2:	4809      	ldr	r0, [pc, #36]	; (2ed8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2eb4:	b510      	push	{r4, lr}
    2eb6:	7800      	ldrb	r0, [r0, #0]
    2eb8:	460b      	mov	r3, r1
    2eba:	b158      	cbz	r0, 2ed4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2ebc:	4807      	ldr	r0, [pc, #28]	; (2edc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2ebe:	7841      	ldrb	r1, [r0, #1]
    2ec0:	b141      	cbz	r1, 2ed4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2ec2:	b10b      	cbz	r3, 2ec8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2ec4:	1c80      	adds	r0, r0, #2
    2ec6:	e001      	b.n	2ecc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2ec8:	4804      	ldr	r0, [pc, #16]	; (2edc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2eca:	3082      	adds	r0, #130	; 0x82
    2ecc:	f001 fdb6 	bl	4a3c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2ed0:	2001      	movs	r0, #1
    2ed2:	bd10      	pop	{r4, pc}
    2ed4:	2000      	movs	r0, #0
    2ed6:	bd10      	pop	{r4, pc}
    2ed8:	20000170 	.word	0x20000170
    2edc:	200011ee 	.word	0x200011ee
    2ee0:	4908      	ldr	r1, [pc, #32]	; (2f04 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    2ee2:	b510      	push	{r4, lr}
    2ee4:	4603      	mov	r3, r0
    2ee6:	2000      	movs	r0, #0
    2ee8:	784a      	ldrb	r2, [r1, #1]
    2eea:	e006      	b.n	2efa <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    2eec:	180c      	adds	r4, r1, r0
    2eee:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    2ef2:	429c      	cmp	r4, r3
    2ef4:	d004      	beq.n	2f00 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    2ef6:	1c40      	adds	r0, r0, #1
    2ef8:	b2c0      	uxtb	r0, r0
    2efa:	4282      	cmp	r2, r0
    2efc:	d8f6      	bhi.n	2eec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    2efe:	2008      	movs	r0, #8
    2f00:	bd10      	pop	{r4, pc}
    2f02:	0000      	.short	0x0000
    2f04:	200011ee 	.word	0x200011ee
    2f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f0a:	4c1a      	ldr	r4, [pc, #104]	; (2f74 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    2f0c:	4603      	mov	r3, r0
    2f0e:	2000      	movs	r0, #0
    2f10:	7825      	ldrb	r5, [r4, #0]
    2f12:	e02b      	b.n	2f6c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    2f14:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2f18:	4422      	add	r2, r4
    2f1a:	780f      	ldrb	r7, [r1, #0]
    2f1c:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    2f20:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    2f24:	ea87 070c 	eor.w	r7, r7, ip
    2f28:	405e      	eors	r6, r3
    2f2a:	443e      	add	r6, r7
    2f2c:	784f      	ldrb	r7, [r1, #1]
    2f2e:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2f32:	ea87 070c 	eor.w	r7, r7, ip
    2f36:	443e      	add	r6, r7
    2f38:	788f      	ldrb	r7, [r1, #2]
    2f3a:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2f3e:	ea87 070c 	eor.w	r7, r7, ip
    2f42:	443e      	add	r6, r7
    2f44:	78cf      	ldrb	r7, [r1, #3]
    2f46:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2f4a:	ea87 070c 	eor.w	r7, r7, ip
    2f4e:	443e      	add	r6, r7
    2f50:	790f      	ldrb	r7, [r1, #4]
    2f52:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2f56:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    2f5a:	ea87 070c 	eor.w	r7, r7, ip
    2f5e:	443e      	add	r6, r7
    2f60:	794f      	ldrb	r7, [r1, #5]
    2f62:	4057      	eors	r7, r2
    2f64:	42f7      	cmn	r7, r6
    2f66:	d004      	beq.n	2f72 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2f68:	1c40      	adds	r0, r0, #1
    2f6a:	b2c0      	uxtb	r0, r0
    2f6c:	4285      	cmp	r5, r0
    2f6e:	d8d1      	bhi.n	2f14 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    2f70:	2008      	movs	r0, #8
    2f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f74:	200011ee 	.word	0x200011ee

00002f78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f7c:	4604      	mov	r4, r0
    2f7e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2f82:	f04f 0901 	mov.w	r9, #1
    2f86:	b171      	cbz	r1, 2fa6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2f88:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2f8c:	1e7e      	subs	r6, r7, #1
    2f8e:	2901      	cmp	r1, #1
    2f90:	d029      	beq.n	2fe6 <CONFIG_USB_DEVICE_VID+0x3>
    2f92:	2902      	cmp	r1, #2
    2f94:	d04e      	beq.n	3034 <CONFIG_USB_DEVICE_VID+0x51>
    2f96:	2903      	cmp	r1, #3
    2f98:	d123      	bne.n	2fe2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2f9a:	4639      	mov	r1, r7
    2f9c:	4630      	mov	r0, r6
    2f9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fa2:	f007 bcee 	b.w	a982 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2fa6:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2faa:	2100      	movs	r1, #0
    2fac:	f009 fa2f 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2fb0:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2fb4:	4924      	ldr	r1, [pc, #144]	; (3048 <CONFIG_USB_DEVICE_VID+0x65>)
    2fb6:	66e9      	str	r1, [r5, #108]	; 0x6c
    2fb8:	4620      	mov	r0, r4
    2fba:	2107      	movs	r1, #7
    2fbc:	6729      	str	r1, [r5, #112]	; 0x70
    2fbe:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2fc2:	f021 0104 	bic.w	r1, r1, #4
    2fc6:	7001      	strb	r1, [r0, #0]
    2fc8:	20fe      	movs	r0, #254	; 0xfe
    2fca:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2fce:	207f      	movs	r0, #127	; 0x7f
    2fd0:	7668      	strb	r0, [r5, #25]
    2fd2:	481e      	ldr	r0, [pc, #120]	; (304c <CONFIG_USB_DEVICE_VID+0x69>)
    2fd4:	60a8      	str	r0, [r5, #8]
    2fd6:	2000      	movs	r0, #0
    2fd8:	e9c5 0000 	strd	r0, r0, [r5]
    2fdc:	2020      	movs	r0, #32
    2fde:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2fe6:	f04f 0800 	mov.w	r8, #0
    2fea:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2fee:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2ff2:	6921      	ldr	r1, [r4, #16]
    2ff4:	4816      	ldr	r0, [pc, #88]	; (3050 <CONFIG_USB_DEVICE_VID+0x6d>)
    2ff6:	460a      	mov	r2, r1
    2ff8:	4408      	add	r0, r1
    2ffa:	fbb0 f0f1 	udiv	r0, r0, r1
    2ffe:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    3002:	f640 30b8 	movw	r0, #3000	; 0xbb8
    3006:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    300a:	8b63      	ldrh	r3, [r4, #26]
    300c:	4628      	mov	r0, r5
    300e:	f000 f821 	bl	3054 <CONFIG_USB_DEVICE_VID+0x71>
    3012:	4639      	mov	r1, r7
    3014:	4630      	mov	r0, r6
    3016:	f007 fcb4 	bl	a982 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    301a:	f009 f900 	bl	c21e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    301e:	b118      	cbz	r0, 3028 <CONFIG_USB_DEVICE_VID+0x45>
    3020:	6960      	ldr	r0, [r4, #20]
    3022:	f000 f9a9 	bl	3378 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    3026:	b110      	cbz	r0, 302e <CONFIG_USB_DEVICE_VID+0x4b>
    3028:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    302c:	e7d9      	b.n	2fe2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    302e:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    3032:	e7d6      	b.n	2fe2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    3034:	6901      	ldr	r1, [r0, #16]
    3036:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    303a:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    303e:	4628      	mov	r0, r5
    3040:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3044:	f000 b806 	b.w	3054 <CONFIG_USB_DEVICE_VID+0x71>
    3048:	c404492f 	.word	0xc404492f
    304c:	fffce000 	.word	0xfffce000
    3050:	01c9c37f 	.word	0x01c9c37f
    3054:	b510      	push	{r4, lr}
    3056:	2400      	movs	r4, #0
    3058:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    305c:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    3060:	434c      	muls	r4, r1
    3062:	fbb4 f4f2 	udiv	r4, r4, r2
    3066:	f820 4910 	strh.w	r4, [r0], #-16
    306a:	f240 2471 	movw	r4, #625	; 0x271
    306e:	4363      	muls	r3, r4
    3070:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    3074:	1e5b      	subs	r3, r3, #1
    3076:	fbb3 f3f2 	udiv	r3, r3, r2
    307a:	81c3      	strh	r3, [r0, #14]
    307c:	4b09      	ldr	r3, [pc, #36]	; (30a4 <CONFIG_USB_DEVICE_VID+0xc1>)
    307e:	fbb3 f3f2 	udiv	r3, r3, r2
    3082:	1c5b      	adds	r3, r3, #1
    3084:	8283      	strh	r3, [r0, #20]
    3086:	8903      	ldrh	r3, [r0, #8]
    3088:	4363      	muls	r3, r4
    308a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    308e:	1e5b      	subs	r3, r3, #1
    3090:	fbb3 f3f2 	udiv	r3, r3, r2
    3094:	6043      	str	r3, [r0, #4]
    3096:	6803      	ldr	r3, [r0, #0]
    3098:	434b      	muls	r3, r1
    309a:	fbb3 f1f2 	udiv	r1, r3, r2
    309e:	6001      	str	r1, [r0, #0]
    30a0:	bd10      	pop	{r4, pc}
    30a2:	0000      	.short	0x0000
    30a4:	02625a00 	.word	0x02625a00

000030a8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    30a8:	4902      	ldr	r1, [pc, #8]	; (30b4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    30aa:	f991 1000 	ldrsb.w	r1, [r1]
    30ae:	f007 bc5d 	b.w	a96c <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    30b2:	0000      	.short	0x0000
    30b4:	20000188 	.word	0x20000188

000030b8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    30b8:	b508      	push	{r3, lr}
    30ba:	207f      	movs	r0, #127	; 0x7f
    30bc:	f88d 0000 	strb.w	r0, [sp]
    30c0:	4668      	mov	r0, sp
    30c2:	f002 f89f 	bl	5204 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    30c6:	b140      	cbz	r0, 30da <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    30c8:	4805      	ldr	r0, [pc, #20]	; (30e0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    30ca:	7840      	ldrb	r0, [r0, #1]
    30cc:	4240      	negs	r0, r0
    30ce:	b241      	sxtb	r1, r0
    30d0:	f99d 0000 	ldrsb.w	r0, [sp]
    30d4:	f007 fc4a 	bl	a96c <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    30d8:	bd08      	pop	{r3, pc}
    30da:	f99d 0000 	ldrsb.w	r0, [sp]
    30de:	bd08      	pop	{r3, pc}
    30e0:	20000188 	.word	0x20000188

000030e4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    30e4:	4a01      	ldr	r2, [pc, #4]	; (30ec <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    30e6:	7010      	strb	r0, [r2, #0]
    30e8:	7051      	strb	r1, [r2, #1]
    30ea:	4770      	bx	lr
    30ec:	20000188 	.word	0x20000188

000030f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    30f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 3270 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    30f8:	4f5e      	ldr	r7, [pc, #376]	; (3274 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    30fa:	4683      	mov	fp, r0
    30fc:	f04f 0a01 	mov.w	sl, #1
    3100:	2600      	movs	r6, #0
    3102:	6878      	ldr	r0, [r7, #4]
    3104:	4635      	mov	r5, r6
    3106:	7a00      	ldrb	r0, [r0, #8]
    3108:	f88d 0000 	strb.w	r0, [sp]
    310c:	9800      	ldr	r0, [sp, #0]
    310e:	9000      	str	r0, [sp, #0]
    3110:	f89d 1000 	ldrb.w	r1, [sp]
    3114:	2910      	cmp	r1, #16
    3116:	d106      	bne.n	3126 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    3118:	f899 1013 	ldrb.w	r1, [r9, #19]
    311c:	b119      	cbz	r1, 3126 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    311e:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    3122:	2800      	cmp	r0, #0
    3124:	d073      	beq.n	320e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3126:	f88d 6000 	strb.w	r6, [sp]
    312a:	4668      	mov	r0, sp
    312c:	f000 f8ac 	bl	3288 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc>
    3130:	f89d 1000 	ldrb.w	r1, [sp]
    3134:	2900      	cmp	r1, #0
    3136:	d1f8      	bne.n	312a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    3138:	2800      	cmp	r0, #0
    313a:	d068      	beq.n	320e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    313c:	4604      	mov	r4, r0
    313e:	7a00      	ldrb	r0, [r0, #8]
    3140:	f88d 0000 	strb.w	r0, [sp]
    3144:	9800      	ldr	r0, [sp, #0]
    3146:	9000      	str	r0, [sp, #0]
    3148:	f89d 8000 	ldrb.w	r8, [sp]
    314c:	f104 0008 	add.w	r0, r4, #8
    3150:	2105      	movs	r1, #5
    3152:	9000      	str	r0, [sp, #0]
    3154:	7001      	strb	r1, [r0, #0]
    3156:	4640      	mov	r0, r8
    3158:	f1b8 0f08 	cmp.w	r8, #8
    315c:	d042      	beq.n	31e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    315e:	dc07      	bgt.n	3170 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    3160:	2802      	cmp	r0, #2
    3162:	d00d      	beq.n	3180 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    3164:	2803      	cmp	r0, #3
    3166:	d017      	beq.n	3198 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    3168:	f1b8 0f04 	cmp.w	r8, #4
    316c:	d105      	bne.n	317a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    316e:	e01d      	b.n	31ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    3170:	280f      	cmp	r0, #15
    3172:	d052      	beq.n	321a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    3174:	f1b8 0f10 	cmp.w	r8, #16
    3178:	d059      	beq.n	322e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    317a:	f240 214a 	movw	r1, #586	; 0x24a
    317e:	e065      	b.n	324c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3180:	6862      	ldr	r2, [r4, #4]
    3182:	b132      	cbz	r2, 3192 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    3184:	4659      	mov	r1, fp
    3186:	4620      	mov	r0, r4
    3188:	4790      	blx	r2
    318a:	2004      	movs	r0, #4
    318c:	f360 0507 	bfi	r5, r0, #0, #8
    3190:	e010      	b.n	31b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    3192:	f240 11c3 	movw	r1, #451	; 0x1c3
    3196:	e059      	b.n	324c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3198:	6862      	ldr	r2, [r4, #4]
    319a:	b122      	cbz	r2, 31a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    319c:	4659      	mov	r1, fp
    319e:	4620      	mov	r0, r4
    31a0:	4790      	blx	r2
    31a2:	4605      	mov	r5, r0
    31a4:	e006      	b.n	31b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    31a6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    31aa:	e04f      	b.n	324c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    31ac:	6861      	ldr	r1, [r4, #4]
    31ae:	b1b1      	cbz	r1, 31de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    31b0:	4620      	mov	r0, r4
    31b2:	4788      	blx	r1
    31b4:	f3c5 2007 	ubfx	r0, r5, #8, #8
    31b8:	2801      	cmp	r0, #1
    31ba:	d04a      	beq.n	3252 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    31bc:	f3ef 8110 	mrs	r1, PRIMASK
    31c0:	b672      	cpsid	i
    31c2:	7a20      	ldrb	r0, [r4, #8]
    31c4:	f88d 0000 	strb.w	r0, [sp]
    31c8:	9800      	ldr	r0, [sp, #0]
    31ca:	9000      	str	r0, [sp, #0]
    31cc:	f89d 0000 	ldrb.w	r0, [sp]
    31d0:	2805      	cmp	r0, #5
    31d2:	d042      	beq.n	325a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    31d4:	b3b0      	cbz	r0, 3244 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    31d6:	f366 0507 	bfi	r5, r6, #0, #8
    31da:	b3a1      	cbz	r1, 3246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    31dc:	e041      	b.n	3262 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    31de:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    31e2:	e033      	b.n	324c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    31e4:	6860      	ldr	r0, [r4, #4]
    31e6:	465d      	mov	r5, fp
    31e8:	b198      	cbz	r0, 3212 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    31ea:	8804      	ldrh	r4, [r0, #0]
    31ec:	4620      	mov	r0, r4
    31ee:	f7ff fb93 	bl	2918 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    31f2:	b180      	cbz	r0, 3216 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    31f4:	706e      	strb	r6, [r5, #1]
    31f6:	210d      	movs	r1, #13
    31f8:	7029      	strb	r1, [r5, #0]
    31fa:	80ec      	strh	r4, [r5, #6]
    31fc:	f8a5 a008 	strh.w	sl, [r5, #8]
    3200:	f885 a004 	strb.w	sl, [r5, #4]
    3204:	4631      	mov	r1, r6
    3206:	f007 f859 	bl	a2bc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    320a:	2004      	movs	r0, #4
    320c:	613e      	str	r6, [r7, #16]
    320e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3212:	21e5      	movs	r1, #229	; 0xe5
    3214:	e01a      	b.n	324c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3216:	21c5      	movs	r1, #197	; 0xc5
    3218:	e018      	b.n	324c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    321a:	f88b 6001 	strb.w	r6, [fp, #1]
    321e:	2116      	movs	r1, #22
    3220:	f88b 1000 	strb.w	r1, [fp]
    3224:	f8d4 1009 	ldr.w	r1, [r4, #9]
    3228:	f8cb 1004 	str.w	r1, [fp, #4]
    322c:	e7ad      	b.n	318a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    322e:	4812      	ldr	r0, [pc, #72]	; (3278 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    3230:	6802      	ldr	r2, [r0, #0]
    3232:	b122      	cbz	r2, 323e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    3234:	6860      	ldr	r0, [r4, #4]
    3236:	b138      	cbz	r0, 3248 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    3238:	8800      	ldrh	r0, [r0, #0]
    323a:	4659      	mov	r1, fp
    323c:	4790      	blx	r2
    323e:	2002      	movs	r0, #2
    3240:	613e      	str	r6, [r7, #16]
    3242:	e7e4      	b.n	320e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3244:	e009      	b.n	325a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3246:	e00b      	b.n	3260 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    3248:	f44f 7110 	mov.w	r1, #576	; 0x240
    324c:	2010      	movs	r0, #16
    324e:	f7fe fefd 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3252:	9800      	ldr	r0, [sp, #0]
    3254:	4641      	mov	r1, r8
    3256:	7001      	strb	r1, [r0, #0]
    3258:	e003      	b.n	3262 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    325a:	7226      	strb	r6, [r4, #8]
    325c:	613e      	str	r6, [r7, #16]
    325e:	e7bc      	b.n	31da <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    3260:	b662      	cpsie	i
    3262:	f015 0fff 	tst.w	r5, #255	; 0xff
    3266:	f43f af4c 	beq.w	3102 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    326a:	b2e8      	uxtb	r0, r5
    326c:	e7cf      	b.n	320e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    326e:	0000      	.short	0x0000
    3270:	200010f0 	.word	0x200010f0
    3274:	2000111c 	.word	0x2000111c
    3278:	20000084 	.word	0x20000084

0000327c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    327c:	4901      	ldr	r1, [pc, #4]	; (3284 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    327e:	7008      	strb	r0, [r1, #0]
    3280:	f000 b864 	b.w	334c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    3284:	2000018a 	.word	0x2000018a
    3288:	b538      	push	{r3, r4, r5, lr}
    328a:	4603      	mov	r3, r0
    328c:	4917      	ldr	r1, [pc, #92]	; (32ec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x70>)
    328e:	2000      	movs	r0, #0
    3290:	7018      	strb	r0, [r3, #0]
    3292:	6908      	ldr	r0, [r1, #16]
    3294:	2401      	movs	r4, #1
    3296:	b140      	cbz	r0, 32aa <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2e>
    3298:	7a02      	ldrb	r2, [r0, #8]
    329a:	f88d 2000 	strb.w	r2, [sp]
    329e:	9a00      	ldr	r2, [sp, #0]
    32a0:	9200      	str	r2, [sp, #0]
    32a2:	f89d 5000 	ldrb.w	r5, [sp]
    32a6:	2d00      	cmp	r5, #0
    32a8:	d111      	bne.n	32ce <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x52>
    32aa:	6848      	ldr	r0, [r1, #4]
    32ac:	7a02      	ldrb	r2, [r0, #8]
    32ae:	f88d 2000 	strb.w	r2, [sp]
    32b2:	9a00      	ldr	r2, [sp, #0]
    32b4:	9200      	str	r2, [sp, #0]
    32b6:	f89d 5000 	ldrb.w	r5, [sp]
    32ba:	2d01      	cmp	r5, #1
    32bc:	d006      	beq.n	32cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x50>
    32be:	f3ef 8210 	mrs	r2, PRIMASK
    32c2:	b672      	cpsid	i
    32c4:	6805      	ldr	r5, [r0, #0]
    32c6:	604d      	str	r5, [r1, #4]
    32c8:	b112      	cbz	r2, 32d0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x54>
    32ca:	e002      	b.n	32d2 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x56>
    32cc:	2000      	movs	r0, #0
    32ce:	bd38      	pop	{r3, r4, r5, pc}
    32d0:	b662      	cpsie	i
    32d2:	7a02      	ldrb	r2, [r0, #8]
    32d4:	f88d 2000 	strb.w	r2, [sp]
    32d8:	9a00      	ldr	r2, [sp, #0]
    32da:	9200      	str	r2, [sp, #0]
    32dc:	f89d 5000 	ldrb.w	r5, [sp]
    32e0:	b10d      	cbz	r5, 32e6 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x6a>
    32e2:	6108      	str	r0, [r1, #16]
    32e4:	bd38      	pop	{r3, r4, r5, pc}
    32e6:	701c      	strb	r4, [r3, #0]
    32e8:	bd38      	pop	{r3, r4, r5, pc}
    32ea:	0000      	.short	0x0000
    32ec:	2000111c 	.word	0x2000111c
    32f0:	b538      	push	{r3, r4, r5, lr}
    32f2:	b1d0      	cbz	r0, 332a <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xae>
    32f4:	6041      	str	r1, [r0, #4]
    32f6:	f100 0108 	add.w	r1, r0, #8
    32fa:	700a      	strb	r2, [r1, #0]
    32fc:	f3ef 8310 	mrs	r3, PRIMASK
    3300:	b672      	cpsid	i
    3302:	4c10      	ldr	r4, [pc, #64]	; (3344 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc8>)
    3304:	6004      	str	r4, [r0, #0]
    3306:	1f21      	subs	r1, r4, #4
    3308:	684a      	ldr	r2, [r1, #4]
    330a:	b14a      	cbz	r2, 3320 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    330c:	7a12      	ldrb	r2, [r2, #8]
    330e:	f88d 2000 	strb.w	r2, [sp]
    3312:	9a00      	ldr	r2, [sp, #0]
    3314:	9200      	str	r2, [sp, #0]
    3316:	f89d 5000 	ldrb.w	r5, [sp]
    331a:	2d01      	cmp	r5, #1
    331c:	d100      	bne.n	3320 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    331e:	600c      	str	r4, [r1, #0]
    3320:	680a      	ldr	r2, [r1, #0]
    3322:	6010      	str	r0, [r2, #0]
    3324:	6008      	str	r0, [r1, #0]
    3326:	b12b      	cbz	r3, 3334 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xb8>
    3328:	e005      	b.n	3336 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xba>
    332a:	f240 2175 	movw	r1, #629	; 0x275
    332e:	2010      	movs	r0, #16
    3330:	f7fe fe8c 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3334:	b662      	cpsie	i
    3336:	4804      	ldr	r0, [pc, #16]	; (3348 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xcc>)
    3338:	7800      	ldrb	r0, [r0, #0]
    333a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    333e:	f006 b9a1 	b.w	9684 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3342:	0000      	.short	0x0000
    3344:	20001120 	.word	0x20001120
    3348:	2000018a 	.word	0x2000018a
    334c:	b510      	push	{r4, lr}
    334e:	2214      	movs	r2, #20
    3350:	2100      	movs	r1, #0
    3352:	4808      	ldr	r0, [pc, #32]	; (3374 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    3354:	f009 f85b 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3358:	4806      	ldr	r0, [pc, #24]	; (3374 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    335a:	2212      	movs	r2, #18
    335c:	2100      	movs	r1, #0
    335e:	3814      	subs	r0, #20
    3360:	f009 f855 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3364:	4803      	ldr	r0, [pc, #12]	; (3374 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    3366:	2101      	movs	r1, #1
    3368:	7301      	strb	r1, [r0, #12]
    336a:	1d01      	adds	r1, r0, #4
    336c:	6041      	str	r1, [r0, #4]
    336e:	6001      	str	r1, [r0, #0]
    3370:	bd10      	pop	{r4, pc}
    3372:	0000      	.short	0x0000
    3374:	2000111c 	.word	0x2000111c

00003378 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    3378:	b5f0      	push	{r4, r5, r6, r7, lr}
    337a:	f06f 021f 	mvn.w	r2, #31
    337e:	0c01      	lsrs	r1, r0, #16
    3380:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    3384:	251f      	movs	r5, #31
    3386:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    338a:	3854      	subs	r0, #84	; 0x54
    338c:	d00d      	beq.n	33aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    338e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    3392:	3855      	subs	r0, #85	; 0x55
    3394:	d009      	beq.n	33aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3396:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    339a:	38aa      	subs	r0, #170	; 0xaa
    339c:	d005      	beq.n	33aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    339e:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    33a2:	38aa      	subs	r0, #170	; 0xaa
    33a4:	d001      	beq.n	33aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    33a6:	2001      	movs	r0, #1
    33a8:	e000      	b.n	33ac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    33aa:	2000      	movs	r0, #0
    33ac:	2200      	movs	r2, #0
    33ae:	4613      	mov	r3, r2
    33b0:	ea4f 0402 	mov.w	r4, r2
    33b4:	ea82 0701 	eor.w	r7, r2, r1
    33b8:	43ff      	mvns	r7, r7
    33ba:	431f      	orrs	r7, r3
    33bc:	1c7f      	adds	r7, r7, #1
    33be:	d00f      	beq.n	33e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    33c0:	f006 0701 	and.w	r7, r6, #1
    33c4:	0852      	lsrs	r2, r2, #1
    33c6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    33ca:	f005 0701 	and.w	r7, r5, #1
    33ce:	085b      	lsrs	r3, r3, #1
    33d0:	0876      	lsrs	r6, r6, #1
    33d2:	086d      	lsrs	r5, r5, #1
    33d4:	1c64      	adds	r4, r4, #1
    33d6:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    33da:	2c16      	cmp	r4, #22
    33dc:	d3ea      	bcc.n	33b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    33de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33e0:	2000      	movs	r0, #0
    33e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000033e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    33e4:	b510      	push	{r4, lr}
    33e6:	4804      	ldr	r0, [pc, #16]	; (33f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    33e8:	f007 fba4 	bl	ab34 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    33ec:	4802      	ldr	r0, [pc, #8]	; (33f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    33ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33f2:	3008      	adds	r0, #8
    33f4:	f007 bb9e 	b.w	ab34 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    33f8:	20000088 	.word	0x20000088

000033fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    33fc:	4801      	ldr	r0, [pc, #4]	; (3404 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    33fe:	f000 b809 	b.w	3414 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3402:	0000      	.short	0x0000
    3404:	20000088 	.word	0x20000088

00003408 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    3408:	4801      	ldr	r0, [pc, #4]	; (3410 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    340a:	f000 b803 	b.w	3414 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    340e:	0000      	.short	0x0000
    3410:	20000090 	.word	0x20000090
    3414:	b510      	push	{r4, lr}
    3416:	e9d0 2100 	ldrd	r2, r1, [r0]
    341a:	4b09      	ldr	r3, [pc, #36]	; (3440 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    341c:	4c09      	ldr	r4, [pc, #36]	; (3444 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    341e:	4353      	muls	r3, r2
    3420:	4354      	muls	r4, r2
    3422:	4051      	eors	r1, r2
    3424:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    3428:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    342c:	ea4f 41f1 	mov.w	r1, r1, ror #19
    3430:	e9c0 2100 	strd	r2, r1, [r0]
    3434:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    3438:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    343c:	4618      	mov	r0, r3
    343e:	bd10      	pop	{r4, pc}
    3440:	c6ef3760 	.word	0xc6ef3760
    3444:	9e3779bb 	.word	0x9e3779bb

00003448 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    3448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    344a:	f007 fb98 	bl	ab7e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    344e:	4604      	mov	r4, r0
    3450:	460d      	mov	r5, r1
    3452:	466a      	mov	r2, sp
    3454:	f000 f862 	bl	351c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3458:	b108      	cbz	r0, 345e <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    345a:	2001      	movs	r0, #1
    345c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    345e:	480f      	ldr	r0, [pc, #60]	; (349c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    3460:	7803      	ldrb	r3, [r0, #0]
    3462:	7841      	ldrb	r1, [r0, #1]
    3464:	428b      	cmp	r3, r1
    3466:	d101      	bne.n	346c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    3468:	2000      	movs	r0, #0
    346a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    346c:	461a      	mov	r2, r3
    346e:	6841      	ldr	r1, [r0, #4]
    3470:	e008      	b.n	3484 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    3472:	bf00      	nop
    3474:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    3478:	1e52      	subs	r2, r2, #1
    347a:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    347e:	e9c6 7c00 	strd	r7, ip, [r6]
    3482:	b2d2      	uxtb	r2, r2
    3484:	f89d 6000 	ldrb.w	r6, [sp]
    3488:	42b2      	cmp	r2, r6
    348a:	d8f3      	bhi.n	3474 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    348c:	b2f2      	uxtb	r2, r6
    348e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    3492:	1c5b      	adds	r3, r3, #1
    3494:	e9c1 4500 	strd	r4, r5, [r1]
    3498:	7003      	strb	r3, [r0, #0]
    349a:	e7de      	b.n	345a <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    349c:	20000098 	.word	0x20000098

000034a0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    34a0:	b510      	push	{r4, lr}
    34a2:	0742      	lsls	r2, r0, #29
    34a4:	d003      	beq.n	34ae <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    34a6:	2163      	movs	r1, #99	; 0x63
    34a8:	2048      	movs	r0, #72	; 0x48
    34aa:	f7fe fdcf 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    34ae:	b120      	cbz	r0, 34ba <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    34b0:	4a03      	ldr	r2, [pc, #12]	; (34c0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    34b2:	7051      	strb	r1, [r2, #1]
    34b4:	6050      	str	r0, [r2, #4]
    34b6:	2000      	movs	r0, #0
    34b8:	7010      	strb	r0, [r2, #0]
    34ba:	00c8      	lsls	r0, r1, #3
    34bc:	bd10      	pop	{r4, pc}
    34be:	0000      	.short	0x0000
    34c0:	20000098 	.word	0x20000098

000034c4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    34c4:	b538      	push	{r3, r4, r5, lr}
    34c6:	f007 fb5a 	bl	ab7e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    34ca:	466a      	mov	r2, sp
    34cc:	f000 f826 	bl	351c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    34d0:	2800      	cmp	r0, #0
    34d2:	d014      	beq.n	34fe <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    34d4:	4a0a      	ldr	r2, [pc, #40]	; (3500 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    34d6:	7810      	ldrb	r0, [r2, #0]
    34d8:	1e40      	subs	r0, r0, #1
    34da:	b2c1      	uxtb	r1, r0
    34dc:	7011      	strb	r1, [r2, #0]
    34de:	f89d 0000 	ldrb.w	r0, [sp]
    34e2:	6852      	ldr	r2, [r2, #4]
    34e4:	e008      	b.n	34f8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    34e6:	bf00      	nop
    34e8:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    34ec:	1c40      	adds	r0, r0, #1
    34ee:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    34f2:	e9c3 4500 	strd	r4, r5, [r3]
    34f6:	b2c0      	uxtb	r0, r0
    34f8:	4288      	cmp	r0, r1
    34fa:	d3f5      	bcc.n	34e8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    34fc:	2001      	movs	r0, #1
    34fe:	bd38      	pop	{r3, r4, r5, pc}
    3500:	20000098 	.word	0x20000098

00003504 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3504:	4901      	ldr	r1, [pc, #4]	; (350c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3506:	2000      	movs	r0, #0
    3508:	7008      	strb	r0, [r1, #0]
    350a:	4770      	bx	lr
    350c:	20000098 	.word	0x20000098

00003510 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3510:	4801      	ldr	r0, [pc, #4]	; (3518 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3512:	7840      	ldrb	r0, [r0, #1]
    3514:	4770      	bx	lr
    3516:	0000      	.short	0x0000
    3518:	20000098 	.word	0x20000098
    351c:	b5f0      	push	{r4, r5, r6, r7, lr}
    351e:	4d20      	ldr	r5, [pc, #128]	; (35a0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    3520:	2300      	movs	r3, #0
    3522:	7013      	strb	r3, [r2, #0]
    3524:	782b      	ldrb	r3, [r5, #0]
    3526:	b323      	cbz	r3, 3572 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    3528:	2400      	movs	r4, #0
    352a:	1e5b      	subs	r3, r3, #1
    352c:	b2db      	uxtb	r3, r3
    352e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3532:	e00b      	b.n	354c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3534:	18e5      	adds	r5, r4, r3
    3536:	086d      	lsrs	r5, r5, #1
    3538:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    353c:	e9d6 7600 	ldrd	r7, r6, [r6]
    3540:	1a3f      	subs	r7, r7, r0
    3542:	418e      	sbcs	r6, r1
    3544:	d201      	bcs.n	354a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    3546:	462c      	mov	r4, r5
    3548:	e000      	b.n	354c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    354a:	462b      	mov	r3, r5
    354c:	1b1d      	subs	r5, r3, r4
    354e:	2d01      	cmp	r5, #1
    3550:	dcf0      	bgt.n	3534 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    3552:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    3556:	e9d6 5600 	ldrd	r5, r6, [r6]
    355a:	ea80 0705 	eor.w	r7, r0, r5
    355e:	ea81 0e06 	eor.w	lr, r1, r6
    3562:	ea57 070e 	orrs.w	r7, r7, lr
    3566:	d005      	beq.n	3574 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    3568:	1b45      	subs	r5, r0, r5
    356a:	eb71 0506 	sbcs.w	r5, r1, r6
    356e:	d203      	bcs.n	3578 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    3570:	7014      	strb	r4, [r2, #0]
    3572:	e010      	b.n	3596 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    3574:	7014      	strb	r4, [r2, #0]
    3576:	e011      	b.n	359c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    3578:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    357c:	e9d5 4500 	ldrd	r4, r5, [r5]
    3580:	ea80 0604 	eor.w	r6, r0, r4
    3584:	ea81 0705 	eor.w	r7, r1, r5
    3588:	433e      	orrs	r6, r7
    358a:	d006      	beq.n	359a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    358c:	1b00      	subs	r0, r0, r4
    358e:	41a9      	sbcs	r1, r5
    3590:	d300      	bcc.n	3594 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    3592:	1c5b      	adds	r3, r3, #1
    3594:	7013      	strb	r3, [r2, #0]
    3596:	2000      	movs	r0, #0
    3598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    359a:	7013      	strb	r3, [r2, #0]
    359c:	2001      	movs	r0, #1
    359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35a0:	20000098 	.word	0x20000098

000035a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    35a4:	b570      	push	{r4, r5, r6, lr}
    35a6:	4604      	mov	r4, r0
    35a8:	7c00      	ldrb	r0, [r0, #16]
    35aa:	b300      	cbz	r0, 35ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    35ac:	2802      	cmp	r0, #2
    35ae:	d01e      	beq.n	35ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    35b0:	f05f 0001 	movs.w	r0, #1
    35b4:	f104 0151 	add.w	r1, r4, #81	; 0x51
    35b8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    35bc:	460d      	mov	r5, r1
    35be:	b1c0      	cbz	r0, 35f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    35c0:	7de0      	ldrb	r0, [r4, #23]
    35c2:	b1f0      	cbz	r0, 3602 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    35c4:	f8d4 0011 	ldr.w	r0, [r4, #17]
    35c8:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    35cc:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    35d0:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    35d4:	7c20      	ldrb	r0, [r4, #16]
    35d6:	f007 fb02 	bl	abde <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    35da:	7620      	strb	r0, [r4, #24]
    35dc:	2008      	movs	r0, #8
    35de:	7660      	strb	r0, [r4, #25]
    35e0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    35e4:	4629      	mov	r1, r5
    35e6:	f007 fae6 	bl	abb6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    35ea:	b9a8      	cbnz	r0, 3618 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    35ec:	e00e      	b.n	360c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    35ee:	2000      	movs	r0, #0
    35f0:	e7e0      	b.n	35b4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    35f2:	2000      	movs	r0, #0
    35f4:	f7ff fb9c 	bl	2d30 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    35f8:	2800      	cmp	r0, #0
    35fa:	d1eb      	bne.n	35d4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    35fc:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3600:	e001      	b.n	3606 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3602:	f240 41be 	movw	r1, #1214	; 0x4be
    3606:	202d      	movs	r0, #45	; 0x2d
    3608:	f7fe fd20 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    360c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3610:	4629      	mov	r1, r5
    3612:	f007 fad9 	bl	abc8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3616:	b100      	cbz	r0, 361a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3618:	2001      	movs	r0, #1
    361a:	76a0      	strb	r0, [r4, #26]
    361c:	7e20      	ldrb	r0, [r4, #24]
    361e:	b130      	cbz	r0, 362e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3620:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3624:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3628:	f007 f91e 	bl	a868 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    362c:	7660      	strb	r0, [r4, #25]
    362e:	f7ff fc25 	bl	2e7c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3632:	490c      	ldr	r1, [pc, #48]	; (3664 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3634:	fba0 2301 	umull	r2, r3, r0, r1
    3638:	f104 0048 	add.w	r0, r4, #72	; 0x48
    363c:	f007 fc39 	bl	aeb2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    3640:	2100      	movs	r1, #0
    3642:	4620      	mov	r0, r4
    3644:	f007 fbee 	bl	ae24 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    3648:	2000      	movs	r0, #0
    364a:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    364e:	78a0      	ldrb	r0, [r4, #2]
    3650:	0740      	lsls	r0, r0, #29
    3652:	d505      	bpl.n	3660 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3654:	4620      	mov	r0, r4
    3656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    365a:	2100      	movs	r1, #0
    365c:	f000 bd84 	b.w	4168 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x168>
    3660:	bd70      	pop	{r4, r5, r6, pc}
    3662:	0000      	.short	0x0000
    3664:	000f4240 	.word	0x000f4240

00003668 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3668:	b530      	push	{r4, r5, lr}
    366a:	460c      	mov	r4, r1
    366c:	b08d      	sub	sp, #52	; 0x34
    366e:	4605      	mov	r5, r0
    3670:	4601      	mov	r1, r0
    3672:	2224      	movs	r2, #36	; 0x24
    3674:	a802      	add	r0, sp, #8
    3676:	f008 fe50 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    367a:	a80b      	add	r0, sp, #44	; 0x2c
    367c:	f007 fc76 	bl	af6c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3680:	7aa0      	ldrb	r0, [r4, #10]
    3682:	f88d 0018 	strb.w	r0, [sp, #24]
    3686:	7820      	ldrb	r0, [r4, #0]
    3688:	f88d 0008 	strb.w	r0, [sp, #8]
    368c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3690:	f8ad 0000 	strh.w	r0, [sp]
    3694:	f89d 0000 	ldrb.w	r0, [sp]
    3698:	f000 0101 	and.w	r1, r0, #1
    369c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    36a0:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    36a4:	f3c0 0280 	ubfx	r2, r0, #2, #1
    36a8:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    36ac:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    36b0:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    36b4:	f3c0 1200 	ubfx	r2, r0, #4, #1
    36b8:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    36bc:	f3c0 1240 	ubfx	r2, r0, #5, #1
    36c0:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    36c4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    36c8:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    36cc:	f8ad 000a 	strh.w	r0, [sp, #10]
    36d0:	7d20      	ldrb	r0, [r4, #20]
    36d2:	2801      	cmp	r0, #1
    36d4:	d006      	beq.n	36e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    36d6:	2802      	cmp	r0, #2
    36d8:	d004      	beq.n	36e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    36da:	f240 21e9 	movw	r1, #745	; 0x2e9
    36de:	2006      	movs	r0, #6
    36e0:	f7fe fcb4 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36e4:	f88d 000c 	strb.w	r0, [sp, #12]
    36e8:	7a61      	ldrb	r1, [r4, #9]
    36ea:	a80b      	add	r0, sp, #44	; 0x2c
    36ec:	f007 fc25 	bl	af3a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    36f0:	7d20      	ldrb	r0, [r4, #20]
    36f2:	2101      	movs	r1, #1
    36f4:	2802      	cmp	r0, #2
    36f6:	d102      	bne.n	36fe <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    36f8:	7d60      	ldrb	r0, [r4, #21]
    36fa:	1c40      	adds	r0, r0, #1
    36fc:	b2c1      	uxtb	r1, r0
    36fe:	7ea0      	ldrb	r0, [r4, #26]
    3700:	1c40      	adds	r0, r0, #1
    3702:	b2c2      	uxtb	r2, r0
    3704:	a80b      	add	r0, sp, #44	; 0x2c
    3706:	f007 fbdf 	bl	aec8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    370a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    370e:	0700      	lsls	r0, r0, #28
    3710:	d501      	bpl.n	3716 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3712:	2000      	movs	r0, #0
    3714:	e020      	b.n	3758 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3716:	a80b      	add	r0, sp, #44	; 0x2c
    3718:	f007 fbe8 	bl	aeec <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    371c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3720:	2228      	movs	r2, #40	; 0x28
    3722:	f000 fd7d 	bl	4220 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3726:	f240 2171 	movw	r1, #625	; 0x271
    372a:	f200 20db 	addw	r0, r0, #731	; 0x2db
    372e:	fbb0 f0f1 	udiv	r0, r0, r1
    3732:	4348      	muls	r0, r1
    3734:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3738:	f240 2371 	movw	r3, #625	; 0x271
    373c:	0a0a      	lsrs	r2, r1, #8
    373e:	f240 2171 	movw	r1, #625	; 0x271
    3742:	434a      	muls	r2, r1
    3744:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3748:	0a09      	lsrs	r1, r1, #8
    374a:	4359      	muls	r1, r3
    374c:	4290      	cmp	r0, r2
    374e:	d801      	bhi.n	3754 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    3750:	9204      	str	r2, [sp, #16]
    3752:	e004      	b.n	375e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3754:	4288      	cmp	r0, r1
    3756:	d801      	bhi.n	375c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3758:	9004      	str	r0, [sp, #16]
    375a:	e000      	b.n	375e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    375c:	9104      	str	r1, [sp, #16]
    375e:	7ca0      	ldrb	r0, [r4, #18]
    3760:	f88d 0017 	strb.w	r0, [sp, #23]
    3764:	7e20      	ldrb	r0, [r4, #24]
    3766:	2801      	cmp	r0, #1
    3768:	d000      	beq.n	376c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    376a:	2000      	movs	r0, #0
    376c:	f88d 0014 	strb.w	r0, [sp, #20]
    3770:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3772:	f006 ff09 	bl	a588 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3776:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3778:	f006 ffae 	bl	a6d8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    377c:	2224      	movs	r2, #36	; 0x24
    377e:	a902      	add	r1, sp, #8
    3780:	4628      	mov	r0, r5
    3782:	f008 fdca 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3786:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3788:	62a8      	str	r0, [r5, #40]	; 0x28
    378a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    378e:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3790:	7ae0      	ldrb	r0, [r4, #11]
    3792:	b168      	cbz	r0, 37b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3794:	2802      	cmp	r0, #2
    3796:	d00b      	beq.n	37b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3798:	f05f 0001 	movs.w	r0, #1
    379c:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    37a0:	68e0      	ldr	r0, [r4, #12]
    37a2:	65a8      	str	r0, [r5, #88]	; 0x58
    37a4:	8a20      	ldrh	r0, [r4, #16]
    37a6:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    37aa:	b00d      	add	sp, #52	; 0x34
    37ac:	2000      	movs	r0, #0
    37ae:	bd30      	pop	{r4, r5, pc}
    37b0:	2000      	movs	r0, #0
    37b2:	e7f3      	b.n	379c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

000037b4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    37b4:	4a0a      	ldr	r2, [pc, #40]	; (37e0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    37b6:	b510      	push	{r4, lr}
    37b8:	2100      	movs	r1, #0
    37ba:	7011      	strb	r1, [r2, #0]
    37bc:	4c09      	ldr	r4, [pc, #36]	; (37e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    37be:	6060      	str	r0, [r4, #4]
    37c0:	f000 f822 	bl	3808 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    37c4:	b110      	cbz	r0, 37cc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    37c6:	f240 312e 	movw	r1, #814	; 0x32e
    37ca:	e004      	b.n	37d6 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    37cc:	68a0      	ldr	r0, [r4, #8]
    37ce:	2800      	cmp	r0, #0
    37d0:	d104      	bne.n	37dc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    37d2:	f240 3131 	movw	r1, #817	; 0x331
    37d6:	202d      	movs	r0, #45	; 0x2d
    37d8:	f7fe fc38 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    37dc:	bd10      	pop	{r4, pc}
    37de:	0000      	.short	0x0000
    37e0:	20001130 	.word	0x20001130
    37e4:	200000a0 	.word	0x200000a0

000037e8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    37e8:	4902      	ldr	r1, [pc, #8]	; (37f4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    37ea:	4801      	ldr	r0, [pc, #4]	; (37f0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    37ec:	6088      	str	r0, [r1, #8]
    37ee:	4770      	bx	lr
    37f0:	00004208 	.word	0x00004208
    37f4:	200000a0 	.word	0x200000a0

000037f8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    37f8:	4902      	ldr	r1, [pc, #8]	; (3804 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    37fa:	6008      	str	r0, [r1, #0]
    37fc:	6889      	ldr	r1, [r1, #8]
    37fe:	6809      	ldr	r1, [r1, #0]
    3800:	4708      	bx	r1
    3802:	0000      	.short	0x0000
    3804:	200000a0 	.word	0x200000a0

00003808 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3808:	4808      	ldr	r0, [pc, #32]	; (382c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    380a:	b510      	push	{r4, lr}
    380c:	7800      	ldrb	r0, [r0, #0]
    380e:	b110      	cbz	r0, 3816 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3810:	240c      	movs	r4, #12
    3812:	4620      	mov	r0, r4
    3814:	bd10      	pop	{r4, pc}
    3816:	2400      	movs	r4, #0
    3818:	2218      	movs	r2, #24
    381a:	4621      	mov	r1, r4
    381c:	4803      	ldr	r0, [pc, #12]	; (382c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    381e:	f008 fdf6 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3822:	f001 fa03 	bl	4c2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3826:	f001 f921 	bl	4a6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    382a:	e7f2      	b.n	3812 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    382c:	20001130 	.word	0x20001130

00003830 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3830:	4904      	ldr	r1, [pc, #16]	; (3844 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3832:	b510      	push	{r4, lr}
    3834:	7809      	ldrb	r1, [r1, #0]
    3836:	2901      	cmp	r1, #1
    3838:	d101      	bne.n	383e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    383a:	f000 fbcd 	bl	3fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    383e:	2000      	movs	r0, #0
    3840:	bd10      	pop	{r4, pc}
    3842:	0000      	.short	0x0000
    3844:	20001130 	.word	0x20001130

00003848 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3848:	b510      	push	{r4, lr}
    384a:	4604      	mov	r4, r0
    384c:	7880      	ldrb	r0, [r0, #2]
    384e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3852:	b158      	cbz	r0, 386c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3854:	233c      	movs	r3, #60	; 0x3c
    3856:	22ff      	movs	r2, #255	; 0xff
    3858:	4620      	mov	r0, r4
    385a:	69e1      	ldr	r1, [r4, #28]
    385c:	f000 fbe2 	bl	4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>
    3860:	2202      	movs	r2, #2
    3862:	4904      	ldr	r1, [pc, #16]	; (3874 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3864:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3868:	f007 f950 	bl	ab0c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    386c:	2001      	movs	r0, #1
    386e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3872:	bd10      	pop	{r4, pc}
    3874:	0000adbd 	.word	0x0000adbd
    3878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    387c:	000f      	movs	r7, r1
    387e:	4604      	mov	r4, r0
    3880:	d023      	beq.n	38ca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3882:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3886:	4605      	mov	r5, r0
    3888:	f007 fb59 	bl	af3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    388c:	b9b0      	cbnz	r0, 38bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    388e:	78a0      	ldrb	r0, [r4, #2]
    3890:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3894:	b350      	cbz	r0, 38ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3896:	4628      	mov	r0, r5
    3898:	f007 fb28 	bl	aeec <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    389c:	4606      	mov	r6, r0
    389e:	4628      	mov	r0, r5
    38a0:	f007 fb4d 	bl	af3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    38a4:	1a30      	subs	r0, r6, r0
    38a6:	b2c0      	uxtb	r0, r0
    38a8:	f007 fb9e 	bl	afe8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    38ac:	4601      	mov	r1, r0
    38ae:	4835      	ldr	r0, [pc, #212]	; (3984 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    38b0:	6842      	ldr	r2, [r0, #4]
    38b2:	4411      	add	r1, r2
    38b4:	6041      	str	r1, [r0, #4]
    38b6:	4628      	mov	r0, r5
    38b8:	f007 fb5f 	bl	af7a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    38bc:	4628      	mov	r0, r5
    38be:	f007 fb21 	bl	af04 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    38c2:	4601      	mov	r1, r0
    38c4:	4620      	mov	r0, r4
    38c6:	f007 fae9 	bl	ae9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    38ca:	4d2f      	ldr	r5, [pc, #188]	; (3988 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    38cc:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    38d0:	2100      	movs	r1, #0
    38d2:	6868      	ldr	r0, [r5, #4]
    38d4:	8001      	strh	r1, [r0, #0]
    38d6:	f007 fa62 	bl	ad9e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    38da:	8860      	ldrh	r0, [r4, #2]
    38dc:	2813      	cmp	r0, #19
    38de:	d013      	beq.n	3908 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    38e0:	dc09      	bgt.n	38f6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    38e2:	2810      	cmp	r0, #16
    38e4:	d036      	beq.n	3954 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    38e6:	2812      	cmp	r0, #18
    38e8:	d109      	bne.n	38fe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    38ea:	e031      	b.n	3950 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    38ec:	4620      	mov	r0, r4
    38ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    38f2:	f000 bb71 	b.w	3fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    38f6:	2815      	cmp	r0, #21
    38f8:	d00f      	beq.n	391a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    38fa:	281d      	cmp	r0, #29
    38fc:	d00d      	beq.n	391a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    38fe:	f240 6173 	movw	r1, #1651	; 0x673
    3902:	202d      	movs	r0, #45	; 0x2d
    3904:	f7fe fba2 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3908:	2100      	movs	r1, #0
    390a:	6868      	ldr	r0, [r5, #4]
    390c:	f007 f877 	bl	a9fe <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3910:	2101      	movs	r1, #1
    3912:	6868      	ldr	r0, [r5, #4]
    3914:	f007 fa43 	bl	ad9e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3918:	e020      	b.n	395c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    391a:	2101      	movs	r1, #1
    391c:	6868      	ldr	r0, [r5, #4]
    391e:	f007 f86e 	bl	a9fe <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3922:	2101      	movs	r1, #1
    3924:	6868      	ldr	r0, [r5, #4]
    3926:	f007 fa3a 	bl	ad9e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    392a:	b136      	cbz	r6, 393a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    392c:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3930:	6868      	ldr	r0, [r5, #4]
    3932:	f007 f87f 	bl	aa34 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3936:	2101      	movs	r1, #1
    3938:	e006      	b.n	3948 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    393a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    393e:	6868      	ldr	r0, [r5, #4]
    3940:	f007 f878 	bl	aa34 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3944:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3948:	6868      	ldr	r0, [r5, #4]
    394a:	f007 f879 	bl	aa40 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    394e:	e005      	b.n	395c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3950:	2106      	movs	r1, #6
    3952:	e000      	b.n	3956 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3954:	2102      	movs	r1, #2
    3956:	6868      	ldr	r0, [r5, #4]
    3958:	f007 f851 	bl	a9fe <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    395c:	4620      	mov	r0, r4
    395e:	f000 fc31 	bl	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
    3962:	8860      	ldrh	r0, [r4, #2]
    3964:	281d      	cmp	r0, #29
    3966:	d007      	beq.n	3978 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3968:	2815      	cmp	r0, #21
    396a:	d005      	beq.n	3978 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    396c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3970:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3972:	6868      	ldr	r0, [r5, #4]
    3974:	f007 f833 	bl	a9de <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3978:	4639      	mov	r1, r7
    397a:	4620      	mov	r0, r4
    397c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3980:	f000 b9f4 	b.w	3d6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    3984:	20001130 	.word	0x20001130
    3988:	200000a0 	.word	0x200000a0
    398c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3990:	4d2f      	ldr	r5, [pc, #188]	; (3a50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3992:	4680      	mov	r8, r0
    3994:	7828      	ldrb	r0, [r5, #0]
    3996:	2802      	cmp	r0, #2
    3998:	d005      	beq.n	39a6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    399a:	7828      	ldrb	r0, [r5, #0]
    399c:	2803      	cmp	r0, #3
    399e:	d002      	beq.n	39a6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    39a0:	f640 512d 	movw	r1, #3373	; 0xd2d
    39a4:	e02b      	b.n	39fe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    39a6:	4c2b      	ldr	r4, [pc, #172]	; (3a54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    39a8:	6826      	ldr	r6, [r4, #0]
    39aa:	7b30      	ldrb	r0, [r6, #12]
    39ac:	b118      	cbz	r0, 39b6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    39ae:	f7ff fb83 	bl	30b8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    39b2:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    39b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
    39ba:	2700      	movs	r7, #0
    39bc:	f1b8 0f00 	cmp.w	r8, #0
    39c0:	f89c 0000 	ldrb.w	r0, [ip]
    39c4:	f000 060f 	and.w	r6, r0, #15
    39c8:	d027      	beq.n	3a1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    39ca:	6821      	ldr	r1, [r4, #0]
    39cc:	09c0      	lsrs	r0, r0, #7
    39ce:	f101 0351 	add.w	r3, r1, #81	; 0x51
    39d2:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    39d6:	f10c 0109 	add.w	r1, ip, #9
    39da:	f006 fed3 	bl	a784 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    39de:	b1e0      	cbz	r0, 3a1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    39e0:	4639      	mov	r1, r7
    39e2:	6860      	ldr	r0, [r4, #4]
    39e4:	f006 ffeb 	bl	a9be <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    39e8:	b1b8      	cbz	r0, 3a1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    39ea:	782a      	ldrb	r2, [r5, #0]
    39ec:	6820      	ldr	r0, [r4, #0]
    39ee:	4631      	mov	r1, r6
    39f0:	2a02      	cmp	r2, #2
    39f2:	d007      	beq.n	3a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    39f4:	782a      	ldrb	r2, [r5, #0]
    39f6:	2a03      	cmp	r2, #3
    39f8:	d004      	beq.n	3a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    39fa:	f640 5106 	movw	r1, #3334	; 0xd06
    39fe:	202d      	movs	r0, #45	; 0x2d
    3a00:	f7fe fb24 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a04:	68a2      	ldr	r2, [r4, #8]
    3a06:	782b      	ldrb	r3, [r5, #0]
    3a08:	6952      	ldr	r2, [r2, #20]
    3a0a:	f06f 0607 	mvn.w	r6, #7
    3a0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3a12:	58d2      	ldr	r2, [r2, r3]
    3a14:	4790      	blx	r2
    3a16:	4606      	mov	r6, r0
    3a18:	e000      	b.n	3a1c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    3a1a:	2601      	movs	r6, #1
    3a1c:	7ba8      	ldrb	r0, [r5, #14]
    3a1e:	b118      	cbz	r0, 3a28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3a20:	f001 f904 	bl	4c2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3a24:	f001 f822 	bl	4a6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3a28:	2e00      	cmp	r6, #0
    3a2a:	d00f      	beq.n	3a4c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    3a2c:	6820      	ldr	r0, [r4, #0]
    3a2e:	f007 faf1 	bl	b014 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3a32:	b130      	cbz	r0, 3a42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    3a34:	f001 f91c 	bl	4c70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3a38:	68a0      	ldr	r0, [r4, #8]
    3a3a:	6880      	ldr	r0, [r0, #8]
    3a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a40:	4700      	bx	r0
    3a42:	6820      	ldr	r0, [r4, #0]
    3a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a48:	f000 bac6 	b.w	3fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a50:	20001130 	.word	0x20001130
    3a54:	200000a0 	.word	0x200000a0
    3a58:	b510      	push	{r4, lr}
    3a5a:	2903      	cmp	r1, #3
    3a5c:	d002      	beq.n	3a64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    3a5e:	2905      	cmp	r1, #5
    3a60:	d10a      	bne.n	3a78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3a62:	e002      	b.n	3a6a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    3a64:	f000 fb4e 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3a68:	e003      	b.n	3a72 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    3a6a:	4904      	ldr	r1, [pc, #16]	; (3a7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    3a6c:	6809      	ldr	r1, [r1, #0]
    3a6e:	b109      	cbz	r1, 3a74 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3a70:	4788      	blx	r1
    3a72:	b108      	cbz	r0, 3a78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3a74:	2000      	movs	r0, #0
    3a76:	bd10      	pop	{r4, pc}
    3a78:	2001      	movs	r0, #1
    3a7a:	bd10      	pop	{r4, pc}
    3a7c:	200000ac 	.word	0x200000ac
    3a80:	4a09      	ldr	r2, [pc, #36]	; (3aa8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    3a82:	0003      	movs	r3, r0
    3a84:	6810      	ldr	r0, [r2, #0]
    3a86:	d001      	beq.n	3a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    3a88:	f000 baa6 	b.w	3fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3a8c:	2900      	cmp	r1, #0
    3a8e:	d009      	beq.n	3aa4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    3a90:	6891      	ldr	r1, [r2, #8]
    3a92:	4a06      	ldr	r2, [pc, #24]	; (3aac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3a94:	6909      	ldr	r1, [r1, #16]
    3a96:	7812      	ldrb	r2, [r2, #0]
    3a98:	f06f 030f 	mvn.w	r3, #15
    3a9c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3aa0:	5889      	ldr	r1, [r1, r2]
    3aa2:	4708      	bx	r1
    3aa4:	4770      	bx	lr
    3aa6:	0000      	.short	0x0000
    3aa8:	200000a0 	.word	0x200000a0
    3aac:	20001130 	.word	0x20001130
    3ab0:	b570      	push	{r4, r5, r6, lr}
    3ab2:	4604      	mov	r4, r0
    3ab4:	8840      	ldrh	r0, [r0, #2]
    3ab6:	2810      	cmp	r0, #16
    3ab8:	d019      	beq.n	3aee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    3aba:	4d10      	ldr	r5, [pc, #64]	; (3afc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    3abc:	7ba8      	ldrb	r0, [r5, #14]
    3abe:	b120      	cbz	r0, 3aca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3ac0:	f000 fff4 	bl	4aac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3ac4:	2040      	movs	r0, #64	; 0x40
    3ac6:	f001 f8bf 	bl	4c48 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3aca:	480d      	ldr	r0, [pc, #52]	; (3b00 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    3acc:	6840      	ldr	r0, [r0, #4]
    3ace:	f001 faf3 	bl	50b8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3ad2:	78a0      	ldrb	r0, [r4, #2]
    3ad4:	0740      	lsls	r0, r0, #29
    3ad6:	d404      	bmi.n	3ae2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3ad8:	2100      	movs	r1, #0
    3ada:	7922      	ldrb	r2, [r4, #4]
    3adc:	4608      	mov	r0, r1
    3ade:	f001 fb73 	bl	51c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3ae2:	2000      	movs	r0, #0
    3ae4:	f001 f9ba 	bl	4e5c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    3ae8:	2002      	movs	r0, #2
    3aea:	7028      	strb	r0, [r5, #0]
    3aec:	bd70      	pop	{r4, r5, r6, pc}
    3aee:	4620      	mov	r0, r4
    3af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3af4:	2101      	movs	r1, #1
    3af6:	f7ff bebf 	b.w	3878 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3afa:	0000      	.short	0x0000
    3afc:	20001130 	.word	0x20001130
    3b00:	200000a0 	.word	0x200000a0
    3b04:	b510      	push	{r4, lr}
    3b06:	4c12      	ldr	r4, [pc, #72]	; (3b50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x308>)
    3b08:	6820      	ldr	r0, [r4, #0]
    3b0a:	f000 f825 	bl	3b58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    3b0e:	6820      	ldr	r0, [r4, #0]
    3b10:	f007 fa80 	bl	b014 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3b14:	2800      	cmp	r0, #0
    3b16:	6820      	ldr	r0, [r4, #0]
    3b18:	d00b      	beq.n	3b32 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2ea>
    3b1a:	490e      	ldr	r1, [pc, #56]	; (3b54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30c>)
    3b1c:	780a      	ldrb	r2, [r1, #0]
    3b1e:	2a02      	cmp	r2, #2
    3b20:	d00b      	beq.n	3b3a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    3b22:	780a      	ldrb	r2, [r1, #0]
    3b24:	2a03      	cmp	r2, #3
    3b26:	d008      	beq.n	3b3a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    3b28:	f640 4137 	movw	r1, #3127	; 0xc37
    3b2c:	202d      	movs	r0, #45	; 0x2d
    3b2e:	f7fe fa8d 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b36:	f000 ba4f 	b.w	3fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3b3a:	68a2      	ldr	r2, [r4, #8]
    3b3c:	7809      	ldrb	r1, [r1, #0]
    3b3e:	68d2      	ldr	r2, [r2, #12]
    3b40:	f06f 0307 	mvn.w	r3, #7
    3b44:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3b48:	5851      	ldr	r1, [r2, r1]
    3b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b4e:	4708      	bx	r1
    3b50:	200000a0 	.word	0x200000a0
    3b54:	20001130 	.word	0x20001130
    3b58:	b510      	push	{r4, lr}
    3b5a:	7b01      	ldrb	r1, [r0, #12]
    3b5c:	b121      	cbz	r1, 3b68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x320>
    3b5e:	4604      	mov	r4, r0
    3b60:	f7ff faaa 	bl	30b8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3b64:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3b68:	4805      	ldr	r0, [pc, #20]	; (3b80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x338>)
    3b6a:	7b80      	ldrb	r0, [r0, #14]
    3b6c:	2800      	cmp	r0, #0
    3b6e:	d005      	beq.n	3b7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x334>
    3b70:	f001 f85c 	bl	4c2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b78:	f000 bf78 	b.w	4a6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3b7c:	bd10      	pop	{r4, pc}
    3b7e:	0000      	.short	0x0000
    3b80:	20001130 	.word	0x20001130

00003b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    3b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b88:	4d5c      	ldr	r5, [pc, #368]	; (3cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    3b8a:	4604      	mov	r4, r0
    3b8c:	b086      	sub	sp, #24
    3b8e:	7828      	ldrb	r0, [r5, #0]
    3b90:	bbe8      	cbnz	r0, 3c0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    3b92:	7820      	ldrb	r0, [r4, #0]
    3b94:	28ff      	cmp	r0, #255	; 0xff
    3b96:	d04b      	beq.n	3c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3b98:	f04f 0800 	mov.w	r8, #0
    3b9c:	f8a5 800c 	strh.w	r8, [r5, #12]
    3ba0:	f8c5 8004 	str.w	r8, [r5, #4]
    3ba4:	f885 8001 	strb.w	r8, [r5, #1]
    3ba8:	f885 8002 	strb.w	r8, [r5, #2]
    3bac:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    3bb0:	4b53      	ldr	r3, [pc, #332]	; (3d00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    3bb2:	4e54      	ldr	r6, [pc, #336]	; (3d04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    3bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3bb6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    3bba:	68b0      	ldr	r0, [r6, #8]
    3bbc:	6840      	ldr	r0, [r0, #4]
    3bbe:	9003      	str	r0, [sp, #12]
    3bc0:	4668      	mov	r0, sp
    3bc2:	f001 f943 	bl	4e4c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    3bc6:	f001 f9d1 	bl	4f6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    3bca:	f001 f82f 	bl	4c2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3bce:	f000 ff4d 	bl	4a6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3bd2:	484d      	ldr	r0, [pc, #308]	; (3d08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    3bd4:	f001 fb22 	bl	521c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    3bd8:	484c      	ldr	r0, [pc, #304]	; (3d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    3bda:	f001 fb29 	bl	5230 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    3bde:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3be2:	4607      	mov	r7, r0
    3be4:	f007 f9c9 	bl	af7a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3be8:	4638      	mov	r0, r7
    3bea:	f007 f98b 	bl	af04 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3bee:	4601      	mov	r1, r0
    3bf0:	4620      	mov	r0, r4
    3bf2:	f007 f953 	bl	ae9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    3bf6:	f994 000e 	ldrsb.w	r0, [r4, #14]
    3bfa:	f001 fa3b 	bl	5074 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    3bfe:	7921      	ldrb	r1, [r4, #4]
    3c00:	2000      	movs	r0, #0
    3c02:	f001 f8bf 	bl	4d84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    3c06:	2101      	movs	r1, #1
    3c08:	60a8      	str	r0, [r5, #8]
    3c0a:	b1a8      	cbz	r0, 3c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    3c0c:	e000      	b.n	3c10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    3c0e:	e00f      	b.n	3c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3c10:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3c14:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3c16:	f006 fd26 	bl	a666 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    3c1a:	4607      	mov	r7, r0
    3c1c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3c20:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3c22:	f006 fd23 	bl	a66c <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    3c26:	b14f      	cbz	r7, 3c3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3c28:	f894 1020 	ldrb.w	r1, [r4, #32]
    3c2c:	b951      	cbnz	r1, 3c44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    3c2e:	e005      	b.n	3c3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3c30:	200c      	movs	r0, #12
    3c32:	b006      	add	sp, #24
    3c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c38:	7029      	strb	r1, [r5, #0]
    3c3a:	e05c      	b.n	3cf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3c3c:	b120      	cbz	r0, 3c48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3c3e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3c42:	b108      	cbz	r0, 3c48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3c44:	2701      	movs	r7, #1
    3c46:	e000      	b.n	3c4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    3c48:	2700      	movs	r7, #0
    3c4a:	7ea0      	ldrb	r0, [r4, #26]
    3c4c:	b920      	cbnz	r0, 3c58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    3c4e:	7e20      	ldrb	r0, [r4, #24]
    3c50:	b910      	cbnz	r0, 3c58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    3c52:	78a0      	ldrb	r0, [r4, #2]
    3c54:	0740      	lsls	r0, r0, #29
    3c56:	d523      	bpl.n	3ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3c58:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    3c5c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3c60:	4050      	eors	r0, r2
    3c62:	ea70 0101 	orns	r1, r0, r1
    3c66:	d006      	beq.n	3c76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    3c68:	f008 f9c5 	bl	bff6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3c6c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    3c70:	1a80      	subs	r0, r0, r2
    3c72:	4199      	sbcs	r1, r3
    3c74:	d200      	bcs.n	3c78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    3c76:	b19f      	cbz	r7, 3ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3c78:	f7ff f900 	bl	2e7c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3c7c:	4924      	ldr	r1, [pc, #144]	; (3d10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    3c7e:	fba0 2301 	umull	r2, r3, r0, r1
    3c82:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3c86:	f007 f914 	bl	aeb2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    3c8a:	2101      	movs	r1, #1
    3c8c:	4620      	mov	r0, r4
    3c8e:	f007 f8c9 	bl	ae24 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    3c92:	78a0      	ldrb	r0, [r4, #2]
    3c94:	0740      	lsls	r0, r0, #29
    3c96:	d503      	bpl.n	3ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3c98:	2101      	movs	r1, #1
    3c9a:	4620      	mov	r0, r4
    3c9c:	f000 fa64 	bl	4168 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x168>
    3ca0:	6870      	ldr	r0, [r6, #4]
    3ca2:	1cc0      	adds	r0, r0, #3
    3ca4:	f006 fdd3 	bl	a84e <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    3ca8:	73a8      	strb	r0, [r5, #14]
    3caa:	78a0      	ldrb	r0, [r4, #2]
    3cac:	07c0      	lsls	r0, r0, #31
    3cae:	d022      	beq.n	3cf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3cb0:	f8cd 8010 	str.w	r8, [sp, #16]
    3cb4:	20ff      	movs	r0, #255	; 0xff
    3cb6:	f8cd 8014 	str.w	r8, [sp, #20]
    3cba:	73e8      	strb	r0, [r5, #15]
    3cbc:	69e6      	ldr	r6, [r4, #28]
    3cbe:	f106 070a 	add.w	r7, r6, #10
    3cc2:	e013      	b.n	3cec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3cc4:	9c04      	ldr	r4, [sp, #16]
    3cc6:	42b4      	cmp	r4, r6
    3cc8:	d010      	beq.n	3cec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3cca:	7a72      	ldrb	r2, [r6, #9]
    3ccc:	7a60      	ldrb	r0, [r4, #9]
    3cce:	463b      	mov	r3, r7
    3cd0:	f104 010a 	add.w	r1, r4, #10
    3cd4:	f006 fd56 	bl	a784 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3cd8:	b140      	cbz	r0, 3cec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3cda:	78a0      	ldrb	r0, [r4, #2]
    3cdc:	73e8      	strb	r0, [r5, #15]
    3cde:	f8d4 0003 	ldr.w	r0, [r4, #3]
    3ce2:	6128      	str	r0, [r5, #16]
    3ce4:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    3ce8:	82a8      	strh	r0, [r5, #20]
    3cea:	e004      	b.n	3cf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3cec:	a804      	add	r0, sp, #16
    3cee:	f7fe fce5 	bl	26bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d0e6      	beq.n	3cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    3cf6:	2000      	movs	r0, #0
    3cf8:	e79b      	b.n	3c32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    3cfa:	0000      	.short	0x0000
    3cfc:	20001130 	.word	0x20001130
    3d00:	000041e8 	.word	0x000041e8
    3d04:	200000a0 	.word	0x200000a0
    3d08:	8e89bed6 	.word	0x8e89bed6
    3d0c:	00555555 	.word	0x00555555
    3d10:	000f4240 	.word	0x000f4240
    3d14:	b510      	push	{r4, lr}
    3d16:	4604      	mov	r4, r0
    3d18:	f7ff ff34 	bl	3b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    3d1c:	2800      	cmp	r0, #0
    3d1e:	d108      	bne.n	3d32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    3d20:	4804      	ldr	r0, [pc, #16]	; (3d34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    3d22:	7800      	ldrb	r0, [r0, #0]
    3d24:	2801      	cmp	r0, #1
    3d26:	d003      	beq.n	3d30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    3d28:	2100      	movs	r1, #0
    3d2a:	4620      	mov	r0, r4
    3d2c:	f7ff fda4 	bl	3878 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3d30:	2000      	movs	r0, #0
    3d32:	bd10      	pop	{r4, pc}
    3d34:	20001130 	.word	0x20001130
    3d38:	480a      	ldr	r0, [pc, #40]	; (3d64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    3d3a:	b510      	push	{r4, lr}
    3d3c:	490a      	ldr	r1, [pc, #40]	; (3d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    3d3e:	6804      	ldr	r4, [r0, #0]
    3d40:	7808      	ldrb	r0, [r1, #0]
    3d42:	2800      	cmp	r0, #0
    3d44:	d00d      	beq.n	3d62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    3d46:	7808      	ldrb	r0, [r1, #0]
    3d48:	2802      	cmp	r0, #2
    3d4a:	d002      	beq.n	3d52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    3d4c:	7808      	ldrb	r0, [r1, #0]
    3d4e:	2803      	cmp	r0, #3
    3d50:	d102      	bne.n	3d58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    3d52:	4620      	mov	r0, r4
    3d54:	f7ff ff00 	bl	3b58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    3d58:	4620      	mov	r0, r4
    3d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d5e:	f000 b93b 	b.w	3fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3d62:	bd10      	pop	{r4, pc}
    3d64:	200000a0 	.word	0x200000a0
    3d68:	20001130 	.word	0x20001130
    3d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d70:	4604      	mov	r4, r0
    3d72:	4829      	ldr	r0, [pc, #164]	; (3e18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    3d74:	460d      	mov	r5, r1
    3d76:	6840      	ldr	r0, [r0, #4]
    3d78:	f001 f99e 	bl	50b8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3d7c:	4e27      	ldr	r6, [pc, #156]	; (3e1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    3d7e:	2004      	movs	r0, #4
    3d80:	7030      	strb	r0, [r6, #0]
    3d82:	b355      	cbz	r5, 3dda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    3d84:	8860      	ldrh	r0, [r4, #2]
    3d86:	2810      	cmp	r0, #16
    3d88:	d023      	beq.n	3dd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    3d8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3d8e:	4680      	mov	r8, r0
    3d90:	68b5      	ldr	r5, [r6, #8]
    3d92:	f007 f8ab 	bl	aeec <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3d96:	4607      	mov	r7, r0
    3d98:	4640      	mov	r0, r8
    3d9a:	f007 f8d0 	bl	af3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3d9e:	1a38      	subs	r0, r7, r0
    3da0:	1e40      	subs	r0, r0, #1
    3da2:	b2c0      	uxtb	r0, r0
    3da4:	8861      	ldrh	r1, [r4, #2]
    3da6:	2228      	movs	r2, #40	; 0x28
    3da8:	f000 fa5a 	bl	4260 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    3dac:	4405      	add	r5, r0
    3dae:	78a0      	ldrb	r0, [r4, #2]
    3db0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3db4:	b130      	cbz	r0, 3dc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    3db6:	6870      	ldr	r0, [r6, #4]
    3db8:	4405      	add	r5, r0
    3dba:	f007 f919 	bl	aff0 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    3dbe:	4428      	add	r0, r5
    3dc0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    3dc4:	7922      	ldrb	r2, [r4, #4]
    3dc6:	4629      	mov	r1, r5
    3dc8:	2000      	movs	r0, #0
    3dca:	f001 f98b 	bl	50e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    3dce:	b920      	cbnz	r0, 3dda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    3dd0:	e00c      	b.n	3dec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    3dd2:	7921      	ldrb	r1, [r4, #4]
    3dd4:	2000      	movs	r0, #0
    3dd6:	f000 ff9b 	bl	4d10 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3dda:	8860      	ldrh	r0, [r4, #2]
    3ddc:	2813      	cmp	r0, #19
    3dde:	d011      	beq.n	3e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3de0:	dc07      	bgt.n	3df2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    3de2:	2810      	cmp	r0, #16
    3de4:	d015      	beq.n	3e12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    3de6:	2812      	cmp	r0, #18
    3de8:	d107      	bne.n	3dfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    3dea:	e00b      	b.n	3e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3dec:	f640 51a8 	movw	r1, #3496	; 0xda8
    3df0:	e005      	b.n	3dfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    3df2:	2815      	cmp	r0, #21
    3df4:	d006      	beq.n	3e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3df6:	281d      	cmp	r0, #29
    3df8:	d004      	beq.n	3e04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3dfa:	f640 51bc 	movw	r1, #3516	; 0xdbc
    3dfe:	202d      	movs	r0, #45	; 0x2d
    3e00:	f7fe f924 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e04:	7922      	ldrb	r2, [r4, #4]
    3e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e0a:	2101      	movs	r1, #1
    3e0c:	2000      	movs	r0, #0
    3e0e:	f001 b9db 	b.w	51c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e16:	0000      	.short	0x0000
    3e18:	200000a0 	.word	0x200000a0
    3e1c:	20001130 	.word	0x20001130
    3e20:	b538      	push	{r3, r4, r5, lr}
    3e22:	4604      	mov	r4, r0
    3e24:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    3e28:	460b      	mov	r3, r1
    3e2a:	f88d 0000 	strb.w	r0, [sp]
    3e2e:	9800      	ldr	r0, [sp, #0]
    3e30:	9000      	str	r0, [sp, #0]
    3e32:	f89d 0000 	ldrb.w	r0, [sp]
    3e36:	2800      	cmp	r0, #0
    3e38:	d13a      	bne.n	3eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    3e3a:	7820      	ldrb	r0, [r4, #0]
    3e3c:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    3e40:	2bff      	cmp	r3, #255	; 0xff
    3e42:	d010      	beq.n	3e66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    3e44:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    3e48:	1e51      	subs	r1, r2, #1
    3e4a:	4618      	mov	r0, r3
    3e4c:	f7fe fffc 	bl	2e48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3e50:	b130      	cbz	r0, 3e60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    3e52:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    3e56:	f040 0002 	orr.w	r0, r0, #2
    3e5a:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    3e5e:	e011      	b.n	3e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    3e60:	f241 0118 	movw	r1, #4120	; 0x1018
    3e64:	e021      	b.n	3eaa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    3e66:	4813      	ldr	r0, [pc, #76]	; (3eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    3e68:	6840      	ldr	r0, [r0, #4]
    3e6a:	7801      	ldrb	r1, [r0, #0]
    3e6c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3e70:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    3e74:	f8d0 1003 	ldr.w	r1, [r0, #3]
    3e78:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    3e7c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    3e80:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    3e84:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    3e88:	287f      	cmp	r0, #127	; 0x7f
    3e8a:	d00c      	beq.n	3ea6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    3e8c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    3e90:	207f      	movs	r0, #127	; 0x7f
    3e92:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3e96:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    3e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3e9e:	2202      	movs	r2, #2
    3ea0:	4905      	ldr	r1, [pc, #20]	; (3eb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    3ea2:	f006 be33 	b.w	ab0c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3ea6:	f640 616c 	movw	r1, #3692	; 0xe6c
    3eaa:	202d      	movs	r0, #45	; 0x2d
    3eac:	f7fe f8ce 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3eb0:	bd38      	pop	{r3, r4, r5, pc}
    3eb2:	0000      	.short	0x0000
    3eb4:	200000a0 	.word	0x200000a0
    3eb8:	0000ae0d 	.word	0x0000ae0d
    3ebc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    3ec0:	4616      	mov	r6, r2
    3ec2:	4604      	mov	r4, r0
    3ec4:	2903      	cmp	r1, #3
    3ec6:	d004      	beq.n	3ed2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    3ec8:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3ecc:	b108      	cbz	r0, 3ed2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    3ece:	2001      	movs	r0, #1
    3ed0:	e000      	b.n	3ed4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    3ed2:	2000      	movs	r0, #0
    3ed4:	2500      	movs	r5, #0
    3ed6:	2903      	cmp	r1, #3
    3ed8:	d003      	beq.n	3ee2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    3eda:	2701      	movs	r7, #1
    3edc:	2905      	cmp	r1, #5
    3ede:	d005      	beq.n	3eec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    3ee0:	e008      	b.n	3ef4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    3ee2:	78a1      	ldrb	r1, [r4, #2]
    3ee4:	2702      	movs	r7, #2
    3ee6:	f3c1 0140 	ubfx	r1, r1, #1, #1
    3eea:	e001      	b.n	3ef0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    3eec:	78a1      	ldrb	r1, [r4, #2]
    3eee:	07c9      	lsls	r1, r1, #31
    3ef0:	2900      	cmp	r1, #0
    3ef2:	d06b      	beq.n	3fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3ef4:	2800      	cmp	r0, #0
    3ef6:	d169      	bne.n	3fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3ef8:	4835      	ldr	r0, [pc, #212]	; (3fd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    3efa:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    3efe:	7b80      	ldrb	r0, [r0, #14]
    3f00:	b180      	cbz	r0, 3f24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    3f02:	f006 fca7 	bl	a854 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3f06:	7030      	strb	r0, [r6, #0]
    3f08:	28ff      	cmp	r0, #255	; 0xff
    3f0a:	d014      	beq.n	3f36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    3f0c:	b2c0      	uxtb	r0, r0
    3f0e:	466a      	mov	r2, sp
    3f10:	a902      	add	r1, sp, #8
    3f12:	f7fe ff99 	bl	2e48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3f16:	b148      	cbz	r0, 3f2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    3f18:	4669      	mov	r1, sp
    3f1a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3f1e:	f006 fe27 	bl	ab70 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3f22:	4605      	mov	r5, r0
    3f24:	7830      	ldrb	r0, [r6, #0]
    3f26:	28ff      	cmp	r0, #255	; 0xff
    3f28:	d005      	beq.n	3f36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    3f2a:	e00d      	b.n	3f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    3f2c:	f640 719b 	movw	r1, #3995	; 0xf9b
    3f30:	202d      	movs	r0, #45	; 0x2d
    3f32:	f7fe f88b 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f36:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3f3a:	f811 0b03 	ldrb.w	r0, [r1], #3
    3f3e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3f42:	f006 fe15 	bl	ab70 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3f46:	4605      	mov	r5, r0
    3f48:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3f4c:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    3f50:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3f54:	f811 0b03 	ldrb.w	r0, [r1], #3
    3f58:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3f5c:	f006 fc12 	bl	a784 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3f60:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3f64:	4680      	mov	r8, r0
    3f66:	f811 0b03 	ldrb.w	r0, [r1], #3
    3f6a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3f6e:	f006 fc7b 	bl	a868 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3f72:	4681      	mov	r9, r0
    3f74:	f7fe ff88 	bl	2e88 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    3f78:	b138      	cbz	r0, 3f8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3f7a:	4648      	mov	r0, r9
    3f7c:	f7fe ff44 	bl	2e08 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3f80:	b118      	cbz	r0, 3f8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3f82:	2110      	movs	r1, #16
    3f84:	f006 fcdf 	bl	a946 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3f88:	b138      	cbz	r0, 3f9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    3f8a:	2100      	movs	r1, #0
    3f8c:	7830      	ldrb	r0, [r6, #0]
    3f8e:	28ff      	cmp	r0, #255	; 0xff
    3f90:	d00c      	beq.n	3fac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    3f92:	f1b8 0f00 	cmp.w	r8, #0
    3f96:	d105      	bne.n	3fa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    3f98:	e001      	b.n	3f9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    3f9a:	2101      	movs	r1, #1
    3f9c:	e7f6      	b.n	3f8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    3f9e:	7e62      	ldrb	r2, [r4, #25]
    3fa0:	4282      	cmp	r2, r0
    3fa2:	d101      	bne.n	3fa8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    3fa4:	2001      	movs	r0, #1
    3fa6:	e003      	b.n	3fb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    3fa8:	2000      	movs	r0, #0
    3faa:	e001      	b.n	3fb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    3fac:	ea28 0001 	bic.w	r0, r8, r1
    3fb0:	78a2      	ldrb	r2, [r4, #2]
    3fb2:	0752      	lsls	r2, r2, #29
    3fb4:	d501      	bpl.n	3fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    3fb6:	b930      	cbnz	r0, 3fc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3fb8:	e008      	b.n	3fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3fba:	b939      	cbnz	r1, 3fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3fbc:	b91d      	cbnz	r5, 3fc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3fbe:	7be0      	ldrb	r0, [r4, #15]
    3fc0:	b108      	cbz	r0, 3fc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3fc2:	42b8      	cmp	r0, r7
    3fc4:	d102      	bne.n	3fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3fc6:	2001      	movs	r0, #1
    3fc8:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3fcc:	2000      	movs	r0, #0
    3fce:	e7fb      	b.n	3fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    3fd0:	20001130 	.word	0x20001130
    3fd4:	200000a0 	.word	0x200000a0
    3fd8:	b570      	push	{r4, r5, r6, lr}
    3fda:	4604      	mov	r4, r0
    3fdc:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    3fde:	4d10      	ldr	r5, [pc, #64]	; (4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>)
    3fe0:	1c40      	adds	r0, r0, #1
    3fe2:	8620      	strh	r0, [r4, #48]	; 0x30
    3fe4:	7ba8      	ldrb	r0, [r5, #14]
    3fe6:	2600      	movs	r6, #0
    3fe8:	b120      	cbz	r0, 3ff4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    3fea:	f000 fe1f 	bl	4c2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3fee:	f000 fd3d 	bl	4a6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3ff2:	73ae      	strb	r6, [r5, #14]
    3ff4:	702e      	strb	r6, [r5, #0]
    3ff6:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    3ffa:	b108      	cbz	r0, 4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
    3ffc:	2101      	movs	r1, #1
    3ffe:	e00a      	b.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    4000:	7b60      	ldrb	r0, [r4, #13]
    4002:	b138      	cbz	r0, 4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>
    4004:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    4006:	4288      	cmp	r0, r1
    4008:	d804      	bhi.n	4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>
    400a:	2101      	movs	r1, #1
    400c:	4620      	mov	r0, r4
    400e:	f007 f813 	bl	b038 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4012:	bd70      	pop	{r4, r5, r6, pc}
    4014:	2100      	movs	r1, #0
    4016:	4620      	mov	r0, r4
    4018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    401c:	f007 b80c 	b.w	b038 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4020:	20001130 	.word	0x20001130
    4024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4028:	4604      	mov	r4, r0
    402a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    402e:	8808      	ldrh	r0, [r1, #0]
    4030:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    4034:	20ff      	movs	r0, #255	; 0xff
    4036:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    403a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    403e:	4616      	mov	r6, r2
    4040:	460d      	mov	r5, r1
    4042:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    4046:	2b00      	cmp	r3, #0
    4048:	d14b      	bne.n	40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    404a:	6928      	ldr	r0, [r5, #16]
    404c:	f006 fc34 	bl	a8b8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4050:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    4054:	8b28      	ldrh	r0, [r5, #24]
    4056:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    405a:	8b68      	ldrh	r0, [r5, #26]
    405c:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    4060:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    4064:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    4068:	7e20      	ldrb	r0, [r4, #24]
    406a:	f104 0151 	add.w	r1, r4, #81	; 0x51
    406e:	460f      	mov	r7, r1
    4070:	2500      	movs	r5, #0
    4072:	b120      	cbz	r0, 407e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e>
    4074:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4078:	f006 fda6 	bl	abc8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    407c:	b940      	cbnz	r0, 4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    407e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4082:	b170      	cbz	r0, 40a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa2>
    4084:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4088:	4639      	mov	r1, r7
    408a:	f006 fd94 	bl	abb6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    408e:	b140      	cbz	r0, 40a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa2>
    4090:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    4094:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    4098:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    409c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    40a0:	e003      	b.n	40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
    40a2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    40a6:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    40aa:	4815      	ldr	r0, [pc, #84]	; (4100 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x100>)
    40ac:	2eff      	cmp	r6, #255	; 0xff
    40ae:	6840      	ldr	r0, [r0, #4]
    40b0:	7801      	ldrb	r1, [r0, #0]
    40b2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    40b6:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    40ba:	f850 1f03 	ldr.w	r1, [r0, #3]!
    40be:	d017      	beq.n	40f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf0>
    40c0:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    40c4:	8880      	ldrh	r0, [r0, #4]
    40c6:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    40ca:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    40ce:	1e51      	subs	r1, r2, #1
    40d0:	4630      	mov	r0, r6
    40d2:	f7fe feb9 	bl	2e48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    40d6:	b130      	cbz	r0, 40e6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe6>
    40d8:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    40dc:	f040 0002 	orr.w	r0, r0, #2
    40e0:	7020      	strb	r0, [r4, #0]
    40e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40e6:	f640 418b 	movw	r1, #3211	; 0xc8b
    40ea:	202d      	movs	r0, #45	; 0x2d
    40ec:	f7fd ffae 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40f0:	f844 1f7a 	str.w	r1, [r4, #122]!
    40f4:	8880      	ldrh	r0, [r0, #4]
    40f6:	80a0      	strh	r0, [r4, #4]
    40f8:	60e5      	str	r5, [r4, #12]
    40fa:	8225      	strh	r5, [r4, #16]
    40fc:	e7f1      	b.n	40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40fe:	0000      	.short	0x0000
    4100:	200000a0 	.word	0x200000a0
    4104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4106:	4604      	mov	r4, r0
    4108:	20ff      	movs	r0, #255	; 0xff
    410a:	f88d 0000 	strb.w	r0, [sp]
    410e:	2501      	movs	r5, #1
    4110:	466a      	mov	r2, sp
    4112:	2103      	movs	r1, #3
    4114:	4620      	mov	r0, r4
    4116:	f7ff fed1 	bl	3ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    411a:	b1e8      	cbz	r0, 4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    411c:	7b20      	ldrb	r0, [r4, #12]
    411e:	b120      	cbz	r0, 412a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12a>
    4120:	f89d 1000 	ldrb.w	r1, [sp]
    4124:	4620      	mov	r0, r4
    4126:	f7ff fe7b 	bl	3e20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    412a:	4e0d      	ldr	r6, [pc, #52]	; (4160 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x160>)
    412c:	2100      	movs	r1, #0
    412e:	6870      	ldr	r0, [r6, #4]
    4130:	8001      	strh	r1, [r0, #0]
    4132:	2104      	movs	r1, #4
    4134:	f006 fc63 	bl	a9fe <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4138:	4620      	mov	r0, r4
    413a:	f000 f843 	bl	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
    413e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    4142:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4144:	6870      	ldr	r0, [r6, #4]
    4146:	f006 fc91 	bl	aa6c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    414a:	4906      	ldr	r1, [pc, #24]	; (4164 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x164>)
    414c:	2005      	movs	r0, #5
    414e:	7008      	strb	r0, [r1, #0]
    4150:	6870      	ldr	r0, [r6, #4]
    4152:	f000 ffb1 	bl	50b8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4156:	e000      	b.n	415a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x15a>
    4158:	2500      	movs	r5, #0
    415a:	4628      	mov	r0, r5
    415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    415e:	0000      	.short	0x0000
    4160:	200000a0 	.word	0x200000a0
    4164:	20001130 	.word	0x20001130
    4168:	b570      	push	{r4, r5, r6, lr}
    416a:	4604      	mov	r4, r0
    416c:	460e      	mov	r6, r1
    416e:	7e40      	ldrb	r0, [r0, #25]
    4170:	f7fe fe4a 	bl	2e08 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    4174:	0005      	movs	r5, r0
    4176:	d019      	beq.n	41ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ac>
    4178:	2110      	movs	r1, #16
    417a:	f006 fbe4 	bl	a946 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    417e:	2800      	cmp	r0, #0
    4180:	d114      	bne.n	41ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ac>
    4182:	2001      	movs	r0, #1
    4184:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    4188:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    418c:	4632      	mov	r2, r6
    418e:	460c      	mov	r4, r1
    4190:	4628      	mov	r0, r5
    4192:	f006 fb27 	bl	a7e4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    4196:	4621      	mov	r1, r4
    4198:	4c05      	ldr	r4, [pc, #20]	; (41b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b0>)
    419a:	6860      	ldr	r0, [r4, #4]
    419c:	f006 fc4a 	bl	aa34 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    41a0:	6860      	ldr	r0, [r4, #4]
    41a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41a6:	2101      	movs	r1, #1
    41a8:	f006 bc4a 	b.w	aa40 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    41ac:	bd70      	pop	{r4, r5, r6, pc}
    41ae:	0000      	.short	0x0000
    41b0:	200000a0 	.word	0x200000a0
    41b4:	4802      	ldr	r0, [pc, #8]	; (41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>)
    41b6:	2101      	movs	r1, #1
    41b8:	6800      	ldr	r0, [r0, #0]
    41ba:	f7ff bb5d 	b.w	3878 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    41be:	0000      	.short	0x0000
    41c0:	200000a0 	.word	0x200000a0
    41c4:	b570      	push	{r4, r5, r6, lr}
    41c6:	4d07      	ldr	r5, [pc, #28]	; (41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>)
    41c8:	4604      	mov	r4, r0
    41ca:	f100 0151 	add.w	r1, r0, #81	; 0x51
    41ce:	6868      	ldr	r0, [r5, #4]
    41d0:	f006 fc3d 	bl	aa4e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    41d4:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    41d8:	6868      	ldr	r0, [r5, #4]
    41da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41de:	f006 bc3c 	b.w	aa5a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    41e2:	0000      	.short	0x0000
    41e4:	200000a0 	.word	0x200000a0
    41e8:	00003b05 	.word	0x00003b05
    41ec:	0000398d 	.word	0x0000398d
    41f0:	00003a81 	.word	0x00003a81
    41f4:	00000000 	.word	0x00000000
    41f8:	00003a59 	.word	0x00003a59
    41fc:	00003ab1 	.word	0x00003ab1
    4200:	0000adb1 	.word	0x0000adb1
    4204:	0000adb7 	.word	0x0000adb7
    4208:	00003d15 	.word	0x00003d15
    420c:	00003d39 	.word	0x00003d39
    4210:	000041b5 	.word	0x000041b5
    4214:	00004204 	.word	0x00004204
    4218:	000041fc 	.word	0x000041fc
    421c:	000041f8 	.word	0x000041f8

00004220 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    4220:	b510      	push	{r4, lr}
    4222:	1e42      	subs	r2, r0, #1
    4224:	2a02      	cmp	r2, #2
    4226:	d901      	bls.n	422c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    4228:	21ca      	movs	r1, #202	; 0xca
    422a:	e009      	b.n	4240 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    422c:	1e40      	subs	r0, r0, #1
    422e:	2910      	cmp	r1, #16
    4230:	d009      	beq.n	4246 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    4232:	2912      	cmp	r1, #18
    4234:	d00c      	beq.n	4250 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4236:	2913      	cmp	r1, #19
    4238:	d00a      	beq.n	4250 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    423a:	2915      	cmp	r1, #21
    423c:	d005      	beq.n	424a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    423e:	21d8      	movs	r1, #216	; 0xd8
    4240:	202f      	movs	r0, #47	; 0x2f
    4242:	f7fd ff03 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4246:	4905      	ldr	r1, [pc, #20]	; (425c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4248:	e004      	b.n	4254 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    424a:	4904      	ldr	r1, [pc, #16]	; (425c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    424c:	1d89      	adds	r1, r1, #6
    424e:	e001      	b.n	4254 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4250:	4902      	ldr	r1, [pc, #8]	; (425c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4252:	1f89      	subs	r1, r1, #6
    4254:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4258:	bd10      	pop	{r4, pc}
    425a:	0000      	.short	0x0000
    425c:	0000b008 	.word	0x0000b008

00004260 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    4260:	1e42      	subs	r2, r0, #1
    4262:	b510      	push	{r4, lr}
    4264:	b2d2      	uxtb	r2, r2
    4266:	2a01      	cmp	r2, #1
    4268:	d903      	bls.n	4272 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    426a:	291d      	cmp	r1, #29
    426c:	d001      	beq.n	4272 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    426e:	21ee      	movs	r1, #238	; 0xee
    4270:	e00d      	b.n	428e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    4272:	2913      	cmp	r1, #19
    4274:	d013      	beq.n	429e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    4276:	dc04      	bgt.n	4282 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4278:	2910      	cmp	r1, #16
    427a:	d00b      	beq.n	4294 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    427c:	2912      	cmp	r1, #18
    427e:	d104      	bne.n	428a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    4280:	e00d      	b.n	429e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    4282:	2915      	cmp	r1, #21
    4284:	d008      	beq.n	4298 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    4286:	291d      	cmp	r1, #29
    4288:	d00e      	beq.n	42a8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    428a:	f44f 7181 	mov.w	r1, #258	; 0x102
    428e:	202f      	movs	r0, #47	; 0x2f
    4290:	f7fd fedc 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4294:	4807      	ldr	r0, [pc, #28]	; (42b4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4296:	e004      	b.n	42a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4298:	4806      	ldr	r0, [pc, #24]	; (42b4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    429a:	3008      	adds	r0, #8
    429c:	e001      	b.n	42a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    429e:	4805      	ldr	r0, [pc, #20]	; (42b4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    42a0:	1d00      	adds	r0, r0, #4
    42a2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    42a6:	bd10      	pop	{r4, pc}
    42a8:	f240 315a 	movw	r1, #858	; 0x35a
    42ac:	fb10 f001 	smulbb	r0, r0, r1
    42b0:	bd10      	pop	{r4, pc}
    42b2:	0000      	.short	0x0000
    42b4:	0000aff6 	.word	0x0000aff6

000042b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    42b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42bc:	4604      	mov	r4, r0
    42be:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    42c2:	4616      	mov	r6, r2
    42c4:	460f      	mov	r7, r1
    42c6:	2800      	cmp	r0, #0
    42c8:	d15e      	bne.n	4388 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    42ca:	4621      	mov	r1, r4
    42cc:	484d      	ldr	r0, [pc, #308]	; (4404 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    42ce:	f003 fe41 	bl	7f54 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    42d2:	4605      	mov	r5, r0
    42d4:	2820      	cmp	r0, #32
    42d6:	d057      	beq.n	4388 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    42d8:	2250      	movs	r2, #80	; 0x50
    42da:	2100      	movs	r1, #0
    42dc:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    42e0:	f008 f895 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    42e4:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    42e8:	2501      	movs	r5, #1
    42ea:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    42ee:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    42f2:	b137      	cbz	r7, 4302 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    42f4:	f7ff f888 	bl	3408 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    42f8:	f000 0007 	and.w	r0, r0, #7
    42fc:	1c40      	adds	r0, r0, #1
    42fe:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    4302:	4620      	mov	r0, r4
    4304:	f006 ff63 	bl	b1ce <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    4308:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    430c:	2002      	movs	r0, #2
    430e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    4312:	46a8      	mov	r8, r5
    4314:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    4318:	2500      	movs	r5, #0
    431a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    431e:	f004 ff3f 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4322:	4607      	mov	r7, r0
    4324:	f007 fe5e 	bl	bfe4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4328:	8921      	ldrh	r1, [r4, #8]
    432a:	3ce8      	subs	r4, #232	; 0xe8
    432c:	4288      	cmp	r0, r1
    432e:	d800      	bhi.n	4332 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    4330:	4608      	mov	r0, r1
    4332:	4438      	add	r0, r7
    4334:	30ce      	adds	r0, #206	; 0xce
    4336:	b287      	uxth	r7, r0
    4338:	4620      	mov	r0, r4
    433a:	f006 fcf8 	bl	ad2e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    433e:	b330      	cbz	r0, 438e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    4340:	f007 fc6c 	bl	bc1c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4344:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    4348:	b281      	uxth	r1, r0
    434a:	4630      	mov	r0, r6
    434c:	f005 f82a 	bl	93a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4350:	4430      	add	r0, r6
    4352:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4356:	3490      	adds	r4, #144	; 0x90
    4358:	f007 fe4d 	bl	bff6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    435c:	19c0      	adds	r0, r0, r7
    435e:	4169      	adcs	r1, r5
    4360:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    4364:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4368:	f824 5c6e 	strh.w	r5, [r4, #-110]
    436c:	2001      	movs	r0, #1
    436e:	f006 fe3b 	bl	afe8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    4372:	f200 1015 	addw	r0, r0, #277	; 0x115
    4376:	1a30      	subs	r0, r6, r0
    4378:	6460      	str	r0, [r4, #68]	; 0x44
    437a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    437e:	0841      	lsrs	r1, r0, #1
    4380:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    4384:	3c90      	subs	r4, #144	; 0x90
    4386:	e025      	b.n	43d4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4388:	200c      	movs	r0, #12
    438a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    438e:	2100      	movs	r1, #0
    4390:	4620      	mov	r0, r4
    4392:	f006 fee9 	bl	b168 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    4396:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4408 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    439a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    439e:	2000      	movs	r0, #0
    43a0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    43a4:	b149      	cbz	r1, 43ba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    43a6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    43a8:	b139      	cbz	r1, 43ba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    43aa:	f7ff f82d 	bl	3408 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    43ae:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    43b2:	fbb0 f2f1 	udiv	r2, r0, r1
    43b6:	fb01 0012 	mls	r0, r1, r2, r0
    43ba:	4407      	add	r7, r0
    43bc:	f007 fe1b 	bl	bff6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    43c0:	19c0      	adds	r0, r0, r7
    43c2:	4169      	adcs	r1, r5
    43c4:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    43c8:	b19e      	cbz	r6, 43f2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    43ca:	1980      	adds	r0, r0, r6
    43cc:	eb51 0105 	adcs.w	r1, r1, r5
    43d0:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    43d4:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    43d8:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    43dc:	f006 fef5 	bl	b1ca <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    43e0:	b158      	cbz	r0, 43fa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    43e2:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    43e6:	2100      	movs	r1, #0
    43e8:	4620      	mov	r0, r4
    43ea:	f006 fcd0 	bl	ad8e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    43ee:	2000      	movs	r0, #0
    43f0:	e7cb      	b.n	438a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    43f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    43f6:	0841      	lsrs	r1, r0, #1
    43f8:	e7ea      	b.n	43d0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    43fa:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    43fe:	2030      	movs	r0, #48	; 0x30
    4400:	f7fd fe24 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4404:	0000b2af 	.word	0x0000b2af
    4408:	200000b0 	.word	0x200000b0

0000440c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    440c:	4901      	ldr	r1, [pc, #4]	; (4414 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    440e:	8088      	strh	r0, [r1, #4]
    4410:	4770      	bx	lr
    4412:	0000      	.short	0x0000
    4414:	200000b0 	.word	0x200000b0

00004418 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4418:	4805      	ldr	r0, [pc, #20]	; (4430 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    441a:	2100      	movs	r1, #0
    441c:	7001      	strb	r1, [r0, #0]
    441e:	2201      	movs	r2, #1
    4420:	7082      	strb	r2, [r0, #2]
    4422:	7041      	strb	r1, [r0, #1]
    4424:	f242 7110 	movw	r1, #10000	; 0x2710
    4428:	8081      	strh	r1, [r0, #4]
    442a:	f000 b803 	b.w	4434 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    442e:	0000      	.short	0x0000
    4430:	200000b0 	.word	0x200000b0

00004434 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4434:	b51c      	push	{r2, r3, r4, lr}
    4436:	4909      	ldr	r1, [pc, #36]	; (445c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4438:	e9d1 0100 	ldrd	r0, r1, [r1]
    443c:	e9cd 0100 	strd	r0, r1, [sp]
    4440:	e002      	b.n	4448 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    4442:	9800      	ldr	r0, [sp, #0]
    4444:	f006 fe0c 	bl	b060 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4448:	4668      	mov	r0, sp
    444a:	f7fe f937 	bl	26bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    444e:	2800      	cmp	r0, #0
    4450:	d0f7      	beq.n	4442 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    4452:	f000 f80b 	bl	446c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0xc>
    4456:	2000      	movs	r0, #0
    4458:	bd1c      	pop	{r2, r3, r4, pc}
    445a:	0000      	.short	0x0000
    445c:	000044d0 	.word	0x000044d0

00004460 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4460:	4901      	ldr	r1, [pc, #4]	; (4468 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    4462:	7008      	strb	r0, [r1, #0]
    4464:	4770      	bx	lr
    4466:	0000      	.short	0x0000
    4468:	200000b0 	.word	0x200000b0
    446c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4470:	4d16      	ldr	r5, [pc, #88]	; (44cc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x6c>)
    4472:	2001      	movs	r0, #1
    4474:	7068      	strb	r0, [r5, #1]
    4476:	2400      	movs	r4, #0
    4478:	f64f 76ff 	movw	r6, #65535	; 0xffff
    447c:	e00b      	b.n	4496 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x36>
    447e:	2100      	movs	r1, #0
    4480:	f7fe f8ca 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4484:	0007      	movs	r7, r0
    4486:	d009      	beq.n	449c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x3c>
    4488:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    448c:	f003 fc4a 	bl	7d24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4490:	4638      	mov	r0, r7
    4492:	f006 feff 	bl	b294 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1e2>
    4496:	9400      	str	r4, [sp, #0]
    4498:	9401      	str	r4, [sp, #4]
    449a:	e00e      	b.n	44ba <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    449c:	f44f 7191 	mov.w	r1, #290	; 0x122
    44a0:	2030      	movs	r0, #48	; 0x30
    44a2:	f7fd fdd3 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44a6:	9800      	ldr	r0, [sp, #0]
    44a8:	b138      	cbz	r0, 44ba <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    44aa:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    44ae:	2920      	cmp	r1, #32
    44b0:	d003      	beq.n	44ba <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    44b2:	8800      	ldrh	r0, [r0, #0]
    44b4:	42b0      	cmp	r0, r6
    44b6:	d1e2      	bne.n	447e <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x1e>
    44b8:	e004      	b.n	44c4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x64>
    44ba:	4668      	mov	r0, sp
    44bc:	f7fe f8fe 	bl	26bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    44c0:	2800      	cmp	r0, #0
    44c2:	d0f0      	beq.n	44a6 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x46>
    44c4:	706c      	strb	r4, [r5, #1]
    44c6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    44ca:	0000      	.short	0x0000
    44cc:	200000b0 	.word	0x200000b0
    44d0:	00000000 	.word	0x00000000
    44d4:	00010000 	.word	0x00010000
    44d8:	00000000 	.word	0x00000000
    44dc:	00010000 	.word	0x00010000
    44e0:	00000000 	.word	0x00000000
    44e4:	00001e14 	.word	0x00001e14
    44e8:	00001130 	.word	0x00001130
    44ec:	00fa01f4 	.word	0x00fa01f4
    44f0:	00640096 	.word	0x00640096
    44f4:	0032004b 	.word	0x0032004b
    44f8:	0014001e 	.word	0x0014001e
    44fc:	0005000a 	.word	0x0005000a
    4500:	00010002 	.word	0x00010002

00004504 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    4504:	b570      	push	{r4, r5, r6, lr}
    4506:	6844      	ldr	r4, [r0, #4]
    4508:	220d      	movs	r2, #13
    450a:	f504 7598 	add.w	r5, r4, #304	; 0x130
    450e:	2100      	movs	r1, #0
    4510:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    4514:	f007 ff7b 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4518:	f44f 70a3 	mov.w	r0, #326	; 0x146
    451c:	2100      	movs	r1, #0
    451e:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    4522:	5501      	strb	r1, [r0, r4]
    4524:	f8a5 1017 	strh.w	r1, [r5, #23]
    4528:	7669      	strb	r1, [r5, #25]
    452a:	4608      	mov	r0, r1
    452c:	f05f 017f 	movs.w	r1, #127	; 0x7f
    4530:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    4534:	1c40      	adds	r0, r0, #1
    4536:	b2c0      	uxtb	r0, r0
    4538:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    453c:	2802      	cmp	r0, #2
    453e:	d3f7      	bcc.n	4530 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    4540:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    4544:	4620      	mov	r0, r4
    4546:	f006 ff2f 	bl	b3a8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    454a:	2000      	movs	r0, #0
    454c:	21ff      	movs	r1, #255	; 0xff
    454e:	1822      	adds	r2, r4, r0
    4550:	1c40      	adds	r0, r0, #1
    4552:	b2c0      	uxtb	r0, r0
    4554:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    4558:	2802      	cmp	r0, #2
    455a:	d3f8      	bcc.n	454e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    455c:	bd70      	pop	{r4, r5, r6, pc}
	...

00004560 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    4560:	4903      	ldr	r1, [pc, #12]	; (4570 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    4562:	884a      	ldrh	r2, [r1, #2]
    4564:	8002      	strh	r2, [r0, #0]
    4566:	7809      	ldrb	r1, [r1, #0]
    4568:	7081      	strb	r1, [r0, #2]
    456a:	2000      	movs	r0, #0
    456c:	4770      	bx	lr
    456e:	0000      	.short	0x0000
    4570:	200010f0 	.word	0x200010f0

00004574 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    4574:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4578:	460f      	mov	r7, r1
    457a:	4605      	mov	r5, r0
    457c:	7806      	ldrb	r6, [r0, #0]
    457e:	f007 fa60 	bl	ba42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
    4582:	2800      	cmp	r0, #0
    4584:	d10e      	bne.n	45a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    4586:	4628      	mov	r0, r5
    4588:	f007 fa35 	bl	b9f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa2>
    458c:	2800      	cmp	r0, #0
    458e:	d109      	bne.n	45a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    4590:	2101      	movs	r1, #1
    4592:	4630      	mov	r0, r6
    4594:	f7fe f840 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4598:	0004      	movs	r4, r0
    459a:	d005      	beq.n	45a8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    459c:	f006 fd89 	bl	b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    45a0:	b170      	cbz	r0, 45c0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    45a2:	200c      	movs	r0, #12
    45a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    45a8:	2101      	movs	r1, #1
    45aa:	4630      	mov	r0, r6
    45ac:	f7fd fffc 	bl	25a8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    45b0:	0004      	movs	r4, r0
    45b2:	d013      	beq.n	45dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    45b4:	4817      	ldr	r0, [pc, #92]	; (4614 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    45b6:	f990 1000 	ldrsb.w	r1, [r0]
    45ba:	4620      	mov	r0, r4
    45bc:	f006 fb56 	bl	ac6c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    45c0:	4620      	mov	r0, r4
    45c2:	f006 fbbe 	bl	ad42 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    45c6:	7038      	strb	r0, [r7, #0]
    45c8:	74e8      	strb	r0, [r5, #19]
    45ca:	4629      	mov	r1, r5
    45cc:	4620      	mov	r0, r4
    45ce:	f7ff f84b 	bl	3668 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    45d2:	4606      	mov	r6, r0
    45d4:	7e68      	ldrb	r0, [r5, #25]
    45d6:	b1d0      	cbz	r0, 460e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    45d8:	b12e      	cbz	r6, 45e6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    45da:	e018      	b.n	460e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    45dc:	f241 512e 	movw	r1, #5422	; 0x152e
    45e0:	2039      	movs	r0, #57	; 0x39
    45e2:	f7fd fd33 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45e6:	2200      	movs	r2, #0
    45e8:	4668      	mov	r0, sp
    45ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    45ec:	f005 ffcf 	bl	a58e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    45f0:	2200      	movs	r2, #0
    45f2:	2101      	movs	r1, #1
    45f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    45f6:	f006 f844 	bl	a682 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    45fa:	2204      	movs	r2, #4
    45fc:	4668      	mov	r0, sp
    45fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4600:	f005 ffc5 	bl	a58e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    4604:	2200      	movs	r2, #0
    4606:	4611      	mov	r1, r2
    4608:	6b60      	ldr	r0, [r4, #52]	; 0x34
    460a:	f006 f83a 	bl	a682 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    460e:	4630      	mov	r0, r6
    4610:	e7c8      	b.n	45a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    4612:	0000      	.short	0x0000
    4614:	200000c4 	.word	0x200000c4

00004618 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    4618:	7801      	ldrb	r1, [r0, #0]
    461a:	b171      	cbz	r1, 463a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    461c:	7841      	ldrb	r1, [r0, #1]
    461e:	b161      	cbz	r1, 463a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    4620:	8841      	ldrh	r1, [r0, #2]
    4622:	291b      	cmp	r1, #27
    4624:	d309      	bcc.n	463a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    4626:	8881      	ldrh	r1, [r0, #4]
    4628:	291b      	cmp	r1, #27
    462a:	d306      	bcc.n	463a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    462c:	4904      	ldr	r1, [pc, #16]	; (4640 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    462e:	6802      	ldr	r2, [r0, #0]
    4630:	600a      	str	r2, [r1, #0]
    4632:	8880      	ldrh	r0, [r0, #4]
    4634:	8088      	strh	r0, [r1, #4]
    4636:	2000      	movs	r0, #0
    4638:	4770      	bx	lr
    463a:	2012      	movs	r0, #18
    463c:	4770      	bx	lr
    463e:	0000      	.short	0x0000
    4640:	200010f0 	.word	0x200010f0

00004644 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    4644:	6800      	ldr	r0, [r0, #0]
    4646:	f240 41e2 	movw	r1, #1250	; 0x4e2
    464a:	4288      	cmp	r0, r1
    464c:	d303      	bcc.n	4656 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    464e:	4903      	ldr	r1, [pc, #12]	; (465c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    4650:	6088      	str	r0, [r1, #8]
    4652:	2000      	movs	r0, #0
    4654:	4770      	bx	lr
    4656:	2012      	movs	r0, #18
    4658:	4770      	bx	lr
    465a:	0000      	.short	0x0000
    465c:	200010f0 	.word	0x200010f0

00004660 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    4660:	4a03      	ldr	r2, [pc, #12]	; (4670 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    4662:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    4666:	6001      	str	r1, [r0, #0]
    4668:	6042      	str	r2, [r0, #4]
    466a:	2000      	movs	r0, #0
    466c:	4770      	bx	lr
    466e:	0000      	.short	0x0000
    4670:	00004920 	.word	0x00004920

00004674 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	b086      	sub	sp, #24
    4678:	4604      	mov	r4, r0
    467a:	f000 f9af 	bl	49dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    467e:	0940      	lsrs	r0, r0, #5
    4680:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    4684:	4e2d      	ldr	r6, [pc, #180]	; (473c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    4686:	07c0      	lsls	r0, r0, #31
    4688:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    468c:	d002      	beq.n	4694 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    468e:	8871      	ldrh	r1, [r6, #2]
    4690:	88b0      	ldrh	r0, [r6, #4]
    4692:	e001      	b.n	4698 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    4694:	211b      	movs	r1, #27
    4696:	4608      	mov	r0, r1
    4698:	84e9      	strh	r1, [r5, #38]	; 0x26
    469a:	8528      	strh	r0, [r5, #40]	; 0x28
    469c:	f000 f99e 	bl	49dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    46a0:	0788      	lsls	r0, r1, #30
    46a2:	f04f 0501 	mov.w	r5, #1
    46a6:	d505      	bpl.n	46b4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    46a8:	f88d 5000 	strb.w	r5, [sp]
    46ac:	4668      	mov	r0, sp
    46ae:	9401      	str	r4, [sp, #4]
    46b0:	f7ff ff28 	bl	4504 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    46b4:	68b0      	ldr	r0, [r6, #8]
    46b6:	62e0      	str	r0, [r4, #44]	; 0x2c
    46b8:	f641 514c 	movw	r1, #7500	; 0x1d4c
    46bc:	6121      	str	r1, [r4, #16]
    46be:	8821      	ldrh	r1, [r4, #0]
    46c0:	f8ad 1004 	strh.w	r1, [sp, #4]
    46c4:	7bb1      	ldrb	r1, [r6, #14]
    46c6:	f88d 1006 	strb.w	r1, [sp, #6]
    46ca:	7bf1      	ldrb	r1, [r6, #15]
    46cc:	f88d 1007 	strb.w	r1, [sp, #7]
    46d0:	8a31      	ldrh	r1, [r6, #16]
    46d2:	f8ad 1008 	strh.w	r1, [sp, #8]
    46d6:	a904      	add	r1, sp, #16
    46d8:	9100      	str	r1, [sp, #0]
    46da:	4628      	mov	r0, r5
    46dc:	ab03      	add	r3, sp, #12
    46de:	aa01      	add	r2, sp, #4
    46e0:	4621      	mov	r1, r4
    46e2:	f007 f9fb 	bl	badc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    46e6:	b138      	cbz	r0, 46f8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    46e8:	8820      	ldrh	r0, [r4, #0]
    46ea:	2100      	movs	r1, #0
    46ec:	f7fe f836 	bl	275c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    46f0:	b308      	cbz	r0, 4736 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    46f2:	f240 517d 	movw	r1, #1405	; 0x57d
    46f6:	e01b      	b.n	4730 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    46f8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    46fc:	f88d 0014 	strb.w	r0, [sp, #20]
    4700:	f89d 0010 	ldrb.w	r0, [sp, #16]
    4704:	f88d 0015 	strb.w	r0, [sp, #21]
    4708:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    470c:	f8ad 0016 	strh.w	r0, [sp, #22]
    4710:	a905      	add	r1, sp, #20
    4712:	4620      	mov	r0, r4
    4714:	f006 f8d6 	bl	a8c4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    4718:	7870      	ldrb	r0, [r6, #1]
    471a:	9000      	str	r0, [sp, #0]
    471c:	7833      	ldrb	r3, [r6, #0]
    471e:	88b2      	ldrh	r2, [r6, #4]
    4720:	8871      	ldrh	r1, [r6, #2]
    4722:	8820      	ldrh	r0, [r4, #0]
    4724:	f7fe f84c 	bl	27c0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    4728:	2800      	cmp	r0, #0
    472a:	d005      	beq.n	4738 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    472c:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    4730:	2039      	movs	r0, #57	; 0x39
    4732:	f7fd fc8b 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4736:	2009      	movs	r0, #9
    4738:	b006      	add	sp, #24
    473a:	bd70      	pop	{r4, r5, r6, pc}
    473c:	200010f0 	.word	0x200010f0
    4740:	b51c      	push	{r2, r3, r4, lr}
    4742:	4909      	ldr	r1, [pc, #36]	; (4768 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xf4>)
    4744:	e9d1 0100 	ldrd	r0, r1, [r1]
    4748:	e9cd 0100 	strd	r0, r1, [sp]
    474c:	e005      	b.n	475a <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xe6>
    474e:	9800      	ldr	r0, [sp, #0]
    4750:	f006 fcaf 	bl	b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    4754:	b108      	cbz	r0, 475a <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xe6>
    4756:	2001      	movs	r0, #1
    4758:	bd1c      	pop	{r2, r3, r4, pc}
    475a:	4668      	mov	r0, sp
    475c:	f7fd ffae 	bl	26bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4760:	2800      	cmp	r0, #0
    4762:	d0f4      	beq.n	474e <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xda>
    4764:	2000      	movs	r0, #0
    4766:	bd1c      	pop	{r2, r3, r4, pc}
    4768:	00004920 	.word	0x00004920
    476c:	b510      	push	{r4, lr}
    476e:	480d      	ldr	r0, [pc, #52]	; (47a4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x130>)
    4770:	2100      	movs	r1, #0
    4772:	4b0d      	ldr	r3, [pc, #52]	; (47a8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x134>)
    4774:	74c1      	strb	r1, [r0, #19]
    4776:	8281      	strh	r1, [r0, #20]
    4778:	221b      	movs	r2, #27
    477a:	801a      	strh	r2, [r3, #0]
    477c:	f44f 74a4 	mov.w	r4, #328	; 0x148
    4780:	805c      	strh	r4, [r3, #2]
    4782:	809a      	strh	r2, [r3, #4]
    4784:	80dc      	strh	r4, [r3, #6]
    4786:	7381      	strb	r1, [r0, #14]
    4788:	73c1      	strb	r1, [r0, #15]
    478a:	2303      	movs	r3, #3
    478c:	7003      	strb	r3, [r0, #0]
    478e:	2302      	movs	r3, #2
    4790:	7043      	strb	r3, [r0, #1]
    4792:	8042      	strh	r2, [r0, #2]
    4794:	8082      	strh	r2, [r0, #4]
    4796:	f640 62a6 	movw	r2, #3750	; 0xea6
    479a:	6082      	str	r2, [r0, #8]
    479c:	7481      	strb	r1, [r0, #18]
    479e:	7301      	strb	r1, [r0, #12]
    47a0:	bd10      	pop	{r4, pc}
    47a2:	0000      	.short	0x0000
    47a4:	200010f0 	.word	0x200010f0
    47a8:	200000cc 	.word	0x200000cc
    47ac:	b510      	push	{r4, lr}
    47ae:	2101      	movs	r1, #1
    47b0:	2000      	movs	r0, #0
    47b2:	f7fd ff31 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    47b6:	0004      	movs	r4, r0
    47b8:	d10a      	bne.n	47d0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x15c>
    47ba:	2101      	movs	r1, #1
    47bc:	f7fd fef4 	bl	25a8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    47c0:	0004      	movs	r4, r0
    47c2:	d007      	beq.n	47d4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x160>
    47c4:	4806      	ldr	r0, [pc, #24]	; (47e0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x16c>)
    47c6:	f990 1000 	ldrsb.w	r1, [r0]
    47ca:	4620      	mov	r0, r4
    47cc:	f006 fa4e 	bl	ac6c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    47d0:	4620      	mov	r0, r4
    47d2:	bd10      	pop	{r4, pc}
    47d4:	f240 3113 	movw	r1, #787	; 0x313
    47d8:	2039      	movs	r0, #57	; 0x39
    47da:	f7fd fc37 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47de:	0000      	.short	0x0000
    47e0:	200000c4 	.word	0x200000c4

000047e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    47e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47e6:	460c      	mov	r4, r1
    47e8:	4605      	mov	r5, r0
    47ea:	f006 faad 	bl	ad48 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    47ee:	b158      	cbz	r0, 4808 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    47f0:	4628      	mov	r0, r5
    47f2:	f006 fa9c 	bl	ad2e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    47f6:	b148      	cbz	r0, 480c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    47f8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    47fc:	2112      	movs	r1, #18
    47fe:	b108      	cbz	r0, 4804 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    4800:	2880      	cmp	r0, #128	; 0x80
    4802:	d903      	bls.n	480c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    4804:	4608      	mov	r0, r1
    4806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4808:	2142      	movs	r1, #66	; 0x42
    480a:	e7fb      	b.n	4804 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    480c:	4628      	mov	r0, r5
    480e:	f006 fa7f 	bl	ad10 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    4812:	b120      	cbz	r0, 481e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    4814:	4628      	mov	r0, r5
    4816:	f006 f9ea 	bl	abee <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    481a:	b110      	cbz	r0, 4822 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    481c:	e005      	b.n	482a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    481e:	210c      	movs	r1, #12
    4820:	e7f0      	b.n	4804 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    4822:	4628      	mov	r0, r5
    4824:	f006 fa7d 	bl	ad22 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    4828:	b120      	cbz	r0, 4834 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    482a:	4628      	mov	r0, r5
    482c:	f006 fc41 	bl	b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    4830:	b930      	cbnz	r0, 4840 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    4832:	e001      	b.n	4838 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    4834:	2012      	movs	r0, #18
    4836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4838:	4628      	mov	r0, r5
    483a:	f006 f9f3 	bl	ac24 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    483e:	b108      	cbz	r0, 4844 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    4840:	200c      	movs	r0, #12
    4842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4844:	4628      	mov	r0, r5
    4846:	f7fe fead 	bl	35a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    484a:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    484e:	f242 7010 	movw	r0, #10000	; 0x2710
    4852:	4346      	muls	r6, r0
    4854:	78e1      	ldrb	r1, [r4, #3]
    4856:	4628      	mov	r0, r5
    4858:	f006 fa51 	bl	acfe <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    485c:	4628      	mov	r0, r5
    485e:	f006 fa62 	bl	ad26 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    4862:	b1a8      	cbz	r0, 4890 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    4864:	2100      	movs	r1, #0
    4866:	4668      	mov	r0, sp
    4868:	f7fd ff4a 	bl	2700 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    486c:	0004      	movs	r4, r0
    486e:	d019      	beq.n	48a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    4870:	2100      	movs	r1, #0
    4872:	f7fe fb81 	bl	2f78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4876:	f8bd 0000 	ldrh.w	r0, [sp]
    487a:	8020      	strh	r0, [r4, #0]
    487c:	4621      	mov	r1, r4
    487e:	4628      	mov	r0, r5
    4880:	f006 fa79 	bl	ad76 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    4884:	4628      	mov	r0, r5
    4886:	f006 fa56 	bl	ad36 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    488a:	b168      	cbz	r0, 48a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    488c:	2001      	movs	r0, #1
    488e:	e00e      	b.n	48ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    4890:	4632      	mov	r2, r6
    4892:	2100      	movs	r1, #0
    4894:	4628      	mov	r0, r5
    4896:	f7ff fd0f 	bl	42b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    489a:	2800      	cmp	r0, #0
    489c:	d0d1      	beq.n	4842 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    489e:	f241 7168 	movw	r1, #5992	; 0x1768
    48a2:	e012      	b.n	48ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    48a4:	200d      	movs	r0, #13
    48a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48a8:	4628      	mov	r0, r5
    48aa:	f006 fa62 	bl	ad72 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    48ae:	4601      	mov	r1, r0
    48b0:	4620      	mov	r0, r4
    48b2:	f7ff fedf 	bl	4674 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    48b6:	2800      	cmp	r0, #0
    48b8:	d1f5      	bne.n	48a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    48ba:	4632      	mov	r2, r6
    48bc:	4621      	mov	r1, r4
    48be:	4628      	mov	r0, r5
    48c0:	f7ff fcfa 	bl	42b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    48c4:	b120      	cbz	r0, 48d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    48c6:	f241 718b 	movw	r1, #6027	; 0x178b
    48ca:	2039      	movs	r0, #57	; 0x39
    48cc:	f7fd fbbe 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48d0:	4804      	ldr	r0, [pc, #16]	; (48e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    48d2:	6843      	ldr	r3, [r0, #4]
    48d4:	b123      	cbz	r3, 48e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    48d6:	2200      	movs	r2, #0
    48d8:	f504 7199 	add.w	r1, r4, #306	; 0x132
    48dc:	4620      	mov	r0, r4
    48de:	4798      	blx	r3
    48e0:	2000      	movs	r0, #0
    48e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48e4:	200000c4 	.word	0x200000c4
    48e8:	b51c      	push	{r2, r3, r4, lr}
    48ea:	490c      	ldr	r1, [pc, #48]	; (491c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x138>)
    48ec:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    48f0:	e9cd 0100 	strd	r0, r1, [sp]
    48f4:	e00a      	b.n	490c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    48f6:	9c00      	ldr	r4, [sp, #0]
    48f8:	4620      	mov	r0, r4
    48fa:	f006 fbda 	bl	b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    48fe:	b128      	cbz	r0, 490c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    4900:	4620      	mov	r0, r4
    4902:	f006 fa47 	bl	ad94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    4906:	b108      	cbz	r0, 490c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    4908:	2001      	movs	r0, #1
    490a:	bd1c      	pop	{r2, r3, r4, pc}
    490c:	4668      	mov	r0, sp
    490e:	f7fd fed5 	bl	26bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4912:	2800      	cmp	r0, #0
    4914:	d0ef      	beq.n	48f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x112>
    4916:	2000      	movs	r0, #0
    4918:	bd1c      	pop	{r2, r3, r4, pc}
    491a:	0000      	.short	0x0000
    491c:	00004920 	.word	0x00004920
    4920:	00000000 	.word	0x00000000
    4924:	00010000 	.word	0x00010000
    4928:	00000000 	.word	0x00000000
    492c:	00010000 	.word	0x00010000
    4930:	0d10770d 	.word	0x0d10770d
    4934:	10770059 	.word	0x10770059
    4938:	00000000 	.word	0x00000000
    493c:	00010000 	.word	0x00010000
    4940:	00000000 	.word	0x00000000
    4944:	00010000 	.word	0x00010000

00004948 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    4948:	b510      	push	{r4, lr}
    494a:	f7fe fc97 	bl	327c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    494e:	4c05      	ldr	r4, [pc, #20]	; (4964 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    4950:	6860      	ldr	r0, [r4, #4]
    4952:	f007 f95a 	bl	bc0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    4956:	f006 fffb 	bl	b950 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    495a:	f7fe fd43 	bl	33e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    495e:	2001      	movs	r0, #1
    4960:	7020      	strb	r0, [r4, #0]
    4962:	bd10      	pop	{r4, pc}
    4964:	200000d4 	.word	0x200000d4

00004968 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    4968:	4801      	ldr	r0, [pc, #4]	; (4970 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    496a:	7800      	ldrb	r0, [r0, #0]
    496c:	4770      	bx	lr
    496e:	0000      	.short	0x0000
    4970:	200000d4 	.word	0x200000d4

00004974 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    4974:	b510      	push	{r4, lr}
    4976:	4c06      	ldr	r4, [pc, #24]	; (4990 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    4978:	68a0      	ldr	r0, [r4, #8]
    497a:	f007 f946 	bl	bc0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    497e:	68e0      	ldr	r0, [r4, #12]
    4980:	f007 f943 	bl	bc0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    4984:	f006 ffe6 	bl	b954 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    4988:	2000      	movs	r0, #0
    498a:	7020      	strb	r0, [r4, #0]
    498c:	bd10      	pop	{r4, pc}
    498e:	0000      	.short	0x0000
    4990:	200000d4 	.word	0x200000d4

00004994 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    4994:	b510      	push	{r4, lr}
    4996:	4905      	ldr	r1, [pc, #20]	; (49ac <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    4998:	4805      	ldr	r0, [pc, #20]	; (49b0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    499a:	f007 f929 	bl	bbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    499e:	4804      	ldr	r0, [pc, #16]	; (49b0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    49a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    49a4:	4903      	ldr	r1, [pc, #12]	; (49b4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    49a6:	1d00      	adds	r0, r0, #4
    49a8:	f007 b922 	b.w	bbf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    49ac:	200000e4 	.word	0x200000e4
    49b0:	200000d8 	.word	0x200000d8
    49b4:	200000ec 	.word	0x200000ec

000049b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    49b8:	4801      	ldr	r0, [pc, #4]	; (49c0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    49ba:	7840      	ldrb	r0, [r0, #1]
    49bc:	4770      	bx	lr
    49be:	0000      	.short	0x0000
    49c0:	200000d4 	.word	0x200000d4
    49c4:	b510      	push	{r4, lr}
    49c6:	f7fe ff0f 	bl	37e8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    49ca:	f7ff fd25 	bl	4418 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    49ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    49d2:	4801      	ldr	r0, [pc, #4]	; (49d8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    49d4:	f7fe beee 	b.w	37b4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    49d8:	20001388 	.word	0x20001388

000049dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    49dc:	4901      	ldr	r1, [pc, #4]	; (49e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    49de:	e9d1 0100 	ldrd	r0, r1, [r1]
    49e2:	4770      	bx	lr
    49e4:	20000020 	.word	0x20000020

000049e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    49e8:	4806      	ldr	r0, [pc, #24]	; (4a04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    49ea:	8801      	ldrh	r1, [r0, #0]
    49ec:	7900      	ldrb	r0, [r0, #4]
    49ee:	0602      	lsls	r2, r0, #24
    49f0:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    49f4:	f000 0001 	and.w	r0, r0, #1
    49f8:	1800      	adds	r0, r0, r0
    49fa:	b2c0      	uxtb	r0, r0
    49fc:	f040 0001 	orr.w	r0, r0, #1
    4a00:	4770      	bx	lr
    4a02:	0000      	.short	0x0000
    4a04:	20000020 	.word	0x20000020

00004a08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    4a08:	b510      	push	{r4, lr}
    4a0a:	f004 fc7b 	bl	9304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4a0e:	2200      	movs	r2, #0
    4a10:	4b08      	ldr	r3, [pc, #32]	; (4a34 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    4a12:	4611      	mov	r1, r2
    4a14:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    4a18:	4284      	cmp	r4, r0
    4a1a:	d303      	bcc.n	4a24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    4a1c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    4a20:	7882      	ldrb	r2, [r0, #2]
    4a22:	e003      	b.n	4a2c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    4a24:	1c49      	adds	r1, r1, #1
    4a26:	b2c9      	uxtb	r1, r1
    4a28:	290c      	cmp	r1, #12
    4a2a:	d3f3      	bcc.n	4a14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    4a2c:	4802      	ldr	r0, [pc, #8]	; (4a38 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    4a2e:	7002      	strb	r2, [r0, #0]
    4a30:	bd10      	pop	{r4, pc}
    4a32:	0000      	.short	0x0000
    4a34:	0000bc20 	.word	0x0000bc20
    4a38:	2000018b 	.word	0x2000018b

00004a3c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    4a3c:	b570      	push	{r4, r5, r6, lr}
    4a3e:	4605      	mov	r5, r0
    4a40:	4616      	mov	r6, r2
    4a42:	460c      	mov	r4, r1
    4a44:	2002      	movs	r0, #2
    4a46:	f000 f8bd 	bl	4bc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    4a4a:	4906      	ldr	r1, [pc, #24]	; (4a64 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    4a4c:	2001      	movs	r0, #1
    4a4e:	1ef6      	subs	r6, r6, #3
    4a50:	7008      	strb	r0, [r1, #0]
    4a52:	4805      	ldr	r0, [pc, #20]	; (4a68 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    4a54:	6006      	str	r6, [r0, #0]
    4a56:	4804      	ldr	r0, [pc, #16]	; (4a68 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    4a58:	3808      	subs	r0, #8
    4a5a:	6005      	str	r5, [r0, #0]
    4a5c:	1f00      	subs	r0, r0, #4
    4a5e:	6004      	str	r4, [r0, #0]
    4a60:	bd70      	pop	{r4, r5, r6, pc}
    4a62:	0000      	.short	0x0000
    4a64:	2000018c 	.word	0x2000018c
    4a68:	4000f510 	.word	0x4000f510

00004a6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    4a6c:	b510      	push	{r4, lr}
    4a6e:	4c0c      	ldr	r4, [pc, #48]	; (4aa0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    4a70:	7820      	ldrb	r0, [r4, #0]
    4a72:	b180      	cbz	r0, 4a96 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    4a74:	490b      	ldr	r1, [pc, #44]	; (4aa4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    4a76:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    4a7a:	6008      	str	r0, [r1, #0]
    4a7c:	f000 f86a 	bl	4b54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    4a80:	2100      	movs	r1, #0
    4a82:	b120      	cbz	r0, 4a8e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    4a84:	2001      	movs	r0, #1
    4a86:	7060      	strb	r0, [r4, #1]
    4a88:	4807      	ldr	r0, [pc, #28]	; (4aa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    4a8a:	6800      	ldr	r0, [r0, #0]
    4a8c:	e001      	b.n	4a92 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    4a8e:	7061      	strb	r1, [r4, #1]
    4a90:	2010      	movs	r0, #16
    4a92:	70a0      	strb	r0, [r4, #2]
    4a94:	7021      	strb	r1, [r4, #0]
    4a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a9a:	2000      	movs	r0, #0
    4a9c:	f000 b892 	b.w	4bc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    4aa0:	2000018c 	.word	0x2000018c
    4aa4:	4001f508 	.word	0x4001f508
    4aa8:	4000f400 	.word	0x4000f400

00004aac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    4aac:	b510      	push	{r4, lr}
    4aae:	2002      	movs	r0, #2
    4ab0:	f000 f888 	bl	4bc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    4ab4:	4904      	ldr	r1, [pc, #16]	; (4ac8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    4ab6:	2001      	movs	r0, #1
    4ab8:	7008      	strb	r0, [r1, #0]
    4aba:	f000 f859 	bl	4b70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    4abe:	4903      	ldr	r1, [pc, #12]	; (4acc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    4ac0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    4ac4:	6008      	str	r0, [r1, #0]
    4ac6:	bd10      	pop	{r4, pc}
    4ac8:	2000018c 	.word	0x2000018c
    4acc:	4001f504 	.word	0x4001f504

00004ad0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    4ad0:	4803      	ldr	r0, [pc, #12]	; (4ae0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    4ad2:	2100      	movs	r1, #0
    4ad4:	7001      	strb	r1, [r0, #0]
    4ad6:	7041      	strb	r1, [r0, #1]
    4ad8:	2110      	movs	r1, #16
    4ada:	7081      	strb	r1, [r0, #2]
    4adc:	4770      	bx	lr
    4ade:	0000      	.short	0x0000
    4ae0:	2000018c 	.word	0x2000018c

00004ae4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    4ae4:	4807      	ldr	r0, [pc, #28]	; (4b04 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    4ae6:	b510      	push	{r4, lr}
    4ae8:	7801      	ldrb	r1, [r0, #0]
    4aea:	b141      	cbz	r1, 4afe <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    4aec:	f000 f832 	bl	4b54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    4af0:	b118      	cbz	r0, 4afa <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    4af2:	4805      	ldr	r0, [pc, #20]	; (4b08 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    4af4:	6800      	ldr	r0, [r0, #0]
    4af6:	b2c0      	uxtb	r0, r0
    4af8:	bd10      	pop	{r4, pc}
    4afa:	2010      	movs	r0, #16
    4afc:	bd10      	pop	{r4, pc}
    4afe:	7880      	ldrb	r0, [r0, #2]
    4b00:	bd10      	pop	{r4, pc}
    4b02:	0000      	.short	0x0000
    4b04:	2000018c 	.word	0x2000018c
    4b08:	4000f400 	.word	0x4000f400

00004b0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    4b0c:	4808      	ldr	r0, [pc, #32]	; (4b30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    4b0e:	b510      	push	{r4, lr}
    4b10:	7801      	ldrb	r1, [r0, #0]
    4b12:	b159      	cbz	r1, 4b2c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    4b14:	4807      	ldr	r0, [pc, #28]	; (4b34 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    4b16:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4b1a:	b128      	cbz	r0, 4b28 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    4b1c:	f000 f80c 	bl	4b38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    4b20:	2800      	cmp	r0, #0
    4b22:	d000      	beq.n	4b26 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    4b24:	2001      	movs	r0, #1
    4b26:	bd10      	pop	{r4, pc}
    4b28:	2002      	movs	r0, #2
    4b2a:	bd10      	pop	{r4, pc}
    4b2c:	7840      	ldrb	r0, [r0, #1]
    4b2e:	bd10      	pop	{r4, pc}
    4b30:	2000018c 	.word	0x2000018c
    4b34:	4000f000 	.word	0x4000f000
    4b38:	4805      	ldr	r0, [pc, #20]	; (4b50 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    4b3a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    4b3e:	b111      	cbz	r1, 4b46 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    4b40:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    4b44:	b108      	cbz	r0, 4b4a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    4b46:	2000      	movs	r0, #0
    4b48:	4770      	bx	lr
    4b4a:	2001      	movs	r0, #1
    4b4c:	4770      	bx	lr
    4b4e:	0000      	.short	0x0000
    4b50:	4000f000 	.word	0x4000f000
    4b54:	4805      	ldr	r0, [pc, #20]	; (4b6c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    4b56:	b510      	push	{r4, lr}
    4b58:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4b5c:	b120      	cbz	r0, 4b68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    4b5e:	f7ff ffeb 	bl	4b38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    4b62:	b108      	cbz	r0, 4b68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    4b64:	2001      	movs	r0, #1
    4b66:	bd10      	pop	{r4, pc}
    4b68:	2000      	movs	r0, #0
    4b6a:	bd10      	pop	{r4, pc}
    4b6c:	4000f000 	.word	0x4000f000
    4b70:	4804      	ldr	r0, [pc, #16]	; (4b84 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    4b72:	2100      	movs	r1, #0
    4b74:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4b78:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    4b7c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    4b80:	4770      	bx	lr
    4b82:	0000      	.short	0x0000
    4b84:	4000f000 	.word	0x4000f000

00004b88 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    4b88:	b570      	push	{r4, r5, r6, lr}
    4b8a:	4d05      	ldr	r5, [pc, #20]	; (4ba0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    4b8c:	2400      	movs	r4, #0
    4b8e:	7828      	ldrb	r0, [r5, #0]
    4b90:	b110      	cbz	r0, 4b98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    4b92:	f000 f80f 	bl	4bb4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    4b96:	702c      	strb	r4, [r5, #0]
    4b98:	706c      	strb	r4, [r5, #1]
    4b9a:	70ac      	strb	r4, [r5, #2]
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
    4b9e:	0000      	.short	0x0000
    4ba0:	2000018f 	.word	0x2000018f

00004ba4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    4ba4:	4802      	ldr	r0, [pc, #8]	; (4bb0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    4ba6:	2100      	movs	r1, #0
    4ba8:	7001      	strb	r1, [r0, #0]
    4baa:	7041      	strb	r1, [r0, #1]
    4bac:	7081      	strb	r1, [r0, #2]
    4bae:	4770      	bx	lr
    4bb0:	2000018f 	.word	0x2000018f
    4bb4:	4902      	ldr	r1, [pc, #8]	; (4bc0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    4bb6:	4801      	ldr	r0, [pc, #4]	; (4bbc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    4bb8:	6008      	str	r0, [r1, #0]
    4bba:	4770      	bx	lr
    4bbc:	02020000 	.word	0x02020000
    4bc0:	4001f508 	.word	0x4001f508

00004bc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    4bc4:	b510      	push	{r4, lr}
    4bc6:	4604      	mov	r4, r0
    4bc8:	f000 f820 	bl	4c0c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    4bcc:	2c00      	cmp	r4, #0
    4bce:	d00e      	beq.n	4bee <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    4bd0:	4a0b      	ldr	r2, [pc, #44]	; (4c00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    4bd2:	480b      	ldr	r0, [pc, #44]	; (4c00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    4bd4:	490b      	ldr	r1, [pc, #44]	; (4c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    4bd6:	3214      	adds	r2, #20
    4bd8:	2c01      	cmp	r4, #1
    4bda:	d005      	beq.n	4be8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    4bdc:	2c02      	cmp	r4, #2
    4bde:	d007      	beq.n	4bf0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    4be0:	2182      	movs	r1, #130	; 0x82
    4be2:	203d      	movs	r0, #61	; 0x3d
    4be4:	f7fd fa32 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4be8:	2302      	movs	r3, #2
    4bea:	6003      	str	r3, [r0, #0]
    4bec:	6011      	str	r1, [r2, #0]
    4bee:	bd10      	pop	{r4, pc}
    4bf0:	2303      	movs	r3, #3
    4bf2:	6003      	str	r3, [r0, #0]
    4bf4:	6011      	str	r1, [r2, #0]
    4bf6:	4904      	ldr	r1, [pc, #16]	; (4c08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    4bf8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    4bfc:	6008      	str	r0, [r1, #0]
    4bfe:	bd10      	pop	{r4, pc}
    4c00:	4000f500 	.word	0x4000f500
    4c04:	2000158c 	.word	0x2000158c
    4c08:	4001f504 	.word	0x4001f504
    4c0c:	4805      	ldr	r0, [pc, #20]	; (4c24 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    4c0e:	b510      	push	{r4, lr}
    4c10:	2100      	movs	r1, #0
    4c12:	6001      	str	r1, [r0, #0]
    4c14:	6001      	str	r1, [r0, #0]
    4c16:	f7ff ffb7 	bl	4b88 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4c1a:	4903      	ldr	r1, [pc, #12]	; (4c28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    4c1c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    4c20:	6008      	str	r0, [r1, #0]
    4c22:	bd10      	pop	{r4, pc}
    4c24:	4000f500 	.word	0x4000f500
    4c28:	4001f508 	.word	0x4001f508

00004c2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    4c2c:	4805      	ldr	r0, [pc, #20]	; (4c44 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    4c2e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    4c32:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    4c36:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4c3a:	2100      	movs	r1, #0
    4c3c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    4c40:	4770      	bx	lr
    4c42:	0000      	.short	0x0000
    4c44:	40001000 	.word	0x40001000

00004c48 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    4c48:	4904      	ldr	r1, [pc, #16]	; (4c5c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    4c4a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    4c4e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    4c52:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4c56:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4c5a:	4770      	bx	lr
    4c5c:	40001000 	.word	0x40001000

00004c60 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    4c60:	4902      	ldr	r1, [pc, #8]	; (4c6c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    4c62:	5c08      	ldrb	r0, [r1, r0]
    4c64:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    4c68:	4770      	bx	lr
    4c6a:	0000      	.short	0x0000
    4c6c:	00005856 	.word	0x00005856

00004c70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    4c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c72:	4c24      	ldr	r4, [pc, #144]	; (4d04 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    4c74:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4c78:	f010 0f10 	tst.w	r0, #16
    4c7c:	d001      	beq.n	4c82 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    4c7e:	2701      	movs	r7, #1
    4c80:	e000      	b.n	4c84 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    4c82:	2700      	movs	r7, #0
    4c84:	2010      	movs	r0, #16
    4c86:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4c8a:	2002      	movs	r0, #2
    4c8c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    4c90:	481d      	ldr	r0, [pc, #116]	; (4d08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    4c92:	2500      	movs	r5, #0
    4c94:	491d      	ldr	r1, [pc, #116]	; (4d0c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    4c96:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    4c9a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    4c9e:	6008      	str	r0, [r1, #0]
    4ca0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    4ca4:	f44f 7688 	mov.w	r6, #272	; 0x110
    4ca8:	f010 0fff 	tst.w	r0, #255	; 0xff
    4cac:	d019      	beq.n	4ce2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    4cae:	20ff      	movs	r0, #255	; 0xff
    4cb0:	f88d 0000 	strb.w	r0, [sp]
    4cb4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    4cb8:	2001      	movs	r0, #1
    4cba:	6120      	str	r0, [r4, #16]
    4cbc:	e005      	b.n	4cca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    4cbe:	bf00      	nop
    4cc0:	f89d 0000 	ldrb.w	r0, [sp]
    4cc4:	1e40      	subs	r0, r0, #1
    4cc6:	f88d 0000 	strb.w	r0, [sp]
    4cca:	f89d 0000 	ldrb.w	r0, [sp]
    4cce:	b128      	cbz	r0, 4cdc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    4cd0:	4631      	mov	r1, r6
    4cd2:	4620      	mov	r0, r4
    4cd4:	f007 f803 	bl	bcde <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    4cd8:	2800      	cmp	r0, #0
    4cda:	d0f1      	beq.n	4cc0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    4cdc:	f89d 0000 	ldrb.w	r0, [sp]
    4ce0:	b158      	cbz	r0, 4cfa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    4ce2:	f000 fbcd 	bl	5480 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    4ce6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    4cea:	f000 fd35 	bl	5758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    4cee:	2f00      	cmp	r7, #0
    4cf0:	d002      	beq.n	4cf8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    4cf2:	2010      	movs	r0, #16
    4cf4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cfa:	f640 0194 	movw	r1, #2196	; 0x894
    4cfe:	203e      	movs	r0, #62	; 0x3e
    4d00:	f7fd f9a4 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d04:	40001000 	.word	0x40001000
    4d08:	20001158 	.word	0x20001158
    4d0c:	4001f508 	.word	0x4001f508

00004d10 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    4d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d14:	4d18      	ldr	r5, [pc, #96]	; (4d78 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    4d16:	4607      	mov	r7, r0
    4d18:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    4d1c:	07c2      	lsls	r2, r0, #31
    4d1e:	d00f      	beq.n	4d40 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    4d20:	4c16      	ldr	r4, [pc, #88]	; (4d7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    4d22:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    4d26:	f042 0201 	orr.w	r2, r2, #1
    4d2a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    4d2e:	f040 0002 	orr.w	r0, r0, #2
    4d32:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    4d36:	2601      	movs	r6, #1
    4d38:	b13f      	cbz	r7, 4d4a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    4d3a:	2f01      	cmp	r7, #1
    4d3c:	d00b      	beq.n	4d56 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    4d3e:	e010      	b.n	4d62 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    4d40:	f240 716f 	movw	r1, #1903	; 0x76f
    4d44:	203e      	movs	r0, #62	; 0x3e
    4d46:	f7fd f981 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d4a:	4608      	mov	r0, r1
    4d4c:	f000 fd5e 	bl	580c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    4d50:	726e      	strb	r6, [r5, #9]
    4d52:	6026      	str	r6, [r4, #0]
    4d54:	e005      	b.n	4d62 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    4d56:	4608      	mov	r0, r1
    4d58:	f000 fd3e 	bl	57d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    4d5c:	2002      	movs	r0, #2
    4d5e:	7268      	strb	r0, [r5, #9]
    4d60:	6066      	str	r6, [r4, #4]
    4d62:	4807      	ldr	r0, [pc, #28]	; (4d80 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    4d64:	64c6      	str	r6, [r0, #76]	; 0x4c
    4d66:	4806      	ldr	r0, [pc, #24]	; (4d80 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    4d68:	300c      	adds	r0, #12
    4d6a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    4d6e:	4638      	mov	r0, r7
    4d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d74:	f000 bcc2 	b.w	56fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    4d78:	20001158 	.word	0x20001158
    4d7c:	40001000 	.word	0x40001000
    4d80:	40008000 	.word	0x40008000

00004d84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    4d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d88:	4c2c      	ldr	r4, [pc, #176]	; (4e3c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    4d8a:	0006      	movs	r6, r0
    4d8c:	4d2c      	ldr	r5, [pc, #176]	; (4e40 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    4d8e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    4d92:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4e44 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    4d96:	f040 0002 	orr.w	r0, r0, #2
    4d9a:	4689      	mov	r9, r1
    4d9c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    4da0:	f04f 0700 	mov.w	r7, #0
    4da4:	d002      	beq.n	4dac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    4da6:	2e01      	cmp	r6, #1
    4da8:	d020      	beq.n	4dec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    4daa:	e036      	b.n	4e1a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    4dac:	4608      	mov	r0, r1
    4dae:	f000 fd2d 	bl	580c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    4db2:	2001      	movs	r0, #1
    4db4:	7260      	strb	r0, [r4, #9]
    4db6:	79e0      	ldrb	r0, [r4, #7]
    4db8:	2801      	cmp	r0, #1
    4dba:	d105      	bne.n	4dc8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    4dbc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    4dc0:	f040 0008 	orr.w	r0, r0, #8
    4dc4:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    4dc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4dca:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    4dce:	6260      	str	r0, [r4, #36]	; 0x24
    4dd0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4dd4:	f8c8 0000 	str.w	r0, [r8]
    4dd8:	491b      	ldr	r1, [pc, #108]	; (4e48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    4dda:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    4dde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4de2:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    4de6:	fbb0 f7f1 	udiv	r7, r0, r1
    4dea:	e016      	b.n	4e1a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    4dec:	4608      	mov	r0, r1
    4dee:	f000 fcf3 	bl	57d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    4df2:	2002      	movs	r0, #2
    4df4:	7260      	strb	r0, [r4, #9]
    4df6:	79e0      	ldrb	r0, [r4, #7]
    4df8:	2801      	cmp	r0, #1
    4dfa:	d105      	bne.n	4e08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    4dfc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    4e00:	f040 0004 	orr.w	r0, r0, #4
    4e04:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    4e08:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4e0a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    4e0e:	6260      	str	r0, [r4, #36]	; 0x24
    4e10:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4e14:	f8c8 0000 	str.w	r0, [r8]
    4e18:	2729      	movs	r7, #41	; 0x29
    4e1a:	f000 fb9d 	bl	5558 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    4e1e:	f007 f8d8 	bl	bfd2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    4e22:	b120      	cbz	r0, 4e2e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    4e24:	f7ff ff24 	bl	4c70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4e28:	2000      	movs	r0, #0
    4e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e2e:	2100      	movs	r1, #0
    4e30:	4630      	mov	r0, r6
    4e32:	f000 fc63 	bl	56fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    4e36:	4638      	mov	r0, r7
    4e38:	e7f7      	b.n	4e2a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    4e3a:	0000      	.short	0x0000
    4e3c:	20001158 	.word	0x20001158
    4e40:	40001000 	.word	0x40001000
    4e44:	4001f504 	.word	0x4001f504
    4e48:	00005850 	.word	0x00005850

00004e4c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    4e4c:	b510      	push	{r4, lr}
    4e4e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    4e50:	4901      	ldr	r1, [pc, #4]	; (4e58 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    4e52:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    4e56:	bd10      	pop	{r4, pc}
    4e58:	20001148 	.word	0x20001148

00004e5c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    4e5c:	b570      	push	{r4, r5, r6, lr}
    4e5e:	4c0f      	ldr	r4, [pc, #60]	; (4e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    4e60:	4603      	mov	r3, r0
    4e62:	2002      	movs	r0, #2
    4e64:	7320      	strb	r0, [r4, #12]
    4e66:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    4e6a:	2096      	movs	r0, #150	; 0x96
    4e6c:	f894 1020 	ldrb.w	r1, [r4, #32]
    4e70:	7d22      	ldrb	r2, [r4, #20]
    4e72:	2d01      	cmp	r5, #1
    4e74:	d00e      	beq.n	4e94 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    4e76:	f000 fd27 	bl	58c8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    4e7a:	6120      	str	r0, [r4, #16]
    4e7c:	4808      	ldr	r0, [pc, #32]	; (4ea0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    4e7e:	2100      	movs	r1, #0
    4e80:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4e84:	6921      	ldr	r1, [r4, #16]
    4e86:	69e0      	ldr	r0, [r4, #28]
    4e88:	4408      	add	r0, r1
    4e8a:	4905      	ldr	r1, [pc, #20]	; (4ea0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    4e8c:	1d09      	adds	r1, r1, #4
    4e8e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4e92:	bd70      	pop	{r4, r5, r6, pc}
    4e94:	f000 fd36 	bl	5904 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    4e98:	e7ef      	b.n	4e7a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    4e9a:	0000      	.short	0x0000
    4e9c:	20001158 	.word	0x20001158
    4ea0:	40008000 	.word	0x40008000

00004ea4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    4ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ea8:	2234      	movs	r2, #52	; 0x34
    4eaa:	2100      	movs	r1, #0
    4eac:	4813      	ldr	r0, [pc, #76]	; (4efc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    4eae:	f007 faae 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4eb2:	f000 fc51 	bl	5758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    4eb6:	f007 f96b 	bl	c190 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4eba:	4d11      	ldr	r5, [pc, #68]	; (4f00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    4ebc:	4e10      	ldr	r6, [pc, #64]	; (4f00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    4ebe:	2400      	movs	r4, #0
    4ec0:	4f0f      	ldr	r7, [pc, #60]	; (4f00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    4ec2:	3508      	adds	r5, #8
    4ec4:	3610      	adds	r6, #16
    4ec6:	b928      	cbnz	r0, 4ed4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    4ec8:	f007 f979 	bl	c1be <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4ecc:	b910      	cbnz	r0, 4ed4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    4ece:	f007 f980 	bl	c1d2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    4ed2:	b108      	cbz	r0, 4ed8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    4ed4:	2224      	movs	r2, #36	; 0x24
    4ed6:	e006      	b.n	4ee6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    4ed8:	f007 f9bb 	bl	c252 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4edc:	b910      	cbnz	r0, 4ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    4ede:	f007 f9ae 	bl	c23e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    4ee2:	b140      	cbz	r0, 4ef6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    4ee4:	2240      	movs	r2, #64	; 0x40
    4ee6:	21ff      	movs	r1, #255	; 0xff
    4ee8:	4638      	mov	r0, r7
    4eea:	f007 fa90 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4eee:	602c      	str	r4, [r5, #0]
    4ef0:	6034      	str	r4, [r6, #0]
    4ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ef6:	2238      	movs	r2, #56	; 0x38
    4ef8:	e7f5      	b.n	4ee6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    4efa:	0000      	.short	0x0000
    4efc:	20001158 	.word	0x20001158
    4f00:	40000e00 	.word	0x40000e00

00004f04 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    4f04:	b510      	push	{r4, lr}
    4f06:	f000 fbdb 	bl	56c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    4f0a:	f7ff feb1 	bl	4c70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4f0e:	f004 fc75 	bl	97fc <mpsl_fem_disable>
    4f12:	b130      	cbz	r0, 4f22 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    4f14:	1c40      	adds	r0, r0, #1
    4f16:	d004      	beq.n	4f22 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    4f18:	f240 5165 	movw	r1, #1381	; 0x565
    4f1c:	203e      	movs	r0, #62	; 0x3e
    4f1e:	f7fd f895 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f22:	480f      	ldr	r0, [pc, #60]	; (4f60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    4f24:	4a0f      	ldr	r2, [pc, #60]	; (4f64 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    4f26:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4f28:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    4f2c:	6011      	str	r1, [r2, #0]
    4f2e:	2400      	movs	r4, #0
    4f30:	6244      	str	r4, [r0, #36]	; 0x24
    4f32:	7304      	strb	r4, [r0, #12]
    4f34:	61c4      	str	r4, [r0, #28]
    4f36:	6184      	str	r4, [r0, #24]
    4f38:	f000 fbc2 	bl	56c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    4f3c:	480a      	ldr	r0, [pc, #40]	; (4f68 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    4f3e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    4f42:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    4f46:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    4f4a:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    4f4e:	2001      	movs	r0, #1
    4f50:	f006 feb4 	bl	bcbc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    4f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f58:	2001      	movs	r0, #1
    4f5a:	f006 bea2 	b.w	bca2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    4f5e:	0000      	.short	0x0000
    4f60:	20001158 	.word	0x20001158
    4f64:	4001f508 	.word	0x4001f508
    4f68:	40008000 	.word	0x40008000

00004f6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    4f6c:	b570      	push	{r4, r5, r6, lr}
    4f6e:	2001      	movs	r0, #1
    4f70:	f006 fea4 	bl	bcbc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    4f74:	4c37      	ldr	r4, [pc, #220]	; (5054 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    4f76:	2000      	movs	r0, #0
    4f78:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    4f7c:	2001      	movs	r0, #1
    4f7e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    4f82:	f007 f93c 	bl	c1fe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    4f86:	4d34      	ldr	r5, [pc, #208]	; (5058 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    4f88:	b118      	cbz	r0, 4f92 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    4f8a:	6828      	ldr	r0, [r5, #0]
    4f8c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4f90:	6028      	str	r0, [r5, #0]
    4f92:	f007 f928 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4f96:	b128      	cbz	r0, 4fa4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    4f98:	6828      	ldr	r0, [r5, #0]
    4f9a:	4930      	ldr	r1, [pc, #192]	; (505c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    4f9c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    4fa0:	4308      	orrs	r0, r1
    4fa2:	6028      	str	r0, [r5, #0]
    4fa4:	f007 f93b 	bl	c21e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    4fa8:	b138      	cbz	r0, 4fba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    4faa:	482b      	ldr	r0, [pc, #172]	; (5058 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    4fac:	1d00      	adds	r0, r0, #4
    4fae:	6801      	ldr	r1, [r0, #0]
    4fb0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    4fb4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    4fb8:	6001      	str	r1, [r0, #0]
    4fba:	4927      	ldr	r1, [pc, #156]	; (5058 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    4fbc:	4828      	ldr	r0, [pc, #160]	; (5060 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    4fbe:	313c      	adds	r1, #60	; 0x3c
    4fc0:	6008      	str	r0, [r1, #0]
    4fc2:	f004 fc55 	bl	9870 <mpsl_fem_device_config_254_apply_get>
    4fc6:	b140      	cbz	r0, 4fda <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    4fc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    4fcc:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    4fd0:	1c41      	adds	r1, r0, #1
    4fd2:	d002      	beq.n	4fda <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    4fd4:	4920      	ldr	r1, [pc, #128]	; (5058 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    4fd6:	3110      	adds	r1, #16
    4fd8:	6008      	str	r0, [r1, #0]
    4fda:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4fde:	6e00      	ldr	r0, [r0, #96]	; 0x60
    4fe0:	1c41      	adds	r1, r0, #1
    4fe2:	d004      	beq.n	4fee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    4fe4:	491f      	ldr	r1, [pc, #124]	; (5064 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    4fe6:	680a      	ldr	r2, [r1, #0]
    4fe8:	f360 4217 	bfi	r2, r0, #16, #8
    4fec:	600a      	str	r2, [r1, #0]
    4fee:	f240 1103 	movw	r1, #259	; 0x103
    4ff2:	f240 605b 	movw	r0, #1627	; 0x65b
    4ff6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    4ffa:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4ffe:	2001      	movs	r0, #1
    5000:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    5004:	f000 f842 	bl	508c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    5008:	f240 2001 	movw	r0, #513	; 0x201
    500c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    5010:	2002      	movs	r0, #2
    5012:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    5016:	4914      	ldr	r1, [pc, #80]	; (5068 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    5018:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    501c:	6008      	str	r0, [r1, #0]
    501e:	4913      	ldr	r1, [pc, #76]	; (506c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    5020:	2000      	movs	r0, #0
    5022:	8608      	strh	r0, [r1, #48]	; 0x30
    5024:	3110      	adds	r1, #16
    5026:	61c8      	str	r0, [r1, #28]
    5028:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    502c:	2001      	movs	r0, #1
    502e:	f006 fe38 	bl	bca2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    5032:	2010      	movs	r0, #16
    5034:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    5038:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    503c:	2002      	movs	r0, #2
    503e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    5042:	480b      	ldr	r0, [pc, #44]	; (5070 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    5044:	6800      	ldr	r0, [r0, #0]
    5046:	2800      	cmp	r0, #0
    5048:	d002      	beq.n	5050 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    504a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    504e:	4700      	bx	r0
    5050:	bd70      	pop	{r4, r5, r6, pc}
    5052:	0000      	.short	0x0000
    5054:	40001000 	.word	0x40001000
    5058:	4000173c 	.word	0x4000173c
    505c:	80000096 	.word	0x80000096
    5060:	8900002c 	.word	0x8900002c
    5064:	4000158c 	.word	0x4000158c
    5068:	4001f504 	.word	0x4001f504
    506c:	20001148 	.word	0x20001148
    5070:	200000f4 	.word	0x200000f4

00005074 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    5074:	4901      	ldr	r1, [pc, #4]	; (507c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    5076:	7548      	strb	r0, [r1, #21]
    5078:	4770      	bx	lr
    507a:	0000      	.short	0x0000
    507c:	20001158 	.word	0x20001158

00005080 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    5080:	4901      	ldr	r1, [pc, #4]	; (5088 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    5082:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    5086:	4770      	bx	lr
    5088:	000058a4 	.word	0x000058a4

0000508c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    508c:	4908      	ldr	r1, [pc, #32]	; (50b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    508e:	b510      	push	{r4, lr}
    5090:	7508      	strb	r0, [r1, #20]
    5092:	4908      	ldr	r1, [pc, #32]	; (50b4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    5094:	2801      	cmp	r0, #1
    5096:	d006      	beq.n	50a6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    5098:	2802      	cmp	r0, #2
    509a:	d006      	beq.n	50aa <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    509c:	f640 516c 	movw	r1, #3436	; 0xd6c
    50a0:	203e      	movs	r0, #62	; 0x3e
    50a2:	f7fc ffd3 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50a6:	2003      	movs	r0, #3
    50a8:	e000      	b.n	50ac <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    50aa:	2004      	movs	r0, #4
    50ac:	6008      	str	r0, [r1, #0]
    50ae:	bd10      	pop	{r4, pc}
    50b0:	20001158 	.word	0x20001158
    50b4:	40001510 	.word	0x40001510

000050b8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    50b8:	4905      	ldr	r1, [pc, #20]	; (50d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    50ba:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    50be:	4805      	ldr	r0, [pc, #20]	; (50d4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    50c0:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    50c4:	f041 0101 	orr.w	r1, r1, #1
    50c8:	7001      	strb	r1, [r0, #0]
    50ca:	f000 ba0b 	b.w	54e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    50ce:	0000      	.short	0x0000
    50d0:	40001000 	.word	0x40001000
    50d4:	20001158 	.word	0x20001158

000050d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    50d8:	4901      	ldr	r1, [pc, #4]	; (50e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    50da:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    50de:	4770      	bx	lr
    50e0:	000058b0 	.word	0x000058b0

000050e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    50e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50e8:	4e30      	ldr	r6, [pc, #192]	; (51ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    50ea:	4c31      	ldr	r4, [pc, #196]	; (51b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    50ec:	4688      	mov	r8, r1
    50ee:	0007      	movs	r7, r0
    50f0:	4615      	mov	r5, r2
    50f2:	f04f 0901 	mov.w	r9, #1
    50f6:	d006      	beq.n	5106 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    50f8:	2f01      	cmp	r7, #1
    50fa:	d012      	beq.n	5122 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    50fc:	f640 0117 	movw	r1, #2071	; 0x817
    5100:	203e      	movs	r0, #62	; 0x3e
    5102:	f7fc ffa3 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5106:	4610      	mov	r0, r2
    5108:	f000 fb80 	bl	580c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    510c:	4829      	ldr	r0, [pc, #164]	; (51b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    510e:	f884 9009 	strb.w	r9, [r4, #9]
    5112:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    5116:	4640      	mov	r0, r8
    5118:	f000 fb26 	bl	5768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    511c:	4605      	mov	r5, r0
    511e:	4630      	mov	r0, r6
    5120:	e00c      	b.n	513c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    5122:	4610      	mov	r0, r2
    5124:	f000 fb58 	bl	57d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    5128:	2002      	movs	r0, #2
    512a:	7260      	strb	r0, [r4, #9]
    512c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    5130:	4640      	mov	r0, r8
    5132:	f000 fb19 	bl	5768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    5136:	4605      	mov	r5, r0
    5138:	481c      	ldr	r0, [pc, #112]	; (51ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    513a:	1d00      	adds	r0, r0, #4
    513c:	f000 fad2 	bl	56e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    5140:	f8df 8074 	ldr.w	r8, [pc, #116]	; 51b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    5144:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    5148:	f8df a074 	ldr.w	sl, [pc, #116]	; 51c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    514c:	481b      	ldr	r0, [pc, #108]	; (51bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    514e:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    5152:	2010      	movs	r0, #16
    5154:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    5158:	6a60      	ldr	r0, [r4, #36]	; 0x24
    515a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    515e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    5162:	6260      	str	r0, [r4, #36]	; 0x24
    5164:	4817      	ldr	r0, [pc, #92]	; (51c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    5166:	6006      	str	r6, [r0, #0]
    5168:	f000 f9f6 	bl	5558 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    516c:	4641      	mov	r1, r8
    516e:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    5172:	4811      	ldr	r0, [pc, #68]	; (51b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    5174:	300c      	adds	r0, #12
    5176:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    517a:	42a8      	cmp	r0, r5
    517c:	d310      	bcc.n	51a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    517e:	2000      	movs	r0, #0
    5180:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    5184:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    5188:	6a60      	ldr	r0, [r4, #36]	; 0x24
    518a:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    518e:	6260      	str	r0, [r4, #36]	; 0x24
    5190:	480c      	ldr	r0, [pc, #48]	; (51c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    5192:	1d00      	adds	r0, r0, #4
    5194:	6006      	str	r6, [r0, #0]
    5196:	f7ff fd6b 	bl	4c70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    519a:	2000      	movs	r0, #0
    519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51a0:	4629      	mov	r1, r5
    51a2:	4638      	mov	r0, r7
    51a4:	f000 faaa 	bl	56fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    51a8:	2001      	movs	r0, #1
    51aa:	e7f7      	b.n	519c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    51ac:	40001000 	.word	0x40001000
    51b0:	20001158 	.word	0x20001158
    51b4:	00005850 	.word	0x00005850
    51b8:	40008000 	.word	0x40008000
    51bc:	40008140 	.word	0x40008140
    51c0:	4001f098 	.word	0x4001f098
    51c4:	4001f504 	.word	0x4001f504

000051c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    51c8:	4b0d      	ldr	r3, [pc, #52]	; (5200 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    51ca:	b510      	push	{r4, lr}
    51cc:	71d8      	strb	r0, [r3, #7]
    51ce:	729a      	strb	r2, [r3, #10]
    51d0:	b151      	cbz	r1, 51e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    51d2:	2002      	movs	r0, #2
    51d4:	7218      	strb	r0, [r3, #8]
    51d6:	2801      	cmp	r0, #1
    51d8:	d008      	beq.n	51ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    51da:	2802      	cmp	r0, #2
    51dc:	d00f      	beq.n	51fe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    51de:	f640 2144 	movw	r1, #2628	; 0xa44
    51e2:	203e      	movs	r0, #62	; 0x3e
    51e4:	f7fc ff32 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51e8:	2001      	movs	r0, #1
    51ea:	e7f3      	b.n	51d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    51ec:	7a58      	ldrb	r0, [r3, #9]
    51ee:	2802      	cmp	r0, #2
    51f0:	d105      	bne.n	51fe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    51f2:	f000 f93b 	bl	546c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    51f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51fa:	f000 ba49 	b.w	5690 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    51fe:	bd10      	pop	{r4, pc}
    5200:	20001158 	.word	0x20001158

00005204 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    5204:	4904      	ldr	r1, [pc, #16]	; (5218 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    5206:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    520a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    520e:	4249      	negs	r1, r1
    5210:	7001      	strb	r1, [r0, #0]
    5212:	2001      	movs	r0, #1
    5214:	4770      	bx	lr
    5216:	0000      	.short	0x0000
    5218:	40001000 	.word	0x40001000

0000521c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    521c:	4903      	ldr	r1, [pc, #12]	; (522c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    521e:	0e02      	lsrs	r2, r0, #24
    5220:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    5224:	0200      	lsls	r0, r0, #8
    5226:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    522a:	4770      	bx	lr
    522c:	40001000 	.word	0x40001000

00005230 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    5230:	4901      	ldr	r1, [pc, #4]	; (5238 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    5232:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    5236:	4770      	bx	lr
    5238:	40001000 	.word	0x40001000

0000523c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    523c:	b510      	push	{r4, lr}
    523e:	2200      	movs	r2, #0
    5240:	2901      	cmp	r1, #1
    5242:	d006      	beq.n	5252 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    5244:	2902      	cmp	r1, #2
    5246:	d002      	beq.n	524e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    5248:	f240 21d2 	movw	r1, #722	; 0x2d2
    524c:	e014      	b.n	5278 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    524e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5252:	490b      	ldr	r1, [pc, #44]	; (5280 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    5254:	430a      	orrs	r2, r1
    5256:	490b      	ldr	r1, [pc, #44]	; (5284 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    5258:	600a      	str	r2, [r1, #0]
    525a:	490b      	ldr	r1, [pc, #44]	; (5288 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    525c:	4308      	orrs	r0, r1
    525e:	4909      	ldr	r1, [pc, #36]	; (5284 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    5260:	1d09      	adds	r1, r1, #4
    5262:	6008      	str	r0, [r1, #0]
    5264:	4809      	ldr	r0, [pc, #36]	; (528c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    5266:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    526a:	b2c0      	uxtb	r0, r0
    526c:	2803      	cmp	r0, #3
    526e:	d001      	beq.n	5274 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    5270:	280b      	cmp	r0, #11
    5272:	d104      	bne.n	527e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    5274:	f240 21ea 	movw	r1, #746	; 0x2ea
    5278:	203e      	movs	r0, #62	; 0x3e
    527a:	f7fc fee7 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    527e:	bd10      	pop	{r4, pc}
    5280:	00100108 	.word	0x00100108
    5284:	40001514 	.word	0x40001514
    5288:	02030000 	.word	0x02030000
    528c:	40001000 	.word	0x40001000

00005290 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    5290:	4901      	ldr	r1, [pc, #4]	; (5298 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    5292:	7588      	strb	r0, [r1, #22]
    5294:	4770      	bx	lr
    5296:	0000      	.short	0x0000
    5298:	20001158 	.word	0x20001158

0000529c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52a0:	4851      	ldr	r0, [pc, #324]	; (53e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    52a2:	f04f 0a01 	mov.w	sl, #1
    52a6:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    52aa:	484f      	ldr	r0, [pc, #316]	; (53e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    52ac:	300c      	adds	r0, #12
    52ae:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    52b2:	f006 fe8c 	bl	bfce <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    52b6:	4c4d      	ldr	r4, [pc, #308]	; (53ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    52b8:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    52bc:	f000 f8e0 	bl	5480 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    52c0:	494b      	ldr	r1, [pc, #300]	; (53f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    52c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    52c4:	6008      	str	r0, [r1, #0]
    52c6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 53f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    52ca:	2000      	movs	r0, #0
    52cc:	6260      	str	r0, [r4, #36]	; 0x24
    52ce:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    52d2:	f240 131d 	movw	r3, #285	; 0x11d
    52d6:	439a      	bics	r2, r3
    52d8:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    52dc:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    52e0:	f000 f94e 	bl	5580 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    52e4:	4605      	mov	r5, r0
    52e6:	4840      	ldr	r0, [pc, #256]	; (53e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    52e8:	3008      	adds	r0, #8
    52ea:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    52ee:	4e3e      	ldr	r6, [pc, #248]	; (53e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    52f0:	61e0      	str	r0, [r4, #28]
    52f2:	1d36      	adds	r6, r6, #4
    52f4:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    52f8:	61a0      	str	r0, [r4, #24]
    52fa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    52fe:	7d21      	ldrb	r1, [r4, #20]
    5300:	f884 1020 	strb.w	r1, [r4, #32]
    5304:	7a61      	ldrb	r1, [r4, #9]
    5306:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    530a:	46a1      	mov	r9, r4
    530c:	2400      	movs	r4, #0
    530e:	4639      	mov	r1, r7
    5310:	4628      	mov	r0, r5
    5312:	f000 f983 	bl	561c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    5316:	b910      	cbnz	r0, 531e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    5318:	f8c8 a010 	str.w	sl, [r8, #16]
    531c:	2401      	movs	r4, #1
    531e:	4f33      	ldr	r7, [pc, #204]	; (53ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    5320:	07e8      	lsls	r0, r5, #31
    5322:	f1a7 0710 	sub.w	r7, r7, #16
    5326:	d120      	bne.n	536a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    5328:	07a8      	lsls	r0, r5, #30
    532a:	d527      	bpl.n	537c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    532c:	f006 ff77 	bl	c21e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5330:	b9f0      	cbnz	r0, 5370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    5332:	f006 ff64 	bl	c1fe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    5336:	b9d8      	cbnz	r0, 5370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    5338:	482f      	ldr	r0, [pc, #188]	; (53f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    533a:	6800      	ldr	r0, [r0, #0]
    533c:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    5340:	f3c0 6300 	ubfx	r3, r0, #24, #1
    5344:	f000 020f 	and.w	r2, r0, #15
    5348:	f3c0 1103 	ubfx	r1, r0, #4, #4
    534c:	f3c0 2803 	ubfx	r8, r0, #8, #4
    5350:	b173      	cbz	r3, 5370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    5352:	b11a      	cbz	r2, 535c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    5354:	b111      	cbz	r1, 535c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    5356:	f1b8 0f00 	cmp.w	r8, #0
    535a:	d109      	bne.n	5370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    535c:	f3c0 4004 	ubfx	r0, r0, #16, #5
    5360:	2801      	cmp	r0, #1
    5362:	d105      	bne.n	5370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    5364:	f1bc 0f03 	cmp.w	ip, #3
    5368:	d202      	bcs.n	5370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    536a:	6838      	ldr	r0, [r7, #0]
    536c:	4780      	blx	r0
    536e:	e00e      	b.n	538e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    5370:	f345 0080 	sbfx	r0, r5, #2, #1
    5374:	4621      	mov	r1, r4
    5376:	1c40      	adds	r0, r0, #1
    5378:	687a      	ldr	r2, [r7, #4]
    537a:	e007      	b.n	538c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    537c:	f015 0f28 	tst.w	r5, #40	; 0x28
    5380:	d005      	beq.n	538e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    5382:	f345 1140 	sbfx	r1, r5, #5, #1
    5386:	68ba      	ldr	r2, [r7, #8]
    5388:	4620      	mov	r0, r4
    538a:	1c49      	adds	r1, r1, #1
    538c:	4790      	blx	r2
    538e:	06e8      	lsls	r0, r5, #27
    5390:	d501      	bpl.n	5396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    5392:	68f8      	ldr	r0, [r7, #12]
    5394:	4780      	blx	r0
    5396:	f899 1009 	ldrb.w	r1, [r9, #9]
    539a:	4648      	mov	r0, r9
    539c:	2902      	cmp	r1, #2
    539e:	d120      	bne.n	53e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    53a0:	7b01      	ldrb	r1, [r0, #12]
    53a2:	2900      	cmp	r1, #0
    53a4:	d01d      	beq.n	53e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    53a6:	2902      	cmp	r1, #2
    53a8:	d004      	beq.n	53b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    53aa:	2901      	cmp	r1, #1
    53ac:	d009      	beq.n	53c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    53ae:	f640 4156 	movw	r1, #3158	; 0xc56
    53b2:	e00d      	b.n	53d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    53b4:	69c1      	ldr	r1, [r0, #28]
    53b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
    53ba:	4408      	add	r0, r1
    53bc:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    53c0:	e00b      	b.n	53da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    53c2:	6901      	ldr	r1, [r0, #16]
    53c4:	f8d9 001c 	ldr.w	r0, [r9, #28]
    53c8:	4281      	cmp	r1, r0
    53ca:	d804      	bhi.n	53d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    53cc:	f640 4157 	movw	r1, #3159	; 0xc57
    53d0:	203e      	movs	r0, #62	; 0x3e
    53d2:	f7fc fe3b 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53d6:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    53da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53de:	f000 b961 	b.w	56a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    53e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53e6:	0000      	.short	0x0000
    53e8:	40008000 	.word	0x40008000
    53ec:	20001158 	.word	0x20001158
    53f0:	4001f508 	.word	0x4001f508
    53f4:	40001000 	.word	0x40001000
    53f8:	40001450 	.word	0x40001450
    53fc:	480b      	ldr	r0, [pc, #44]	; (542c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    53fe:	7d81      	ldrb	r1, [r0, #22]
    5400:	480b      	ldr	r0, [pc, #44]	; (5430 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    5402:	5c40      	ldrb	r0, [r0, r1]
    5404:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    5408:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    540c:	d204      	bcs.n	5418 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    540e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    5412:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5416:	e001      	b.n	541c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    5418:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    541c:	4a05      	ldr	r2, [pc, #20]	; (5434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    541e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    5422:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    5426:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    542a:	4770      	bx	lr
    542c:	20001158 	.word	0x20001158
    5430:	00005856 	.word	0x00005856
    5434:	40001000 	.word	0x40001000
    5438:	b508      	push	{r3, lr}
    543a:	490b      	ldr	r1, [pc, #44]	; (5468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    543c:	466b      	mov	r3, sp
    543e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    5442:	7d89      	ldrb	r1, [r1, #22]
    5444:	f000 faaa 	bl	599c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    5448:	f99d 0000 	ldrsb.w	r0, [sp]
    544c:	f000 fa7a 	bl	5944 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    5450:	f10d 0001 	add.w	r0, sp, #1
    5454:	f004 f9f6 	bl	9844 <mpsl_fem_pa_gain_set>
    5458:	2800      	cmp	r0, #0
    545a:	d004      	beq.n	5466 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    545c:	f240 51e6 	movw	r1, #1510	; 0x5e6
    5460:	203e      	movs	r0, #62	; 0x3e
    5462:	f7fc fdf3 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5466:	bd08      	pop	{r3, pc}
    5468:	20001158 	.word	0x20001158
    546c:	4803      	ldr	r0, [pc, #12]	; (547c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    546e:	7a01      	ldrb	r1, [r0, #8]
    5470:	2901      	cmp	r1, #1
    5472:	d102      	bne.n	547a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    5474:	7a80      	ldrb	r0, [r0, #10]
    5476:	f7ff bfdf 	b.w	5438 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    547a:	4770      	bx	lr
    547c:	20001158 	.word	0x20001158
    5480:	480d      	ldr	r0, [pc, #52]	; (54b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    5482:	b510      	push	{r4, lr}
    5484:	7a40      	ldrb	r0, [r0, #9]
    5486:	2801      	cmp	r0, #1
    5488:	d00c      	beq.n	54a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    548a:	2802      	cmp	r0, #2
    548c:	d113      	bne.n	54b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    548e:	f004 f9bb 	bl	9808 <mpsl_fem_lna_configuration_clear>
    5492:	2800      	cmp	r0, #0
    5494:	d00f      	beq.n	54b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    5496:	1c40      	adds	r0, r0, #1
    5498:	d00d      	beq.n	54b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    549a:	f640 01ab 	movw	r1, #2219	; 0x8ab
    549e:	203e      	movs	r0, #62	; 0x3e
    54a0:	f7fc fdd4 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54a4:	f004 f9c2 	bl	982c <mpsl_fem_pa_configuration_clear>
    54a8:	2800      	cmp	r0, #0
    54aa:	d004      	beq.n	54b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    54ac:	1c40      	adds	r0, r0, #1
    54ae:	d002      	beq.n	54b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    54b0:	f640 01a5 	movw	r1, #2213	; 0x8a5
    54b4:	e7f3      	b.n	549e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    54b6:	bd10      	pop	{r4, pc}
    54b8:	20001158 	.word	0x20001158
    54bc:	4808      	ldr	r0, [pc, #32]	; (54e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    54be:	2100      	movs	r1, #0
    54c0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    54c4:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    54c8:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    54cc:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    54d0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    54d4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    54d8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    54dc:	4770      	bx	lr
    54de:	0000      	.short	0x0000
    54e0:	40001000 	.word	0x40001000
    54e4:	4818      	ldr	r0, [pc, #96]	; (5548 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    54e6:	b510      	push	{r4, lr}
    54e8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    54ec:	07c1      	lsls	r1, r0, #31
    54ee:	d029      	beq.n	5544 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    54f0:	0781      	lsls	r1, r0, #30
    54f2:	d514      	bpl.n	551e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    54f4:	4815      	ldr	r0, [pc, #84]	; (554c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    54f6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    54fa:	f041 0101 	orr.w	r1, r1, #1
    54fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    5502:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    5506:	b2c0      	uxtb	r0, r0
    5508:	280b      	cmp	r0, #11
    550a:	d005      	beq.n	5518 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    550c:	280a      	cmp	r0, #10
    550e:	d003      	beq.n	5518 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    5510:	2803      	cmp	r0, #3
    5512:	d001      	beq.n	5518 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    5514:	2802      	cmp	r0, #2
    5516:	d115      	bne.n	5544 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    5518:	f240 610f 	movw	r1, #1551	; 0x60f
    551c:	e00f      	b.n	553e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    551e:	0740      	lsls	r0, r0, #29
    5520:	d510      	bpl.n	5544 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    5522:	480a      	ldr	r0, [pc, #40]	; (554c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    5524:	490a      	ldr	r1, [pc, #40]	; (5550 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    5526:	3008      	adds	r0, #8
    5528:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    552c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    5530:	4808      	ldr	r0, [pc, #32]	; (5554 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    5532:	f006 fbd9 	bl	bce8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    5536:	2800      	cmp	r0, #0
    5538:	d004      	beq.n	5544 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    553a:	f240 6117 	movw	r1, #1559	; 0x617
    553e:	203e      	movs	r0, #62	; 0x3e
    5540:	f7fc fd84 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5544:	bd10      	pop	{r4, pc}
    5546:	0000      	.short	0x0000
    5548:	20001158 	.word	0x20001158
    554c:	40001000 	.word	0x40001000
    5550:	4001f098 	.word	0x4001f098
    5554:	40008000 	.word	0x40008000
    5558:	4808      	ldr	r0, [pc, #32]	; (557c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    555a:	4601      	mov	r1, r0
    555c:	79c2      	ldrb	r2, [r0, #7]
    555e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    5562:	b112      	cbz	r2, 556a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    5564:	2a01      	cmp	r2, #1
    5566:	d003      	beq.n	5570 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    5568:	e006      	b.n	5578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    556a:	f041 0102 	orr.w	r1, r1, #2
    556e:	e001      	b.n	5574 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    5570:	f041 0104 	orr.w	r1, r1, #4
    5574:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    5578:	f7ff bfb4 	b.w	54e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    557c:	20001158 	.word	0x20001158
    5580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5584:	4d22      	ldr	r5, [pc, #136]	; (5610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    5586:	2400      	movs	r4, #0
    5588:	7b28      	ldrb	r0, [r5, #12]
    558a:	b138      	cbz	r0, 559c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    558c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    5590:	4820      	ldr	r0, [pc, #128]	; (5614 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    5592:	f006 fba9 	bl	bce8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    5596:	b108      	cbz	r0, 559c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    5598:	2701      	movs	r7, #1
    559a:	e000      	b.n	559e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    559c:	2700      	movs	r7, #0
    559e:	7a68      	ldrb	r0, [r5, #9]
    55a0:	4e1d      	ldr	r6, [pc, #116]	; (5618 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    55a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    55a6:	2801      	cmp	r0, #1
    55a8:	d002      	beq.n	55b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    55aa:	2802      	cmp	r0, #2
    55ac:	d006      	beq.n	55bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    55ae:	e016      	b.n	55de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    55b0:	4630      	mov	r0, r6
    55b2:	f006 fb94 	bl	bcde <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    55b6:	b190      	cbz	r0, 55de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    55b8:	2408      	movs	r4, #8
    55ba:	e010      	b.n	55de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    55bc:	4630      	mov	r0, r6
    55be:	f006 fb8e 	bl	bcde <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    55c2:	b100      	cbz	r0, 55c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    55c4:	2402      	movs	r4, #2
    55c6:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    55ca:	43c0      	mvns	r0, r0
    55cc:	f340 0000 	sbfx	r0, r0, #0, #1
    55d0:	1c40      	adds	r0, r0, #1
    55d2:	d101      	bne.n	55d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    55d4:	f044 0404 	orr.w	r4, r4, #4
    55d8:	b10f      	cbz	r7, 55de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    55da:	f044 0401 	orr.w	r4, r4, #1
    55de:	f014 0f0b 	tst.w	r4, #11
    55e2:	d107      	bne.n	55f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    55e4:	f44f 7188 	mov.w	r1, #272	; 0x110
    55e8:	4630      	mov	r0, r6
    55ea:	f006 fb78 	bl	bcde <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    55ee:	b108      	cbz	r0, 55f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    55f0:	f044 0410 	orr.w	r4, r4, #16
    55f4:	f7ff ff62 	bl	54bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    55f8:	06e0      	lsls	r0, r4, #27
    55fa:	d506      	bpl.n	560a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    55fc:	0720      	lsls	r0, r4, #28
    55fe:	d404      	bmi.n	560a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    5600:	7a68      	ldrb	r0, [r5, #9]
    5602:	2801      	cmp	r0, #1
    5604:	d101      	bne.n	560a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    5606:	f044 0420 	orr.w	r4, r4, #32
    560a:	4620      	mov	r0, r4
    560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5610:	20001158 	.word	0x20001158
    5614:	40008000 	.word	0x40008000
    5618:	40001000 	.word	0x40001000
    561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5620:	4c1a      	ldr	r4, [pc, #104]	; (568c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    5622:	460d      	mov	r5, r1
    5624:	7a21      	ldrb	r1, [r4, #8]
    5626:	b129      	cbz	r1, 5634 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    5628:	f010 0f11 	tst.w	r0, #17
    562c:	d007      	beq.n	563e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    562e:	f7ff fb1f 	bl	4c70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5632:	e024      	b.n	567e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    5634:	f000 f890 	bl	5758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    5638:	2000      	movs	r0, #0
    563a:	7320      	strb	r0, [r4, #12]
    563c:	e01f      	b.n	567e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    563e:	2901      	cmp	r1, #1
    5640:	d001      	beq.n	5646 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    5642:	2601      	movs	r6, #1
    5644:	e000      	b.n	5648 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    5646:	2600      	movs	r6, #0
    5648:	79e0      	ldrb	r0, [r4, #7]
    564a:	2801      	cmp	r0, #1
    564c:	d00e      	beq.n	566c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    564e:	2700      	movs	r7, #0
    5650:	f000 f882 	bl	5758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    5654:	2196      	movs	r1, #150	; 0x96
    5656:	4630      	mov	r0, r6
    5658:	f000 f894 	bl	5784 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    565c:	4601      	mov	r1, r0
    565e:	b14f      	cbz	r7, 5674 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    5660:	353b      	adds	r5, #59	; 0x3b
    5662:	428d      	cmp	r5, r1
    5664:	d904      	bls.n	5670 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    5666:	2000      	movs	r0, #0
    5668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    566c:	2701      	movs	r7, #1
    566e:	e7ef      	b.n	5650 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    5670:	2001      	movs	r0, #1
    5672:	71e0      	strb	r0, [r4, #7]
    5674:	7aa2      	ldrb	r2, [r4, #10]
    5676:	4630      	mov	r0, r6
    5678:	f7ff fd34 	bl	50e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    567c:	b108      	cbz	r0, 5682 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    567e:	2001      	movs	r0, #1
    5680:	e7f2      	b.n	5668 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    5682:	f640 21a5 	movw	r1, #2725	; 0xaa5
    5686:	203e      	movs	r0, #62	; 0x3e
    5688:	f7fc fce0 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    568c:	20001158 	.word	0x20001158
    5690:	4803      	ldr	r0, [pc, #12]	; (56a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    5692:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    5696:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    569a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    569e:	4770      	bx	lr
    56a0:	40001000 	.word	0x40001000
    56a4:	4804      	ldr	r0, [pc, #16]	; (56b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    56a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    56a8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    56ac:	6241      	str	r1, [r0, #36]	; 0x24
    56ae:	4903      	ldr	r1, [pc, #12]	; (56bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    56b0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    56b4:	6008      	str	r0, [r1, #0]
    56b6:	4770      	bx	lr
    56b8:	20001158 	.word	0x20001158
    56bc:	4001f504 	.word	0x4001f504
    56c0:	4a07      	ldr	r2, [pc, #28]	; (56e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    56c2:	2000      	movs	r0, #0
    56c4:	3208      	adds	r2, #8
    56c6:	4906      	ldr	r1, [pc, #24]	; (56e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    56c8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    56cc:	1d0a      	adds	r2, r1, #4
    56ce:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    56d2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    56d6:	4902      	ldr	r1, [pc, #8]	; (56e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    56d8:	310c      	adds	r1, #12
    56da:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    56de:	4770      	bx	lr
    56e0:	40008000 	.word	0x40008000
    56e4:	4903      	ldr	r1, [pc, #12]	; (56f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    56e6:	79c9      	ldrb	r1, [r1, #7]
    56e8:	2900      	cmp	r1, #0
    56ea:	d102      	bne.n	56f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    56ec:	4902      	ldr	r1, [pc, #8]	; (56f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    56ee:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    56f2:	4770      	bx	lr
    56f4:	20001158 	.word	0x20001158
    56f8:	4001f098 	.word	0x4001f098
    56fc:	b510      	push	{r4, lr}
    56fe:	4a14      	ldr	r2, [pc, #80]	; (5750 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    5700:	b120      	cbz	r0, 570c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    5702:	2801      	cmp	r0, #1
    5704:	d011      	beq.n	572a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    5706:	f240 7153 	movw	r1, #1875	; 0x753
    570a:	e01c      	b.n	5746 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    570c:	f101 0028 	add.w	r0, r1, #40	; 0x28
    5710:	e9c2 1002 	strd	r1, r0, [r2, #8]
    5714:	490f      	ldr	r1, [pc, #60]	; (5754 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    5716:	480e      	ldr	r0, [pc, #56]	; (5750 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    5718:	f004 f88e 	bl	9838 <mpsl_fem_pa_configuration_set>
    571c:	2800      	cmp	r0, #0
    571e:	d015      	beq.n	574c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    5720:	1c40      	adds	r0, r0, #1
    5722:	d013      	beq.n	574c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    5724:	f240 7142 	movw	r1, #1858	; 0x742
    5728:	e00d      	b.n	5746 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    572a:	f101 0029 	add.w	r0, r1, #41	; 0x29
    572e:	e9c2 1002 	strd	r1, r0, [r2, #8]
    5732:	4908      	ldr	r1, [pc, #32]	; (5754 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    5734:	4806      	ldr	r0, [pc, #24]	; (5750 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    5736:	f004 f86d 	bl	9814 <mpsl_fem_lna_configuration_set>
    573a:	2800      	cmp	r0, #0
    573c:	d006      	beq.n	574c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    573e:	1c40      	adds	r0, r0, #1
    5740:	d004      	beq.n	574c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    5742:	f240 714f 	movw	r1, #1871	; 0x74f
    5746:	203e      	movs	r0, #62	; 0x3e
    5748:	f7fc fc80 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    574c:	bd10      	pop	{r4, pc}
    574e:	0000      	.short	0x0000
    5750:	200000f8 	.word	0x200000f8
    5754:	00005880 	.word	0x00005880
    5758:	4802      	ldr	r0, [pc, #8]	; (5764 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    575a:	2100      	movs	r1, #0
    575c:	71c1      	strb	r1, [r0, #7]
    575e:	7201      	strb	r1, [r0, #8]
    5760:	7241      	strb	r1, [r0, #9]
    5762:	4770      	bx	lr
    5764:	20001158 	.word	0x20001158
    5768:	4a05      	ldr	r2, [pc, #20]	; (5780 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    576a:	79d2      	ldrb	r2, [r2, #7]
    576c:	2a01      	cmp	r2, #1
    576e:	d006      	beq.n	577e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    5770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5774:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    5778:	fbb1 f1f2 	udiv	r1, r1, r2
    577c:	1a40      	subs	r0, r0, r1
    577e:	4770      	bx	lr
    5780:	20001158 	.word	0x20001158
    5784:	b570      	push	{r4, r5, r6, lr}
    5786:	4c13      	ldr	r4, [pc, #76]	; (57d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    5788:	4603      	mov	r3, r0
    578a:	460d      	mov	r5, r1
    578c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    5790:	2000      	movs	r0, #0
    5792:	b15a      	cbz	r2, 57ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    5794:	4621      	mov	r1, r4
    5796:	f891 1020 	ldrb.w	r1, [r1, #32]
    579a:	b163      	cbz	r3, 57b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    579c:	2b01      	cmp	r3, #1
    579e:	d111      	bne.n	57c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    57a0:	2a01      	cmp	r2, #1
    57a2:	4628      	mov	r0, r5
    57a4:	d012      	beq.n	57cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    57a6:	f006 faa4 	bl	bcf2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    57aa:	e009      	b.n	57c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    57ac:	f640 0158 	movw	r1, #2136	; 0x858
    57b0:	203e      	movs	r0, #62	; 0x3e
    57b2:	f7fc fc4b 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57b6:	2a01      	cmp	r2, #1
    57b8:	4628      	mov	r0, r5
    57ba:	d004      	beq.n	57c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    57bc:	f006 faa7 	bl	bd0e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    57c0:	69e1      	ldr	r1, [r4, #28]
    57c2:	4408      	add	r0, r1
    57c4:	bd70      	pop	{r4, r5, r6, pc}
    57c6:	f000 f8d1 	bl	596c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    57ca:	e7f9      	b.n	57c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    57cc:	f000 f8c0 	bl	5950 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    57d0:	e7f6      	b.n	57c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    57d2:	0000      	.short	0x0000
    57d4:	20001158 	.word	0x20001158
    57d8:	b510      	push	{r4, lr}
    57da:	f7ff fc57 	bl	508c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    57de:	f7ff fe0d 	bl	53fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    57e2:	f7ff fe43 	bl	546c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    57e6:	f7ff ff53 	bl	5690 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    57ea:	f006 fd18 	bl	c21e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    57ee:	2800      	cmp	r0, #0
    57f0:	d108      	bne.n	5804 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    57f2:	f006 fd04 	bl	c1fe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    57f6:	2800      	cmp	r0, #0
    57f8:	d104      	bne.n	5804 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    57fa:	4803      	ldr	r0, [pc, #12]	; (5808 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    57fc:	6801      	ldr	r1, [r0, #0]
    57fe:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    5802:	6001      	str	r1, [r0, #0]
    5804:	bd10      	pop	{r4, pc}
    5806:	0000      	.short	0x0000
    5808:	40001568 	.word	0x40001568
    580c:	b510      	push	{r4, lr}
    580e:	4604      	mov	r4, r0
    5810:	f7ff fc3c 	bl	508c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    5814:	f7ff fdf2 	bl	53fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    5818:	4620      	mov	r0, r4
    581a:	f7ff fe0d 	bl	5438 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    581e:	f006 fcfe 	bl	c21e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5822:	2800      	cmp	r0, #0
    5824:	d00d      	beq.n	5842 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    5826:	4a09      	ldr	r2, [pc, #36]	; (584c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    5828:	6811      	ldr	r1, [r2, #0]
    582a:	0650      	lsls	r0, r2, #25
    582c:	2c02      	cmp	r4, #2
    582e:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    5832:	d007      	beq.n	5844 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    5834:	f3c0 2006 	ubfx	r0, r0, #8, #7
    5838:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    583c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    5840:	6010      	str	r0, [r2, #0]
    5842:	bd10      	pop	{r4, pc}
    5844:	f3c0 6006 	ubfx	r0, r0, #24, #7
    5848:	e7f6      	b.n	5838 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    584a:	0000      	.short	0x0000
    584c:	40001588 	.word	0x40001588
    5850:	a62c0000 	.word	0xa62c0000
    5854:	0604a1e0 	.word	0x0604a1e0
    5858:	0e0c0a08 	.word	0x0e0c0a08
    585c:	16141210 	.word	0x16141210
    5860:	201e1c18 	.word	0x201e1c18
    5864:	28262422 	.word	0x28262422
    5868:	302e2c2a 	.word	0x302e2c2a
    586c:	38363432 	.word	0x38363432
    5870:	403e3c3a 	.word	0x403e3c3a
    5874:	48464442 	.word	0x48464442
    5878:	024e4c4a 	.word	0x024e4c4a
    587c:	0000501a 	.word	0x0000501a
    5880:	00000001 	.word	0x00000001
    5884:	40001110 	.word	0x40001110
	...
    589c:	00001e14 	.word	0x00001e14
    58a0:	00001130 	.word	0x00001130
    58a4:	00000000 	.word	0x00000000
    58a8:	00000028 	.word	0x00000028
    58ac:	00000018 	.word	0x00000018
    58b0:	00000000 	.word	0x00000000
    58b4:	00001e14 	.word	0x00001e14
    58b8:	00001130 	.word	0x00001130
    58bc:	00000000 	.word	0x00000000
    58c0:	00001770 	.word	0x00001770
    58c4:	00000fa0 	.word	0x00000fa0

000058c8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    58c8:	b570      	push	{r4, r5, r6, lr}
    58ca:	4605      	mov	r5, r0
    58cc:	4614      	mov	r4, r2
    58ce:	4608      	mov	r0, r1
    58d0:	f7ff fc02 	bl	50d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    58d4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    58d8:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    58dc:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    58e0:	4807      	ldr	r0, [pc, #28]	; (5900 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    58e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    58e6:	4408      	add	r0, r1
    58e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    58ec:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    58f0:	fbb0 f5f1 	udiv	r5, r0, r1
    58f4:	4620      	mov	r0, r4
    58f6:	f7ff fbc3 	bl	5080 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    58fa:	4428      	add	r0, r5
    58fc:	1d40      	adds	r0, r0, #5
    58fe:	bd70      	pop	{r4, r5, r6, pc}
    5900:	00005990 	.word	0x00005990

00005904 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    5904:	b570      	push	{r4, r5, r6, lr}
    5906:	4d0e      	ldr	r5, [pc, #56]	; (5940 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    5908:	461c      	mov	r4, r3
    590a:	3d08      	subs	r5, #8
    590c:	4b0c      	ldr	r3, [pc, #48]	; (5940 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    590e:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    5912:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    5916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    591a:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    591e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5922:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5926:	4418      	add	r0, r3
    5928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    592c:	fbb0 f5f1 	udiv	r5, r0, r1
    5930:	4610      	mov	r0, r2
    5932:	f7ff fba5 	bl	5080 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    5936:	4428      	add	r0, r5
    5938:	4420      	add	r0, r4
    593a:	1d40      	adds	r0, r0, #5
    593c:	bd70      	pop	{r4, r5, r6, pc}
    593e:	0000      	.short	0x0000
    5940:	00005990 	.word	0x00005990

00005944 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    5944:	4901      	ldr	r1, [pc, #4]	; (594c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    5946:	b2c0      	uxtb	r0, r0
    5948:	6008      	str	r0, [r1, #0]
    594a:	4770      	bx	lr
    594c:	4000150c 	.word	0x4000150c

00005950 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    5950:	4a05      	ldr	r2, [pc, #20]	; (5968 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    5952:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    5956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    595a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    595e:	fbb1 f1f2 	udiv	r1, r1, r2
    5962:	4408      	add	r0, r1
    5964:	1e80      	subs	r0, r0, #2
    5966:	4770      	bx	lr
    5968:	00005988 	.word	0x00005988

0000596c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    596c:	4a05      	ldr	r2, [pc, #20]	; (5984 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    596e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    5972:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5976:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    597a:	fbb1 f1f2 	udiv	r1, r1, r2
    597e:	4408      	add	r0, r1
    5980:	4770      	bx	lr
    5982:	0000      	.short	0x0000
    5984:	00005988 	.word	0x00005988
    5988:	05dc0000 	.word	0x05dc0000
    598c:	000003e8 	.word	0x000003e8
    5990:	00000000 	.word	0x00000000
    5994:	00001e14 	.word	0x00001e14
    5998:	00001130 	.word	0x00001130

0000599c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    599c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    59a0:	461e      	mov	r6, r3
    59a2:	4617      	mov	r7, r2
    59a4:	460c      	mov	r4, r1
    59a6:	4605      	mov	r5, r0
    59a8:	f000 f856 	bl	5a58 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    59ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5a54 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    59b0:	4680      	mov	r8, r0
    59b2:	f899 0000 	ldrb.w	r0, [r9]
    59b6:	42a8      	cmp	r0, r5
    59b8:	d110      	bne.n	59dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    59ba:	f899 1001 	ldrb.w	r1, [r9, #1]
    59be:	4648      	mov	r0, r9
    59c0:	42a1      	cmp	r1, r4
    59c2:	d10b      	bne.n	59dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    59c4:	f990 1002 	ldrsb.w	r1, [r0, #2]
    59c8:	42b9      	cmp	r1, r7
    59ca:	d107      	bne.n	59dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    59cc:	78c2      	ldrb	r2, [r0, #3]
    59ce:	4542      	cmp	r2, r8
    59d0:	d104      	bne.n	59dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    59d2:	8881      	ldrh	r1, [r0, #4]
    59d4:	8031      	strh	r1, [r6, #0]
    59d6:	7980      	ldrb	r0, [r0, #6]
    59d8:	70b0      	strb	r0, [r6, #2]
    59da:	e037      	b.n	5a4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    59dc:	463a      	mov	r2, r7
    59de:	4621      	mov	r1, r4
    59e0:	2d01      	cmp	r5, #1
    59e2:	d009      	beq.n	59f8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    59e4:	2d02      	cmp	r5, #2
    59e6:	d009      	beq.n	59fc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    59e8:	2d04      	cmp	r5, #4
    59ea:	d009      	beq.n	5a00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    59ec:	2d08      	cmp	r5, #8
    59ee:	d009      	beq.n	5a04 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    59f0:	f240 4161 	movw	r1, #1121	; 0x461
    59f4:	2006      	movs	r0, #6
    59f6:	e00c      	b.n	5a12 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    59f8:	2000      	movs	r0, #0
    59fa:	e004      	b.n	5a06 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    59fc:	2001      	movs	r0, #1
    59fe:	e002      	b.n	5a06 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    5a00:	2003      	movs	r0, #3
    5a02:	e000      	b.n	5a06 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    5a04:	2002      	movs	r0, #2
    5a06:	466b      	mov	r3, sp
    5a08:	f000 f89e 	bl	5b48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    5a0c:	b118      	cbz	r0, 5a16 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    5a0e:	213d      	movs	r1, #61	; 0x3d
    5a10:	2075      	movs	r0, #117	; 0x75
    5a12:	f7fc fb1b 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a16:	4620      	mov	r0, r4
    5a18:	f7ff f922 	bl	4c60 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    5a1c:	4602      	mov	r2, r0
    5a1e:	2300      	movs	r3, #0
    5a20:	4631      	mov	r1, r6
    5a22:	f99d 0000 	ldrsb.w	r0, [sp]
    5a26:	f003 ff19 	bl	985c <mpsl_fem_tx_power_split>
    5a2a:	4601      	mov	r1, r0
    5a2c:	f889 1007 	strb.w	r1, [r9, #7]
    5a30:	8831      	ldrh	r1, [r6, #0]
    5a32:	f8a9 1004 	strh.w	r1, [r9, #4]
    5a36:	78b1      	ldrb	r1, [r6, #2]
    5a38:	f889 1006 	strb.w	r1, [r9, #6]
    5a3c:	f889 5000 	strb.w	r5, [r9]
    5a40:	f889 4001 	strb.w	r4, [r9, #1]
    5a44:	f889 7002 	strb.w	r7, [r9, #2]
    5a48:	f889 8003 	strb.w	r8, [r9, #3]
    5a4c:	f999 0007 	ldrsb.w	r0, [r9, #7]
    5a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a54:	20000194 	.word	0x20000194

00005a58 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    5a58:	4801      	ldr	r0, [pc, #4]	; (5a60 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    5a5a:	7800      	ldrb	r0, [r0, #0]
    5a5c:	4770      	bx	lr
    5a5e:	0000      	.short	0x0000
    5a60:	20000110 	.word	0x20000110

00005a64 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    5a64:	b570      	push	{r4, r5, r6, lr}
    5a66:	4c17      	ldr	r4, [pc, #92]	; (5ac4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    5a68:	7860      	ldrb	r0, [r4, #1]
    5a6a:	2800      	cmp	r0, #0
    5a6c:	d123      	bne.n	5ab6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    5a6e:	2001      	movs	r0, #1
    5a70:	7060      	strb	r0, [r4, #1]
    5a72:	f006 fbae 	bl	c1d2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    5a76:	f06f 0527 	mvn.w	r5, #39	; 0x27
    5a7a:	b928      	cbnz	r0, 5a88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    5a7c:	f006 fbdf 	bl	c23e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    5a80:	b910      	cbnz	r0, 5a88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    5a82:	f006 fbe6 	bl	c252 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    5a86:	b120      	cbz	r0, 5a92 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    5a88:	480f      	ldr	r0, [pc, #60]	; (5ac8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    5a8a:	6060      	str	r0, [r4, #4]
    5a8c:	70a5      	strb	r5, [r4, #2]
    5a8e:	2008      	movs	r0, #8
    5a90:	e010      	b.n	5ab4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    5a92:	f006 fb73 	bl	c17c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    5a96:	b940      	cbnz	r0, 5aaa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    5a98:	f006 fb7a 	bl	c190 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    5a9c:	b928      	cbnz	r0, 5aaa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    5a9e:	f006 fb8e 	bl	c1be <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    5aa2:	b910      	cbnz	r0, 5aaa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    5aa4:	f006 fb9f 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    5aa8:	b130      	cbz	r0, 5ab8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    5aaa:	4807      	ldr	r0, [pc, #28]	; (5ac8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    5aac:	3031      	adds	r0, #49	; 0x31
    5aae:	6060      	str	r0, [r4, #4]
    5ab0:	70a5      	strb	r5, [r4, #2]
    5ab2:	2004      	movs	r0, #4
    5ab4:	70e0      	strb	r0, [r4, #3]
    5ab6:	bd70      	pop	{r4, r5, r6, pc}
    5ab8:	f240 113f 	movw	r1, #319	; 0x13f
    5abc:	2074      	movs	r0, #116	; 0x74
    5abe:	f003 fd0f 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5ac2:	0000      	.short	0x0000
    5ac4:	20000110 	.word	0x20000110
    5ac8:	0000c566 	.word	0x0000c566

00005acc <mpsl_tx_power_radio_supported_power_adjust>:
    5acc:	4a06      	ldr	r2, [pc, #24]	; (5ae8 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    5ace:	b500      	push	{lr}
    5ad0:	f992 2003 	ldrsb.w	r2, [r2, #3]
    5ad4:	4290      	cmp	r0, r2
    5ad6:	db01      	blt.n	5adc <mpsl_tx_power_radio_supported_power_adjust+0x10>
    5ad8:	4610      	mov	r0, r2
    5ada:	bd00      	pop	{pc}
    5adc:	f000 f808 	bl	5af0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    5ae0:	4902      	ldr	r1, [pc, #8]	; (5aec <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    5ae2:	5608      	ldrsb	r0, [r1, r0]
    5ae4:	bd00      	pop	{pc}
    5ae6:	0000      	.short	0x0000
    5ae8:	20000110 	.word	0x20000110
    5aec:	0000c558 	.word	0x0000c558

00005af0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    5af0:	4602      	mov	r2, r0
    5af2:	4813      	ldr	r0, [pc, #76]	; (5b40 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    5af4:	b510      	push	{r4, lr}
    5af6:	f990 3003 	ldrsb.w	r3, [r0, #3]
    5afa:	429a      	cmp	r2, r3
    5afc:	db01      	blt.n	5b02 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    5afe:	200d      	movs	r0, #13
    5b00:	bd10      	pop	{r4, pc}
    5b02:	f990 3002 	ldrsb.w	r3, [r0, #2]
    5b06:	429a      	cmp	r2, r3
    5b08:	dc01      	bgt.n	5b0e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    5b0a:	2000      	movs	r0, #0
    5b0c:	bd10      	pop	{r4, pc}
    5b0e:	b101      	cbz	r1, 5b12 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    5b10:	2101      	movs	r1, #1
    5b12:	1ad4      	subs	r4, r2, r3
    5b14:	6843      	ldr	r3, [r0, #4]
    5b16:	5d18      	ldrb	r0, [r3, r4]
    5b18:	4c0a      	ldr	r4, [pc, #40]	; (5b44 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    5b1a:	5624      	ldrsb	r4, [r4, r0]
    5b1c:	4294      	cmp	r4, r2
    5b1e:	d0f5      	beq.n	5b0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    5b20:	4c08      	ldr	r4, [pc, #32]	; (5b44 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    5b22:	4408      	add	r0, r1
    5b24:	343f      	adds	r4, #63	; 0x3f
    5b26:	b2c0      	uxtb	r0, r0
    5b28:	b2d2      	uxtb	r2, r2
    5b2a:	42a3      	cmp	r3, r4
    5b2c:	d1ee      	bne.n	5b0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    5b2e:	2900      	cmp	r1, #0
    5b30:	d0ec      	beq.n	5b0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    5b32:	2a01      	cmp	r2, #1
    5b34:	d001      	beq.n	5b3a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    5b36:	2a02      	cmp	r2, #2
    5b38:	d1e8      	bne.n	5b0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    5b3a:	1c40      	adds	r0, r0, #1
    5b3c:	b2c0      	uxtb	r0, r0
    5b3e:	bd10      	pop	{r4, pc}
    5b40:	20000110 	.word	0x20000110
    5b44:	0000c558 	.word	0x0000c558

00005b48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    5b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b4c:	461c      	mov	r4, r3
    5b4e:	4690      	mov	r8, r2
    5b50:	460d      	mov	r5, r1
    5b52:	4606      	mov	r6, r0
    5b54:	f06f 0715 	mvn.w	r7, #21
    5b58:	2804      	cmp	r0, #4
    5b5a:	d804      	bhi.n	5b66 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    5b5c:	b11c      	cbz	r4, 5b66 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    5b5e:	f006 f8e1 	bl	bd24 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    5b62:	42a8      	cmp	r0, r5
    5b64:	d802      	bhi.n	5b6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    5b66:	4638      	mov	r0, r7
    5b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b6c:	4805      	ldr	r0, [pc, #20]	; (5b84 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    5b6e:	4642      	mov	r2, r8
    5b70:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    5b74:	b118      	cbz	r0, 5b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    5b76:	5740      	ldrsb	r0, [r0, r5]
    5b78:	4282      	cmp	r2, r0
    5b7a:	dd00      	ble.n	5b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    5b7c:	4602      	mov	r2, r0
    5b7e:	7022      	strb	r2, [r4, #0]
    5b80:	2000      	movs	r0, #0
    5b82:	e7f1      	b.n	5b68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    5b84:	2000118c 	.word	0x2000118c
    5b88:	b570      	push	{r4, r5, r6, lr}
    5b8a:	460d      	mov	r5, r1
    5b8c:	0004      	movs	r4, r0
    5b8e:	d00c      	beq.n	5baa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    5b90:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    5b94:	2100      	movs	r1, #0
    5b96:	2002      	movs	r0, #2
    5b98:	2d09      	cmp	r5, #9
    5b9a:	d26e      	bcs.n	5c7a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x132>
    5b9c:	e8df f005 	tbb	[pc, r5]
    5ba0:	36361108 	.word	0x36361108
    5ba4:	a6897166 	.word	0xa6897166
    5ba8:	0094      	.short	0x0094
    5baa:	f44f 71cb 	mov.w	r1, #406	; 0x196
    5bae:	e0f7      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5bb0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    5bb4:	2804      	cmp	r0, #4
    5bb6:	d07b      	beq.n	5cb0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x168>
    5bb8:	2803      	cmp	r0, #3
    5bba:	d0fc      	beq.n	5bb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    5bbc:	f240 11a1 	movw	r1, #417	; 0x1a1
    5bc0:	e0ee      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5bc2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    5bc6:	2804      	cmp	r0, #4
    5bc8:	d004      	beq.n	5bd4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    5bca:	2803      	cmp	r0, #3
    5bcc:	d002      	beq.n	5bd4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    5bce:	f240 11a5 	movw	r1, #421	; 0x1a5
    5bd2:	e0e5      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5bd4:	2005      	movs	r0, #5
    5bd6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    5bda:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    5bde:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    5be2:	bbb8      	cbnz	r0, 5c54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10c>
    5be4:	2100      	movs	r1, #0
    5be6:	4620      	mov	r0, r4
    5be8:	f006 f8fd 	bl	bde6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
    5bec:	7820      	ldrb	r0, [r4, #0]
    5bee:	2801      	cmp	r0, #1
    5bf0:	d007      	beq.n	5c02 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xba>
    5bf2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5bf6:	bf00      	nop
    5bf8:	e9c4 0106 	strd	r0, r1, [r4, #24]
    5bfc:	2100      	movs	r1, #0
    5bfe:	6a22      	ldr	r2, [r4, #32]
    5c00:	e048      	b.n	5c94 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    5c02:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    5c06:	f001 f9d5 	bl	6fb4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    5c0a:	e7f5      	b.n	5bf8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb0>
    5c0c:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    5c10:	2904      	cmp	r1, #4
    5c12:	d004      	beq.n	5c1e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    5c14:	2903      	cmp	r1, #3
    5c16:	d002      	beq.n	5c1e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    5c18:	f240 11c3 	movw	r1, #451	; 0x1c3
    5c1c:	e0c0      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5c1e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    5c22:	b122      	cbz	r2, 5c2e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xe6>
    5c24:	4621      	mov	r1, r4
    5c26:	4630      	mov	r0, r6
    5c28:	f006 f91d 	bl	be66 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    5c2c:	e0b0      	b.n	5d90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    5c2e:	2904      	cmp	r1, #4
    5c30:	d000      	beq.n	5c34 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xec>
    5c32:	2001      	movs	r0, #1
    5c34:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    5c38:	6a22      	ldr	r2, [r4, #32]
    5c3a:	2d02      	cmp	r5, #2
    5c3c:	d00b      	beq.n	5c56 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10e>
    5c3e:	2106      	movs	r1, #6
    5c40:	4630      	mov	r0, r6
    5c42:	4790      	blx	r2
    5c44:	2800      	cmp	r0, #0
    5c46:	d06d      	beq.n	5d24 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    5c48:	7800      	ldrb	r0, [r0, #0]
    5c4a:	2800      	cmp	r0, #0
    5c4c:	d06a      	beq.n	5d24 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    5c4e:	f240 11dd 	movw	r1, #477	; 0x1dd
    5c52:	e0a5      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5c54:	e034      	b.n	5cc0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    5c56:	2105      	movs	r1, #5
    5c58:	4630      	mov	r0, r6
    5c5a:	4790      	blx	r2
    5c5c:	2800      	cmp	r0, #0
    5c5e:	d070      	beq.n	5d42 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    5c60:	7800      	ldrb	r0, [r0, #0]
    5c62:	2800      	cmp	r0, #0
    5c64:	d06d      	beq.n	5d42 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    5c66:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    5c6a:	e099      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5c6c:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    5c70:	2805      	cmp	r0, #5
    5c72:	d003      	beq.n	5c7c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x134>
    5c74:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    5c78:	e092      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5c7a:	e080      	b.n	5d7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x236>
    5c7c:	2102      	movs	r1, #2
    5c7e:	6a22      	ldr	r2, [r4, #32]
    5c80:	e008      	b.n	5c94 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    5c82:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    5c86:	2805      	cmp	r0, #5
    5c88:	d002      	beq.n	5c90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x148>
    5c8a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    5c8e:	e087      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5c90:	6a22      	ldr	r2, [r4, #32]
    5c92:	2101      	movs	r1, #1
    5c94:	4630      	mov	r0, r6
    5c96:	4790      	blx	r2
    5c98:	4601      	mov	r1, r0
    5c9a:	4620      	mov	r0, r4
    5c9c:	f006 f84e 	bl	bd3c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    5ca0:	2802      	cmp	r0, #2
    5ca2:	d075      	beq.n	5d90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    5ca4:	b3e8      	cbz	r0, 5d22 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1da>
    5ca6:	2801      	cmp	r0, #1
    5ca8:	d06c      	beq.n	5d84 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x23c>
    5caa:	f240 212a 	movw	r1, #554	; 0x22a
    5cae:	e077      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5cb0:	e070      	b.n	5d94 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24c>
    5cb2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    5cb6:	2805      	cmp	r0, #5
    5cb8:	d002      	beq.n	5cc0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    5cba:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    5cbe:	e06f      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cc4:	f000 b89e 	b.w	5e04 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
    5cc8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    5ccc:	2805      	cmp	r0, #5
    5cce:	d002      	beq.n	5cd6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x18e>
    5cd0:	f240 11f5 	movw	r1, #501	; 0x1f5
    5cd4:	e064      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5cd6:	6a22      	ldr	r2, [r4, #32]
    5cd8:	210a      	movs	r1, #10
    5cda:	4630      	mov	r0, r6
    5cdc:	4790      	blx	r2
    5cde:	4601      	mov	r1, r0
    5ce0:	4620      	mov	r0, r4
    5ce2:	f006 f82b 	bl	bd3c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    5ce6:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    5cea:	e059      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5cec:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    5cf0:	2a05      	cmp	r2, #5
    5cf2:	d007      	beq.n	5d04 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    5cf4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    5cf8:	b10b      	cbz	r3, 5cfe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1b6>
    5cfa:	2a03      	cmp	r2, #3
    5cfc:	d002      	beq.n	5d04 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    5cfe:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    5d02:	e04d      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5d04:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    5d08:	b12a      	cbz	r2, 5d16 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1ce>
    5d0a:	4621      	mov	r1, r4
    5d0c:	4630      	mov	r0, r6
    5d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d12:	f006 b8a8 	b.w	be66 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    5d16:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    5d1a:	b19a      	cbz	r2, 5d44 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fc>
    5d1c:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    5d20:	e001      	b.n	5d26 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1de>
    5d22:	e032      	b.n	5d8a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x242>
    5d24:	e034      	b.n	5d90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    5d26:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    5d2a:	6a22      	ldr	r2, [r4, #32]
    5d2c:	2108      	movs	r1, #8
    5d2e:	4630      	mov	r0, r6
    5d30:	4790      	blx	r2
    5d32:	2800      	cmp	r0, #0
    5d34:	d037      	beq.n	5da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    5d36:	7800      	ldrb	r0, [r0, #0]
    5d38:	2800      	cmp	r0, #0
    5d3a:	d034      	beq.n	5da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    5d3c:	f44f 7102 	mov.w	r1, #520	; 0x208
    5d40:	e02e      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5d42:	e030      	b.n	5da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    5d44:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    5d48:	b15a      	cbz	r2, 5d62 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x21a>
    5d4a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    5d4e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    5d52:	4621      	mov	r1, r4
    5d54:	f006 f845 	bl	bde2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    5d58:	2800      	cmp	r0, #0
    5d5a:	d124      	bne.n	5da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    5d5c:	f240 210d 	movw	r1, #525	; 0x20d
    5d60:	e01e      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5d62:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    5d66:	6a22      	ldr	r2, [r4, #32]
    5d68:	2107      	movs	r1, #7
    5d6a:	4630      	mov	r0, r6
    5d6c:	4790      	blx	r2
    5d6e:	2800      	cmp	r0, #0
    5d70:	d019      	beq.n	5da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    5d72:	7800      	ldrb	r0, [r0, #0]
    5d74:	2800      	cmp	r0, #0
    5d76:	d016      	beq.n	5da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    5d78:	f44f 7105 	mov.w	r1, #532	; 0x214
    5d7c:	e010      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5d7e:	f240 2119 	movw	r1, #537	; 0x219
    5d82:	e00d      	b.n	5da0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    5d84:	2104      	movs	r1, #4
    5d86:	6a22      	ldr	r2, [r4, #32]
    5d88:	e784      	b.n	5c94 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    5d8a:	2103      	movs	r1, #3
    5d8c:	6a22      	ldr	r2, [r4, #32]
    5d8e:	e781      	b.n	5c94 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    5d90:	2d00      	cmp	r5, #0
    5d92:	d108      	bne.n	5da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    5d94:	f006 f91d 	bl	bfd2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    5d98:	2800      	cmp	r0, #0
    5d9a:	d004      	beq.n	5da6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    5d9c:	f240 2133 	movw	r1, #563	; 0x233
    5da0:	206a      	movs	r0, #106	; 0x6a
    5da2:	f003 fb9d 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5da6:	bd70      	pop	{r4, r5, r6, pc}
    5da8:	2800      	cmp	r0, #0
    5daa:	d019      	beq.n	5de0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x298>
    5dac:	7803      	ldrb	r3, [r0, #0]
    5dae:	4913      	ldr	r1, [pc, #76]	; (5dfc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b4>)
    5db0:	4a13      	ldr	r2, [pc, #76]	; (5e00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b8>)
    5db2:	b113      	cbz	r3, 5dba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x272>
    5db4:	2b01      	cmp	r3, #1
    5db6:	d00e      	beq.n	5dd6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28e>
    5db8:	e011      	b.n	5dde <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    5dba:	7903      	ldrb	r3, [r0, #4]
    5dbc:	2b01      	cmp	r3, #1
    5dbe:	d000      	beq.n	5dc2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x27a>
    5dc0:	b96b      	cbnz	r3, 5dde <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    5dc2:	7943      	ldrb	r3, [r0, #5]
    5dc4:	b10b      	cbz	r3, 5dca <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x282>
    5dc6:	2b01      	cmp	r3, #1
    5dc8:	d109      	bne.n	5dde <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    5dca:	6883      	ldr	r3, [r0, #8]
    5dcc:	3b64      	subs	r3, #100	; 0x64
    5dce:	428b      	cmp	r3, r1
    5dd0:	d205      	bcs.n	5dde <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    5dd2:	68c0      	ldr	r0, [r0, #12]
    5dd4:	e00e      	b.n	5df4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ac>
    5dd6:	7903      	ldrb	r3, [r0, #4]
    5dd8:	2b01      	cmp	r3, #1
    5dda:	d002      	beq.n	5de2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    5ddc:	b10b      	cbz	r3, 5de2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    5dde:	2000      	movs	r0, #0
    5de0:	4770      	bx	lr
    5de2:	7943      	ldrb	r3, [r0, #5]
    5de4:	b10b      	cbz	r3, 5dea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a2>
    5de6:	2b01      	cmp	r3, #1
    5de8:	d1f9      	bne.n	5dde <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    5dea:	68c3      	ldr	r3, [r0, #12]
    5dec:	3b64      	subs	r3, #100	; 0x64
    5dee:	428b      	cmp	r3, r1
    5df0:	d2f5      	bcs.n	5dde <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    5df2:	6880      	ldr	r0, [r0, #8]
    5df4:	4290      	cmp	r0, r2
    5df6:	d8f2      	bhi.n	5dde <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    5df8:	2001      	movs	r0, #1
    5dfa:	4770      	bx	lr
    5dfc:	0001863d 	.word	0x0001863d
    5e00:	0f423fff 	.word	0x0f423fff
    5e04:	b510      	push	{r4, lr}
    5e06:	4c05      	ldr	r4, [pc, #20]	; (5e1c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2d4>)
    5e08:	6820      	ldr	r0, [r4, #0]
    5e0a:	b110      	cbz	r0, 5e12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ca>
    5e0c:	4780      	blx	r0
    5e0e:	2000      	movs	r0, #0
    5e10:	6020      	str	r0, [r4, #0]
    5e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e16:	f002 b8c1 	b.w	7f9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    5e1a:	0000      	.short	0x0000
    5e1c:	20000118 	.word	0x20000118

00005e20 <mpsl_timeslot_session_open>:
    5e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e24:	460e      	mov	r6, r1
    5e26:	0005      	movs	r5, r0
    5e28:	d004      	beq.n	5e34 <mpsl_timeslot_session_open+0x14>
    5e2a:	f000 f847 	bl	5ebc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    5e2e:	4607      	mov	r7, r0
    5e30:	2400      	movs	r4, #0
    5e32:	e00b      	b.n	5e4c <mpsl_timeslot_session_open+0x2c>
    5e34:	f06f 0015 	mvn.w	r0, #21
    5e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e3c:	4620      	mov	r0, r4
    5e3e:	f000 f843 	bl	5ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    5e42:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    5e46:	b130      	cbz	r0, 5e56 <mpsl_timeslot_session_open+0x36>
    5e48:	1c64      	adds	r4, r4, #1
    5e4a:	b2e4      	uxtb	r4, r4
    5e4c:	42bc      	cmp	r4, r7
    5e4e:	d3f5      	bcc.n	5e3c <mpsl_timeslot_session_open+0x1c>
    5e50:	f06f 000b 	mvn.w	r0, #11
    5e54:	e7f0      	b.n	5e38 <mpsl_timeslot_session_open+0x18>
    5e56:	4627      	mov	r7, r4
    5e58:	2cff      	cmp	r4, #255	; 0xff
    5e5a:	d0f9      	beq.n	5e50 <mpsl_timeslot_session_open+0x30>
    5e5c:	4620      	mov	r0, r4
    5e5e:	f000 f833 	bl	5ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    5e62:	4604      	mov	r4, r0
    5e64:	f006 f81a 	bl	be9c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
    5e68:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    5e6c:	4621      	mov	r1, r4
    5e6e:	4808      	ldr	r0, [pc, #32]	; (5e90 <mpsl_timeslot_session_open+0x70>)
    5e70:	f002 f870 	bl	7f54 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5e74:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    5e78:	2820      	cmp	r0, #32
    5e7a:	d006      	beq.n	5e8a <mpsl_timeslot_session_open+0x6a>
    5e7c:	2001      	movs	r0, #1
    5e7e:	6225      	str	r5, [r4, #32]
    5e80:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    5e84:	7037      	strb	r7, [r6, #0]
    5e86:	2000      	movs	r0, #0
    5e88:	e7d6      	b.n	5e38 <mpsl_timeslot_session_open+0x18>
    5e8a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5e8e:	e7d3      	b.n	5e38 <mpsl_timeslot_session_open+0x18>
    5e90:	00005b89 	.word	0x00005b89

00005e94 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    5e94:	b510      	push	{r4, lr}
    5e96:	0782      	lsls	r2, r0, #30
    5e98:	d002      	beq.n	5ea0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    5e9a:	f06f 000d 	mvn.w	r0, #13
    5e9e:	bd10      	pop	{r4, pc}
    5ea0:	4a05      	ldr	r2, [pc, #20]	; (5eb8 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    5ea2:	7011      	strb	r1, [r2, #0]
    5ea4:	6050      	str	r0, [r2, #4]
    5ea6:	b128      	cbz	r0, 5eb4 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    5ea8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5eac:	010a      	lsls	r2, r1, #4
    5eae:	2100      	movs	r1, #0
    5eb0:	f006 faad 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5eb4:	2000      	movs	r0, #0
    5eb6:	bd10      	pop	{r4, pc}
    5eb8:	2000011c 	.word	0x2000011c

00005ebc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    5ebc:	4801      	ldr	r0, [pc, #4]	; (5ec4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    5ebe:	7800      	ldrb	r0, [r0, #0]
    5ec0:	4770      	bx	lr
    5ec2:	0000      	.short	0x0000
    5ec4:	2000011c 	.word	0x2000011c

00005ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    5ec8:	4905      	ldr	r1, [pc, #20]	; (5ee0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    5eca:	780a      	ldrb	r2, [r1, #0]
    5ecc:	4290      	cmp	r0, r2
    5ece:	d301      	bcc.n	5ed4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    5ed0:	2000      	movs	r0, #0
    5ed2:	4770      	bx	lr
    5ed4:	6849      	ldr	r1, [r1, #4]
    5ed6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5eda:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5ede:	4770      	bx	lr
    5ee0:	2000011c 	.word	0x2000011c

00005ee4 <MPSL_IRQ_RADIO_Handler>:
    5ee4:	490d      	ldr	r1, [pc, #52]	; (5f1c <MPSL_IRQ_RADIO_Handler+0x38>)
    5ee6:	b510      	push	{r4, lr}
    5ee8:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    5eec:	2820      	cmp	r0, #32
    5eee:	d00f      	beq.n	5f10 <MPSL_IRQ_RADIO_Handler+0x2c>
    5ef0:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    5ef4:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    5ef8:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    5efc:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    5f00:	6840      	ldr	r0, [r0, #4]
    5f02:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    5f06:	680a      	ldr	r2, [r1, #0]
    5f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f0c:	2104      	movs	r1, #4
    5f0e:	4710      	bx	r2
    5f10:	f640 017f 	movw	r1, #2175	; 0x87f
    5f14:	2070      	movs	r0, #112	; 0x70
    5f16:	f003 fae3 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5f1a:	0000      	.short	0x0000
    5f1c:	20000f30 	.word	0x20000f30
    5f20:	b570      	push	{r4, r5, r6, lr}
    5f22:	4605      	mov	r5, r0
    5f24:	2a20      	cmp	r2, #32
    5f26:	d028      	beq.n	5f7a <MPSL_IRQ_RADIO_Handler+0x96>
    5f28:	4819      	ldr	r0, [pc, #100]	; (5f90 <MPSL_IRQ_RADIO_Handler+0xac>)
    5f2a:	4c1a      	ldr	r4, [pc, #104]	; (5f94 <MPSL_IRQ_RADIO_Handler+0xb0>)
    5f2c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    5f30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5f34:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    5f38:	4423      	add	r3, r4
    5f3a:	2920      	cmp	r1, #32
    5f3c:	d022      	beq.n	5f84 <MPSL_IRQ_RADIO_Handler+0xa0>
    5f3e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    5f42:	7840      	ldrb	r0, [r0, #1]
    5f44:	784c      	ldrb	r4, [r1, #1]
    5f46:	7048      	strb	r0, [r1, #1]
    5f48:	4620      	mov	r0, r4
    5f4a:	4601      	mov	r1, r0
    5f4c:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    5f50:	4291      	cmp	r1, r2
    5f52:	7005      	strb	r5, [r0, #0]
    5f54:	7840      	ldrb	r0, [r0, #1]
    5f56:	d1f8      	bne.n	5f4a <MPSL_IRQ_RADIO_Handler+0x66>
    5f58:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    5f5c:	2a20      	cmp	r2, #32
    5f5e:	bf1a      	itte	ne
    5f60:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    5f64:	7054      	strbne	r4, [r2, #1]
    5f66:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    5f6a:	2220      	movs	r2, #32
    5f6c:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    5f70:	f88c 2001 	strb.w	r2, [ip, #1]
    5f74:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    5f78:	bd70      	pop	{r4, r5, r6, pc}
    5f7a:	f240 2186 	movw	r1, #646	; 0x286
    5f7e:	2070      	movs	r0, #112	; 0x70
    5f80:	f003 faae 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5f84:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    5f88:	7840      	ldrb	r0, [r0, #1]
    5f8a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    5f8e:	e7db      	b.n	5f48 <MPSL_IRQ_RADIO_Handler+0x64>
    5f90:	20000eb0 	.word	0x20000eb0
    5f94:	20000f30 	.word	0x20000f30
    5f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f9c:	b08f      	sub	sp, #60	; 0x3c
    5f9e:	4616      	mov	r6, r2
    5fa0:	461d      	mov	r5, r3
    5fa2:	460c      	mov	r4, r1
    5fa4:	f002 fa0a 	bl	83bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5fa8:	1830      	adds	r0, r6, r0
    5faa:	f145 0100 	adc.w	r1, r5, #0
    5fae:	e9cd 1001 	strd	r1, r0, [sp, #4]
    5fb2:	e9d4 2300 	ldrd	r2, r3, [r4]
    5fb6:	1a80      	subs	r0, r0, r2
    5fb8:	eb71 0003 	sbcs.w	r0, r1, r3
    5fbc:	f0c0 80e5 	bcc.w	618a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x18a>
    5fc0:	a808      	add	r0, sp, #32
    5fc2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    5fc6:	900a      	str	r0, [sp, #40]	; 0x28
    5fc8:	48be      	ldr	r0, [pc, #760]	; (62c4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2c4>)
    5fca:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    5fce:	4408      	add	r0, r1
    5fd0:	9009      	str	r0, [sp, #36]	; 0x24
    5fd2:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    5fd6:	2020      	movs	r0, #32
    5fd8:	f10d 091c 	add.w	r9, sp, #28
    5fdc:	f88d 001c 	strb.w	r0, [sp, #28]
    5fe0:	2d20      	cmp	r5, #32
    5fe2:	d036      	beq.n	6052 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x52>
    5fe4:	48b8      	ldr	r0, [pc, #736]	; (62c8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2c8>)
    5fe6:	2600      	movs	r6, #0
    5fe8:	eb00 1a88 	add.w	sl, r0, r8, lsl #6
    5fec:	48b7      	ldr	r0, [pc, #732]	; (62cc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2cc>)
    5fee:	e9d4 7300 	ldrd	r7, r3, [r4]
    5ff2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    5ff6:	f850 bf08 	ldr.w	fp, [r0, #8]!
    5ffa:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    5ffe:	eb1b 0202 	adds.w	r2, fp, r2
    6002:	4171      	adcs	r1, r6
    6004:	1aba      	subs	r2, r7, r2
    6006:	eb73 0101 	sbcs.w	r1, r3, r1
    600a:	d322      	bcc.n	6052 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x52>
    600c:	89e1      	ldrh	r1, [r4, #14]
    600e:	b1c9      	cbz	r1, 6044 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x44>
    6010:	89c0      	ldrh	r0, [r0, #14]
    6012:	b9b8      	cbnz	r0, 6044 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x44>
    6014:	f003 f8c4 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6018:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    601c:	bf08      	it	eq
    601e:	200d      	moveq	r0, #13
    6020:	d00b      	beq.n	603a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3a>
    6022:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6026:	3856      	subs	r0, #86	; 0x56
    6028:	bf08      	it	eq
    602a:	201c      	moveq	r0, #28
    602c:	d005      	beq.n	603a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3a>
    602e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6032:	389f      	subs	r0, #159	; 0x9f
    6034:	bf14      	ite	ne
    6036:	4630      	movne	r0, r6
    6038:	2032      	moveq	r0, #50	; 0x32
    603a:	1c41      	adds	r1, r0, #1
    603c:	ebb7 000b 	subs.w	r0, r7, fp
    6040:	4288      	cmp	r0, r1
    6042:	db06      	blt.n	6052 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x52>
    6044:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    6048:	f889 5000 	strb.w	r5, [r9]
    604c:	7845      	ldrb	r5, [r0, #1]
    604e:	2d20      	cmp	r5, #32
    6050:	d1cc      	bne.n	5fec <MPSL_IRQ_RADIO_Handler+0x108>
    6052:	980a      	ldr	r0, [sp, #40]	; 0x28
    6054:	f899 1000 	ldrb.w	r1, [r9]
    6058:	2d20      	cmp	r5, #32
    605a:	7001      	strb	r1, [r0, #0]
    605c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    605e:	f000 812d 	beq.w	62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    6062:	4899      	ldr	r0, [pc, #612]	; (62c8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2c8>)
    6064:	2700      	movs	r7, #0
    6066:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    606a:	f8df 8260 	ldr.w	r8, [pc, #608]	; 62cc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2cc>
    606e:	9004      	str	r0, [sp, #16]
    6070:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6074:	f8d4 b000 	ldr.w	fp, [r4]
    6078:	eb08 1945 	add.w	r9, r8, r5, lsl #5
    607c:	f109 0008 	add.w	r0, r9, #8
    6080:	eb1b 0201 	adds.w	r2, fp, r1
    6084:	eb43 0107 	adc.w	r1, r3, r7
    6088:	e9d0 a300 	ldrd	sl, r3, [r0]
    608c:	ebba 0202 	subs.w	r2, sl, r2
    6090:	eb73 0101 	sbcs.w	r1, r3, r1
    6094:	d320      	bcc.n	60d8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd8>
    6096:	89c0      	ldrh	r0, [r0, #14]
    6098:	2800      	cmp	r0, #0
    609a:	f000 810f 	beq.w	62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    609e:	89e0      	ldrh	r0, [r4, #14]
    60a0:	2800      	cmp	r0, #0
    60a2:	f040 810b 	bne.w	62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    60a6:	f003 f87b 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    60aa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    60ae:	bf08      	it	eq
    60b0:	200d      	moveq	r0, #13
    60b2:	d00b      	beq.n	60cc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xcc>
    60b4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    60b8:	3856      	subs	r0, #86	; 0x56
    60ba:	bf08      	it	eq
    60bc:	201c      	moveq	r0, #28
    60be:	d005      	beq.n	60cc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xcc>
    60c0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    60c4:	389f      	subs	r0, #159	; 0x9f
    60c6:	bf14      	ite	ne
    60c8:	4638      	movne	r0, r7
    60ca:	2032      	moveq	r0, #50	; 0x32
    60cc:	1c40      	adds	r0, r0, #1
    60ce:	ebba 010b 	subs.w	r1, sl, fp
    60d2:	4281      	cmp	r1, r0
    60d4:	f280 80f2 	bge.w	62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    60d8:	7035      	strb	r5, [r6, #0]
    60da:	f899 0018 	ldrb.w	r0, [r9, #24]
    60de:	7c21      	ldrb	r1, [r4, #16]
    60e0:	4281      	cmp	r1, r0
    60e2:	d207      	bcs.n	60f4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xf4>
    60e4:	9804      	ldr	r0, [sp, #16]
    60e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    60ea:	7845      	ldrb	r5, [r0, #1]
    60ec:	2d20      	cmp	r5, #32
    60ee:	d1bf      	bne.n	6070 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x70>
    60f0:	f000 b8e4 	b.w	62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    60f4:	f89d 0020 	ldrb.w	r0, [sp, #32]
    60f8:	eb08 1040 	add.w	r0, r8, r0, lsl #5
    60fc:	e9d0 2103 	ldrd	r2, r1, [r0, #12]
    6100:	f8d0 9008 	ldr.w	r9, [r0, #8]
    6104:	8ac0      	ldrh	r0, [r0, #22]
    6106:	eb19 0501 	adds.w	r5, r9, r1
    610a:	eb42 0607 	adc.w	r6, r2, r7
    610e:	bbb0      	cbnz	r0, 617e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x17e>
    6110:	89e0      	ldrh	r0, [r4, #14]
    6112:	b3a0      	cbz	r0, 617e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x17e>
    6114:	f003 f844 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6118:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    611c:	bf08      	it	eq
    611e:	200d      	moveq	r0, #13
    6120:	d00b      	beq.n	613a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x13a>
    6122:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6126:	3856      	subs	r0, #86	; 0x56
    6128:	bf08      	it	eq
    612a:	201c      	moveq	r0, #28
    612c:	d005      	beq.n	613a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x13a>
    612e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6132:	389f      	subs	r0, #159	; 0x9f
    6134:	bf14      	ite	ne
    6136:	4638      	movne	r0, r7
    6138:	2032      	moveq	r0, #50	; 0x32
    613a:	1c41      	adds	r1, r0, #1
    613c:	ebb5 0009 	subs.w	r0, r5, r9
    6140:	4288      	cmp	r0, r1
    6142:	da1c      	bge.n	617e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x17e>
    6144:	f003 f82c 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6148:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    614c:	bf08      	it	eq
    614e:	200d      	moveq	r0, #13
    6150:	d00b      	beq.n	616a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x16a>
    6152:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6156:	3856      	subs	r0, #86	; 0x56
    6158:	bf08      	it	eq
    615a:	201c      	moveq	r0, #28
    615c:	d005      	beq.n	616a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x16a>
    615e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6162:	389f      	subs	r0, #159	; 0x9f
    6164:	bf14      	ite	ne
    6166:	4638      	movne	r0, r7
    6168:	2032      	moveq	r0, #50	; 0x32
    616a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    616e:	1c40      	adds	r0, r0, #1
    6170:	eb08 1241 	add.w	r2, r8, r1, lsl #5
    6174:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
    6178:	180d      	adds	r5, r1, r0
    617a:	eb43 0607 	adc.w	r6, r3, r7
    617e:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
    6182:	1b40      	subs	r0, r0, r5
    6184:	eb71 0006 	sbcs.w	r0, r1, r6
    6188:	d203      	bcs.n	6192 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x192>
    618a:	b00f      	add	sp, #60	; 0x3c
    618c:	2000      	movs	r0, #0
    618e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6192:	e9c4 5600 	strd	r5, r6, [r4]
    6196:	9818      	ldr	r0, [sp, #96]	; 0x60
    6198:	900b      	str	r0, [sp, #44]	; 0x2c
    619a:	a808      	add	r0, sp, #32
    619c:	900a      	str	r0, [sp, #40]	; 0x28
    619e:	9809      	ldr	r0, [sp, #36]	; 0x24
    61a0:	f10d 091c 	add.w	r9, sp, #28
    61a4:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    61a8:	2020      	movs	r0, #32
    61aa:	f88d 001c 	strb.w	r0, [sp, #28]
    61ae:	2d20      	cmp	r5, #32
    61b0:	d03c      	beq.n	622c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x22c>
    61b2:	4845      	ldr	r0, [pc, #276]	; (62c8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2c8>)
    61b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    61b6:	eb00 1a81 	add.w	sl, r0, r1, lsl #6
    61ba:	bf00      	nop
    61bc:	eb08 1045 	add.w	r0, r8, r5, lsl #5
    61c0:	f100 0108 	add.w	r1, r0, #8
    61c4:	6902      	ldr	r2, [r0, #16]
    61c6:	e9d1 0c00 	ldrd	r0, ip, [r1]
    61ca:	46bb      	mov	fp, r7
    61cc:	1883      	adds	r3, r0, r2
    61ce:	eb4c 020b 	adc.w	r2, ip, fp
    61d2:	e9d4 6c00 	ldrd	r6, ip, [r4]
    61d6:	1af3      	subs	r3, r6, r3
    61d8:	eb7c 0202 	sbcs.w	r2, ip, r2
    61dc:	d326      	bcc.n	622c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x22c>
    61de:	89e2      	ldrh	r2, [r4, #14]
    61e0:	b1ea      	cbz	r2, 621e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x21e>
    61e2:	89c9      	ldrh	r1, [r1, #14]
    61e4:	b9d9      	cbnz	r1, 621e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x21e>
    61e6:	900c      	str	r0, [sp, #48]	; 0x30
    61e8:	f002 ffda 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    61ec:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    61f0:	bf08      	it	eq
    61f2:	f04f 0b0d 	moveq.w	fp, #13
    61f6:	d00c      	beq.n	6212 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x212>
    61f8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    61fc:	3856      	subs	r0, #86	; 0x56
    61fe:	bf08      	it	eq
    6200:	f04f 0b1c 	moveq.w	fp, #28
    6204:	d005      	beq.n	6212 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x212>
    6206:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    620a:	389f      	subs	r0, #159	; 0x9f
    620c:	bf08      	it	eq
    620e:	f04f 0b32 	moveq.w	fp, #50	; 0x32
    6212:	f10b 0001 	add.w	r0, fp, #1
    6216:	990c      	ldr	r1, [sp, #48]	; 0x30
    6218:	1a71      	subs	r1, r6, r1
    621a:	4281      	cmp	r1, r0
    621c:	db06      	blt.n	622c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x22c>
    621e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    6222:	f889 5000 	strb.w	r5, [r9]
    6226:	7845      	ldrb	r5, [r0, #1]
    6228:	2d20      	cmp	r5, #32
    622a:	d1c7      	bne.n	61bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x1bc>
    622c:	980a      	ldr	r0, [sp, #40]	; 0x28
    622e:	f899 1000 	ldrb.w	r1, [r9]
    6232:	2d20      	cmp	r5, #32
    6234:	7001      	strb	r1, [r0, #0]
    6236:	e9dd a00a 	ldrd	sl, r0, [sp, #40]	; 0x28
    623a:	d03f      	beq.n	62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    623c:	4922      	ldr	r1, [pc, #136]	; (62c8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2c8>)
    623e:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    6242:	9003      	str	r0, [sp, #12]
    6244:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6248:	f8d4 b000 	ldr.w	fp, [r4]
    624c:	eb08 1645 	add.w	r6, r8, r5, lsl #5
    6250:	f106 0008 	add.w	r0, r6, #8
    6254:	eb1b 0201 	adds.w	r2, fp, r1
    6258:	eb43 0107 	adc.w	r1, r3, r7
    625c:	e9d0 9300 	ldrd	r9, r3, [r0]
    6260:	ebb9 0202 	subs.w	r2, r9, r2
    6264:	eb73 0101 	sbcs.w	r1, r3, r1
    6268:	d31b      	bcc.n	62a2 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2a2>
    626a:	89c0      	ldrh	r0, [r0, #14]
    626c:	b330      	cbz	r0, 62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    626e:	89e0      	ldrh	r0, [r4, #14]
    6270:	bb20      	cbnz	r0, 62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    6272:	f002 ff95 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6276:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    627a:	bf08      	it	eq
    627c:	200d      	moveq	r0, #13
    627e:	d00b      	beq.n	6298 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x298>
    6280:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6284:	3856      	subs	r0, #86	; 0x56
    6286:	bf08      	it	eq
    6288:	201c      	moveq	r0, #28
    628a:	d005      	beq.n	6298 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x298>
    628c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6290:	389f      	subs	r0, #159	; 0x9f
    6292:	bf14      	ite	ne
    6294:	4638      	movne	r0, r7
    6296:	2032      	moveq	r0, #50	; 0x32
    6298:	1c40      	adds	r0, r0, #1
    629a:	ebb9 010b 	subs.w	r1, r9, fp
    629e:	4281      	cmp	r1, r0
    62a0:	da0c      	bge.n	62bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2bc>
    62a2:	f88a 5000 	strb.w	r5, [sl]
    62a6:	7e30      	ldrb	r0, [r6, #24]
    62a8:	7c21      	ldrb	r1, [r4, #16]
    62aa:	4281      	cmp	r1, r0
    62ac:	f4bf af22 	bcs.w	60f4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xf4>
    62b0:	9803      	ldr	r0, [sp, #12]
    62b2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    62b6:	7845      	ldrb	r5, [r0, #1]
    62b8:	2d20      	cmp	r5, #32
    62ba:	d1c3      	bne.n	6244 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x244>
    62bc:	b00f      	add	sp, #60	; 0x3c
    62be:	2001      	movs	r0, #1
    62c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62c4:	20000f30 	.word	0x20000f30
    62c8:	20000eb0 	.word	0x20000eb0
    62cc:	20000ab0 	.word	0x20000ab0
    62d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    62d4:	b083      	sub	sp, #12
    62d6:	4691      	mov	r9, r2
    62d8:	4604      	mov	r4, r0
    62da:	460d      	mov	r5, r1
    62dc:	4698      	mov	r8, r3
    62de:	aa01      	add	r2, sp, #4
    62e0:	4669      	mov	r1, sp
    62e2:	4618      	mov	r0, r3
    62e4:	f002 f886 	bl	83f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    62e8:	f002 fd82 	bl	8df0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    62ec:	f002 f866 	bl	83bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    62f0:	4607      	mov	r7, r0
    62f2:	481e      	ldr	r0, [pc, #120]	; (636c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x36c>)
    62f4:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    62f8:	2600      	movs	r6, #0
    62fa:	2920      	cmp	r1, #32
    62fc:	d009      	beq.n	6312 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x312>
    62fe:	6882      	ldr	r2, [r0, #8]
    6300:	68c1      	ldr	r1, [r0, #12]
    6302:	6900      	ldr	r0, [r0, #16]
    6304:	1d83      	adds	r3, r0, #6
    6306:	f146 0000 	adc.w	r0, r6, #0
    630a:	18d4      	adds	r4, r2, r3
    630c:	eb41 0500 	adc.w	r5, r1, r0
    6310:	e026      	b.n	6360 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x360>
    6312:	340a      	adds	r4, #10
    6314:	f145 0500 	adc.w	r5, r5, #0
    6318:	f1b8 0f00 	cmp.w	r8, #0
    631c:	d017      	beq.n	634e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x34e>
    631e:	f003 f867 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6322:	b9a0      	cbnz	r0, 634e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x34e>
    6324:	f002 ff3c 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6328:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    632c:	bf08      	it	eq
    632e:	200d      	moveq	r0, #13
    6330:	d00b      	beq.n	634a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x34a>
    6332:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6336:	3856      	subs	r0, #86	; 0x56
    6338:	bf08      	it	eq
    633a:	201c      	moveq	r0, #28
    633c:	d005      	beq.n	634a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x34a>
    633e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6342:	389f      	subs	r0, #159	; 0x9f
    6344:	bf14      	ite	ne
    6346:	4630      	movne	r0, r6
    6348:	2032      	moveq	r0, #50	; 0x32
    634a:	1904      	adds	r4, r0, r4
    634c:	4175      	adcs	r5, r6
    634e:	f1b9 0f00 	cmp.w	r9, #0
    6352:	d105      	bne.n	6360 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x360>
    6354:	9800      	ldr	r0, [sp, #0]
    6356:	4287      	cmp	r7, r0
    6358:	d902      	bls.n	6360 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x360>
    635a:	1a38      	subs	r0, r7, r0
    635c:	1904      	adds	r4, r0, r4
    635e:	4175      	adcs	r5, r6
    6360:	b003      	add	sp, #12
    6362:	4620      	mov	r0, r4
    6364:	4629      	mov	r1, r5
    6366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    636a:	0000      	.short	0x0000
    636c:	20000f30 	.word	0x20000f30
    6370:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6374:	b081      	sub	sp, #4
    6376:	4605      	mov	r5, r0
    6378:	9802      	ldr	r0, [sp, #8]
    637a:	494a      	ldr	r1, [pc, #296]	; (64a4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x4a4>)
    637c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6380:	4408      	add	r0, r1
    6382:	2600      	movs	r6, #0
    6384:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    6388:	2020      	movs	r0, #32
    638a:	4692      	mov	sl, r2
    638c:	7010      	strb	r0, [r2, #0]
    638e:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    6392:	2c20      	cmp	r4, #32
    6394:	d036      	beq.n	6404 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x404>
    6396:	9902      	ldr	r1, [sp, #8]
    6398:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    639c:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    63a0:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    63a4:	e9d5 7300 	ldrd	r7, r3, [r5]
    63a8:	f850 8f08 	ldr.w	r8, [r0, #8]!
    63ac:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    63b0:	eb18 0202 	adds.w	r2, r8, r2
    63b4:	4171      	adcs	r1, r6
    63b6:	1aba      	subs	r2, r7, r2
    63b8:	eb73 0101 	sbcs.w	r1, r3, r1
    63bc:	d322      	bcc.n	6404 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x404>
    63be:	89e9      	ldrh	r1, [r5, #14]
    63c0:	b1c9      	cbz	r1, 63f6 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3f6>
    63c2:	89c0      	ldrh	r0, [r0, #14]
    63c4:	b9b8      	cbnz	r0, 63f6 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3f6>
    63c6:	f002 feeb 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    63ca:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    63ce:	bf08      	it	eq
    63d0:	200d      	moveq	r0, #13
    63d2:	d00b      	beq.n	63ec <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3ec>
    63d4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    63d8:	3856      	subs	r0, #86	; 0x56
    63da:	bf08      	it	eq
    63dc:	201c      	moveq	r0, #28
    63de:	d005      	beq.n	63ec <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3ec>
    63e0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    63e4:	389f      	subs	r0, #159	; 0x9f
    63e6:	bf14      	ite	ne
    63e8:	4630      	movne	r0, r6
    63ea:	2032      	moveq	r0, #50	; 0x32
    63ec:	1c41      	adds	r1, r0, #1
    63ee:	ebb7 0008 	subs.w	r0, r7, r8
    63f2:	4288      	cmp	r0, r1
    63f4:	db06      	blt.n	6404 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x404>
    63f6:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    63fa:	f88a 4000 	strb.w	r4, [sl]
    63fe:	7844      	ldrb	r4, [r0, #1]
    6400:	2c20      	cmp	r4, #32
    6402:	d1cd      	bne.n	63a0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3a0>
    6404:	9804      	ldr	r0, [sp, #16]
    6406:	f89a 1000 	ldrb.w	r1, [sl]
    640a:	2c20      	cmp	r4, #32
    640c:	7001      	strb	r1, [r0, #0]
    640e:	9f04      	ldr	r7, [sp, #16]
    6410:	9802      	ldr	r0, [sp, #8]
    6412:	d042      	beq.n	649a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x49a>
    6414:	4924      	ldr	r1, [pc, #144]	; (64a8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x4a8>)
    6416:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    641a:	9000      	str	r0, [sp, #0]
    641c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    6420:	f8d5 b000 	ldr.w	fp, [r5]
    6424:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    6428:	f108 0008 	add.w	r0, r8, #8
    642c:	eb1b 0201 	adds.w	r2, fp, r1
    6430:	eb43 0106 	adc.w	r1, r3, r6
    6434:	e9d0 a300 	ldrd	sl, r3, [r0]
    6438:	ebba 0202 	subs.w	r2, sl, r2
    643c:	eb73 0101 	sbcs.w	r1, r3, r1
    6440:	d31b      	bcc.n	647a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x47a>
    6442:	89c0      	ldrh	r0, [r0, #14]
    6444:	b348      	cbz	r0, 649a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x49a>
    6446:	89e8      	ldrh	r0, [r5, #14]
    6448:	bb38      	cbnz	r0, 649a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x49a>
    644a:	f002 fea9 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    644e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    6452:	bf08      	it	eq
    6454:	200d      	moveq	r0, #13
    6456:	d00b      	beq.n	6470 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x470>
    6458:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    645c:	3856      	subs	r0, #86	; 0x56
    645e:	bf08      	it	eq
    6460:	201c      	moveq	r0, #28
    6462:	d005      	beq.n	6470 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x470>
    6464:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6468:	389f      	subs	r0, #159	; 0x9f
    646a:	bf14      	ite	ne
    646c:	4630      	movne	r0, r6
    646e:	2032      	moveq	r0, #50	; 0x32
    6470:	1c41      	adds	r1, r0, #1
    6472:	ebba 000b 	subs.w	r0, sl, fp
    6476:	4288      	cmp	r0, r1
    6478:	da0f      	bge.n	649a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x49a>
    647a:	703c      	strb	r4, [r7, #0]
    647c:	f898 1018 	ldrb.w	r1, [r8, #24]
    6480:	7c28      	ldrb	r0, [r5, #16]
    6482:	4288      	cmp	r0, r1
    6484:	d303      	bcc.n	648e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x48e>
    6486:	b005      	add	sp, #20
    6488:	2000      	movs	r0, #0
    648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    648e:	9800      	ldr	r0, [sp, #0]
    6490:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    6494:	7844      	ldrb	r4, [r0, #1]
    6496:	2c20      	cmp	r4, #32
    6498:	d1c0      	bne.n	641c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x41c>
    649a:	b005      	add	sp, #20
    649c:	2001      	movs	r0, #1
    649e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64a2:	0000      	.short	0x0000
    64a4:	20000f30 	.word	0x20000f30
    64a8:	20000eb0 	.word	0x20000eb0
    64ac:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    64b0:	b09c      	sub	sp, #112	; 0x70
    64b2:	461e      	mov	r6, r3
    64b4:	f002 f9ee 	bl	8894 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    64b8:	4604      	mov	r4, r0
    64ba:	460d      	mov	r5, r1
    64bc:	f002 fc98 	bl	8df0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    64c0:	4680      	mov	r8, r0
    64c2:	981e      	ldr	r0, [sp, #120]	; 0x78
    64c4:	2801      	cmp	r0, #1
    64c6:	bf18      	it	ne
    64c8:	2802      	cmpne	r0, #2
    64ca:	d005      	beq.n	64d8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x4d8>
    64cc:	f640 1156 	movw	r1, #2390	; 0x956
    64d0:	f04f 0070 	mov.w	r0, #112	; 0x70
    64d4:	f003 f804 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    64d8:	49fe      	ldr	r1, [pc, #1016]	; (68d4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8d4>)
    64da:	2001      	movs	r0, #1
    64dc:	6008      	str	r0, [r1, #0]
    64de:	49fe      	ldr	r1, [pc, #1016]	; (68d8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8d8>)
    64e0:	6889      	ldr	r1, [r1, #8]
    64e2:	6008      	str	r0, [r1, #0]
    64e4:	2000      	movs	r0, #0
    64e6:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    64ea:	900c      	str	r0, [sp, #48]	; 0x30
    64ec:	1e40      	subs	r0, r0, #1
    64ee:	900d      	str	r0, [sp, #52]	; 0x34
    64f0:	48fa      	ldr	r0, [pc, #1000]	; (68dc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8dc>)
    64f2:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    64f6:	f100 0108 	add.w	r1, r0, #8
    64fa:	e9d0 6006 	ldrd	r6, r0, [r0, #24]
    64fe:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    6502:	e9cd 6012 	strd	r6, r0, [sp, #72]	; 0x48
    6506:	a80e      	add	r0, sp, #56	; 0x38
    6508:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    650c:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    6510:	f005 fd73 	bl	bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6514:	4602      	mov	r2, r0
    6516:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    651a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    651e:	4bf0      	ldr	r3, [pc, #960]	; (68e0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8e0>)
    6520:	4448      	add	r0, r9
    6522:	1c41      	adds	r1, r0, #1
    6524:	1850      	adds	r0, r2, r1
    6526:	429a      	cmp	r2, r3
    6528:	d857      	bhi.n	65da <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x5da>
    652a:	4aee      	ldr	r2, [pc, #952]	; (68e4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8e4>)
    652c:	4291      	cmp	r1, r2
    652e:	dc5c      	bgt.n	65ea <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x5ea>
    6530:	4252      	negs	r2, r2
    6532:	4291      	cmp	r1, r2
    6534:	db61      	blt.n	65fa <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x5fa>
    6536:	1c59      	adds	r1, r3, #1
    6538:	4281      	cmp	r1, r0
    653a:	bfdc      	itt	le
    653c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    6540:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    6544:	dd05      	ble.n	6552 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x552>
    6546:	2800      	cmp	r0, #0
    6548:	bfbc      	itt	lt
    654a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    654e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    6552:	9017      	str	r0, [sp, #92]	; 0x5c
    6554:	48e4      	ldr	r0, [pc, #912]	; (68e8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8e8>)
    6556:	f1b9 0f00 	cmp.w	r9, #0
    655a:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    655e:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    6562:	bf14      	ite	ne
    6564:	f04f 0b01 	movne.w	fp, #1
    6568:	f04f 0b00 	moveq.w	fp, #0
    656c:	f002 ff40 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6570:	9019      	str	r0, [sp, #100]	; 0x64
    6572:	f1bb 0f00 	cmp.w	fp, #0
    6576:	d00c      	beq.n	6592 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x592>
    6578:	49dc      	ldr	r1, [pc, #880]	; (68ec <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8ec>)
    657a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    657e:	ea6f 0000 	mvn.w	r0, r0
    6582:	ea70 0001 	orns	r0, r0, r1
    6586:	bf02      	ittt	eq
    6588:	9819      	ldreq	r0, [sp, #100]	; 0x64
    658a:	2800      	cmpeq	r0, #0
    658c:	f04f 0a01 	moveq.w	sl, #1
    6590:	d001      	beq.n	6596 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x596>
    6592:	f04f 0a00 	mov.w	sl, #0
    6596:	f002 fe03 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    659a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    659e:	bf08      	it	eq
    65a0:	200d      	moveq	r0, #13
    65a2:	d00b      	beq.n	65bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x5bc>
    65a4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    65a8:	3856      	subs	r0, #86	; 0x56
    65aa:	bf08      	it	eq
    65ac:	201c      	moveq	r0, #28
    65ae:	d005      	beq.n	65bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x5bc>
    65b0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    65b4:	389f      	subs	r0, #159	; 0x9f
    65b6:	bf14      	ite	ne
    65b8:	2000      	movne	r0, #0
    65ba:	2032      	moveq	r0, #50	; 0x32
    65bc:	2600      	movs	r6, #0
    65be:	4637      	mov	r7, r6
    65c0:	9016      	str	r0, [sp, #88]	; 0x58
    65c2:	45c8      	cmp	r8, r9
    65c4:	d937      	bls.n	6636 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x636>
    65c6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    65c8:	4ec5      	ldr	r6, [pc, #788]	; (68e0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8e0>)
    65ca:	ea6f 0c08 	mvn.w	ip, r8
    65ce:	466b      	mov	r3, sp
    65d0:	aa1a      	add	r2, sp, #104	; 0x68
    65d2:	eb01 000c 	add.w	r0, r1, ip
    65d6:	42b1      	cmp	r1, r6
    65d8:	d904      	bls.n	65e4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x5e4>
    65da:	f240 517f 	movw	r1, #1407	; 0x57f
    65de:	2070      	movs	r0, #112	; 0x70
    65e0:	f002 ff7e 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    65e4:	49bf      	ldr	r1, [pc, #764]	; (68e4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8e4>)
    65e6:	458c      	cmp	ip, r1
    65e8:	dd04      	ble.n	65f4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x5f4>
    65ea:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    65ee:	2070      	movs	r0, #112	; 0x70
    65f0:	f002 ff76 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    65f4:	49be      	ldr	r1, [pc, #760]	; (68f0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8f0>)
    65f6:	458c      	cmp	ip, r1
    65f8:	da04      	bge.n	6604 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x604>
    65fa:	f240 5181 	movw	r1, #1409	; 0x581
    65fe:	2070      	movs	r0, #112	; 0x70
    6600:	f002 ff6e 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6604:	49bb      	ldr	r1, [pc, #748]	; (68f4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8f4>)
    6606:	4281      	cmp	r1, r0
    6608:	bfdc      	itt	le
    660a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    660e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    6612:	dd05      	ble.n	6620 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x620>
    6614:	2800      	cmp	r0, #0
    6616:	bfbc      	itt	lt
    6618:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    661c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    6620:	4619      	mov	r1, r3
    6622:	f001 fee7 	bl	83f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    6626:	9800      	ldr	r0, [sp, #0]
    6628:	990e      	ldr	r1, [sp, #56]	; 0x38
    662a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    662e:	9000      	str	r0, [sp, #0]
    6630:	1a08      	subs	r0, r1, r0
    6632:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    6636:	f1ba 0f00 	cmp.w	sl, #0
    663a:	bf18      	it	ne
    663c:	9f16      	ldrne	r7, [sp, #88]	; 0x58
    663e:	d104      	bne.n	664a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x64a>
    6640:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    6644:	2800      	cmp	r0, #0
    6646:	bf18      	it	ne
    6648:	2702      	movne	r7, #2
    664a:	43e0      	mvns	r0, r4
    664c:	ea70 0005 	orns	r0, r0, r5
    6650:	d022      	beq.n	6698 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x698>
    6652:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    6656:	1a22      	subs	r2, r4, r0
    6658:	eb75 0201 	sbcs.w	r2, r5, r1
    665c:	d20c      	bcs.n	6678 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x678>
    665e:	1b02      	subs	r2, r0, r4
    6660:	eb61 0105 	sbc.w	r1, r1, r5
    6664:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    6668:	f171 0100 	sbcs.w	r1, r1, #0
    666c:	d311      	bcc.n	6692 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x692>
    666e:	f640 1195 	movw	r1, #2453	; 0x995
    6672:	2070      	movs	r0, #112	; 0x70
    6674:	f002 ff34 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6678:	1a22      	subs	r2, r4, r0
    667a:	eb65 0101 	sbc.w	r1, r5, r1
    667e:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    6682:	f171 0100 	sbcs.w	r1, r1, #0
    6686:	d304      	bcc.n	6692 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x692>
    6688:	f640 1199 	movw	r1, #2457	; 0x999
    668c:	2070      	movs	r0, #112	; 0x70
    668e:	f002 ff27 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6692:	1b00      	subs	r0, r0, r4
    6694:	2801      	cmp	r0, #1
    6696:	da03      	bge.n	66a0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6a0>
    6698:	981c      	ldr	r0, [sp, #112]	; 0x70
    669a:	901a      	str	r0, [sp, #104]	; 0x68
    669c:	2003      	movs	r0, #3
    669e:	e00d      	b.n	66bc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6bc>
    66a0:	f1ba 0f00 	cmp.w	sl, #0
    66a4:	d008      	beq.n	66b8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6b8>
    66a6:	4891      	ldr	r0, [pc, #580]	; (68ec <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8ec>)
    66a8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    66ac:	b120      	cbz	r0, 66b8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6b8>
    66ae:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    66b2:	1c07      	adds	r7, r0, #0
    66b4:	bf18      	it	ne
    66b6:	2702      	movne	r7, #2
    66b8:	2000      	movs	r0, #0
    66ba:	941a      	str	r4, [sp, #104]	; 0x68
    66bc:	4407      	add	r7, r0
    66be:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    66c2:	1b80      	subs	r0, r0, r6
    66c4:	f162 0100 	sbc.w	r1, r2, #0
    66c8:	1e42      	subs	r2, r0, #1
    66ca:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    66ce:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
    66d2:	ebb2 0c0c 	subs.w	ip, r2, ip
    66d6:	45bc      	cmp	ip, r7
    66d8:	db08      	blt.n	66ec <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6ec>
    66da:	b3a6      	cbz	r6, 6746 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x746>
    66dc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    66e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    66e4:	44b4      	add	ip, r6
    66e6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    66ea:	e02c      	b.n	6746 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x746>
    66ec:	b12e      	cbz	r6, 66fa <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6fa>
    66ee:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    66f2:	b930      	cbnz	r0, 6702 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x702>
    66f4:	f002 fb72 	bl	8ddc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    66f8:	b118      	cbz	r0, 6702 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x702>
    66fa:	f1ba 0f00 	cmp.w	sl, #0
    66fe:	d114      	bne.n	672a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x72a>
    6700:	e00c      	b.n	671c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x71c>
    6702:	f1ba 0f00 	cmp.w	sl, #0
    6706:	d104      	bne.n	6712 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x712>
    6708:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    670c:	2800      	cmp	r0, #0
    670e:	bf18      	it	ne
    6710:	1ebf      	subne	r7, r7, #2
    6712:	2600      	movs	r6, #0
    6714:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
    6718:	46b0      	mov	r8, r6
    671a:	e006      	b.n	672a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x72a>
    671c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    6720:	b118      	cbz	r0, 672a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x72a>
    6722:	2000      	movs	r0, #0
    6724:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    6728:	1ebf      	subs	r7, r7, #2
    672a:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    672e:	1b80      	subs	r0, r0, r6
    6730:	f162 0100 	sbc.w	r1, r2, #0
    6734:	1e42      	subs	r2, r0, #1
    6736:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    673a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
    673e:	ebb2 0c0c 	subs.w	ip, r2, ip
    6742:	45bc      	cmp	ip, r7
    6744:	db7e      	blt.n	6844 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x844>
    6746:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
    674a:	f1bc 0f00 	cmp.w	ip, #0
    674e:	d111      	bne.n	6774 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x774>
    6750:	f8df c198 	ldr.w	ip, [pc, #408]	; 68ec <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8ec>
    6754:	e9dc 6c0e 	ldrd	r6, ip, [ip, #56]	; 0x38
    6758:	43f7      	mvns	r7, r6
    675a:	ea77 070c 	orns	r7, r7, ip
    675e:	d009      	beq.n	6774 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x774>
    6760:	1b86      	subs	r6, r0, r6
    6762:	9816      	ldr	r0, [sp, #88]	; 0x58
    6764:	eb61 010c 	sbc.w	r1, r1, ip
    6768:	1a30      	subs	r0, r6, r0
    676a:	f171 0000 	sbcs.w	r0, r1, #0
    676e:	bf38      	it	cc
    6770:	2000      	movcc	r0, #0
    6772:	d300      	bcc.n	6776 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x776>
    6774:	2001      	movs	r0, #1
    6776:	ea3b 0000 	bics.w	r0, fp, r0
    677a:	d163      	bne.n	6844 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x844>
    677c:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    6780:	e9cd 0107 	strd	r0, r1, [sp, #28]
    6784:	981e      	ldr	r0, [sp, #120]	; 0x78
    6786:	4616      	mov	r6, r2
    6788:	e9cd a018 	strd	sl, r0, [sp, #96]	; 0x60
    678c:	461f      	mov	r7, r3
    678e:	f04f 0a00 	mov.w	sl, #0
    6792:	f002 fd05 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6796:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    679a:	bf08      	it	eq
    679c:	200d      	moveq	r0, #13
    679e:	d00b      	beq.n	67b8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x7b8>
    67a0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    67a4:	3856      	subs	r0, #86	; 0x56
    67a6:	bf08      	it	eq
    67a8:	201c      	moveq	r0, #28
    67aa:	d005      	beq.n	67b8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x7b8>
    67ac:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    67b0:	389f      	subs	r0, #159	; 0x9f
    67b2:	bf14      	ite	ne
    67b4:	4650      	movne	r0, sl
    67b6:	2032      	moveq	r0, #50	; 0x32
    67b8:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    67bc:	300b      	adds	r0, #11
    67be:	1ab2      	subs	r2, r6, r2
    67c0:	eb67 0303 	sbc.w	r3, r7, r3
    67c4:	1a10      	subs	r0, r2, r0
    67c6:	f173 0000 	sbcs.w	r0, r3, #0
    67ca:	d229      	bcs.n	6820 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x820>
    67cc:	9819      	ldr	r0, [sp, #100]	; 0x64
    67ce:	2801      	cmp	r0, #1
    67d0:	d002      	beq.n	67d8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x7d8>
    67d2:	9818      	ldr	r0, [sp, #96]	; 0x60
    67d4:	b148      	cbz	r0, 67ea <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x7ea>
    67d6:	e016      	b.n	6806 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x806>
    67d8:	43e0      	mvns	r0, r4
    67da:	ea70 0005 	orns	r0, r0, r5
    67de:	d126      	bne.n	682e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x82e>
    67e0:	f640 01d7 	movw	r1, #2263	; 0x8d7
    67e4:	2070      	movs	r0, #112	; 0x70
    67e6:	f002 fe7b 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67ea:	43e0      	mvns	r0, r4
    67ec:	ea70 0005 	orns	r0, r0, r5
    67f0:	d009      	beq.n	6806 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x806>
    67f2:	d01c      	beq.n	682e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x82e>
    67f4:	1ba0      	subs	r0, r4, r6
    67f6:	eb65 0107 	sbc.w	r1, r5, r7
    67fa:	2300      	movs	r3, #0
    67fc:	f1d0 0204 	rsbs	r2, r0, #4
    6800:	eb73 0201 	sbcs.w	r2, r3, r1
    6804:	da06      	bge.n	6814 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x814>
    6806:	4634      	mov	r4, r6
    6808:	463d      	mov	r5, r7
    680a:	4620      	mov	r0, r4
    680c:	4629      	mov	r1, r5
    680e:	f001 ff21 	bl	8654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    6812:	e00c      	b.n	682e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x82e>
    6814:	2200      	movs	r2, #0
    6816:	1a10      	subs	r0, r2, r0
    6818:	eb72 0001 	sbcs.w	r0, r2, r1
    681c:	db12      	blt.n	6844 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x844>
    681e:	e006      	b.n	682e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x82e>
    6820:	4634      	mov	r4, r6
    6822:	463d      	mov	r5, r7
    6824:	4620      	mov	r0, r4
    6826:	4629      	mov	r1, r5
    6828:	f001 ff14 	bl	8654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    682c:	46da      	mov	sl, fp
    682e:	4626      	mov	r6, r4
    6830:	43f1      	mvns	r1, r6
    6832:	ea71 0005 	orns	r0, r1, r5
    6836:	d06f      	beq.n	6918 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x918>
    6838:	990e      	ldr	r1, [sp, #56]	; 0x38
    683a:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    683e:	2700      	movs	r7, #0
    6840:	1a0b      	subs	r3, r1, r0
    6842:	e000      	b.n	6846 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x846>
    6844:	e06d      	b.n	6922 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x922>
    6846:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    684a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    684e:	eb11 010c 	adds.w	r1, r1, ip
    6852:	1a08      	subs	r0, r1, r0
    6854:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6858:	2b01      	cmp	r3, #1
    685a:	d362      	bcc.n	6922 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x922>
    685c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    6860:	bf98      	it	ls
    6862:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    6866:	d85c      	bhi.n	6922 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x922>
    6868:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    686c:	f005 fbc5 	bl	bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6870:	9917      	ldr	r1, [sp, #92]	; 0x5c
    6872:	4a1c      	ldr	r2, [pc, #112]	; (68e4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8e4>)
    6874:	1a0c      	subs	r4, r1, r0
    6876:	1aa2      	subs	r2, r4, r2
    6878:	f177 0200 	sbcs.w	r2, r7, #0
    687c:	d316      	bcc.n	68ac <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8ac>
    687e:	4b19      	ldr	r3, [pc, #100]	; (68e4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8e4>)
    6880:	1a42      	subs	r2, r0, r1
    6882:	1ad3      	subs	r3, r2, r3
    6884:	f177 0300 	sbcs.w	r3, r7, #0
    6888:	d310      	bcc.n	68ac <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8ac>
    688a:	4b15      	ldr	r3, [pc, #84]	; (68e0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8e0>)
    688c:	42a3      	cmp	r3, r4
    688e:	bf3e      	ittt	cc
    6890:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    6894:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    6898:	1844      	addcc	r4, r0, r1
    689a:	d307      	bcc.n	68ac <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8ac>
    689c:	4293      	cmp	r3, r2
    689e:	d244      	bcs.n	692a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x92a>
    68a0:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    68a4:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    68a8:	4408      	add	r0, r1
    68aa:	4244      	negs	r4, r0
    68ac:	4d0f      	ldr	r5, [pc, #60]	; (68ec <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8ec>)
    68ae:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    68b2:	b378      	cbz	r0, 6914 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x914>
    68b4:	981e      	ldr	r0, [sp, #120]	; 0x78
    68b6:	2801      	cmp	r0, #1
    68b8:	d005      	beq.n	68c6 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8c6>
    68ba:	2002      	movs	r0, #2
    68bc:	f002 f956 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    68c0:	2001      	movs	r0, #1
    68c2:	f002 f953 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    68c6:	45c1      	cmp	r9, r8
    68c8:	d240      	bcs.n	694c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x94c>
    68ca:	eba4 0108 	sub.w	r1, r4, r8
    68ce:	f04f 0002 	mov.w	r0, #2
    68d2:	e011      	b.n	68f8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8f8>
    68d4:	40000508 	.word	0x40000508
    68d8:	20000124 	.word	0x20000124
    68dc:	20000ab0 	.word	0x20000ab0
    68e0:	1e847fff 	.word	0x1e847fff
    68e4:	0f424000 	.word	0x0f424000
    68e8:	20000eb0 	.word	0x20000eb0
    68ec:	20000f30 	.word	0x20000f30
    68f0:	f0bdc000 	.word	0xf0bdc000
    68f4:	1e848000 	.word	0x1e848000
    68f8:	f002 f87e 	bl	89f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    68fc:	b3a8      	cbz	r0, 696a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x96a>
    68fe:	f1b9 0f00 	cmp.w	r9, #0
    6902:	bf1c      	itt	ne
    6904:	eba4 0109 	subne.w	r1, r4, r9
    6908:	2001      	movne	r0, #1
    690a:	d037      	beq.n	697c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x97c>
    690c:	f002 f874 	bl	89f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    6910:	b358      	cbz	r0, 696a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x96a>
    6912:	e033      	b.n	697c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x97c>
    6914:	e00e      	b.n	6934 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x934>
    6916:	e7ff      	b.n	6918 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x918>
    6918:	f640 2103 	movw	r1, #2563	; 0xa03
    691c:	2070      	movs	r0, #112	; 0x70
    691e:	f002 fddf 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6922:	b020      	add	sp, #128	; 0x80
    6924:	2000      	movs	r0, #0
    6926:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    692a:	f640 21d7 	movw	r1, #2775	; 0xad7
    692e:	2070      	movs	r0, #112	; 0x70
    6930:	f002 fdd6 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6934:	45c1      	cmp	r9, r8
    6936:	bf34      	ite	cc
    6938:	4640      	movcc	r0, r8
    693a:	4648      	movcs	r0, r9
    693c:	301e      	adds	r0, #30
    693e:	42a0      	cmp	r0, r4
    6940:	dbb8      	blt.n	68b4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x8b4>
    6942:	f640 2117 	movw	r1, #2583	; 0xa17
    6946:	2070      	movs	r0, #112	; 0x70
    6948:	f002 fdca 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    694c:	d90e      	bls.n	696c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x96c>
    694e:	eba4 0109 	sub.w	r1, r4, r9
    6952:	2001      	movs	r0, #1
    6954:	f002 f850 	bl	89f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    6958:	b138      	cbz	r0, 696a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x96a>
    695a:	f1b8 0f00 	cmp.w	r8, #0
    695e:	bf1c      	itt	ne
    6960:	eba4 0108 	subne.w	r1, r4, r8
    6964:	2002      	movne	r0, #2
    6966:	d009      	beq.n	697c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x97c>
    6968:	e7d0      	b.n	690c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x90c>
    696a:	e038      	b.n	69de <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x9de>
    696c:	ea58 0009 	orrs.w	r0, r8, r9
    6970:	d004      	beq.n	697c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x97c>
    6972:	f640 113a 	movw	r1, #2362	; 0x93a
    6976:	2070      	movs	r0, #112	; 0x70
    6978:	f002 fdb2 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    697c:	4621      	mov	r1, r4
    697e:	2000      	movs	r0, #0
    6980:	f002 f83a 	bl	89f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    6984:	b358      	cbz	r0, 69de <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x9de>
    6986:	f04f 0801 	mov.w	r8, #1
    698a:	f1bb 0f00 	cmp.w	fp, #0
    698e:	bf04      	itt	eq
    6990:	f895 0040 	ldrbeq.w	r0, [r5, #64]	; 0x40
    6994:	2800      	cmpeq	r0, #0
    6996:	d002      	beq.n	699e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x99e>
    6998:	f1ba 0f00 	cmp.w	sl, #0
    699c:	d029      	beq.n	69f2 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x9f2>
    699e:	e9d5 100e 	ldrd	r1, r0, [r5, #56]	; 0x38
    69a2:	43c9      	mvns	r1, r1
    69a4:	ea71 0000 	orns	r0, r1, r0
    69a8:	d006      	beq.n	69b8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x9b8>
    69aa:	f002 fbff 	bl	91ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    69ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    69b2:	4601      	mov	r1, r0
    69b4:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    69b8:	f1ba 0f00 	cmp.w	sl, #0
    69bc:	d01f      	beq.n	69fe <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x9fe>
    69be:	9816      	ldr	r0, [sp, #88]	; 0x58
    69c0:	1a30      	subs	r0, r6, r0
    69c2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    69c6:	f04f 0005 	mov.w	r0, #5
    69ca:	f002 f815 	bl	89f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    69ce:	b370      	cbz	r0, 6a2e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa2e>
    69d0:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
    69d4:	2800      	cmp	r0, #0
    69d6:	bf08      	it	eq
    69d8:	f885 8040 	strbeq.w	r8, [r5, #64]	; 0x40
    69dc:	e017      	b.n	6a0e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa0e>
    69de:	2002      	movs	r0, #2
    69e0:	f002 f8c4 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    69e4:	2001      	movs	r0, #1
    69e6:	f002 f8c1 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    69ea:	b020      	add	sp, #128	; 0x80
    69ec:	2000      	movs	r0, #0
    69ee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    69f2:	e9d5 100e 	ldrd	r1, r0, [r5, #56]	; 0x38
    69f6:	43c9      	mvns	r1, r1
    69f8:	ea71 0000 	orns	r0, r1, r0
    69fc:	d012      	beq.n	6a24 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa24>
    69fe:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
    6a02:	b120      	cbz	r0, 6a0e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa0e>
    6a04:	2005      	movs	r0, #5
    6a06:	f002 f8b1 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6a0a:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    6a0e:	eba4 0009 	sub.w	r0, r4, r9
    6a12:	f1a0 0119 	sub.w	r1, r0, #25
    6a16:	2900      	cmp	r1, #0
    6a18:	dc0f      	bgt.n	6a3a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa3a>
    6a1a:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    6a1e:	2070      	movs	r0, #112	; 0x70
    6a20:	f002 fd5e 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a24:	f002 fbde 	bl	91e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    6a28:	f001 ffc4 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6a2c:	e7c2      	b.n	69b4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x9b4>
    6a2e:	e7ff      	b.n	6a30 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa30>
    6a30:	f240 21e6 	movw	r1, #742	; 0x2e6
    6a34:	2070      	movs	r0, #112	; 0x70
    6a36:	f002 fd53 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a3a:	2003      	movs	r0, #3
    6a3c:	f001 ffdc 	bl	89f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    6a40:	b318      	cbz	r0, 6a8a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa8a>
    6a42:	4814      	ldr	r0, [pc, #80]	; (6a94 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa94>)
    6a44:	6880      	ldr	r0, [r0, #8]
    6a46:	6007      	str	r7, [r0, #0]
    6a48:	4813      	ldr	r0, [pc, #76]	; (6a98 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa98>)
    6a4a:	6007      	str	r7, [r0, #0]
    6a4c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    6a50:	4812      	ldr	r0, [pc, #72]	; (6a9c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xa9c>)
    6a52:	e898 10fe 	ldmia.w	r8, {r1, r2, r3, r4, r5, r6, r7, ip}
    6a56:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    6a5a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    6a5e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    6a62:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
    6a66:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    6a6a:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
    6a6e:	f8c0 7098 	str.w	r7, [r0, #152]	; 0x98
    6a72:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    6a76:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    6a7a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    6a7e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    6a82:	b020      	add	sp, #128	; 0x80
    6a84:	2001      	movs	r0, #1
    6a86:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6a8a:	f640 2148 	movw	r1, #2632	; 0xa48
    6a8e:	2070      	movs	r0, #112	; 0x70
    6a90:	f002 fd26 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a94:	20000124 	.word	0x20000124
    6a98:	40000508 	.word	0x40000508
    6a9c:	20000eb0 	.word	0x20000eb0
    6aa0:	b570      	push	{r4, r5, r6, lr}
    6aa2:	4d1d      	ldr	r5, [pc, #116]	; (6b18 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb18>)
    6aa4:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    6aa8:	2820      	cmp	r0, #32
    6aaa:	bf18      	it	ne
    6aac:	bd70      	popne	{r4, r5, r6, pc}
    6aae:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    6ab2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    6ab6:	4428      	add	r0, r5
    6ab8:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    6abc:	2c20      	cmp	r4, #32
    6abe:	d026      	beq.n	6b0e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb0e>
    6ac0:	4b16      	ldr	r3, [pc, #88]	; (6b1c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb1c>)
    6ac2:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    6ac6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    6aca:	7849      	ldrb	r1, [r1, #1]
    6acc:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    6ad0:	20ff      	movs	r0, #255	; 0xff
    6ad2:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    6ad6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    6ada:	4621      	mov	r1, r4
    6adc:	2002      	movs	r0, #2
    6ade:	f000 f88b 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    6ae2:	2000      	movs	r0, #0
    6ae4:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    6ae8:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    6aec:	480c      	ldr	r0, [pc, #48]	; (6b20 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb20>)
    6aee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6af2:	7e00      	ldrb	r0, [r0, #24]
    6af4:	2800      	cmp	r0, #0
    6af6:	bf08      	it	eq
    6af8:	f002 fe5a 	bleq	97b0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    6afc:	2000      	movs	r0, #0
    6afe:	4909      	ldr	r1, [pc, #36]	; (6b24 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb24>)
    6b00:	6849      	ldr	r1, [r1, #4]
    6b02:	2900      	cmp	r1, #0
    6b04:	bf08      	it	eq
    6b06:	bd70      	popeq	{r4, r5, r6, pc}
    6b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b0c:	4708      	bx	r1
    6b0e:	f240 311d 	movw	r1, #797	; 0x31d
    6b12:	2070      	movs	r0, #112	; 0x70
    6b14:	f002 fce4 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6b18:	20000f30 	.word	0x20000f30
    6b1c:	20000eb0 	.word	0x20000eb0
    6b20:	20000ab0 	.word	0x20000ab0
    6b24:	20000124 	.word	0x20000124
    6b28:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6b2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 6be8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbe8>
    6b30:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    6b34:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    6b38:	4440      	add	r0, r8
    6b3a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    6b3e:	2c20      	cmp	r4, #32
    6b40:	bf08      	it	eq
    6b42:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6b46:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 6bec <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbec>
    6b4a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 6bf0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf0>
    6b4e:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    6b52:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    6b56:	2607      	movs	r6, #7
    6b58:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    6b5c:	2801      	cmp	r0, #1
    6b5e:	d00e      	beq.n	6b7e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb7e>
    6b60:	2804      	cmp	r0, #4
    6b62:	bf08      	it	eq
    6b64:	2602      	moveq	r6, #2
    6b66:	d00a      	beq.n	6b7e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb7e>
    6b68:	2805      	cmp	r0, #5
    6b6a:	bf0c      	ite	eq
    6b6c:	2603      	moveq	r6, #3
    6b6e:	2806      	cmpne	r0, #6
    6b70:	d005      	beq.n	6b7e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb7e>
    6b72:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    6b76:	f04f 0070 	mov.w	r0, #112	; 0x70
    6b7a:	f002 fcb1 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6b7e:	f1bb 0f00 	cmp.w	fp, #0
    6b82:	bf18      	it	ne
    6b84:	f3af 8000 	nopne.w
    6b88:	f3ef 8010 	mrs	r0, PRIMASK
    6b8c:	b672      	cpsid	i
    6b8e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    6b92:	784a      	ldrb	r2, [r1, #1]
    6b94:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    6b98:	4441      	add	r1, r8
    6b9a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    6b9e:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    6ba2:	42a2      	cmp	r2, r4
    6ba4:	bf04      	itt	eq
    6ba6:	2220      	moveq	r2, #32
    6ba8:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    6bac:	b1a8      	cbz	r0, 6bda <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbda>
    6bae:	462a      	mov	r2, r5
    6bb0:	4621      	mov	r1, r4
    6bb2:	2001      	movs	r0, #1
    6bb4:	f000 f820 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    6bb8:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    6bbc:	e9d1 2000 	ldrd	r2, r0, [r1]
    6bc0:	4631      	mov	r1, r6
    6bc2:	4790      	blx	r2
    6bc4:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    6bc8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    6bcc:	4440      	add	r0, r8
    6bce:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    6bd2:	2c20      	cmp	r4, #32
    6bd4:	d1bd      	bne.n	6b52 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xb52>
    6bd6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6bda:	4806      	ldr	r0, [pc, #24]	; (6bf4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf4>)
    6bdc:	2800      	cmp	r0, #0
    6bde:	bf18      	it	ne
    6be0:	f3af 8000 	nopne.w
    6be4:	b662      	cpsie	i
    6be6:	e7e2      	b.n	6bae <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbae>
    6be8:	20000f30 	.word	0x20000f30
    6bec:	00000000 	.word	0x00000000
    6bf0:	20000eb0 	.word	0x20000eb0
    6bf4:	00000000 	.word	0x00000000
    6bf8:	f8df c058 	ldr.w	ip, [pc, #88]	; 6c54 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc54>
    6bfc:	b510      	push	{r4, lr}
    6bfe:	2300      	movs	r3, #0
    6c00:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    6c04:	2807      	cmp	r0, #7
    6c06:	d21f      	bcs.n	6c48 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc48>
    6c08:	e8df f000 	tbb	[pc, r0]
    6c0c:	05050505 	.word	0x05050505
    6c10:	00040404 	.word	0x00040404
    6c14:	2301      	movs	r3, #1
    6c16:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	bf08      	it	eq
    6c1e:	bd10      	popeq	{r4, pc}
    6c20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6c24:	480c      	ldr	r0, [pc, #48]	; (6c58 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc58>)
    6c26:	4402      	add	r2, r0
    6c28:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    6c2c:	2820      	cmp	r0, #32
    6c2e:	bf0e      	itee	eq
    6c30:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    6c34:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    6c38:	7041      	strbne	r1, [r0, #1]
    6c3a:	2020      	movs	r0, #32
    6c3c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    6c40:	7058      	strb	r0, [r3, #1]
    6c42:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    6c46:	bd10      	pop	{r4, pc}
    6c48:	f44f 7117 	mov.w	r1, #604	; 0x25c
    6c4c:	2070      	movs	r0, #112	; 0x70
    6c4e:	f002 fc47 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6c52:	0000      	.short	0x0000
    6c54:	20000eb0 	.word	0x20000eb0
    6c58:	20000f30 	.word	0x20000f30
    6c5c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6c60:	460f      	mov	r7, r1
    6c62:	4680      	mov	r8, r0
    6c64:	f8df b154 	ldr.w	fp, [pc, #340]	; 6dbc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xdbc>
    6c68:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    6c6c:	4458      	add	r0, fp
    6c6e:	f1b8 0f01 	cmp.w	r8, #1
    6c72:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    6c76:	4625      	mov	r5, r4
    6c78:	bf18      	it	ne
    6c7a:	f1b8 0f02 	cmpne.w	r8, #2
    6c7e:	d005      	beq.n	6c8c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc8c>
    6c80:	f640 217e 	movw	r1, #2686	; 0xa7e
    6c84:	f04f 0070 	mov.w	r0, #112	; 0x70
    6c88:	f002 fc2a 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6c8c:	2d20      	cmp	r5, #32
    6c8e:	d041      	beq.n	6d14 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd14>
    6c90:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    6c94:	2600      	movs	r6, #0
    6c96:	2800      	cmp	r0, #0
    6c98:	bf08      	it	eq
    6c9a:	2602      	moveq	r6, #2
    6c9c:	f001 fcd4 	bl	8648 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    6ca0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 6dc0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xdc0>
    6ca4:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    6ca8:	6899      	ldr	r1, [r3, #8]
    6caa:	691b      	ldr	r3, [r3, #16]
    6cac:	1a0a      	subs	r2, r1, r0
    6cae:	18c9      	adds	r1, r1, r3
    6cb0:	1a09      	subs	r1, r1, r0
    6cb2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6cb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6cba:	4296      	cmp	r6, r2
    6cbc:	bf99      	ittee	ls
    6cbe:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    6cc2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    6cc6:	4a3f      	ldrhi	r2, [pc, #252]	; (6dc4 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xdc4>)
    6cc8:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    6ccc:	d920      	bls.n	6d10 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd10>
    6cce:	4622      	mov	r2, r4
    6cd0:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    6cd4:	784c      	ldrb	r4, [r1, #1]
    6cd6:	2c20      	cmp	r4, #32
    6cd8:	d012      	beq.n	6d00 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd00>
    6cda:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    6cde:	6899      	ldr	r1, [r3, #8]
    6ce0:	691b      	ldr	r3, [r3, #16]
    6ce2:	ebb1 0c00 	subs.w	ip, r1, r0
    6ce6:	18c9      	adds	r1, r1, r3
    6ce8:	1a09      	subs	r1, r1, r0
    6cea:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    6cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6cf2:	4566      	cmp	r6, ip
    6cf4:	bf9c      	itt	ls
    6cf6:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    6cfa:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    6cfe:	d8e6      	bhi.n	6cce <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xcce>
    6d00:	2a20      	cmp	r2, #32
    6d02:	d005      	beq.n	6d10 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd10>
    6d04:	463b      	mov	r3, r7
    6d06:	2120      	movs	r1, #32
    6d08:	2004      	movs	r0, #4
    6d0a:	f7ff f909 	bl	5f20 <MPSL_IRQ_RADIO_Handler+0x3c>
    6d0e:	4604      	mov	r4, r0
    6d10:	42ac      	cmp	r4, r5
    6d12:	d113      	bne.n	6d3c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd3c>
    6d14:	482c      	ldr	r0, [pc, #176]	; (6dc8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xdc8>)
    6d16:	2800      	cmp	r0, #0
    6d18:	bf18      	it	ne
    6d1a:	f3af 8000 	nopne.w
    6d1e:	f001 fe49 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6d22:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    6d26:	2a20      	cmp	r2, #32
    6d28:	d00b      	beq.n	6d42 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd42>
    6d2a:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    6d2e:	1c84      	adds	r4, r0, #2
    6d30:	f141 0c00 	adc.w	ip, r1, #0
    6d34:	1b1b      	subs	r3, r3, r4
    6d36:	eb72 020c 	sbcs.w	r2, r2, ip
    6d3a:	d202      	bcs.n	6d42 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd42>
    6d3c:	2000      	movs	r0, #0
    6d3e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6d42:	2d20      	cmp	r5, #32
    6d44:	d013      	beq.n	6d6e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd6e>
    6d46:	462b      	mov	r3, r5
    6d48:	4642      	mov	r2, r8
    6d4a:	f7ff fbaf 	bl	64ac <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x4ac>
    6d4e:	2800      	cmp	r0, #0
    6d50:	bf1e      	ittt	ne
    6d52:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    6d56:	2002      	movne	r0, #2
    6d58:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6d5c:	463b      	mov	r3, r7
    6d5e:	462a      	mov	r2, r5
    6d60:	2120      	movs	r1, #32
    6d62:	2004      	movs	r0, #4
    6d64:	f7ff f8dc 	bl	5f20 <MPSL_IRQ_RADIO_Handler+0x3c>
    6d68:	2000      	movs	r0, #0
    6d6a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6d6e:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    6d72:	43c0      	mvns	r0, r0
    6d74:	ea70 0001 	orns	r0, r0, r1
    6d78:	d005      	beq.n	6d86 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd86>
    6d7a:	f002 fa17 	bl	91ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    6d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d82:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    6d86:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    6d8a:	b128      	cbz	r0, 6d98 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xd98>
    6d8c:	2005      	movs	r0, #5
    6d8e:	f001 feed 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d92:	2000      	movs	r0, #0
    6d94:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    6d98:	2004      	movs	r0, #4
    6d9a:	f001 fee7 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d9e:	f001 ff4d 	bl	8c3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    6da2:	490a      	ldr	r1, [pc, #40]	; (6dcc <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xdcc>)
    6da4:	2020      	movs	r0, #32
    6da6:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    6daa:	6889      	ldr	r1, [r1, #8]
    6dac:	2000      	movs	r0, #0
    6dae:	6008      	str	r0, [r1, #0]
    6db0:	4907      	ldr	r1, [pc, #28]	; (6dd0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xdd0>)
    6db2:	6008      	str	r0, [r1, #0]
    6db4:	2001      	movs	r0, #1
    6db6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6dba:	0000      	.short	0x0000
    6dbc:	20000f30 	.word	0x20000f30
    6dc0:	20000ab0 	.word	0x20000ab0
    6dc4:	20000eb0 	.word	0x20000eb0
    6dc8:	00000000 	.word	0x00000000
    6dcc:	20000124 	.word	0x20000124
    6dd0:	40000508 	.word	0x40000508

00006dd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    6dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6dd8:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 6fa0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    6ddc:	4606      	mov	r6, r0
    6dde:	b08f      	sub	sp, #60	; 0x3c
    6de0:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    6de4:	468a      	mov	sl, r1
    6de6:	2820      	cmp	r0, #32
    6de8:	d061      	beq.n	6eae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    6dea:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    6dee:	f10b 0408 	add.w	r4, fp, #8
    6df2:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    6df6:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    6dfa:	2120      	movs	r1, #32
    6dfc:	f88d 1018 	strb.w	r1, [sp, #24]
    6e00:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    6e04:	f8db 2008 	ldr.w	r2, [fp, #8]
    6e08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6e0c:	4459      	add	r1, fp
    6e0e:	2700      	movs	r7, #0
    6e10:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    6e14:	f8db 1010 	ldr.w	r1, [fp, #16]
    6e18:	1851      	adds	r1, r2, r1
    6e1a:	910a      	str	r1, [sp, #40]	; 0x28
    6e1c:	f8db 0000 	ldr.w	r0, [fp]
    6e20:	aa09      	add	r2, sp, #36	; 0x24
    6e22:	4430      	add	r0, r6
    6e24:	a907      	add	r1, sp, #28
    6e26:	f001 fae5 	bl	83f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    6e2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
    6e2e:	9907      	ldr	r1, [sp, #28]
    6e30:	f8d9 2008 	ldr.w	r2, [r9, #8]
    6e34:	1840      	adds	r0, r0, r1
    6e36:	1810      	adds	r0, r2, r0
    6e38:	2e67      	cmp	r6, #103	; 0x67
    6e3a:	d33d      	bcc.n	6eb8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    6e3c:	4959      	ldr	r1, [pc, #356]	; (6fa4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    6e3e:	2200      	movs	r2, #0
    6e40:	1b89      	subs	r1, r1, r6
    6e42:	eb72 0107 	sbcs.w	r1, r2, r7
    6e46:	d337      	bcc.n	6eb8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    6e48:	6821      	ldr	r1, [r4, #0]
    6e4a:	4694      	mov	ip, r2
    6e4c:	1a40      	subs	r0, r0, r1
    6e4e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    6e52:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    6e56:	eb7c 010c 	sbcs.w	r1, ip, ip
    6e5a:	d32d      	bcc.n	6eb8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    6e5c:	60a0      	str	r0, [r4, #8]
    6e5e:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    6e62:	f884 a010 	strb.w	sl, [r4, #16]
    6e66:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    6e6a:	f10d 0b18 	add.w	fp, sp, #24
    6e6e:	2d20      	cmp	r5, #32
    6e70:	d055      	beq.n	6f1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    6e72:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    6e76:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    6e7a:	9001      	str	r0, [sp, #4]
    6e7c:	484a      	ldr	r0, [pc, #296]	; (6fa8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    6e7e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6e82:	f8d4 a000 	ldr.w	sl, [r4]
    6e86:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    6e8a:	f108 0008 	add.w	r0, r8, #8
    6e8e:	eb1a 0201 	adds.w	r2, sl, r1
    6e92:	eb43 0107 	adc.w	r1, r3, r7
    6e96:	e9d0 9300 	ldrd	r9, r3, [r0]
    6e9a:	ebb9 0202 	subs.w	r2, r9, r2
    6e9e:	eb73 0101 	sbcs.w	r1, r3, r1
    6ea2:	d325      	bcc.n	6ef0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    6ea4:	89c0      	ldrh	r0, [r0, #14]
    6ea6:	b398      	cbz	r0, 6f10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    6ea8:	89e0      	ldrh	r0, [r4, #14]
    6eaa:	b148      	cbz	r0, 6ec0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    6eac:	e037      	b.n	6f1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    6eae:	f640 3135 	movw	r1, #2869	; 0xb35
    6eb2:	2070      	movs	r0, #112	; 0x70
    6eb4:	f002 fb14 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6eb8:	b00f      	add	sp, #60	; 0x3c
    6eba:	2001      	movs	r0, #1
    6ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ec0:	f002 f96e 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    6ec4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    6ec8:	bf08      	it	eq
    6eca:	200d      	moveq	r0, #13
    6ecc:	d00b      	beq.n	6ee6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    6ece:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6ed2:	3856      	subs	r0, #86	; 0x56
    6ed4:	bf08      	it	eq
    6ed6:	201c      	moveq	r0, #28
    6ed8:	d005      	beq.n	6ee6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    6eda:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6ede:	389f      	subs	r0, #159	; 0x9f
    6ee0:	bf14      	ite	ne
    6ee2:	4638      	movne	r0, r7
    6ee4:	2032      	moveq	r0, #50	; 0x32
    6ee6:	1c41      	adds	r1, r0, #1
    6ee8:	ebb9 000a 	subs.w	r0, r9, sl
    6eec:	4288      	cmp	r0, r1
    6eee:	da16      	bge.n	6f1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    6ef0:	f88b 5000 	strb.w	r5, [fp]
    6ef4:	f898 0018 	ldrb.w	r0, [r8, #24]
    6ef8:	7c21      	ldrb	r1, [r4, #16]
    6efa:	4281      	cmp	r1, r0
    6efc:	d309      	bcc.n	6f12 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    6efe:	6821      	ldr	r1, [r4, #0]
    6f00:	980a      	ldr	r0, [sp, #40]	; 0x28
    6f02:	1a40      	subs	r0, r0, r1
    6f04:	60a0      	str	r0, [r4, #8]
    6f06:	b00f      	add	sp, #60	; 0x3c
    6f08:	f04f 0002 	mov.w	r0, #2
    6f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f10:	e005      	b.n	6f1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    6f12:	9801      	ldr	r0, [sp, #4]
    6f14:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    6f18:	7845      	ldrb	r5, [r0, #1]
    6f1a:	2d20      	cmp	r5, #32
    6f1c:	d1ae      	bne.n	6e7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    6f1e:	2005      	movs	r0, #5
    6f20:	f001 fe24 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6f24:	4d1e      	ldr	r5, [pc, #120]	; (6fa0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    6f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6f2a:	6068      	str	r0, [r5, #4]
    6f2c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    6f30:	f89d 2018 	ldrb.w	r2, [sp, #24]
    6f34:	2120      	movs	r1, #32
    6f36:	2a20      	cmp	r2, #32
    6f38:	d003      	beq.n	6f42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    6f3a:	2005      	movs	r0, #5
    6f3c:	f7fe fff0 	bl	5f20 <MPSL_IRQ_RADIO_Handler+0x3c>
    6f40:	e004      	b.n	6f4c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    6f42:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    6f46:	4428      	add	r0, r5
    6f48:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    6f4c:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    6f50:	4916      	ldr	r1, [pc, #88]	; (6fac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    6f52:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    6f56:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    6f5a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    6f5e:	7048      	strb	r0, [r1, #1]
    6f60:	6828      	ldr	r0, [r5, #0]
    6f62:	4430      	add	r0, r6
    6f64:	6028      	str	r0, [r5, #0]
    6f66:	20ff      	movs	r0, #255	; 0xff
    6f68:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    6f6c:	7e68      	ldrb	r0, [r5, #25]
    6f6e:	2801      	cmp	r0, #1
    6f70:	d10a      	bne.n	6f88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    6f72:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    6f76:	6823      	ldr	r3, [r4, #0]
    6f78:	1818      	adds	r0, r3, r0
    6f7a:	f142 0100 	adc.w	r1, r2, #0
    6f7e:	1e40      	subs	r0, r0, #1
    6f80:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    6f84:	f001 fc14 	bl	87b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    6f88:	f89d 0018 	ldrb.w	r0, [sp, #24]
    6f8c:	2820      	cmp	r0, #32
    6f8e:	d003      	beq.n	6f98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    6f90:	4807      	ldr	r0, [pc, #28]	; (6fb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    6f92:	7840      	ldrb	r0, [r0, #1]
    6f94:	f002 fb76 	bl	9684 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6f98:	b00f      	add	sp, #60	; 0x3c
    6f9a:	2000      	movs	r0, #0
    6f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fa0:	20000f30 	.word	0x20000f30
    6fa4:	0f424000 	.word	0x0f424000
    6fa8:	20000ab0 	.word	0x20000ab0
    6fac:	20000eb0 	.word	0x20000eb0
    6fb0:	20000124 	.word	0x20000124

00006fb4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    6fb4:	490a      	ldr	r1, [pc, #40]	; (6fe0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    6fb6:	b510      	push	{r4, lr}
    6fb8:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    6fbc:	f100 0408 	add.w	r4, r0, #8
    6fc0:	e9d4 0100 	ldrd	r0, r1, [r4]
    6fc4:	f001 f998 	bl	82f8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    6fc8:	89e3      	ldrh	r3, [r4, #14]
    6fca:	2200      	movs	r2, #0
    6fcc:	18c3      	adds	r3, r0, r3
    6fce:	7b20      	ldrb	r0, [r4, #12]
    6fd0:	4151      	adcs	r1, r2
    6fd2:	1818      	adds	r0, r3, r0
    6fd4:	4151      	adcs	r1, r2
    6fd6:	1c40      	adds	r0, r0, #1
    6fd8:	f141 0100 	adc.w	r1, r1, #0
    6fdc:	bd10      	pop	{r4, pc}
    6fde:	0000      	.short	0x0000
    6fe0:	20000ab0 	.word	0x20000ab0

00006fe4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    6fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fe6:	4d6f      	ldr	r5, [pc, #444]	; (71a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    6fe8:	2600      	movs	r6, #0
    6fea:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    6fee:	2701      	movs	r7, #1
    6ff0:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    6ff4:	4b6c      	ldr	r3, [pc, #432]	; (71a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    6ff6:	2808      	cmp	r0, #8
    6ff8:	d273      	bcs.n	70e2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    6ffa:	e8df f000 	tbb	[pc, r0]
    6ffe:	7804      	.short	0x7804
    7000:	47ceb3a0 	.word	0x47ceb3a0
    7004:	bdb8      	.short	0xbdb8
    7006:	43c8      	mvns	r0, r1
    7008:	ea70 0002 	orns	r0, r0, r2
    700c:	d105      	bne.n	701a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    700e:	f002 f8e9 	bl	91e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    7012:	f001 fccf 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    7016:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    701a:	8ae0      	ldrh	r0, [r4, #22]
    701c:	b110      	cbz	r0, 7024 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    701e:	f002 f9e7 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7022:	b180      	cbz	r0, 7046 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    7024:	f7ff fd3c 	bl	6aa0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xaa0>
    7028:	20ff      	movs	r0, #255	; 0xff
    702a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    702e:	6861      	ldr	r1, [r4, #4]
    7030:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    7034:	d003      	beq.n	703e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    7036:	2005      	movs	r0, #5
    7038:	f001 fcde 	bl	89f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    703c:	b140      	cbz	r0, 7050 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    703e:	7e60      	ldrb	r0, [r4, #25]
    7040:	2801      	cmp	r0, #1
    7042:	d114      	bne.n	706e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    7044:	e009      	b.n	705a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    7046:	f640 012c 	movw	r1, #2092	; 0x82c
    704a:	2070      	movs	r0, #112	; 0x70
    704c:	f002 fa48 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7050:	f640 0131 	movw	r1, #2097	; 0x831
    7054:	2070      	movs	r0, #112	; 0x70
    7056:	f002 fa43 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    705a:	68a2      	ldr	r2, [r4, #8]
    705c:	6920      	ldr	r0, [r4, #16]
    705e:	68e1      	ldr	r1, [r4, #12]
    7060:	1810      	adds	r0, r2, r0
    7062:	4171      	adcs	r1, r6
    7064:	1e40      	subs	r0, r0, #1
    7066:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    706a:	f001 fba1 	bl	87b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    706e:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    7072:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    7076:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    707a:	6840      	ldr	r0, [r0, #4]
    707c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    7080:	680a      	ldr	r2, [r1, #0]
    7082:	b001      	add	sp, #4
    7084:	2101      	movs	r1, #1
    7086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    708a:	4710      	bx	r2
    708c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    7090:	b160      	cbz	r0, 70ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    7092:	43c8      	mvns	r0, r1
    7094:	ea70 0002 	orns	r0, r0, r2
    7098:	d105      	bne.n	70a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    709a:	f002 f8a3 	bl	91e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    709e:	f001 fc89 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    70a2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    70a6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    70aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70ac:	f7ff fcf8 	bl	6aa0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xaa0>
    70b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    70b4:	6060      	str	r0, [r4, #4]
    70b6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    70ba:	f88d 0000 	strb.w	r0, [sp]
    70be:	f89d 0000 	ldrb.w	r0, [sp]
    70c2:	b178      	cbz	r0, 70e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    70c4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    70c8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    70cc:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    70d0:	6840      	ldr	r0, [r0, #4]
    70d2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    70d6:	680a      	ldr	r2, [r1, #0]
    70d8:	b001      	add	sp, #4
    70da:	2106      	movs	r1, #6
    70dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    70e0:	4710      	bx	r2
    70e2:	e05a      	b.n	719a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    70e4:	f640 0148 	movw	r1, #2120	; 0x848
    70e8:	2070      	movs	r0, #112	; 0x70
    70ea:	f002 f9f9 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    70ee:	f7ff fcd7 	bl	6aa0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xaa0>
    70f2:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    70f6:	f002 f97b 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    70fa:	b130      	cbz	r0, 710a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    70fc:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    7100:	43c9      	mvns	r1, r1
    7102:	ea71 0000 	orns	r0, r1, r0
    7106:	d005      	beq.n	7114 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    7108:	e00a      	b.n	7120 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    710a:	f640 0156 	movw	r1, #2134	; 0x856
    710e:	2070      	movs	r0, #112	; 0x70
    7110:	f002 f9e6 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7114:	f002 f866 	bl	91e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    7118:	f001 fc4c 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    711c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    7120:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    7124:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    7128:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    712c:	6840      	ldr	r0, [r0, #4]
    712e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    7132:	680a      	ldr	r2, [r1, #0]
    7134:	b001      	add	sp, #4
    7136:	2100      	movs	r1, #0
    7138:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    713c:	4710      	bx	r2
    713e:	f001 fe39 	bl	8db4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    7142:	8ae0      	ldrh	r0, [r4, #22]
    7144:	b110      	cbz	r0, 714c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    7146:	f002 f953 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    714a:	b130      	cbz	r0, 715a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    714c:	f001 fe46 	bl	8ddc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    7150:	2800      	cmp	r0, #0
    7152:	bf18      	it	ne
    7154:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    7158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    715a:	f44f 6106 	mov.w	r1, #2144	; 0x860
    715e:	2070      	movs	r0, #112	; 0x70
    7160:	f002 f9be 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7164:	4811      	ldr	r0, [pc, #68]	; (71ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    7166:	6007      	str	r7, [r0, #0]
    7168:	6898      	ldr	r0, [r3, #8]
    716a:	6007      	str	r7, [r0, #0]
    716c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    716e:	7818      	ldrb	r0, [r3, #0]
    7170:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7174:	f002 ba86 	b.w	9684 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7178:	f7ff fc92 	bl	6aa0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xaa0>
    717c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    7180:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    7184:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    7188:	6840      	ldr	r0, [r0, #4]
    718a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    718e:	680a      	ldr	r2, [r1, #0]
    7190:	b001      	add	sp, #4
    7192:	2105      	movs	r1, #5
    7194:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7198:	4710      	bx	r2
    719a:	f640 0173 	movw	r1, #2163	; 0x873
    719e:	2070      	movs	r0, #112	; 0x70
    71a0:	f002 f99e 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    71a4:	20000ab0 	.word	0x20000ab0
    71a8:	20000124 	.word	0x20000124
    71ac:	40000508 	.word	0x40000508

000071b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    71b0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71b4:	48ff      	ldr	r0, [pc, #1020]	; (75b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    71b6:	b097      	sub	sp, #92	; 0x5c
    71b8:	460c      	mov	r4, r1
    71ba:	6800      	ldr	r0, [r0, #0]
    71bc:	4ffe      	ldr	r7, [pc, #1016]	; (75b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    71be:	05c0      	lsls	r0, r0, #23
    71c0:	0dc0      	lsrs	r0, r0, #23
    71c2:	d00e      	beq.n	71e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    71c4:	3810      	subs	r0, #16
    71c6:	b240      	sxtb	r0, r0
    71c8:	2800      	cmp	r0, #0
    71ca:	bfb8      	it	lt
    71cc:	f000 000f 	andlt.w	r0, r0, #15
    71d0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    71d4:	bfac      	ite	ge
    71d6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    71da:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    71de:	0940      	lsrs	r0, r0, #5
    71e0:	d00c      	beq.n	71fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    71e2:	7820      	ldrb	r0, [r4, #0]
    71e4:	f04f 0a00 	mov.w	sl, #0
    71e8:	2800      	cmp	r0, #0
    71ea:	bf18      	it	ne
    71ec:	2801      	cmpne	r0, #1
    71ee:	d017      	beq.n	7220 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    71f0:	f240 61f9 	movw	r1, #1785	; 0x6f9
    71f4:	f04f 0070 	mov.w	r0, #112	; 0x70
    71f8:	f002 f972 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    71fc:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    7200:	f04f 0a01 	mov.w	sl, #1
    7204:	2820      	cmp	r0, #32
    7206:	d006      	beq.n	7216 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    7208:	7820      	ldrb	r0, [r4, #0]
    720a:	b148      	cbz	r0, 7220 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    720c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    7210:	2070      	movs	r0, #112	; 0x70
    7212:	f002 f965 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7216:	f240 61f2 	movw	r1, #1778	; 0x6f2
    721a:	2070      	movs	r0, #112	; 0x70
    721c:	f002 f960 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7220:	4de6      	ldr	r5, [pc, #920]	; (75bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    7222:	b125      	cbz	r5, 722e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x7e>
    7224:	2100      	movs	r1, #0
    7226:	f240 60fc 	movw	r0, #1788	; 0x6fc
    722a:	f3af 8000 	nop.w
    722e:	2000      	movs	r0, #0
    7230:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    7234:	a905      	add	r1, sp, #20
    7236:	9112      	str	r1, [sp, #72]	; 0x48
    7238:	49e1      	ldr	r1, [pc, #900]	; (75c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    723a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    723c:	f04f 0801 	mov.w	r8, #1
    7240:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    7244:	9001      	str	r0, [sp, #4]
    7246:	f8df b374 	ldr.w	fp, [pc, #884]	; 75bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>
    724a:	f1bb 0f00 	cmp.w	fp, #0
    724e:	d004      	beq.n	725a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xaa>
    7250:	2100      	movs	r1, #0
    7252:	f240 7007 	movw	r0, #1799	; 0x707
    7256:	f3af 8000 	nop.w
    725a:	f1b8 0f00 	cmp.w	r8, #0
    725e:	d008      	beq.n	7272 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc2>
    7260:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    7264:	2500      	movs	r5, #0
    7266:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    726a:	f1ba 0f00 	cmp.w	sl, #0
    726e:	d007      	beq.n	7280 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd0>
    7270:	e03e      	b.n	72f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x140>
    7272:	48d4      	ldr	r0, [pc, #848]	; (75c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    7274:	2800      	cmp	r0, #0
    7276:	bf18      	it	ne
    7278:	f3af 8000 	nopne.w
    727c:	b662      	cpsie	i
    727e:	e7ef      	b.n	7260 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb0>
    7280:	46b1      	mov	r9, r6
    7282:	2001      	movs	r0, #1
    7284:	ea20 0609 	bic.w	r6, r0, r9
    7288:	48cf      	ldr	r0, [pc, #828]	; (75c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    728a:	2240      	movs	r2, #64	; 0x40
    728c:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    7290:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    7294:	f005 f841 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7298:	f1bb 0f00 	cmp.w	fp, #0
    729c:	d004      	beq.n	72a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf8>
    729e:	2100      	movs	r1, #0
    72a0:	f240 503c 	movw	r0, #1340	; 0x53c
    72a4:	f3af 8000 	nop.w
    72a8:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    72ac:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    72b0:	4439      	add	r1, r7
    72b2:	4438      	add	r0, r7
    72b4:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    72b6:	8502      	strh	r2, [r0, #40]	; 0x28
    72b8:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    72bc:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    72c0:	f1bb 0f00 	cmp.w	fp, #0
    72c4:	d004      	beq.n	72d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x120>
    72c6:	2100      	movs	r1, #0
    72c8:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    72cc:	f3af 8000 	nop.w
    72d0:	f1bb 0f00 	cmp.w	fp, #0
    72d4:	d004      	beq.n	72e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x130>
    72d6:	2100      	movs	r1, #0
    72d8:	f240 7011 	movw	r0, #1809	; 0x711
    72dc:	f3af 8000 	nop.w
    72e0:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    72e4:	f88d 0020 	strb.w	r0, [sp, #32]
    72e8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    72ec:	2800      	cmp	r0, #0
    72ee:	d1aa      	bne.n	7246 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    72f0:	f1bb 0f00 	cmp.w	fp, #0
    72f4:	d004      	beq.n	7300 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x150>
    72f6:	2100      	movs	r1, #0
    72f8:	f240 701b 	movw	r0, #1819	; 0x71b
    72fc:	f3af 8000 	nop.w
    7300:	f001 fb58 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    7304:	4681      	mov	r9, r0
    7306:	a802      	add	r0, sp, #8
    7308:	900a      	str	r0, [sp, #40]	; 0x28
    730a:	4688      	mov	r8, r1
    730c:	8921      	ldrh	r1, [r4, #8]
    730e:	4628      	mov	r0, r5
    7310:	f361 401f 	bfi	r0, r1, #16, #16
    7314:	4601      	mov	r1, r0
    7316:	7aa2      	ldrb	r2, [r4, #10]
    7318:	4628      	mov	r0, r5
    731a:	f362 0007 	bfi	r0, r2, #0, #8
    731e:	7ae2      	ldrb	r2, [r4, #11]
    7320:	f362 200f 	bfi	r0, r2, #8, #8
    7324:	7822      	ldrb	r2, [r4, #0]
    7326:	9502      	str	r5, [sp, #8]
    7328:	f362 4017 	bfi	r0, r2, #16, #8
    732c:	e9cd 5104 	strd	r5, r1, [sp, #16]
    7330:	e9cd 0506 	strd	r0, r5, [sp, #24]
    7334:	9503      	str	r5, [sp, #12]
    7336:	7820      	ldrb	r0, [r4, #0]
    7338:	b380      	cbz	r0, 739c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    733a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    733e:	48a3      	ldr	r0, [pc, #652]	; (75cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>)
    7340:	1a40      	subs	r0, r0, r1
    7342:	990a      	ldr	r1, [sp, #40]	; 0x28
    7344:	f101 020c 	add.w	r2, r1, #12
    7348:	a914      	add	r1, sp, #80	; 0x50
    734a:	f001 f853 	bl	83f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    734e:	2200      	movs	r2, #0
    7350:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7354:	4648      	mov	r0, r9
    7356:	4641      	mov	r1, r8
    7358:	f7fe ffba 	bl	62d0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2d0>
    735c:	468c      	mov	ip, r1
    735e:	7ae1      	ldrb	r1, [r4, #11]
    7360:	2900      	cmp	r1, #0
    7362:	bf0c      	ite	eq
    7364:	217a      	moveq	r1, #122	; 0x7a
    7366:	214a      	movne	r1, #74	; 0x4a
    7368:	6862      	ldr	r2, [r4, #4]
    736a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    736e:	4411      	add	r1, r2
    7370:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7374:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    7378:	441a      	add	r2, r3
    737a:	4411      	add	r1, r2
    737c:	1c88      	adds	r0, r1, #2
    737e:	f001 f81d 	bl	83bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    7382:	9600      	str	r6, [sp, #0]
    7384:	9004      	str	r0, [sp, #16]
    7386:	464a      	mov	r2, r9
    7388:	4643      	mov	r3, r8
    738a:	6920      	ldr	r0, [r4, #16]
    738c:	990a      	ldr	r1, [sp, #40]	; 0x28
    738e:	f7fe fe03 	bl	5f98 <MPSL_IRQ_RADIO_Handler+0xb4>
    7392:	2800      	cmp	r0, #0
    7394:	bf08      	it	eq
    7396:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    739a:	e046      	b.n	742a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27a>
    739c:	e7ff      	b.n	739e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ee>
    739e:	4648      	mov	r0, r9
    73a0:	4641      	mov	r1, r8
    73a2:	f000 ffa9 	bl	82f8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    73a6:	4b8a      	ldr	r3, [pc, #552]	; (75d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    73a8:	4602      	mov	r2, r0
    73aa:	eb10 0c03 	adds.w	ip, r0, r3
    73ae:	468e      	mov	lr, r1
    73b0:	f141 0300 	adc.w	r3, r1, #0
    73b4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    73b8:	ebb0 0c0c 	subs.w	ip, r0, ip
    73bc:	eb71 0303 	sbcs.w	r3, r1, r3
    73c0:	d22a      	bcs.n	7418 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    73c2:	3229      	adds	r2, #41	; 0x29
    73c4:	f14e 0300 	adc.w	r3, lr, #0
    73c8:	1a82      	subs	r2, r0, r2
    73ca:	eb71 0203 	sbcs.w	r2, r1, r3
    73ce:	d323      	bcc.n	7418 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    73d0:	8922      	ldrh	r2, [r4, #8]
    73d2:	ab14      	add	r3, sp, #80	; 0x50
    73d4:	1a80      	subs	r0, r0, r2
    73d6:	eb61 0105 	sbc.w	r1, r1, r5
    73da:	9a12      	ldr	r2, [sp, #72]	; 0x48
    73dc:	1e40      	subs	r0, r0, #1
    73de:	9200      	str	r2, [sp, #0]
    73e0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    73e4:	aa0b      	add	r2, sp, #44	; 0x2c
    73e6:	f000 ffab 	bl	8340 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    73ea:	7ae0      	ldrb	r0, [r4, #11]
    73ec:	2800      	cmp	r0, #0
    73ee:	bf0c      	ite	eq
    73f0:	207a      	moveq	r0, #122	; 0x7a
    73f2:	204a      	movne	r0, #74	; 0x4a
    73f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    73f6:	8922      	ldrh	r2, [r4, #8]
    73f8:	4408      	add	r0, r1
    73fa:	6861      	ldr	r1, [r4, #4]
    73fc:	4411      	add	r1, r2
    73fe:	4408      	add	r0, r1
    7400:	1c80      	adds	r0, r0, #2
    7402:	f000 ffdb 	bl	83bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    7406:	4601      	mov	r1, r0
    7408:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
    740c:	e9cd 0202 	strd	r0, r2, [sp, #8]
    7410:	1a08      	subs	r0, r1, r0
    7412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7416:	e007      	b.n	7428 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    7418:	f1b9 0101 	subs.w	r1, r9, #1
    741c:	f148 30ff 	adc.w	r0, r8, #4294967295	; 0xffffffff
    7420:	e9cd 1002 	strd	r1, r0, [sp, #8]
    7424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7428:	9004      	str	r0, [sp, #16]
    742a:	f1bb 0f00 	cmp.w	fp, #0
    742e:	d004      	beq.n	743a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28a>
    7430:	2100      	movs	r1, #0
    7432:	f240 7022 	movw	r0, #1826	; 0x722
    7436:	f3af 8000 	nop.w
    743a:	4963      	ldr	r1, [pc, #396]	; (75c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    743c:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    7440:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    7444:	9108      	str	r1, [sp, #32]
    7446:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    744a:	a802      	add	r0, sp, #8
    744c:	2901      	cmp	r1, #1
    744e:	bf18      	it	ne
    7450:	2902      	cmpne	r1, #2
    7452:	d141      	bne.n	74d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    7454:	9511      	str	r5, [sp, #68]	; 0x44
    7456:	9a02      	ldr	r2, [sp, #8]
    7458:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    745c:	1a53      	subs	r3, r2, r1
    745e:	f8dd c010 	ldr.w	ip, [sp, #16]
    7462:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7466:	eb12 020c 	adds.w	r2, r2, ip
    746a:	1a51      	subs	r1, r2, r1
    746c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    7470:	2b02      	cmp	r3, #2
    7472:	d372      	bcc.n	755a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    7474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    7478:	bf98      	it	ls
    747a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    747e:	d86c      	bhi.n	755a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    7480:	2501      	movs	r5, #1
    7482:	ab14      	add	r3, sp, #80	; 0x50
    7484:	aa0e      	add	r2, sp, #56	; 0x38
    7486:	4631      	mov	r1, r6
    7488:	f7fe ff72 	bl	6370 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x370>
    748c:	2800      	cmp	r0, #0
    748e:	d06b      	beq.n	7568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    7490:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    7494:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    7498:	4633      	mov	r3, r6
    749a:	428a      	cmp	r2, r1
    749c:	d068      	beq.n	7570 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    749e:	2005      	movs	r0, #5
    74a0:	f7fe fd3e 	bl	5f20 <MPSL_IRQ_RADIO_Handler+0x3c>
    74a4:	9908      	ldr	r1, [sp, #32]
    74a6:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    74aa:	7048      	strb	r0, [r1, #1]
    74ac:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    74b0:	2820      	cmp	r0, #32
    74b2:	bf01      	itttt	eq
    74b4:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    74b8:	4438      	addeq	r0, r7
    74ba:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    74be:	9511      	streq	r5, [sp, #68]	; 0x44
    74c0:	bf1e      	ittt	ne
    74c2:	9908      	ldrne	r1, [sp, #32]
    74c4:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    74c8:	f880 8001 	strbne.w	r8, [r0, #1]
    74cc:	4632      	mov	r2, r6
    74ce:	4641      	mov	r1, r8
    74d0:	f05f 0003 	movs.w	r0, #3
    74d4:	f7ff fb90 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    74d8:	f1bb 0f00 	cmp.w	fp, #0
    74dc:	d004      	beq.n	74e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    74de:	2100      	movs	r1, #0
    74e0:	f240 7027 	movw	r0, #1831	; 0x727
    74e4:	f3af 8000 	nop.w
    74e8:	483a      	ldr	r0, [pc, #232]	; (75d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    74ea:	2800      	cmp	r0, #0
    74ec:	bf18      	it	ne
    74ee:	f3af 8000 	nopne.w
    74f2:	f3ef 8810 	mrs	r8, PRIMASK
    74f6:	b672      	cpsid	i
    74f8:	f1bb 0f00 	cmp.w	fp, #0
    74fc:	d004      	beq.n	7508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>
    74fe:	2100      	movs	r1, #0
    7500:	f240 702d 	movw	r0, #1837	; 0x72d
    7504:	f3af 8000 	nop.w
    7508:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    750c:	f88d 0020 	strb.w	r0, [sp, #32]
    7510:	f89d 0020 	ldrb.w	r0, [sp, #32]
    7514:	2800      	cmp	r0, #0
    7516:	f47f ae96 	bne.w	7246 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    751a:	4828      	ldr	r0, [pc, #160]	; (75bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    751c:	b120      	cbz	r0, 7528 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    751e:	2100      	movs	r1, #0
    7520:	f240 7035 	movw	r0, #1845	; 0x735
    7524:	f3af 8000 	nop.w
    7528:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    752c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    7530:	e9dd bc05 	ldrd	fp, ip, [sp, #20]
    7534:	f100 0008 	add.w	r0, r0, #8
    7538:	f8dd e01c 	ldr.w	lr, [sp, #28]
    753c:	e880 580e 	stmia.w	r0, {r1, r2, r3, fp, ip, lr}
    7540:	b3b5      	cbz	r5, 75b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    7542:	4d1e      	ldr	r5, [pc, #120]	; (75bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    7544:	b125      	cbz	r5, 7550 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    7546:	2100      	movs	r1, #0
    7548:	f240 7042 	movw	r0, #1858	; 0x742
    754c:	f3af 8000 	nop.w
    7550:	f1ba 0f00 	cmp.w	sl, #0
    7554:	d146      	bne.n	75e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    7556:	e018      	b.n	758a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3da>
    7558:	e7ff      	b.n	755a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    755a:	4632      	mov	r2, r6
    755c:	4641      	mov	r1, r8
    755e:	2004      	movs	r0, #4
    7560:	f7ff fb4a 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    7564:	2501      	movs	r5, #1
    7566:	e7b7      	b.n	74d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    7568:	4632      	mov	r2, r6
    756a:	4641      	mov	r1, r8
    756c:	2004      	movs	r0, #4
    756e:	e7b1      	b.n	74d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x324>
    7570:	2920      	cmp	r1, #32
    7572:	bf1d      	ittte	ne
    7574:	9808      	ldrne	r0, [sp, #32]
    7576:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    757a:	7840      	ldrbne	r0, [r0, #1]
    757c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    7580:	bf04      	itt	eq
    7582:	4438      	addeq	r0, r7
    7584:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    7588:	e78c      	b.n	74a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    758a:	9811      	ldr	r0, [sp, #68]	; 0x44
    758c:	f010 0fff 	tst.w	r0, #255	; 0xff
    7590:	d028      	beq.n	75e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    7592:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    7596:	2820      	cmp	r0, #32
    7598:	d124      	bne.n	75e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    759a:	b125      	cbz	r5, 75a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f6>
    759c:	2100      	movs	r1, #0
    759e:	f240 7047 	movw	r0, #1863	; 0x747
    75a2:	f3af 8000 	nop.w
    75a6:	4631      	mov	r1, r6
    75a8:	2002      	movs	r0, #2
    75aa:	f7ff fb57 	bl	6c5c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc5c>
    75ae:	e013      	b.n	75d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    75b0:	e027      	b.n	7602 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x452>
    75b2:	0000      	.short	0x0000
    75b4:	e000ed04 	.word	0xe000ed04
    75b8:	20000f30 	.word	0x20000f30
    75bc:	00000000 	.word	0x00000000
    75c0:	20000ab0 	.word	0x20000ab0
    75c4:	00000000 	.word	0x00000000
    75c8:	20000eb0 	.word	0x20000eb0
    75cc:	1e847fff 	.word	0x1e847fff
    75d0:	0f424000 	.word	0x0f424000
    75d4:	00000000 	.word	0x00000000
    75d8:	9010      	str	r0, [sp, #64]	; 0x40
    75da:	b918      	cbnz	r0, 75e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    75dc:	7820      	ldrb	r0, [r4, #0]
    75de:	b1f0      	cbz	r0, 761e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46e>
    75e0:	2801      	cmp	r0, #1
    75e2:	d02b      	beq.n	763c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48c>
    75e4:	483b      	ldr	r0, [pc, #236]	; (76d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    75e6:	b120      	cbz	r0, 75f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x442>
    75e8:	2100      	movs	r1, #0
    75ea:	f240 7064 	movw	r0, #1892	; 0x764
    75ee:	f3af 8000 	nop.w
    75f2:	20ff      	movs	r0, #255	; 0xff
    75f4:	f1ba 0f00 	cmp.w	sl, #0
    75f8:	bf18      	it	ne
    75fa:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    75fe:	d026      	beq.n	764e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49e>
    7600:	2501      	movs	r5, #1
    7602:	4c34      	ldr	r4, [pc, #208]	; (76d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    7604:	b124      	cbz	r4, 7610 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    7606:	2100      	movs	r1, #0
    7608:	f240 7075 	movw	r0, #1909	; 0x775
    760c:	f3af 8000 	nop.w
    7610:	9810      	ldr	r0, [sp, #64]	; 0x40
    7612:	4e31      	ldr	r6, [pc, #196]	; (76d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x528>)
    7614:	2802      	cmp	r0, #2
    7616:	d023      	beq.n	7660 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4b0>
    7618:	2801      	cmp	r0, #1
    761a:	d029      	beq.n	7670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    761c:	e02d      	b.n	767a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    761e:	482d      	ldr	r0, [pc, #180]	; (76d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    7620:	b120      	cbz	r0, 762c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47c>
    7622:	2100      	movs	r1, #0
    7624:	f240 704f 	movw	r0, #1871	; 0x74f
    7628:	f3af 8000 	nop.w
    762c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    7630:	2004      	movs	r0, #4
    7632:	9917      	ldr	r1, [sp, #92]	; 0x5c
    7634:	f7ff fae0 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    7638:	2501      	movs	r5, #1
    763a:	e7e2      	b.n	7602 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x452>
    763c:	2d00      	cmp	r5, #0
    763e:	f43f ae02 	beq.w	7246 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    7642:	2100      	movs	r1, #0
    7644:	f240 705a 	movw	r0, #1882	; 0x75a
    7648:	f3af 8000 	nop.w
    764c:	e5fb      	b.n	7246 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    764e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    7652:	2101      	movs	r1, #1
    7654:	4391      	bics	r1, r2
    7656:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    765a:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    765e:	e7cf      	b.n	7600 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x450>
    7660:	68b8      	ldr	r0, [r7, #8]
    7662:	ebb0 0009 	subs.w	r0, r0, r9
    7666:	f004 fcc8 	bl	bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    766a:	6871      	ldr	r1, [r6, #4]
    766c:	b921      	cbnz	r1, 7678 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c8>
    766e:	e004      	b.n	767a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    7670:	6871      	ldr	r1, [r6, #4]
    7672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7676:	b101      	cbz	r1, 767a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    7678:	4788      	blx	r1
    767a:	f1b8 0f00 	cmp.w	r8, #0
    767e:	d022      	beq.n	76c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x516>
    7680:	b124      	cbz	r4, 768c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4dc>
    7682:	2100      	movs	r1, #0
    7684:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    7688:	f3af 8000 	nop.w
    768c:	b18d      	cbz	r5, 76b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x502>
    768e:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    7692:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7696:	4438      	add	r0, r7
    7698:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    769c:	2820      	cmp	r0, #32
    769e:	d008      	beq.n	76b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x502>
    76a0:	b124      	cbz	r4, 76ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4fc>
    76a2:	2100      	movs	r1, #0
    76a4:	f240 708f 	movw	r0, #1935	; 0x78f
    76a8:	f3af 8000 	nop.w
    76ac:	7870      	ldrb	r0, [r6, #1]
    76ae:	f001 ffe9 	bl	9684 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    76b2:	b124      	cbz	r4, 76be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x50e>
    76b4:	2100      	movs	r1, #0
    76b6:	f240 7094 	movw	r0, #1940	; 0x794
    76ba:	f3af 8000 	nop.w
    76be:	b019      	add	sp, #100	; 0x64
    76c0:	4628      	mov	r0, r5
    76c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76c6:	4805      	ldr	r0, [pc, #20]	; (76dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52c>)
    76c8:	2800      	cmp	r0, #0
    76ca:	bf18      	it	ne
    76cc:	f3af 8000 	nopne.w
    76d0:	b662      	cpsie	i
    76d2:	e7d5      	b.n	7680 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    76d4:	00000000 	.word	0x00000000
    76d8:	20000124 	.word	0x20000124
    76dc:	00000000 	.word	0x00000000

000076e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    76e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76e4:	4604      	mov	r4, r0
    76e6:	7800      	ldrb	r0, [r0, #0]
    76e8:	b08d      	sub	sp, #52	; 0x34
    76ea:	b118      	cbz	r0, 76f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    76ec:	b00d      	add	sp, #52	; 0x34
    76ee:	2000      	movs	r0, #0
    76f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76f4:	48d0      	ldr	r0, [pc, #832]	; (7a38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x358>)
    76f6:	6800      	ldr	r0, [r0, #0]
    76f8:	05c0      	lsls	r0, r0, #23
    76fa:	0dc0      	lsrs	r0, r0, #23
    76fc:	d00e      	beq.n	771c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    76fe:	3810      	subs	r0, #16
    7700:	b240      	sxtb	r0, r0
    7702:	2800      	cmp	r0, #0
    7704:	bfb8      	it	lt
    7706:	f000 000f 	andlt.w	r0, r0, #15
    770a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    770e:	bfac      	ite	ge
    7710:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    7714:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    7718:	0940      	lsrs	r0, r0, #5
    771a:	d0e7      	beq.n	76ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    771c:	a805      	add	r0, sp, #20
    771e:	f8df a31c 	ldr.w	sl, [pc, #796]	; 7a3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>
    7722:	9008      	str	r0, [sp, #32]
    7724:	f1ba 0f00 	cmp.w	sl, #0
    7728:	d004      	beq.n	7734 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    772a:	2100      	movs	r1, #0
    772c:	f240 50c5 	movw	r0, #1477	; 0x5c5
    7730:	f3af 8000 	nop.w
    7734:	f8df 8308 	ldr.w	r8, [pc, #776]	; 7a40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    7738:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    773c:	2500      	movs	r5, #0
    773e:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    7742:	9501      	str	r5, [sp, #4]
    7744:	f1ba 0f00 	cmp.w	sl, #0
    7748:	d004      	beq.n	7754 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    774a:	2100      	movs	r1, #0
    774c:	f240 50ca 	movw	r0, #1482	; 0x5ca
    7750:	f3af 8000 	nop.w
    7754:	2001      	movs	r0, #1
    7756:	ea20 0906 	bic.w	r9, r0, r6
    775a:	48ba      	ldr	r0, [pc, #744]	; (7a44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>)
    775c:	2240      	movs	r2, #64	; 0x40
    775e:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    7762:	eb00 1089 	add.w	r0, r0, r9, lsl #6
    7766:	f004 fdd8 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    776a:	f1ba 0f00 	cmp.w	sl, #0
    776e:	d004      	beq.n	777a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    7770:	2100      	movs	r1, #0
    7772:	f240 503c 	movw	r0, #1340	; 0x53c
    7776:	f3af 8000 	nop.w
    777a:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    777e:	eb00 0108 	add.w	r1, r0, r8
    7782:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    7786:	4440      	add	r0, r8
    7788:	f1ba 0f00 	cmp.w	sl, #0
    778c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    778e:	850a      	strh	r2, [r1, #40]	; 0x28
    7790:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    7794:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    7798:	d004      	beq.n	77a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    779a:	2100      	movs	r1, #0
    779c:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    77a0:	f3af 8000 	nop.w
    77a4:	f1ba 0f00 	cmp.w	sl, #0
    77a8:	d004      	beq.n	77b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    77aa:	2100      	movs	r1, #0
    77ac:	f240 50cf 	movw	r0, #1487	; 0x5cf
    77b0:	f3af 8000 	nop.w
    77b4:	f001 f8fe 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    77b8:	460f      	mov	r7, r1
    77ba:	8922      	ldrh	r2, [r4, #8]
    77bc:	4629      	mov	r1, r5
    77be:	f362 411f 	bfi	r1, r2, #16, #16
    77c2:	4606      	mov	r6, r0
    77c4:	7aa2      	ldrb	r2, [r4, #10]
    77c6:	4628      	mov	r0, r5
    77c8:	f362 0007 	bfi	r0, r2, #0, #8
    77cc:	7ae2      	ldrb	r2, [r4, #11]
    77ce:	f10d 0b08 	add.w	fp, sp, #8
    77d2:	f362 200f 	bfi	r0, r2, #8, #8
    77d6:	7822      	ldrb	r2, [r4, #0]
    77d8:	9502      	str	r5, [sp, #8]
    77da:	f362 4017 	bfi	r0, r2, #16, #8
    77de:	e9cd 5104 	strd	r5, r1, [sp, #16]
    77e2:	e9cd 0506 	strd	r0, r5, [sp, #24]
    77e6:	9503      	str	r5, [sp, #12]
    77e8:	7820      	ldrb	r0, [r4, #0]
    77ea:	b388      	cbz	r0, 7850 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x170>
    77ec:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    77f0:	4995      	ldr	r1, [pc, #596]	; (7a48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    77f2:	f10b 020c 	add.w	r2, fp, #12
    77f6:	1a08      	subs	r0, r1, r0
    77f8:	a909      	add	r1, sp, #36	; 0x24
    77fa:	f000 fdfb 	bl	83f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    77fe:	2200      	movs	r2, #0
    7800:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7804:	4630      	mov	r0, r6
    7806:	4639      	mov	r1, r7
    7808:	f7fe fd62 	bl	62d0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2d0>
    780c:	4684      	mov	ip, r0
    780e:	7ae0      	ldrb	r0, [r4, #11]
    7810:	460b      	mov	r3, r1
    7812:	2800      	cmp	r0, #0
    7814:	bf0c      	ite	eq
    7816:	207a      	moveq	r0, #122	; 0x7a
    7818:	204a      	movne	r0, #74	; 0x4a
    781a:	6861      	ldr	r1, [r4, #4]
    781c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    7820:	4408      	add	r0, r1
    7822:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    7826:	e9cd c302 	strd	ip, r3, [sp, #8]
    782a:	4411      	add	r1, r2
    782c:	4408      	add	r0, r1
    782e:	1c80      	adds	r0, r0, #2
    7830:	f000 fdc4 	bl	83bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    7834:	f8cd 9000 	str.w	r9, [sp]
    7838:	9004      	str	r0, [sp, #16]
    783a:	4632      	mov	r2, r6
    783c:	463b      	mov	r3, r7
    783e:	4659      	mov	r1, fp
    7840:	6920      	ldr	r0, [r4, #16]
    7842:	f7fe fba9 	bl	5f98 <MPSL_IRQ_RADIO_Handler+0xb4>
    7846:	2800      	cmp	r0, #0
    7848:	bf08      	it	eq
    784a:	e9cd 6702 	strdeq	r6, r7, [sp, #8]
    784e:	e045      	b.n	78dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    7850:	e7ff      	b.n	7852 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    7852:	4630      	mov	r0, r6
    7854:	4639      	mov	r1, r7
    7856:	f000 fd4f 	bl	82f8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    785a:	4b7c      	ldr	r3, [pc, #496]	; (7a4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    785c:	4602      	mov	r2, r0
    785e:	eb10 0c03 	adds.w	ip, r0, r3
    7862:	468b      	mov	fp, r1
    7864:	f141 0300 	adc.w	r3, r1, #0
    7868:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    786c:	ebb0 0c0c 	subs.w	ip, r0, ip
    7870:	eb71 0303 	sbcs.w	r3, r1, r3
    7874:	d22a      	bcs.n	78cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ec>
    7876:	3229      	adds	r2, #41	; 0x29
    7878:	f14b 0300 	adc.w	r3, fp, #0
    787c:	1a82      	subs	r2, r0, r2
    787e:	eb71 0203 	sbcs.w	r2, r1, r3
    7882:	d323      	bcc.n	78cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ec>
    7884:	8922      	ldrh	r2, [r4, #8]
    7886:	ab0a      	add	r3, sp, #40	; 0x28
    7888:	1a80      	subs	r0, r0, r2
    788a:	eb61 0105 	sbc.w	r1, r1, r5
    788e:	9a08      	ldr	r2, [sp, #32]
    7890:	1e40      	subs	r0, r0, #1
    7892:	9200      	str	r2, [sp, #0]
    7894:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    7898:	aa09      	add	r2, sp, #36	; 0x24
    789a:	f000 fd51 	bl	8340 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    789e:	7ae0      	ldrb	r0, [r4, #11]
    78a0:	2800      	cmp	r0, #0
    78a2:	bf0c      	ite	eq
    78a4:	207a      	moveq	r0, #122	; 0x7a
    78a6:	204a      	movne	r0, #74	; 0x4a
    78a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    78aa:	8922      	ldrh	r2, [r4, #8]
    78ac:	4408      	add	r0, r1
    78ae:	6861      	ldr	r1, [r4, #4]
    78b0:	4411      	add	r1, r2
    78b2:	4408      	add	r0, r1
    78b4:	1c80      	adds	r0, r0, #2
    78b6:	f000 fd81 	bl	83bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    78ba:	4601      	mov	r1, r0
    78bc:	e9dd 020a 	ldrd	r0, r2, [sp, #40]	; 0x28
    78c0:	e9cd 0202 	strd	r0, r2, [sp, #8]
    78c4:	1a08      	subs	r0, r1, r0
    78c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    78ca:	e006      	b.n	78da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fa>
    78cc:	1e70      	subs	r0, r6, #1
    78ce:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
    78d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    78d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    78da:	9004      	str	r0, [sp, #16]
    78dc:	f1ba 0f00 	cmp.w	sl, #0
    78e0:	d004      	beq.n	78ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    78e2:	2100      	movs	r1, #0
    78e4:	f240 50d5 	movw	r0, #1493	; 0x5d5
    78e8:	f3af 8000 	nop.w
    78ec:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    78f0:	f8d8 1008 	ldr.w	r1, [r8, #8]
    78f4:	1808      	adds	r0, r1, r0
    78f6:	eb42 0105 	adc.w	r1, r2, r5
    78fa:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    78fe:	2a20      	cmp	r2, #32
    7900:	d009      	beq.n	7916 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x236>
    7902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7906:	1a12      	subs	r2, r2, r0
    7908:	eb73 0201 	sbcs.w	r2, r3, r1
    790c:	d203      	bcs.n	7916 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x236>
    790e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7912:	2001      	movs	r0, #1
    7914:	9001      	str	r0, [sp, #4]
    7916:	f1ba 0f00 	cmp.w	sl, #0
    791a:	d004      	beq.n	7926 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x246>
    791c:	2100      	movs	r1, #0
    791e:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    7922:	f3af 8000 	nop.w
    7926:	9902      	ldr	r1, [sp, #8]
    7928:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    792c:	1a0a      	subs	r2, r1, r0
    792e:	9b04      	ldr	r3, [sp, #16]
    7930:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    7934:	18c9      	adds	r1, r1, r3
    7936:	1a08      	subs	r0, r1, r0
    7938:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    793c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    7940:	bf98      	it	ls
    7942:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    7946:	d80b      	bhi.n	7960 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x280>
    7948:	4632      	mov	r2, r6
    794a:	463b      	mov	r3, r7
    794c:	a902      	add	r1, sp, #8
    794e:	483f      	ldr	r0, [pc, #252]	; (7a4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    7950:	f8cd 9000 	str.w	r9, [sp]
    7954:	f7fe fb20 	bl	5f98 <MPSL_IRQ_RADIO_Handler+0xb4>
    7958:	9901      	ldr	r1, [sp, #4]
    795a:	4308      	orrs	r0, r1
    795c:	d145      	bne.n	79ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30a>
    795e:	e05d      	b.n	7a1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>
    7960:	f8bd b016 	ldrh.w	fp, [sp, #22]
    7964:	aa01      	add	r2, sp, #4
    7966:	4669      	mov	r1, sp
    7968:	4658      	mov	r0, fp
    796a:	f000 fd43 	bl	83f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    796e:	f001 fa3f 	bl	8df0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    7972:	f000 fd23 	bl	83bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    7976:	4681      	mov	r9, r0
    7978:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    797c:	2820      	cmp	r0, #32
    797e:	d00a      	beq.n	7996 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b6>
    7980:	e9d8 3103 	ldrd	r3, r1, [r8, #12]
    7984:	f8d8 2008 	ldr.w	r2, [r8, #8]
    7988:	1d89      	adds	r1, r1, #6
    798a:	f145 0000 	adc.w	r0, r5, #0
    798e:	1856      	adds	r6, r2, r1
    7990:	eb43 0700 	adc.w	r7, r3, r0
    7994:	e024      	b.n	79e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x300>
    7996:	360a      	adds	r6, #10
    7998:	f147 0700 	adc.w	r7, r7, #0
    799c:	f1bb 0f00 	cmp.w	fp, #0
    79a0:	d017      	beq.n	79d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f2>
    79a2:	f001 fd25 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    79a6:	b9a0      	cbnz	r0, 79d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f2>
    79a8:	f001 fbfa 	bl	91a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    79ac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    79b0:	bf08      	it	eq
    79b2:	200d      	moveq	r0, #13
    79b4:	d00b      	beq.n	79ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ee>
    79b6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    79ba:	3856      	subs	r0, #86	; 0x56
    79bc:	bf08      	it	eq
    79be:	201c      	moveq	r0, #28
    79c0:	d005      	beq.n	79ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ee>
    79c2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    79c6:	389f      	subs	r0, #159	; 0x9f
    79c8:	bf14      	ite	ne
    79ca:	4628      	movne	r0, r5
    79cc:	2032      	moveq	r0, #50	; 0x32
    79ce:	1986      	adds	r6, r0, r6
    79d0:	416f      	adcs	r7, r5
    79d2:	9800      	ldr	r0, [sp, #0]
    79d4:	4581      	cmp	r9, r0
    79d6:	d903      	bls.n	79e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x300>
    79d8:	eba9 0000 	sub.w	r0, r9, r0
    79dc:	1986      	adds	r6, r0, r6
    79de:	416f      	adcs	r7, r5
    79e0:	201f      	movs	r0, #31
    79e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
    79e6:	f88d 0014 	strb.w	r0, [sp, #20]
    79ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    79ee:	f000 fc83 	bl	82f8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    79f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    79f6:	1880      	adds	r0, r0, r2
    79f8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    79fc:	4169      	adcs	r1, r5
    79fe:	1880      	adds	r0, r0, r2
    7a00:	4169      	adcs	r1, r5
    7a02:	1c42      	adds	r2, r0, #1
    7a04:	f141 0000 	adc.w	r0, r1, #0
    7a08:	e9c4 2004 	strd	r2, r0, [r4, #16]
    7a0c:	f1ba 0f00 	cmp.w	sl, #0
    7a10:	d004      	beq.n	7a1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>
    7a12:	2100      	movs	r1, #0
    7a14:	f240 50fa 	movw	r0, #1530	; 0x5fa
    7a18:	f3af 8000 	nop.w
    7a1c:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    7a20:	f88d 0000 	strb.w	r0, [sp]
    7a24:	f89d 0000 	ldrb.w	r0, [sp]
    7a28:	2800      	cmp	r0, #0
    7a2a:	f47f ae7b 	bne.w	7724 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    7a2e:	b00d      	add	sp, #52	; 0x34
    7a30:	2001      	movs	r0, #1
    7a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a36:	0000      	.short	0x0000
    7a38:	e000ed04 	.word	0xe000ed04
    7a3c:	00000000 	.word	0x00000000
    7a40:	20000f30 	.word	0x20000f30
    7a44:	20000eb0 	.word	0x20000eb0
    7a48:	1e847fff 	.word	0x1e847fff
    7a4c:	0f424000 	.word	0x0f424000

00007a50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    7a50:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a54:	4d9d      	ldr	r5, [pc, #628]	; (7ccc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    7a56:	b08c      	sub	sp, #48	; 0x30
    7a58:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    7a5c:	2000      	movs	r0, #0
    7a5e:	9007      	str	r0, [sp, #28]
    7a60:	9008      	str	r0, [sp, #32]
    7a62:	2001      	movs	r0, #1
    7a64:	4c9a      	ldr	r4, [pc, #616]	; (7cd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    7a66:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    7a6a:	f04f 0800 	mov.w	r8, #0
    7a6e:	4607      	mov	r7, r0
    7a70:	9006      	str	r0, [sp, #24]
    7a72:	b124      	cbz	r4, 7a7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    7a74:	2100      	movs	r1, #0
    7a76:	f240 70a5 	movw	r0, #1957	; 0x7a5
    7a7a:	f3af 8000 	nop.w
    7a7e:	9806      	ldr	r0, [sp, #24]
    7a80:	2800      	cmp	r0, #0
    7a82:	d03c      	beq.n	7afe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    7a84:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    7a88:	b124      	cbz	r4, 7a94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    7a8a:	2100      	movs	r1, #0
    7a8c:	f240 70aa 	movw	r0, #1962	; 0x7aa
    7a90:	f3af 8000 	nop.w
    7a94:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    7a98:	2240      	movs	r2, #64	; 0x40
    7a9a:	ea27 060a 	bic.w	r6, r7, sl
    7a9e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    7aa2:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    7aa6:	4683      	mov	fp, r0
    7aa8:	f004 fc37 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7aac:	b124      	cbz	r4, 7ab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    7aae:	2100      	movs	r1, #0
    7ab0:	f240 503c 	movw	r0, #1340	; 0x53c
    7ab4:	f3af 8000 	nop.w
    7ab8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    7abc:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    7ac0:	4428      	add	r0, r5
    7ac2:	4429      	add	r1, r5
    7ac4:	9000      	str	r0, [sp, #0]
    7ac6:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    7ac8:	8502      	strh	r2, [r0, #40]	; 0x28
    7aca:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    7ace:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    7ad2:	b124      	cbz	r4, 7ade <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    7ad4:	2100      	movs	r1, #0
    7ad6:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    7ada:	f3af 8000 	nop.w
    7ade:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    7ae2:	f88d 0008 	strb.w	r0, [sp, #8]
    7ae6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7aea:	b178      	cbz	r0, 7b0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    7aec:	2c00      	cmp	r4, #0
    7aee:	bf1c      	itt	ne
    7af0:	2100      	movne	r1, #0
    7af2:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    7af6:	d0bc      	beq.n	7a72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    7af8:	f3af 8000 	nop.w
    7afc:	e7b9      	b.n	7a72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    7afe:	4875      	ldr	r0, [pc, #468]	; (7cd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    7b00:	2800      	cmp	r0, #0
    7b02:	bf18      	it	ne
    7b04:	f3af 8000 	nopne.w
    7b08:	b662      	cpsie	i
    7b0a:	e7bb      	b.n	7a84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    7b0c:	b124      	cbz	r4, 7b18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    7b0e:	2100      	movs	r1, #0
    7b10:	f240 70b4 	movw	r0, #1972	; 0x7b4
    7b14:	f3af 8000 	nop.w
    7b18:	980c      	ldr	r0, [sp, #48]	; 0x30
    7b1a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    7b1e:	2803      	cmp	r0, #3
    7b20:	d17e      	bne.n	7c20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    7b22:	9a00      	ldr	r2, [sp, #0]
    7b24:	990c      	ldr	r1, [sp, #48]	; 0x30
    7b26:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    7b2a:	4288      	cmp	r0, r1
    7b2c:	bf14      	ite	ne
    7b2e:	f04f 0a00 	movne.w	sl, #0
    7b32:	f04f 0a01 	moveq.w	sl, #1
    7b36:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    7b3a:	4683      	mov	fp, r0
    7b3c:	2220      	movs	r2, #32
    7b3e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    7b42:	e003      	b.n	7b4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    7b44:	4602      	mov	r2, r0
    7b46:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    7b4a:	7840      	ldrb	r0, [r0, #1]
    7b4c:	4288      	cmp	r0, r1
    7b4e:	d002      	beq.n	7b56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    7b50:	2820      	cmp	r0, #32
    7b52:	d00a      	beq.n	7b6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    7b54:	e7f6      	b.n	7b44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    7b56:	2820      	cmp	r0, #32
    7b58:	d007      	beq.n	7b6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    7b5a:	4583      	cmp	fp, r0
    7b5c:	d107      	bne.n	7b6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    7b5e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    7b62:	7840      	ldrb	r0, [r0, #1]
    7b64:	f88c 0000 	strb.w	r0, [ip]
    7b68:	e007      	b.n	7b7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    7b6a:	4640      	mov	r0, r8
    7b6c:	e00c      	b.n	7b88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    7b6e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    7b72:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    7b76:	7840      	ldrb	r0, [r0, #1]
    7b78:	7048      	strb	r0, [r1, #1]
    7b7a:	b124      	cbz	r4, 7b86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    7b7c:	2100      	movs	r1, #0
    7b7e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    7b82:	f3af 8000 	nop.w
    7b86:	4638      	mov	r0, r7
    7b88:	46c3      	mov	fp, r8
    7b8a:	ea10 0f0a 	tst.w	r0, sl
    7b8e:	bf18      	it	ne
    7b90:	46bb      	movne	fp, r7
    7b92:	2800      	cmp	r0, #0
    7b94:	d04e      	beq.n	7c34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    7b96:	b124      	cbz	r4, 7ba2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    7b98:	2100      	movs	r1, #0
    7b9a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    7b9e:	f3af 8000 	nop.w
    7ba2:	4632      	mov	r2, r6
    7ba4:	2001      	movs	r0, #1
    7ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
    7ba8:	f7ff f826 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    7bac:	b124      	cbz	r4, 7bb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    7bae:	2100      	movs	r1, #0
    7bb0:	f240 70c2 	movw	r0, #1986	; 0x7c2
    7bb4:	f3af 8000 	nop.w
    7bb8:	4847      	ldr	r0, [pc, #284]	; (7cd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    7bba:	2800      	cmp	r0, #0
    7bbc:	bf18      	it	ne
    7bbe:	f3af 8000 	nopne.w
    7bc2:	f3ef 8010 	mrs	r0, PRIMASK
    7bc6:	b672      	cpsid	i
    7bc8:	9006      	str	r0, [sp, #24]
    7bca:	b124      	cbz	r4, 7bd6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    7bcc:	2100      	movs	r1, #0
    7bce:	f240 70c7 	movw	r0, #1991	; 0x7c7
    7bd2:	f3af 8000 	nop.w
    7bd6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    7bda:	f88d 0008 	strb.w	r0, [sp, #8]
    7bde:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7be2:	b138      	cbz	r0, 7bf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    7be4:	2c00      	cmp	r4, #0
    7be6:	bf1c      	itt	ne
    7be8:	2100      	movne	r1, #0
    7bea:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    7bee:	f43f af40 	beq.w	7a72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    7bf2:	e781      	b.n	7af8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    7bf4:	f1bb 0f00 	cmp.w	fp, #0
    7bf8:	d009      	beq.n	7c0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    7bfa:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    7bfe:	2820      	cmp	r0, #32
    7c00:	d105      	bne.n	7c0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    7c02:	4631      	mov	r1, r6
    7c04:	2002      	movs	r0, #2
    7c06:	f7ff f829 	bl	6c5c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc5c>
    7c0a:	9008      	str	r0, [sp, #32]
    7c0c:	b1f8      	cbz	r0, 7c4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    7c0e:	b124      	cbz	r4, 7c1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    7c10:	2100      	movs	r1, #0
    7c12:	f240 70df 	movw	r0, #2015	; 0x7df
    7c16:	f3af 8000 	nop.w
    7c1a:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    7c1e:	e000      	b.n	7c22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    7c20:	e008      	b.n	7c34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    7c22:	ea27 0000 	bic.w	r0, r7, r0
    7c26:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    7c2a:	20ff      	movs	r0, #255	; 0xff
    7c2c:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    7c30:	2001      	movs	r0, #1
    7c32:	9007      	str	r0, [sp, #28]
    7c34:	b124      	cbz	r4, 7c40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    7c36:	2100      	movs	r1, #0
    7c38:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    7c3c:	f3af 8000 	nop.w
    7c40:	9808      	ldr	r0, [sp, #32]
    7c42:	4e26      	ldr	r6, [pc, #152]	; (7cdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    7c44:	2802      	cmp	r0, #2
    7c46:	d009      	beq.n	7c5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    7c48:	2801      	cmp	r0, #1
    7c4a:	d027      	beq.n	7c9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    7c4c:	e02b      	b.n	7ca6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    7c4e:	b354      	cbz	r4, 7ca6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    7c50:	2100      	movs	r1, #0
    7c52:	f240 70da 	movw	r0, #2010	; 0x7da
    7c56:	f3af 8000 	nop.w
    7c5a:	e7ec      	b.n	7c36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    7c5c:	f000 feaa 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    7c60:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    7c64:	ebb3 0c00 	subs.w	ip, r3, r0
    7c68:	eb72 0c01 	sbcs.w	ip, r2, r1
    7c6c:	d204      	bcs.n	7c78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    7c6e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    7c72:	2070      	movs	r0, #112	; 0x70
    7c74:	f001 fc34 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7c78:	1a18      	subs	r0, r3, r0
    7c7a:	eb62 0101 	sbc.w	r1, r2, r1
    7c7e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    7c82:	f171 0100 	sbcs.w	r1, r1, #0
    7c86:	d304      	bcc.n	7c92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    7c88:	f240 71ef 	movw	r1, #2031	; 0x7ef
    7c8c:	2070      	movs	r0, #112	; 0x70
    7c8e:	f001 fc27 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7c92:	f004 f9b2 	bl	bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    7c96:	6871      	ldr	r1, [r6, #4]
    7c98:	b129      	cbz	r1, 7ca6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    7c9a:	e003      	b.n	7ca4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    7c9c:	6871      	ldr	r1, [r6, #4]
    7c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ca2:	b101      	cbz	r1, 7ca6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    7ca4:	4788      	blx	r1
    7ca6:	9806      	ldr	r0, [sp, #24]
    7ca8:	b148      	cbz	r0, 7cbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    7caa:	b124      	cbz	r4, 7cb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    7cac:	2100      	movs	r1, #0
    7cae:	f240 70ff 	movw	r0, #2047	; 0x7ff
    7cb2:	f3af 8000 	nop.w
    7cb6:	9807      	ldr	r0, [sp, #28]
    7cb8:	b00d      	add	sp, #52	; 0x34
    7cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cbe:	4805      	ldr	r0, [pc, #20]	; (7cd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    7cc0:	2800      	cmp	r0, #0
    7cc2:	bf18      	it	ne
    7cc4:	f3af 8000 	nopne.w
    7cc8:	b662      	cpsie	i
    7cca:	e7ee      	b.n	7caa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    7ccc:	20000f30 	.word	0x20000f30
	...
    7cdc:	20000124 	.word	0x20000124

00007ce0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    7ce0:	b510      	push	{r4, lr}
    7ce2:	2820      	cmp	r0, #32
    7ce4:	d211      	bcs.n	7d0a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    7ce6:	490e      	ldr	r1, [pc, #56]	; (7d20 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    7ce8:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    7cec:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    7cf0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    7cf4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    7cf8:	b13b      	cbz	r3, 7d0a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    7cfa:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    7cfe:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    7d02:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    7d06:	2a01      	cmp	r2, #1
    7d08:	d001      	beq.n	7d0e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    7d0a:	2000      	movs	r0, #0
    7d0c:	bd10      	pop	{r4, pc}
    7d0e:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    7d12:	4601      	mov	r1, r0
    7d14:	2000      	movs	r0, #0
    7d16:	f7fe ff6f 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    7d1a:	2001      	movs	r0, #1
    7d1c:	bd10      	pop	{r4, pc}
    7d1e:	0000      	.short	0x0000
    7d20:	20000f30 	.word	0x20000f30

00007d24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    7d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d28:	4e86      	ldr	r6, [pc, #536]	; (7f44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    7d2a:	4680      	mov	r8, r0
    7d2c:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    7d30:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    7d34:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    7d38:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    7d3c:	2800      	cmp	r0, #0
    7d3e:	d071      	beq.n	7e24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    7d40:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    7d44:	4d80      	ldr	r5, [pc, #512]	; (7f48 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    7d46:	b125      	cbz	r5, 7d52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    7d48:	2100      	movs	r1, #0
    7d4a:	f640 307b 	movw	r0, #2939	; 0xb7b
    7d4e:	f3af 8000 	nop.w
    7d52:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    7d56:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    7d5a:	2801      	cmp	r0, #1
    7d5c:	d018      	beq.n	7d90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    7d5e:	b2c0      	uxtb	r0, r0
    7d60:	2804      	cmp	r0, #4
    7d62:	bf1c      	itt	ne
    7d64:	2805      	cmpne	r0, #5
    7d66:	2806      	cmpne	r0, #6
    7d68:	d061      	beq.n	7e2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    7d6a:	b12d      	cbz	r5, 7d78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    7d6c:	f04f 0100 	mov.w	r1, #0
    7d70:	f640 3087 	movw	r0, #2951	; 0xb87
    7d74:	f3af 8000 	nop.w
    7d78:	f004 fa75 	bl	c266 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7d7c:	b125      	cbz	r5, 7d88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    7d7e:	2100      	movs	r1, #0
    7d80:	f640 308b 	movw	r0, #2955	; 0xb8b
    7d84:	f3af 8000 	nop.w
    7d88:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    7d8c:	2801      	cmp	r0, #1
    7d8e:	d1e6      	bne.n	7d5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    7d90:	2401      	movs	r4, #1
    7d92:	b125      	cbz	r5, 7d9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    7d94:	2100      	movs	r1, #0
    7d96:	f640 3092 	movw	r0, #2962	; 0xb92
    7d9a:	f3af 8000 	nop.w
    7d9e:	2c00      	cmp	r4, #0
    7da0:	d04b      	beq.n	7e3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    7da2:	2000      	movs	r0, #0
    7da4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    7da8:	b125      	cbz	r5, 7db4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    7daa:	2100      	movs	r1, #0
    7dac:	f640 3097 	movw	r0, #2967	; 0xb97
    7db0:	f3af 8000 	nop.w
    7db4:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    7db8:	2001      	movs	r0, #1
    7dba:	ea20 090b 	bic.w	r9, r0, fp
    7dbe:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    7dc2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    7dc6:	2240      	movs	r2, #64	; 0x40
    7dc8:	f004 faa7 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7dcc:	b125      	cbz	r5, 7dd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    7dce:	2100      	movs	r1, #0
    7dd0:	f240 503c 	movw	r0, #1340	; 0x53c
    7dd4:	f3af 8000 	nop.w
    7dd8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    7ddc:	eb00 0a06 	add.w	sl, r0, r6
    7de0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    7de4:	4430      	add	r0, r6
    7de6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    7de8:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    7dec:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    7df0:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    7df4:	b125      	cbz	r5, 7e00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    7df6:	2100      	movs	r1, #0
    7df8:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    7dfc:	f3af 8000 	nop.w
    7e00:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    7e04:	f88d 0000 	strb.w	r0, [sp]
    7e08:	f89d 0000 	ldrb.w	r0, [sp]
    7e0c:	b1e0      	cbz	r0, 7e48 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    7e0e:	2d00      	cmp	r5, #0
    7e10:	bf1c      	itt	ne
    7e12:	2100      	movne	r1, #0
    7e14:	f640 309d 	movwne	r0, #2973	; 0xb9d
    7e18:	d0bb      	beq.n	7d92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    7e1a:	bf00      	nop
    7e1c:	f3af 8000 	nop.w
    7e20:	e7b7      	b.n	7d92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    7e22:	e7ff      	b.n	7e24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    7e24:	f640 3172 	movw	r1, #2930	; 0xb72
    7e28:	2070      	movs	r0, #112	; 0x70
    7e2a:	f001 fb59 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7e2e:	464a      	mov	r2, r9
    7e30:	4641      	mov	r1, r8
    7e32:	2001      	movs	r0, #1
    7e34:	f7fe fee0 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    7e38:	e7a0      	b.n	7d7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    7e3a:	4844      	ldr	r0, [pc, #272]	; (7f4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    7e3c:	2800      	cmp	r0, #0
    7e3e:	bf18      	it	ne
    7e40:	f3af 8000 	nopne.w
    7e44:	b662      	cpsie	i
    7e46:	e7ac      	b.n	7da2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    7e48:	b125      	cbz	r5, 7e54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    7e4a:	2100      	movs	r1, #0
    7e4c:	f640 30a1 	movw	r0, #2977	; 0xba1
    7e50:	f3af 8000 	nop.w
    7e54:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    7e58:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    7e5c:	4640      	mov	r0, r8
    7e5e:	461c      	mov	r4, r3
    7e60:	f04f 0b20 	mov.w	fp, #32
    7e64:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    7e68:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    7e6c:	e004      	b.n	7e78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    7e6e:	46a3      	mov	fp, r4
    7e70:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    7e74:	f89c 4001 	ldrb.w	r4, [ip, #1]
    7e78:	4284      	cmp	r4, r0
    7e7a:	d002      	beq.n	7e82 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    7e7c:	2c20      	cmp	r4, #32
    7e7e:	d02b      	beq.n	7ed8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    7e80:	e7f5      	b.n	7e6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    7e82:	2c20      	cmp	r4, #32
    7e84:	d028      	beq.n	7ed8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    7e86:	42a3      	cmp	r3, r4
    7e88:	d104      	bne.n	7e94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    7e8a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    7e8e:	7840      	ldrb	r0, [r0, #1]
    7e90:	7008      	strb	r0, [r1, #0]
    7e92:	e005      	b.n	7ea0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    7e94:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    7e98:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    7e9c:	7840      	ldrb	r0, [r0, #1]
    7e9e:	7048      	strb	r0, [r1, #1]
    7ea0:	f1ba 0f00 	cmp.w	sl, #0
    7ea4:	d011      	beq.n	7eca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    7ea6:	b125      	cbz	r5, 7eb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    7ea8:	2100      	movs	r1, #0
    7eaa:	f240 409c 	movw	r0, #1180	; 0x49c
    7eae:	f3af 8000 	nop.w
    7eb2:	f89a 0000 	ldrb.w	r0, [sl]
    7eb6:	42a0      	cmp	r0, r4
    7eb8:	d107      	bne.n	7eca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    7eba:	b125      	cbz	r5, 7ec6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    7ebc:	2100      	movs	r1, #0
    7ebe:	f240 409f 	movw	r0, #1183	; 0x49f
    7ec2:	f3af 8000 	nop.w
    7ec6:	f88a b000 	strb.w	fp, [sl]
    7eca:	b15d      	cbz	r5, 7ee4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    7ecc:	2100      	movs	r1, #0
    7ece:	f240 40a4 	movw	r0, #1188	; 0x4a4
    7ed2:	f3af 8000 	nop.w
    7ed6:	e000      	b.n	7eda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    7ed8:	b125      	cbz	r5, 7ee4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    7eda:	2100      	movs	r1, #0
    7edc:	f640 30a5 	movw	r0, #2981	; 0xba5
    7ee0:	f3af 8000 	nop.w
    7ee4:	481a      	ldr	r0, [pc, #104]	; (7f50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    7ee6:	2800      	cmp	r0, #0
    7ee8:	bf18      	it	ne
    7eea:	f3af 8000 	nopne.w
    7eee:	f3ef 8410 	mrs	r4, PRIMASK
    7ef2:	b672      	cpsid	i
    7ef4:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    7ef8:	f88d 0000 	strb.w	r0, [sp]
    7efc:	f89d 0000 	ldrb.w	r0, [sp]
    7f00:	b138      	cbz	r0, 7f12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    7f02:	2d00      	cmp	r5, #0
    7f04:	bf1c      	itt	ne
    7f06:	2100      	movne	r1, #0
    7f08:	f640 30ab 	movwne	r0, #2987	; 0xbab
    7f0c:	f43f af41 	beq.w	7d92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    7f10:	e784      	b.n	7e1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    7f12:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    7f16:	20ff      	movs	r0, #255	; 0xff
    7f18:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    7f1c:	b154      	cbz	r4, 7f34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    7f1e:	2d00      	cmp	r5, #0
    7f20:	bf08      	it	eq
    7f22:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f26:	2100      	movs	r1, #0
    7f28:	f640 30b8 	movw	r0, #3000	; 0xbb8
    7f2c:	f3af 8000 	nop.w
    7f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f34:	4805      	ldr	r0, [pc, #20]	; (7f4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    7f36:	2800      	cmp	r0, #0
    7f38:	bf18      	it	ne
    7f3a:	f3af 8000 	nopne.w
    7f3e:	b662      	cpsie	i
    7f40:	e7ed      	b.n	7f1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    7f42:	0000      	.short	0x0000
    7f44:	20000f30 	.word	0x20000f30
	...

00007f54 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    7f54:	b570      	push	{r4, r5, r6, lr}
    7f56:	460d      	mov	r5, r1
    7f58:	4606      	mov	r6, r0
    7f5a:	f001 fa37 	bl	93cc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    7f5e:	480d      	ldr	r0, [pc, #52]	; (7f94 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    7f60:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    7f64:	2400      	movs	r4, #0
    7f66:	3880      	subs	r0, #128	; 0x80
    7f68:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    7f6c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    7f70:	b129      	cbz	r1, 7f7e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    7f72:	1c61      	adds	r1, r4, #1
    7f74:	b2cc      	uxtb	r4, r1
    7f76:	2c20      	cmp	r4, #32
    7f78:	d3f8      	bcc.n	7f6c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    7f7a:	2020      	movs	r0, #32
    7f7c:	bd70      	pop	{r4, r5, r6, pc}
    7f7e:	4806      	ldr	r0, [pc, #24]	; (7f98 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    7f80:	4621      	mov	r1, r4
    7f82:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    7f86:	e9c0 6500 	strd	r6, r5, [r0]
    7f8a:	2001      	movs	r0, #1
    7f8c:	f7fe fe34 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    7f90:	4620      	mov	r0, r4
    7f92:	bd70      	pop	{r4, r5, r6, pc}
    7f94:	20000f30 	.word	0x20000f30
    7f98:	20000ab0 	.word	0x20000ab0

00007f9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    7f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fa0:	f000 fd08 	bl	89b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    7fa4:	4606      	mov	r6, r0
    7fa6:	460f      	mov	r7, r1
    7fa8:	f000 fe48 	bl	8c3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    7fac:	4c65      	ldr	r4, [pc, #404]	; (8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
    7fae:	6860      	ldr	r0, [r4, #4]
    7fb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    7fb4:	bf1c      	itt	ne
    7fb6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7fba:	6060      	strne	r0, [r4, #4]
    7fbc:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    7fc0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>
    7fc4:	2500      	movs	r5, #0
    7fc6:	bb10      	cbnz	r0, 800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7fc8:	f44f 710c 	mov.w	r1, #560	; 0x230
    7fcc:	6920      	ldr	r0, [r4, #16]
    7fce:	f001 f9e9 	bl	93a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7fd2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    7fd6:	68a1      	ldr	r1, [r4, #8]
    7fd8:	1818      	adds	r0, r3, r0
    7fda:	eb45 0305 	adc.w	r3, r5, r5
    7fde:	1809      	adds	r1, r1, r0
    7fe0:	eb42 0003 	adc.w	r0, r2, r3
    7fe4:	1a71      	subs	r1, r6, r1
    7fe6:	eb77 0000 	sbcs.w	r0, r7, r0
    7fea:	d310      	bcc.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7fec:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    7ff0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    7ff4:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    7ff8:	6840      	ldr	r0, [r0, #4]
    7ffa:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    7ffe:	680a      	ldr	r2, [r1, #0]
    8000:	2108      	movs	r1, #8
    8002:	4790      	blx	r2
    8004:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    8008:	2070      	movs	r0, #112	; 0x70
    800a:	f001 fa69 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    800e:	7e60      	ldrb	r0, [r4, #25]
    8010:	b180      	cbz	r0, 8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    8012:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    8016:	f88d 0000 	strb.w	r0, [sp]
    801a:	f89d 0000 	ldrb.w	r0, [sp]
    801e:	b148      	cbz	r0, 8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    8020:	f000 fc3e 	bl	88a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    8024:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    8028:	b150      	cbz	r0, 8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    802a:	f240 31cd 	movw	r1, #973	; 0x3cd
    802e:	2070      	movs	r0, #112	; 0x70
    8030:	f001 fa56 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8034:	1cf0      	adds	r0, r6, #3
    8036:	f147 0100 	adc.w	r1, r7, #0
    803a:	f000 fb0b 	bl	8654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    803e:	e7f1      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    8040:	2001      	movs	r0, #1
    8042:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    8046:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    804a:	2820      	cmp	r0, #32
    804c:	d020      	beq.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    804e:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    8052:	2020      	movs	r0, #32
    8054:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    8058:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    805c:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    8060:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    8064:	6025      	str	r5, [r4, #0]
    8066:	f000 fec9 	bl	8dfc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    806a:	f884 0020 	strb.w	r0, [r4, #32]
    806e:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    8072:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    8076:	eb00 0a04 	add.w	sl, r0, r4
    807a:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    807e:	2820      	cmp	r0, #32
    8080:	d01c      	beq.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    8082:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    8086:	f89b 001a 	ldrb.w	r0, [fp, #26]
    808a:	2801      	cmp	r0, #1
    808c:	d005      	beq.n	809a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
    808e:	e015      	b.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    8090:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    8094:	2070      	movs	r0, #112	; 0x70
    8096:	f001 fa23 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    809a:	2201      	movs	r2, #1
    809c:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    80a0:	4630      	mov	r0, r6
    80a2:	4639      	mov	r1, r7
    80a4:	f7fe f914 	bl	62d0 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2d0>
    80a8:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    80ac:	1a12      	subs	r2, r2, r0
    80ae:	eb73 0201 	sbcs.w	r2, r3, r1
    80b2:	bf24      	itt	cs
    80b4:	f10b 0208 	addcs.w	r2, fp, #8
    80b8:	e9c2 0100 	strdcs	r0, r1, [r2]
    80bc:	4641      	mov	r1, r8
    80be:	2001      	movs	r0, #1
    80c0:	f7fe fdcc 	bl	6c5c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xc5c>
    80c4:	0007      	movs	r7, r0
    80c6:	d0f9      	beq.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    80c8:	4820      	ldr	r0, [pc, #128]	; (814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>)
    80ca:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    80ce:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    80d2:	2802      	cmp	r0, #2
    80d4:	d104      	bne.n	80e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    80d6:	4642      	mov	r2, r8
    80d8:	4649      	mov	r1, r9
    80da:	2006      	movs	r0, #6
    80dc:	f7fe fd8c 	bl	6bf8 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xbf8>
    80e0:	20ff      	movs	r0, #255	; 0xff
    80e2:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    80e6:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    80ea:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8150 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150>
    80ee:	2820      	cmp	r0, #32
    80f0:	bf1c      	itt	ne
    80f2:	f898 0001 	ldrbne.w	r0, [r8, #1]
    80f6:	f001 fac5 	blne	9684 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    80fa:	f894 0020 	ldrb.w	r0, [r4, #32]
    80fe:	b128      	cbz	r0, 810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    8100:	f000 fe58 	bl	8db4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    8104:	f884 5020 	strb.w	r5, [r4, #32]
    8108:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    810c:	2f02      	cmp	r7, #2
    810e:	d00f      	beq.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    8110:	2f01      	cmp	r7, #1
    8112:	bf18      	it	ne
    8114:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    811c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    8120:	2900      	cmp	r1, #0
    8122:	bf08      	it	eq
    8124:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8128:	b001      	add	sp, #4
    812a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    812e:	4708      	bx	r1
    8130:	68a0      	ldr	r0, [r4, #8]
    8132:	1b80      	subs	r0, r0, r6
    8134:	f003 ff61 	bl	bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8138:	f8d8 1004 	ldr.w	r1, [r8, #4]
    813c:	2900      	cmp	r1, #0
    813e:	d1f3      	bne.n	8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>
    8140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8144:	20000f30 	.word	0x20000f30
    8148:	20000ab0 	.word	0x20000ab0
    814c:	20000eb0 	.word	0x20000eb0
    8150:	20000124 	.word	0x20000124

00008154 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    8154:	b570      	push	{r4, r5, r6, lr}
    8156:	4c42      	ldr	r4, [pc, #264]	; (8260 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    8158:	4605      	mov	r5, r0
    815a:	b082      	sub	sp, #8
    815c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    8160:	2820      	cmp	r0, #32
    8162:	d008      	beq.n	8176 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    8164:	6860      	ldr	r0, [r4, #4]
    8166:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    816a:	d009      	beq.n	8180 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    816c:	f640 21b6 	movw	r1, #2742	; 0xab6
    8170:	2070      	movs	r0, #112	; 0x70
    8172:	f001 f9b5 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8176:	f640 21b5 	movw	r1, #2741	; 0xab5
    817a:	2070      	movs	r0, #112	; 0x70
    817c:	f001 f9b0 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8180:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    8184:	4937      	ldr	r1, [pc, #220]	; (8264 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    8186:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    818a:	68b0      	ldr	r0, [r6, #8]
    818c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8190:	f003 ff33 	bl	bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8194:	4602      	mov	r2, r0
    8196:	8af0      	ldrh	r0, [r6, #22]
    8198:	7d31      	ldrb	r1, [r6, #20]
    819a:	4b33      	ldr	r3, [pc, #204]	; (8268 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    819c:	4408      	add	r0, r1
    819e:	1c40      	adds	r0, r0, #1
    81a0:	1811      	adds	r1, r2, r0
    81a2:	429a      	cmp	r2, r3
    81a4:	d817      	bhi.n	81d6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    81a6:	4a31      	ldr	r2, [pc, #196]	; (826c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    81a8:	4290      	cmp	r0, r2
    81aa:	dc1b      	bgt.n	81e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    81ac:	f1c2 0c00 	rsb	ip, r2, #0
    81b0:	4560      	cmp	r0, ip
    81b2:	db1e      	blt.n	81f2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    81b4:	0056      	lsls	r6, r2, #1
    81b6:	428e      	cmp	r6, r1
    81b8:	bfdc      	itt	le
    81ba:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    81be:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    81c2:	dd05      	ble.n	81d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    81c4:	2900      	cmp	r1, #0
    81c6:	bfbc      	itt	lt
    81c8:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    81cc:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    81d0:	1948      	adds	r0, r1, r5
    81d2:	4299      	cmp	r1, r3
    81d4:	d904      	bls.n	81e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    81d6:	f240 517f 	movw	r1, #1407	; 0x57f
    81da:	2070      	movs	r0, #112	; 0x70
    81dc:	f001 f980 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    81e0:	4295      	cmp	r5, r2
    81e2:	dd04      	ble.n	81ee <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    81e4:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    81e8:	2070      	movs	r0, #112	; 0x70
    81ea:	f001 f979 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    81ee:	4565      	cmp	r5, ip
    81f0:	da04      	bge.n	81fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    81f2:	f240 5181 	movw	r1, #1409	; 0x581
    81f6:	2070      	movs	r0, #112	; 0x70
    81f8:	f001 f972 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    81fc:	4286      	cmp	r6, r0
    81fe:	bfdc      	itt	le
    8200:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    8204:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    8208:	dd05      	ble.n	8216 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    820a:	2800      	cmp	r0, #0
    820c:	bfbc      	itt	lt
    820e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    8212:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    8216:	aa01      	add	r2, sp, #4
    8218:	4669      	mov	r1, sp
    821a:	f000 f8eb 	bl	83f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    821e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    8222:	280f      	cmp	r0, #15
    8224:	bf8c      	ite	hi
    8226:	2001      	movhi	r0, #1
    8228:	2000      	movls	r0, #0
    822a:	9900      	ldr	r1, [sp, #0]
    822c:	4408      	add	r0, r1
    822e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    8232:	6061      	str	r1, [r4, #4]
    8234:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    8238:	f88d 0000 	strb.w	r0, [sp]
    823c:	f89d 0000 	ldrb.w	r0, [sp]
    8240:	2800      	cmp	r0, #0
    8242:	bf04      	itt	eq
    8244:	b002      	addeq	sp, #8
    8246:	bd70      	popeq	{r4, r5, r6, pc}
    8248:	2005      	movs	r0, #5
    824a:	f000 fbd5 	bl	89f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    824e:	2800      	cmp	r0, #0
    8250:	bf1c      	itt	ne
    8252:	b002      	addne	sp, #8
    8254:	bd70      	popne	{r4, r5, r6, pc}
    8256:	f640 21bd 	movw	r1, #2749	; 0xabd
    825a:	2070      	movs	r0, #112	; 0x70
    825c:	f001 f940 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8260:	20000f30 	.word	0x20000f30
    8264:	20000ab0 	.word	0x20000ab0
    8268:	1e847fff 	.word	0x1e847fff
    826c:	0f424000 	.word	0x0f424000

00008270 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    8270:	b570      	push	{r4, r5, r6, lr}
    8272:	4c1e      	ldr	r4, [pc, #120]	; (82ec <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    8274:	2120      	movs	r1, #32
    8276:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    827a:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    827e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    8282:	2000      	movs	r0, #0
    8284:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    8288:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    828c:	1e42      	subs	r2, r0, #1
    828e:	e9c4 0200 	strd	r0, r2, [r4]
    8292:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    8296:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    829a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    829e:	f884 0020 	strb.w	r0, [r4, #32]
    82a2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    82a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    82aa:	1e41      	subs	r1, r0, #1
    82ac:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    82b0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    82b4:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    82b8:	2210      	movs	r2, #16
    82ba:	7088      	strb	r0, [r1, #2]
    82bc:	f801 0f04 	strb.w	r0, [r1, #4]!
    82c0:	1e52      	subs	r2, r2, #1
    82c2:	d1fa      	bne.n	82ba <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    82c4:	f000 fda4 	bl	8e10 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    82c8:	4d09      	ldr	r5, [pc, #36]	; (82f0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    82ca:	2601      	movs	r6, #1
    82cc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    82d0:	20ff      	movs	r0, #255	; 0xff
    82d2:	7028      	strb	r0, [r5, #0]
    82d4:	4807      	ldr	r0, [pc, #28]	; (82f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    82d6:	f001 f9b7 	bl	9648 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    82da:	7068      	strb	r0, [r5, #1]
    82dc:	f001 fa22 	bl	9724 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    82e0:	60a8      	str	r0, [r5, #8]
    82e2:	f000 fd27 	bl	8d34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    82e6:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    82ea:	bd70      	pop	{r4, r5, r6, pc}
    82ec:	20000f30 	.word	0x20000f30
    82f0:	20000124 	.word	0x20000124
    82f4:	00006b29 	.word	0x00006b29

000082f8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    82f8:	0e03      	lsrs	r3, r0, #24
    82fa:	b430      	push	{r4, r5}
    82fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    8300:	f8df c038 	ldr.w	ip, [pc, #56]	; 833c <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    8304:	0e09      	lsrs	r1, r1, #24
    8306:	fba3 250c 	umull	r2, r5, r3, ip
    830a:	fb01 510c 	mla	r1, r1, ip, r5
    830e:	2400      	movs	r4, #0
    8310:	fb03 1104 	mla	r1, r3, r4, r1
    8314:	f647 73ff 	movw	r3, #32767	; 0x7fff
    8318:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    831c:	f643 5c09 	movw	ip, #15625	; 0x3d09
    8320:	fb13 f30c 	smulbb	r3, r3, ip
    8324:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8328:	fb10 f00c 	smulbb	r0, r0, ip
    832c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    8330:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    8334:	1880      	adds	r0, r0, r2
    8336:	4161      	adcs	r1, r4
    8338:	bc30      	pop	{r4, r5}
    833a:	4770      	bx	lr
    833c:	1e848000 	.word	0x1e848000

00008340 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    8340:	b570      	push	{r4, r5, r6, lr}
    8342:	b084      	sub	sp, #16
    8344:	4615      	mov	r5, r2
    8346:	aa01      	add	r2, sp, #4
    8348:	461c      	mov	r4, r3
    834a:	9200      	str	r2, [sp, #0]
    834c:	9e08      	ldr	r6, [sp, #32]
    834e:	ab02      	add	r3, sp, #8
    8350:	4a17      	ldr	r2, [pc, #92]	; (83b0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    8352:	f003 ffd3 	bl	c2fc <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    8356:	9801      	ldr	r0, [sp, #4]
    8358:	f248 6237 	movw	r2, #34359	; 0x8637
    835c:	0b41      	lsrs	r1, r0, #13
    835e:	4351      	muls	r1, r2
    8360:	0c09      	lsrs	r1, r1, #16
    8362:	4a14      	ldr	r2, [pc, #80]	; (83b4 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    8364:	024b      	lsls	r3, r1, #9
    8366:	fb01 0102 	mla	r1, r1, r2, r0
    836a:	4813      	ldr	r0, [pc, #76]	; (83b8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    836c:	4348      	muls	r0, r1
    836e:	0d42      	lsrs	r2, r0, #21
    8370:	1898      	adds	r0, r3, r2
    8372:	f643 5309 	movw	r3, #15625	; 0x3d09
    8376:	fb12 f303 	smulbb	r3, r2, r3
    837a:	f503 7280 	add.w	r2, r3, #256	; 0x100
    837e:	f643 5c08 	movw	ip, #15624	; 0x3d08
    8382:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    8386:	4463      	add	r3, ip
    8388:	b2d2      	uxtb	r2, r2
    838a:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    838e:	bf84      	itt	hi
    8390:	2200      	movhi	r2, #0
    8392:	1c40      	addhi	r0, r0, #1
    8394:	7032      	strb	r2, [r6, #0]
    8396:	9b02      	ldr	r3, [sp, #8]
    8398:	0a19      	lsrs	r1, r3, #8
    839a:	061b      	lsls	r3, r3, #24
    839c:	1818      	adds	r0, r3, r0
    839e:	f141 0100 	adc.w	r1, r1, #0
    83a2:	e9c4 0100 	strd	r0, r1, [r4]
    83a6:	9801      	ldr	r0, [sp, #4]
    83a8:	6028      	str	r0, [r5, #0]
    83aa:	b004      	add	sp, #16
    83ac:	bd70      	pop	{r4, r5, r6, pc}
    83ae:	0000      	.short	0x0000
    83b0:	1e848000 	.word	0x1e848000
    83b4:	ffffc2f7 	.word	0xffffc2f7
    83b8:	00010c6f 	.word	0x00010c6f

000083bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    83bc:	0b41      	lsrs	r1, r0, #13
    83be:	f248 6237 	movw	r2, #34359	; 0x8637
    83c2:	4351      	muls	r1, r2
    83c4:	0c0a      	lsrs	r2, r1, #16
    83c6:	4b09      	ldr	r3, [pc, #36]	; (83ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    83c8:	0251      	lsls	r1, r2, #9
    83ca:	fb02 0203 	mla	r2, r2, r3, r0
    83ce:	4808      	ldr	r0, [pc, #32]	; (83f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    83d0:	4350      	muls	r0, r2
    83d2:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    83d6:	306e      	adds	r0, #110	; 0x6e
    83d8:	0d40      	lsrs	r0, r0, #21
    83da:	425b      	negs	r3, r3
    83dc:	fb10 f303 	smulbb	r3, r0, r3
    83e0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    83e4:	bf88      	it	hi
    83e6:	1c49      	addhi	r1, r1, #1
    83e8:	4408      	add	r0, r1
    83ea:	4770      	bx	lr
    83ec:	ffffc2f7 	.word	0xffffc2f7
    83f0:	00010c6f 	.word	0x00010c6f

000083f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    83f4:	0b43      	lsrs	r3, r0, #13
    83f6:	f248 6c37 	movw	ip, #34359	; 0x8637
    83fa:	fb03 f30c 	mul.w	r3, r3, ip
    83fe:	b430      	push	{r4, r5}
    8400:	0c1b      	lsrs	r3, r3, #16
    8402:	f8df c044 	ldr.w	ip, [pc, #68]	; 8448 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    8406:	025c      	lsls	r4, r3, #9
    8408:	fb03 030c 	mla	r3, r3, ip, r0
    840c:	480f      	ldr	r0, [pc, #60]	; (844c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    840e:	4358      	muls	r0, r3
    8410:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    8414:	eb04 000c 	add.w	r0, r4, ip
    8418:	f643 5409 	movw	r4, #15625	; 0x3d09
    841c:	fb1c f404 	smulbb	r4, ip, r4
    8420:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    8424:	f643 5508 	movw	r5, #15624	; 0x3d08
    8428:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    842c:	442c      	add	r4, r5
    842e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    8432:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    8436:	bf84      	itt	hi
    8438:	f04f 0c00 	movhi.w	ip, #0
    843c:	1c40      	addhi	r0, r0, #1
    843e:	6008      	str	r0, [r1, #0]
    8440:	f882 c000 	strb.w	ip, [r2]
    8444:	bc30      	pop	{r4, r5}
    8446:	4770      	bx	lr
    8448:	ffffc2f7 	.word	0xffffc2f7
    844c:	00010c6f 	.word	0x00010c6f

00008450 <MPSL_IRQ_RTC0_Handler>:
    8450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8454:	2400      	movs	r4, #0
    8456:	f8df 9080 	ldr.w	r9, [pc, #128]	; 84d8 <MPSL_IRQ_RTC0_Handler+0x88>
    845a:	4d20      	ldr	r5, [pc, #128]	; (84dc <MPSL_IRQ_RTC0_Handler+0x8c>)
    845c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    8460:	f44f 78a0 	mov.w	r8, #320	; 0x140
    8464:	ea4f 0604 	mov.w	r6, r4
    8468:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    846c:	fa07 f004 	lsl.w	r0, r7, r4
    8470:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    8474:	4202      	tst	r2, r0
    8476:	d01a      	beq.n	84ae <MPSL_IRQ_RTC0_Handler+0x5e>
    8478:	4a18      	ldr	r2, [pc, #96]	; (84dc <MPSL_IRQ_RTC0_Handler+0x8c>)
    847a:	5852      	ldr	r2, [r2, r1]
    847c:	b1ba      	cbz	r2, 84ae <MPSL_IRQ_RTC0_Handler+0x5e>
    847e:	506e      	str	r6, [r5, r1]
    8480:	00a1      	lsls	r1, r4, #2
    8482:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    8486:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    848a:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    848e:	f8d9 2000 	ldr.w	r2, [r9]
    8492:	1a89      	subs	r1, r1, r2
    8494:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8498:	2902      	cmp	r1, #2
    849a:	d302      	bcc.n	84a2 <MPSL_IRQ_RTC0_Handler+0x52>
    849c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    84a0:	d905      	bls.n	84ae <MPSL_IRQ_RTC0_Handler+0x5e>
    84a2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    84a6:	1d20      	adds	r0, r4, #4
    84a8:	b2c0      	uxtb	r0, r0
    84aa:	f7fe fd9b 	bl	6fe4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    84ae:	1c60      	adds	r0, r4, #1
    84b0:	b2c4      	uxtb	r4, r0
    84b2:	2c03      	cmp	r4, #3
    84b4:	d3d8      	bcc.n	8468 <MPSL_IRQ_RTC0_Handler+0x18>
    84b6:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    84ba:	b128      	cbz	r0, 84c8 <MPSL_IRQ_RTC0_Handler+0x78>
    84bc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    84c0:	4807      	ldr	r0, [pc, #28]	; (84e0 <MPSL_IRQ_RTC0_Handler+0x90>)
    84c2:	6881      	ldr	r1, [r0, #8]
    84c4:	1c49      	adds	r1, r1, #1
    84c6:	6081      	str	r1, [r0, #8]
    84c8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    84cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
    84d0:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    84d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84d8:	4000b504 	.word	0x4000b504
    84dc:	4000b000 	.word	0x4000b000
    84e0:	20000028 	.word	0x20000028

000084e4 <MPSL_IRQ_TIMER0_Handler>:
    84e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84e8:	4d38      	ldr	r5, [pc, #224]	; (85cc <MPSL_IRQ_TIMER0_Handler+0xe8>)
    84ea:	7828      	ldrb	r0, [r5, #0]
    84ec:	2804      	cmp	r0, #4
    84ee:	d068      	beq.n	85c2 <MPSL_IRQ_TIMER0_Handler+0xde>
    84f0:	1ca8      	adds	r0, r5, #2
    84f2:	2201      	movs	r2, #1
    84f4:	7801      	ldrb	r1, [r0, #0]
    84f6:	b159      	cbz	r1, 8510 <MPSL_IRQ_TIMER0_Handler+0x2c>
    84f8:	2901      	cmp	r1, #1
    84fa:	bf08      	it	eq
    84fc:	706a      	strbeq	r2, [r5, #1]
    84fe:	d002      	beq.n	8506 <MPSL_IRQ_TIMER0_Handler+0x22>
    8500:	7869      	ldrb	r1, [r5, #1]
    8502:	2900      	cmp	r1, #0
    8504:	d058      	beq.n	85b8 <MPSL_IRQ_TIMER0_Handler+0xd4>
    8506:	2102      	movs	r1, #2
    8508:	7001      	strb	r1, [r0, #0]
    850a:	7840      	ldrb	r0, [r0, #1]
    850c:	f000 fb2e 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8510:	4c2f      	ldr	r4, [pc, #188]	; (85d0 <MPSL_IRQ_TIMER0_Handler+0xec>)
    8512:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    8516:	f04f 0800 	mov.w	r8, #0
    851a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    851e:	f44f 7780 	mov.w	r7, #256	; 0x100
    8522:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    8526:	d00a      	beq.n	853e <MPSL_IRQ_TIMER0_Handler+0x5a>
    8528:	482a      	ldr	r0, [pc, #168]	; (85d4 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    852a:	6800      	ldr	r0, [r0, #0]
    852c:	b138      	cbz	r0, 853e <MPSL_IRQ_TIMER0_Handler+0x5a>
    852e:	2003      	movs	r0, #3
    8530:	f000 fb1c 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8534:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    8538:	2003      	movs	r0, #3
    853a:	f7fe fd53 	bl	6fe4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    853e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    8542:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    8546:	d00a      	beq.n	855e <MPSL_IRQ_TIMER0_Handler+0x7a>
    8548:	4823      	ldr	r0, [pc, #140]	; (85d8 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    854a:	6800      	ldr	r0, [r0, #0]
    854c:	b138      	cbz	r0, 855e <MPSL_IRQ_TIMER0_Handler+0x7a>
    854e:	2002      	movs	r0, #2
    8550:	f000 fb0c 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8554:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    8558:	2002      	movs	r0, #2
    855a:	f7fe fd43 	bl	6fe4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    855e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    8562:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    8566:	d00a      	beq.n	857e <MPSL_IRQ_TIMER0_Handler+0x9a>
    8568:	481c      	ldr	r0, [pc, #112]	; (85dc <MPSL_IRQ_TIMER0_Handler+0xf8>)
    856a:	6800      	ldr	r0, [r0, #0]
    856c:	b138      	cbz	r0, 857e <MPSL_IRQ_TIMER0_Handler+0x9a>
    856e:	2001      	movs	r0, #1
    8570:	f000 fafc 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    8574:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    8578:	2001      	movs	r0, #1
    857a:	f7fe fd33 	bl	6fe4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    857e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    8582:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8586:	bf08      	it	eq
    8588:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    858c:	4814      	ldr	r0, [pc, #80]	; (85e0 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    858e:	6800      	ldr	r0, [r0, #0]
    8590:	2800      	cmp	r0, #0
    8592:	bf08      	it	eq
    8594:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    8598:	2000      	movs	r0, #0
    859a:	f000 fae7 	bl	8b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    859e:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    85a2:	2004      	movs	r0, #4
    85a4:	7028      	strb	r0, [r5, #0]
    85a6:	f8c5 8004 	str.w	r8, [r5, #4]
    85aa:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    85ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    85b2:	2000      	movs	r0, #0
    85b4:	f7fe bd16 	b.w	6fe4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    85b8:	f240 5169 	movw	r1, #1385	; 0x569
    85bc:	206c      	movs	r0, #108	; 0x6c
    85be:	f000 ff8f 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    85c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    85c6:	2007      	movs	r0, #7
    85c8:	f7fe bd0c 	b.w	6fe4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    85cc:	20000028 	.word	0x20000028
    85d0:	40008000 	.word	0x40008000
    85d4:	4000814c 	.word	0x4000814c
    85d8:	40008148 	.word	0x40008148
    85dc:	40008144 	.word	0x40008144
    85e0:	40008140 	.word	0x40008140
    85e4:	2201      	movs	r2, #1
    85e6:	0211      	lsls	r1, r2, #8
    85e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    85ec:	2000      	movs	r0, #0
    85ee:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    85f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    85f6:	f3bf 8f4f 	dsb	sy
    85fa:	f3bf 8f6f 	isb	sy
    85fe:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    8602:	490e      	ldr	r1, [pc, #56]	; (863c <MPSL_IRQ_TIMER0_Handler+0x158>)
    8604:	f841 2f04 	str.w	r2, [r1, #4]!
    8608:	1e43      	subs	r3, r0, #1
    860a:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    860e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    8612:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    8616:	4b0a      	ldr	r3, [pc, #40]	; (8640 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    8618:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    861c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    8620:	1d1b      	adds	r3, r3, #4
    8622:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    8626:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    862a:	1d1b      	adds	r3, r3, #4
    862c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    8630:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    8634:	60ca      	str	r2, [r1, #12]
    8636:	4903      	ldr	r1, [pc, #12]	; (8644 <MPSL_IRQ_TIMER0_Handler+0x160>)
    8638:	7048      	strb	r0, [r1, #1]
    863a:	4770      	bx	lr
    863c:	40008000 	.word	0x40008000
    8640:	40008004 	.word	0x40008004
    8644:	20000028 	.word	0x20000028

00008648 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    8648:	4801      	ldr	r0, [pc, #4]	; (8650 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    864a:	6800      	ldr	r0, [r0, #0]
    864c:	4770      	bx	lr
    864e:	0000      	.short	0x0000
    8650:	4000b504 	.word	0x4000b504

00008654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    8654:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8658:	f8df 8130 	ldr.w	r8, [pc, #304]	; 878c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    865c:	4604      	mov	r4, r0
    865e:	f1a8 0702 	sub.w	r7, r8, #2
    8662:	460e      	mov	r6, r1
    8664:	f898 c000 	ldrb.w	ip, [r8]
    8668:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    866c:	f1bc 0f01 	cmp.w	ip, #1
    8670:	d106      	bne.n	8680 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    8672:	ea81 0204 	eor.w	r2, r1, r4
    8676:	4070      	eors	r0, r6
    8678:	4310      	orrs	r0, r2
    867a:	bf08      	it	eq
    867c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    8680:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    8684:	4a42      	ldr	r2, [pc, #264]	; (8790 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    8686:	6010      	str	r0, [r2, #0]
    8688:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    868c:	f1bc 0f00 	cmp.w	ip, #0
    8690:	bf07      	ittee	eq
    8692:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    8696:	2200      	moveq	r2, #0
    8698:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    869c:	2201      	movne	r2, #1
    869e:	483d      	ldr	r0, [pc, #244]	; (8794 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    86a0:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    86a4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    86a8:	2500      	movs	r5, #0
    86aa:	f44f 79a0 	mov.w	r9, #320	; 0x140
    86ae:	2a02      	cmp	r2, #2
    86b0:	d207      	bcs.n	86c2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    86b2:	bf00      	nop
    86b4:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    86b8:	50c5      	str	r5, [r0, r3]
    86ba:	1c52      	adds	r2, r2, #1
    86bc:	b2d2      	uxtb	r2, r2
    86be:	2a02      	cmp	r2, #2
    86c0:	d3f8      	bcc.n	86b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    86c2:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    86c6:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    86ca:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    86ce:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    86d2:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    86d6:	4a30      	ldr	r2, [pc, #192]	; (8798 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    86d8:	f8d2 9000 	ldr.w	r9, [r2]
    86dc:	eba3 0909 	sub.w	r9, r3, r9
    86e0:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    86e4:	f04f 0901 	mov.w	r9, #1
    86e8:	f1ba 0f02 	cmp.w	sl, #2
    86ec:	d32e      	bcc.n	874c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    86ee:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    86f2:	d82b      	bhi.n	874c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    86f4:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    86f8:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    86fc:	f1bc 0f00 	cmp.w	ip, #0
    8700:	d005      	beq.n	870e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    8702:	6810      	ldr	r0, [r2, #0]
    8704:	1a08      	subs	r0, r1, r0
    8706:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    870a:	2802      	cmp	r0, #2
    870c:	d3f9      	bcc.n	8702 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    870e:	f8c7 9004 	str.w	r9, [r7, #4]
    8712:	703d      	strb	r5, [r7, #0]
    8714:	f7ff ff66 	bl	85e4 <MPSL_IRQ_TIMER0_Handler+0x100>
    8718:	4820      	ldr	r0, [pc, #128]	; (879c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    871a:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    871e:	f365 0101 	bfi	r1, r5, #0, #2
    8722:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    8726:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    872a:	2102      	movs	r1, #2
    872c:	f361 0201 	bfi	r2, r1, #0, #2
    8730:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    8734:	2110      	movs	r1, #16
    8736:	fa91 f1a1 	rbit	r1, r1
    873a:	fab1 f181 	clz	r1, r1
    873e:	2909      	cmp	r1, #9
    8740:	d909      	bls.n	8756 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    8742:	f240 3155 	movw	r1, #853	; 0x355
    8746:	a016      	add	r0, pc, #88	; (adr r0, 87a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    8748:	f000 fe9e 	bl	9488 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    874c:	f240 31b2 	movw	r1, #946	; 0x3b2
    8750:	206c      	movs	r0, #108	; 0x6c
    8752:	f000 fec5 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8756:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    875a:	f8c0 900c 	str.w	r9, [r0, #12]
    875e:	6879      	ldr	r1, [r7, #4]
    8760:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8764:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    8768:	f44f 7180 	mov.w	r1, #256	; 0x100
    876c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8770:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8774:	490d      	ldr	r1, [pc, #52]	; (87ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    8776:	0480      	lsls	r0, r0, #18
    8778:	6008      	str	r0, [r1, #0]
    877a:	e9c7 4604 	strd	r4, r6, [r7, #16]
    877e:	2004      	movs	r0, #4
    8780:	f888 0001 	strb.w	r0, [r8, #1]
    8784:	f888 9000 	strb.w	r9, [r8]
    8788:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    878c:	2000002a 	.word	0x2000002a
    8790:	4001f508 	.word	0x4001f508
    8794:	4000b000 	.word	0x4000b000
    8798:	4000b504 	.word	0x4000b504
    879c:	40008000 	.word	0x40008000
    87a0:	5f66726e 	.word	0x5f66726e
    87a4:	656d6974 	.word	0x656d6974
    87a8:	00682e72 	.word	0x00682e72
    87ac:	4001f504 	.word	0x4001f504

000087b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    87b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    87b4:	4c31      	ldr	r4, [pc, #196]	; (887c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    87b6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    87ba:	ea82 0c00 	eor.w	ip, r2, r0
    87be:	404b      	eors	r3, r1
    87c0:	ea5c 0303 	orrs.w	r3, ip, r3
    87c4:	bf14      	ite	ne
    87c6:	2301      	movne	r3, #1
    87c8:	2300      	moveq	r3, #0
    87ca:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8880 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    87ce:	f89c 8000 	ldrb.w	r8, [ip]
    87d2:	f1b8 0f02 	cmp.w	r8, #2
    87d6:	d002      	beq.n	87de <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    87d8:	2b00      	cmp	r3, #0
    87da:	d03f      	beq.n	885c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    87dc:	e003      	b.n	87e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    87de:	2b00      	cmp	r3, #0
    87e0:	bf08      	it	eq
    87e2:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87e6:	7863      	ldrb	r3, [r4, #1]
    87e8:	b3bb      	cbz	r3, 885a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    87ea:	4d26      	ldr	r5, [pc, #152]	; (8884 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    87ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    87f0:	602b      	str	r3, [r5, #0]
    87f2:	4e25      	ldr	r6, [pc, #148]	; (8888 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    87f4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    87f8:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    87fc:	462f      	mov	r7, r5
    87fe:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    8802:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    8806:	2500      	movs	r5, #0
    8808:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    880c:	4d1f      	ldr	r5, [pc, #124]	; (888c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    880e:	f8d5 9000 	ldr.w	r9, [r5]
    8812:	eba3 0909 	sub.w	r9, r3, r9
    8816:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    881a:	f1b9 0f02 	cmp.w	r9, #2
    881e:	d327      	bcc.n	8870 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    8820:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    8824:	d824      	bhi.n	8870 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    8826:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    882a:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    882e:	f1b8 0f00 	cmp.w	r8, #0
    8832:	d005      	beq.n	8840 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    8834:	682b      	ldr	r3, [r5, #0]
    8836:	1ad3      	subs	r3, r2, r3
    8838:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    883c:	2b02      	cmp	r3, #2
    883e:	d3f9      	bcc.n	8834 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    8840:	4d13      	ldr	r5, [pc, #76]	; (8890 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    8842:	2202      	movs	r2, #2
    8844:	0753      	lsls	r3, r2, #29
    8846:	602b      	str	r3, [r5, #0]
    8848:	e9c4 0104 	strd	r0, r1, [r4, #16]
    884c:	2004      	movs	r0, #4
    884e:	f88c 0001 	strb.w	r0, [ip, #1]
    8852:	f88c 2000 	strb.w	r2, [ip]
    8856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    885a:	e004      	b.n	8866 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    885c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    8860:	206c      	movs	r0, #108	; 0x6c
    8862:	f000 fe3d 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8866:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    886a:	206c      	movs	r0, #108	; 0x6c
    886c:	f000 fe38 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8870:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    8874:	206c      	movs	r0, #108	; 0x6c
    8876:	f000 fe33 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    887a:	0000      	.short	0x0000
    887c:	20000028 	.word	0x20000028
    8880:	2000002a 	.word	0x2000002a
    8884:	4001f508 	.word	0x4001f508
    8888:	4000b000 	.word	0x4000b000
    888c:	4000b504 	.word	0x4000b504
    8890:	4001f504 	.word	0x4001f504

00008894 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    8894:	4901      	ldr	r1, [pc, #4]	; (889c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    8896:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    889a:	4770      	bx	lr
    889c:	20000028 	.word	0x20000028

000088a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    88a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    88a4:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 899c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    88a8:	f89c 4000 	ldrb.w	r4, [ip]
    88ac:	2c00      	cmp	r4, #0
    88ae:	bf07      	ittee	eq
    88b0:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    88b4:	2100      	moveq	r1, #0
    88b6:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    88ba:	2101      	movne	r1, #1
    88bc:	4838      	ldr	r0, [pc, #224]	; (89a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    88be:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    88c2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    88c6:	2300      	movs	r3, #0
    88c8:	2902      	cmp	r1, #2
    88ca:	bf38      	it	cc
    88cc:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    88d0:	d207      	bcs.n	88e2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    88d2:	bf00      	nop
    88d4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    88d8:	5083      	str	r3, [r0, r2]
    88da:	1c49      	adds	r1, r1, #1
    88dc:	b2c9      	uxtb	r1, r1
    88de:	2902      	cmp	r1, #2
    88e0:	d3f8      	bcc.n	88d4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    88e2:	2c02      	cmp	r4, #2
    88e4:	d004      	beq.n	88f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    88e6:	f240 31db 	movw	r1, #987	; 0x3db
    88ea:	206c      	movs	r0, #108	; 0x6c
    88ec:	f000 fdf8 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    88f0:	f3ef 8210 	mrs	r2, PRIMASK
    88f4:	b672      	cpsid	i
    88f6:	4c2b      	ldr	r4, [pc, #172]	; (89a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    88f8:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    88fc:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    8900:	b12d      	cbz	r5, 890e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    8902:	68a1      	ldr	r1, [r4, #8]
    8904:	1c49      	adds	r1, r1, #1
    8906:	60a1      	str	r1, [r4, #8]
    8908:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    890c:	e7f4      	b.n	88f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    890e:	68a0      	ldr	r0, [r4, #8]
    8910:	b902      	cbnz	r2, 8914 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    8912:	b662      	cpsie	i
    8914:	0a02      	lsrs	r2, r0, #8
    8916:	0600      	lsls	r0, r0, #24
    8918:	1840      	adds	r0, r0, r1
    891a:	eb42 0103 	adc.w	r1, r2, r3
    891e:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    8922:	1cc0      	adds	r0, r0, #3
    8924:	f141 0100 	adc.w	r1, r1, #0
    8928:	4f1f      	ldr	r7, [pc, #124]	; (89a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    892a:	2601      	movs	r6, #1
    892c:	4d1f      	ldr	r5, [pc, #124]	; (89ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    892e:	ea80 0902 	eor.w	r9, r0, r2
    8932:	ea81 0808 	eor.w	r8, r1, r8
    8936:	ea59 0808 	orrs.w	r8, r9, r8
    893a:	d00e      	beq.n	895a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    893c:	f8d7 8000 	ldr.w	r8, [r7]
    8940:	eba2 0808 	sub.w	r8, r2, r8
    8944:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    8948:	f1b8 0f04 	cmp.w	r8, #4
    894c:	d305      	bcc.n	895a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    894e:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    8952:	d802      	bhi.n	895a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    8954:	f7ff fe7e 	bl	8654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    8958:	e01b      	b.n	8992 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    895a:	6838      	ldr	r0, [r7, #0]
    895c:	1a10      	subs	r0, r2, r0
    895e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8962:	2802      	cmp	r0, #2
    8964:	d313      	bcc.n	898e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    8966:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    896a:	d810      	bhi.n	898e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    896c:	4910      	ldr	r1, [pc, #64]	; (89b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    896e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8972:	6008      	str	r0, [r1, #0]
    8974:	6066      	str	r6, [r4, #4]
    8976:	7023      	strb	r3, [r4, #0]
    8978:	606e      	str	r6, [r5, #4]
    897a:	60ee      	str	r6, [r5, #12]
    897c:	0040      	lsls	r0, r0, #1
    897e:	1f09      	subs	r1, r1, #4
    8980:	6008      	str	r0, [r1, #0]
    8982:	2004      	movs	r0, #4
    8984:	f88c 0001 	strb.w	r0, [ip, #1]
    8988:	f88c 6000 	strb.w	r6, [ip]
    898c:	e001      	b.n	8992 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    898e:	6066      	str	r6, [r4, #4]
    8990:	7023      	strb	r3, [r4, #0]
    8992:	6860      	ldr	r0, [r4, #4]
    8994:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    8998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    899c:	2000002a 	.word	0x2000002a
    89a0:	4000b000 	.word	0x4000b000
    89a4:	20000028 	.word	0x20000028
    89a8:	4000b504 	.word	0x4000b504
    89ac:	40008000 	.word	0x40008000
    89b0:	4001f508 	.word	0x4001f508

000089b4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    89b4:	b410      	push	{r4}
    89b6:	f3ef 8410 	mrs	r4, PRIMASK
    89ba:	b672      	cpsid	i
    89bc:	4a0c      	ldr	r2, [pc, #48]	; (89f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    89be:	490d      	ldr	r1, [pc, #52]	; (89f4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    89c0:	f04f 0c00 	mov.w	ip, #0
    89c4:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    89c8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    89cc:	b12b      	cbz	r3, 89da <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    89ce:	6888      	ldr	r0, [r1, #8]
    89d0:	1c40      	adds	r0, r0, #1
    89d2:	6088      	str	r0, [r1, #8]
    89d4:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    89d8:	e7f4      	b.n	89c4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    89da:	6889      	ldr	r1, [r1, #8]
    89dc:	b904      	cbnz	r4, 89e0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    89de:	b662      	cpsie	i
    89e0:	0a0a      	lsrs	r2, r1, #8
    89e2:	0609      	lsls	r1, r1, #24
    89e4:	1808      	adds	r0, r1, r0
    89e6:	bc10      	pop	{r4}
    89e8:	eb42 010c 	adc.w	r1, r2, ip
    89ec:	4770      	bx	lr
    89ee:	0000      	.short	0x0000
    89f0:	4000b000 	.word	0x4000b000
    89f4:	20000028 	.word	0x20000028

000089f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    89f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89fc:	4a56      	ldr	r2, [pc, #344]	; (8b58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    89fe:	2501      	movs	r5, #1
    8a00:	2400      	movs	r4, #0
    8a02:	f892 c000 	ldrb.w	ip, [r2]
    8a06:	7852      	ldrb	r2, [r2, #1]
    8a08:	f44f 76a0 	mov.w	r6, #320	; 0x140
    8a0c:	2807      	cmp	r0, #7
    8a0e:	d27d      	bcs.n	8b0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    8a10:	e8df f000 	tbb	[pc, r0]
    8a14:	04040404 	.word	0x04040404
    8a18:	00606060 	.word	0x00606060
    8a1c:	4b4f      	ldr	r3, [pc, #316]	; (8b5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    8a1e:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    8a22:	43ff      	mvns	r7, r7
    8a24:	ea77 0708 	orns	r7, r7, r8
    8a28:	bf04      	itt	eq
    8a2a:	785b      	ldrbeq	r3, [r3, #1]
    8a2c:	2b00      	cmpeq	r3, #0
    8a2e:	d003      	beq.n	8a38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    8a30:	f1bc 0f02 	cmp.w	ip, #2
    8a34:	d005      	beq.n	8a42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    8a36:	e026      	b.n	8a86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    8a38:	f44f 6186 	mov.w	r1, #1072	; 0x430
    8a3c:	206c      	movs	r0, #108	; 0x6c
    8a3e:	f000 fd4f 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8a42:	1f13      	subs	r3, r2, #4
    8a44:	b2db      	uxtb	r3, r3
    8a46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    8a4a:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    8a4e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    8a52:	2300      	movs	r3, #0
    8a54:	f1bc 0f01 	cmp.w	ip, #1
    8a58:	d003      	beq.n	8a62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    8a5a:	f1bc 0f02 	cmp.w	ip, #2
    8a5e:	d008      	beq.n	8a72 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    8a60:	e00e      	b.n	8a80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    8a62:	2a04      	cmp	r2, #4
    8a64:	bf24      	itt	cs
    8a66:	6837      	ldrcs	r7, [r6, #0]
    8a68:	2f00      	cmpcs	r7, #0
    8a6a:	bf08      	it	eq
    8a6c:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    8a70:	e006      	b.n	8a80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    8a72:	2a04      	cmp	r2, #4
    8a74:	bf24      	itt	cs
    8a76:	6837      	ldrcs	r7, [r6, #0]
    8a78:	2f00      	cmpcs	r7, #0
    8a7a:	bf08      	it	eq
    8a7c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    8a80:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    8a84:	d1e5      	bne.n	8a52 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    8a86:	4b36      	ldr	r3, [pc, #216]	; (8b60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    8a88:	f100 0210 	add.w	r2, r0, #16
    8a8c:	fa05 f202 	lsl.w	r2, r5, r2
    8a90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    8a94:	f04f 0c40 	mov.w	ip, #64	; 0x40
    8a98:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    8a9c:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    8aa0:	449c      	add	ip, r3
    8aa2:	f8cc 5000 	str.w	r5, [ip]
    8aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aaa:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    8aae:	eba1 0c0c 	sub.w	ip, r1, ip
    8ab2:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    8ab6:	f1bc 0f03 	cmp.w	ip, #3
    8aba:	bf3e      	ittt	cc
    8abc:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    8ac0:	2000      	movcc	r0, #0
    8ac2:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ac6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    8aca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    8ace:	2001      	movs	r0, #1
    8ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ad4:	f1bc 0f00 	cmp.w	ip, #0
    8ad8:	d006      	beq.n	8ae8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    8ada:	4282      	cmp	r2, r0
    8adc:	d104      	bne.n	8ae8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    8ade:	f44f 618a 	mov.w	r1, #1104	; 0x450
    8ae2:	206c      	movs	r0, #108	; 0x6c
    8ae4:	f000 fcfc 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8ae8:	1f00      	subs	r0, r0, #4
    8aea:	b2c2      	uxtb	r2, r0
    8aec:	2a03      	cmp	r2, #3
    8aee:	d304      	bcc.n	8afa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    8af0:	f44f 7127 	mov.w	r1, #668	; 0x29c
    8af4:	206c      	movs	r0, #108	; 0x6c
    8af6:	f000 fcf3 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8afa:	4b1a      	ldr	r3, [pc, #104]	; (8b64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    8afc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    8b00:	4090      	lsls	r0, r2
    8b02:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    8b06:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    8b0a:	e000      	b.n	8b0e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    8b0c:	e01f      	b.n	8b4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    8b0e:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    8b12:	f843 400c 	str.w	r4, [r3, ip]
    8b16:	f8df c050 	ldr.w	ip, [pc, #80]	; 8b68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    8b1a:	f8dc c000 	ldr.w	ip, [ip]
    8b1e:	eba1 0c0c 	sub.w	ip, r1, ip
    8b22:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    8b26:	f1bc 0f02 	cmp.w	ip, #2
    8b2a:	d30d      	bcc.n	8b48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    8b2c:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    8b30:	d80a      	bhi.n	8b48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    8b32:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8b36:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    8b3a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    8b3e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    8b42:	4628      	mov	r0, r5
    8b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b48:	4620      	mov	r0, r4
    8b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b4e:	f240 4154 	movw	r1, #1108	; 0x454
    8b52:	206c      	movs	r0, #108	; 0x6c
    8b54:	f000 fcc4 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8b58:	2000002a 	.word	0x2000002a
    8b5c:	20000028 	.word	0x20000028
    8b60:	40008000 	.word	0x40008000
    8b64:	4000b000 	.word	0x4000b000
    8b68:	4000b504 	.word	0x4000b504

00008b6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    8b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b6e:	2101      	movs	r1, #1
    8b70:	2600      	movs	r6, #0
    8b72:	f44f 77a0 	mov.w	r7, #320	; 0x140
    8b76:	2807      	cmp	r0, #7
    8b78:	d24a      	bcs.n	8c10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    8b7a:	e8df f000 	tbb	[pc, r0]
    8b7e:	0404      	.short	0x0404
    8b80:	18180404 	.word	0x18180404
    8b84:	0018      	.short	0x0018
    8b86:	f100 0210 	add.w	r2, r0, #16
    8b8a:	fa01 f202 	lsl.w	r2, r1, r2
    8b8e:	4923      	ldr	r1, [pc, #140]	; (8c1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    8b90:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    8b94:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    8b98:	2200      	movs	r2, #0
    8b9a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    8b9e:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    8ba2:	508e      	str	r6, [r1, r2]
    8ba4:	491e      	ldr	r1, [pc, #120]	; (8c20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    8ba6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8baa:	9000      	str	r0, [sp, #0]
    8bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8bae:	4d1d      	ldr	r5, [pc, #116]	; (8c24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    8bb0:	1f01      	subs	r1, r0, #4
    8bb2:	b2cc      	uxtb	r4, r1
    8bb4:	7829      	ldrb	r1, [r5, #0]
    8bb6:	b181      	cbz	r1, 8bda <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    8bb8:	786a      	ldrb	r2, [r5, #1]
    8bba:	4282      	cmp	r2, r0
    8bbc:	d10d      	bne.n	8bda <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    8bbe:	4a1a      	ldr	r2, [pc, #104]	; (8c28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    8bc0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    8bc4:	6010      	str	r0, [r2, #0]
    8bc6:	2901      	cmp	r1, #1
    8bc8:	bf08      	it	eq
    8bca:	f7ff fd0b 	bleq	85e4 <MPSL_IRQ_TIMER0_Handler+0x100>
    8bce:	702e      	strb	r6, [r5, #0]
    8bd0:	4a16      	ldr	r2, [pc, #88]	; (8c2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    8bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8bd6:	e9c2 0004 	strd	r0, r0, [r2, #16]
    8bda:	4915      	ldr	r1, [pc, #84]	; (8c30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    8bdc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    8be0:	40a0      	lsls	r0, r4
    8be2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    8be6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    8bea:	00a0      	lsls	r0, r4, #2
    8bec:	4408      	add	r0, r1
    8bee:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8bf2:	4a10      	ldr	r2, [pc, #64]	; (8c34 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    8bf4:	6812      	ldr	r2, [r2, #0]
    8bf6:	1a80      	subs	r0, r0, r2
    8bf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8bfc:	2802      	cmp	r0, #2
    8bfe:	bf24      	itt	cs
    8c00:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    8c04:	500e      	strcs	r6, [r1, r0]
    8c06:	480c      	ldr	r0, [pc, #48]	; (8c38 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    8c08:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8c0c:	9000      	str	r0, [sp, #0]
    8c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c10:	f240 41e2 	movw	r1, #1250	; 0x4e2
    8c14:	206c      	movs	r0, #108	; 0x6c
    8c16:	f000 fc63 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8c1a:	0000      	.short	0x0000
    8c1c:	40008000 	.word	0x40008000
    8c20:	40008140 	.word	0x40008140
    8c24:	2000002a 	.word	0x2000002a
    8c28:	4001f508 	.word	0x4001f508
    8c2c:	20000028 	.word	0x20000028
    8c30:	4000b000 	.word	0x4000b000
    8c34:	4000b504 	.word	0x4000b504
    8c38:	4000b140 	.word	0x4000b140

00008c3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    8c3c:	481a      	ldr	r0, [pc, #104]	; (8ca8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    8c3e:	7800      	ldrb	r0, [r0, #0]
    8c40:	2800      	cmp	r0, #0
    8c42:	bf07      	ittee	eq
    8c44:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    8c48:	2100      	moveq	r1, #0
    8c4a:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    8c4e:	2101      	movne	r1, #1
    8c50:	4a16      	ldr	r2, [pc, #88]	; (8cac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    8c52:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    8c56:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    8c5a:	2000      	movs	r0, #0
    8c5c:	2902      	cmp	r1, #2
    8c5e:	bf38      	it	cc
    8c60:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    8c64:	d207      	bcs.n	8c76 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    8c66:	bf00      	nop
    8c68:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    8c6c:	50d0      	str	r0, [r2, r3]
    8c6e:	1c49      	adds	r1, r1, #1
    8c70:	b2c9      	uxtb	r1, r1
    8c72:	2902      	cmp	r1, #2
    8c74:	d3f8      	bcc.n	8c68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    8c76:	490e      	ldr	r1, [pc, #56]	; (8cb0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    8c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c7c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    8c80:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8c84:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    8c88:	1d0a      	adds	r2, r1, #4
    8c8a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8c8e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    8c92:	1d12      	adds	r2, r2, #4
    8c94:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8c98:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    8c9c:	1d12      	adds	r2, r2, #4
    8c9e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8ca2:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    8ca6:	4770      	bx	lr
    8ca8:	2000002a 	.word	0x2000002a
    8cac:	4000b000 	.word	0x4000b000
    8cb0:	40008000 	.word	0x40008000

00008cb4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    8cb4:	b570      	push	{r4, r5, r6, lr}
    8cb6:	f3ef 8110 	mrs	r1, PRIMASK
    8cba:	b672      	cpsid	i
    8cbc:	2400      	movs	r4, #0
    8cbe:	4b0d      	ldr	r3, [pc, #52]	; (8cf4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    8cc0:	4a0d      	ldr	r2, [pc, #52]	; (8cf8 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    8cc2:	bf00      	nop
    8cc4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    8cc8:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    8ccc:	f1bc 0f00 	cmp.w	ip, #0
    8cd0:	d005      	beq.n	8cde <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    8cd2:	6890      	ldr	r0, [r2, #8]
    8cd4:	1c40      	adds	r0, r0, #1
    8cd6:	6090      	str	r0, [r2, #8]
    8cd8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    8cdc:	e7f2      	b.n	8cc4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    8cde:	6895      	ldr	r5, [r2, #8]
    8ce0:	b901      	cbnz	r1, 8ce4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    8ce2:	b662      	cpsie	i
    8ce4:	f003 f989 	bl	bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8ce8:	4a04      	ldr	r2, [pc, #16]	; (8cfc <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    8cea:	4621      	mov	r1, r4
    8cec:	fbe5 0102 	umlal	r0, r1, r5, r2
    8cf0:	bd70      	pop	{r4, r5, r6, pc}
    8cf2:	0000      	.short	0x0000
    8cf4:	4000b000 	.word	0x4000b000
    8cf8:	20000028 	.word	0x20000028
    8cfc:	1e848000 	.word	0x1e848000

00008d00 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    8d00:	b510      	push	{r4, lr}
    8d02:	2807      	cmp	r0, #7
    8d04:	d20d      	bcs.n	8d22 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    8d06:	e8df f000 	tbb	[pc, r0]
    8d0a:	0404      	.short	0x0404
    8d0c:	06060404 	.word	0x06060404
    8d10:	0006      	.short	0x0006
    8d12:	4906      	ldr	r1, [pc, #24]	; (8d2c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    8d14:	e002      	b.n	8d1c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    8d16:	1f00      	subs	r0, r0, #4
    8d18:	4905      	ldr	r1, [pc, #20]	; (8d30 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    8d1a:	b2c0      	uxtb	r0, r0
    8d1c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    8d20:	bd10      	pop	{r4, pc}
    8d22:	f240 417b 	movw	r1, #1147	; 0x47b
    8d26:	206c      	movs	r0, #108	; 0x6c
    8d28:	f000 fbda 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d2c:	40008140 	.word	0x40008140
    8d30:	4000b140 	.word	0x4000b140

00008d34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    8d34:	b570      	push	{r4, r5, r6, lr}
    8d36:	481b      	ldr	r0, [pc, #108]	; (8da4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    8d38:	2400      	movs	r4, #0
    8d3a:	2104      	movs	r1, #4
    8d3c:	7004      	strb	r4, [r0, #0]
    8d3e:	1e80      	subs	r0, r0, #2
    8d40:	7001      	strb	r1, [r0, #0]
    8d42:	1f49      	subs	r1, r1, #5
    8d44:	e9c0 1104 	strd	r1, r1, [r0, #16]
    8d48:	6084      	str	r4, [r0, #8]
    8d4a:	f7ff fc4b 	bl	85e4 <MPSL_IRQ_TIMER0_Handler+0x100>
    8d4e:	2501      	movs	r5, #1
    8d50:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    8d54:	02eb      	lsls	r3, r5, #11
    8d56:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    8d5a:	f3bf 8f4f 	dsb	sy
    8d5e:	f3bf 8f6f 	isb	sy
    8d62:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    8d66:	4a10      	ldr	r2, [pc, #64]	; (8da8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    8d68:	6055      	str	r5, [r2, #4]
    8d6a:	6095      	str	r5, [r2, #8]
    8d6c:	480f      	ldr	r0, [pc, #60]	; (8dac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    8d6e:	6801      	ldr	r1, [r0, #0]
    8d70:	2900      	cmp	r1, #0
    8d72:	d1fc      	bne.n	8d6e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    8d74:	480e      	ldr	r0, [pc, #56]	; (8db0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    8d76:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    8d7a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    8d7e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    8d82:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    8d86:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    8d8a:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    8d8e:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    8d92:	6015      	str	r5, [r2, #0]
    8d94:	f44f 7082 	mov.w	r0, #260	; 0x104
    8d98:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    8d9c:	2002      	movs	r0, #2
    8d9e:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    8da2:	bd70      	pop	{r4, r5, r6, pc}
    8da4:	2000002a 	.word	0x2000002a
    8da8:	4000b000 	.word	0x4000b000
    8dac:	4000b504 	.word	0x4000b504
    8db0:	00070002 	.word	0x00070002

00008db4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    8db4:	4808      	ldr	r0, [pc, #32]	; (8dd8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    8db6:	f990 0000 	ldrsb.w	r0, [r0]
    8dba:	2800      	cmp	r0, #0
    8dbc:	bfb8      	it	lt
    8dbe:	4770      	bxlt	lr
    8dc0:	f000 011f 	and.w	r1, r0, #31
    8dc4:	2201      	movs	r2, #1
    8dc6:	fa02 f101 	lsl.w	r1, r2, r1
    8dca:	0940      	lsrs	r0, r0, #5
    8dcc:	0080      	lsls	r0, r0, #2
    8dce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8dd2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8dd6:	4770      	bx	lr
    8dd8:	2000019c 	.word	0x2000019c

00008ddc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    8ddc:	4803      	ldr	r0, [pc, #12]	; (8dec <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    8dde:	7800      	ldrb	r0, [r0, #0]
    8de0:	2803      	cmp	r0, #3
    8de2:	bf0c      	ite	eq
    8de4:	2001      	moveq	r0, #1
    8de6:	2000      	movne	r0, #0
    8de8:	4770      	bx	lr
    8dea:	0000      	.short	0x0000
    8dec:	20000174 	.word	0x20000174

00008df0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    8df0:	4801      	ldr	r0, [pc, #4]	; (8df8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    8df2:	8840      	ldrh	r0, [r0, #2]
    8df4:	4770      	bx	lr
    8df6:	0000      	.short	0x0000
    8df8:	20000174 	.word	0x20000174

00008dfc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    8dfc:	4803      	ldr	r0, [pc, #12]	; (8e0c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    8dfe:	7800      	ldrb	r0, [r0, #0]
    8e00:	2802      	cmp	r0, #2
    8e02:	bf16      	itet	ne
    8e04:	2803      	cmpne	r0, #3
    8e06:	2001      	moveq	r0, #1
    8e08:	2000      	movne	r0, #0
    8e0a:	4770      	bx	lr
    8e0c:	20000174 	.word	0x20000174

00008e10 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    8e10:	4802      	ldr	r0, [pc, #8]	; (8e1c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    8e12:	2100      	movs	r1, #0
    8e14:	7001      	strb	r1, [r0, #0]
    8e16:	8041      	strh	r1, [r0, #2]
    8e18:	4770      	bx	lr
    8e1a:	0000      	.short	0x0000
    8e1c:	20000174 	.word	0x20000174

00008e20 <MPSL_IRQ_CLOCK_Handler>:
    8e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e24:	4c16      	ldr	r4, [pc, #88]	; (8e80 <MPSL_IRQ_CLOCK_Handler+0x60>)
    8e26:	7a60      	ldrb	r0, [r4, #9]
    8e28:	2800      	cmp	r0, #0
    8e2a:	d027      	beq.n	8e7c <MPSL_IRQ_CLOCK_Handler+0x5c>
    8e2c:	f44f 7180 	mov.w	r1, #256	; 0x100
    8e30:	058d      	lsls	r5, r1, #22
    8e32:	4628      	mov	r0, r5
    8e34:	f003 f90c 	bl	c050 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    8e38:	4680      	mov	r8, r0
    8e3a:	f44f 7182 	mov.w	r1, #260	; 0x104
    8e3e:	4628      	mov	r0, r5
    8e40:	f003 f906 	bl	c050 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    8e44:	2600      	movs	r6, #0
    8e46:	4607      	mov	r7, r0
    8e48:	f1b8 0f00 	cmp.w	r8, #0
    8e4c:	d009      	beq.n	8e62 <MPSL_IRQ_CLOCK_Handler+0x42>
    8e4e:	2001      	movs	r0, #1
    8e50:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    8e54:	7920      	ldrb	r0, [r4, #4]
    8e56:	b120      	cbz	r0, 8e62 <MPSL_IRQ_CLOCK_Handler+0x42>
    8e58:	7126      	strb	r6, [r4, #4]
    8e5a:	69e0      	ldr	r0, [r4, #28]
    8e5c:	b108      	cbz	r0, 8e62 <MPSL_IRQ_CLOCK_Handler+0x42>
    8e5e:	4780      	blx	r0
    8e60:	61e6      	str	r6, [r4, #28]
    8e62:	b137      	cbz	r7, 8e72 <MPSL_IRQ_CLOCK_Handler+0x52>
    8e64:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    8e68:	2002      	movs	r0, #2
    8e6a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    8e6e:	f000 fa57 	bl	9320 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    8e72:	4640      	mov	r0, r8
    8e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8e78:	f000 b858 	b.w	8f2c <MPSL_IRQ_CLOCK_Handler+0x10c>
    8e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e80:	20000130 	.word	0x20000130
    8e84:	b510      	push	{r4, lr}
    8e86:	f003 f98d 	bl	c1a4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    8e8a:	b930      	cbnz	r0, 8e9a <MPSL_IRQ_CLOCK_Handler+0x7a>
    8e8c:	f003 f9ab 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8e90:	b918      	cbnz	r0, 8e9a <MPSL_IRQ_CLOCK_Handler+0x7a>
    8e92:	f003 f9de 	bl	c252 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8e96:	2800      	cmp	r0, #0
    8e98:	d002      	beq.n	8ea0 <MPSL_IRQ_CLOCK_Handler+0x80>
    8e9a:	4902      	ldr	r1, [pc, #8]	; (8ea4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    8e9c:	2002      	movs	r0, #2
    8e9e:	6008      	str	r0, [r1, #0]
    8ea0:	bd10      	pop	{r4, pc}
    8ea2:	0000      	.short	0x0000
    8ea4:	40000c34 	.word	0x40000c34
    8ea8:	b570      	push	{r4, r5, r6, lr}
    8eaa:	f000 f99b 	bl	91e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    8eae:	f000 fa9f 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8eb2:	4c09      	ldr	r4, [pc, #36]	; (8ed8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    8eb4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    8eb8:	b130      	cbz	r0, 8ec8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    8eba:	f7ff ffe3 	bl	8e84 <MPSL_IRQ_CLOCK_Handler+0x64>
    8ebe:	2001      	movs	r0, #1
    8ec0:	6128      	str	r0, [r5, #16]
    8ec2:	2004      	movs	r0, #4
    8ec4:	72a0      	strb	r0, [r4, #10]
    8ec6:	e004      	b.n	8ed2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    8ec8:	2003      	movs	r0, #3
    8eca:	72a0      	strb	r0, [r4, #10]
    8ecc:	2001      	movs	r0, #1
    8ece:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    8ed2:	2000      	movs	r0, #0
    8ed4:	71e0      	strb	r0, [r4, #7]
    8ed6:	bd70      	pop	{r4, r5, r6, pc}
    8ed8:	20000130 	.word	0x20000130
    8edc:	b570      	push	{r4, r5, r6, lr}
    8ede:	4c12      	ldr	r4, [pc, #72]	; (8f28 <MPSL_IRQ_CLOCK_Handler+0x108>)
    8ee0:	79a0      	ldrb	r0, [r4, #6]
    8ee2:	b1e0      	cbz	r0, 8f1e <MPSL_IRQ_CLOCK_Handler+0xfe>
    8ee4:	79e1      	ldrb	r1, [r4, #7]
    8ee6:	1e40      	subs	r0, r0, #1
    8ee8:	4281      	cmp	r1, r0
    8eea:	da18      	bge.n	8f1e <MPSL_IRQ_CLOCK_Handler+0xfe>
    8eec:	f000 fa80 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8ef0:	4605      	mov	r5, r0
    8ef2:	f000 fb69 	bl	95c8 <mpsl_temperature_get>
    8ef6:	79a1      	ldrb	r1, [r4, #6]
    8ef8:	2901      	cmp	r1, #1
    8efa:	d902      	bls.n	8f02 <MPSL_IRQ_CLOCK_Handler+0xe2>
    8efc:	79e1      	ldrb	r1, [r4, #7]
    8efe:	1c49      	adds	r1, r1, #1
    8f00:	71e1      	strb	r1, [r4, #7]
    8f02:	b10d      	cbz	r5, 8f08 <MPSL_IRQ_CLOCK_Handler+0xe8>
    8f04:	6961      	ldr	r1, [r4, #20]
    8f06:	e000      	b.n	8f0a <MPSL_IRQ_CLOCK_Handler+0xea>
    8f08:	6921      	ldr	r1, [r4, #16]
    8f0a:	1a41      	subs	r1, r0, r1
    8f0c:	2902      	cmp	r1, #2
    8f0e:	da02      	bge.n	8f16 <MPSL_IRQ_CLOCK_Handler+0xf6>
    8f10:	f111 0f02 	cmn.w	r1, #2
    8f14:	dc07      	bgt.n	8f26 <MPSL_IRQ_CLOCK_Handler+0x106>
    8f16:	b10d      	cbz	r5, 8f1c <MPSL_IRQ_CLOCK_Handler+0xfc>
    8f18:	6160      	str	r0, [r4, #20]
    8f1a:	e000      	b.n	8f1e <MPSL_IRQ_CLOCK_Handler+0xfe>
    8f1c:	6120      	str	r0, [r4, #16]
    8f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f22:	f7ff bfc1 	b.w	8ea8 <MPSL_IRQ_CLOCK_Handler+0x88>
    8f26:	bd70      	pop	{r4, r5, r6, pc}
    8f28:	20000130 	.word	0x20000130
    8f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f30:	4606      	mov	r6, r0
    8f32:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    8f36:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8f3a:	4628      	mov	r0, r5
    8f3c:	f003 f888 	bl	c050 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    8f40:	4680      	mov	r8, r0
    8f42:	f44f 7188 	mov.w	r1, #272	; 0x110
    8f46:	4628      	mov	r0, r5
    8f48:	f003 f882 	bl	c050 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    8f4c:	4c27      	ldr	r4, [pc, #156]	; (8fec <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    8f4e:	4682      	mov	sl, r0
    8f50:	7827      	ldrb	r7, [r4, #0]
    8f52:	f104 0008 	add.w	r0, r4, #8
    8f56:	f003 f8ef 	bl	c138 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    8f5a:	b110      	cbz	r0, 8f62 <MPSL_IRQ_CLOCK_Handler+0x142>
    8f5c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    8f60:	e016      	b.n	8f90 <MPSL_IRQ_CLOCK_Handler+0x170>
    8f62:	f04f 0901 	mov.w	r9, #1
    8f66:	b146      	cbz	r6, 8f7a <MPSL_IRQ_CLOCK_Handler+0x15a>
    8f68:	7aa0      	ldrb	r0, [r4, #10]
    8f6a:	2803      	cmp	r0, #3
    8f6c:	d105      	bne.n	8f7a <MPSL_IRQ_CLOCK_Handler+0x15a>
    8f6e:	2004      	movs	r0, #4
    8f70:	72a0      	strb	r0, [r4, #10]
    8f72:	f7ff ff87 	bl	8e84 <MPSL_IRQ_CLOCK_Handler+0x64>
    8f76:	f8c5 9010 	str.w	r9, [r5, #16]
    8f7a:	2600      	movs	r6, #0
    8f7c:	f1b8 0f00 	cmp.w	r8, #0
    8f80:	d018      	beq.n	8fb4 <MPSL_IRQ_CLOCK_Handler+0x194>
    8f82:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    8f86:	7aa0      	ldrb	r0, [r4, #10]
    8f88:	2804      	cmp	r0, #4
    8f8a:	d004      	beq.n	8f96 <MPSL_IRQ_CLOCK_Handler+0x176>
    8f8c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    8f90:	206d      	movs	r0, #109	; 0x6d
    8f92:	f000 faa5 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8f96:	f003 f905 	bl	c1a4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    8f9a:	b928      	cbnz	r0, 8fa8 <MPSL_IRQ_CLOCK_Handler+0x188>
    8f9c:	f003 f923 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8fa0:	b910      	cbnz	r0, 8fa8 <MPSL_IRQ_CLOCK_Handler+0x188>
    8fa2:	f003 f956 	bl	c252 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8fa6:	b108      	cbz	r0, 8fac <MPSL_IRQ_CLOCK_Handler+0x18c>
    8fa8:	4811      	ldr	r0, [pc, #68]	; (8ff0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    8faa:	6006      	str	r6, [r0, #0]
    8fac:	2002      	movs	r0, #2
    8fae:	72a0      	strb	r0, [r4, #10]
    8fb0:	f000 f8fc 	bl	91ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    8fb4:	f1ba 0f00 	cmp.w	sl, #0
    8fb8:	d008      	beq.n	8fcc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    8fba:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    8fbe:	7aa0      	ldrb	r0, [r4, #10]
    8fc0:	2802      	cmp	r0, #2
    8fc2:	d101      	bne.n	8fc8 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    8fc4:	f7ff ff8a 	bl	8edc <MPSL_IRQ_CLOCK_Handler+0xbc>
    8fc8:	f8c5 9014 	str.w	r9, [r5, #20]
    8fcc:	b13f      	cbz	r7, 8fde <MPSL_IRQ_CLOCK_Handler+0x1be>
    8fce:	7026      	strb	r6, [r4, #0]
    8fd0:	7aa0      	ldrb	r0, [r4, #10]
    8fd2:	2802      	cmp	r0, #2
    8fd4:	d101      	bne.n	8fda <MPSL_IRQ_CLOCK_Handler+0x1ba>
    8fd6:	f7ff ff67 	bl	8ea8 <MPSL_IRQ_CLOCK_Handler+0x88>
    8fda:	f000 f8e7 	bl	91ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    8fde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8fe2:	4802      	ldr	r0, [pc, #8]	; (8fec <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    8fe4:	3008      	adds	r0, #8
    8fe6:	f003 b8be 	b.w	c166 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    8fea:	0000      	.short	0x0000
    8fec:	20000130 	.word	0x20000130
    8ff0:	40000c34 	.word	0x40000c34
    8ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ff8:	4c49      	ldr	r4, [pc, #292]	; (9120 <MPSL_IRQ_CLOCK_Handler+0x300>)
    8ffa:	2700      	movs	r7, #0
    8ffc:	4606      	mov	r6, r0
    8ffe:	61a7      	str	r7, [r4, #24]
    9000:	7842      	ldrb	r2, [r0, #1]
    9002:	7881      	ldrb	r1, [r0, #2]
    9004:	7800      	ldrb	r0, [r0, #0]
    9006:	72e0      	strb	r0, [r4, #11]
    9008:	7162      	strb	r2, [r4, #5]
    900a:	71a1      	strb	r1, [r4, #6]
    900c:	71e7      	strb	r7, [r4, #7]
    900e:	f04f 0801 	mov.w	r8, #1
    9012:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    9016:	2805      	cmp	r0, #5
    9018:	d225      	bcs.n	9066 <MPSL_IRQ_CLOCK_Handler+0x246>
    901a:	e8df f000 	tbb	[pc, r0]
    901e:	0310      	.short	0x0310
    9020:	00222006 	.word	0x00222006
    9024:	f8c4 8018 	str.w	r8, [r4, #24]
    9028:	e009      	b.n	903e <MPSL_IRQ_CLOCK_Handler+0x21e>
    902a:	f000 f8db 	bl	91e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    902e:	2101      	movs	r1, #1
    9030:	4628      	mov	r0, r5
    9032:	f003 f812 	bl	c05a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    9036:	2800      	cmp	r0, #0
    9038:	d0f9      	beq.n	902e <MPSL_IRQ_CLOCK_Handler+0x20e>
    903a:	2002      	movs	r0, #2
    903c:	61a0      	str	r0, [r4, #24]
    903e:	f003 f838 	bl	c0b2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    9042:	b1c0      	cbz	r0, 9076 <MPSL_IRQ_CLOCK_Handler+0x256>
    9044:	f000 f9ee 	bl	9424 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    9048:	7e21      	ldrb	r1, [r4, #24]
    904a:	f001 0103 	and.w	r1, r1, #3
    904e:	4288      	cmp	r0, r1
    9050:	d111      	bne.n	9076 <MPSL_IRQ_CLOCK_Handler+0x256>
    9052:	79b0      	ldrb	r0, [r6, #6]
    9054:	b160      	cbz	r0, 9070 <MPSL_IRQ_CLOCK_Handler+0x250>
    9056:	2002      	movs	r0, #2
    9058:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    905c:	e044      	b.n	90e8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    905e:	4831      	ldr	r0, [pc, #196]	; (9124 <MPSL_IRQ_CLOCK_Handler+0x304>)
    9060:	e7ec      	b.n	903c <MPSL_IRQ_CLOCK_Handler+0x21c>
    9062:	4831      	ldr	r0, [pc, #196]	; (9128 <MPSL_IRQ_CLOCK_Handler+0x308>)
    9064:	e7ea      	b.n	903c <MPSL_IRQ_CLOCK_Handler+0x21c>
    9066:	f240 313d 	movw	r1, #829	; 0x33d
    906a:	206d      	movs	r0, #109	; 0x6d
    906c:	f000 fa38 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9070:	f000 f9ac 	bl	93cc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    9074:	e038      	b.n	90e8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    9076:	f8c5 800c 	str.w	r8, [r5, #12]
    907a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    907e:	69a0      	ldr	r0, [r4, #24]
    9080:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    9084:	f003 f87a 	bl	c17c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    9088:	b940      	cbnz	r0, 909c <MPSL_IRQ_CLOCK_Handler+0x27c>
    908a:	f003 f881 	bl	c190 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    908e:	b928      	cbnz	r0, 909c <MPSL_IRQ_CLOCK_Handler+0x27c>
    9090:	f003 f895 	bl	c1be <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    9094:	b910      	cbnz	r0, 909c <MPSL_IRQ_CLOCK_Handler+0x27c>
    9096:	f003 f8a6 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    909a:	b138      	cbz	r0, 90ac <MPSL_IRQ_CLOCK_Handler+0x28c>
    909c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    90a0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    90a4:	4921      	ldr	r1, [pc, #132]	; (912c <MPSL_IRQ_CLOCK_Handler+0x30c>)
    90a6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    90aa:	6008      	str	r0, [r1, #0]
    90ac:	f003 f866 	bl	c17c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    90b0:	b940      	cbnz	r0, 90c4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    90b2:	f003 f86d 	bl	c190 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    90b6:	b928      	cbnz	r0, 90c4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    90b8:	f003 f881 	bl	c1be <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    90bc:	b910      	cbnz	r0, 90c4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    90be:	f003 f892 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    90c2:	b118      	cbz	r0, 90cc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    90c4:	4919      	ldr	r1, [pc, #100]	; (912c <MPSL_IRQ_CLOCK_Handler+0x30c>)
    90c6:	3110      	adds	r1, #16
    90c8:	f8c1 8000 	str.w	r8, [r1]
    90cc:	f8c5 8008 	str.w	r8, [r5, #8]
    90d0:	2002      	movs	r0, #2
    90d2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    90d6:	79b0      	ldrb	r0, [r6, #6]
    90d8:	b930      	cbnz	r0, 90e8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    90da:	f000 f829 	bl	9130 <MPSL_IRQ_CLOCK_Handler+0x310>
    90de:	2002      	movs	r0, #2
    90e0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    90e4:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    90e8:	79a0      	ldrb	r0, [r4, #6]
    90ea:	b170      	cbz	r0, 910a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    90ec:	7830      	ldrb	r0, [r6, #0]
    90ee:	b960      	cbnz	r0, 910a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    90f0:	f000 f97e 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    90f4:	4606      	mov	r6, r0
    90f6:	f000 fa67 	bl	95c8 <mpsl_temperature_get>
    90fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    90fe:	b116      	cbz	r6, 9106 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    9100:	e9c4 1004 	strd	r1, r0, [r4, #16]
    9104:	e001      	b.n	910a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    9106:	e9c4 0104 	strd	r0, r1, [r4, #16]
    910a:	2101      	movs	r1, #1
    910c:	4628      	mov	r0, r5
    910e:	f002 ffa4 	bl	c05a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    9112:	b108      	cbz	r0, 9118 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    9114:	f000 f966 	bl	93e4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    9118:	72a7      	strb	r7, [r4, #10]
    911a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    911e:	0000      	.short	0x0000
    9120:	20000130 	.word	0x20000130
    9124:	00020001 	.word	0x00020001
    9128:	00030001 	.word	0x00030001
    912c:	4000053c 	.word	0x4000053c
    9130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9134:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    9138:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    913c:	f010 0f02 	tst.w	r0, #2
    9140:	d011      	beq.n	9166 <MPSL_IRQ_CLOCK_Handler+0x346>
    9142:	4c16      	ldr	r4, [pc, #88]	; (919c <MPSL_IRQ_CLOCK_Handler+0x37c>)
    9144:	6820      	ldr	r0, [r4, #0]
    9146:	43c0      	mvns	r0, r0
    9148:	f340 1600 	sbfx	r6, r0, #4, #1
    914c:	6820      	ldr	r0, [r4, #0]
    914e:	f040 0010 	orr.w	r0, r0, #16
    9152:	6020      	str	r0, [r4, #0]
    9154:	f44f 7782 	mov.w	r7, #260	; 0x104
    9158:	4639      	mov	r1, r7
    915a:	4628      	mov	r0, r5
    915c:	1c76      	adds	r6, r6, #1
    915e:	f002 ff77 	bl	c050 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    9162:	b128      	cbz	r0, 9170 <MPSL_IRQ_CLOCK_Handler+0x350>
    9164:	e00a      	b.n	917c <MPSL_IRQ_CLOCK_Handler+0x35c>
    9166:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    916a:	206d      	movs	r0, #109	; 0x6d
    916c:	f000 f9b8 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9170:	f003 f87b 	bl	c26a <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    9174:	e002      	b.n	917c <MPSL_IRQ_CLOCK_Handler+0x35c>
    9176:	bf00      	nop
    9178:	f003 f875 	bl	c266 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    917c:	4639      	mov	r1, r7
    917e:	4628      	mov	r0, r5
    9180:	f002 ff66 	bl	c050 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    9184:	2800      	cmp	r0, #0
    9186:	d0f7      	beq.n	9178 <MPSL_IRQ_CLOCK_Handler+0x358>
    9188:	f000 f920 	bl	93cc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    918c:	2e00      	cmp	r6, #0
    918e:	d103      	bne.n	9198 <MPSL_IRQ_CLOCK_Handler+0x378>
    9190:	6820      	ldr	r0, [r4, #0]
    9192:	f020 0010 	bic.w	r0, r0, #16
    9196:	6020      	str	r0, [r4, #0]
    9198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    919c:	e000ed10 	.word	0xe000ed10

000091a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    91a0:	4801      	ldr	r0, [pc, #4]	; (91a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    91a2:	89c0      	ldrh	r0, [r0, #14]
    91a4:	4770      	bx	lr
    91a6:	0000      	.short	0x0000
    91a8:	20000130 	.word	0x20000130

000091ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    91ac:	b510      	push	{r4, lr}
    91ae:	f3ef 8410 	mrs	r4, PRIMASK
    91b2:	b672      	cpsid	i
    91b4:	480a      	ldr	r0, [pc, #40]	; (91e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    91b6:	7841      	ldrb	r1, [r0, #1]
    91b8:	b129      	cbz	r1, 91c6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    91ba:	7841      	ldrb	r1, [r0, #1]
    91bc:	1e49      	subs	r1, r1, #1
    91be:	7041      	strb	r1, [r0, #1]
    91c0:	7841      	ldrb	r1, [r0, #1]
    91c2:	b129      	cbz	r1, 91d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    91c4:	e008      	b.n	91d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    91c6:	f240 1119 	movw	r1, #281	; 0x119
    91ca:	206d      	movs	r0, #109	; 0x6d
    91cc:	f000 f988 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91d0:	7880      	ldrb	r0, [r0, #2]
    91d2:	b908      	cbnz	r0, 91d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    91d4:	f000 f91a 	bl	940c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    91d8:	2c00      	cmp	r4, #0
    91da:	d100      	bne.n	91de <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    91dc:	b662      	cpsie	i
    91de:	bd10      	pop	{r4, pc}
    91e0:	20000130 	.word	0x20000130

000091e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    91e4:	b510      	push	{r4, lr}
    91e6:	f3ef 8410 	mrs	r4, PRIMASK
    91ea:	b672      	cpsid	i
    91ec:	4806      	ldr	r0, [pc, #24]	; (9208 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    91ee:	7841      	ldrb	r1, [r0, #1]
    91f0:	1c49      	adds	r1, r1, #1
    91f2:	7041      	strb	r1, [r0, #1]
    91f4:	7840      	ldrb	r0, [r0, #1]
    91f6:	2801      	cmp	r0, #1
    91f8:	d101      	bne.n	91fe <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    91fa:	f002 ff45 	bl	c088 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    91fe:	2c00      	cmp	r4, #0
    9200:	d100      	bne.n	9204 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    9202:	b662      	cpsie	i
    9204:	bd10      	pop	{r4, pc}
    9206:	0000      	.short	0x0000
    9208:	20000130 	.word	0x20000130

0000920c <mpsl_clock_hfclk_release>:
    920c:	4805      	ldr	r0, [pc, #20]	; (9224 <mpsl_clock_hfclk_release+0x18>)
    920e:	b510      	push	{r4, lr}
    9210:	78c1      	ldrb	r1, [r0, #3]
    9212:	b121      	cbz	r1, 921e <mpsl_clock_hfclk_release+0x12>
    9214:	2100      	movs	r1, #0
    9216:	7101      	strb	r1, [r0, #4]
    9218:	70c1      	strb	r1, [r0, #3]
    921a:	f7ff ffc7 	bl	91ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    921e:	2000      	movs	r0, #0
    9220:	bd10      	pop	{r4, pc}
    9222:	0000      	.short	0x0000
    9224:	20000130 	.word	0x20000130

00009228 <mpsl_clock_hfclk_request>:
    9228:	b570      	push	{r4, r5, r6, lr}
    922a:	4c0c      	ldr	r4, [pc, #48]	; (925c <mpsl_clock_hfclk_request+0x34>)
    922c:	78e1      	ldrb	r1, [r4, #3]
    922e:	b961      	cbnz	r1, 924a <mpsl_clock_hfclk_request+0x22>
    9230:	2501      	movs	r5, #1
    9232:	70e5      	strb	r5, [r4, #3]
    9234:	61e0      	str	r0, [r4, #28]
    9236:	f7ff ffd5 	bl	91e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    923a:	f000 f8d9 	bl	93f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    923e:	b130      	cbz	r0, 924e <mpsl_clock_hfclk_request+0x26>
    9240:	69e0      	ldr	r0, [r4, #28]
    9242:	b110      	cbz	r0, 924a <mpsl_clock_hfclk_request+0x22>
    9244:	4780      	blx	r0
    9246:	2000      	movs	r0, #0
    9248:	61e0      	str	r0, [r4, #28]
    924a:	2000      	movs	r0, #0
    924c:	bd70      	pop	{r4, r5, r6, pc}
    924e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9252:	7125      	strb	r5, [r4, #4]
    9254:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    9258:	e7f7      	b.n	924a <mpsl_clock_hfclk_request+0x22>
    925a:	0000      	.short	0x0000
    925c:	20000130 	.word	0x20000130

00009260 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    9260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9264:	0005      	movs	r5, r0
    9266:	f06f 0015 	mvn.w	r0, #21
    926a:	d03f      	beq.n	92ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    926c:	7829      	ldrb	r1, [r5, #0]
    926e:	2904      	cmp	r1, #4
    9270:	d83c      	bhi.n	92ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    9272:	2900      	cmp	r1, #0
    9274:	7869      	ldrb	r1, [r5, #1]
    9276:	d03b      	beq.n	92f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    9278:	2900      	cmp	r1, #0
    927a:	d137      	bne.n	92ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    927c:	78a9      	ldrb	r1, [r5, #2]
    927e:	2900      	cmp	r1, #0
    9280:	d134      	bne.n	92ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    9282:	2000      	movs	r0, #0
    9284:	f002 fed3 	bl	c02e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    9288:	2000      	movs	r0, #0
    928a:	f002 fec3 	bl	c014 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    928e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    9292:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9296:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    929a:	2600      	movs	r6, #0
    929c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    92a0:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    92a4:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    92a8:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    92ac:	4c14      	ldr	r4, [pc, #80]	; (9300 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    92ae:	7066      	strb	r6, [r4, #1]
    92b0:	88a8      	ldrh	r0, [r5, #4]
    92b2:	81a0      	strh	r0, [r4, #12]
    92b4:	f002 fedf 	bl	c076 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    92b8:	2701      	movs	r7, #1
    92ba:	b108      	cbz	r0, 92c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    92bc:	70e7      	strb	r7, [r4, #3]
    92be:	7067      	strb	r7, [r4, #1]
    92c0:	2101      	movs	r1, #1
    92c2:	4640      	mov	r0, r8
    92c4:	f002 fec9 	bl	c05a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    92c8:	b108      	cbz	r0, 92ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    92ca:	f000 f88b 	bl	93e4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    92ce:	f240 50f5 	movw	r0, #1525	; 0x5f5
    92d2:	81e0      	strh	r0, [r4, #14]
    92d4:	4628      	mov	r0, r5
    92d6:	f7ff fe8d 	bl	8ff4 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    92da:	7267      	strb	r7, [r4, #9]
    92dc:	2000      	movs	r0, #0
    92de:	f002 fe99 	bl	c014 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    92e2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    92e6:	4630      	mov	r0, r6
    92e8:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    92ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92f0:	2900      	cmp	r1, #0
    92f2:	d0fb      	beq.n	92ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    92f4:	2920      	cmp	r1, #32
    92f6:	d8f9      	bhi.n	92ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    92f8:	78a9      	ldrb	r1, [r5, #2]
    92fa:	2921      	cmp	r1, #33	; 0x21
    92fc:	d9c1      	bls.n	9282 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    92fe:	e7f5      	b.n	92ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    9300:	20000130 	.word	0x20000130

00009304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    9304:	4801      	ldr	r0, [pc, #4]	; (930c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    9306:	8980      	ldrh	r0, [r0, #12]
    9308:	4770      	bx	lr
    930a:	0000      	.short	0x0000
    930c:	20000130 	.word	0x20000130

00009310 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    9310:	4802      	ldr	r0, [pc, #8]	; (931c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    9312:	7a80      	ldrb	r0, [r0, #10]
    9314:	2800      	cmp	r0, #0
    9316:	d000      	beq.n	931a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    9318:	2001      	movs	r0, #1
    931a:	4770      	bx	lr
    931c:	20000130 	.word	0x20000130

00009320 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    9320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9322:	4d1f      	ldr	r5, [pc, #124]	; (93a0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    9324:	7ae8      	ldrb	r0, [r5, #11]
    9326:	2800      	cmp	r0, #0
    9328:	d10f      	bne.n	934a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    932a:	7e28      	ldrb	r0, [r5, #24]
    932c:	f000 0003 	and.w	r0, r0, #3
    9330:	f002 feaf 	bl	c092 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    9334:	2800      	cmp	r0, #0
    9336:	d008      	beq.n	934a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    9338:	f3ef 8110 	mrs	r1, PRIMASK
    933c:	b672      	cpsid	i
    933e:	f7ff ffe7 	bl	9310 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    9342:	b118      	cbz	r0, 934c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    9344:	2900      	cmp	r1, #0
    9346:	d100      	bne.n	934a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    9348:	b662      	cpsie	i
    934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    934c:	2601      	movs	r6, #1
    934e:	72ae      	strb	r6, [r5, #10]
    9350:	b901      	cbnz	r1, 9354 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    9352:	b662      	cpsie	i
    9354:	2018      	movs	r0, #24
    9356:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    935a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    935e:	61a6      	str	r6, [r4, #24]
    9360:	f44f 7020 	mov.w	r0, #640	; 0x280
    9364:	f8ad 0000 	strh.w	r0, [sp]
    9368:	f8bd 0000 	ldrh.w	r0, [sp]
    936c:	1e41      	subs	r1, r0, #1
    936e:	f8ad 1000 	strh.w	r1, [sp]
    9372:	d2f9      	bcs.n	9368 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    9374:	2700      	movs	r7, #0
    9376:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    937a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    937e:	4808      	ldr	r0, [pc, #32]	; (93a0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    9380:	3008      	adds	r0, #8
    9382:	f002 feec 	bl	c15e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    9386:	702f      	strb	r7, [r5, #0]
    9388:	f7ff fd8e 	bl	8ea8 <MPSL_IRQ_CLOCK_Handler+0x88>
    938c:	6166      	str	r6, [r4, #20]
    938e:	7968      	ldrb	r0, [r5, #5]
    9390:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    9394:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    9398:	2018      	movs	r0, #24
    939a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    939e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93a0:	20000130 	.word	0x20000130

000093a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    93a4:	4602      	mov	r2, r0
    93a6:	b510      	push	{r4, lr}
    93a8:	2000      	movs	r0, #0
    93aa:	2900      	cmp	r1, #0
    93ac:	d00a      	beq.n	93c4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    93ae:	2a00      	cmp	r2, #0
    93b0:	d008      	beq.n	93c4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    93b2:	fba2 0101 	umull	r0, r1, r2, r1
    93b6:	1e40      	subs	r0, r0, #1
    93b8:	4a03      	ldr	r2, [pc, #12]	; (93c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    93ba:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    93be:	f002 ff56 	bl	c26e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    93c2:	1c40      	adds	r0, r0, #1
    93c4:	bd10      	pop	{r4, pc}
    93c6:	0000      	.short	0x0000
    93c8:	000f4240 	.word	0x000f4240

000093cc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    93cc:	b510      	push	{r4, lr}
    93ce:	4c04      	ldr	r4, [pc, #16]	; (93e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    93d0:	7e20      	ldrb	r0, [r4, #24]
    93d2:	f000 0003 	and.w	r0, r0, #3
    93d6:	f002 fe5c 	bl	c092 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    93da:	2800      	cmp	r0, #0
    93dc:	d0f8      	beq.n	93d0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    93de:	bd10      	pop	{r4, pc}
    93e0:	20000130 	.word	0x20000130

000093e4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    93e4:	4901      	ldr	r1, [pc, #4]	; (93ec <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    93e6:	2001      	movs	r0, #1
    93e8:	7008      	strb	r0, [r1, #0]
    93ea:	4770      	bx	lr
    93ec:	2000019d 	.word	0x2000019d

000093f0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    93f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    93f4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    93f8:	b918      	cbnz	r0, 9402 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    93fa:	4803      	ldr	r0, [pc, #12]	; (9408 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    93fc:	7800      	ldrb	r0, [r0, #0]
    93fe:	2800      	cmp	r0, #0
    9400:	d000      	beq.n	9404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    9402:	2001      	movs	r0, #1
    9404:	4770      	bx	lr
    9406:	0000      	.short	0x0000
    9408:	2000019d 	.word	0x2000019d

0000940c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    940c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9410:	2101      	movs	r1, #1
    9412:	6041      	str	r1, [r0, #4]
    9414:	2100      	movs	r1, #0
    9416:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    941a:	4801      	ldr	r0, [pc, #4]	; (9420 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    941c:	7001      	strb	r1, [r0, #0]
    941e:	4770      	bx	lr
    9420:	2000019d 	.word	0x2000019d

00009424 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    9424:	4802      	ldr	r0, [pc, #8]	; (9430 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    9426:	6800      	ldr	r0, [r0, #0]
    9428:	f000 0003 	and.w	r0, r0, #3
    942c:	4770      	bx	lr
    942e:	0000      	.short	0x0000
    9430:	4000041c 	.word	0x4000041c
    9434:	b510      	push	{r4, lr}
    9436:	b131      	cbz	r1, 9446 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    9438:	2901      	cmp	r1, #1
    943a:	d007      	beq.n	944c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    943c:	f240 3102 	movw	r1, #770	; 0x302
    9440:	a005      	add	r0, pc, #20	; (adr r0, 9458 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    9442:	f000 f821 	bl	9488 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    9446:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    944a:	e001      	b.n	9450 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    944c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    9450:	f000 0001 	and.w	r0, r0, #1
    9454:	bd10      	pop	{r4, pc}
    9456:	0000      	.short	0x0000
    9458:	5f66726e 	.word	0x5f66726e
    945c:	636f6c63 	.word	0x636f6c63
    9460:	00682e6b 	.word	0x00682e6b
    9464:	f3bf 8f4f 	dsb	sy
    9468:	4805      	ldr	r0, [pc, #20]	; (9480 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    946a:	6801      	ldr	r1, [r0, #0]
    946c:	4a05      	ldr	r2, [pc, #20]	; (9484 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    946e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    9472:	4311      	orrs	r1, r2
    9474:	6001      	str	r1, [r0, #0]
    9476:	f3bf 8f4f 	dsb	sy
    947a:	bf00      	nop
    947c:	e7fd      	b.n	947a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    947e:	0000      	.short	0x0000
    9480:	e000ed0c 	.word	0xe000ed0c
    9484:	05fa0004 	.word	0x05fa0004

00009488 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    9488:	b672      	cpsid	i
    948a:	4a03      	ldr	r2, [pc, #12]	; (9498 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    948c:	6852      	ldr	r2, [r2, #4]
    948e:	b102      	cbz	r2, 9492 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    9490:	4790      	blx	r2
    9492:	f7ff ffe7 	bl	9464 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    9496:	0000      	.short	0x0000
    9498:	20000150 	.word	0x20000150
    949c:	4806      	ldr	r0, [pc, #24]	; (94b8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    949e:	b510      	push	{r4, lr}
    94a0:	2100      	movs	r1, #0
    94a2:	6001      	str	r1, [r0, #0]
    94a4:	2101      	movs	r1, #1
    94a6:	6001      	str	r1, [r0, #0]
    94a8:	4608      	mov	r0, r1
    94aa:	f002 fe19 	bl	c0e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    94ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    94b2:	2001      	movs	r0, #1
    94b4:	f002 be07 	b.w	c0c6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    94b8:	40001ffc 	.word	0x40001ffc
    94bc:	4807      	ldr	r0, [pc, #28]	; (94dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    94be:	b510      	push	{r4, lr}
    94c0:	2101      	movs	r1, #1
    94c2:	6041      	str	r1, [r0, #4]
    94c4:	1e89      	subs	r1, r1, #2
    94c6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    94ca:	200c      	movs	r0, #12
    94cc:	f002 fe08 	bl	c0e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    94d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    94d4:	200c      	movs	r0, #12
    94d6:	f002 bdf6 	b.w	c0c6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    94da:	0000      	.short	0x0000
    94dc:	4000c000 	.word	0x4000c000

000094e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    94e0:	b50e      	push	{r1, r2, r3, lr}
    94e2:	b672      	cpsid	i
    94e4:	4a0f      	ldr	r2, [pc, #60]	; (9524 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    94e6:	6855      	ldr	r5, [r2, #4]
    94e8:	b1d5      	cbz	r5, 9520 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    94ea:	2200      	movs	r2, #0
    94ec:	4603      	mov	r3, r0
    94ee:	466e      	mov	r6, sp
    94f0:	240a      	movs	r4, #10
    94f2:	e003      	b.n	94fc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    94f4:	fbb0 f0f4 	udiv	r0, r0, r4
    94f8:	1c52      	adds	r2, r2, #1
    94fa:	b2d2      	uxtb	r2, r2
    94fc:	2800      	cmp	r0, #0
    94fe:	d1f9      	bne.n	94f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    9500:	54b0      	strb	r0, [r6, r2]
    9502:	e009      	b.n	9518 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    9504:	fbb3 f0f4 	udiv	r0, r3, r4
    9508:	fb04 3010 	mls	r0, r4, r0, r3
    950c:	fbb3 f3f4 	udiv	r3, r3, r4
    9510:	1e52      	subs	r2, r2, #1
    9512:	b2d2      	uxtb	r2, r2
    9514:	3030      	adds	r0, #48	; 0x30
    9516:	54b0      	strb	r0, [r6, r2]
    9518:	2a00      	cmp	r2, #0
    951a:	d1f3      	bne.n	9504 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    951c:	4630      	mov	r0, r6
    951e:	47a8      	blx	r5
    9520:	f7ff ffa0 	bl	9464 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    9524:	20000150 	.word	0x20000150

00009528 <mpsl_init>:
    9528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    952c:	4c18      	ldr	r4, [pc, #96]	; (9590 <mpsl_init+0x68>)
    952e:	4606      	mov	r6, r0
    9530:	4617      	mov	r7, r2
    9532:	7860      	ldrb	r0, [r4, #1]
    9534:	460d      	mov	r5, r1
    9536:	b118      	cbz	r0, 9540 <mpsl_init+0x18>
    9538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9540:	f7fc fa90 	bl	5a64 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    9544:	b906      	cbnz	r6, 9548 <mpsl_init+0x20>
    9546:	4e13      	ldr	r6, [pc, #76]	; (9594 <mpsl_init+0x6c>)
    9548:	6067      	str	r7, [r4, #4]
    954a:	7025      	strb	r5, [r4, #0]
    954c:	f7ff ffa6 	bl	949c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    9550:	f7ff ffb4 	bl	94bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    9554:	4630      	mov	r0, r6
    9556:	f7ff fe83 	bl	9260 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    955a:	0006      	movs	r6, r0
    955c:	d1ee      	bne.n	953c <mpsl_init+0x14>
    955e:	f7fe fe87 	bl	8270 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    9562:	f7ff fedd 	bl	9320 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    9566:	f002 fca0 	bl	beaa <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    956a:	4628      	mov	r0, r5
    956c:	f002 fdab 	bl	c0c6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    9570:	2001      	movs	r0, #1
    9572:	2d00      	cmp	r5, #0
    9574:	db09      	blt.n	958a <mpsl_init+0x62>
    9576:	f005 011f 	and.w	r1, r5, #31
    957a:	fa00 f101 	lsl.w	r1, r0, r1
    957e:	096a      	lsrs	r2, r5, #5
    9580:	0092      	lsls	r2, r2, #2
    9582:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    9586:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    958a:	7060      	strb	r0, [r4, #1]
    958c:	4630      	mov	r0, r6
    958e:	e7d5      	b.n	953c <mpsl_init+0x14>
    9590:	20000150 	.word	0x20000150
    9594:	0000c102 	.word	0x0000c102

00009598 <mpsl_is_initialized>:
    9598:	4801      	ldr	r0, [pc, #4]	; (95a0 <mpsl_is_initialized+0x8>)
    959a:	7840      	ldrb	r0, [r0, #1]
    959c:	4770      	bx	lr
    959e:	0000      	.short	0x0000
    95a0:	20000150 	.word	0x20000150

000095a4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    95a4:	4807      	ldr	r0, [pc, #28]	; (95c4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    95a6:	f990 0000 	ldrsb.w	r0, [r0]
    95aa:	2800      	cmp	r0, #0
    95ac:	db09      	blt.n	95c2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    95ae:	f000 021f 	and.w	r2, r0, #31
    95b2:	2101      	movs	r1, #1
    95b4:	4091      	lsls	r1, r2
    95b6:	0940      	lsrs	r0, r0, #5
    95b8:	0080      	lsls	r0, r0, #2
    95ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    95be:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    95c2:	4770      	bx	lr
    95c4:	20000150 	.word	0x20000150

000095c8 <mpsl_temperature_get>:
    95c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95cc:	2501      	movs	r5, #1
    95ce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    95d2:	0329      	lsls	r1, r5, #12
    95d4:	f04f 0800 	mov.w	r8, #0
    95d8:	4640      	mov	r0, r8
    95da:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    95de:	f3bf 8f4f 	dsb	sy
    95e2:	f3bf 8f6f 	isb	sy
    95e6:	4c16      	ldr	r4, [pc, #88]	; (9640 <mpsl_temperature_get+0x78>)
    95e8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    95ec:	200c      	movs	r0, #12
    95ee:	f002 fd96 	bl	c11e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    95f2:	4e14      	ldr	r6, [pc, #80]	; (9644 <mpsl_temperature_get+0x7c>)
    95f4:	6830      	ldr	r0, [r6, #0]
    95f6:	43c0      	mvns	r0, r0
    95f8:	f340 1700 	sbfx	r7, r0, #4, #1
    95fc:	6830      	ldr	r0, [r6, #0]
    95fe:	f040 0010 	orr.w	r0, r0, #16
    9602:	6030      	str	r0, [r6, #0]
    9604:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    9608:	6025      	str	r5, [r4, #0]
    960a:	1c7f      	adds	r7, r7, #1
    960c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    9610:	b108      	cbz	r0, 9616 <mpsl_temperature_get+0x4e>
    9612:	b11f      	cbz	r7, 961c <mpsl_temperature_get+0x54>
    9614:	e006      	b.n	9624 <mpsl_temperature_get+0x5c>
    9616:	f002 fe26 	bl	c266 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    961a:	e7f7      	b.n	960c <mpsl_temperature_get+0x44>
    961c:	6830      	ldr	r0, [r6, #0]
    961e:	f020 0010 	bic.w	r0, r0, #16
    9622:	6030      	str	r0, [r6, #0]
    9624:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    9628:	6065      	str	r5, [r4, #4]
    962a:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    962e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    9632:	200c      	movs	r0, #12
    9634:	f002 fd73 	bl	c11e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    9638:	4630      	mov	r0, r6
    963a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    963e:	0000      	.short	0x0000
    9640:	4000c000 	.word	0x4000c000
    9644:	e000ed10 	.word	0xe000ed10

00009648 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    9648:	b510      	push	{r4, lr}
    964a:	4602      	mov	r2, r0
    964c:	2005      	movs	r0, #5
    964e:	490c      	ldr	r1, [pc, #48]	; (9680 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    9650:	e004      	b.n	965c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    9652:	bf00      	nop
    9654:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    9658:	791b      	ldrb	r3, [r3, #4]
    965a:	b133      	cbz	r3, 966a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    965c:	1e40      	subs	r0, r0, #1
    965e:	b2c0      	uxtb	r0, r0
    9660:	d2f8      	bcs.n	9654 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    9662:	2148      	movs	r1, #72	; 0x48
    9664:	2069      	movs	r0, #105	; 0x69
    9666:	f7ff ff3b 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    966a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    966e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    9672:	2200      	movs	r2, #0
    9674:	714a      	strb	r2, [r1, #5]
    9676:	718a      	strb	r2, [r1, #6]
    9678:	2201      	movs	r2, #1
    967a:	710a      	strb	r2, [r1, #4]
    967c:	bd10      	pop	{r4, pc}
    967e:	0000      	.short	0x0000
    9680:	200011a0 	.word	0x200011a0

00009684 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    9684:	b510      	push	{r4, lr}
    9686:	2805      	cmp	r0, #5
    9688:	d301      	bcc.n	968e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    968a:	2158      	movs	r1, #88	; 0x58
    968c:	e006      	b.n	969c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    968e:	490a      	ldr	r1, [pc, #40]	; (96b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    9690:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    9694:	7901      	ldrb	r1, [r0, #4]
    9696:	2901      	cmp	r1, #1
    9698:	d003      	beq.n	96a2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    969a:	2159      	movs	r1, #89	; 0x59
    969c:	2069      	movs	r0, #105	; 0x69
    969e:	f7ff ff1f 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96a2:	7941      	ldrb	r1, [r0, #5]
    96a4:	7982      	ldrb	r2, [r0, #6]
    96a6:	1c49      	adds	r1, r1, #1
    96a8:	b2c9      	uxtb	r1, r1
    96aa:	428a      	cmp	r2, r1
    96ac:	d000      	beq.n	96b0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    96ae:	7141      	strb	r1, [r0, #5]
    96b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    96b4:	f7ff bf76 	b.w	95a4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    96b8:	200011a0 	.word	0x200011a0

000096bc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    96bc:	b510      	push	{r4, lr}
    96be:	2805      	cmp	r0, #5
    96c0:	d303      	bcc.n	96ca <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    96c2:	214f      	movs	r1, #79	; 0x4f
    96c4:	2069      	movs	r0, #105	; 0x69
    96c6:	f7ff ff0b 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96ca:	4a03      	ldr	r2, [pc, #12]	; (96d8 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    96cc:	2100      	movs	r1, #0
    96ce:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    96d2:	7101      	strb	r1, [r0, #4]
    96d4:	bd10      	pop	{r4, pc}
    96d6:	0000      	.short	0x0000
    96d8:	200011a0 	.word	0x200011a0

000096dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    96dc:	b570      	push	{r4, r5, r6, lr}
    96de:	2505      	movs	r5, #5
    96e0:	4e0e      	ldr	r6, [pc, #56]	; (971c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    96e2:	4c0f      	ldr	r4, [pc, #60]	; (9720 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    96e4:	e016      	b.n	9714 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    96e6:	7821      	ldrb	r1, [r4, #0]
    96e8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    96ec:	7902      	ldrb	r2, [r0, #4]
    96ee:	2a01      	cmp	r2, #1
    96f0:	d108      	bne.n	9704 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    96f2:	7942      	ldrb	r2, [r0, #5]
    96f4:	7983      	ldrb	r3, [r0, #6]
    96f6:	429a      	cmp	r2, r3
    96f8:	d004      	beq.n	9704 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    96fa:	7942      	ldrb	r2, [r0, #5]
    96fc:	7182      	strb	r2, [r0, #6]
    96fe:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    9702:	4780      	blx	r0
    9704:	7820      	ldrb	r0, [r4, #0]
    9706:	1c40      	adds	r0, r0, #1
    9708:	b2c0      	uxtb	r0, r0
    970a:	7020      	strb	r0, [r4, #0]
    970c:	2805      	cmp	r0, #5
    970e:	d301      	bcc.n	9714 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    9710:	2000      	movs	r0, #0
    9712:	7020      	strb	r0, [r4, #0]
    9714:	1e6d      	subs	r5, r5, #1
    9716:	b2ed      	uxtb	r5, r5
    9718:	d2e5      	bcs.n	96e6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    971a:	bd70      	pop	{r4, r5, r6, pc}
    971c:	200011a0 	.word	0x200011a0
    9720:	2000019e 	.word	0x2000019e

00009724 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    9724:	b500      	push	{lr}
    9726:	f002 fd29 	bl	c17c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    972a:	b940      	cbnz	r0, 973e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    972c:	f002 fd30 	bl	c190 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    9730:	b928      	cbnz	r0, 973e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    9732:	f002 fd44 	bl	c1be <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    9736:	b910      	cbnz	r0, 973e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    9738:	f002 fd55 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    973c:	b108      	cbz	r0, 9742 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    973e:	4802      	ldr	r0, [pc, #8]	; (9748 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    9740:	bd00      	pop	{pc}
    9742:	4802      	ldr	r0, [pc, #8]	; (974c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    9744:	bd00      	pop	{pc}
    9746:	0000      	.short	0x0000
    9748:	4000050c 	.word	0x4000050c
    974c:	4001e700 	.word	0x4001e700
    9750:	b510      	push	{r4, lr}
    9752:	f002 fd48 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    9756:	b330      	cbz	r0, 97a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    9758:	f3ef 8010 	mrs	r0, PRIMASK
    975c:	b1c8      	cbz	r0, 9792 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    975e:	2100      	movs	r1, #0
    9760:	b672      	cpsid	i
    9762:	4812      	ldr	r0, [pc, #72]	; (97ac <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    9764:	6802      	ldr	r2, [r0, #0]
    9766:	6803      	ldr	r3, [r0, #0]
    9768:	f3c2 1200 	ubfx	r2, r2, #4, #1
    976c:	f043 0310 	orr.w	r3, r3, #16
    9770:	6003      	str	r3, [r0, #0]
    9772:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9776:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    977a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    977e:	431c      	orrs	r4, r3
    9780:	d000      	beq.n	9784 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    9782:	bf40      	sev
    9784:	bf20      	wfe
    9786:	bf00      	nop
    9788:	bf00      	nop
    978a:	bf00      	nop
    978c:	bf00      	nop
    978e:	b112      	cbz	r2, 9796 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    9790:	e005      	b.n	979e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    9792:	2101      	movs	r1, #1
    9794:	e7e4      	b.n	9760 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    9796:	6802      	ldr	r2, [r0, #0]
    9798:	f022 0210 	bic.w	r2, r2, #16
    979c:	6002      	str	r2, [r0, #0]
    979e:	2900      	cmp	r1, #0
    97a0:	d000      	beq.n	97a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    97a2:	b662      	cpsie	i
    97a4:	bd10      	pop	{r4, pc}
    97a6:	bf20      	wfe
    97a8:	bd10      	pop	{r4, pc}
    97aa:	0000      	.short	0x0000
    97ac:	e000ed10 	.word	0xe000ed10

000097b0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    97b0:	4901      	ldr	r1, [pc, #4]	; (97b8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    97b2:	2001      	movs	r0, #1
    97b4:	7088      	strb	r0, [r1, #2]
    97b6:	4770      	bx	lr
    97b8:	20000158 	.word	0x20000158

000097bc <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    97bc:	0000c4e7 0000c51f 0000c509 0000c4f7     ................
    97cc:	0000c503 0000c4f1 0000c4e5 0000c4e3     ................
    97dc:	0000c51b 0000c50f 0000c4fd 0000c4eb     ................
    97ec:	0000c4dd 0000c4d5 0000c4d9 0000c4cf     ................

000097fc <mpsl_fem_disable>:
    97fc:	4801      	ldr	r0, [pc, #4]	; (9804 <mpsl_fem_disable+0x8>)
    97fe:	6800      	ldr	r0, [r0, #0]
    9800:	6800      	ldr	r0, [r0, #0]
    9802:	4700      	bx	r0
    9804:	2000016c 	.word	0x2000016c

00009808 <mpsl_fem_lna_configuration_clear>:
    9808:	4801      	ldr	r0, [pc, #4]	; (9810 <mpsl_fem_lna_configuration_clear+0x8>)
    980a:	6800      	ldr	r0, [r0, #0]
    980c:	6940      	ldr	r0, [r0, #20]
    980e:	4700      	bx	r0
    9810:	2000016c 	.word	0x2000016c

00009814 <mpsl_fem_lna_configuration_set>:
    9814:	4a01      	ldr	r2, [pc, #4]	; (981c <mpsl_fem_lna_configuration_set+0x8>)
    9816:	6812      	ldr	r2, [r2, #0]
    9818:	68d2      	ldr	r2, [r2, #12]
    981a:	4710      	bx	r2
    981c:	2000016c 	.word	0x2000016c

00009820 <mpsl_fem_lna_is_configured>:
    9820:	4901      	ldr	r1, [pc, #4]	; (9828 <mpsl_fem_lna_is_configured+0x8>)
    9822:	6809      	ldr	r1, [r1, #0]
    9824:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    9826:	4708      	bx	r1
    9828:	2000016c 	.word	0x2000016c

0000982c <mpsl_fem_pa_configuration_clear>:
    982c:	4801      	ldr	r0, [pc, #4]	; (9834 <mpsl_fem_pa_configuration_clear+0x8>)
    982e:	6800      	ldr	r0, [r0, #0]
    9830:	6900      	ldr	r0, [r0, #16]
    9832:	4700      	bx	r0
    9834:	2000016c 	.word	0x2000016c

00009838 <mpsl_fem_pa_configuration_set>:
    9838:	4a01      	ldr	r2, [pc, #4]	; (9840 <mpsl_fem_pa_configuration_set+0x8>)
    983a:	6812      	ldr	r2, [r2, #0]
    983c:	6892      	ldr	r2, [r2, #8]
    983e:	4710      	bx	r2
    9840:	2000016c 	.word	0x2000016c

00009844 <mpsl_fem_pa_gain_set>:
    9844:	4901      	ldr	r1, [pc, #4]	; (984c <mpsl_fem_pa_gain_set+0x8>)
    9846:	6809      	ldr	r1, [r1, #0]
    9848:	6a49      	ldr	r1, [r1, #36]	; 0x24
    984a:	4708      	bx	r1
    984c:	2000016c 	.word	0x2000016c

00009850 <mpsl_fem_pa_is_configured>:
    9850:	4901      	ldr	r1, [pc, #4]	; (9858 <mpsl_fem_pa_is_configured+0x8>)
    9852:	6809      	ldr	r1, [r1, #0]
    9854:	6a89      	ldr	r1, [r1, #40]	; 0x28
    9856:	4708      	bx	r1
    9858:	2000016c 	.word	0x2000016c

0000985c <mpsl_fem_tx_power_split>:
    985c:	b430      	push	{r4, r5}
    985e:	4c03      	ldr	r4, [pc, #12]	; (986c <mpsl_fem_tx_power_split+0x10>)
    9860:	6824      	ldr	r4, [r4, #0]
    9862:	6864      	ldr	r4, [r4, #4]
    9864:	46a4      	mov	ip, r4
    9866:	bc30      	pop	{r4, r5}
    9868:	4760      	bx	ip
    986a:	0000      	.short	0x0000
    986c:	2000016c 	.word	0x2000016c

00009870 <mpsl_fem_device_config_254_apply_get>:
    9870:	4801      	ldr	r0, [pc, #4]	; (9878 <mpsl_fem_device_config_254_apply_get+0x8>)
    9872:	7800      	ldrb	r0, [r0, #0]
    9874:	4770      	bx	lr
    9876:	0000      	.short	0x0000
    9878:	2000019f 	.word	0x2000019f

0000987c <__aeabi_d2lz>:
    987c:	b538      	push	{r3, r4, r5, lr}
    987e:	2200      	movs	r2, #0
    9880:	2300      	movs	r3, #0
    9882:	4604      	mov	r4, r0
    9884:	460d      	mov	r5, r1
    9886:	f7f8 f8b9 	bl	19fc <__aeabi_dcmplt>
    988a:	b928      	cbnz	r0, 9898 <__aeabi_d2lz+0x1c>
    988c:	4620      	mov	r0, r4
    988e:	4629      	mov	r1, r5
    9890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9894:	f7f8 ba70 	b.w	1d78 <__aeabi_d2ulz>
    9898:	4620      	mov	r0, r4
    989a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    989e:	f7f8 fa6b 	bl	1d78 <__aeabi_d2ulz>
    98a2:	4240      	negs	r0, r0
    98a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    98a8:	bd38      	pop	{r3, r4, r5, pc}

000098aa <__udivmoddi4>:
    98aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    98ae:	4686      	mov	lr, r0
    98b0:	468c      	mov	ip, r1
    98b2:	4608      	mov	r0, r1
    98b4:	9e08      	ldr	r6, [sp, #32]
    98b6:	4615      	mov	r5, r2
    98b8:	4674      	mov	r4, lr
    98ba:	4619      	mov	r1, r3
    98bc:	2b00      	cmp	r3, #0
    98be:	f040 80c2 	bne.w	9a46 <__udivmoddi4+0x19c>
    98c2:	4285      	cmp	r5, r0
    98c4:	fab2 f282 	clz	r2, r2
    98c8:	d945      	bls.n	9956 <__udivmoddi4+0xac>
    98ca:	b14a      	cbz	r2, 98e0 <__udivmoddi4+0x36>
    98cc:	f1c2 0320 	rsb	r3, r2, #32
    98d0:	fa00 fc02 	lsl.w	ip, r0, r2
    98d4:	fa2e f303 	lsr.w	r3, lr, r3
    98d8:	4095      	lsls	r5, r2
    98da:	ea43 0c0c 	orr.w	ip, r3, ip
    98de:	4094      	lsls	r4, r2
    98e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    98e4:	b2a8      	uxth	r0, r5
    98e6:	fbbc f8fe 	udiv	r8, ip, lr
    98ea:	0c23      	lsrs	r3, r4, #16
    98ec:	fb0e cc18 	mls	ip, lr, r8, ip
    98f0:	fb08 f900 	mul.w	r9, r8, r0
    98f4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    98f8:	4599      	cmp	r9, r3
    98fa:	d928      	bls.n	994e <__udivmoddi4+0xa4>
    98fc:	18eb      	adds	r3, r5, r3
    98fe:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    9902:	d204      	bcs.n	990e <__udivmoddi4+0x64>
    9904:	4599      	cmp	r9, r3
    9906:	d902      	bls.n	990e <__udivmoddi4+0x64>
    9908:	f1a8 0702 	sub.w	r7, r8, #2
    990c:	442b      	add	r3, r5
    990e:	eba3 0309 	sub.w	r3, r3, r9
    9912:	b2a4      	uxth	r4, r4
    9914:	fbb3 fcfe 	udiv	ip, r3, lr
    9918:	fb0e 331c 	mls	r3, lr, ip, r3
    991c:	fb0c f000 	mul.w	r0, ip, r0
    9920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9924:	42a0      	cmp	r0, r4
    9926:	d914      	bls.n	9952 <__udivmoddi4+0xa8>
    9928:	192c      	adds	r4, r5, r4
    992a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    992e:	d204      	bcs.n	993a <__udivmoddi4+0x90>
    9930:	42a0      	cmp	r0, r4
    9932:	d902      	bls.n	993a <__udivmoddi4+0x90>
    9934:	f1ac 0302 	sub.w	r3, ip, #2
    9938:	442c      	add	r4, r5
    993a:	1a24      	subs	r4, r4, r0
    993c:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9940:	b11e      	cbz	r6, 994a <__udivmoddi4+0xa0>
    9942:	40d4      	lsrs	r4, r2
    9944:	2300      	movs	r3, #0
    9946:	6034      	str	r4, [r6, #0]
    9948:	6073      	str	r3, [r6, #4]
    994a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    994e:	4647      	mov	r7, r8
    9950:	e7dd      	b.n	990e <__udivmoddi4+0x64>
    9952:	4663      	mov	r3, ip
    9954:	e7f1      	b.n	993a <__udivmoddi4+0x90>
    9956:	bb92      	cbnz	r2, 99be <__udivmoddi4+0x114>
    9958:	1b43      	subs	r3, r0, r5
    995a:	2101      	movs	r1, #1
    995c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9960:	b2af      	uxth	r7, r5
    9962:	fbb3 fcfe 	udiv	ip, r3, lr
    9966:	0c20      	lsrs	r0, r4, #16
    9968:	fb0e 331c 	mls	r3, lr, ip, r3
    996c:	fb0c f807 	mul.w	r8, ip, r7
    9970:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    9974:	4598      	cmp	r8, r3
    9976:	d962      	bls.n	9a3e <__udivmoddi4+0x194>
    9978:	18eb      	adds	r3, r5, r3
    997a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    997e:	d204      	bcs.n	998a <__udivmoddi4+0xe0>
    9980:	4598      	cmp	r8, r3
    9982:	d902      	bls.n	998a <__udivmoddi4+0xe0>
    9984:	f1ac 0002 	sub.w	r0, ip, #2
    9988:	442b      	add	r3, r5
    998a:	eba3 0308 	sub.w	r3, r3, r8
    998e:	b2a4      	uxth	r4, r4
    9990:	fbb3 fcfe 	udiv	ip, r3, lr
    9994:	fb0e 331c 	mls	r3, lr, ip, r3
    9998:	fb0c f707 	mul.w	r7, ip, r7
    999c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    99a0:	42a7      	cmp	r7, r4
    99a2:	d94e      	bls.n	9a42 <__udivmoddi4+0x198>
    99a4:	192c      	adds	r4, r5, r4
    99a6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    99aa:	d204      	bcs.n	99b6 <__udivmoddi4+0x10c>
    99ac:	42a7      	cmp	r7, r4
    99ae:	d902      	bls.n	99b6 <__udivmoddi4+0x10c>
    99b0:	f1ac 0302 	sub.w	r3, ip, #2
    99b4:	442c      	add	r4, r5
    99b6:	1be4      	subs	r4, r4, r7
    99b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    99bc:	e7c0      	b.n	9940 <__udivmoddi4+0x96>
    99be:	f1c2 0320 	rsb	r3, r2, #32
    99c2:	fa20 f103 	lsr.w	r1, r0, r3
    99c6:	4095      	lsls	r5, r2
    99c8:	4090      	lsls	r0, r2
    99ca:	fa2e f303 	lsr.w	r3, lr, r3
    99ce:	4303      	orrs	r3, r0
    99d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    99d4:	b2af      	uxth	r7, r5
    99d6:	fbb1 fcfe 	udiv	ip, r1, lr
    99da:	fb0e 101c 	mls	r0, lr, ip, r1
    99de:	0c19      	lsrs	r1, r3, #16
    99e0:	fb0c f807 	mul.w	r8, ip, r7
    99e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    99e8:	4588      	cmp	r8, r1
    99ea:	fa04 f402 	lsl.w	r4, r4, r2
    99ee:	d922      	bls.n	9a36 <__udivmoddi4+0x18c>
    99f0:	1869      	adds	r1, r5, r1
    99f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    99f6:	d204      	bcs.n	9a02 <__udivmoddi4+0x158>
    99f8:	4588      	cmp	r8, r1
    99fa:	d902      	bls.n	9a02 <__udivmoddi4+0x158>
    99fc:	f1ac 0002 	sub.w	r0, ip, #2
    9a00:	4429      	add	r1, r5
    9a02:	eba1 0108 	sub.w	r1, r1, r8
    9a06:	b29b      	uxth	r3, r3
    9a08:	fbb1 fcfe 	udiv	ip, r1, lr
    9a0c:	fb0e 111c 	mls	r1, lr, ip, r1
    9a10:	fb0c f707 	mul.w	r7, ip, r7
    9a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    9a18:	429f      	cmp	r7, r3
    9a1a:	d90e      	bls.n	9a3a <__udivmoddi4+0x190>
    9a1c:	18eb      	adds	r3, r5, r3
    9a1e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    9a22:	d204      	bcs.n	9a2e <__udivmoddi4+0x184>
    9a24:	429f      	cmp	r7, r3
    9a26:	d902      	bls.n	9a2e <__udivmoddi4+0x184>
    9a28:	f1ac 0102 	sub.w	r1, ip, #2
    9a2c:	442b      	add	r3, r5
    9a2e:	1bdb      	subs	r3, r3, r7
    9a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9a34:	e792      	b.n	995c <__udivmoddi4+0xb2>
    9a36:	4660      	mov	r0, ip
    9a38:	e7e3      	b.n	9a02 <__udivmoddi4+0x158>
    9a3a:	4661      	mov	r1, ip
    9a3c:	e7f7      	b.n	9a2e <__udivmoddi4+0x184>
    9a3e:	4660      	mov	r0, ip
    9a40:	e7a3      	b.n	998a <__udivmoddi4+0xe0>
    9a42:	4663      	mov	r3, ip
    9a44:	e7b7      	b.n	99b6 <__udivmoddi4+0x10c>
    9a46:	4283      	cmp	r3, r0
    9a48:	d906      	bls.n	9a58 <__udivmoddi4+0x1ae>
    9a4a:	b916      	cbnz	r6, 9a52 <__udivmoddi4+0x1a8>
    9a4c:	2100      	movs	r1, #0
    9a4e:	4608      	mov	r0, r1
    9a50:	e77b      	b.n	994a <__udivmoddi4+0xa0>
    9a52:	e9c6 e000 	strd	lr, r0, [r6]
    9a56:	e7f9      	b.n	9a4c <__udivmoddi4+0x1a2>
    9a58:	fab3 f783 	clz	r7, r3
    9a5c:	b98f      	cbnz	r7, 9a82 <__udivmoddi4+0x1d8>
    9a5e:	4283      	cmp	r3, r0
    9a60:	d301      	bcc.n	9a66 <__udivmoddi4+0x1bc>
    9a62:	4572      	cmp	r2, lr
    9a64:	d808      	bhi.n	9a78 <__udivmoddi4+0x1ce>
    9a66:	ebbe 0402 	subs.w	r4, lr, r2
    9a6a:	eb60 0303 	sbc.w	r3, r0, r3
    9a6e:	2001      	movs	r0, #1
    9a70:	469c      	mov	ip, r3
    9a72:	b91e      	cbnz	r6, 9a7c <__udivmoddi4+0x1d2>
    9a74:	2100      	movs	r1, #0
    9a76:	e768      	b.n	994a <__udivmoddi4+0xa0>
    9a78:	4638      	mov	r0, r7
    9a7a:	e7fa      	b.n	9a72 <__udivmoddi4+0x1c8>
    9a7c:	e9c6 4c00 	strd	r4, ip, [r6]
    9a80:	e7f8      	b.n	9a74 <__udivmoddi4+0x1ca>
    9a82:	f1c7 0c20 	rsb	ip, r7, #32
    9a86:	40bb      	lsls	r3, r7
    9a88:	fa22 f40c 	lsr.w	r4, r2, ip
    9a8c:	431c      	orrs	r4, r3
    9a8e:	fa2e f10c 	lsr.w	r1, lr, ip
    9a92:	fa20 f30c 	lsr.w	r3, r0, ip
    9a96:	40b8      	lsls	r0, r7
    9a98:	4301      	orrs	r1, r0
    9a9a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9a9e:	fa0e f507 	lsl.w	r5, lr, r7
    9aa2:	fbb3 f8f9 	udiv	r8, r3, r9
    9aa6:	fa1f fe84 	uxth.w	lr, r4
    9aaa:	fb09 3018 	mls	r0, r9, r8, r3
    9aae:	0c0b      	lsrs	r3, r1, #16
    9ab0:	fb08 fa0e 	mul.w	sl, r8, lr
    9ab4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9ab8:	459a      	cmp	sl, r3
    9aba:	fa02 f207 	lsl.w	r2, r2, r7
    9abe:	d940      	bls.n	9b42 <__udivmoddi4+0x298>
    9ac0:	18e3      	adds	r3, r4, r3
    9ac2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    9ac6:	d204      	bcs.n	9ad2 <__udivmoddi4+0x228>
    9ac8:	459a      	cmp	sl, r3
    9aca:	d902      	bls.n	9ad2 <__udivmoddi4+0x228>
    9acc:	f1a8 0002 	sub.w	r0, r8, #2
    9ad0:	4423      	add	r3, r4
    9ad2:	eba3 030a 	sub.w	r3, r3, sl
    9ad6:	b289      	uxth	r1, r1
    9ad8:	fbb3 f8f9 	udiv	r8, r3, r9
    9adc:	fb09 3318 	mls	r3, r9, r8, r3
    9ae0:	fb08 fe0e 	mul.w	lr, r8, lr
    9ae4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9ae8:	458e      	cmp	lr, r1
    9aea:	d92c      	bls.n	9b46 <__udivmoddi4+0x29c>
    9aec:	1861      	adds	r1, r4, r1
    9aee:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    9af2:	d204      	bcs.n	9afe <__udivmoddi4+0x254>
    9af4:	458e      	cmp	lr, r1
    9af6:	d902      	bls.n	9afe <__udivmoddi4+0x254>
    9af8:	f1a8 0302 	sub.w	r3, r8, #2
    9afc:	4421      	add	r1, r4
    9afe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9b02:	fba0 9802 	umull	r9, r8, r0, r2
    9b06:	eba1 010e 	sub.w	r1, r1, lr
    9b0a:	4541      	cmp	r1, r8
    9b0c:	46ce      	mov	lr, r9
    9b0e:	4643      	mov	r3, r8
    9b10:	d302      	bcc.n	9b18 <__udivmoddi4+0x26e>
    9b12:	d106      	bne.n	9b22 <__udivmoddi4+0x278>
    9b14:	454d      	cmp	r5, r9
    9b16:	d204      	bcs.n	9b22 <__udivmoddi4+0x278>
    9b18:	ebb9 0e02 	subs.w	lr, r9, r2
    9b1c:	eb68 0304 	sbc.w	r3, r8, r4
    9b20:	3801      	subs	r0, #1
    9b22:	2e00      	cmp	r6, #0
    9b24:	d0a6      	beq.n	9a74 <__udivmoddi4+0x1ca>
    9b26:	ebb5 020e 	subs.w	r2, r5, lr
    9b2a:	eb61 0103 	sbc.w	r1, r1, r3
    9b2e:	fa01 fc0c 	lsl.w	ip, r1, ip
    9b32:	fa22 f307 	lsr.w	r3, r2, r7
    9b36:	ea4c 0303 	orr.w	r3, ip, r3
    9b3a:	40f9      	lsrs	r1, r7
    9b3c:	e9c6 3100 	strd	r3, r1, [r6]
    9b40:	e798      	b.n	9a74 <__udivmoddi4+0x1ca>
    9b42:	4640      	mov	r0, r8
    9b44:	e7c5      	b.n	9ad2 <__udivmoddi4+0x228>
    9b46:	4643      	mov	r3, r8
    9b48:	e7d9      	b.n	9afe <__udivmoddi4+0x254>

00009b4a <strcmp>:
    9b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
    9b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
    9b52:	2a01      	cmp	r2, #1
    9b54:	bf28      	it	cs
    9b56:	429a      	cmpcs	r2, r3
    9b58:	d0f7      	beq.n	9b4a <strcmp>
    9b5a:	1ad0      	subs	r0, r2, r3
    9b5c:	4770      	bx	lr

00009b5e <strlen>:
    9b5e:	4603      	mov	r3, r0
    9b60:	f813 2b01 	ldrb.w	r2, [r3], #1
    9b64:	2a00      	cmp	r2, #0
    9b66:	d1fb      	bne.n	9b60 <strlen+0x2>
    9b68:	1a18      	subs	r0, r3, r0
    9b6a:	3801      	subs	r0, #1
    9b6c:	4770      	bx	lr
    9b6e:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    9b72:	4681      	mov	r9, r0
    9b74:	f100 0007 	add.w	r0, r0, #7
    9b78:	f020 0007 	bic.w	r0, r0, #7
    9b7c:	ea5f 0802 	movs.w	r8, r2
    9b80:	9000      	str	r0, [sp, #0]
    9b82:	784a      	ldrb	r2, [r1, #1]
    9b84:	f88d 2004 	strb.w	r2, [sp, #4]
    9b88:	788a      	ldrb	r2, [r1, #2]
    9b8a:	460c      	mov	r4, r1
    9b8c:	f88d 2005 	strb.w	r2, [sp, #5]
    9b90:	d000      	beq.n	9b94 <strlen+0x36>
    9b92:	2000      	movs	r0, #0
    9b94:	a901      	add	r1, sp, #4
    9b96:	f7f8 fd53 	bl	2640 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    9b9a:	9900      	ldr	r1, [sp, #0]
    9b9c:	2600      	movs	r6, #0
    9b9e:	4408      	add	r0, r1
    9ba0:	9000      	str	r0, [sp, #0]
    9ba2:	7820      	ldrb	r0, [r4, #0]
    9ba4:	7861      	ldrb	r1, [r4, #1]
    9ba6:	4635      	mov	r5, r6
    9ba8:	4408      	add	r0, r1
    9baa:	b2c7      	uxtb	r7, r0
    9bac:	e008      	b.n	9bc0 <strlen+0x62>
    9bae:	7a23      	ldrb	r3, [r4, #8]
    9bb0:	79e2      	ldrb	r2, [r4, #7]
    9bb2:	79a1      	ldrb	r1, [r4, #6]
    9bb4:	7960      	ldrb	r0, [r4, #5]
    9bb6:	f000 fc4c 	bl	a452 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    9bba:	1c6d      	adds	r5, r5, #1
    9bbc:	4406      	add	r6, r0
    9bbe:	b2ed      	uxtb	r5, r5
    9bc0:	42bd      	cmp	r5, r7
    9bc2:	d3f4      	bcc.n	9bae <strlen+0x50>
    9bc4:	9800      	ldr	r0, [sp, #0]
    9bc6:	1cc0      	adds	r0, r0, #3
    9bc8:	f020 0003 	bic.w	r0, r0, #3
    9bcc:	9000      	str	r0, [sp, #0]
    9bce:	f1b8 0f00 	cmp.w	r8, #0
    9bd2:	d000      	beq.n	9bd6 <strlen+0x78>
    9bd4:	2000      	movs	r0, #0
    9bd6:	4632      	mov	r2, r6
    9bd8:	4639      	mov	r1, r7
    9bda:	f7f8 fe6b 	bl	28b4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    9bde:	9900      	ldr	r1, [sp, #0]
    9be0:	4642      	mov	r2, r8
    9be2:	4408      	add	r0, r1
    9be4:	9000      	str	r0, [sp, #0]
    9be6:	4621      	mov	r1, r4
    9be8:	4668      	mov	r0, sp
    9bea:	f000 f805 	bl	9bf8 <strlen+0x9a>
    9bee:	9900      	ldr	r1, [sp, #0]
    9bf0:	eba1 0009 	sub.w	r0, r1, r9
    9bf4:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    9bf8:	b570      	push	{r4, r5, r6, lr}
    9bfa:	4605      	mov	r5, r0
    9bfc:	7888      	ldrb	r0, [r1, #2]
    9bfe:	4616      	mov	r6, r2
    9c00:	460c      	mov	r4, r1
    9c02:	b188      	cbz	r0, 9c28 <strlen+0xca>
    9c04:	6828      	ldr	r0, [r5, #0]
    9c06:	1cc0      	adds	r0, r0, #3
    9c08:	f020 0003 	bic.w	r0, r0, #3
    9c0c:	6028      	str	r0, [r5, #0]
    9c0e:	7de1      	ldrb	r1, [r4, #23]
    9c10:	78e2      	ldrb	r2, [r4, #3]
    9c12:	8a63      	ldrh	r3, [r4, #18]
    9c14:	4411      	add	r1, r2
    9c16:	b2ca      	uxtb	r2, r1
    9c18:	78a1      	ldrb	r1, [r4, #2]
    9c1a:	b106      	cbz	r6, 9c1e <strlen+0xc0>
    9c1c:	2000      	movs	r0, #0
    9c1e:	f7f8 fed3 	bl	29c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    9c22:	6829      	ldr	r1, [r5, #0]
    9c24:	4408      	add	r0, r1
    9c26:	6028      	str	r0, [r5, #0]
    9c28:	7d20      	ldrb	r0, [r4, #20]
    9c2a:	2800      	cmp	r0, #0
    9c2c:	d00f      	beq.n	9c4e <strlen+0xf0>
    9c2e:	78a0      	ldrb	r0, [r4, #2]
    9c30:	2800      	cmp	r0, #0
    9c32:	d00c      	beq.n	9c4e <strlen+0xf0>
    9c34:	6828      	ldr	r0, [r5, #0]
    9c36:	1dc0      	adds	r0, r0, #7
    9c38:	f020 0007 	bic.w	r0, r0, #7
    9c3c:	6028      	str	r0, [r5, #0]
    9c3e:	7d21      	ldrb	r1, [r4, #20]
    9c40:	b106      	cbz	r6, 9c44 <strlen+0xe6>
    9c42:	2000      	movs	r0, #0
    9c44:	f7f9 fc2c 	bl	34a0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    9c48:	6829      	ldr	r1, [r5, #0]
    9c4a:	4408      	add	r0, r1
    9c4c:	6028      	str	r0, [r5, #0]
    9c4e:	bd70      	pop	{r4, r5, r6, pc}
    9c50:	b570      	push	{r4, r5, r6, lr}
    9c52:	460c      	mov	r4, r1
    9c54:	4605      	mov	r5, r0
    9c56:	f7f8 fb39 	bl	22cc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    9c5a:	2800      	cmp	r0, #0
    9c5c:	d002      	beq.n	9c64 <strlen+0x106>
    9c5e:	2d3e      	cmp	r5, #62	; 0x3e
    9c60:	d001      	beq.n	9c66 <strlen+0x108>
    9c62:	2001      	movs	r0, #1
    9c64:	bd70      	pop	{r4, r5, r6, pc}
    9c66:	2c12      	cmp	r4, #18
    9c68:	d004      	beq.n	9c74 <strlen+0x116>
    9c6a:	4620      	mov	r0, r4
    9c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c70:	f7f8 bb3e 	b.w	22f0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    9c74:	2000      	movs	r0, #0
    9c76:	bd70      	pop	{r4, r5, r6, pc}

00009c78 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    9c78:	b510      	push	{r4, lr}
    9c7a:	460c      	mov	r4, r1
    9c7c:	7909      	ldrb	r1, [r1, #4]
    9c7e:	7001      	strb	r1, [r0, #0]
    9c80:	7841      	ldrb	r1, [r0, #1]
    9c82:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    9c86:	7041      	strb	r1, [r0, #1]
    9c88:	88a2      	ldrh	r2, [r4, #4]
    9c8a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    9c8e:	4311      	orrs	r1, r2
    9c90:	7041      	strb	r1, [r0, #1]
    9c92:	79a2      	ldrb	r2, [r4, #6]
    9c94:	7082      	strb	r2, [r0, #2]
    9c96:	88e2      	ldrh	r2, [r4, #6]
    9c98:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    9c9c:	0a12      	lsrs	r2, r2, #8
    9c9e:	70c2      	strb	r2, [r0, #3]
    9ca0:	7041      	strb	r1, [r0, #1]
    9ca2:	7a22      	ldrb	r2, [r4, #8]
    9ca4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    9ca8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    9cac:	7041      	strb	r1, [r0, #1]
    9cae:	7a62      	ldrb	r2, [r4, #9]
    9cb0:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    9cb4:	7041      	strb	r1, [r0, #1]
    9cb6:	6821      	ldr	r1, [r4, #0]
    9cb8:	1d02      	adds	r2, r0, #4
    9cba:	4291      	cmp	r1, r2
    9cbc:	d006      	beq.n	9ccc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    9cbe:	88e2      	ldrh	r2, [r4, #6]
    9cc0:	2afb      	cmp	r2, #251	; 0xfb
    9cc2:	d300      	bcc.n	9cc6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    9cc4:	22fb      	movs	r2, #251	; 0xfb
    9cc6:	1d00      	adds	r0, r0, #4
    9cc8:	f002 fb27 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9ccc:	79a0      	ldrb	r0, [r4, #6]
    9cce:	1d00      	adds	r0, r0, #4
    9cd0:	b2c0      	uxtb	r0, r0
    9cd2:	bd10      	pop	{r4, pc}

00009cd4 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    9cd4:	b430      	push	{r4, r5}
    9cd6:	790a      	ldrb	r2, [r1, #4]
    9cd8:	7002      	strb	r2, [r0, #0]
    9cda:	7842      	ldrb	r2, [r0, #1]
    9cdc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    9ce0:	7042      	strb	r2, [r0, #1]
    9ce2:	888b      	ldrh	r3, [r1, #4]
    9ce4:	f3c3 2303 	ubfx	r3, r3, #8, #4
    9ce8:	431a      	orrs	r2, r3
    9cea:	7042      	strb	r2, [r0, #1]
    9cec:	798b      	ldrb	r3, [r1, #6]
    9cee:	7083      	strb	r3, [r0, #2]
    9cf0:	78c3      	ldrb	r3, [r0, #3]
    9cf2:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    9cf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9cfa:	70c3      	strb	r3, [r0, #3]
    9cfc:	88cc      	ldrh	r4, [r1, #6]
    9cfe:	f3c4 2405 	ubfx	r4, r4, #8, #6
    9d02:	4323      	orrs	r3, r4
    9d04:	70c3      	strb	r3, [r0, #3]
    9d06:	7042      	strb	r2, [r0, #1]
    9d08:	7a0c      	ldrb	r4, [r1, #8]
    9d0a:	f004 0403 	and.w	r4, r4, #3
    9d0e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    9d12:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    9d16:	7042      	strb	r2, [r0, #1]
    9d18:	7a4c      	ldrb	r4, [r1, #9]
    9d1a:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    9d1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9d22:	7042      	strb	r2, [r0, #1]
    9d24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    9d28:	70c2      	strb	r2, [r0, #3]
    9d2a:	680b      	ldr	r3, [r1, #0]
    9d2c:	1d02      	adds	r2, r0, #4
    9d2e:	4293      	cmp	r3, r2
    9d30:	d005      	beq.n	9d3e <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    9d32:	88ca      	ldrh	r2, [r1, #6]
    9d34:	bc30      	pop	{r4, r5}
    9d36:	4619      	mov	r1, r3
    9d38:	1d00      	adds	r0, r0, #4
    9d3a:	f002 baee 	b.w	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9d3e:	bc30      	pop	{r4, r5}
    9d40:	4770      	bx	lr

00009d42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    9d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d46:	460d      	mov	r5, r1
    9d48:	4604      	mov	r4, r0
    9d4a:	f891 c000 	ldrb.w	ip, [r1]
    9d4e:	2000      	movs	r0, #0
    9d50:	230c      	movs	r3, #12
    9d52:	2705      	movs	r7, #5
    9d54:	2203      	movs	r2, #3
    9d56:	263e      	movs	r6, #62	; 0x3e
    9d58:	21ff      	movs	r1, #255	; 0xff
    9d5a:	f1bc 0f1e 	cmp.w	ip, #30
    9d5e:	d27e      	bcs.n	9e5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    9d60:	e8df f00c 	tbb	[pc, ip]
    9d64:	424029e7 	.word	0x424029e7
    9d68:	806d63e7 	.word	0x806d63e7
    9d6c:	b9aeac99 	.word	0xb9aeac99
    9d70:	0ff3dfc4 	.word	0x0ff3dfc4
    9d74:	cf48e7e7 	.word	0xcf48e7e7
    9d78:	eff0fcd2 	.word	0xeff0fcd2
    9d7c:	ebecedee 	.word	0xebecedee
    9d80:	e9ea      	.short	0xe9ea
    9d82:	200e      	movs	r0, #14
    9d84:	7020      	strb	r0, [r4, #0]
    9d86:	7968      	ldrb	r0, [r5, #5]
    9d88:	70e0      	strb	r0, [r4, #3]
    9d8a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    9d8e:	0a00      	lsrs	r0, r0, #8
    9d90:	7120      	strb	r0, [r4, #4]
    9d92:	7928      	ldrb	r0, [r5, #4]
    9d94:	70a0      	strb	r0, [r4, #2]
    9d96:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    9d9a:	3883      	subs	r0, #131	; 0x83
    9d9c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    9da0:	d003      	beq.n	9daa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    9da2:	2136      	movs	r1, #54	; 0x36
    9da4:	20c7      	movs	r0, #199	; 0xc7
    9da6:	f7f8 f951 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9daa:	1de9      	adds	r1, r5, #7
    9dac:	1d60      	adds	r0, r4, #5
    9dae:	f002 fab4 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9db2:	2007      	movs	r0, #7
    9db4:	e0bb      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9db6:	7023      	strb	r3, [r4, #0]
    9db8:	7928      	ldrb	r0, [r5, #4]
    9dba:	70a0      	strb	r0, [r4, #2]
    9dbc:	7968      	ldrb	r0, [r5, #5]
    9dbe:	70e0      	strb	r0, [r4, #3]
    9dc0:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    9dc4:	0a00      	lsrs	r0, r0, #8
    9dc6:	7120      	strb	r0, [r4, #4]
    9dc8:	79e8      	ldrb	r0, [r5, #7]
    9dca:	7160      	strb	r0, [r4, #5]
    9dcc:	7a28      	ldrb	r0, [r5, #8]
    9dce:	71a0      	strb	r0, [r4, #6]
    9dd0:	8928      	ldrh	r0, [r5, #8]
    9dd2:	0a00      	lsrs	r0, r0, #8
    9dd4:	71e0      	strb	r0, [r4, #7]
    9dd6:	7aa8      	ldrb	r0, [r5, #10]
    9dd8:	7220      	strb	r0, [r4, #8]
    9dda:	8968      	ldrh	r0, [r5, #10]
    9ddc:	0a00      	lsrs	r0, r0, #8
    9dde:	7260      	strb	r0, [r4, #9]
    9de0:	2008      	movs	r0, #8
    9de2:	e0a4      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9de4:	2010      	movs	r0, #16
    9de6:	e000      	b.n	9dea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    9de8:	201a      	movs	r0, #26
    9dea:	7020      	strb	r0, [r4, #0]
    9dec:	7928      	ldrb	r0, [r5, #4]
    9dee:	70a0      	strb	r0, [r4, #2]
    9df0:	2001      	movs	r0, #1
    9df2:	e09c      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9df4:	2029      	movs	r0, #41	; 0x29
    9df6:	f7f8 fa7b 	bl	22f0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    9dfa:	b148      	cbz	r0, 9e10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    9dfc:	7026      	strb	r6, [r4, #0]
    9dfe:	2029      	movs	r0, #41	; 0x29
    9e00:	70a0      	strb	r0, [r4, #2]
    9e02:	2221      	movs	r2, #33	; 0x21
    9e04:	1d29      	adds	r1, r5, #4
    9e06:	1ce0      	adds	r0, r4, #3
    9e08:	f002 fa87 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9e0c:	2022      	movs	r0, #34	; 0x22
    9e0e:	e08e      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9e10:	200a      	movs	r0, #10
    9e12:	f7f8 fa6d 	bl	22f0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    9e16:	2800      	cmp	r0, #0
    9e18:	4629      	mov	r1, r5
    9e1a:	4620      	mov	r0, r4
    9e1c:	d002      	beq.n	9e24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    9e1e:	f000 f95b 	bl	a0d8 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    9e22:	e082      	b.n	9f2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    9e24:	f000 f92f 	bl	a086 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    9e28:	e07f      	b.n	9f2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    9e2a:	7026      	strb	r6, [r4, #0]
    9e2c:	2014      	movs	r0, #20
    9e2e:	70a0      	strb	r0, [r4, #2]
    9e30:	7928      	ldrb	r0, [r5, #4]
    9e32:	70e0      	strb	r0, [r4, #3]
    9e34:	88a8      	ldrh	r0, [r5, #4]
    9e36:	0a00      	lsrs	r0, r0, #8
    9e38:	7120      	strb	r0, [r4, #4]
    9e3a:	79a8      	ldrb	r0, [r5, #6]
    9e3c:	e0c0      	b.n	9fc0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    9e3e:	223e      	movs	r2, #62	; 0x3e
    9e40:	7022      	strb	r2, [r4, #0]
    9e42:	2204      	movs	r2, #4
    9e44:	70a2      	strb	r2, [r4, #2]
    9e46:	6868      	ldr	r0, [r5, #4]
    9e48:	f8c4 0003 	str.w	r0, [r4, #3]
    9e4c:	68a8      	ldr	r0, [r5, #8]
    9e4e:	f8c4 0007 	str.w	r0, [r4, #7]
    9e52:	89a8      	ldrh	r0, [r5, #12]
    9e54:	f8a4 000b 	strh.w	r0, [r4, #11]
    9e58:	7ba8      	ldrb	r0, [r5, #14]
    9e5a:	7360      	strb	r0, [r4, #13]
    9e5c:	e000      	b.n	9e60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    9e5e:	e068      	b.n	9f32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    9e60:	200c      	movs	r0, #12
    9e62:	e064      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9e64:	7026      	strb	r6, [r4, #0]
    9e66:	70a2      	strb	r2, [r4, #2]
    9e68:	7928      	ldrb	r0, [r5, #4]
    9e6a:	70e0      	strb	r0, [r4, #3]
    9e6c:	79a8      	ldrb	r0, [r5, #6]
    9e6e:	7120      	strb	r0, [r4, #4]
    9e70:	88e8      	ldrh	r0, [r5, #6]
    9e72:	0a00      	lsrs	r0, r0, #8
    9e74:	7160      	strb	r0, [r4, #5]
    9e76:	7a28      	ldrb	r0, [r5, #8]
    9e78:	71a0      	strb	r0, [r4, #6]
    9e7a:	8928      	ldrh	r0, [r5, #8]
    9e7c:	0a00      	lsrs	r0, r0, #8
    9e7e:	71e0      	strb	r0, [r4, #7]
    9e80:	7aa8      	ldrb	r0, [r5, #10]
    9e82:	7220      	strb	r0, [r4, #8]
    9e84:	8968      	ldrh	r0, [r5, #10]
    9e86:	0a00      	lsrs	r0, r0, #8
    9e88:	7260      	strb	r0, [r4, #9]
    9e8a:	7b28      	ldrb	r0, [r5, #12]
    9e8c:	72a0      	strb	r0, [r4, #10]
    9e8e:	89a8      	ldrh	r0, [r5, #12]
    9e90:	0a00      	lsrs	r0, r0, #8
    9e92:	72e0      	strb	r0, [r4, #11]
    9e94:	e0d1      	b.n	a03a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    9e96:	7026      	strb	r6, [r4, #0]
    9e98:	70a7      	strb	r7, [r4, #2]
    9e9a:	7928      	ldrb	r0, [r5, #4]
    9e9c:	70e0      	strb	r0, [r4, #3]
    9e9e:	88a8      	ldrh	r0, [r5, #4]
    9ea0:	0a00      	lsrs	r0, r0, #8
    9ea2:	7120      	strb	r0, [r4, #4]
    9ea4:	f8d5 0006 	ldr.w	r0, [r5, #6]
    9ea8:	f8c4 0005 	str.w	r0, [r4, #5]
    9eac:	f8d5 000a 	ldr.w	r0, [r5, #10]
    9eb0:	f8c4 0009 	str.w	r0, [r4, #9]
    9eb4:	89e8      	ldrh	r0, [r5, #14]
    9eb6:	f8a4 000d 	strh.w	r0, [r4, #13]
    9eba:	e0e2      	b.n	a082 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    9ebc:	2011      	movs	r0, #17
    9ebe:	e045      	b.n	9f4c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    9ec0:	7027      	strb	r7, [r4, #0]
    9ec2:	7928      	ldrb	r0, [r5, #4]
    9ec4:	70a0      	strb	r0, [r4, #2]
    9ec6:	7968      	ldrb	r0, [r5, #5]
    9ec8:	70e0      	strb	r0, [r4, #3]
    9eca:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    9ece:	0a00      	lsrs	r0, r0, #8
    9ed0:	7120      	strb	r0, [r4, #4]
    9ed2:	79e8      	ldrb	r0, [r5, #7]
    9ed4:	e074      	b.n	9fc0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    9ed6:	2008      	movs	r0, #8
    9ed8:	7020      	strb	r0, [r4, #0]
    9eda:	7928      	ldrb	r0, [r5, #4]
    9edc:	70a0      	strb	r0, [r4, #2]
    9ede:	79a8      	ldrb	r0, [r5, #6]
    9ee0:	70e0      	strb	r0, [r4, #3]
    9ee2:	88e8      	ldrh	r0, [r5, #6]
    9ee4:	0a00      	lsrs	r0, r0, #8
    9ee6:	7120      	strb	r0, [r4, #4]
    9ee8:	7a28      	ldrb	r0, [r5, #8]
    9eea:	e069      	b.n	9fc0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    9eec:	2030      	movs	r0, #48	; 0x30
    9eee:	7020      	strb	r0, [r4, #0]
    9ef0:	7928      	ldrb	r0, [r5, #4]
    9ef2:	70a0      	strb	r0, [r4, #2]
    9ef4:	79a8      	ldrb	r0, [r5, #6]
    9ef6:	70e0      	strb	r0, [r4, #3]
    9ef8:	88e8      	ldrh	r0, [r5, #6]
    9efa:	0a00      	lsrs	r0, r0, #8
    9efc:	7120      	strb	r0, [r4, #4]
    9efe:	2003      	movs	r0, #3
    9f00:	e015      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9f02:	7026      	strb	r6, [r4, #0]
    9f04:	2007      	movs	r0, #7
    9f06:	e060      	b.n	9fca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    9f08:	7026      	strb	r6, [r4, #0]
    9f0a:	70a3      	strb	r3, [r4, #2]
    9f0c:	7928      	ldrb	r0, [r5, #4]
    9f0e:	70e0      	strb	r0, [r4, #3]
    9f10:	79a8      	ldrb	r0, [r5, #6]
    9f12:	7120      	strb	r0, [r4, #4]
    9f14:	88e8      	ldrh	r0, [r5, #6]
    9f16:	0a00      	lsrs	r0, r0, #8
    9f18:	7160      	strb	r0, [r4, #5]
    9f1a:	7a28      	ldrb	r0, [r5, #8]
    9f1c:	71a0      	strb	r0, [r4, #6]
    9f1e:	7a68      	ldrb	r0, [r5, #9]
    9f20:	e029      	b.n	9f76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    9f22:	1d29      	adds	r1, r5, #4
    9f24:	4620      	mov	r0, r4
    9f26:	f7f8 f9a3 	bl	2270 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
    9f2a:	2800      	cmp	r0, #0
    9f2c:	d001      	beq.n	9f32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    9f2e:	7060      	strb	r0, [r4, #1]
    9f30:	1c80      	adds	r0, r0, #2
    9f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f36:	e08f      	b.n	a058 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    9f38:	e063      	b.n	a002 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    9f3a:	e044      	b.n	9fc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    9f3c:	e06f      	b.n	a01e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    9f3e:	e07e      	b.n	a03e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    9f40:	e036      	b.n	9fb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    9f42:	e01e      	b.n	9f82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    9f44:	e01a      	b.n	9f7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    9f46:	e009      	b.n	9f5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    9f48:	e7ff      	b.n	9f4a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    9f4a:	2057      	movs	r0, #87	; 0x57
    9f4c:	7020      	strb	r0, [r4, #0]
    9f4e:	7928      	ldrb	r0, [r5, #4]
    9f50:	70a0      	strb	r0, [r4, #2]
    9f52:	88a8      	ldrh	r0, [r5, #4]
    9f54:	0a00      	lsrs	r0, r0, #8
    9f56:	70e0      	strb	r0, [r4, #3]
    9f58:	2002      	movs	r0, #2
    9f5a:	e7e8      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9f5c:	7026      	strb	r6, [r4, #0]
    9f5e:	2012      	movs	r0, #18
    9f60:	70a0      	strb	r0, [r4, #2]
    9f62:	7928      	ldrb	r0, [r5, #4]
    9f64:	70e0      	strb	r0, [r4, #3]
    9f66:	7968      	ldrb	r0, [r5, #5]
    9f68:	7120      	strb	r0, [r4, #4]
    9f6a:	79a8      	ldrb	r0, [r5, #6]
    9f6c:	7160      	strb	r0, [r4, #5]
    9f6e:	88e8      	ldrh	r0, [r5, #6]
    9f70:	0a00      	lsrs	r0, r0, #8
    9f72:	71a0      	strb	r0, [r4, #6]
    9f74:	7a28      	ldrb	r0, [r5, #8]
    9f76:	71e0      	strb	r0, [r4, #7]
    9f78:	2006      	movs	r0, #6
    9f7a:	e7d8      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9f7c:	7026      	strb	r6, [r4, #0]
    9f7e:	2020      	movs	r0, #32
    9f80:	e041      	b.n	a006 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    9f82:	7026      	strb	r6, [r4, #0]
    9f84:	2021      	movs	r0, #33	; 0x21
    9f86:	70a0      	strb	r0, [r4, #2]
    9f88:	7928      	ldrb	r0, [r5, #4]
    9f8a:	70e0      	strb	r0, [r4, #3]
    9f8c:	7968      	ldrb	r0, [r5, #5]
    9f8e:	7120      	strb	r0, [r4, #4]
    9f90:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    9f94:	0a00      	lsrs	r0, r0, #8
    9f96:	7160      	strb	r0, [r4, #5]
    9f98:	79e8      	ldrb	r0, [r5, #7]
    9f9a:	71a0      	strb	r0, [r4, #6]
    9f9c:	7a28      	ldrb	r0, [r5, #8]
    9f9e:	71e0      	strb	r0, [r4, #7]
    9fa0:	7a68      	ldrb	r0, [r5, #9]
    9fa2:	7220      	strb	r0, [r4, #8]
    9fa4:	7aa8      	ldrb	r0, [r5, #10]
    9fa6:	7260      	strb	r0, [r4, #9]
    9fa8:	7ae8      	ldrb	r0, [r5, #11]
    9faa:	72a0      	strb	r0, [r4, #10]
    9fac:	2009      	movs	r0, #9
    9fae:	e7be      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9fb0:	7021      	strb	r1, [r4, #0]
    9fb2:	20a1      	movs	r0, #161	; 0xa1
    9fb4:	70a0      	strb	r0, [r4, #2]
    9fb6:	7928      	ldrb	r0, [r5, #4]
    9fb8:	70e0      	strb	r0, [r4, #3]
    9fba:	7968      	ldrb	r0, [r5, #5]
    9fbc:	7120      	strb	r0, [r4, #4]
    9fbe:	2000      	movs	r0, #0
    9fc0:	7160      	strb	r0, [r4, #5]
    9fc2:	2004      	movs	r0, #4
    9fc4:	e7b3      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    9fc6:	7021      	strb	r1, [r4, #0]
    9fc8:	20a2      	movs	r0, #162	; 0xa2
    9fca:	70a0      	strb	r0, [r4, #2]
    9fcc:	7928      	ldrb	r0, [r5, #4]
    9fce:	70e0      	strb	r0, [r4, #3]
    9fd0:	88a8      	ldrh	r0, [r5, #4]
    9fd2:	0a00      	lsrs	r0, r0, #8
    9fd4:	7120      	strb	r0, [r4, #4]
    9fd6:	79a8      	ldrb	r0, [r5, #6]
    9fd8:	7160      	strb	r0, [r4, #5]
    9fda:	88e8      	ldrh	r0, [r5, #6]
    9fdc:	0a00      	lsrs	r0, r0, #8
    9fde:	71a0      	strb	r0, [r4, #6]
    9fe0:	7a28      	ldrb	r0, [r5, #8]
    9fe2:	71e0      	strb	r0, [r4, #7]
    9fe4:	8928      	ldrh	r0, [r5, #8]
    9fe6:	0a00      	lsrs	r0, r0, #8
    9fe8:	7220      	strb	r0, [r4, #8]
    9fea:	7aa8      	ldrb	r0, [r5, #10]
    9fec:	7260      	strb	r0, [r4, #9]
    9fee:	8968      	ldrh	r0, [r5, #10]
    9ff0:	0a00      	lsrs	r0, r0, #8
    9ff2:	72a0      	strb	r0, [r4, #10]
    9ff4:	7b28      	ldrb	r0, [r5, #12]
    9ff6:	72e0      	strb	r0, [r4, #11]
    9ff8:	89a8      	ldrh	r0, [r5, #12]
    9ffa:	0a00      	lsrs	r0, r0, #8
    9ffc:	7320      	strb	r0, [r4, #12]
    9ffe:	200b      	movs	r0, #11
    a000:	e795      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    a002:	7021      	strb	r1, [r4, #0]
    a004:	20a3      	movs	r0, #163	; 0xa3
    a006:	70a0      	strb	r0, [r4, #2]
    a008:	7928      	ldrb	r0, [r5, #4]
    a00a:	70e0      	strb	r0, [r4, #3]
    a00c:	88a8      	ldrh	r0, [r5, #4]
    a00e:	0a00      	lsrs	r0, r0, #8
    a010:	7120      	strb	r0, [r4, #4]
    a012:	79a8      	ldrb	r0, [r5, #6]
    a014:	7160      	strb	r0, [r4, #5]
    a016:	79e8      	ldrb	r0, [r5, #7]
    a018:	71a0      	strb	r0, [r4, #6]
    a01a:	2005      	movs	r0, #5
    a01c:	e787      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    a01e:	7026      	strb	r6, [r4, #0]
    a020:	2013      	movs	r0, #19
    a022:	70a0      	strb	r0, [r4, #2]
    a024:	7928      	ldrb	r0, [r5, #4]
    a026:	70e0      	strb	r0, [r4, #3]
    a028:	7968      	ldrb	r0, [r5, #5]
    a02a:	7120      	strb	r0, [r4, #4]
    a02c:	f8d5 0006 	ldr.w	r0, [r5, #6]
    a030:	f8c4 0005 	str.w	r0, [r4, #5]
    a034:	8968      	ldrh	r0, [r5, #10]
    a036:	f8a4 0009 	strh.w	r0, [r4, #9]
    a03a:	200a      	movs	r0, #10
    a03c:	e777      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    a03e:	7021      	strb	r1, [r4, #0]
    a040:	20a4      	movs	r0, #164	; 0xa4
    a042:	70a0      	strb	r0, [r4, #2]
    a044:	7928      	ldrb	r0, [r5, #4]
    a046:	70e0      	strb	r0, [r4, #3]
    a048:	88a8      	ldrh	r0, [r5, #4]
    a04a:	0a00      	lsrs	r0, r0, #8
    a04c:	7120      	strb	r0, [r4, #4]
    a04e:	79a8      	ldrb	r0, [r5, #6]
    a050:	7160      	strb	r0, [r4, #5]
    a052:	79e8      	ldrb	r0, [r5, #7]
    a054:	71a0      	strb	r0, [r4, #6]
    a056:	e6ac      	b.n	9db2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    a058:	7021      	strb	r1, [r4, #0]
    a05a:	2080      	movs	r0, #128	; 0x80
    a05c:	70a0      	strb	r0, [r4, #2]
    a05e:	88a9      	ldrh	r1, [r5, #4]
    a060:	f8a4 1003 	strh.w	r1, [r4, #3]
    a064:	88e9      	ldrh	r1, [r5, #6]
    a066:	f8a4 1005 	strh.w	r1, [r4, #5]
    a06a:	7a29      	ldrb	r1, [r5, #8]
    a06c:	71e1      	strb	r1, [r4, #7]
    a06e:	8969      	ldrh	r1, [r5, #10]
    a070:	8121      	strh	r1, [r4, #8]
    a072:	89a9      	ldrh	r1, [r5, #12]
    a074:	8161      	strh	r1, [r4, #10]
    a076:	89e9      	ldrh	r1, [r5, #14]
    a078:	81a1      	strh	r1, [r4, #12]
    a07a:	7c29      	ldrb	r1, [r5, #16]
    a07c:	f001 0101 	and.w	r1, r1, #1
    a080:	73a1      	strb	r1, [r4, #14]
    a082:	200d      	movs	r0, #13
    a084:	e753      	b.n	9f2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000a086 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    a086:	223e      	movs	r2, #62	; 0x3e
    a088:	7002      	strb	r2, [r0, #0]
    a08a:	2201      	movs	r2, #1
    a08c:	7082      	strb	r2, [r0, #2]
    a08e:	790a      	ldrb	r2, [r1, #4]
    a090:	70c2      	strb	r2, [r0, #3]
    a092:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    a096:	7102      	strb	r2, [r0, #4]
    a098:	880a      	ldrh	r2, [r1, #0]
    a09a:	0a12      	lsrs	r2, r2, #8
    a09c:	7142      	strb	r2, [r0, #5]
    a09e:	788a      	ldrb	r2, [r1, #2]
    a0a0:	7182      	strb	r2, [r0, #6]
    a0a2:	78ca      	ldrb	r2, [r1, #3]
    a0a4:	71c2      	strb	r2, [r0, #7]
    a0a6:	684a      	ldr	r2, [r1, #4]
    a0a8:	6082      	str	r2, [r0, #8]
    a0aa:	890a      	ldrh	r2, [r1, #8]
    a0ac:	8182      	strh	r2, [r0, #12]
    a0ae:	7d8a      	ldrb	r2, [r1, #22]
    a0b0:	7382      	strb	r2, [r0, #14]
    a0b2:	8aca      	ldrh	r2, [r1, #22]
    a0b4:	0a12      	lsrs	r2, r2, #8
    a0b6:	73c2      	strb	r2, [r0, #15]
    a0b8:	7e0a      	ldrb	r2, [r1, #24]
    a0ba:	7402      	strb	r2, [r0, #16]
    a0bc:	8b0a      	ldrh	r2, [r1, #24]
    a0be:	0a12      	lsrs	r2, r2, #8
    a0c0:	7442      	strb	r2, [r0, #17]
    a0c2:	7e8a      	ldrb	r2, [r1, #26]
    a0c4:	7482      	strb	r2, [r0, #18]
    a0c6:	8b4a      	ldrh	r2, [r1, #26]
    a0c8:	0a12      	lsrs	r2, r2, #8
    a0ca:	74c2      	strb	r2, [r0, #19]
    a0cc:	7f09      	ldrb	r1, [r1, #28]
    a0ce:	7501      	strb	r1, [r0, #20]
    a0d0:	2113      	movs	r1, #19
    a0d2:	7041      	strb	r1, [r0, #1]
    a0d4:	4608      	mov	r0, r1
    a0d6:	4770      	bx	lr
    a0d8:	223e      	movs	r2, #62	; 0x3e
    a0da:	7002      	strb	r2, [r0, #0]
    a0dc:	220a      	movs	r2, #10
    a0de:	7082      	strb	r2, [r0, #2]
    a0e0:	790a      	ldrb	r2, [r1, #4]
    a0e2:	70c2      	strb	r2, [r0, #3]
    a0e4:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    a0e8:	7102      	strb	r2, [r0, #4]
    a0ea:	880a      	ldrh	r2, [r1, #0]
    a0ec:	0a12      	lsrs	r2, r2, #8
    a0ee:	7142      	strb	r2, [r0, #5]
    a0f0:	788a      	ldrb	r2, [r1, #2]
    a0f2:	7182      	strb	r2, [r0, #6]
    a0f4:	78ca      	ldrb	r2, [r1, #3]
    a0f6:	71c2      	strb	r2, [r0, #7]
    a0f8:	684a      	ldr	r2, [r1, #4]
    a0fa:	6082      	str	r2, [r0, #8]
    a0fc:	890a      	ldrh	r2, [r1, #8]
    a0fe:	8182      	strh	r2, [r0, #12]
    a100:	f8d1 200a 	ldr.w	r2, [r1, #10]
    a104:	f8c0 200e 	str.w	r2, [r0, #14]
    a108:	89ca      	ldrh	r2, [r1, #14]
    a10a:	8242      	strh	r2, [r0, #18]
    a10c:	690a      	ldr	r2, [r1, #16]
    a10e:	6142      	str	r2, [r0, #20]
    a110:	8a8a      	ldrh	r2, [r1, #20]
    a112:	8302      	strh	r2, [r0, #24]
    a114:	7d8a      	ldrb	r2, [r1, #22]
    a116:	7682      	strb	r2, [r0, #26]
    a118:	8aca      	ldrh	r2, [r1, #22]
    a11a:	0a12      	lsrs	r2, r2, #8
    a11c:	76c2      	strb	r2, [r0, #27]
    a11e:	7e0a      	ldrb	r2, [r1, #24]
    a120:	7702      	strb	r2, [r0, #28]
    a122:	8b0a      	ldrh	r2, [r1, #24]
    a124:	0a12      	lsrs	r2, r2, #8
    a126:	7742      	strb	r2, [r0, #29]
    a128:	7e8a      	ldrb	r2, [r1, #26]
    a12a:	7782      	strb	r2, [r0, #30]
    a12c:	8b4a      	ldrh	r2, [r1, #26]
    a12e:	0a12      	lsrs	r2, r2, #8
    a130:	77c2      	strb	r2, [r0, #31]
    a132:	7f09      	ldrb	r1, [r1, #28]
    a134:	f880 1020 	strb.w	r1, [r0, #32]
    a138:	211f      	movs	r1, #31
    a13a:	7041      	strb	r1, [r0, #1]
    a13c:	4608      	mov	r0, r1
    a13e:	4770      	bx	lr
    a140:	094a      	lsrs	r2, r1, #5
    a142:	f001 011f 	and.w	r1, r1, #31
    a146:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    a14a:	40c8      	lsrs	r0, r1
    a14c:	f000 0001 	and.w	r0, r0, #1
    a150:	4770      	bx	lr

0000a152 <sdc_hci_get>:
    a152:	b510      	push	{r4, lr}
    a154:	460c      	mov	r4, r1
    a156:	b130      	cbz	r0, a166 <sdc_hci_get+0x14>
    a158:	b12c      	cbz	r4, a166 <sdc_hci_get+0x14>
    a15a:	f7f8 f833 	bl	21c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    a15e:	b128      	cbz	r0, a16c <sdc_hci_get+0x1a>
    a160:	7020      	strb	r0, [r4, #0]
    a162:	2000      	movs	r0, #0
    a164:	bd10      	pop	{r4, pc}
    a166:	f06f 0015 	mvn.w	r0, #21
    a16a:	bd10      	pop	{r4, pc}
    a16c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    a170:	bd10      	pop	{r4, pc}

0000a172 <sdc_hci_cmd_cb_set_event_mask>:
    a172:	b510      	push	{r4, lr}
    a174:	f7f8 f8cc 	bl	2310 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    a178:	2000      	movs	r0, #0
    a17a:	bd10      	pop	{r4, pc}

0000a17c <sdc_hci_cmd_vs_conn_event_extend>:
    a17c:	b508      	push	{r3, lr}
    a17e:	7800      	ldrb	r0, [r0, #0]
    a180:	f88d 0000 	strb.w	r0, [sp]
    a184:	4668      	mov	r0, sp
    a186:	f001 fb0f 	bl	b7a8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    a18a:	bd08      	pop	{r3, pc}

0000a18c <sdc_hci_cmd_vs_conn_update>:
    a18c:	2001      	movs	r0, #1
    a18e:	4770      	bx	lr

0000a190 <sdc_hci_cmd_vs_event_length_set>:
    a190:	f7fa ba58 	b.w	4644 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000a194 <sdc_hci_cmd_vs_llpm_mode_set>:
    a194:	2001      	movs	r0, #1
    a196:	4770      	bx	lr

0000a198 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    a198:	7800      	ldrb	r0, [r0, #0]
    a19a:	b100      	cbz	r0, a19e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    a19c:	2001      	movs	r0, #1
    a19e:	f001 bad8 	b.w	b752 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000a1a2 <sdc_hci_cmd_vs_set_adv_randomness>:
    a1a2:	f001 badb 	b.w	b75c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000a1a6 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    a1a6:	b510      	push	{r4, lr}
    a1a8:	4604      	mov	r4, r0
    a1aa:	f7ff fa0d 	bl	95c8 <mpsl_temperature_get>
    a1ae:	17c1      	asrs	r1, r0, #31
    a1b0:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    a1b4:	1080      	asrs	r0, r0, #2
    a1b6:	287f      	cmp	r0, #127	; 0x7f
    a1b8:	dd01      	ble.n	a1be <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    a1ba:	207f      	movs	r0, #127	; 0x7f
    a1bc:	e004      	b.n	a1c8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    a1be:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    a1c2:	4288      	cmp	r0, r1
    a1c4:	da00      	bge.n	a1c8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    a1c6:	4608      	mov	r0, r1
    a1c8:	7020      	strb	r0, [r4, #0]
    a1ca:	2000      	movs	r0, #0
    a1cc:	bd10      	pop	{r4, pc}

0000a1ce <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    a1ce:	f001 bada 	b.w	b786 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000a1d2 <sdc_hci_cmd_ip_read_bd_addr>:
    a1d2:	f001 bbac 	b.w	b92e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000a1d6 <sdc_hci_cmd_ip_read_local_version_information>:
    a1d6:	f7fa ba43 	b.w	4660 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000a1da <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    a1da:	f001 b92a 	b.w	b432 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000a1de <sdc_hci_cmd_le_clear_filter_accept_list>:
    a1de:	f001 b93f 	b.w	b460 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000a1e2 <sdc_hci_cmd_le_encrypt>:
    a1e2:	f001 b94a 	b.w	b47a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000a1e6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    a1e6:	8802      	ldrh	r2, [r0, #0]
    a1e8:	800a      	strh	r2, [r1, #0]
    a1ea:	f001 b94f 	b.w	b48c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000a1ee <sdc_hci_cmd_le_rand>:
    a1ee:	f001 b966 	b.w	b4be <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000a1f2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    a1f2:	f001 b96a 	b.w	b4ca <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000a1f6 <sdc_hci_cmd_le_read_buffer_size>:
    a1f6:	f7fa b9b3 	b.w	4560 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000a1fa <sdc_hci_cmd_le_read_filter_accept_list_size>:
    a1fa:	f001 b981 	b.w	b500 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000a1fe <sdc_hci_cmd_le_read_transmit_power>:
    a1fe:	f001 b96f 	b.w	b4e0 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000a202 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    a202:	f001 b984 	b.w	b50e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000a206 <sdc_hci_cmd_le_set_adv_data>:
    a206:	f001 b997 	b.w	b538 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000a20a <sdc_hci_cmd_le_set_adv_enable>:
    a20a:	f001 b9aa 	b.w	b562 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000a20e <sdc_hci_cmd_le_set_adv_params>:
    a20e:	f001 b9db 	b.w	b5c8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000a212 <sdc_hci_cmd_le_set_data_related_address_changes>:
    a212:	f001 ba6e 	b.w	b6f2 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000a216 <sdc_hci_cmd_le_set_event_mask>:
    a216:	b510      	push	{r4, lr}
    a218:	f7f8 f872 	bl	2300 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    a21c:	2000      	movs	r0, #0
    a21e:	bd10      	pop	{r4, pc}

0000a220 <sdc_hci_cmd_le_set_random_address>:
    a220:	f001 ba74 	b.w	b70c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000a224 <sdc_hci_cmd_le_set_scan_response_data>:
    a224:	f001 ba80 	b.w	b728 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    a228:	b570      	push	{r4, r5, r6, lr}
    a22a:	880b      	ldrh	r3, [r1, #0]
    a22c:	7cc4      	ldrb	r4, [r0, #19]
    a22e:	f100 0518 	add.w	r5, r0, #24
    a232:	f3c3 060e 	ubfx	r6, r3, #0, #15
    a236:	8802      	ldrh	r2, [r0, #0]
    a238:	4435      	add	r5, r6
    a23a:	1d64      	adds	r4, r4, #5
    a23c:	882d      	ldrh	r5, [r5, #0]
    a23e:	4422      	add	r2, r4
    a240:	b292      	uxth	r2, r2
    a242:	4425      	add	r5, r4
    a244:	1e54      	subs	r4, r2, #1
    a246:	442c      	add	r4, r5
    a248:	fb94 f4f2 	sdiv	r4, r4, r2
    a24c:	fb02 6204 	mla	r2, r2, r4, r6
    a250:	8840      	ldrh	r0, [r0, #2]
    a252:	b292      	uxth	r2, r2
    a254:	4290      	cmp	r0, r2
    a256:	d903      	bls.n	a260 <sdc_hci_cmd_le_set_scan_response_data+0x3c>
    a258:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    a25c:	4310      	orrs	r0, r2
    a25e:	e002      	b.n	a266 <sdc_hci_cmd_le_set_scan_response_data+0x42>
    a260:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a264:	4398      	bics	r0, r3
    a266:	8008      	strh	r0, [r1, #0]
    a268:	bd70      	pop	{r4, r5, r6, pc}

0000a26a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    a26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a26e:	461d      	mov	r5, r3
    a270:	4616      	mov	r6, r2
    a272:	9f06      	ldr	r7, [sp, #24]
    a274:	460b      	mov	r3, r1
    a276:	4604      	mov	r4, r0
    a278:	463a      	mov	r2, r7
    a27a:	4629      	mov	r1, r5
    a27c:	4630      	mov	r0, r6
    a27e:	f000 f839 	bl	a2f4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    a282:	4283      	cmp	r3, r0
    a284:	d201      	bcs.n	a28a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    a286:	219e      	movs	r1, #158	; 0x9e
    a288:	e012      	b.n	a2b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    a28a:	07a0      	lsls	r0, r4, #30
    a28c:	d001      	beq.n	a292 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    a28e:	219f      	movs	r1, #159	; 0x9f
    a290:	e00e      	b.n	a2b0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    a292:	2218      	movs	r2, #24
    a294:	2100      	movs	r1, #0
    a296:	4620      	mov	r0, r4
    a298:	f002 f8b9 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a29c:	19a8      	adds	r0, r5, r6
    a29e:	1d40      	adds	r0, r0, #5
    a2a0:	4378      	muls	r0, r7
    a2a2:	b280      	uxth	r0, r0
    a2a4:	74e5      	strb	r5, [r4, #19]
    a2a6:	8060      	strh	r0, [r4, #2]
    a2a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a2ac:	d903      	bls.n	a2b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    a2ae:	21a4      	movs	r1, #164	; 0xa4
    a2b0:	2014      	movs	r0, #20
    a2b2:	f7f7 fecb 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2b6:	8026      	strh	r6, [r4, #0]
    a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a2bc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    a2bc:	b570      	push	{r4, r5, r6, lr}
    a2be:	460b      	mov	r3, r1
    a2c0:	4604      	mov	r4, r0
    a2c2:	f100 0118 	add.w	r1, r0, #24
    a2c6:	8902      	ldrh	r2, [r0, #8]
    a2c8:	8880      	ldrh	r0, [r0, #4]
    a2ca:	f3c2 050e 	ubfx	r5, r2, #0, #15
    a2ce:	440d      	add	r5, r1
    a2d0:	4282      	cmp	r2, r0
    a2d2:	d101      	bne.n	a2d8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    a2d4:	2000      	movs	r0, #0
    a2d6:	bd70      	pop	{r4, r5, r6, pc}
    a2d8:	b123      	cbz	r3, a2e4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    a2da:	7ce2      	ldrb	r2, [r4, #19]
    a2dc:	1ca9      	adds	r1, r5, #2
    a2de:	4618      	mov	r0, r3
    a2e0:	f002 f81b 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a2e4:	882d      	ldrh	r5, [r5, #0]
    a2e6:	f104 0108 	add.w	r1, r4, #8
    a2ea:	4620      	mov	r0, r4
    a2ec:	f7ff ff9c 	bl	a228 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    a2f0:	4628      	mov	r0, r5
    a2f2:	bd70      	pop	{r4, r5, r6, pc}

0000a2f4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    a2f4:	4401      	add	r1, r0
    a2f6:	1d49      	adds	r1, r1, #5
    a2f8:	4351      	muls	r1, r2
    a2fa:	b28a      	uxth	r2, r1
    a2fc:	2100      	movs	r1, #0
    a2fe:	2845      	cmp	r0, #69	; 0x45
    a300:	d202      	bcs.n	a308 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    a302:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    a306:	b281      	uxth	r1, r0
    a308:	3218      	adds	r2, #24
    a30a:	1850      	adds	r0, r2, r1
    a30c:	b280      	uxth	r0, r0
    a30e:	4770      	bx	lr

0000a310 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    a310:	b570      	push	{r4, r5, r6, lr}
    a312:	2300      	movs	r3, #0
    a314:	f1a1 0208 	sub.w	r2, r1, #8
    a318:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    a31c:	42a2      	cmp	r2, r4
    a31e:	d304      	bcc.n	a32a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    a320:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    a324:	2015      	movs	r0, #21
    a326:	f7f7 fe91 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a32a:	6802      	ldr	r2, [r0, #0]
    a32c:	b90a      	cbnz	r2, a332 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    a32e:	e01e      	b.n	a36e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    a330:	4610      	mov	r0, r2
    a332:	6802      	ldr	r2, [r0, #0]
    a334:	8893      	ldrh	r3, [r2, #4]
    a336:	428b      	cmp	r3, r1
    a338:	d002      	beq.n	a340 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    a33a:	6813      	ldr	r3, [r2, #0]
    a33c:	2b00      	cmp	r3, #0
    a33e:	d1f7      	bne.n	a330 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    a340:	8894      	ldrh	r4, [r2, #4]
    a342:	4613      	mov	r3, r2
    a344:	428c      	cmp	r4, r1
    a346:	d101      	bne.n	a34c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    a348:	6811      	ldr	r1, [r2, #0]
    a34a:	e00d      	b.n	a368 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    a34c:	f101 0508 	add.w	r5, r1, #8
    a350:	b2ae      	uxth	r6, r5
    a352:	2500      	movs	r5, #0
    a354:	42b4      	cmp	r4, r6
    a356:	d309      	bcc.n	a36c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    a358:	1a64      	subs	r4, r4, r1
    a35a:	4411      	add	r1, r2
    a35c:	600d      	str	r5, [r1, #0]
    a35e:	808c      	strh	r4, [r1, #4]
    a360:	6802      	ldr	r2, [r0, #0]
    a362:	6812      	ldr	r2, [r2, #0]
    a364:	6002      	str	r2, [r0, #0]
    a366:	600a      	str	r2, [r1, #0]
    a368:	6001      	str	r1, [r0, #0]
    a36a:	e000      	b.n	a36e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    a36c:	2300      	movs	r3, #0
    a36e:	4618      	mov	r0, r3
    a370:	bd70      	pop	{r4, r5, r6, pc}

0000a372 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    a372:	b510      	push	{r4, lr}
    a374:	000c      	movs	r4, r1
    a376:	d004      	beq.n	a382 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    a378:	2c08      	cmp	r4, #8
    a37a:	d207      	bcs.n	a38c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    a37c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    a380:	e00a      	b.n	a398 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    a382:	b108      	cbz	r0, a388 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    a384:	2100      	movs	r1, #0
    a386:	6001      	str	r1, [r0, #0]
    a388:	2000      	movs	r0, #0
    a38a:	bd10      	pop	{r4, pc}
    a38c:	b158      	cbz	r0, a3a6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    a38e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    a392:	d304      	bcc.n	a39e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    a394:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    a398:	2015      	movs	r0, #21
    a39a:	f7f7 fe57 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a39e:	b2a1      	uxth	r1, r4
    a3a0:	6800      	ldr	r0, [r0, #0]
    a3a2:	f000 f814 	bl	a3ce <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    a3a6:	1d20      	adds	r0, r4, #4
    a3a8:	bd10      	pop	{r4, pc}

0000a3aa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    a3aa:	2100      	movs	r1, #0
    a3ac:	6802      	ldr	r2, [r0, #0]
    a3ae:	e003      	b.n	a3b8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    a3b0:	8893      	ldrh	r3, [r2, #4]
    a3b2:	6812      	ldr	r2, [r2, #0]
    a3b4:	4419      	add	r1, r3
    a3b6:	b289      	uxth	r1, r1
    a3b8:	2a00      	cmp	r2, #0
    a3ba:	d1f9      	bne.n	a3b0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    a3bc:	f000 b807 	b.w	a3ce <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000a3c0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    a3c0:	2300      	movs	r3, #0
    a3c2:	600b      	str	r3, [r1, #0]
    a3c4:	808a      	strh	r2, [r1, #4]
    a3c6:	6802      	ldr	r2, [r0, #0]
    a3c8:	600a      	str	r2, [r1, #0]
    a3ca:	6001      	str	r1, [r0, #0]
    a3cc:	4770      	bx	lr
    a3ce:	2300      	movs	r3, #0
    a3d0:	6043      	str	r3, [r0, #4]
    a3d2:	1d02      	adds	r2, r0, #4
    a3d4:	8101      	strh	r1, [r0, #8]
    a3d6:	6002      	str	r2, [r0, #0]
    a3d8:	4770      	bx	lr
    a3da:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    a3de:	8159      	strh	r1, [r3, #10]
    a3e0:	4611      	mov	r1, r2
    a3e2:	f000 b814 	b.w	a40e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    a3e6:	b170      	cbz	r0, a406 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    a3e8:	7882      	ldrb	r2, [r0, #2]
    a3ea:	fbb1 f3f2 	udiv	r3, r1, r2
    a3ee:	fb02 1213 	mls	r2, r2, r3, r1
    a3f2:	b2d2      	uxtb	r2, r2
    a3f4:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    a3f8:	895b      	ldrh	r3, [r3, #10]
    a3fa:	428b      	cmp	r3, r1
    a3fc:	d101      	bne.n	a402 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    a3fe:	4610      	mov	r0, r2
    a400:	4770      	bx	lr
    a402:	78c3      	ldrb	r3, [r0, #3]
    a404:	b10b      	cbz	r3, a40a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    a406:	20ff      	movs	r0, #255	; 0xff
    a408:	4770      	bx	lr
    a40a:	f7f8 b8b9 	b.w	2580 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    a40e:	8802      	ldrh	r2, [r0, #0]
    a410:	fb01 0102 	mla	r1, r1, r2, r0
    a414:	7880      	ldrb	r0, [r0, #2]
    a416:	220a      	movs	r2, #10
    a418:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    a41c:	4408      	add	r0, r1
    a41e:	4770      	bx	lr

0000a420 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    a420:	b51c      	push	{r2, r3, r4, lr}
    a422:	4604      	mov	r4, r0
    a424:	2000      	movs	r0, #0
    a426:	9001      	str	r0, [sp, #4]
    a428:	9000      	str	r0, [sp, #0]
    a42a:	f88d 4006 	strb.w	r4, [sp, #6]
    a42e:	e00a      	b.n	a446 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    a430:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a434:	4621      	mov	r1, r4
    a436:	f7f8 f991 	bl	275c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a43a:	b120      	cbz	r0, a446 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    a43c:	f240 217e 	movw	r1, #638	; 0x27e
    a440:	2017      	movs	r0, #23
    a442:	f7f7 fe03 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a446:	4668      	mov	r0, sp
    a448:	f7f8 f938 	bl	26bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a44c:	2800      	cmp	r0, #0
    a44e:	d0ef      	beq.n	a430 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    a450:	bd1c      	pop	{r2, r3, r4, pc}

0000a452 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    a452:	b570      	push	{r4, r5, r6, lr}
    a454:	460e      	mov	r6, r1
    a456:	461d      	mov	r5, r3
    a458:	4611      	mov	r1, r2
    a45a:	f000 f813 	bl	a484 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    a45e:	4604      	mov	r4, r0
    a460:	4629      	mov	r1, r5
    a462:	4630      	mov	r0, r6
    a464:	f000 f804 	bl	a470 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    a468:	4420      	add	r0, r4
    a46a:	1d00      	adds	r0, r0, #4
    a46c:	b280      	uxth	r0, r0
    a46e:	bd70      	pop	{r4, r5, r6, pc}
    a470:	b510      	push	{r4, lr}
    a472:	460a      	mov	r2, r1
    a474:	2109      	movs	r1, #9
    a476:	f7ff ff3d 	bl	a2f4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    a47a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    a47e:	1cc0      	adds	r0, r0, #3
    a480:	4008      	ands	r0, r1
    a482:	bd10      	pop	{r4, pc}
    a484:	b510      	push	{r4, lr}
    a486:	460a      	mov	r2, r1
    a488:	210a      	movs	r1, #10
    a48a:	f7ff ff33 	bl	a2f4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    a48e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    a492:	1cc0      	adds	r0, r0, #3
    a494:	4008      	ands	r0, r1
    a496:	bd10      	pop	{r4, pc}
    a498:	b109      	cbz	r1, a49e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    a49a:	2100      	movs	r1, #0
    a49c:	e000      	b.n	a4a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    a49e:	2102      	movs	r1, #2
    a4a0:	1843      	adds	r3, r0, r1
    a4a2:	7d1a      	ldrb	r2, [r3, #20]
    a4a4:	2a02      	cmp	r2, #2
    a4a6:	d008      	beq.n	a4ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    a4a8:	7d5b      	ldrb	r3, [r3, #21]
    a4aa:	2b02      	cmp	r3, #2
    a4ac:	d009      	beq.n	a4c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    a4ae:	2a03      	cmp	r2, #3
    a4b0:	d003      	beq.n	a4ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    a4b2:	2b03      	cmp	r3, #3
    a4b4:	d005      	beq.n	a4c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    a4b6:	2000      	movs	r0, #0
    a4b8:	4770      	bx	lr
    a4ba:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    a4be:	8b00      	ldrh	r0, [r0, #24]
    a4c0:	4770      	bx	lr
    a4c2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    a4c6:	8b40      	ldrh	r0, [r0, #26]
    a4c8:	4770      	bx	lr
    a4ca:	b109      	cbz	r1, a4d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    a4cc:	2100      	movs	r1, #0
    a4ce:	e000      	b.n	a4d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    a4d0:	2102      	movs	r1, #2
    a4d2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    a4d6:	8b01      	ldrh	r1, [r0, #24]
    a4d8:	b911      	cbnz	r1, a4e0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    a4da:	8b40      	ldrh	r0, [r0, #26]
    a4dc:	2800      	cmp	r0, #0
    a4de:	d000      	beq.n	a4e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    a4e0:	2001      	movs	r0, #1
    a4e2:	4770      	bx	lr
    a4e4:	b538      	push	{r3, r4, r5, lr}
    a4e6:	7883      	ldrb	r3, [r0, #2]
    a4e8:	f88d 3000 	strb.w	r3, [sp]
    a4ec:	9b00      	ldr	r3, [sp, #0]
    a4ee:	9300      	str	r3, [sp, #0]
    a4f0:	f89d 3000 	ldrb.w	r3, [sp]
    a4f4:	b95b      	cbnz	r3, a50e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    a4f6:	2400      	movs	r4, #0
    a4f8:	b10a      	cbz	r2, a4fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    a4fa:	2300      	movs	r3, #0
    a4fc:	e000      	b.n	a500 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    a4fe:	2302      	movs	r3, #2
    a500:	18c2      	adds	r2, r0, r3
    a502:	7d15      	ldrb	r5, [r2, #20]
    a504:	2d02      	cmp	r5, #2
    a506:	d004      	beq.n	a512 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    a508:	7d52      	ldrb	r2, [r2, #21]
    a50a:	2a02      	cmp	r2, #2
    a50c:	d004      	beq.n	a518 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    a50e:	2000      	movs	r0, #0
    a510:	bd38      	pop	{r3, r4, r5, pc}
    a512:	461a      	mov	r2, r3
    a514:	1c5b      	adds	r3, r3, #1
    a516:	e000      	b.n	a51a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    a518:	1c5a      	adds	r2, r3, #1
    a51a:	b179      	cbz	r1, a53c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    a51c:	18c5      	adds	r5, r0, r3
    a51e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    a522:	752c      	strb	r4, [r5, #20]
    a524:	831c      	strh	r4, [r3, #24]
    a526:	2303      	movs	r3, #3
    a528:	1884      	adds	r4, r0, r2
    a52a:	7523      	strb	r3, [r4, #20]
    a52c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    a530:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    a534:	685b      	ldr	r3, [r3, #4]
    a536:	600b      	str	r3, [r1, #0]
    a538:	8b00      	ldrh	r0, [r0, #24]
    a53a:	8088      	strh	r0, [r1, #4]
    a53c:	2001      	movs	r0, #1
    a53e:	bd38      	pop	{r3, r4, r5, pc}
    a540:	b510      	push	{r4, lr}
    a542:	b109      	cbz	r1, a548 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    a544:	2100      	movs	r1, #0
    a546:	e000      	b.n	a54a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    a548:	2102      	movs	r1, #2
    a54a:	1843      	adds	r3, r0, r1
    a54c:	7d1c      	ldrb	r4, [r3, #20]
    a54e:	4294      	cmp	r4, r2
    a550:	d103      	bne.n	a55a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    a552:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    a556:	8b00      	ldrh	r0, [r0, #24]
    a558:	bd10      	pop	{r4, pc}
    a55a:	7d5b      	ldrb	r3, [r3, #21]
    a55c:	4293      	cmp	r3, r2
    a55e:	d103      	bne.n	a568 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    a560:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    a564:	8b40      	ldrh	r0, [r0, #26]
    a566:	bd10      	pop	{r4, pc}
    a568:	2000      	movs	r0, #0
    a56a:	bd10      	pop	{r4, pc}
    a56c:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    a570:	d201      	bcs.n	a576 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    a572:	0841      	lsrs	r1, r0, #1
    a574:	e000      	b.n	a578 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    a576:	21ff      	movs	r1, #255	; 0xff
    a578:	1a40      	subs	r0, r0, r1
    a57a:	f240 6172 	movw	r1, #1650	; 0x672
    a57e:	4288      	cmp	r0, r1
    a580:	db00      	blt.n	a584 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    a582:	4608      	mov	r0, r1
    a584:	b280      	uxth	r0, r0
    a586:	4770      	bx	lr

0000a588 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    a588:	2101      	movs	r1, #1
    a58a:	f7ff bf85 	b.w	a498 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000a58e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    a58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a592:	4606      	mov	r6, r0
    a594:	f342 0780 	sbfx	r7, r2, #2, #1
    a598:	7848      	ldrb	r0, [r1, #1]
    a59a:	460c      	mov	r4, r1
    a59c:	f022 0504 	bic.w	r5, r2, #4
    a5a0:	1c7f      	adds	r7, r7, #1
    a5a2:	b100      	cbz	r0, a5a6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    a5a4:	b90d      	cbnz	r5, a5aa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    a5a6:	4328      	orrs	r0, r5
    a5a8:	d104      	bne.n	a5b4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    a5aa:	b145      	cbz	r5, a5be <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    a5ac:	2100      	movs	r1, #0
    a5ae:	4620      	mov	r0, r4
    a5b0:	f7f8 f9ca 	bl	2948 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    a5b4:	20ff      	movs	r0, #255	; 0xff
    a5b6:	70a0      	strb	r0, [r4, #2]
    a5b8:	b11f      	cbz	r7, a5c2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    a5ba:	2000      	movs	r0, #0
    a5bc:	e002      	b.n	a5c4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    a5be:	2101      	movs	r1, #1
    a5c0:	e7f5      	b.n	a5ae <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    a5c2:	2002      	movs	r0, #2
    a5c4:	1821      	adds	r1, r4, r0
    a5c6:	7d09      	ldrb	r1, [r1, #20]
    a5c8:	2903      	cmp	r1, #3
    a5ca:	d102      	bne.n	a5d2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    a5cc:	2d02      	cmp	r5, #2
    a5ce:	d000      	beq.n	a5d2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    a5d0:	1c40      	adds	r0, r0, #1
    a5d2:	1822      	adds	r2, r4, r0
    a5d4:	2101      	movs	r1, #1
    a5d6:	7511      	strb	r1, [r2, #20]
    a5d8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    a5dc:	2200      	movs	r2, #0
    a5de:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    a5e2:	830a      	strh	r2, [r1, #24]
    a5e4:	6840      	ldr	r0, [r0, #4]
    a5e6:	70a2      	strb	r2, [r4, #2]
    a5e8:	4631      	mov	r1, r6
    a5ea:	f362 010f 	bfi	r1, r2, #0, #16
    a5ee:	e9c6 0100 	strd	r0, r1, [r6]
    a5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a5f6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    a5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a5fa:	461e      	mov	r6, r3
    a5fc:	4613      	mov	r3, r2
    a5fe:	4604      	mov	r4, r0
    a600:	b109      	cbz	r1, a606 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    a602:	2000      	movs	r0, #0
    a604:	e000      	b.n	a608 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    a606:	2002      	movs	r0, #2
    a608:	21ff      	movs	r1, #255	; 0xff
    a60a:	70a1      	strb	r1, [r4, #2]
    a60c:	1821      	adds	r1, r4, r0
    a60e:	7d0a      	ldrb	r2, [r1, #20]
    a610:	2a01      	cmp	r2, #1
    a612:	d003      	beq.n	a61c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    a614:	7d49      	ldrb	r1, [r1, #21]
    a616:	2901      	cmp	r1, #1
    a618:	d10c      	bne.n	a634 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    a61a:	1c40      	adds	r0, r0, #1
    a61c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    a620:	2700      	movs	r7, #0
    a622:	8b29      	ldrh	r1, [r5, #24]
    a624:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    a628:	198a      	adds	r2, r1, r6
    a62a:	4562      	cmp	r2, ip
    a62c:	d905      	bls.n	a63a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    a62e:	4420      	add	r0, r4
    a630:	832f      	strh	r7, [r5, #24]
    a632:	7507      	strb	r7, [r0, #20]
    a634:	2000      	movs	r0, #0
    a636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a63a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    a63e:	4632      	mov	r2, r6
    a640:	6840      	ldr	r0, [r0, #4]
    a642:	4408      	add	r0, r1
    a644:	4619      	mov	r1, r3
    a646:	f001 fe68 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a64a:	8b28      	ldrh	r0, [r5, #24]
    a64c:	4430      	add	r0, r6
    a64e:	8328      	strh	r0, [r5, #24]
    a650:	70a7      	strb	r7, [r4, #2]
    a652:	2001      	movs	r0, #1
    a654:	e7ef      	b.n	a636 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000a656 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    a656:	b510      	push	{r4, lr}
    a658:	2101      	movs	r1, #1
    a65a:	f7ff ff36 	bl	a4ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    a65e:	2800      	cmp	r0, #0
    a660:	d000      	beq.n	a664 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    a662:	2001      	movs	r0, #1
    a664:	bd10      	pop	{r4, pc}

0000a666 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    a666:	2201      	movs	r2, #1
    a668:	f7ff bf3c 	b.w	a4e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000a66c <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    a66c:	2200      	movs	r2, #0
    a66e:	f7ff bf39 	b.w	a4e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000a672 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    a672:	b510      	push	{r4, lr}
    a674:	2100      	movs	r1, #0
    a676:	f7ff ff28 	bl	a4ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    a67a:	2800      	cmp	r0, #0
    a67c:	d000      	beq.n	a680 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    a67e:	2001      	movs	r0, #1
    a680:	bd10      	pop	{r4, pc}

0000a682 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    a682:	b570      	push	{r4, r5, r6, lr}
    a684:	b109      	cbz	r1, a68a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    a686:	2300      	movs	r3, #0
    a688:	e000      	b.n	a68c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    a68a:	2302      	movs	r3, #2
    a68c:	21ff      	movs	r1, #255	; 0xff
    a68e:	7081      	strb	r1, [r0, #2]
    a690:	18c1      	adds	r1, r0, r3
    a692:	2402      	movs	r4, #2
    a694:	7d0d      	ldrb	r5, [r1, #20]
    a696:	2d01      	cmp	r5, #1
    a698:	d007      	beq.n	a6aa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    a69a:	7d4d      	ldrb	r5, [r1, #21]
    a69c:	2d01      	cmp	r5, #1
    a69e:	d009      	beq.n	a6b4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    a6a0:	f44f 718b 	mov.w	r1, #278	; 0x116
    a6a4:	2009      	movs	r0, #9
    a6a6:	f7f7 fcd1 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    a6ae:	831a      	strh	r2, [r3, #24]
    a6b0:	750c      	strb	r4, [r1, #20]
    a6b2:	e003      	b.n	a6bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    a6b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    a6b8:	835a      	strh	r2, [r3, #26]
    a6ba:	754c      	strb	r4, [r1, #21]
    a6bc:	2100      	movs	r1, #0
    a6be:	7081      	strb	r1, [r0, #2]
    a6c0:	bd70      	pop	{r4, r5, r6, pc}

0000a6c2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    a6c2:	2101      	movs	r1, #1
    a6c4:	7001      	strb	r1, [r0, #0]
    a6c6:	4770      	bx	lr

0000a6c8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    a6c8:	2201      	movs	r2, #1
    a6ca:	4611      	mov	r1, r2
    a6cc:	f7ff bf38 	b.w	a540 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000a6d0 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    a6d0:	2201      	movs	r2, #1
    a6d2:	2100      	movs	r1, #0
    a6d4:	f7ff bf34 	b.w	a540 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000a6d8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    a6d8:	2100      	movs	r1, #0
    a6da:	f7ff bedd 	b.w	a498 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    a6de:	2800      	cmp	r0, #0
    a6e0:	db09      	blt.n	a6f6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    a6e2:	f000 021f 	and.w	r2, r0, #31
    a6e6:	2101      	movs	r1, #1
    a6e8:	4091      	lsls	r1, r2
    a6ea:	0940      	lsrs	r0, r0, #5
    a6ec:	0080      	lsls	r0, r0, #2
    a6ee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a6f2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a6f6:	4770      	bx	lr
    a6f8:	2800      	cmp	r0, #0
    a6fa:	db0d      	blt.n	a718 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    a6fc:	f000 021f 	and.w	r2, r0, #31
    a700:	2101      	movs	r1, #1
    a702:	4091      	lsls	r1, r2
    a704:	0940      	lsrs	r0, r0, #5
    a706:	0080      	lsls	r0, r0, #2
    a708:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a70c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    a710:	f3bf 8f4f 	dsb	sy
    a714:	f3bf 8f6f 	isb	sy
    a718:	4770      	bx	lr
    a71a:	b510      	push	{r4, lr}
    a71c:	200e      	movs	r0, #14
    a71e:	f7ff ffeb 	bl	a6f8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    a722:	200e      	movs	r0, #14
    a724:	f7ff ffdb 	bl	a6de <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    a728:	200f      	movs	r0, #15
    a72a:	f7ff ffe5 	bl	a6f8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    a72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a732:	200f      	movs	r0, #15
    a734:	f7ff bfd3 	b.w	a6de <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    a738:	2800      	cmp	r0, #0
    a73a:	db09      	blt.n	a750 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    a73c:	f000 021f 	and.w	r2, r0, #31
    a740:	2101      	movs	r1, #1
    a742:	4091      	lsls	r1, r2
    a744:	0940      	lsrs	r0, r0, #5
    a746:	0080      	lsls	r0, r0, #2
    a748:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a74c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a750:	4770      	bx	lr
    a752:	5840      	ldr	r0, [r0, r1]
    a754:	2800      	cmp	r0, #0
    a756:	d000      	beq.n	a75a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    a758:	2001      	movs	r0, #1
    a75a:	4770      	bx	lr

0000a75c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    a75c:	b510      	push	{r4, lr}
    a75e:	4604      	mov	r4, r0
    a760:	4620      	mov	r0, r4
    a762:	f7f8 f9f9 	bl	2b58 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    a766:	2811      	cmp	r0, #17
    a768:	d0fa      	beq.n	a760 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    a76a:	bd10      	pop	{r4, pc}

0000a76c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    a76c:	b510      	push	{r4, lr}
    a76e:	f7ff fff5 	bl	a75c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    a772:	2800      	cmp	r0, #0
    a774:	d003      	beq.n	a77e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    a776:	21a9      	movs	r1, #169	; 0xa9
    a778:	201d      	movs	r0, #29
    a77a:	f7f7 fc67 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a77e:	bd10      	pop	{r4, pc}

0000a780 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    a780:	f7f8 bac8 	b.w	2d14 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

0000a784 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    a784:	b510      	push	{r4, lr}
    a786:	4050      	eors	r0, r2
    a788:	780a      	ldrb	r2, [r1, #0]
    a78a:	781c      	ldrb	r4, [r3, #0]
    a78c:	4062      	eors	r2, r4
    a78e:	4410      	add	r0, r2
    a790:	784a      	ldrb	r2, [r1, #1]
    a792:	785c      	ldrb	r4, [r3, #1]
    a794:	4062      	eors	r2, r4
    a796:	4410      	add	r0, r2
    a798:	788a      	ldrb	r2, [r1, #2]
    a79a:	789c      	ldrb	r4, [r3, #2]
    a79c:	4062      	eors	r2, r4
    a79e:	4410      	add	r0, r2
    a7a0:	78ca      	ldrb	r2, [r1, #3]
    a7a2:	78dc      	ldrb	r4, [r3, #3]
    a7a4:	4062      	eors	r2, r4
    a7a6:	4410      	add	r0, r2
    a7a8:	790a      	ldrb	r2, [r1, #4]
    a7aa:	791c      	ldrb	r4, [r3, #4]
    a7ac:	7949      	ldrb	r1, [r1, #5]
    a7ae:	4062      	eors	r2, r4
    a7b0:	4410      	add	r0, r2
    a7b2:	795a      	ldrb	r2, [r3, #5]
    a7b4:	4051      	eors	r1, r2
    a7b6:	42c1      	cmn	r1, r0
    a7b8:	d101      	bne.n	a7be <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    a7ba:	2001      	movs	r0, #1
    a7bc:	bd10      	pop	{r4, pc}
    a7be:	2000      	movs	r0, #0
    a7c0:	bd10      	pop	{r4, pc}

0000a7c2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    a7c2:	b510      	push	{r4, lr}
    a7c4:	2900      	cmp	r1, #0
    a7c6:	4604      	mov	r4, r0
    a7c8:	f04f 0106 	mov.w	r1, #6
    a7cc:	d002      	beq.n	a7d4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    a7ce:	f7f7 fc9f 	bl	2110 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a7d2:	e001      	b.n	a7d8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    a7d4:	f7f7 fcaa 	bl	212c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    a7d8:	7960      	ldrb	r0, [r4, #5]
    a7da:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    a7de:	7160      	strb	r0, [r4, #5]
    a7e0:	bd10      	pop	{r4, pc}

0000a7e2 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    a7e2:	4770      	bx	lr

0000a7e4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    a7e4:	b530      	push	{r4, r5, lr}
    a7e6:	460c      	mov	r4, r1
    a7e8:	4605      	mov	r5, r0
    a7ea:	b08d      	sub	sp, #52	; 0x34
    a7ec:	f04f 0103 	mov.w	r1, #3
    a7f0:	f104 0003 	add.w	r0, r4, #3
    a7f4:	b112      	cbz	r2, a7fc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    a7f6:	f7f7 fc8b 	bl	2110 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a7fa:	e001      	b.n	a800 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    a7fc:	f7f7 fc96 	bl	212c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    a800:	7960      	ldrb	r0, [r4, #5]
    a802:	220d      	movs	r2, #13
    a804:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    a808:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a80c:	7160      	strb	r0, [r4, #5]
    a80e:	2100      	movs	r1, #0
    a810:	a804      	add	r0, sp, #16
    a812:	f001 fdfc 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a816:	78e0      	ldrb	r0, [r4, #3]
    a818:	f88d 001f 	strb.w	r0, [sp, #31]
    a81c:	7920      	ldrb	r0, [r4, #4]
    a81e:	f88d 001e 	strb.w	r0, [sp, #30]
    a822:	7960      	ldrb	r0, [r4, #5]
    a824:	f88d 001d 	strb.w	r0, [sp, #29]
    a828:	2210      	movs	r2, #16
    a82a:	4629      	mov	r1, r5
    a82c:	4668      	mov	r0, sp
    a82e:	f001 fd74 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a832:	4668      	mov	r0, sp
    a834:	f7ff ff9a 	bl	a76c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    a838:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    a83c:	7020      	strb	r0, [r4, #0]
    a83e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    a842:	7060      	strb	r0, [r4, #1]
    a844:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    a848:	70a0      	strb	r0, [r4, #2]
    a84a:	b00d      	add	sp, #52	; 0x34
    a84c:	bd30      	pop	{r4, r5, pc}

0000a84e <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    a84e:	2101      	movs	r1, #1
    a850:	f7f8 bb2e 	b.w	2eb0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000a854 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    a854:	b510      	push	{r4, lr}
    a856:	f001 fa06 	bl	bc66 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    a85a:	b118      	cbz	r0, a864 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    a85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a860:	f7fa b940 	b.w	4ae4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    a864:	20ff      	movs	r0, #255	; 0xff
    a866:	bd10      	pop	{r4, pc}

0000a868 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    a868:	b510      	push	{r4, lr}
    a86a:	f7f8 fb4d 	bl	2f08 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    a86e:	2808      	cmp	r0, #8
    a870:	d003      	beq.n	a87a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    a872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a876:	f7f8 bb33 	b.w	2ee0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    a87a:	bd10      	pop	{r4, pc}

0000a87c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    a87c:	b570      	push	{r4, r5, r6, lr}
    a87e:	460e      	mov	r6, r1
    a880:	b08c      	sub	sp, #48	; 0x30
    a882:	4614      	mov	r4, r2
    a884:	4601      	mov	r1, r0
    a886:	461d      	mov	r5, r3
    a888:	2210      	movs	r2, #16
    a88a:	4668      	mov	r0, sp
    a88c:	f000 f84e 	bl	a92c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    a890:	2210      	movs	r2, #16
    a892:	4631      	mov	r1, r6
    a894:	a804      	add	r0, sp, #16
    a896:	f000 f849 	bl	a92c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    a89a:	4668      	mov	r0, sp
    a89c:	f7ff ff66 	bl	a76c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    a8a0:	a908      	add	r1, sp, #32
    a8a2:	f04f 0210 	mov.w	r2, #16
    a8a6:	4628      	mov	r0, r5
    a8a8:	b11c      	cbz	r4, a8b2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    a8aa:	f000 f83f 	bl	a92c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    a8ae:	b00c      	add	sp, #48	; 0x30
    a8b0:	bd70      	pop	{r4, r5, r6, pc}
    a8b2:	f001 fd32 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a8b6:	e7fa      	b.n	a8ae <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000a8b8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    a8b8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a8bc:	fbb0 f0f1 	udiv	r0, r0, r1
    a8c0:	b280      	uxth	r0, r0
    a8c2:	4770      	bx	lr

0000a8c4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    a8c4:	6809      	ldr	r1, [r1, #0]
    a8c6:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    a8ca:	4770      	bx	lr

0000a8cc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8d0:	4607      	mov	r7, r0
    a8d2:	460e      	mov	r6, r1
    a8d4:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    a8d8:	f7fc ff02 	bl	76e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    a8dc:	b198      	cbz	r0, a906 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    a8de:	b31e      	cbz	r6, a928 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    a8e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    a8e4:	1b40      	subs	r0, r0, r5
    a8e6:	2300      	movs	r3, #0
    a8e8:	eb61 0104 	sbc.w	r1, r1, r4
    a8ec:	461a      	mov	r2, r3
    a8ee:	1a1b      	subs	r3, r3, r0
    a8f0:	418a      	sbcs	r2, r1
    a8f2:	da19      	bge.n	a928 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    a8f4:	1c42      	adds	r2, r0, #1
    a8f6:	f171 0100 	sbcs.w	r1, r1, #0
    a8fa:	db07      	blt.n	a90c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    a8fc:	f240 211a 	movw	r1, #538	; 0x21a
    a900:	2029      	movs	r0, #41	; 0x29
    a902:	f7f7 fba3 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a906:	f44f 7104 	mov.w	r1, #528	; 0x210
    a90a:	e7f9      	b.n	a900 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    a90c:	4430      	add	r0, r6
    a90e:	1e40      	subs	r0, r0, #1
    a910:	fbb0 f1f6 	udiv	r1, r0, r6
    a914:	fb01 f006 	mul.w	r0, r1, r6
    a918:	1828      	adds	r0, r5, r0
    a91a:	f144 0400 	adc.w	r4, r4, #0
    a91e:	e9c7 0404 	strd	r0, r4, [r7, #16]
    a922:	4608      	mov	r0, r1
    a924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a928:	2000      	movs	r0, #0
    a92a:	e7fb      	b.n	a924 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000a92c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    a92c:	b530      	push	{r4, r5, lr}
    a92e:	4613      	mov	r3, r2
    a930:	e006      	b.n	a940 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    a932:	18cc      	adds	r4, r1, r3
    a934:	1ad5      	subs	r5, r2, r3
    a936:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    a93a:	1e5b      	subs	r3, r3, #1
    a93c:	5544      	strb	r4, [r0, r5]
    a93e:	b2db      	uxtb	r3, r3
    a940:	2b00      	cmp	r3, #0
    a942:	d1f6      	bne.n	a932 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    a944:	bd30      	pop	{r4, r5, pc}

0000a946 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    a946:	b510      	push	{r4, lr}
    a948:	2300      	movs	r3, #0
    a94a:	461a      	mov	r2, r3
    a94c:	e003      	b.n	a956 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    a94e:	5c84      	ldrb	r4, [r0, r2]
    a950:	4323      	orrs	r3, r4
    a952:	1c52      	adds	r2, r2, #1
    a954:	b2d2      	uxtb	r2, r2
    a956:	428a      	cmp	r2, r1
    a958:	d3f9      	bcc.n	a94e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    a95a:	b10b      	cbz	r3, a960 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    a95c:	2000      	movs	r0, #0
    a95e:	bd10      	pop	{r4, pc}
    a960:	2001      	movs	r0, #1
    a962:	bd10      	pop	{r4, pc}

0000a964 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    a964:	2100      	movs	r1, #0
    a966:	4608      	mov	r0, r1
    a968:	f7f8 bbbc 	b.w	30e4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    a96c:	4401      	add	r1, r0
    a96e:	2914      	cmp	r1, #20
    a970:	dd01      	ble.n	a976 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    a972:	2014      	movs	r0, #20
    a974:	4770      	bx	lr
    a976:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    a97a:	4281      	cmp	r1, r0
    a97c:	dbfa      	blt.n	a974 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    a97e:	b248      	sxtb	r0, r1
    a980:	4770      	bx	lr

0000a982 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    a982:	b570      	push	{r4, r5, r6, lr}
    a984:	4604      	mov	r4, r0
    a986:	1c40      	adds	r0, r0, #1
    a988:	4288      	cmp	r0, r1
    a98a:	d004      	beq.n	a996 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    a98c:	6808      	ldr	r0, [r1, #0]
    a98e:	f8c4 0001 	str.w	r0, [r4, #1]
    a992:	7908      	ldrb	r0, [r1, #4]
    a994:	7160      	strb	r0, [r4, #5]
    a996:	7960      	ldrb	r0, [r4, #5]
    a998:	f000 001f 	and.w	r0, r0, #31
    a99c:	7160      	strb	r0, [r4, #5]
    a99e:	2000      	movs	r0, #0
    a9a0:	72e0      	strb	r0, [r4, #11]
    a9a2:	4605      	mov	r5, r0
    a9a4:	1966      	adds	r6, r4, r5
    a9a6:	7870      	ldrb	r0, [r6, #1]
    a9a8:	f000 f8d1 	bl	ab4e <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    a9ac:	71b0      	strb	r0, [r6, #6]
    a9ae:	7ae1      	ldrb	r1, [r4, #11]
    a9b0:	1c6d      	adds	r5, r5, #1
    a9b2:	4408      	add	r0, r1
    a9b4:	b2ed      	uxtb	r5, r5
    a9b6:	72e0      	strb	r0, [r4, #11]
    a9b8:	2d05      	cmp	r5, #5
    a9ba:	d3f3      	bcc.n	a9a4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    a9bc:	bd70      	pop	{r4, r5, r6, pc}

0000a9be <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    a9be:	7802      	ldrb	r2, [r0, #0]
    a9c0:	f002 020f 	and.w	r2, r2, #15
    a9c4:	2a03      	cmp	r2, #3
    a9c6:	d003      	beq.n	a9d0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    a9c8:	2a05      	cmp	r2, #5
    a9ca:	d104      	bne.n	a9d6 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    a9cc:	f000 b85f 	b.w	aa8e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    a9d0:	7840      	ldrb	r0, [r0, #1]
    a9d2:	280c      	cmp	r0, #12
    a9d4:	d001      	beq.n	a9da <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    a9d6:	2000      	movs	r0, #0
    a9d8:	4770      	bx	lr
    a9da:	2001      	movs	r0, #1
    a9dc:	4770      	bx	lr

0000a9de <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    a9de:	b570      	push	{r4, r5, r6, lr}
    a9e0:	4614      	mov	r4, r2
    a9e2:	4605      	mov	r5, r0
    a9e4:	2a1f      	cmp	r2, #31
    a9e6:	d903      	bls.n	a9f0 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    a9e8:	21ee      	movs	r1, #238	; 0xee
    a9ea:	202a      	movs	r0, #42	; 0x2a
    a9ec:	f7f7 fb2e 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9f0:	f105 0009 	add.w	r0, r5, #9
    a9f4:	f001 fc91 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a9f8:	1da4      	adds	r4, r4, #6
    a9fa:	706c      	strb	r4, [r5, #1]
    a9fc:	bd70      	pop	{r4, r5, r6, pc}

0000a9fe <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    a9fe:	b510      	push	{r4, lr}
    aa00:	7802      	ldrb	r2, [r0, #0]
    aa02:	f001 030f 	and.w	r3, r1, #15
    aa06:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    aa0a:	431a      	orrs	r2, r3
    aa0c:	7002      	strb	r2, [r0, #0]
    aa0e:	2907      	cmp	r1, #7
    aa10:	d20c      	bcs.n	aa2c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    aa12:	e8df f001 	tbb	[pc, r1]
    aa16:	0604      	.short	0x0604
    aa18:	08040604 	.word	0x08040604
    aa1c:	0004      	.short	0x0004
    aa1e:	2106      	movs	r1, #6
    aa20:	e002      	b.n	aa28 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    aa22:	210c      	movs	r1, #12
    aa24:	e000      	b.n	aa28 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    aa26:	2122      	movs	r1, #34	; 0x22
    aa28:	7041      	strb	r1, [r0, #1]
    aa2a:	bd10      	pop	{r4, pc}
    aa2c:	21a8      	movs	r1, #168	; 0xa8
    aa2e:	202a      	movs	r0, #42	; 0x2a
    aa30:	f7f7 fb0c 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000aa34 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    aa34:	680a      	ldr	r2, [r1, #0]
    aa36:	f840 2f09 	str.w	r2, [r0, #9]!
    aa3a:	8889      	ldrh	r1, [r1, #4]
    aa3c:	8081      	strh	r1, [r0, #4]
    aa3e:	4770      	bx	lr

0000aa40 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    aa40:	7802      	ldrb	r2, [r0, #0]
    aa42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    aa46:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    aa4a:	7002      	strb	r2, [r0, #0]
    aa4c:	4770      	bx	lr

0000aa4e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    aa4e:	680a      	ldr	r2, [r1, #0]
    aa50:	f840 2f03 	str.w	r2, [r0, #3]!
    aa54:	8889      	ldrh	r1, [r1, #4]
    aa56:	8081      	strh	r1, [r0, #4]
    aa58:	4770      	bx	lr

0000aa5a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    aa5a:	7802      	ldrb	r2, [r0, #0]
    aa5c:	2340      	movs	r3, #64	; 0x40
    aa5e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    aa62:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    aa66:	430a      	orrs	r2, r1
    aa68:	7002      	strb	r2, [r0, #0]
    aa6a:	4770      	bx	lr

0000aa6c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    aa6c:	b570      	push	{r4, r5, r6, lr}
    aa6e:	4614      	mov	r4, r2
    aa70:	4605      	mov	r5, r0
    aa72:	2a1f      	cmp	r2, #31
    aa74:	d904      	bls.n	aa80 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    aa76:	f44f 7188 	mov.w	r1, #272	; 0x110
    aa7a:	202a      	movs	r0, #42	; 0x2a
    aa7c:	f7f7 fae6 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa80:	f105 0009 	add.w	r0, r5, #9
    aa84:	f001 fc49 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    aa88:	1da4      	adds	r4, r4, #6
    aa8a:	706c      	strb	r4, [r5, #1]
    aa8c:	bd70      	pop	{r4, r5, r6, pc}
    aa8e:	b570      	push	{r4, r5, r6, lr}
    aa90:	f8d0 201f 	ldr.w	r2, [r0, #31]
    aa94:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    aa98:	f012 0fff 	tst.w	r2, #255	; 0xff
    aa9c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    aaa0:	d108      	bne.n	aab4 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    aaa2:	f3c2 2407 	ubfx	r4, r2, #8, #8
    aaa6:	b92c      	cbnz	r4, aab4 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    aaa8:	f3c2 4407 	ubfx	r4, r2, #16, #8
    aaac:	b914      	cbnz	r4, aab4 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    aaae:	0e12      	lsrs	r2, r2, #24
    aab0:	d100      	bne.n	aab4 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    aab2:	b34b      	cbz	r3, ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    aab4:	7846      	ldrb	r6, [r0, #1]
    aab6:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    aaba:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    aabe:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    aac2:	7d83      	ldrb	r3, [r0, #22]
    aac4:	2e22      	cmp	r6, #34	; 0x22
    aac6:	d11f      	bne.n	ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    aac8:	b131      	cbz	r1, aad8 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    aaca:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    aace:	d903      	bls.n	aad8 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    aad0:	f640 5107 	movw	r1, #3335	; 0xd07
    aad4:	428a      	cmp	r2, r1
    aad6:	d90b      	bls.n	aaf0 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x84>
    aad8:	1f91      	subs	r1, r2, #6
    aada:	f640 467a 	movw	r6, #3194	; 0xc7a
    aade:	42b1      	cmp	r1, r6
    aae0:	d812      	bhi.n	ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    aae2:	b18b      	cbz	r3, ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    aae4:	2b08      	cmp	r3, #8
    aae6:	d80f      	bhi.n	ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    aae8:	4293      	cmp	r3, r2
    aaea:	d20d      	bcs.n	ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    aaec:	4295      	cmp	r5, r2
    aaee:	d80b      	bhi.n	ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    aaf0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    aaf4:	d208      	bcs.n	ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    aaf6:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    aafa:	f640 4176 	movw	r1, #3190	; 0xc76
    aafe:	380a      	subs	r0, #10
    ab00:	4288      	cmp	r0, r1
    ab02:	d801      	bhi.n	ab08 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    ab04:	2001      	movs	r0, #1
    ab06:	bd70      	pop	{r4, r5, r6, pc}
    ab08:	2000      	movs	r0, #0
    ab0a:	bd70      	pop	{r4, r5, r6, pc}

0000ab0c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    ab0c:	b508      	push	{r3, lr}
    ab0e:	7a03      	ldrb	r3, [r0, #8]
    ab10:	f88d 3000 	strb.w	r3, [sp]
    ab14:	9b00      	ldr	r3, [sp, #0]
    ab16:	9300      	str	r3, [sp, #0]
    ab18:	f89d 3000 	ldrb.w	r3, [sp]
    ab1c:	b123      	cbz	r3, ab28 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    ab1e:	f240 21c2 	movw	r1, #706	; 0x2c2
    ab22:	2010      	movs	r0, #16
    ab24:	f7f7 fa92 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ab2c:	f7f8 bbe0 	b.w	32f0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x74>

0000ab30 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    ab30:	f7f8 bc0c 	b.w	334c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    ab34:	b510      	push	{r4, lr}
    ab36:	4604      	mov	r4, r0
    ab38:	2108      	movs	r1, #8
    ab3a:	4620      	mov	r0, r4
    ab3c:	f7f7 faf6 	bl	212c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ab40:	6820      	ldr	r0, [r4, #0]
    ab42:	2800      	cmp	r0, #0
    ab44:	d102      	bne.n	ab4c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    ab46:	6860      	ldr	r0, [r4, #4]
    ab48:	2800      	cmp	r0, #0
    ab4a:	d0f5      	beq.n	ab38 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x8>
    ab4c:	bd10      	pop	{r4, pc}

0000ab4e <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    ab4e:	f000 0155 	and.w	r1, r0, #85	; 0x55
    ab52:	2255      	movs	r2, #85	; 0x55
    ab54:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    ab58:	4408      	add	r0, r1
    ab5a:	f000 0133 	and.w	r1, r0, #51	; 0x33
    ab5e:	2233      	movs	r2, #51	; 0x33
    ab60:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    ab64:	4408      	add	r0, r1
    ab66:	f000 010f 	and.w	r1, r0, #15
    ab6a:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    ab6e:	4770      	bx	lr

0000ab70 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    ab70:	b508      	push	{r3, lr}
    ab72:	f000 f804 	bl	ab7e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    ab76:	466a      	mov	r2, sp
    ab78:	f7f8 fcd0 	bl	351c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    ab7c:	bd08      	pop	{r3, pc}
    ab7e:	b530      	push	{r4, r5, lr}
    ab80:	784c      	ldrb	r4, [r1, #1]
    ab82:	4603      	mov	r3, r0
    ab84:	7808      	ldrb	r0, [r1, #0]
    ab86:	788d      	ldrb	r5, [r1, #2]
    ab88:	0e22      	lsrs	r2, r4, #24
    ab8a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    ab8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    ab92:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    ab96:	78cd      	ldrb	r5, [r1, #3]
    ab98:	790c      	ldrb	r4, [r1, #4]
    ab9a:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    ab9e:	4322      	orrs	r2, r4
    aba0:	7949      	ldrb	r1, [r1, #5]
    aba2:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    aba6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    abaa:	4611      	mov	r1, r2
    abac:	2b01      	cmp	r3, #1
    abae:	d101      	bne.n	abb4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    abb0:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    abb4:	bd30      	pop	{r4, r5, pc}
    abb6:	2801      	cmp	r0, #1
    abb8:	d102      	bne.n	abc0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    abba:	7948      	ldrb	r0, [r1, #5]
    abbc:	0980      	lsrs	r0, r0, #6
    abbe:	d001      	beq.n	abc4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    abc0:	2000      	movs	r0, #0
    abc2:	4770      	bx	lr
    abc4:	2001      	movs	r0, #1
    abc6:	4770      	bx	lr
    abc8:	2801      	cmp	r0, #1
    abca:	d106      	bne.n	abda <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    abcc:	7948      	ldrb	r0, [r1, #5]
    abce:	2101      	movs	r1, #1
    abd0:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    abd4:	d101      	bne.n	abda <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    abd6:	2001      	movs	r0, #1
    abd8:	4770      	bx	lr
    abda:	2000      	movs	r0, #0
    abdc:	4770      	bx	lr
    abde:	2802      	cmp	r0, #2
    abe0:	d003      	beq.n	abea <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    abe2:	2803      	cmp	r0, #3
    abe4:	d001      	beq.n	abea <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    abe6:	2000      	movs	r0, #0
    abe8:	4770      	bx	lr
    abea:	2001      	movs	r0, #1
    abec:	4770      	bx	lr

0000abee <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    abee:	b510      	push	{r4, lr}
    abf0:	4604      	mov	r4, r0
    abf2:	7c00      	ldrb	r0, [r0, #16]
    abf4:	f7ff fff3 	bl	abde <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    abf8:	b148      	cbz	r0, ac0e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    abfa:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    abfe:	f104 0158 	add.w	r1, r4, #88	; 0x58
    ac02:	f7ff fe31 	bl	a868 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ac06:	2808      	cmp	r0, #8
    ac08:	d001      	beq.n	ac0e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ac0a:	2001      	movs	r0, #1
    ac0c:	bd10      	pop	{r4, pc}
    ac0e:	7c20      	ldrb	r0, [r4, #16]
    ac10:	b118      	cbz	r0, ac1a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ac12:	2802      	cmp	r0, #2
    ac14:	d001      	beq.n	ac1a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ac16:	7de0      	ldrb	r0, [r4, #23]
    ac18:	bd10      	pop	{r4, pc}
    ac1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac1e:	2000      	movs	r0, #0
    ac20:	f7f8 b8b2 	b.w	2d88 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000ac24 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    ac24:	b508      	push	{r3, lr}
    ac26:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    ac2a:	f88d 1000 	strb.w	r1, [sp]
    ac2e:	9900      	ldr	r1, [sp, #0]
    ac30:	9100      	str	r1, [sp, #0]
    ac32:	f89d 1000 	ldrb.w	r1, [sp]
    ac36:	b941      	cbnz	r1, ac4a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    ac38:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    ac3c:	f88d 1000 	strb.w	r1, [sp]
    ac40:	9900      	ldr	r1, [sp, #0]
    ac42:	9100      	str	r1, [sp, #0]
    ac44:	f89d 1000 	ldrb.w	r1, [sp]
    ac48:	b109      	cbz	r1, ac4e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    ac4a:	2001      	movs	r0, #1
    ac4c:	bd08      	pop	{r3, pc}
    ac4e:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    ac52:	f88d 0000 	strb.w	r0, [sp]
    ac56:	9800      	ldr	r0, [sp, #0]
    ac58:	9000      	str	r0, [sp, #0]
    ac5a:	f89d 0000 	ldrb.w	r0, [sp]
    ac5e:	2000      	movs	r0, #0
    ac60:	bd08      	pop	{r3, pc}

0000ac62 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    ac62:	20ff      	movs	r0, #255	; 0xff
    ac64:	7008      	strb	r0, [r1, #0]
    ac66:	6b48      	ldr	r0, [r1, #52]	; 0x34
    ac68:	f7ff bd2b 	b.w	a6c2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000ac6c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    ac6c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ac6e:	460d      	mov	r5, r1
    ac70:	4604      	mov	r4, r0
    ac72:	f44f 728c 	mov.w	r2, #280	; 0x118
    ac76:	2100      	movs	r1, #0
    ac78:	f001 fbc9 	bl	c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ac7c:	20ff      	movs	r0, #255	; 0xff
    ac7e:	7020      	strb	r0, [r4, #0]
    ac80:	207f      	movs	r0, #127	; 0x7f
    ac82:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    ac86:	2013      	movs	r0, #19
    ac88:	8060      	strh	r0, [r4, #2]
    ac8a:	f242 7010 	movw	r0, #10000	; 0x2710
    ac8e:	8460      	strh	r0, [r4, #34]	; 0x22
    ac90:	f7f7 feea 	bl	2a68 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    ac94:	4601      	mov	r1, r0
    ac96:	6360      	str	r0, [r4, #52]	; 0x34
    ac98:	2200      	movs	r2, #0
    ac9a:	4668      	mov	r0, sp
    ac9c:	f7ff fc77 	bl	a58e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    aca0:	2200      	movs	r2, #0
    aca2:	2101      	movs	r1, #1
    aca4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    aca6:	f7ff fcec 	bl	a682 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    acaa:	2204      	movs	r2, #4
    acac:	4668      	mov	r0, sp
    acae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    acb0:	f7ff fc6d 	bl	a58e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    acb4:	2200      	movs	r2, #0
    acb6:	4611      	mov	r1, r2
    acb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    acba:	f7ff fce2 	bl	a682 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    acbe:	73a5      	strb	r5, [r4, #14]
    acc0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    acc4:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    acc8:	f000 b950 	b.w	af6c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000accc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    accc:	7880      	ldrb	r0, [r0, #2]
    acce:	f3c0 0080 	ubfx	r0, r0, #2, #1
    acd2:	b108      	cbz	r0, acd8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    acd4:	2000      	movs	r0, #0
    acd6:	4770      	bx	lr
    acd8:	201f      	movs	r0, #31
    acda:	4770      	bx	lr

0000acdc <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    acdc:	f7f9 b97c 	b.w	3fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

0000ace0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ace0:	6880      	ldr	r0, [r0, #8]
    ace2:	4770      	bx	lr

0000ace4 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ace4:	2001      	movs	r0, #1
    ace6:	4770      	bx	lr

0000ace8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ace8:	b510      	push	{r4, lr}
    acea:	4604      	mov	r4, r0
    acec:	3028      	adds	r0, #40	; 0x28
    acee:	f000 f8fd 	bl	aeec <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    acf2:	8861      	ldrh	r1, [r4, #2]
    acf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    acf8:	2228      	movs	r2, #40	; 0x28
    acfa:	f7f9 ba91 	b.w	4220 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000acfe <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    acfe:	2200      	movs	r2, #0
    ad00:	8602      	strh	r2, [r0, #48]	; 0x30
    ad02:	8843      	ldrh	r3, [r0, #2]
    ad04:	2b1d      	cmp	r3, #29
    ad06:	d001      	beq.n	ad0c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    ad08:	7341      	strb	r1, [r0, #13]
    ad0a:	4770      	bx	lr
    ad0c:	7342      	strb	r2, [r0, #13]
    ad0e:	4770      	bx	lr

0000ad10 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    ad10:	b510      	push	{r4, lr}
    ad12:	2400      	movs	r4, #0
    ad14:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ad16:	f7ff fcac 	bl	a672 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    ad1a:	4384      	bics	r4, r0
    ad1c:	f084 0001 	eor.w	r0, r4, #1
    ad20:	bd10      	pop	{r4, pc}

0000ad22 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    ad22:	2000      	movs	r0, #0
    ad24:	4770      	bx	lr

0000ad26 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    ad26:	7880      	ldrb	r0, [r0, #2]
    ad28:	f000 0001 	and.w	r0, r0, #1
    ad2c:	4770      	bx	lr

0000ad2e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    ad2e:	7880      	ldrb	r0, [r0, #2]
    ad30:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ad34:	4770      	bx	lr

0000ad36 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    ad36:	2001      	movs	r0, #1
    ad38:	4770      	bx	lr

0000ad3a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    ad3a:	7880      	ldrb	r0, [r0, #2]
    ad3c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ad40:	4770      	bx	lr

0000ad42 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    ad42:	f990 000e 	ldrsb.w	r0, [r0, #14]
    ad46:	4770      	bx	lr

0000ad48 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    ad48:	7800      	ldrb	r0, [r0, #0]
    ad4a:	28ff      	cmp	r0, #255	; 0xff
    ad4c:	d001      	beq.n	ad52 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    ad4e:	2001      	movs	r0, #1
    ad50:	4770      	bx	lr
    ad52:	2000      	movs	r0, #0
    ad54:	4770      	bx	lr

0000ad56 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    ad56:	f800 1f20 	strb.w	r1, [r0, #32]!
    ad5a:	7042      	strb	r2, [r0, #1]
    ad5c:	4770      	bx	lr

0000ad5e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    ad5e:	680a      	ldr	r2, [r1, #0]
    ad60:	f840 2f11 	str.w	r2, [r0, #17]!
    ad64:	8889      	ldrh	r1, [r1, #4]
    ad66:	8081      	strh	r1, [r0, #4]
    ad68:	2101      	movs	r1, #1
    ad6a:	7181      	strb	r1, [r0, #6]
    ad6c:	4770      	bx	lr

0000ad6e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ad6e:	7b00      	ldrb	r0, [r0, #12]
    ad70:	4770      	bx	lr

0000ad72 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ad72:	2001      	movs	r0, #1
    ad74:	4770      	bx	lr

0000ad76 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ad76:	61c1      	str	r1, [r0, #28]
    ad78:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ad7c:	724a      	strb	r2, [r1, #9]
    ad7e:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ad82:	f8c1 200a 	str.w	r2, [r1, #10]
    ad86:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ad8a:	81c8      	strh	r0, [r1, #14]
    ad8c:	4770      	bx	lr

0000ad8e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ad8e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ad92:	4770      	bx	lr

0000ad94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ad94:	7bc0      	ldrb	r0, [r0, #15]
    ad96:	2800      	cmp	r0, #0
    ad98:	d000      	beq.n	ad9c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ad9a:	2001      	movs	r0, #1
    ad9c:	4770      	bx	lr
    ad9e:	7802      	ldrb	r2, [r0, #0]
    ada0:	2320      	movs	r3, #32
    ada2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ada6:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    adaa:	430a      	orrs	r2, r1
    adac:	7002      	strb	r2, [r0, #0]
    adae:	4770      	bx	lr
    adb0:	2101      	movs	r1, #1
    adb2:	f7f8 bd61 	b.w	3878 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    adb6:	2101      	movs	r1, #1
    adb8:	f7f8 bd5e 	b.w	3878 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    adbc:	b510      	push	{r4, lr}
    adbe:	460c      	mov	r4, r1
    adc0:	2100      	movs	r1, #0
    adc2:	7061      	strb	r1, [r4, #1]
    adc4:	2112      	movs	r1, #18
    adc6:	7021      	strb	r1, [r4, #0]
    adc8:	f100 0109 	add.w	r1, r0, #9
    adcc:	2221      	movs	r2, #33	; 0x21
    adce:	1d20      	adds	r0, r4, #4
    add0:	f001 faa3 	bl	c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    add4:	2001      	movs	r0, #1
    add6:	71e0      	strb	r0, [r4, #7]
    add8:	7920      	ldrb	r0, [r4, #4]
    adda:	2800      	cmp	r0, #0
    addc:	d015      	beq.n	ae0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    adde:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ade2:	2100      	movs	r1, #0
    ade4:	4620      	mov	r0, r4
    ade6:	f7f7 fc17 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    adea:	2800      	cmp	r0, #0
    adec:	d00d      	beq.n	ae0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    adee:	8800      	ldrh	r0, [r0, #0]
    adf0:	f7ff fcc6 	bl	a780 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    adf4:	2100      	movs	r1, #0
    adf6:	4620      	mov	r0, r4
    adf8:	f7f7 fcb0 	bl	275c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    adfc:	2800      	cmp	r0, #0
    adfe:	d004      	beq.n	ae0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    ae00:	f240 2151 	movw	r1, #593	; 0x251
    ae04:	202d      	movs	r0, #45	; 0x2d
    ae06:	f7f7 f921 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae0a:	bd10      	pop	{r4, pc}
    ae0c:	2200      	movs	r2, #0
    ae0e:	704a      	strb	r2, [r1, #1]
    ae10:	221a      	movs	r2, #26
    ae12:	700a      	strb	r2, [r1, #0]
    ae14:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ae18:	604a      	str	r2, [r1, #4]
    ae1a:	6842      	ldr	r2, [r0, #4]
    ae1c:	608a      	str	r2, [r1, #8]
    ae1e:	7a00      	ldrb	r0, [r0, #8]
    ae20:	7308      	strb	r0, [r1, #12]
    ae22:	4770      	bx	lr
    ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae28:	4604      	mov	r4, r0
    ae2a:	460f      	mov	r7, r1
    ae2c:	7e40      	ldrb	r0, [r0, #25]
    ae2e:	f7f7 ffd1 	bl	2dd4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ae32:	4606      	mov	r6, r0
    ae34:	7e20      	ldrb	r0, [r4, #24]
    ae36:	f104 0551 	add.w	r5, r4, #81	; 0x51
    ae3a:	b120      	cbz	r0, ae46 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    ae3c:	b11e      	cbz	r6, ae46 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    ae3e:	7e60      	ldrb	r0, [r4, #25]
    ae40:	f7f7 ffbc 	bl	2dbc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ae44:	b1a0      	cbz	r0, ae70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    ae46:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d024      	beq.n	ae98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    ae4e:	7ea0      	ldrb	r0, [r4, #26]
    ae50:	2800      	cmp	r0, #0
    ae52:	d021      	beq.n	ae98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    ae54:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    ae58:	4629      	mov	r1, r5
    ae5a:	f7ff feb5 	bl	abc8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    ae5e:	b1a8      	cbz	r0, ae8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf8>
    ae60:	f7f7 ffa8 	bl	2db4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ae64:	463a      	mov	r2, r7
    ae66:	4629      	mov	r1, r5
    ae68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ae6c:	f7ff bcba 	b.w	a7e4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ae70:	2001      	movs	r0, #1
    ae72:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ae76:	463a      	mov	r2, r7
    ae78:	4629      	mov	r1, r5
    ae7a:	4630      	mov	r0, r6
    ae7c:	f7ff fcb2 	bl	a7e4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ae80:	7e61      	ldrb	r1, [r4, #25]
    ae82:	4628      	mov	r0, r5
    ae84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ae88:	f7f7 bfb0 	b.w	2dec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ae8c:	4639      	mov	r1, r7
    ae8e:	4628      	mov	r0, r5
    ae90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ae94:	f7ff bc95 	b.w	a7c2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ae98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae9c:	b510      	push	{r4, lr}
    ae9e:	4604      	mov	r4, r0
    aea0:	4608      	mov	r0, r1
    aea2:	f7fa f9f5 	bl	5290 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    aea6:	7921      	ldrb	r1, [r4, #4]
    aea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aeac:	2025      	movs	r0, #37	; 0x25
    aeae:	f7fa b9c5 	b.w	523c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    aeb2:	b570      	push	{r4, r5, r6, lr}
    aeb4:	4614      	mov	r4, r2
    aeb6:	461d      	mov	r5, r3
    aeb8:	4606      	mov	r6, r0
    aeba:	f001 f89c 	bl	bff6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    aebe:	1900      	adds	r0, r0, r4
    aec0:	4169      	adcs	r1, r5
    aec2:	e9c6 0100 	strd	r0, r1, [r6]
    aec6:	bd70      	pop	{r4, r5, r6, pc}

0000aec8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    aec8:	b570      	push	{r4, r5, r6, lr}
    aeca:	7001      	strb	r1, [r0, #0]
    aecc:	7042      	strb	r2, [r0, #1]
    aece:	4614      	mov	r4, r2
    aed0:	460d      	mov	r5, r1
    aed2:	7880      	ldrb	r0, [r0, #2]
    aed4:	f000 f87f 	bl	afd6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    aed8:	fb10 f005 	smulbb	r0, r0, r5
    aedc:	4360      	muls	r0, r4
    aede:	28ff      	cmp	r0, #255	; 0xff
    aee0:	d303      	bcc.n	aeea <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    aee2:	215c      	movs	r1, #92	; 0x5c
    aee4:	202e      	movs	r0, #46	; 0x2e
    aee6:	f7f7 f8b1 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aeea:	bd70      	pop	{r4, r5, r6, pc}

0000aeec <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    aeec:	b510      	push	{r4, lr}
    aeee:	4604      	mov	r4, r0
    aef0:	7880      	ldrb	r0, [r0, #2]
    aef2:	f000 f870 	bl	afd6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    aef6:	7861      	ldrb	r1, [r4, #1]
    aef8:	7822      	ldrb	r2, [r4, #0]
    aefa:	fb11 f102 	smulbb	r1, r1, r2
    aefe:	4348      	muls	r0, r1
    af00:	b2c0      	uxtb	r0, r0
    af02:	bd10      	pop	{r4, pc}

0000af04 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    af04:	b510      	push	{r4, lr}
    af06:	4604      	mov	r4, r0
    af08:	f000 f84d 	bl	afa6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    af0c:	7961      	ldrb	r1, [r4, #5]
    af0e:	1c49      	adds	r1, r1, #1
    af10:	b2c9      	uxtb	r1, r1
    af12:	7161      	strb	r1, [r4, #5]
    af14:	7862      	ldrb	r2, [r4, #1]
    af16:	4291      	cmp	r1, r2
    af18:	d10b      	bne.n	af32 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    af1a:	2200      	movs	r2, #0
    af1c:	7162      	strb	r2, [r4, #5]
    af1e:	78e1      	ldrb	r1, [r4, #3]
    af20:	4301      	orrs	r1, r0
    af22:	70e1      	strb	r1, [r4, #3]
    af24:	78a3      	ldrb	r3, [r4, #2]
    af26:	4299      	cmp	r1, r3
    af28:	d103      	bne.n	af32 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    af2a:	70e2      	strb	r2, [r4, #3]
    af2c:	7921      	ldrb	r1, [r4, #4]
    af2e:	1c49      	adds	r1, r1, #1
    af30:	7121      	strb	r1, [r4, #4]
    af32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af36:	f000 b825 	b.w	af84 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000af3a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    af3a:	7081      	strb	r1, [r0, #2]
    af3c:	4770      	bx	lr

0000af3e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    af3e:	b570      	push	{r4, r5, r6, lr}
    af40:	4604      	mov	r4, r0
    af42:	7880      	ldrb	r0, [r0, #2]
    af44:	f000 f847 	bl	afd6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    af48:	7861      	ldrb	r1, [r4, #1]
    af4a:	fb11 f500 	smulbb	r5, r1, r0
    af4e:	78e0      	ldrb	r0, [r4, #3]
    af50:	f000 f841 	bl	afd6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    af54:	7861      	ldrb	r1, [r4, #1]
    af56:	7962      	ldrb	r2, [r4, #5]
    af58:	fb10 2001 	smlabb	r0, r0, r1, r2
    af5c:	7821      	ldrb	r1, [r4, #0]
    af5e:	7922      	ldrb	r2, [r4, #4]
    af60:	1a89      	subs	r1, r1, r2
    af62:	fb11 f105 	smulbb	r1, r1, r5
    af66:	1a08      	subs	r0, r1, r0
    af68:	b2c0      	uxtb	r0, r0
    af6a:	bd70      	pop	{r4, r5, r6, pc}

0000af6c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    af6c:	2100      	movs	r1, #0
    af6e:	6001      	str	r1, [r0, #0]
    af70:	8081      	strh	r1, [r0, #4]
    af72:	2101      	movs	r1, #1
    af74:	7041      	strb	r1, [r0, #1]
    af76:	7001      	strb	r1, [r0, #0]
    af78:	4770      	bx	lr

0000af7a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    af7a:	2100      	movs	r1, #0
    af7c:	70c1      	strb	r1, [r0, #3]
    af7e:	7141      	strb	r1, [r0, #5]
    af80:	7101      	strb	r1, [r0, #4]
    af82:	4770      	bx	lr
    af84:	b510      	push	{r4, lr}
    af86:	2801      	cmp	r0, #1
    af88:	d007      	beq.n	af9a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    af8a:	2802      	cmp	r0, #2
    af8c:	d007      	beq.n	af9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    af8e:	2804      	cmp	r0, #4
    af90:	d007      	beq.n	afa2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    af92:	2139      	movs	r1, #57	; 0x39
    af94:	202e      	movs	r0, #46	; 0x2e
    af96:	f7f7 f859 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af9a:	2025      	movs	r0, #37	; 0x25
    af9c:	bd10      	pop	{r4, pc}
    af9e:	2026      	movs	r0, #38	; 0x26
    afa0:	bd10      	pop	{r4, pc}
    afa2:	2027      	movs	r0, #39	; 0x27
    afa4:	bd10      	pop	{r4, pc}
    afa6:	4601      	mov	r1, r0
    afa8:	2000      	movs	r0, #0
    afaa:	788a      	ldrb	r2, [r1, #2]
    afac:	07d3      	lsls	r3, r2, #31
    afae:	d002      	beq.n	afb6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    afb0:	78cb      	ldrb	r3, [r1, #3]
    afb2:	07db      	lsls	r3, r3, #31
    afb4:	d006      	beq.n	afc4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    afb6:	0793      	lsls	r3, r2, #30
    afb8:	d506      	bpl.n	afc8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    afba:	78cb      	ldrb	r3, [r1, #3]
    afbc:	079b      	lsls	r3, r3, #30
    afbe:	d403      	bmi.n	afc8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    afc0:	2002      	movs	r0, #2
    afc2:	4770      	bx	lr
    afc4:	2001      	movs	r0, #1
    afc6:	4770      	bx	lr
    afc8:	0752      	lsls	r2, r2, #29
    afca:	d5fc      	bpl.n	afc6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    afcc:	78c9      	ldrb	r1, [r1, #3]
    afce:	0749      	lsls	r1, r1, #29
    afd0:	d4f9      	bmi.n	afc6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    afd2:	2004      	movs	r0, #4
    afd4:	4770      	bx	lr
    afd6:	f3c0 0180 	ubfx	r1, r0, #2, #1
    afda:	f3c0 0240 	ubfx	r2, r0, #1, #1
    afde:	4411      	add	r1, r2
    afe0:	f000 0001 	and.w	r0, r0, #1
    afe4:	4408      	add	r0, r1
    afe6:	4770      	bx	lr

0000afe8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    afe8:	f240 315a 	movw	r1, #858	; 0x35a
    afec:	4348      	muls	r0, r1
    afee:	4770      	bx	lr

0000aff0 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    aff0:	f240 20ef 	movw	r0, #751	; 0x2ef
    aff4:	4770      	bx	lr
    aff6:	020e      	.short	0x020e
    aff8:	0630041c 	.word	0x0630041c
    affc:	035a0c60 	.word	0x035a0c60
    b000:	05c506b4 	.word	0x05c506b4
    b004:	12250bf5 	.word	0x12250bf5
    b008:	03b101a3 	.word	0x03b101a3
    b00c:	02ef05bf 	.word	0x02ef05bf
    b010:	09a30649 	.word	0x09a30649

0000b014 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    b014:	b510      	push	{r4, lr}
    b016:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    b01a:	b109      	cbz	r1, b020 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    b01c:	2000      	movs	r0, #0
    b01e:	bd10      	pop	{r4, pc}
    b020:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    b024:	b131      	cbz	r1, b034 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    b026:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    b02a:	428a      	cmp	r2, r1
    b02c:	d902      	bls.n	b034 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    b02e:	f7f8 fc0b 	bl	3848 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    b032:	e7f3      	b.n	b01c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    b034:	2001      	movs	r0, #1
    b036:	bd10      	pop	{r4, pc}

0000b038 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    b038:	b510      	push	{r4, lr}
    b03a:	b131      	cbz	r1, b04a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    b03c:	2901      	cmp	r1, #1
    b03e:	d008      	beq.n	b052 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    b040:	f240 71d3 	movw	r1, #2003	; 0x7d3
    b044:	2030      	movs	r0, #48	; 0x30
    b046:	f7f7 f801 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b04e:	f000 b8e5 	b.w	b21c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x16a>
    b052:	2100      	movs	r1, #0
    b054:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    b058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b05c:	f000 b8ae 	b.w	b1bc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10a>

0000b060 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    b060:	b510      	push	{r4, lr}
    b062:	4604      	mov	r4, r0
    b064:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    b068:	2800      	cmp	r0, #0
    b06a:	d019      	beq.n	b0a0 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    b06c:	2001      	movs	r0, #1
    b06e:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    b072:	4601      	mov	r1, r0
    b074:	4620      	mov	r0, r4
    b076:	f7ff fe8a 	bl	ad8e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    b07a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    b07e:	b170      	cbz	r0, b09e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    b080:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    b084:	f7fc fce4 	bl	7a50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    b088:	7820      	ldrb	r0, [r4, #0]
    b08a:	f7fc fe4b 	bl	7d24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    b08e:	f814 09c8 	ldrb.w	r0, [r4], #-200
    b092:	f7fc fe25 	bl	7ce0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b096:	b120      	cbz	r0, b0a2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    b098:	2000      	movs	r0, #0
    b09a:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    b09e:	2000      	movs	r0, #0
    b0a0:	bd10      	pop	{r4, pc}
    b0a2:	f240 210b 	movw	r1, #523	; 0x20b
    b0a6:	2030      	movs	r0, #48	; 0x30
    b0a8:	f7f6 ffd0 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000b0ac <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    b0ac:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    b0b0:	4770      	bx	lr

0000b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    b0b2:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    b0b6:	4770      	bx	lr
    b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0bc:	4604      	mov	r4, r0
    b0be:	f000 f886 	bl	b1ce <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    b0c2:	2700      	movs	r7, #0
    b0c4:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    b0c8:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    b0cc:	2601      	movs	r6, #1
    b0ce:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    b0d2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    b0d4:	463d      	mov	r5, r7
    b0d6:	b130      	cbz	r0, b0e6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x34>
    b0d8:	f000 ff8d 	bl	bff6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    b0dc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    b0de:	fbb0 f2f1 	udiv	r2, r0, r1
    b0e2:	fb01 0512 	mls	r5, r1, r2, r0
    b0e6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    b0ea:	2100      	movs	r1, #0
    b0ec:	4680      	mov	r8, r0
    b0ee:	f7ff fbed 	bl	a8cc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    b0f2:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    b0f6:	1949      	adds	r1, r1, r5
    b0f8:	4178      	adcs	r0, r7
    b0fa:	e9c4 1000 	strd	r1, r0, [r4]
    b0fe:	8920      	ldrh	r0, [r4, #8]
    b100:	3cf8      	subs	r4, #248	; 0xf8
    b102:	1c40      	adds	r0, r0, #1
    b104:	280a      	cmp	r0, #10
    b106:	d201      	bcs.n	b10c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x5a>
    b108:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    b10c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    b110:	b138      	cbz	r0, b122 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x70>
    b112:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    b116:	1c40      	adds	r0, r0, #1
    b118:	280a      	cmp	r0, #10
    b11a:	d302      	bcc.n	b122 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x70>
    b11c:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    b120:	e002      	b.n	b128 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x76>
    b122:	2002      	movs	r0, #2
    b124:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    b128:	4620      	mov	r0, r4
    b12a:	f000 f823 	bl	b174 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc2>
    b12e:	b120      	cbz	r0, b13a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x88>
    b130:	4620      	mov	r0, r4
    b132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b136:	f000 b80e 	b.w	b156 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa4>
    b13a:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    b13e:	4641      	mov	r1, r8
    b140:	f000 f843 	bl	b1ca <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    b144:	2800      	cmp	r0, #0
    b146:	d104      	bne.n	b152 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa0>
    b148:	f240 61e7 	movw	r1, #1767	; 0x6e7
    b14c:	2030      	movs	r0, #48	; 0x30
    b14e:	f7f6 ff7d 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b156:	b510      	push	{r4, lr}
    b158:	4604      	mov	r4, r0
    b15a:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    b15e:	f7fc fdbf 	bl	7ce0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b162:	2000      	movs	r0, #0
    b164:	7620      	strb	r0, [r4, #24]
    b166:	bd10      	pop	{r4, pc}
    b168:	b510      	push	{r4, lr}
    b16a:	f7ff fdbd 	bl	ace8 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    b16e:	f200 1015 	addw	r0, r0, #277	; 0x115
    b172:	bd10      	pop	{r4, pc}
    b174:	b570      	push	{r4, r5, r6, lr}
    b176:	4605      	mov	r5, r0
    b178:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    b17c:	b108      	cbz	r0, b182 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd0>
    b17e:	2001      	movs	r0, #1
    b180:	bd70      	pop	{r4, r5, r6, pc}
    b182:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    b186:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b18a:	4050      	eors	r0, r2
    b18c:	ea70 0101 	orns	r1, r0, r1
    b190:	d012      	beq.n	b1b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x106>
    b192:	2400      	movs	r4, #0
    b194:	4621      	mov	r1, r4
    b196:	4628      	mov	r0, r5
    b198:	f7ff ffe6 	bl	b168 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    b19c:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    b1a0:	1840      	adds	r0, r0, r1
    b1a2:	4154      	adcs	r4, r2
    b1a4:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    b1a8:	3df8      	subs	r5, #248	; 0xf8
    b1aa:	1a10      	subs	r0, r2, r0
    b1ac:	41a1      	sbcs	r1, r4
    b1ae:	d503      	bpl.n	b1b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x106>
    b1b0:	4628      	mov	r0, r5
    b1b2:	f7f8 fb49 	bl	3848 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    b1b6:	e7e2      	b.n	b17e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xcc>
    b1b8:	2000      	movs	r0, #0
    b1ba:	bd70      	pop	{r4, r5, r6, pc}
    b1bc:	b510      	push	{r4, lr}
    b1be:	f7f9 fea1 	bl	4f04 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    b1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1c6:	f7fc bee9 	b.w	7f9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    b1ca:	f7fb bff1 	b.w	71b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b1ce:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    b1d0:	4604      	mov	r4, r0
    b1d2:	f7ff fdb0 	bl	ad36 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b1d6:	b1f8      	cbz	r0, b218 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x166>
    b1d8:	4620      	mov	r0, r4
    b1da:	f7ff fda4 	bl	ad26 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b1de:	b918      	cbnz	r0, b1e8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x136>
    b1e0:	4620      	mov	r0, r4
    b1e2:	f7ff fdaa 	bl	ad3a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    b1e6:	b140      	cbz	r0, b1fa <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x148>
    b1e8:	245a      	movs	r4, #90	; 0x5a
    b1ea:	4668      	mov	r0, sp
    b1ec:	f7fe fb30 	bl	9850 <mpsl_fem_pa_is_configured>
    b1f0:	f89d 0000 	ldrb.w	r0, [sp]
    b1f4:	b118      	cbz	r0, b1fe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x14c>
    b1f6:	2501      	movs	r5, #1
    b1f8:	e002      	b.n	b200 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x14e>
    b1fa:	2450      	movs	r4, #80	; 0x50
    b1fc:	e7f5      	b.n	b1ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x138>
    b1fe:	2500      	movs	r5, #0
    b200:	a801      	add	r0, sp, #4
    b202:	f7fe fb0d 	bl	9820 <mpsl_fem_lna_is_configured>
    b206:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b20a:	b100      	cbz	r0, b20e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15c>
    b20c:	2001      	movs	r0, #1
    b20e:	4305      	orrs	r5, r0
    b210:	d000      	beq.n	b214 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x162>
    b212:	340a      	adds	r4, #10
    b214:	4620      	mov	r0, r4
    b216:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    b218:	2061      	movs	r0, #97	; 0x61
    b21a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    b21c:	b570      	push	{r4, r5, r6, lr}
    b21e:	4604      	mov	r4, r0
    b220:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    b222:	2500      	movs	r5, #0
    b224:	b130      	cbz	r0, b234 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x182>
    b226:	f7f8 f8e9 	bl	33fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    b22a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    b22c:	fbb0 f2f1 	udiv	r2, r0, r1
    b230:	fb01 0512 	mls	r5, r1, r2, r0
    b234:	4620      	mov	r0, r4
    b236:	f7ff fd53 	bl	ace0 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    b23a:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    b23e:	4428      	add	r0, r5
    b240:	34e8      	adds	r4, #232	; 0xe8
    b242:	2500      	movs	r5, #0
    b244:	1882      	adds	r2, r0, r2
    b246:	eb45 0001 	adc.w	r0, r5, r1
    b24a:	e9c4 2004 	strd	r2, r0, [r4, #16]
    b24e:	f804 5b0b 	strb.w	r5, [r4], #11
    b252:	2001      	movs	r0, #1
    b254:	f804 0901 	strb.w	r0, [r4], #-1
    b258:	2002      	movs	r0, #2
    b25a:	f804 09f2 	strb.w	r0, [r4], #-242
    b25e:	4620      	mov	r0, r4
    b260:	f7ff ffb5 	bl	b1ce <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    b264:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    b268:	4620      	mov	r0, r4
    b26a:	f7ff ff83 	bl	b174 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc2>
    b26e:	b930      	cbnz	r0, b27e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1cc>
    b270:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    b274:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    b278:	f7ff ffa7 	bl	b1ca <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    b27c:	b128      	cbz	r0, b28a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1d8>
    b27e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    b282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b286:	f7ff bf99 	b.w	b1bc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10a>
    b28a:	f240 712d 	movw	r1, #1837	; 0x72d
    b28e:	2030      	movs	r0, #48	; 0x30
    b290:	f7f6 fedc 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b294:	b510      	push	{r4, lr}
    b296:	4604      	mov	r4, r0
    b298:	2000      	movs	r0, #0
    b29a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    b29e:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    b2a2:	f7fc fd1d 	bl	7ce0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b2a6:	2020      	movs	r0, #32
    b2a8:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    b2ac:	bd10      	pop	{r4, pc}
    b2ae:	b510      	push	{r4, lr}
    b2b0:	b140      	cbz	r0, b2c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x212>
    b2b2:	2909      	cmp	r1, #9
    b2b4:	d22f      	bcs.n	b316 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x264>
    b2b6:	e8df f001 	tbb	[pc, r1]
    b2ba:	1607      	.short	0x1607
    b2bc:	2e1a1e1e 	.word	0x2e1a1e1e
    b2c0:	002a2622 	.word	0x002a2622
    b2c4:	21cd      	movs	r1, #205	; 0xcd
    b2c6:	e023      	b.n	b310 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    b2c8:	4604      	mov	r4, r0
    b2ca:	f7f8 fa95 	bl	37f8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    b2ce:	b110      	cbz	r0, b2d6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x224>
    b2d0:	f240 2187 	movw	r1, #647	; 0x287
    b2d4:	e01c      	b.n	b310 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    b2d6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    b2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    b2e2:	f7fc bf37 	b.w	8154 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    b2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2ea:	f000 b816 	b.w	b31a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x268>
    b2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2f2:	f7f9 bfd3 	b.w	529c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    b2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2fa:	f7ff bedd 	b.w	b0b8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x6>
    b2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b302:	f7ff bceb 	b.w	acdc <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    b306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b30a:	f7ff bf24 	b.w	b156 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa4>
    b30e:	21ed      	movs	r1, #237	; 0xed
    b310:	2030      	movs	r0, #48	; 0x30
    b312:	f7f6 fe9b 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b316:	21f1      	movs	r1, #241	; 0xf1
    b318:	e7fa      	b.n	b310 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    b31a:	b570      	push	{r4, r5, r6, lr}
    b31c:	4605      	mov	r5, r0
    b31e:	f7ff fd06 	bl	ad2e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b322:	b9c8      	cbnz	r0, b358 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a6>
    b324:	2100      	movs	r1, #0
    b326:	4628      	mov	r0, r5
    b328:	f7ff ff1e 	bl	b168 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    b32c:	4604      	mov	r4, r0
    b32e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    b332:	42a0      	cmp	r0, r4
    b334:	d20e      	bcs.n	b354 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a2>
    b336:	1a20      	subs	r0, r4, r0
    b338:	2867      	cmp	r0, #103	; 0x67
    b33a:	d200      	bcs.n	b33e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x28c>
    b33c:	2067      	movs	r0, #103	; 0x67
    b33e:	2103      	movs	r1, #3
    b340:	f7fb fd48 	bl	6dd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    b344:	b130      	cbz	r0, b354 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a2>
    b346:	4628      	mov	r0, r5
    b348:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    b34c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b350:	f7ff bcc4 	b.w	acdc <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    b354:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    b358:	4628      	mov	r0, r5
    b35a:	f7f8 fa69 	bl	3830 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    b35e:	2800      	cmp	r0, #0
    b360:	d004      	beq.n	b36c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2ba>
    b362:	f240 21bd 	movw	r1, #701	; 0x2bd
    b366:	2030      	movs	r0, #48	; 0x30
    b368:	f7f6 fe70 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b36c:	bd70      	pop	{r4, r5, r6, pc}

0000b36e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    b36e:	b510      	push	{r4, lr}
    b370:	460c      	mov	r4, r1
    b372:	f7f7 fa73 	bl	285c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    b376:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    b37a:	2820      	cmp	r0, #32
    b37c:	d00c      	beq.n	b398 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    b37e:	f7fc fcd1 	bl	7d24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    b382:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    b386:	f7fc fcab 	bl	7ce0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b38a:	2800      	cmp	r0, #0
    b38c:	d104      	bne.n	b398 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    b38e:	f640 4129 	movw	r1, #3113	; 0xc29
    b392:	2031      	movs	r0, #49	; 0x31
    b394:	f7f6 fe5a 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b398:	bd10      	pop	{r4, pc}

0000b39a <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    b39a:	207f      	movs	r0, #127	; 0x7f
    b39c:	f000 b83a 	b.w	b414 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6c>

0000b3a0 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    b3a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    b3a4:	f000 b836 	b.w	b414 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6c>

0000b3a8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    b3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3ac:	460d      	mov	r5, r1
    b3ae:	4606      	mov	r6, r0
    b3b0:	f7ff fff3 	bl	b39a <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    b3b4:	4607      	mov	r7, r0
    b3b6:	f7ff fff3 	bl	b3a0 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    b3ba:	2400      	movs	r4, #0
    b3bc:	4285      	cmp	r5, r0
    b3be:	d100      	bne.n	b3c2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    b3c0:	2401      	movs	r4, #1
    b3c2:	42bd      	cmp	r5, r7
    b3c4:	d101      	bne.n	b3ca <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    b3c6:	f044 0402 	orr.w	r4, r4, #2
    b3ca:	f000 f813 	bl	b3f4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    b3ce:	2200      	movs	r2, #0
    b3d0:	4601      	mov	r1, r0
    b3d2:	2301      	movs	r3, #1
    b3d4:	fa03 f002 	lsl.w	r0, r3, r2
    b3d8:	4208      	tst	r0, r1
    b3da:	d005      	beq.n	b3e8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    b3dc:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    b3e0:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    b3e4:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    b3e8:	1c52      	adds	r2, r2, #1
    b3ea:	b2d2      	uxtb	r2, r2
    b3ec:	2a02      	cmp	r2, #2
    b3ee:	d3f1      	bcc.n	b3d4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3f4:	b510      	push	{r4, lr}
    b3f6:	f7f9 faf1 	bl	49dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3fe:	f000 b800 	b.w	b402 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x5a>
    b402:	0a00      	lsrs	r0, r0, #8
    b404:	2201      	movs	r2, #1
    b406:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    b40a:	07c0      	lsls	r0, r0, #31
    b40c:	d000      	beq.n	b410 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x68>
    b40e:	2203      	movs	r2, #3
    b410:	4610      	mov	r0, r2
    b412:	4770      	bx	lr
    b414:	b508      	push	{r3, lr}
    b416:	2301      	movs	r3, #1
    b418:	f640 1288 	movw	r2, #2440	; 0x988
    b41c:	4669      	mov	r1, sp
    b41e:	f7fe fa1d 	bl	985c <mpsl_fem_tx_power_split>
    b422:	bd08      	pop	{r3, pc}
    b424:	b118      	cbz	r0, b42e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    b426:	2802      	cmp	r0, #2
    b428:	d001      	beq.n	b42e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    b42a:	2001      	movs	r0, #1
    b42c:	4770      	bx	lr
    b42e:	2000      	movs	r0, #0
    b430:	4770      	bx	lr

0000b432 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    b432:	b510      	push	{r4, lr}
    b434:	4604      	mov	r4, r0
    b436:	f7f9 fa57 	bl	48e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    b43a:	b108      	cbz	r0, b440 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    b43c:	200c      	movs	r0, #12
    b43e:	bd10      	pop	{r4, pc}
    b440:	7820      	ldrb	r0, [r4, #0]
    b442:	b118      	cbz	r0, b44c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    b444:	2801      	cmp	r0, #1
    b446:	d001      	beq.n	b44c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    b448:	2012      	movs	r0, #18
    b44a:	bd10      	pop	{r4, pc}
    b44c:	f7ff ffea 	bl	b424 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x7c>
    b450:	1c61      	adds	r1, r4, #1
    b452:	f7f7 fff9 	bl	3448 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    b456:	b108      	cbz	r0, b45c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    b458:	2000      	movs	r0, #0
    b45a:	bd10      	pop	{r4, pc}
    b45c:	2007      	movs	r0, #7
    b45e:	bd10      	pop	{r4, pc}

0000b460 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    b460:	b510      	push	{r4, lr}
    b462:	f7f9 fa41 	bl	48e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    b466:	b108      	cbz	r0, b46c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    b468:	200c      	movs	r0, #12
    b46a:	bd10      	pop	{r4, pc}
    b46c:	f7f8 f84a 	bl	3504 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    b470:	2000      	movs	r0, #0
    b472:	f7f7 fd17 	bl	2ea4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    b476:	2000      	movs	r0, #0
    b478:	bd10      	pop	{r4, pc}

0000b47a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    b47a:	b510      	push	{r4, lr}
    b47c:	460b      	mov	r3, r1
    b47e:	2201      	movs	r2, #1
    b480:	f100 0110 	add.w	r1, r0, #16
    b484:	f7ff f9fa 	bl	a87c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    b488:	2000      	movs	r0, #0
    b48a:	bd10      	pop	{r4, pc}

0000b48c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    b48c:	b510      	push	{r4, lr}
    b48e:	8800      	ldrh	r0, [r0, #0]
    b490:	2100      	movs	r1, #0
    b492:	f7f7 f8c1 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b496:	b118      	cbz	r0, b4a0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    b498:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    b49c:	b111      	cbz	r1, b4a4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    b49e:	e007      	b.n	b4b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    b4a0:	2002      	movs	r0, #2
    b4a2:	bd10      	pop	{r4, pc}
    b4a4:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    b4a8:	2915      	cmp	r1, #21
    b4aa:	d003      	beq.n	b4b4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    b4ac:	2916      	cmp	r1, #22
    b4ae:	d001      	beq.n	b4b4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    b4b0:	200c      	movs	r0, #12
    b4b2:	bd10      	pop	{r4, pc}
    b4b4:	2102      	movs	r1, #2
    b4b6:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    b4ba:	2000      	movs	r0, #0
    b4bc:	bd10      	pop	{r4, pc}

0000b4be <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    b4be:	b510      	push	{r4, lr}
    b4c0:	2108      	movs	r1, #8
    b4c2:	f7f6 fe33 	bl	212c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    b4c6:	2000      	movs	r0, #0
    b4c8:	bd10      	pop	{r4, pc}

0000b4ca <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    b4ca:	b510      	push	{r4, lr}
    b4cc:	4604      	mov	r4, r0
    b4ce:	f7f9 f96d 	bl	47ac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    b4d2:	f7ff fc36 	bl	ad42 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    b4d6:	f7f7 fde7 	bl	30a8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    b4da:	7020      	strb	r0, [r4, #0]
    b4dc:	2000      	movs	r0, #0
    b4de:	bd10      	pop	{r4, pc}

0000b4e0 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    b4e0:	b510      	push	{r4, lr}
    b4e2:	4604      	mov	r4, r0
    b4e4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    b4e8:	f000 fb41 	bl	bb6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    b4ec:	f7f7 fddc 	bl	30a8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    b4f0:	7020      	strb	r0, [r4, #0]
    b4f2:	f000 fb13 	bl	bb1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c8>
    b4f6:	f7f7 fdd7 	bl	30a8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    b4fa:	7060      	strb	r0, [r4, #1]
    b4fc:	2000      	movs	r0, #0
    b4fe:	bd10      	pop	{r4, pc}

0000b500 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    b500:	b510      	push	{r4, lr}
    b502:	4604      	mov	r4, r0
    b504:	f7f8 f804 	bl	3510 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    b508:	7020      	strb	r0, [r4, #0]
    b50a:	2000      	movs	r0, #0
    b50c:	bd10      	pop	{r4, pc}

0000b50e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    b50e:	b510      	push	{r4, lr}
    b510:	4604      	mov	r4, r0
    b512:	f7f9 f9e9 	bl	48e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    b516:	b108      	cbz	r0, b51c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    b518:	200c      	movs	r0, #12
    b51a:	bd10      	pop	{r4, pc}
    b51c:	7820      	ldrb	r0, [r4, #0]
    b51e:	b108      	cbz	r0, b524 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    b520:	2801      	cmp	r0, #1
    b522:	d107      	bne.n	b534 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    b524:	f7ff ff7e 	bl	b424 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x7c>
    b528:	1c61      	adds	r1, r4, #1
    b52a:	f7f7 ffcb 	bl	34c4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    b52e:	b108      	cbz	r0, b534 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    b530:	2000      	movs	r0, #0
    b532:	bd10      	pop	{r4, pc}
    b534:	2012      	movs	r0, #18
    b536:	bd10      	pop	{r4, pc}

0000b538 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    b538:	b51c      	push	{r2, r3, r4, lr}
    b53a:	4604      	mov	r4, r0
    b53c:	f7f9 f936 	bl	47ac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    b540:	2000      	movs	r0, #0
    b542:	f88d 0002 	strb.w	r0, [sp, #2]
    b546:	2103      	movs	r1, #3
    b548:	f88d 1001 	strb.w	r1, [sp, #1]
    b54c:	f814 1b01 	ldrb.w	r1, [r4], #1
    b550:	f88d 1003 	strb.w	r1, [sp, #3]
    b554:	f88d 0000 	strb.w	r0, [sp]
    b558:	4668      	mov	r0, sp
    b55a:	9401      	str	r4, [sp, #4]
    b55c:	f000 f92c 	bl	b7b8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    b560:	bd1c      	pop	{r2, r3, r4, pc}

0000b562 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    b562:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b564:	4605      	mov	r5, r0
    b566:	f7f9 f921 	bl	47ac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    b56a:	4606      	mov	r6, r0
    b56c:	7828      	ldrb	r0, [r5, #0]
    b56e:	2400      	movs	r4, #0
    b570:	b160      	cbz	r0, b58c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    b572:	f88d 4000 	strb.w	r4, [sp]
    b576:	2001      	movs	r0, #1
    b578:	f10d 0101 	add.w	r1, sp, #1
    b57c:	f7f7 fbd8 	bl	2d30 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    b580:	b120      	cbz	r0, b58c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    b582:	4668      	mov	r0, sp
    b584:	f000 f897 	bl	b6b6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    b588:	2800      	cmp	r0, #0
    b58a:	d112      	bne.n	b5b2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    b58c:	f88d 400c 	strb.w	r4, [sp, #12]
    b590:	4630      	mov	r0, r6
    b592:	f7ff fbcc 	bl	ad2e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b596:	b118      	cbz	r0, b5a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    b598:	2080      	movs	r0, #128	; 0x80
    b59a:	f8ad 000d 	strh.w	r0, [sp, #13]
    b59e:	e001      	b.n	b5a4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    b5a0:	f8ad 400d 	strh.w	r4, [sp, #13]
    b5a4:	f88d 400f 	strb.w	r4, [sp, #15]
    b5a8:	7828      	ldrb	r0, [r5, #0]
    b5aa:	2801      	cmp	r0, #1
    b5ac:	d003      	beq.n	b5b6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    b5ae:	b138      	cbz	r0, b5c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    b5b0:	2012      	movs	r0, #18
    b5b2:	b004      	add	sp, #16
    b5b4:	bd70      	pop	{r4, r5, r6, pc}
    b5b6:	a903      	add	r1, sp, #12
    b5b8:	4630      	mov	r0, r6
    b5ba:	f7f9 f913 	bl	47e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    b5be:	e7f8      	b.n	b5b2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    b5c0:	4630      	mov	r0, r6
    b5c2:	f000 faae 	bl	bb22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    b5c6:	e7f4      	b.n	b5b2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000b5c8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    b5c8:	b530      	push	{r4, r5, lr}
    b5ca:	b08b      	sub	sp, #44	; 0x2c
    b5cc:	4604      	mov	r4, r0
    b5ce:	f7f9 f8ed 	bl	47ac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    b5d2:	4602      	mov	r2, r0
    b5d4:	7920      	ldrb	r0, [r4, #4]
    b5d6:	2804      	cmp	r0, #4
    b5d8:	d803      	bhi.n	b5e2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    b5da:	8860      	ldrh	r0, [r4, #2]
    b5dc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    b5e0:	d902      	bls.n	b5e8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    b5e2:	2012      	movs	r0, #18
    b5e4:	b00b      	add	sp, #44	; 0x2c
    b5e6:	bd30      	pop	{r4, r5, pc}
    b5e8:	2500      	movs	r5, #0
    b5ea:	f88d 5004 	strb.w	r5, [sp, #4]
    b5ee:	7921      	ldrb	r1, [r4, #4]
    b5f0:	9500      	str	r5, [sp, #0]
    b5f2:	f89d 0000 	ldrb.w	r0, [sp]
    b5f6:	2905      	cmp	r1, #5
    b5f8:	f040 0010 	orr.w	r0, r0, #16
    b5fc:	f88d 0000 	strb.w	r0, [sp]
    b600:	d254      	bcs.n	b6ac <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    b602:	e8df f001 	tbb	[pc, r1]
    b606:	0803      	.short	0x0803
    b608:	000b1105 	.word	0x000b1105
    b60c:	f040 0001 	orr.w	r0, r0, #1
    b610:	f040 0002 	orr.w	r0, r0, #2
    b614:	e006      	b.n	b624 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    b616:	f040 0009 	orr.w	r0, r0, #9
    b61a:	e001      	b.n	b620 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    b61c:	f040 0001 	orr.w	r0, r0, #1
    b620:	f040 0004 	orr.w	r0, r0, #4
    b624:	f88d 0000 	strb.w	r0, [sp]
    b628:	f8bd 0000 	ldrh.w	r0, [sp]
    b62c:	9000      	str	r0, [sp, #0]
    b62e:	f8bd 0000 	ldrh.w	r0, [sp]
    b632:	f8ad 0005 	strh.w	r0, [sp, #5]
    b636:	8821      	ldrh	r1, [r4, #0]
    b638:	f8dd 0006 	ldr.w	r0, [sp, #6]
    b63c:	f361 201f 	bfi	r0, r1, #8, #24
    b640:	f8cd 0006 	str.w	r0, [sp, #6]
    b644:	8861      	ldrh	r1, [r4, #2]
    b646:	f8dd 0009 	ldr.w	r0, [sp, #9]
    b64a:	f361 201f 	bfi	r0, r1, #8, #24
    b64e:	f8cd 0009 	str.w	r0, [sp, #9]
    b652:	7b60      	ldrb	r0, [r4, #13]
    b654:	f88d 000d 	strb.w	r0, [sp, #13]
    b658:	7960      	ldrb	r0, [r4, #5]
    b65a:	f88d 000e 	strb.w	r0, [sp, #14]
    b65e:	79a0      	ldrb	r0, [r4, #6]
    b660:	f88d 000f 	strb.w	r0, [sp, #15]
    b664:	f8d4 0007 	ldr.w	r0, [r4, #7]
    b668:	9004      	str	r0, [sp, #16]
    b66a:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    b66e:	f8ad 0014 	strh.w	r0, [sp, #20]
    b672:	7ba0      	ldrb	r0, [r4, #14]
    b674:	f88d 0016 	strb.w	r0, [sp, #22]
    b678:	207f      	movs	r0, #127	; 0x7f
    b67a:	f88d 0017 	strb.w	r0, [sp, #23]
    b67e:	2001      	movs	r0, #1
    b680:	f88d 0018 	strb.w	r0, [sp, #24]
    b684:	f88d 5019 	strb.w	r5, [sp, #25]
    b688:	f88d 001a 	strb.w	r0, [sp, #26]
    b68c:	f88d 501b 	strb.w	r5, [sp, #27]
    b690:	4610      	mov	r0, r2
    b692:	f7ff fb6c 	bl	ad6e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    b696:	f88d 001c 	strb.w	r0, [sp, #28]
    b69a:	f88d 501d 	strb.w	r5, [sp, #29]
    b69e:	f88d 501e 	strb.w	r5, [sp, #30]
    b6a2:	a909      	add	r1, sp, #36	; 0x24
    b6a4:	a801      	add	r0, sp, #4
    b6a6:	f7f8 ff65 	bl	4574 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    b6aa:	e79b      	b.n	b5e4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    b6ac:	f241 31a9 	movw	r1, #5033	; 0x13a9
    b6b0:	2039      	movs	r0, #57	; 0x39
    b6b2:	f7f6 fccb 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000b6b6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    b6b6:	b570      	push	{r4, r5, r6, lr}
    b6b8:	4604      	mov	r4, r0
    b6ba:	7800      	ldrb	r0, [r0, #0]
    b6bc:	2101      	movs	r1, #1
    b6be:	f7f6 ffab 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b6c2:	0005      	movs	r5, r0
    b6c4:	d007      	beq.n	b6d6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    b6c6:	f7ff fcf4 	bl	b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b6ca:	b160      	cbz	r0, b6e6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    b6cc:	4628      	mov	r0, r5
    b6ce:	f7ff fb34 	bl	ad3a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    b6d2:	b110      	cbz	r0, b6da <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    b6d4:	e005      	b.n	b6e2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    b6d6:	2042      	movs	r0, #66	; 0x42
    b6d8:	bd70      	pop	{r4, r5, r6, pc}
    b6da:	4628      	mov	r0, r5
    b6dc:	f7ff fb23 	bl	ad26 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b6e0:	b108      	cbz	r0, b6e6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    b6e2:	200c      	movs	r0, #12
    b6e4:	bd70      	pop	{r4, r5, r6, pc}
    b6e6:	1c61      	adds	r1, r4, #1
    b6e8:	4628      	mov	r0, r5
    b6ea:	f7ff fb38 	bl	ad5e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    b6ee:	2000      	movs	r0, #0
    b6f0:	bd70      	pop	{r4, r5, r6, pc}

0000b6f2 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    b6f2:	b510      	push	{r4, lr}
    b6f4:	4604      	mov	r4, r0
    b6f6:	f7f9 f859 	bl	47ac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    b6fa:	7861      	ldrb	r1, [r4, #1]
    b6fc:	f3c1 0240 	ubfx	r2, r1, #1, #1
    b700:	f001 0101 	and.w	r1, r1, #1
    b704:	f7ff fb27 	bl	ad56 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    b708:	2000      	movs	r0, #0
    b70a:	bd10      	pop	{r4, pc}

0000b70c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    b70c:	b510      	push	{r4, lr}
    b70e:	4604      	mov	r4, r0
    b710:	2001      	movs	r0, #1
    b712:	f000 f93a 	bl	b98a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    b716:	b128      	cbz	r0, b724 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    b718:	4621      	mov	r1, r4
    b71a:	2001      	movs	r0, #1
    b71c:	f7f7 fb20 	bl	2d60 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    b720:	2000      	movs	r0, #0
    b722:	bd10      	pop	{r4, pc}
    b724:	200c      	movs	r0, #12
    b726:	bd10      	pop	{r4, pc}

0000b728 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    b728:	b51c      	push	{r2, r3, r4, lr}
    b72a:	4604      	mov	r4, r0
    b72c:	f7f9 f83e 	bl	47ac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    b730:	2000      	movs	r0, #0
    b732:	f88d 0000 	strb.w	r0, [sp]
    b736:	f88d 0002 	strb.w	r0, [sp, #2]
    b73a:	2003      	movs	r0, #3
    b73c:	f88d 0001 	strb.w	r0, [sp, #1]
    b740:	f814 0b01 	ldrb.w	r0, [r4], #1
    b744:	f88d 0003 	strb.w	r0, [sp, #3]
    b748:	4668      	mov	r0, sp
    b74a:	9401      	str	r4, [sp, #4]
    b74c:	f000 f89d 	bl	b88a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    b750:	bd1c      	pop	{r2, r3, r4, pc}

0000b752 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    b752:	b510      	push	{r4, lr}
    b754:	f7f7 fb28 	bl	2da8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    b758:	2000      	movs	r0, #0
    b75a:	bd10      	pop	{r4, pc}

0000b75c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    b75c:	b510      	push	{r4, lr}
    b75e:	4604      	mov	r4, r0
    b760:	7800      	ldrb	r0, [r0, #0]
    b762:	28ff      	cmp	r0, #255	; 0xff
    b764:	d009      	beq.n	b77a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    b766:	2101      	movs	r1, #1
    b768:	f7f6 ff56 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b76c:	b118      	cbz	r0, b776 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    b76e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b772:	8441      	strh	r1, [r0, #34]	; 0x22
    b774:	e005      	b.n	b782 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    b776:	2042      	movs	r0, #66	; 0x42
    b778:	bd10      	pop	{r4, pc}
    b77a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b77e:	f7f8 fe45 	bl	440c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    b782:	2000      	movs	r0, #0
    b784:	bd10      	pop	{r4, pc}

0000b786 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    b786:	b510      	push	{r4, lr}
    b788:	4604      	mov	r4, r0
    b78a:	f7f9 f8ed 	bl	4968 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    b78e:	b118      	cbz	r0, b798 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    b790:	2000      	movs	r0, #0
    b792:	f000 f8fa 	bl	b98a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    b796:	b128      	cbz	r0, b7a4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    b798:	4621      	mov	r1, r4
    b79a:	2000      	movs	r0, #0
    b79c:	f7f7 fae0 	bl	2d60 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    b7a0:	2000      	movs	r0, #0
    b7a2:	bd10      	pop	{r4, pc}
    b7a4:	200c      	movs	r0, #12
    b7a6:	bd10      	pop	{r4, pc}

0000b7a8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    b7a8:	b510      	push	{r4, lr}
    b7aa:	7800      	ldrb	r0, [r0, #0]
    b7ac:	b100      	cbz	r0, b7b0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    b7ae:	2001      	movs	r0, #1
    b7b0:	f7f8 fe56 	bl	4460 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    b7b4:	2000      	movs	r0, #0
    b7b6:	bd10      	pop	{r4, pc}

0000b7b8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    b7b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    b7bc:	4606      	mov	r6, r0
    b7be:	7845      	ldrb	r5, [r0, #1]
    b7c0:	7800      	ldrb	r0, [r0, #0]
    b7c2:	2101      	movs	r1, #1
    b7c4:	f7f6 ff28 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b7c8:	0004      	movs	r4, r0
    b7ca:	d01e      	beq.n	b80a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    b7cc:	f7ff fa7e 	bl	accc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    b7d0:	78f1      	ldrb	r1, [r6, #3]
    b7d2:	4281      	cmp	r1, r0
    b7d4:	d800      	bhi.n	b7d8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    b7d6:	4608      	mov	r0, r1
    b7d8:	4607      	mov	r7, r0
    b7da:	2d04      	cmp	r5, #4
    b7dc:	d018      	beq.n	b810 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    b7de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b7e0:	f7fe ff72 	bl	a6c8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    b7e4:	4438      	add	r0, r7
    b7e6:	b281      	uxth	r1, r0
    b7e8:	4620      	mov	r0, r4
    b7ea:	2201      	movs	r2, #1
    b7ec:	f000 f8df 	bl	b9ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    b7f0:	2800      	cmp	r0, #0
    b7f2:	d10b      	bne.n	b80c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    b7f4:	2d03      	cmp	r5, #3
    b7f6:	d000      	beq.n	b7fa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    b7f8:	b1df      	cbz	r7, b832 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    b7fa:	4620      	mov	r0, r4
    b7fc:	f7ff fa9b 	bl	ad36 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b800:	7871      	ldrb	r1, [r6, #1]
    b802:	2903      	cmp	r1, #3
    b804:	d010      	beq.n	b828 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    b806:	b9a0      	cbnz	r0, b832 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    b808:	e004      	b.n	b814 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    b80a:	2042      	movs	r0, #66	; 0x42
    b80c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    b810:	b97f      	cbnz	r7, b832 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    b812:	e7f2      	b.n	b7fa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    b814:	2904      	cmp	r1, #4
    b816:	d107      	bne.n	b828 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    b818:	4620      	mov	r0, r4
    b81a:	f7ff fc4a 	bl	b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b81e:	b140      	cbz	r0, b832 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    b820:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b822:	f7fe ff18 	bl	a656 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    b826:	b120      	cbz	r0, b832 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    b828:	2d01      	cmp	r5, #1
    b82a:	d004      	beq.n	b836 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    b82c:	2d03      	cmp	r5, #3
    b82e:	d002      	beq.n	b836 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    b830:	e00e      	b.n	b850 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    b832:	2012      	movs	r0, #18
    b834:	e7ea      	b.n	b80c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    b836:	4620      	mov	r0, r4
    b838:	f7ff fa7d 	bl	ad36 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b83c:	b108      	cbz	r0, b842 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    b83e:	2200      	movs	r2, #0
    b840:	e002      	b.n	b848 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    b842:	2d01      	cmp	r5, #1
    b844:	d013      	beq.n	b86e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    b846:	2201      	movs	r2, #1
    b848:	4668      	mov	r0, sp
    b84a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b84c:	f7fe fe9f 	bl	a58e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b850:	2d04      	cmp	r5, #4
    b852:	d018      	beq.n	b886 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    b854:	6872      	ldr	r2, [r6, #4]
    b856:	463b      	mov	r3, r7
    b858:	2101      	movs	r1, #1
    b85a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b85c:	f7fe fecb 	bl	a5f6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    b860:	b138      	cbz	r0, b872 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    b862:	7870      	ldrb	r0, [r6, #1]
    b864:	2802      	cmp	r0, #2
    b866:	d006      	beq.n	b876 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    b868:	2803      	cmp	r0, #3
    b86a:	d004      	beq.n	b876 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    b86c:	e00b      	b.n	b886 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    b86e:	2202      	movs	r2, #2
    b870:	e7ea      	b.n	b848 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    b872:	2007      	movs	r0, #7
    b874:	e7ca      	b.n	b80c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    b876:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b878:	f7fe ff26 	bl	a6c8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    b87c:	4602      	mov	r2, r0
    b87e:	2101      	movs	r1, #1
    b880:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b882:	f7fe fefe 	bl	a682 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b886:	2000      	movs	r0, #0
    b888:	e7c0      	b.n	b80c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000b88a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    b88a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    b88e:	4607      	mov	r7, r0
    b890:	7845      	ldrb	r5, [r0, #1]
    b892:	78c6      	ldrb	r6, [r0, #3]
    b894:	7800      	ldrb	r0, [r0, #0]
    b896:	2101      	movs	r1, #1
    b898:	f7f6 febe 	bl	2618 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b89c:	0004      	movs	r4, r0
    b89e:	d003      	beq.n	b8a8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    b8a0:	f7ff fa4b 	bl	ad3a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    b8a4:	b118      	cbz	r0, b8ae <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    b8a6:	e003      	b.n	b8b0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    b8a8:	2042      	movs	r0, #66	; 0x42
    b8aa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    b8ae:	2600      	movs	r6, #0
    b8b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b8b2:	f7fe ff0d 	bl	a6d0 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    b8b6:	4430      	add	r0, r6
    b8b8:	b281      	uxth	r1, r0
    b8ba:	4688      	mov	r8, r1
    b8bc:	4620      	mov	r0, r4
    b8be:	2201      	movs	r2, #1
    b8c0:	f000 f875 	bl	b9ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    b8c4:	2800      	cmp	r0, #0
    b8c6:	d1f0      	bne.n	b8aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    b8c8:	2d04      	cmp	r5, #4
    b8ca:	d008      	beq.n	b8de <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    b8cc:	2d03      	cmp	r5, #3
    b8ce:	d00a      	beq.n	b8e6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    b8d0:	b12e      	cbz	r6, b8de <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    b8d2:	4620      	mov	r0, r4
    b8d4:	f7ff fbed 	bl	b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b8d8:	b118      	cbz	r0, b8e2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    b8da:	200c      	movs	r0, #12
    b8dc:	e7e5      	b.n	b8aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    b8de:	2012      	movs	r0, #18
    b8e0:	e7e3      	b.n	b8aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    b8e2:	2d01      	cmp	r5, #1
    b8e4:	d10c      	bne.n	b900 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    b8e6:	4620      	mov	r0, r4
    b8e8:	f7ff fa25 	bl	ad36 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b8ec:	b108      	cbz	r0, b8f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    b8ee:	2204      	movs	r2, #4
    b8f0:	e002      	b.n	b8f8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    b8f2:	2d01      	cmp	r5, #1
    b8f4:	d010      	beq.n	b918 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    b8f6:	2205      	movs	r2, #5
    b8f8:	4668      	mov	r0, sp
    b8fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b8fc:	f7fe fe47 	bl	a58e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b900:	687a      	ldr	r2, [r7, #4]
    b902:	4633      	mov	r3, r6
    b904:	2100      	movs	r1, #0
    b906:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b908:	f7fe fe75 	bl	a5f6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    b90c:	b130      	cbz	r0, b91c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    b90e:	2d02      	cmp	r5, #2
    b910:	d006      	beq.n	b920 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    b912:	2d03      	cmp	r5, #3
    b914:	d004      	beq.n	b920 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    b916:	e008      	b.n	b92a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    b918:	2206      	movs	r2, #6
    b91a:	e7ed      	b.n	b8f8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    b91c:	2007      	movs	r0, #7
    b91e:	e7c4      	b.n	b8aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    b920:	4642      	mov	r2, r8
    b922:	2100      	movs	r1, #0
    b924:	6b60      	ldr	r0, [r4, #52]	; 0x34
    b926:	f7fe feac 	bl	a682 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b92a:	2000      	movs	r0, #0
    b92c:	e7bd      	b.n	b8aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000b92e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    b92e:	b510      	push	{r4, lr}
    b930:	4604      	mov	r4, r0
    b932:	4601      	mov	r1, r0
    b934:	2000      	movs	r0, #0
    b936:	f7f7 f9fb 	bl	2d30 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    b93a:	b910      	cbnz	r0, b942 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    b93c:	2000      	movs	r0, #0
    b93e:	6020      	str	r0, [r4, #0]
    b940:	80a0      	strh	r0, [r4, #4]
    b942:	2000      	movs	r0, #0
    b944:	bd10      	pop	{r4, pc}

0000b946 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    b946:	b510      	push	{r4, lr}
    b948:	f7f9 f814 	bl	4974 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    b94c:	2000      	movs	r0, #0
    b94e:	bd10      	pop	{r4, pc}

0000b950 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    b950:	f000 b800 	b.w	b954 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000b954 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    b954:	b510      	push	{r4, lr}
    b956:	f7fe ff44 	bl	a7e2 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b95a:	f7f7 fa61 	bl	2e20 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b95e:	f7f9 f853 	bl	4a08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    b962:	f7ff f8e5 	bl	ab30 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    b966:	f7fe fffd 	bl	a964 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    b96a:	f7f7 fdcb 	bl	3504 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    b96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b972:	f7f8 befb 	b.w	476c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xf8>
    b976:	07c1      	lsls	r1, r0, #31
    b978:	d001      	beq.n	b97e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    b97a:	2001      	movs	r0, #1
    b97c:	4770      	bx	lr
    b97e:	0780      	lsls	r0, r0, #30
    b980:	d501      	bpl.n	b986 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32>
    b982:	2002      	movs	r0, #2
    b984:	4770      	bx	lr
    b986:	2000      	movs	r0, #0
    b988:	4770      	bx	lr
    b98a:	b510      	push	{r4, lr}
    b98c:	f7f8 fed8 	bl	4740 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xcc>
    b990:	b158      	cbz	r0, b9aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    b992:	f7f8 ff0b 	bl	47ac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    b996:	4604      	mov	r4, r0
    b998:	f7ff f9cf 	bl	ad3a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    b99c:	b918      	cbnz	r0, b9a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x52>
    b99e:	4620      	mov	r0, r4
    b9a0:	f7ff f9c1 	bl	ad26 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b9a4:	b108      	cbz	r0, b9aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    b9a6:	2000      	movs	r0, #0
    b9a8:	bd10      	pop	{r4, pc}
    b9aa:	2001      	movs	r0, #1
    b9ac:	bd10      	pop	{r4, pc}
    b9ae:	b570      	push	{r4, r5, r6, lr}
    b9b0:	460c      	mov	r4, r1
    b9b2:	4605      	mov	r5, r0
    b9b4:	b112      	cbz	r2, b9bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    b9b6:	291f      	cmp	r1, #31
    b9b8:	d80c      	bhi.n	b9d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    b9ba:	e016      	b.n	b9ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    b9bc:	f7f7 f878 	bl	2ab0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    b9c0:	42a0      	cmp	r0, r4
    b9c2:	d201      	bcs.n	b9c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x74>
    b9c4:	2007      	movs	r0, #7
    b9c6:	bd70      	pop	{r4, r5, r6, pc}
    b9c8:	4628      	mov	r0, r5
    b9ca:	f7ff f9b4 	bl	ad36 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b9ce:	b118      	cbz	r0, b9d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    b9d0:	2c1f      	cmp	r4, #31
    b9d2:	d901      	bls.n	b9d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    b9d4:	2012      	movs	r0, #18
    b9d6:	bd70      	pop	{r4, r5, r6, pc}
    b9d8:	4628      	mov	r0, r5
    b9da:	f7ff f9b5 	bl	ad48 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b9de:	b130      	cbz	r0, b9ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    b9e0:	4621      	mov	r1, r4
    b9e2:	4628      	mov	r0, r5
    b9e4:	f7ff f97e 	bl	ace4 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    b9e8:	b118      	cbz	r0, b9f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    b9ea:	2000      	movs	r0, #0
    b9ec:	bd70      	pop	{r4, r5, r6, pc}
    b9ee:	2042      	movs	r0, #66	; 0x42
    b9f0:	bd70      	pop	{r4, r5, r6, pc}
    b9f2:	2045      	movs	r0, #69	; 0x45
    b9f4:	bd70      	pop	{r4, r5, r6, pc}
    b9f6:	b510      	push	{r4, lr}
    b9f8:	4604      	mov	r4, r0
    b9fa:	7840      	ldrb	r0, [r0, #1]
    b9fc:	06c1      	lsls	r1, r0, #27
    b9fe:	d51c      	bpl.n	ba3a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    ba00:	07c0      	lsls	r0, r0, #31
    ba02:	d00b      	beq.n	ba1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    ba04:	f7f8 ffd8 	bl	49b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    ba08:	b1b8      	cbz	r0, ba3a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    ba0a:	7860      	ldrb	r0, [r4, #1]
    ba0c:	06c1      	lsls	r1, r0, #27
    ba0e:	d405      	bmi.n	ba1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    ba10:	0700      	lsls	r0, r0, #28
    ba12:	d503      	bpl.n	ba1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    ba14:	7d20      	ldrb	r0, [r4, #20]
    ba16:	2802      	cmp	r0, #2
    ba18:	d10f      	bne.n	ba3a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    ba1a:	e010      	b.n	ba3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    ba1c:	7d20      	ldrb	r0, [r4, #20]
    ba1e:	2802      	cmp	r0, #2
    ba20:	d001      	beq.n	ba26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    ba22:	7ea0      	ldrb	r0, [r4, #26]
    ba24:	b948      	cbnz	r0, ba3a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    ba26:	7860      	ldrb	r0, [r4, #1]
    ba28:	0700      	lsls	r0, r0, #28
    ba2a:	d408      	bmi.n	ba3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    ba2c:	f8d4 0005 	ldr.w	r0, [r4, #5]
    ba30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    ba34:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    ba38:	d201      	bcs.n	ba3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    ba3a:	2011      	movs	r0, #17
    ba3c:	bd10      	pop	{r4, pc}
    ba3e:	2000      	movs	r0, #0
    ba40:	bd10      	pop	{r4, pc}
    ba42:	b538      	push	{r3, r4, r5, lr}
    ba44:	4604      	mov	r4, r0
    ba46:	7800      	ldrb	r0, [r0, #0]
    ba48:	28ef      	cmp	r0, #239	; 0xef
    ba4a:	d843      	bhi.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    ba4c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ba50:	f8ad 0000 	strh.w	r0, [sp]
    ba54:	9800      	ldr	r0, [sp, #0]
    ba56:	f000 f892 	bl	bb7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    ba5a:	b3a0      	cbz	r0, bac6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
    ba5c:	7861      	ldrb	r1, [r4, #1]
    ba5e:	0708      	lsls	r0, r1, #28
    ba60:	d40b      	bmi.n	ba7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x126>
    ba62:	f8d4 0002 	ldr.w	r0, [r4, #2]
    ba66:	f8d4 3005 	ldr.w	r3, [r4, #5]
    ba6a:	0a02      	lsrs	r2, r0, #8
    ba6c:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    ba70:	d830      	bhi.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    ba72:	2220      	movs	r2, #32
    ba74:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    ba78:	d82c      	bhi.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    ba7a:	7a60      	ldrb	r0, [r4, #9]
    ba7c:	b318      	cbz	r0, bac6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
    ba7e:	2807      	cmp	r0, #7
    ba80:	d828      	bhi.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    ba82:	7aa0      	ldrb	r0, [r4, #10]
    ba84:	b128      	cbz	r0, ba92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    ba86:	2801      	cmp	r0, #1
    ba88:	d003      	beq.n	ba92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    ba8a:	2802      	cmp	r0, #2
    ba8c:	d001      	beq.n	ba92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    ba8e:	2803      	cmp	r0, #3
    ba90:	d120      	bne.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    ba92:	074a      	lsls	r2, r1, #29
    ba94:	d403      	bmi.n	ba9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    ba96:	2802      	cmp	r0, #2
    ba98:	d001      	beq.n	ba9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    ba9a:	2803      	cmp	r0, #3
    ba9c:	d105      	bne.n	baaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x156>
    ba9e:	7ae0      	ldrb	r0, [r4, #11]
    baa0:	b108      	cbz	r0, baa6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x152>
    baa2:	2801      	cmp	r0, #1
    baa4:	d116      	bne.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    baa6:	0748      	lsls	r0, r1, #29
    baa8:	d407      	bmi.n	baba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    baaa:	7ca0      	ldrb	r0, [r4, #18]
    baac:	b128      	cbz	r0, baba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    baae:	2801      	cmp	r0, #1
    bab0:	d003      	beq.n	baba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    bab2:	2802      	cmp	r0, #2
    bab4:	d001      	beq.n	baba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    bab6:	2803      	cmp	r0, #3
    bab8:	d10c      	bne.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    baba:	06c8      	lsls	r0, r1, #27
    babc:	7d20      	ldrb	r0, [r4, #20]
    babe:	d503      	bpl.n	bac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    bac0:	2801      	cmp	r0, #1
    bac2:	d107      	bne.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    bac4:	e002      	b.n	bacc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
    bac6:	e005      	b.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    bac8:	2802      	cmp	r0, #2
    baca:	d003      	beq.n	bad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    bacc:	7e20      	ldrb	r0, [r4, #24]
    bace:	b118      	cbz	r0, bad8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    bad0:	2801      	cmp	r0, #1
    bad2:	d001      	beq.n	bad8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    bad4:	2012      	movs	r0, #18
    bad6:	bd38      	pop	{r3, r4, r5, pc}
    bad8:	2000      	movs	r0, #0
    bada:	bd38      	pop	{r3, r4, r5, pc}
    badc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bae0:	7890      	ldrb	r0, [r2, #2]
    bae2:	9e06      	ldr	r6, [sp, #24]
    bae4:	461d      	mov	r5, r3
    bae6:	4614      	mov	r4, r2
    bae8:	b908      	cbnz	r0, baee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19a>
    baea:	f7f8 ff7d 	bl	49e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    baee:	78e4      	ldrb	r4, [r4, #3]
    baf0:	4607      	mov	r7, r0
    baf2:	b914      	cbnz	r4, bafa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    baf4:	f7f8 ff78 	bl	49e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    baf8:	4604      	mov	r4, r0
    bafa:	b16f      	cbz	r7, bb18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    bafc:	b164      	cbz	r4, bb18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    bafe:	4638      	mov	r0, r7
    bb00:	f7ff ff39 	bl	b976 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    bb04:	4620      	mov	r0, r4
    bb06:	f7ff ff36 	bl	b976 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    bb0a:	b12f      	cbz	r7, bb18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    bb0c:	b124      	cbz	r4, bb18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    bb0e:	702f      	strb	r7, [r5, #0]
    bb10:	7034      	strb	r4, [r6, #0]
    bb12:	2000      	movs	r0, #0
    bb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb18:	2009      	movs	r0, #9
    bb1a:	e7fb      	b.n	bb14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    bb1c:	207f      	movs	r0, #127	; 0x7f
    bb1e:	f000 b826 	b.w	bb6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    bb22:	b570      	push	{r4, r5, r6, lr}
    bb24:	4605      	mov	r5, r0
    bb26:	f7ff f90f 	bl	ad48 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    bb2a:	b170      	cbz	r0, bb4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    bb2c:	4628      	mov	r0, r5
    bb2e:	f7ff fac0 	bl	b0b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    bb32:	2800      	cmp	r0, #0
    bb34:	d008      	beq.n	bb48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    bb36:	4628      	mov	r0, r5
    bb38:	f7ff fab8 	bl	b0ac <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    bb3c:	4604      	mov	r4, r0
    bb3e:	4628      	mov	r0, r5
    bb40:	f7ff fa8e 	bl	b060 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    bb44:	b118      	cbz	r0, bb4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
    bb46:	200c      	movs	r0, #12
    bb48:	bd70      	pop	{r4, r5, r6, pc}
    bb4a:	2042      	movs	r0, #66	; 0x42
    bb4c:	bd70      	pop	{r4, r5, r6, pc}
    bb4e:	b164      	cbz	r4, bb6a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    bb50:	8820      	ldrh	r0, [r4, #0]
    bb52:	f7fe fe15 	bl	a780 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    bb56:	8820      	ldrh	r0, [r4, #0]
    bb58:	2100      	movs	r1, #0
    bb5a:	f7f6 fdff 	bl	275c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    bb5e:	b120      	cbz	r0, bb6a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    bb60:	f241 71ae 	movw	r1, #6062	; 0x17ae
    bb64:	2039      	movs	r0, #57	; 0x39
    bb66:	f7f6 fa71 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb6a:	2000      	movs	r0, #0
    bb6c:	bd70      	pop	{r4, r5, r6, pc}
    bb6e:	b508      	push	{r3, lr}
    bb70:	f640 1288 	movw	r2, #2440	; 0x988
    bb74:	2300      	movs	r3, #0
    bb76:	4669      	mov	r1, sp
    bb78:	f7fd fe70 	bl	985c <mpsl_fem_tx_power_split>
    bb7c:	bd08      	pop	{r3, pc}
    bb7e:	b2c0      	uxtb	r0, r0
    bb80:	06c1      	lsls	r1, r0, #27
    bb82:	d40c      	bmi.n	bb9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    bb84:	0681      	lsls	r1, r0, #26
    bb86:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    bb8a:	d503      	bpl.n	bb94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    bb8c:	b9d1      	cbnz	r1, bbc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    bb8e:	0781      	lsls	r1, r0, #30
    bb90:	d418      	bmi.n	bbc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    bb92:	e001      	b.n	bb98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
    bb94:	2900      	cmp	r1, #0
    bb96:	d1fa      	bne.n	bb8e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23a>
    bb98:	0700      	lsls	r0, r0, #28
    bb9a:	d413      	bmi.n	bbc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    bb9c:	e010      	b.n	bbc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    bb9e:	0641      	lsls	r1, r0, #25
    bba0:	d410      	bmi.n	bbc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    bba2:	0681      	lsls	r1, r0, #26
    bba4:	d40e      	bmi.n	bbc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    bba6:	07c1      	lsls	r1, r0, #31
    bba8:	ea4f 7180 	mov.w	r1, r0, lsl #30
    bbac:	d004      	beq.n	bbb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
    bbae:	2900      	cmp	r1, #0
    bbb0:	db02      	blt.n	bbb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
    bbb2:	0740      	lsls	r0, r0, #29
    bbb4:	d404      	bmi.n	bbc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    bbb6:	e005      	b.n	bbc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    bbb8:	0701      	lsls	r1, r0, #28
    bbba:	d403      	bmi.n	bbc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    bbbc:	0740      	lsls	r0, r0, #29
    bbbe:	d401      	bmi.n	bbc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    bbc0:	2001      	movs	r0, #1
    bbc2:	4770      	bx	lr
    bbc4:	2000      	movs	r0, #0
    bbc6:	4770      	bx	lr
    bbc8:	b510      	push	{r4, lr}
    bbca:	f7f8 fc33 	bl	4434 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    bbce:	b110      	cbz	r0, bbd6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x282>
    bbd0:	f44f 7188 	mov.w	r1, #272	; 0x110
    bbd4:	e004      	b.n	bbe0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28c>
    bbd6:	f7f7 fe17 	bl	3808 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    bbda:	b120      	cbz	r0, bbe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
    bbdc:	f240 1115 	movw	r1, #277	; 0x115
    bbe0:	2001      	movs	r0, #1
    bbe2:	f7f6 fa33 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbea:	2001      	movs	r0, #1
    bbec:	f7fe bc18 	b.w	a420 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    bbf0:	6802      	ldr	r2, [r0, #0]
    bbf2:	b912      	cbnz	r2, bbfa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a6>
    bbf4:	6001      	str	r1, [r0, #0]
    bbf6:	4770      	bx	lr
    bbf8:	4602      	mov	r2, r0
    bbfa:	6850      	ldr	r0, [r2, #4]
    bbfc:	b108      	cbz	r0, bc02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ae>
    bbfe:	428a      	cmp	r2, r1
    bc00:	d1fa      	bne.n	bbf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    bc02:	428a      	cmp	r2, r1
    bc04:	d0f7      	beq.n	bbf6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a2>
    bc06:	6051      	str	r1, [r2, #4]
    bc08:	4770      	bx	lr
    bc0a:	b510      	push	{r4, lr}
    bc0c:	4604      	mov	r4, r0
    bc0e:	e002      	b.n	bc16 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
    bc10:	6820      	ldr	r0, [r4, #0]
    bc12:	4780      	blx	r0
    bc14:	6864      	ldr	r4, [r4, #4]
    bc16:	2c00      	cmp	r4, #0
    bc18:	d1fa      	bne.n	bc10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2bc>
    bc1a:	bd10      	pop	{r4, pc}

0000bc1c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    bc1c:	f7fd bb72 	b.w	9304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    bc20:	000b0001 	.word	0x000b0001
    bc24:	000a0002 	.word	0x000a0002
    bc28:	00090005 	.word	0x00090005
    bc2c:	0008000a 	.word	0x0008000a
    bc30:	00070014 	.word	0x00070014
    bc34:	0006001e 	.word	0x0006001e
    bc38:	00050032 	.word	0x00050032
    bc3c:	0004004b 	.word	0x0004004b
    bc40:	00030064 	.word	0x00030064
    bc44:	00020096 	.word	0x00020096
    bc48:	000100fa 	.word	0x000100fa
    bc4c:	000001f4 	.word	0x000001f4

0000bc50 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    bc50:	b510      	push	{r4, lr}
    bc52:	f7f9 f927 	bl	4ea4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    bc56:	f000 f818 	bl	bc8a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    bc5a:	f7f8 ff39 	bl	4ad0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    bc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc62:	f7f8 bf9f 	b.w	4ba4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000bc66 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    bc66:	b510      	push	{r4, lr}
    bc68:	24c8      	movs	r4, #200	; 0xc8
    bc6a:	1e64      	subs	r4, r4, #1
    bc6c:	b2e4      	uxtb	r4, r4
    bc6e:	f7f8 ff4d 	bl	4b0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    bc72:	2802      	cmp	r0, #2
    bc74:	d003      	beq.n	bc7e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    bc76:	2801      	cmp	r0, #1
    bc78:	d000      	beq.n	bc7c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    bc7a:	2000      	movs	r0, #0
    bc7c:	bd10      	pop	{r4, pc}
    bc7e:	2c00      	cmp	r4, #0
    bc80:	d1f3      	bne.n	bc6a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    bc82:	21ed      	movs	r1, #237	; 0xed
    bc84:	203b      	movs	r0, #59	; 0x3b
    bc86:	f7f6 f9e1 	bl	204c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000bc8a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    bc8a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bc8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bc92:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    bc96:	f3bf 8f4f 	dsb	sy
    bc9a:	f3bf 8f6f 	isb	sy
    bc9e:	f7f8 bfb5 	b.w	4c0c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    bca2:	2800      	cmp	r0, #0
    bca4:	db09      	blt.n	bcba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    bca6:	f000 021f 	and.w	r2, r0, #31
    bcaa:	2101      	movs	r1, #1
    bcac:	4091      	lsls	r1, r2
    bcae:	0940      	lsrs	r0, r0, #5
    bcb0:	0080      	lsls	r0, r0, #2
    bcb2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bcb6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bcba:	4770      	bx	lr
    bcbc:	2800      	cmp	r0, #0
    bcbe:	db0d      	blt.n	bcdc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    bcc0:	f000 021f 	and.w	r2, r0, #31
    bcc4:	2101      	movs	r1, #1
    bcc6:	4091      	lsls	r1, r2
    bcc8:	0940      	lsrs	r0, r0, #5
    bcca:	0080      	lsls	r0, r0, #2
    bccc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bcd0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bcd4:	f3bf 8f4f 	dsb	sy
    bcd8:	f3bf 8f6f 	isb	sy
    bcdc:	4770      	bx	lr
    bcde:	5840      	ldr	r0, [r0, r1]
    bce0:	2800      	cmp	r0, #0
    bce2:	d000      	beq.n	bce6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    bce4:	2001      	movs	r0, #1
    bce6:	4770      	bx	lr
    bce8:	5840      	ldr	r0, [r0, r1]
    bcea:	2800      	cmp	r0, #0
    bcec:	d000      	beq.n	bcf0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    bcee:	2001      	movs	r0, #1
    bcf0:	4770      	bx	lr

0000bcf2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    bcf2:	b510      	push	{r4, lr}
    bcf4:	4604      	mov	r4, r0
    bcf6:	4608      	mov	r0, r1
    bcf8:	f7f9 f9ee 	bl	50d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    bcfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    bd00:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    bd04:	fbb0 f0f1 	udiv	r0, r0, r1
    bd08:	1a20      	subs	r0, r4, r0
    bd0a:	1e80      	subs	r0, r0, #2
    bd0c:	bd10      	pop	{r4, pc}

0000bd0e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    bd0e:	b510      	push	{r4, lr}
    bd10:	4604      	mov	r4, r0
    bd12:	4608      	mov	r0, r1
    bd14:	f7f9 f9e0 	bl	50d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    bd18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    bd1c:	fbb0 f0f1 	udiv	r0, r0, r1
    bd20:	1a20      	subs	r0, r4, r0
    bd22:	bd10      	pop	{r4, pc}
    bd24:	2804      	cmp	r0, #4
    bd26:	d202      	bcs.n	bd2e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
    bd28:	f04f 0028 	mov.w	r0, #40	; 0x28
    bd2c:	4770      	bx	lr
    bd2e:	d102      	bne.n	bd36 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
    bd30:	f04f 0010 	mov.w	r0, #16
    bd34:	4770      	bx	lr
    bd36:	f04f 0000 	mov.w	r0, #0
    bd3a:	4770      	bx	lr
    bd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd40:	000d      	movs	r5, r1
    bd42:	4604      	mov	r4, r0
    bd44:	f04f 0602 	mov.w	r6, #2
    bd48:	f04f 0701 	mov.w	r7, #1
    bd4c:	d008      	beq.n	bd60 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x52>
    bd4e:	7828      	ldrb	r0, [r5, #0]
    bd50:	b1d0      	cbz	r0, bd88 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
    bd52:	2801      	cmp	r0, #1
    bd54:	d007      	beq.n	bd66 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x58>
    bd56:	2802      	cmp	r0, #2
    bd58:	d014      	beq.n	bd84 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
    bd5a:	2803      	cmp	r0, #3
    bd5c:	d13e      	bne.n	bddc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
    bd5e:	e016      	b.n	bd8e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x80>
    bd60:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    bd64:	e00e      	b.n	bd84 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
    bd66:	6868      	ldr	r0, [r5, #4]
    bd68:	28c8      	cmp	r0, #200	; 0xc8
    bd6a:	d303      	bcc.n	bd74 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x66>
    bd6c:	2103      	movs	r1, #3
    bd6e:	f7fb f831 	bl	6dd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    bd72:	b108      	cbz	r0, bd78 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x6a>
    bd74:	2600      	movs	r6, #0
    bd76:	e007      	b.n	bd88 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
    bd78:	4620      	mov	r0, r4
    bd7a:	6869      	ldr	r1, [r5, #4]
    bd7c:	f000 f833 	bl	bde6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
    bd80:	2601      	movs	r6, #1
    bd82:	e001      	b.n	bd88 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
    bd84:	f7fa f83e 	bl	5e04 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
    bd88:	4630      	mov	r0, r6
    bd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd8e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    bd92:	2800      	cmp	r0, #0
    bd94:	d1f6      	bne.n	bd84 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
    bd96:	6868      	ldr	r0, [r5, #4]
    bd98:	f7fa f806 	bl	5da8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
    bd9c:	b1f0      	cbz	r0, bddc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
    bd9e:	6869      	ldr	r1, [r5, #4]
    bda0:	7808      	ldrb	r0, [r1, #0]
    bda2:	b130      	cbz	r0, bdb2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xa4>
    bda4:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bda8:	2805      	cmp	r0, #5
    bdaa:	d008      	beq.n	bdbe <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xb0>
    bdac:	f44f 71be 	mov.w	r1, #380	; 0x17c
    bdb0:	e011      	b.n	bdd6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xc8>
    bdb2:	4620      	mov	r0, r4
    bdb4:	f000 f81f 	bl	bdf6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
    bdb8:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    bdbc:	e7e2      	b.n	bd84 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
    bdbe:	4620      	mov	r0, r4
    bdc0:	f000 f832 	bl	be28 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
    bdc4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    bdc8:	4621      	mov	r1, r4
    bdca:	f000 f80a 	bl	bde2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    bdce:	2800      	cmp	r0, #0
    bdd0:	d1d8      	bne.n	bd84 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
    bdd2:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    bdd6:	206a      	movs	r0, #106	; 0x6a
    bdd8:	f7fd fb82 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bddc:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    bde0:	e7d0      	b.n	bd84 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
    bde2:	f7fb b9e5 	b.w	71b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    bde6:	4602      	mov	r2, r0
    bde8:	7803      	ldrb	r3, [r0, #0]
    bdea:	6840      	ldr	r0, [r0, #4]
    bdec:	4408      	add	r0, r1
    bdee:	6050      	str	r0, [r2, #4]
    bdf0:	3862      	subs	r0, #98	; 0x62
    bdf2:	f7fc b9af 	b.w	8154 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    bdf6:	2201      	movs	r2, #1
    bdf8:	7002      	strb	r2, [r0, #0]
    bdfa:	2200      	movs	r2, #0
    bdfc:	72c2      	strb	r2, [r0, #11]
    bdfe:	790a      	ldrb	r2, [r1, #4]
    be00:	b172      	cbz	r2, be20 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x112>
    be02:	2200      	movs	r2, #0
    be04:	8102      	strh	r2, [r0, #8]
    be06:	794a      	ldrb	r2, [r1, #5]
    be08:	b162      	cbz	r2, be24 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x116>
    be0a:	2203      	movs	r2, #3
    be0c:	7282      	strb	r2, [r0, #10]
    be0e:	688a      	ldr	r2, [r1, #8]
    be10:	3273      	adds	r2, #115	; 0x73
    be12:	6042      	str	r2, [r0, #4]
    be14:	68c9      	ldr	r1, [r1, #12]
    be16:	6101      	str	r1, [r0, #16]
    be18:	2103      	movs	r1, #3
    be1a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    be1e:	4770      	bx	lr
    be20:	222b      	movs	r2, #43	; 0x2b
    be22:	e7ef      	b.n	be04 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xf6>
    be24:	2202      	movs	r2, #2
    be26:	e7f1      	b.n	be0c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xfe>
    be28:	b510      	push	{r4, lr}
    be2a:	2200      	movs	r2, #0
    be2c:	7002      	strb	r2, [r0, #0]
    be2e:	72c2      	strb	r2, [r0, #11]
    be30:	790a      	ldrb	r2, [r1, #4]
    be32:	b1a2      	cbz	r2, be5e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x150>
    be34:	2200      	movs	r2, #0
    be36:	8102      	strh	r2, [r0, #8]
    be38:	794a      	ldrb	r2, [r1, #5]
    be3a:	b192      	cbz	r2, be62 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x154>
    be3c:	2203      	movs	r2, #3
    be3e:	7282      	strb	r2, [r0, #10]
    be40:	68ca      	ldr	r2, [r1, #12]
    be42:	3273      	adds	r2, #115	; 0x73
    be44:	6042      	str	r2, [r0, #4]
    be46:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    be4a:	6889      	ldr	r1, [r1, #8]
    be4c:	17cb      	asrs	r3, r1, #31
    be4e:	1861      	adds	r1, r4, r1
    be50:	415a      	adcs	r2, r3
    be52:	e9c0 1204 	strd	r1, r2, [r0, #16]
    be56:	2104      	movs	r1, #4
    be58:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    be5c:	bd10      	pop	{r4, pc}
    be5e:	222b      	movs	r2, #43	; 0x2b
    be60:	e7e9      	b.n	be36 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x128>
    be62:	2202      	movs	r2, #2
    be64:	e7eb      	b.n	be3e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x130>
    be66:	b570      	push	{r4, r5, r6, lr}
    be68:	4605      	mov	r5, r0
    be6a:	460c      	mov	r4, r1
    be6c:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    be70:	f7fb ff36 	bl	7ce0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    be74:	b178      	cbz	r0, be96 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x188>
    be76:	4620      	mov	r0, r4
    be78:	f000 f810 	bl	be9c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
    be7c:	6a22      	ldr	r2, [r4, #32]
    be7e:	2109      	movs	r1, #9
    be80:	4628      	mov	r0, r5
    be82:	4790      	blx	r2
    be84:	2800      	cmp	r0, #0
    be86:	d008      	beq.n	be9a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
    be88:	7800      	ldrb	r0, [r0, #0]
    be8a:	2800      	cmp	r0, #0
    be8c:	d005      	beq.n	be9a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
    be8e:	21dc      	movs	r1, #220	; 0xdc
    be90:	206a      	movs	r0, #106	; 0x6a
    be92:	f7fd fb25 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be96:	21d8      	movs	r1, #216	; 0xd8
    be98:	e7fa      	b.n	be90 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x182>
    be9a:	bd70      	pop	{r4, r5, r6, pc}
    be9c:	2100      	movs	r1, #0
    be9e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    bea2:	f800 1f24 	strb.w	r1, [r0, #36]!
    bea6:	7041      	strb	r1, [r0, #1]
    bea8:	4770      	bx	lr

0000beaa <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    beaa:	b570      	push	{r4, r5, r6, lr}
    beac:	f7fa f806 	bl	5ebc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    beb0:	4605      	mov	r5, r0
    beb2:	2400      	movs	r4, #0
    beb4:	e006      	b.n	bec4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    beb6:	4620      	mov	r0, r4
    beb8:	f7fa f806 	bl	5ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bebc:	f7ff ffee 	bl	be9c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
    bec0:	1c64      	adds	r4, r4, #1
    bec2:	b2e4      	uxtb	r4, r4
    bec4:	42ac      	cmp	r4, r5
    bec6:	d3f6      	bcc.n	beb6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    bec8:	bd70      	pop	{r4, r5, r6, pc}

0000beca <mpsl_timeslot_request>:
    beca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bece:	460d      	mov	r5, r1
    bed0:	f7f9 fffa 	bl	5ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bed4:	0004      	movs	r4, r0
    bed6:	d008      	beq.n	beea <mpsl_timeslot_request+0x20>
    bed8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bedc:	f06f 0622 	mvn.w	r6, #34	; 0x22
    bee0:	2801      	cmp	r0, #1
    bee2:	d006      	beq.n	bef2 <mpsl_timeslot_request+0x28>
    bee4:	2802      	cmp	r0, #2
    bee6:	d111      	bne.n	bf0c <mpsl_timeslot_request+0x42>
    bee8:	e003      	b.n	bef2 <mpsl_timeslot_request+0x28>
    beea:	f06f 0001 	mvn.w	r0, #1
    beee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bef2:	f06f 0715 	mvn.w	r7, #21
    bef6:	b15d      	cbz	r5, bf10 <mpsl_timeslot_request+0x46>
    bef8:	4628      	mov	r0, r5
    befa:	f7f9 ff55 	bl	5da8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
    befe:	b138      	cbz	r0, bf10 <mpsl_timeslot_request+0x46>
    bf00:	7828      	ldrb	r0, [r5, #0]
    bf02:	b138      	cbz	r0, bf14 <mpsl_timeslot_request+0x4a>
    bf04:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    bf08:	2802      	cmp	r0, #2
    bf0a:	d008      	beq.n	bf1e <mpsl_timeslot_request+0x54>
    bf0c:	4630      	mov	r0, r6
    bf0e:	e7ee      	b.n	beee <mpsl_timeslot_request+0x24>
    bf10:	4638      	mov	r0, r7
    bf12:	e7ec      	b.n	beee <mpsl_timeslot_request+0x24>
    bf14:	4629      	mov	r1, r5
    bf16:	4620      	mov	r0, r4
    bf18:	f7ff ff6d 	bl	bdf6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
    bf1c:	e003      	b.n	bf26 <mpsl_timeslot_request+0x5c>
    bf1e:	4629      	mov	r1, r5
    bf20:	4620      	mov	r0, r4
    bf22:	f7ff ff81 	bl	be28 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
    bf26:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    bf2a:	4621      	mov	r1, r4
    bf2c:	f7ff ff59 	bl	bde2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    bf30:	b108      	cbz	r0, bf36 <mpsl_timeslot_request+0x6c>
    bf32:	2000      	movs	r0, #0
    bf34:	e7db      	b.n	beee <mpsl_timeslot_request+0x24>
    bf36:	f240 21b1 	movw	r1, #689	; 0x2b1
    bf3a:	206a      	movs	r0, #106	; 0x6a
    bf3c:	f7fd fad0 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000bf40 <mpsl_timeslot_session_close>:
    bf40:	b510      	push	{r4, lr}
    bf42:	4604      	mov	r4, r0
    bf44:	f7f9 ffc0 	bl	5ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bf48:	0001      	movs	r1, r0
    bf4a:	d005      	beq.n	bf58 <mpsl_timeslot_session_close+0x18>
    bf4c:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    bf50:	f06f 0222 	mvn.w	r2, #34	; 0x22
    bf54:	b978      	cbnz	r0, bf76 <mpsl_timeslot_session_close+0x36>
    bf56:	e002      	b.n	bf5e <mpsl_timeslot_session_close+0x1e>
    bf58:	f06f 0001 	mvn.w	r0, #1
    bf5c:	bd10      	pop	{r4, pc}
    bf5e:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    bf62:	b140      	cbz	r0, bf76 <mpsl_timeslot_session_close+0x36>
    bf64:	2802      	cmp	r0, #2
    bf66:	d008      	beq.n	bf7a <mpsl_timeslot_session_close+0x3a>
    bf68:	2801      	cmp	r0, #1
    bf6a:	d006      	beq.n	bf7a <mpsl_timeslot_session_close+0x3a>
    bf6c:	2001      	movs	r0, #1
    bf6e:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    bf72:	2000      	movs	r0, #0
    bf74:	bd10      	pop	{r4, pc}
    bf76:	4610      	mov	r0, r2
    bf78:	bd10      	pop	{r4, pc}
    bf7a:	4620      	mov	r0, r4
    bf7c:	f7ff ff73 	bl	be66 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    bf80:	e7f7      	b.n	bf72 <mpsl_timeslot_session_close+0x32>

0000bf82 <mpsl_timeslot_session_count_set>:
    bf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf86:	460e      	mov	r6, r1
    bf88:	4607      	mov	r7, r0
    bf8a:	f7f9 ff97 	bl	5ebc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bf8e:	4605      	mov	r5, r0
    bf90:	2400      	movs	r4, #0
    bf92:	e00b      	b.n	bfac <mpsl_timeslot_session_count_set+0x2a>
    bf94:	4620      	mov	r0, r4
    bf96:	f7f9 ff97 	bl	5ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bf9a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    bf9e:	b118      	cbz	r0, bfa8 <mpsl_timeslot_session_count_set+0x26>
    bfa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfa8:	1c64      	adds	r4, r4, #1
    bfaa:	b2e4      	uxtb	r4, r4
    bfac:	42ac      	cmp	r4, r5
    bfae:	d3f1      	bcc.n	bf94 <mpsl_timeslot_session_count_set+0x12>
    bfb0:	2e08      	cmp	r6, #8
    bfb2:	d902      	bls.n	bfba <mpsl_timeslot_session_count_set+0x38>
    bfb4:	f06f 0015 	mvn.w	r0, #21
    bfb8:	e7f4      	b.n	bfa4 <mpsl_timeslot_session_count_set+0x22>
    bfba:	b117      	cbz	r7, bfc2 <mpsl_timeslot_session_count_set+0x40>
    bfbc:	4631      	mov	r1, r6
    bfbe:	4638      	mov	r0, r7
    bfc0:	e001      	b.n	bfc6 <mpsl_timeslot_session_count_set+0x44>
    bfc2:	2100      	movs	r1, #0
    bfc4:	4608      	mov	r0, r1
    bfc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bfca:	f7f9 bf63 	b.w	5e94 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000bfce <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    bfce:	f7fc bb3b 	b.w	8648 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000bfd2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    bfd2:	b510      	push	{r4, lr}
    bfd4:	2000      	movs	r0, #0
    bfd6:	f7fc fe93 	bl	8d00 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    bfda:	6800      	ldr	r0, [r0, #0]
    bfdc:	2800      	cmp	r0, #0
    bfde:	bf18      	it	ne
    bfe0:	2001      	movne	r0, #1
    bfe2:	bd10      	pop	{r4, pc}

0000bfe4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    bfe4:	b510      	push	{r4, lr}
    bfe6:	f7fc ff03 	bl	8df0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    bfea:	f7fc f9e7 	bl	83bc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    bfee:	f000 f804 	bl	bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    bff2:	b280      	uxth	r0, r0
    bff4:	bd10      	pop	{r4, pc}

0000bff6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    bff6:	f7fc be5d 	b.w	8cb4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

0000bffa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    bffa:	0a41      	lsrs	r1, r0, #9
    bffc:	f643 5209 	movw	r2, #15625	; 0x3d09
    c000:	4351      	muls	r1, r2
    c002:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c006:	fb10 f002 	smulbb	r0, r0, r2
    c00a:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c00e:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c012:	4770      	bx	lr
    c014:	2800      	cmp	r0, #0
    c016:	db09      	blt.n	c02c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    c018:	f000 021f 	and.w	r2, r0, #31
    c01c:	2101      	movs	r1, #1
    c01e:	4091      	lsls	r1, r2
    c020:	0940      	lsrs	r0, r0, #5
    c022:	0080      	lsls	r0, r0, #2
    c024:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c028:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c02c:	4770      	bx	lr
    c02e:	2800      	cmp	r0, #0
    c030:	db0d      	blt.n	c04e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    c032:	f000 021f 	and.w	r2, r0, #31
    c036:	2101      	movs	r1, #1
    c038:	4091      	lsls	r1, r2
    c03a:	0940      	lsrs	r0, r0, #5
    c03c:	0080      	lsls	r0, r0, #2
    c03e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c042:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c046:	f3bf 8f4f 	dsb	sy
    c04a:	f3bf 8f6f 	isb	sy
    c04e:	4770      	bx	lr
    c050:	5840      	ldr	r0, [r0, r1]
    c052:	2800      	cmp	r0, #0
    c054:	d000      	beq.n	c058 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
    c056:	2001      	movs	r0, #1
    c058:	4770      	bx	lr
    c05a:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c05e:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c062:	f002 0201 	and.w	r2, r2, #1
    c066:	03c0      	lsls	r0, r0, #15
    c068:	d503      	bpl.n	c072 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    c06a:	428a      	cmp	r2, r1
    c06c:	d101      	bne.n	c072 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    c06e:	2001      	movs	r0, #1
    c070:	4770      	bx	lr
    c072:	2000      	movs	r0, #0
    c074:	4770      	bx	lr

0000c076 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c076:	b510      	push	{r4, lr}
    c078:	2101      	movs	r1, #1
    c07a:	0788      	lsls	r0, r1, #30
    c07c:	f7fd f9da 	bl	9434 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c080:	2800      	cmp	r0, #0
    c082:	d000      	beq.n	c086 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c084:	2001      	movs	r0, #1
    c086:	bd10      	pop	{r4, pc}

0000c088 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c088:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c08c:	2101      	movs	r1, #1
    c08e:	6001      	str	r1, [r0, #0]
    c090:	4770      	bx	lr

0000c092 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c092:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c096:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c09a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c09e:	f002 0203 	and.w	r2, r2, #3
    c0a2:	03c9      	lsls	r1, r1, #15
    c0a4:	d503      	bpl.n	c0ae <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c0a6:	4282      	cmp	r2, r0
    c0a8:	d101      	bne.n	c0ae <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c0aa:	2001      	movs	r0, #1
    c0ac:	4770      	bx	lr
    c0ae:	2000      	movs	r0, #0
    c0b0:	4770      	bx	lr

0000c0b2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c0b2:	b510      	push	{r4, lr}
    c0b4:	2100      	movs	r1, #0
    c0b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c0ba:	f7fd f9bb 	bl	9434 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c0be:	2800      	cmp	r0, #0
    c0c0:	d000      	beq.n	c0c4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c0c2:	2001      	movs	r0, #1
    c0c4:	bd10      	pop	{r4, pc}
    c0c6:	2800      	cmp	r0, #0
    c0c8:	db09      	blt.n	c0de <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c0ca:	f000 021f 	and.w	r2, r0, #31
    c0ce:	2101      	movs	r1, #1
    c0d0:	4091      	lsls	r1, r2
    c0d2:	0940      	lsrs	r0, r0, #5
    c0d4:	0080      	lsls	r0, r0, #2
    c0d6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c0da:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c0de:	4770      	bx	lr
    c0e0:	2800      	cmp	r0, #0
    c0e2:	db0d      	blt.n	c100 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c0e4:	f000 021f 	and.w	r2, r0, #31
    c0e8:	2101      	movs	r1, #1
    c0ea:	4091      	lsls	r1, r2
    c0ec:	0940      	lsrs	r0, r0, #5
    c0ee:	0080      	lsls	r0, r0, #2
    c0f0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c0f4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c0f8:	f3bf 8f4f 	dsb	sy
    c0fc:	f3bf 8f6f 	isb	sy
    c100:	4770      	bx	lr
    c102:	1000      	.short	0x1000
    c104:	00fa0002 	.word	0x00fa0002
    c108:	e8ff0000 	.word	0xe8ff0000
    c10c:	95775fae 	.word	0x95775fae
    c110:	6227c87c 	.word	0x6227c87c
    c114:	eae61814 	.word	0xeae61814
    c118:	3992c65d 	.word	0x3992c65d
    c11c:	3a72      	.short	0x3a72
    c11e:	2800      	cmp	r0, #0
    c120:	db09      	blt.n	c136 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c122:	f000 021f 	and.w	r2, r0, #31
    c126:	2101      	movs	r1, #1
    c128:	4091      	lsls	r1, r2
    c12a:	0940      	lsrs	r0, r0, #5
    c12c:	0080      	lsls	r0, r0, #2
    c12e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c132:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c136:	4770      	bx	lr

0000c138 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c138:	f3ef 8110 	mrs	r1, PRIMASK
    c13c:	b672      	cpsid	i
    c13e:	7802      	ldrb	r2, [r0, #0]
    c140:	2a01      	cmp	r2, #1
    c142:	d001      	beq.n	c148 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c144:	2201      	movs	r2, #1
    c146:	e000      	b.n	c14a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c148:	2200      	movs	r2, #0
    c14a:	2301      	movs	r3, #1
    c14c:	7003      	strb	r3, [r0, #0]
    c14e:	b901      	cbnz	r1, c152 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c150:	b662      	cpsie	i
    c152:	b10a      	cbz	r2, c158 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c154:	2000      	movs	r0, #0
    c156:	4770      	bx	lr
    c158:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c15c:	4770      	bx	lr

0000c15e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c15e:	2100      	movs	r1, #0
    c160:	7001      	strb	r1, [r0, #0]
    c162:	4608      	mov	r0, r1
    c164:	4770      	bx	lr

0000c166 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c166:	f3ef 8110 	mrs	r1, PRIMASK
    c16a:	b672      	cpsid	i
    c16c:	2200      	movs	r2, #0
    c16e:	7002      	strb	r2, [r0, #0]
    c170:	b901      	cbnz	r1, c174 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c172:	b662      	cpsie	i
    c174:	2000      	movs	r0, #0
    c176:	4770      	bx	lr

0000c178 <mpsl_low_priority_process>:
    c178:	f7fd bab0 	b.w	96dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c17c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c17c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c180:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c184:	280f      	cmp	r0, #15
    c186:	d001      	beq.n	c18c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c188:	2000      	movs	r0, #0
    c18a:	4770      	bx	lr
    c18c:	2001      	movs	r0, #1
    c18e:	4770      	bx	lr

0000c190 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c190:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c194:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c198:	280a      	cmp	r0, #10
    c19a:	d001      	beq.n	c1a0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c19c:	2000      	movs	r0, #0
    c19e:	4770      	bx	lr
    c1a0:	2001      	movs	r0, #1
    c1a2:	4770      	bx	lr

0000c1a4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c1a4:	b500      	push	{lr}
    c1a6:	f7ff fff3 	bl	c190 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c1aa:	b120      	cbz	r0, c1b6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c1ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c1b0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c1b4:	b108      	cbz	r0, c1ba <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c1b6:	2000      	movs	r0, #0
    c1b8:	bd00      	pop	{pc}
    c1ba:	2001      	movs	r0, #1
    c1bc:	bd00      	pop	{pc}

0000c1be <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c1be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c1c2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c1c6:	280e      	cmp	r0, #14
    c1c8:	d001      	beq.n	c1ce <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c1ca:	2000      	movs	r0, #0
    c1cc:	4770      	bx	lr
    c1ce:	2001      	movs	r0, #1
    c1d0:	4770      	bx	lr

0000c1d2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c1d2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c1d6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c1da:	2810      	cmp	r0, #16
    c1dc:	d001      	beq.n	c1e2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c1de:	2000      	movs	r0, #0
    c1e0:	4770      	bx	lr
    c1e2:	2001      	movs	r0, #1
    c1e4:	4770      	bx	lr

0000c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c1e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c1ea:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c1ee:	2806      	cmp	r0, #6
    c1f0:	d003      	beq.n	c1fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c1f2:	1c40      	adds	r0, r0, #1
    c1f4:	d001      	beq.n	c1fa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c1f6:	2000      	movs	r0, #0
    c1f8:	4770      	bx	lr
    c1fa:	2001      	movs	r0, #1
    c1fc:	4770      	bx	lr

0000c1fe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c1fe:	b500      	push	{lr}
    c200:	f7ff fff1 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c204:	b148      	cbz	r0, c21a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c206:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c20a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c20e:	2806      	cmp	r0, #6
    c210:	d303      	bcc.n	c21a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c212:	1c40      	adds	r0, r0, #1
    c214:	d001      	beq.n	c21a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c216:	2001      	movs	r0, #1
    c218:	bd00      	pop	{pc}
    c21a:	2000      	movs	r0, #0
    c21c:	bd00      	pop	{pc}

0000c21e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c21e:	b500      	push	{lr}
    c220:	f7ff ffe1 	bl	c1e6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c224:	b138      	cbz	r0, c236 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c226:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c22a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c22e:	2806      	cmp	r0, #6
    c230:	d303      	bcc.n	c23a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c232:	1c40      	adds	r0, r0, #1
    c234:	d001      	beq.n	c23a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c236:	2000      	movs	r0, #0
    c238:	bd00      	pop	{pc}
    c23a:	2001      	movs	r0, #1
    c23c:	bd00      	pop	{pc}

0000c23e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c23e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c242:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c246:	280d      	cmp	r0, #13
    c248:	d001      	beq.n	c24e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c24a:	2000      	movs	r0, #0
    c24c:	4770      	bx	lr
    c24e:	2001      	movs	r0, #1
    c250:	4770      	bx	lr

0000c252 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c252:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c256:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c25a:	2808      	cmp	r0, #8
    c25c:	d001      	beq.n	c262 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c25e:	2000      	movs	r0, #0
    c260:	4770      	bx	lr
    c262:	2001      	movs	r0, #1
    c264:	4770      	bx	lr

0000c266 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    c266:	f7fd ba73 	b.w	9750 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000c26a <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
    c26a:	f7fd ba71 	b.w	9750 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000c26e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
    c26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c272:	428a      	cmp	r2, r1
    c274:	d803      	bhi.n	c27e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
    c276:	2179      	movs	r1, #121	; 0x79
    c278:	2096      	movs	r0, #150	; 0x96
    c27a:	f7fd f931 	bl	94e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c27e:	fab2 f382 	clz	r3, r2
    c282:	b143      	cbz	r3, c296 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
    c284:	4099      	lsls	r1, r3
    c286:	f1c3 0c20 	rsb	ip, r3, #32
    c28a:	fa20 fc0c 	lsr.w	ip, r0, ip
    c28e:	4098      	lsls	r0, r3
    c290:	ea41 010c 	orr.w	r1, r1, ip
    c294:	409a      	lsls	r2, r3
    c296:	0c13      	lsrs	r3, r2, #16
    c298:	fbb1 f5f3 	udiv	r5, r1, r3
    c29c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    c2a0:	b287      	uxth	r7, r0
    c2a2:	fbb1 f0f3 	udiv	r0, r1, r3
    c2a6:	fb03 1615 	mls	r6, r3, r5, r1
    c2aa:	b294      	uxth	r4, r2
    c2ac:	fb00 f504 	mul.w	r5, r0, r4
    c2b0:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
    c2b4:	42b5      	cmp	r5, r6
    c2b6:	d905      	bls.n	c2c4 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
    c2b8:	1bad      	subs	r5, r5, r6
    c2ba:	4295      	cmp	r5, r2
    c2bc:	bf94      	ite	ls
    c2be:	2501      	movls	r5, #1
    c2c0:	2502      	movhi	r5, #2
    c2c2:	1b40      	subs	r0, r0, r5
    c2c4:	0409      	lsls	r1, r1, #16
    c2c6:	0405      	lsls	r5, r0, #16
    c2c8:	eb11 010c 	adds.w	r1, r1, ip
    c2cc:	fba0 0c02 	umull	r0, ip, r0, r2
    c2d0:	1a09      	subs	r1, r1, r0
    c2d2:	fbb1 f0f3 	udiv	r0, r1, r3
    c2d6:	fbb1 fcf3 	udiv	ip, r1, r3
    c2da:	fb03 131c 	mls	r3, r3, ip, r1
    c2de:	fb00 f104 	mul.w	r1, r0, r4
    c2e2:	eb07 4303 	add.w	r3, r7, r3, lsl #16
    c2e6:	4299      	cmp	r1, r3
    c2e8:	d905      	bls.n	c2f6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
    c2ea:	1ac9      	subs	r1, r1, r3
    c2ec:	4291      	cmp	r1, r2
    c2ee:	bf94      	ite	ls
    c2f0:	2101      	movls	r1, #1
    c2f2:	2102      	movhi	r1, #2
    c2f4:	1a40      	subs	r0, r0, r1
    c2f6:	4328      	orrs	r0, r5
    c2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c2fc <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
    c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c300:	461e      	mov	r6, r3
    c302:	4615      	mov	r5, r2
    c304:	4604      	mov	r4, r0
    c306:	9f06      	ldr	r7, [sp, #24]
    c308:	f7ff ffb1 	bl	c26e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c30c:	6030      	str	r0, [r6, #0]
    c30e:	fba0 0105 	umull	r0, r1, r0, r5
    c312:	1a20      	subs	r0, r4, r0
    c314:	6038      	str	r0, [r7, #0]
    c316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c31a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c31a:	b4f0      	push	{r4, r5, r6, r7}
    c31c:	ea80 0c01 	eor.w	ip, r0, r1
    c320:	4603      	mov	r3, r0
    c322:	f01c 0f03 	tst.w	ip, #3
    c326:	d13c      	bne.n	c3a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c328:	f013 0f03 	tst.w	r3, #3
    c32c:	d00b      	beq.n	c346 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c32e:	2a00      	cmp	r2, #0
    c330:	bf04      	itt	eq
    c332:	bcf0      	popeq	{r4, r5, r6, r7}
    c334:	4770      	bxeq	lr
    c336:	f811 cb01 	ldrb.w	ip, [r1], #1
    c33a:	f803 cb01 	strb.w	ip, [r3], #1
    c33e:	1e52      	subs	r2, r2, #1
    c340:	f013 0f03 	tst.w	r3, #3
    c344:	d1f3      	bne.n	c32e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c346:	2a03      	cmp	r2, #3
    c348:	d94f      	bls.n	c3ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c34a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c34e:	d24c      	bcs.n	c3ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c350:	f1c2 0c00 	rsb	ip, r2, #0
    c354:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c358:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c35c:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c360:	f1cc 0c00 	rsb	ip, ip, #0
    c364:	f1bc 0f00 	cmp.w	ip, #0
    c368:	dd1b      	ble.n	c3a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c36a:	1f0d      	subs	r5, r1, #4
    c36c:	1f1c      	subs	r4, r3, #4
    c36e:	f01c 0f01 	tst.w	ip, #1
    c372:	d003      	beq.n	c37c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c374:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c378:	f844 6f04 	str.w	r6, [r4, #4]!
    c37c:	ea5f 066c 	movs.w	r6, ip, asr #1
    c380:	d007      	beq.n	c392 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c382:	686f      	ldr	r7, [r5, #4]
    c384:	6067      	str	r7, [r4, #4]
    c386:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c38a:	f844 7f08 	str.w	r7, [r4, #8]!
    c38e:	1e76      	subs	r6, r6, #1
    c390:	d1f7      	bne.n	c382 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c392:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c396:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c39a:	f1cc 0c00 	rsb	ip, ip, #0
    c39e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c3a2:	2a00      	cmp	r2, #0
    c3a4:	bf04      	itt	eq
    c3a6:	bcf0      	popeq	{r4, r5, r6, r7}
    c3a8:	4770      	bxeq	lr
    c3aa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c3ae:	d226      	bcs.n	c3fe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c3b0:	2a00      	cmp	r2, #0
    c3b2:	bfdc      	itt	le
    c3b4:	bcf0      	pople	{r4, r5, r6, r7}
    c3b6:	4770      	bxle	lr
    c3b8:	1e49      	subs	r1, r1, #1
    c3ba:	1e5b      	subs	r3, r3, #1
    c3bc:	f012 0f01 	tst.w	r2, #1
    c3c0:	d003      	beq.n	c3ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c3c2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c3c6:	f803 cf01 	strb.w	ip, [r3, #1]!
    c3ca:	1052      	asrs	r2, r2, #1
    c3cc:	bf04      	itt	eq
    c3ce:	bcf0      	popeq	{r4, r5, r6, r7}
    c3d0:	4770      	bxeq	lr
    c3d2:	f891 c001 	ldrb.w	ip, [r1, #1]
    c3d6:	f883 c001 	strb.w	ip, [r3, #1]
    c3da:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c3de:	f803 cf02 	strb.w	ip, [r3, #2]!
    c3e2:	1e52      	subs	r2, r2, #1
    c3e4:	d1f5      	bne.n	c3d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c3e6:	bcf0      	pop	{r4, r5, r6, r7}
    c3e8:	4770      	bx	lr
    c3ea:	2a04      	cmp	r2, #4
    c3ec:	d3d9      	bcc.n	c3a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c3ee:	f851 cb04 	ldr.w	ip, [r1], #4
    c3f2:	1f12      	subs	r2, r2, #4
    c3f4:	f843 cb04 	str.w	ip, [r3], #4
    c3f8:	2a04      	cmp	r2, #4
    c3fa:	d2f8      	bcs.n	c3ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c3fc:	e7d1      	b.n	c3a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c3fe:	f811 cb01 	ldrb.w	ip, [r1], #1
    c402:	f803 cb01 	strb.w	ip, [r3], #1
    c406:	1e52      	subs	r2, r2, #1
    c408:	d1f9      	bne.n	c3fe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c40a:	bcf0      	pop	{r4, r5, r6, r7}
    c40c:	4770      	bx	lr

0000c40e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c40e:	b470      	push	{r4, r5, r6}
    c410:	4603      	mov	r3, r0
    c412:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c416:	f010 0f03 	tst.w	r0, #3
    c41a:	d009      	beq.n	c430 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c41c:	2a00      	cmp	r2, #0
    c41e:	bf04      	itt	eq
    c420:	bc70      	popeq	{r4, r5, r6}
    c422:	4770      	bxeq	lr
    c424:	f803 cb01 	strb.w	ip, [r3], #1
    c428:	1e52      	subs	r2, r2, #1
    c42a:	f013 0f03 	tst.w	r3, #3
    c42e:	d1f5      	bne.n	c41c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c430:	b2c9      	uxtb	r1, r1
    c432:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c436:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c43a:	2a03      	cmp	r2, #3
    c43c:	d939      	bls.n	c4b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c43e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c442:	d236      	bcs.n	c4b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c444:	4251      	negs	r1, r2
    c446:	17cc      	asrs	r4, r1, #31
    c448:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c44c:	1089      	asrs	r1, r1, #2
    c44e:	424e      	negs	r6, r1
    c450:	2e00      	cmp	r6, #0
    c452:	dd11      	ble.n	c478 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c454:	1f19      	subs	r1, r3, #4
    c456:	f016 0f01 	tst.w	r6, #1
    c45a:	bf18      	it	ne
    c45c:	f841 5f04 	strne.w	r5, [r1, #4]!
    c460:	1074      	asrs	r4, r6, #1
    c462:	d004      	beq.n	c46e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c464:	604d      	str	r5, [r1, #4]
    c466:	f841 5f08 	str.w	r5, [r1, #8]!
    c46a:	1e64      	subs	r4, r4, #1
    c46c:	d1fa      	bne.n	c464 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c46e:	4271      	negs	r1, r6
    c470:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c474:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c478:	2a00      	cmp	r2, #0
    c47a:	bf04      	itt	eq
    c47c:	bc70      	popeq	{r4, r5, r6}
    c47e:	4770      	bxeq	lr
    c480:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c484:	d21d      	bcs.n	c4c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c486:	2a00      	cmp	r2, #0
    c488:	bfdc      	itt	le
    c48a:	bc70      	pople	{r4, r5, r6}
    c48c:	4770      	bxle	lr
    c48e:	1e59      	subs	r1, r3, #1
    c490:	f012 0f01 	tst.w	r2, #1
    c494:	bf18      	it	ne
    c496:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c49a:	1052      	asrs	r2, r2, #1
    c49c:	bf04      	itt	eq
    c49e:	bc70      	popeq	{r4, r5, r6}
    c4a0:	4770      	bxeq	lr
    c4a2:	f881 c001 	strb.w	ip, [r1, #1]
    c4a6:	f801 cf02 	strb.w	ip, [r1, #2]!
    c4aa:	1e52      	subs	r2, r2, #1
    c4ac:	d1f9      	bne.n	c4a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c4ae:	bc70      	pop	{r4, r5, r6}
    c4b0:	4770      	bx	lr
    c4b2:	2a04      	cmp	r2, #4
    c4b4:	d3e0      	bcc.n	c478 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c4b6:	1f12      	subs	r2, r2, #4
    c4b8:	f843 5b04 	str.w	r5, [r3], #4
    c4bc:	2a04      	cmp	r2, #4
    c4be:	d2fa      	bcs.n	c4b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c4c0:	e7da      	b.n	c478 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c4c2:	f803 cb01 	strb.w	ip, [r3], #1
    c4c6:	1e52      	subs	r2, r2, #1
    c4c8:	d1fb      	bne.n	c4c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c4ca:	bc70      	pop	{r4, r5, r6}
    c4cc:	4770      	bx	lr
    c4ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c4d2:	4770      	bx	lr
    c4d4:	2000      	movs	r0, #0
    c4d6:	4770      	bx	lr
    c4d8:	2000      	movs	r0, #0
    c4da:	4770      	bx	lr
    c4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c4e0:	4770      	bx	lr
    c4e2:	4770      	bx	lr
    c4e4:	4770      	bx	lr
    c4e6:	2000      	movs	r0, #0
    c4e8:	4770      	bx	lr
    c4ea:	2100      	movs	r1, #0
    c4ec:	7001      	strb	r1, [r0, #0]
    c4ee:	4770      	bx	lr
    c4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c4f4:	4770      	bx	lr
    c4f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c4fa:	4770      	bx	lr
    c4fc:	2100      	movs	r1, #0
    c4fe:	7001      	strb	r1, [r0, #0]
    c500:	4770      	bx	lr
    c502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c506:	4770      	bx	lr
    c508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c50c:	4770      	bx	lr
    c50e:	7800      	ldrb	r0, [r0, #0]
    c510:	2800      	cmp	r0, #0
    c512:	d001      	beq.n	c518 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    c514:	f06f 0015 	mvn.w	r0, #21
    c518:	4770      	bx	lr
    c51a:	2000      	movs	r0, #0
    c51c:	4770      	bx	lr
    c51e:	2200      	movs	r2, #0
    c520:	f000 b802 	b.w	c528 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000c524 <mpsl_fem_init>:
    c524:	f7f9 ba9e 	b.w	5a64 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000c528 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    c528:	b570      	push	{r4, r5, r6, lr}
    c52a:	4614      	mov	r4, r2
    c52c:	460d      	mov	r5, r1
    c52e:	1b00      	subs	r0, r0, r4
    c530:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    c534:	4288      	cmp	r0, r1
    c536:	da01      	bge.n	c53c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    c538:	4608      	mov	r0, r1
    c53a:	e002      	b.n	c542 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c53c:	287f      	cmp	r0, #127	; 0x7f
    c53e:	dd00      	ble.n	c542 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c540:	207f      	movs	r0, #127	; 0x7f
    c542:	4619      	mov	r1, r3
    c544:	b240      	sxtb	r0, r0
    c546:	f7f9 fac1 	bl	5acc <mpsl_tx_power_radio_supported_power_adjust>
    c54a:	7028      	strb	r0, [r5, #0]
    c54c:	706c      	strb	r4, [r5, #1]
    c54e:	2100      	movs	r1, #0
    c550:	4420      	add	r0, r4
    c552:	70a9      	strb	r1, [r5, #2]
    c554:	b240      	sxtb	r0, r0
    c556:	bd70      	pop	{r4, r5, r6, pc}
    c558:	f4f0ecd8 	.word	0xf4f0ecd8
    c55c:	0200fcf8 	.word	0x0200fcf8
    c560:	06050403 	.word	0x06050403
    c564:	00000807 	.word	0x00000807
	...
    c578:	01010000 	.word	0x01010000
    c57c:	02020101 	.word	0x02020101
    c580:	03030202 	.word	0x03030202
    c584:	04040303 	.word	0x04040303
    c588:	05050404 	.word	0x05050404
    c58c:	06060505 	.word	0x06060505
    c590:	0a090807 	.word	0x0a090807
    c594:	000d0c0b 	.word	0x000d0c0b
	...
    c5a8:	01000000 	.word	0x01000000
    c5ac:	02010101 	.word	0x02010101
    c5b0:	03020202 	.word	0x03020202
    c5b4:	04030303 	.word	0x04030303
    c5b8:	05040404 	.word	0x05040404
    c5bc:	06050505 	.word	0x06050505
    c5c0:	09080606 	.word	0x09080606
    c5c4:	00000000 	.word	0x00000000

0000c5c8 <adc_sample_thd>:
		oled_show_buffer();
		k_msleep(10);
	}
}

void adc_sample_thd(void) {
    c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5cc:	ed2d 8b04 	vpush	{d8-d9}
    c5d0:	b088      	sub	sp, #32
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c5d2:	48a9      	ldr	r0, [pc, #676]	; (c878 <adc_sample_thd+0x2b0>)
    c5d4:	f00c fd00 	bl	18fd8 <z_impl_device_get_binding>
    c5d8:	4604      	mov	r4, r0
	const struct device *adc_dev = device_get_binding("ADC_0");
	struct adc_channel_cfg channel_cfg;

	channel_cfg.channel_id = 0;
    c5da:	f89d 301c 	ldrb.w	r3, [sp, #28]
    c5de:	f36f 0304 	bfc	r3, #0, #5
    c5e2:	f88d 301c 	strb.w	r3, [sp, #28]
	channel_cfg.gain = ADC_GAIN_1_4;
    c5e6:	2702      	movs	r7, #2
    c5e8:	f88d 7018 	strb.w	r7, [sp, #24]
	channel_cfg.reference = ADC_REF_VDD_1_4;
    c5ec:	f04f 0803 	mov.w	r8, #3
    c5f0:	f88d 8019 	strb.w	r8, [sp, #25]
	channel_cfg.acquisition_time = ADC_ACQ_TIME_DEFAULT;
    c5f4:	2500      	movs	r5, #0
    c5f6:	f8ad 501a 	strh.w	r5, [sp, #26]
	channel_cfg.input_positive = ADC_CH_JS;
    c5fa:	2601      	movs	r6, #1
    c5fc:	f88d 601d 	strb.w	r6, [sp, #29]
	channel_cfg.differential = 0;
    c600:	b2db      	uxtb	r3, r3
    c602:	f365 1345 	bfi	r3, r5, #5, #1
    c606:	f88d 301c 	strb.w	r3, [sp, #28]
	channel_cfg.input_negative = 0;
    c60a:	f88d 501e 	strb.w	r5, [sp, #30]
				const struct adc_channel_cfg *channel_cfg);

static inline int z_impl_adc_channel_setup(const struct device *dev,
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
    c60e:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    c610:	681b      	ldr	r3, [r3, #0]
    c612:	a906      	add	r1, sp, #24
    c614:	4798      	blx	r3

	adc_channel_setup(adc_dev, &channel_cfg);

	channel_cfg.channel_id = 1;
    c616:	f89d 301c 	ldrb.w	r3, [sp, #28]
    c61a:	f366 0304 	bfi	r3, r6, #0, #5
    c61e:	f88d 301c 	strb.w	r3, [sp, #28]
	channel_cfg.gain = ADC_GAIN_1_6;
    c622:	f88d 5018 	strb.w	r5, [sp, #24]
	channel_cfg.reference = ADC_REF_INTERNAL;
    c626:	2304      	movs	r3, #4
    c628:	f88d 3019 	strb.w	r3, [sp, #25]
	channel_cfg.acquisition_time = ADC_ACQ_TIME_DEFAULT;
    c62c:	f8ad 501a 	strh.w	r5, [sp, #26]
	channel_cfg.input_positive = ADC_CH_BATT;
    c630:	2309      	movs	r3, #9
    c632:	f88d 301d 	strb.w	r3, [sp, #29]
	channel_cfg.differential = 0;
    c636:	f89d 301c 	ldrb.w	r3, [sp, #28]
    c63a:	f365 1345 	bfi	r3, r5, #5, #1
    c63e:	f88d 301c 	strb.w	r3, [sp, #28]
	channel_cfg.input_negative = 0;
    c642:	f88d 501e 	strb.w	r5, [sp, #30]
	const struct adc_driver_api *api =
    c646:	68a3      	ldr	r3, [r4, #8]
	return api->channel_setup(dev, channel_cfg);
    c648:	681b      	ldr	r3, [r3, #0]
    c64a:	a906      	add	r1, sp, #24
    c64c:	4620      	mov	r0, r4
    c64e:	4798      	blx	r3
	adc_channel_setup(adc_dev, &channel_cfg);

	static int16_t sample;
	struct adc_sequence seq;

	seq.options = NULL;
    c650:	9501      	str	r5, [sp, #4]
	seq.resolution = 12;
    c652:	230c      	movs	r3, #12
    c654:	f88d 3014 	strb.w	r3, [sp, #20]
	seq.oversampling = 3;
    c658:	f88d 8015 	strb.w	r8, [sp, #21]
	seq.buffer = &sample;
    c65c:	4b87      	ldr	r3, [pc, #540]	; (c87c <adc_sample_thd+0x2b4>)
    c65e:	9303      	str	r3, [sp, #12]
	seq.buffer_size = sizeof(sample);
    c660:	9704      	str	r7, [sp, #16]
	seq.channels = 1 << 0;
    c662:	9602      	str	r6, [sp, #8]
    c664:	e058      	b.n	c718 <adc_sample_thd+0x150>
	for (;;) {
		NRF_WDT->RR[2] = WDT_RR_RR_Reload;

		if (going_to_sleep) {
			for(;;) {
				NRF_WDT->RR[2] = WDT_RR_RR_Reload;
    c666:	4b86      	ldr	r3, [pc, #536]	; (c880 <adc_sample_thd+0x2b8>)
    c668:	4a86      	ldr	r2, [pc, #536]	; (c884 <adc_sample_thd+0x2bc>)
    c66a:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
				k_msleep(10);
    c66e:	200a      	movs	r0, #10
    c670:	f012 fe1e 	bl	1f2b0 <k_msleep>
			for(;;) {
    c674:	e7f7      	b.n	c666 <adc_sample_thd+0x9e>
				v_js_fault_samples = 0;
//				v_js = v_nom;
				UTILS_LP_FAST(v_js, v_nom, 0.5);
				v_js_fault_now = false;
			} else {
				v_js_fault_samples++;
    c676:	4b84      	ldr	r3, [pc, #528]	; (c888 <adc_sample_thd+0x2c0>)
    c678:	681a      	ldr	r2, [r3, #0]
    c67a:	3201      	adds	r2, #1
    c67c:	601a      	str	r2, [r3, #0]

				// Restore JS to neutral after more than one second
				// of faulty samples.
				if (v_js_fault_samples > 200) {
    c67e:	681b      	ldr	r3, [r3, #0]
    c680:	2bc8      	cmp	r3, #200	; 0xc8
    c682:	dd06      	ble.n	c692 <adc_sample_thd+0xca>
					v_js = 0.5;
    c684:	4b81      	ldr	r3, [pc, #516]	; (c88c <adc_sample_thd+0x2c4>)
    c686:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c68a:	601a      	str	r2, [r3, #0]
					v_js_fault_now = true;
    c68c:	4b80      	ldr	r3, [pc, #512]	; (c890 <adc_sample_thd+0x2c8>)
    c68e:	2201      	movs	r2, #1
    c690:	701a      	strb	r2, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    c692:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c696:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    c69a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
				}
			}
		}
		JS_OFF();

		seq.channels = 1 << 1;
    c69e:	2302      	movs	r3, #2
    c6a0:	9302      	str	r3, [sp, #8]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
    c6a2:	68a3      	ldr	r3, [r4, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    c6a4:	685b      	ldr	r3, [r3, #4]
    c6a6:	a901      	add	r1, sp, #4
    c6a8:	4620      	mov	r0, r4
    c6aa:	4798      	blx	r3
		if (adc_read(adc_dev, &seq) == 0) {
    c6ac:	bb88      	cbnz	r0, c712 <adc_sample_thd+0x14a>
			UTILS_LP_FAST(v_batt, ((float)sample / 4095.0) * (0.6 * 6.0), 0.02);
    c6ae:	4d79      	ldr	r5, [pc, #484]	; (c894 <adc_sample_thd+0x2cc>)
    c6b0:	f8d5 8000 	ldr.w	r8, [r5]
    c6b4:	4b71      	ldr	r3, [pc, #452]	; (c87c <adc_sample_thd+0x2b4>)
    c6b6:	f9b3 0000 	ldrsh.w	r0, [r3]
    c6ba:	ee07 0a90 	vmov	s15, r0
    c6be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c6c2:	ee17 0a90 	vmov	r0, s15
    c6c6:	f7f4 fecf 	bl	1468 <__aeabi_f2d>
    c6ca:	a361      	add	r3, pc, #388	; (adr r3, c850 <adc_sample_thd+0x288>)
    c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6d0:	f7f5 f84c 	bl	176c <__aeabi_ddiv>
    c6d4:	a360      	add	r3, pc, #384	; (adr r3, c858 <adc_sample_thd+0x290>)
    c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6da:	f7f4 ff1d 	bl	1518 <__aeabi_dmul>
    c6de:	4606      	mov	r6, r0
    c6e0:	460f      	mov	r7, r1
    c6e2:	4640      	mov	r0, r8
    c6e4:	f7f4 fec0 	bl	1468 <__aeabi_f2d>
    c6e8:	4632      	mov	r2, r6
    c6ea:	463b      	mov	r3, r7
    c6ec:	f7f4 fd5c 	bl	11a8 <__aeabi_dsub>
    c6f0:	a35b      	add	r3, pc, #364	; (adr r3, c860 <adc_sample_thd+0x298>)
    c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6f6:	f7f4 ff0f 	bl	1518 <__aeabi_dmul>
    c6fa:	4606      	mov	r6, r0
    c6fc:	460f      	mov	r7, r1
    c6fe:	6828      	ldr	r0, [r5, #0]
    c700:	f7f4 feb2 	bl	1468 <__aeabi_f2d>
    c704:	4632      	mov	r2, r6
    c706:	463b      	mov	r3, r7
    c708:	f7f4 fd4e 	bl	11a8 <__aeabi_dsub>
    c70c:	f7f5 f9be 	bl	1a8c <__aeabi_d2f>
    c710:	6028      	str	r0, [r5, #0]
		}

		k_msleep(4);
    c712:	2004      	movs	r0, #4
    c714:	f012 fdcc 	bl	1f2b0 <k_msleep>
		NRF_WDT->RR[2] = WDT_RR_RR_Reload;
    c718:	4b59      	ldr	r3, [pc, #356]	; (c880 <adc_sample_thd+0x2b8>)
    c71a:	4a5a      	ldr	r2, [pc, #360]	; (c884 <adc_sample_thd+0x2bc>)
    c71c:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
		if (going_to_sleep) {
    c720:	4b5d      	ldr	r3, [pc, #372]	; (c898 <adc_sample_thd+0x2d0>)
    c722:	781b      	ldrb	r3, [r3, #0]
    c724:	2b00      	cmp	r3, #0
    c726:	d19e      	bne.n	c666 <adc_sample_thd+0x9e>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    c728:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    c72c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    c730:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		k_msleep(1);
    c734:	2001      	movs	r0, #1
    c736:	f012 fdbb 	bl	1f2b0 <k_msleep>
		seq.channels = 1 << 0;
    c73a:	2301      	movs	r3, #1
    c73c:	9302      	str	r3, [sp, #8]
	const struct adc_driver_api *api =
    c73e:	68a3      	ldr	r3, [r4, #8]
	return api->read(dev, sequence);
    c740:	685b      	ldr	r3, [r3, #4]
    c742:	a901      	add	r1, sp, #4
    c744:	4620      	mov	r0, r4
    c746:	4798      	blx	r3
    c748:	4680      	mov	r8, r0
    reg->PIN_CNF[pin_number] = cnf;
    c74a:	230c      	movs	r3, #12
    c74c:	f8c5 3708 	str.w	r3, [r5, #1800]	; 0x708
		float v_nom = (float)sample / 4095.0;
    c750:	4f4a      	ldr	r7, [pc, #296]	; (c87c <adc_sample_thd+0x2b4>)
    c752:	f9b7 3000 	ldrsh.w	r3, [r7]
    c756:	ee07 3a90 	vmov	s15, r3
    c75a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c75e:	eddf 8a4f 	vldr	s17, [pc, #316]	; c89c <adc_sample_thd+0x2d4>
    c762:	ee87 9aa8 	vdiv.f32	s18, s15, s17
	const struct adc_driver_api *api =
    c766:	68a3      	ldr	r3, [r4, #8]
	return api->read(dev, sequence);
    c768:	685b      	ldr	r3, [r3, #4]
    c76a:	a901      	add	r1, sp, #4
    c76c:	4620      	mov	r0, r4
    c76e:	4798      	blx	r3
		res += adc_read(adc_dev, &seq);
    c770:	4480      	add	r8, r0
    c772:	2304      	movs	r3, #4
    c774:	f8c5 3708 	str.w	r3, [r5, #1800]	; 0x708
		float v_up = (float)sample / 4095.0;
    c778:	f9b7 3000 	ldrsh.w	r3, [r7]
    c77c:	ee07 3a90 	vmov	s15, r3
    c780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c784:	ee87 8aa8 	vdiv.f32	s16, s15, s17
	const struct adc_driver_api *api =
    c788:	68a3      	ldr	r3, [r4, #8]
	return api->read(dev, sequence);
    c78a:	685b      	ldr	r3, [r3, #4]
    c78c:	a901      	add	r1, sp, #4
    c78e:	4620      	mov	r0, r4
    c790:	4798      	blx	r3
		float v_down = (float)sample / 4095.0;
    c792:	f9b7 3000 	ldrsh.w	r3, [r7]
    c796:	ee07 3a90 	vmov	s15, r3
    c79a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c79e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
    c7a2:	2302      	movs	r3, #2
    c7a4:	f8c5 3708 	str.w	r3, [r5, #1800]	; 0x708
		if (res == 0) {
    c7a8:	eb18 0f00 	cmn.w	r8, r0
    c7ac:	f47f af71 	bne.w	c692 <adc_sample_thd+0xca>
			v_js_diff = fabsf(v_up - v_down);
    c7b0:	ee78 7a47 	vsub.f32	s15, s16, s14
    c7b4:	eef0 7ae7 	vabs.f32	s15, s15
    c7b8:	4b39      	ldr	r3, [pc, #228]	; (c8a0 <adc_sample_thd+0x2d8>)
    c7ba:	edc3 7a00 	vstr	s15, [r3]
			float v_avg = (v_up + v_down) / 2.0;
    c7be:	ee78 7a07 	vadd.f32	s15, s16, s14
    c7c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c7c6:	ee67 7a87 	vmul.f32	s15, s15, s14
			v_js_avg_diff = fabsf(v_nom - v_avg);
    c7ca:	ee79 7a67 	vsub.f32	s15, s18, s15
    c7ce:	eef0 7ae7 	vabs.f32	s15, s15
    c7d2:	4a34      	ldr	r2, [pc, #208]	; (c8a4 <adc_sample_thd+0x2dc>)
    c7d4:	edc2 7a00 	vstr	s15, [r2]
			if (v_js_diff < 0.4 && v_js_avg_diff < 0.15) {
    c7d8:	6818      	ldr	r0, [r3, #0]
    c7da:	f7f4 fe45 	bl	1468 <__aeabi_f2d>
    c7de:	a322      	add	r3, pc, #136	; (adr r3, c868 <adc_sample_thd+0x2a0>)
    c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c7e4:	f7f5 f90a 	bl	19fc <__aeabi_dcmplt>
    c7e8:	2800      	cmp	r0, #0
    c7ea:	f43f af44 	beq.w	c676 <adc_sample_thd+0xae>
    c7ee:	4b2d      	ldr	r3, [pc, #180]	; (c8a4 <adc_sample_thd+0x2dc>)
    c7f0:	6818      	ldr	r0, [r3, #0]
    c7f2:	f7f4 fe39 	bl	1468 <__aeabi_f2d>
    c7f6:	a31e      	add	r3, pc, #120	; (adr r3, c870 <adc_sample_thd+0x2a8>)
    c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c7fc:	f7f5 f8fe 	bl	19fc <__aeabi_dcmplt>
    c800:	2800      	cmp	r0, #0
    c802:	f43f af38 	beq.w	c676 <adc_sample_thd+0xae>
				v_js_fault_samples = 0;
    c806:	f04f 0800 	mov.w	r8, #0
    c80a:	4b1f      	ldr	r3, [pc, #124]	; (c888 <adc_sample_thd+0x2c0>)
    c80c:	f8c3 8000 	str.w	r8, [r3]
				UTILS_LP_FAST(v_js, v_nom, 0.5);
    c810:	4d1e      	ldr	r5, [pc, #120]	; (c88c <adc_sample_thd+0x2c4>)
    c812:	edd5 7a00 	vldr	s15, [r5]
    c816:	ee77 7ac9 	vsub.f32	s15, s15, s18
    c81a:	ee17 0a90 	vmov	r0, s15
    c81e:	f7f4 fe23 	bl	1468 <__aeabi_f2d>
    c822:	2200      	movs	r2, #0
    c824:	4b20      	ldr	r3, [pc, #128]	; (c8a8 <adc_sample_thd+0x2e0>)
    c826:	f7f4 fe77 	bl	1518 <__aeabi_dmul>
    c82a:	4606      	mov	r6, r0
    c82c:	460f      	mov	r7, r1
    c82e:	6828      	ldr	r0, [r5, #0]
    c830:	f7f4 fe1a 	bl	1468 <__aeabi_f2d>
    c834:	4632      	mov	r2, r6
    c836:	463b      	mov	r3, r7
    c838:	f7f4 fcb6 	bl	11a8 <__aeabi_dsub>
    c83c:	f7f5 f926 	bl	1a8c <__aeabi_d2f>
    c840:	6028      	str	r0, [r5, #0]
				v_js_fault_now = false;
    c842:	4b13      	ldr	r3, [pc, #76]	; (c890 <adc_sample_thd+0x2c8>)
    c844:	f883 8000 	strb.w	r8, [r3]
    c848:	e723      	b.n	c692 <adc_sample_thd+0xca>
    c84a:	bf00      	nop
    c84c:	f3af 8000 	nop.w
    c850:	00000000 	.word	0x00000000
    c854:	40affe00 	.word	0x40affe00
    c858:	cccccccc 	.word	0xcccccccc
    c85c:	400ccccc 	.word	0x400ccccc
    c860:	47ae147b 	.word	0x47ae147b
    c864:	3f947ae1 	.word	0x3f947ae1
    c868:	9999999a 	.word	0x9999999a
    c86c:	3fd99999 	.word	0x3fd99999
    c870:	33333333 	.word	0x33333333
    c874:	3fc33333 	.word	0x3fc33333
    c878:	00026140 	.word	0x00026140
    c87c:	20004ba4 	.word	0x20004ba4
    c880:	40010000 	.word	0x40010000
    c884:	6e524635 	.word	0x6e524635
    c888:	2000232c 	.word	0x2000232c
    c88c:	20000444 	.word	0x20000444
    c890:	20004ba9 	.word	0x20004ba9
    c894:	20002338 	.word	0x20002338
    c898:	20004ba6 	.word	0x20004ba6
    c89c:	457ff000 	.word	0x457ff000
    c8a0:	20002334 	.word	0x20002334
    c8a4:	20002330 	.word	0x20002330
    c8a8:	3fe00000 	.word	0x3fe00000
    c8ac:	00000000 	.word	0x00000000

0000c8b0 <main>:
int main(void) {
    c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8b4:	ed2d 8b04 	vpush	{d8-d9}
    c8b8:	b08b      	sub	sp, #44	; 0x2c
    c8ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c8be:	220c      	movs	r2, #12
    c8c0:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
    c8c4:	4996      	ldr	r1, [pc, #600]	; (cb20 <main+0x270>)
    c8c6:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
    c8ca:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
    c8ce:	2203      	movs	r2, #3
    c8d0:	f8c3 2754 	str.w	r2, [r3, #1876]	; 0x754
    c8d4:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
	for (int i = 0;i < 500;i++) {
    c8d8:	2200      	movs	r2, #0
    c8da:	e010      	b.n	c8fe <main+0x4e>
		for (int i = 0;i < 1000;i++) i=i*1;
    c8dc:	3301      	adds	r3, #1
    c8de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c8e2:	dbfb      	blt.n	c8dc <main+0x2c>
    p_reg->OUTCLR = clr_mask;
    c8e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c8e8:	f44f 7180 	mov.w	r1, #256	; 0x100
    c8ec:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
		for (int i = 0;i < 1000;i++) i=i*1;
    c8f0:	2300      	movs	r3, #0
    c8f2:	e000      	b.n	c8f6 <main+0x46>
    c8f4:	3301      	adds	r3, #1
    c8f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    c8fa:	dbfb      	blt.n	c8f4 <main+0x44>
	for (int i = 0;i < 500;i++) {
    c8fc:	3201      	adds	r2, #1
    c8fe:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    c902:	da07      	bge.n	c914 <main+0x64>
    p_reg->OUTSET = set_mask;
    c904:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c908:	f44f 7180 	mov.w	r1, #256	; 0x100
    c90c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
		for (int i = 0;i < 1000;i++) i=i*1;
    c910:	2300      	movs	r3, #0
    c912:	e7e4      	b.n	c8de <main+0x2e>
	fs.offset = FLASH_AREA_OFFSET(storage);;
    c914:	4883      	ldr	r0, [pc, #524]	; (cb24 <main+0x274>)
    c916:	f44f 235c 	mov.w	r3, #901120	; 0xdc000
    c91a:	6003      	str	r3, [r0, #0]
	fs.sector_size = info.size;
    c91c:	9b08      	ldr	r3, [sp, #32]
    c91e:	8183      	strh	r3, [r0, #12]
	fs.sector_count = 2;
    c920:	2302      	movs	r3, #2
    c922:	81c3      	strh	r3, [r0, #14]
	rc = nvs_mount(&fs);
    c924:	f014 fd59 	bl	213da <nvs_mount>
	if (rc) {
    c928:	bb00      	cbnz	r0, c96c <main+0xbc>
	rc = nvs_read(&fs, CONF_DATA_ID, &conf, sizeof(conf));
    c92a:	2301      	movs	r3, #1
    c92c:	4a7e      	ldr	r2, [pc, #504]	; (cb28 <main+0x278>)
    c92e:	4619      	mov	r1, r3
    c930:	487c      	ldr	r0, [pc, #496]	; (cb24 <main+0x274>)
    c932:	f014 fead 	bl	21690 <nvs_read>
	if (rc != sizeof(conf)) {
    c936:	2801      	cmp	r0, #1
    c938:	d002      	beq.n	c940 <main+0x90>
		conf.use_imperial_units = false;
    c93a:	4b7b      	ldr	r3, [pc, #492]	; (cb28 <main+0x278>)
    c93c:	2200      	movs	r2, #0
    c93e:	701a      	strb	r2, [r3, #0]
	clocks_start();
    c940:	f002 fc54 	bl	f1ec <clocks_start>
	int err = esb_init();
    c944:	f002 fb9a 	bl	f07c <esb_init>
    c948:	4604      	mov	r4, r0
	if (esb_init()) {
    c94a:	f002 fb97 	bl	f07c <esb_init>
    c94e:	b988      	cbnz	r0, c974 <main+0xc4>
	uint32_t uuid = crc32c((uint8_t*)NRF_FICR->DEVICEADDR, 6);
    c950:	2106      	movs	r1, #6
    c952:	4876      	ldr	r0, [pc, #472]	; (cb2c <main+0x27c>)
    c954:	f002 fac4 	bl	eee0 <crc32c>
    c958:	4607      	mov	r7, r0
	printk("UUID: %u\r\n", uuid);
    c95a:	4601      	mov	r1, r0
    c95c:	4874      	ldr	r0, [pc, #464]	; (cb30 <main+0x280>)
    c95e:	f013 f9c7 	bl	1fcf0 <printk>
	set_addr_ch(uuid);
    c962:	4638      	mov	r0, r7
    c964:	f002 fbb0 	bl	f0c8 <set_addr_ch>
	for (int i = 0;i < 500;i++) {
    c968:	2400      	movs	r4, #0
    c96a:	e014      	b.n	c996 <main+0xe6>
		printk("Flash Init failed\n");
    c96c:	4871      	ldr	r0, [pc, #452]	; (cb34 <main+0x284>)
    c96e:	f013 f9bf 	bl	1fcf0 <printk>
    c972:	e7da      	b.n	c92a <main+0x7a>
		printk("ESB initialization failed, err %d", err);
    c974:	4621      	mov	r1, r4
    c976:	4870      	ldr	r0, [pc, #448]	; (cb38 <main+0x288>)
    c978:	f013 f9ba 	bl	1fcf0 <printk>
    c97c:	e7e8      	b.n	c950 <main+0xa0>
    c97e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    c982:	f44f 7680 	mov.w	r6, #256	; 0x100
    c986:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
		send_pairing_info(uuid);
    c98a:	4638      	mov	r0, r7
    c98c:	f002 fbec 	bl	f168 <send_pairing_info>
    p_reg->OUTCLR = clr_mask;
    c990:	f8c5 650c 	str.w	r6, [r5, #1292]	; 0x50c
	for (int i = 0;i < 500;i++) {
    c994:	3401      	adds	r4, #1
    c996:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    c99a:	dbf0      	blt.n	c97e <main+0xce>
	esb_wait_idle();
    c99c:	f012 fc8f 	bl	1f2be <esb_wait_idle>
	nrf_esb_start_rx();
    c9a0:	f003 fc0e 	bl	101c0 <nrf_esb_start_rx>
	NRF_WDT->CONFIG = (WDT_CONFIG_HALT_Pause << WDT_CONFIG_HALT_Pos) | (WDT_CONFIG_SLEEP_Pause << WDT_CONFIG_SLEEP_Pos);
    c9a4:	4b65      	ldr	r3, [pc, #404]	; (cb3c <main+0x28c>)
    c9a6:	2200      	movs	r2, #0
    c9a8:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	NRF_WDT->CRV = 32768 / 2; // 500 ms timeout
    c9ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c9b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	NRF_WDT->RREN |= WDT_RREN_RR0_Msk | WDT_RREN_RR1_Msk | WDT_RREN_RR2_Msk;
    c9b4:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    c9b8:	f042 0207 	orr.w	r2, r2, #7
    c9bc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_WDT->TASKS_START = 1;
    c9c0:	2201      	movs	r2, #1
    c9c2:	601a      	str	r2, [r3, #0]
	while(SW1 || SW2) {
    c9c4:	e006      	b.n	c9d4 <main+0x124>
		k_msleep(10);
    c9c6:	200a      	movs	r0, #10
    c9c8:	f012 fc72 	bl	1f2b0 <k_msleep>
		NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    c9cc:	4b5b      	ldr	r3, [pc, #364]	; (cb3c <main+0x28c>)
    c9ce:	4a5c      	ldr	r2, [pc, #368]	; (cb40 <main+0x290>)
    c9d0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    return p_reg->IN;
    c9d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c9d8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	while(SW1 || SW2) {
    c9dc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    c9e0:	d0f1      	beq.n	c9c6 <main+0x116>
    c9e2:	4b4f      	ldr	r3, [pc, #316]	; (cb20 <main+0x270>)
    c9e4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    c9e8:	f013 0f02 	tst.w	r3, #2
    c9ec:	d0eb      	beq.n	c9c6 <main+0x116>
    c9ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c9f2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    c9f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    c9fa:	d0e4      	beq.n	c9c6 <main+0x116>
	k_msleep(100);
    c9fc:	2064      	movs	r0, #100	; 0x64
    c9fe:	f012 fc57 	bl	1f2b0 <k_msleep>
	bool imperial_toggled = false;
    ca02:	2300      	movs	r3, #0
    ca04:	461d      	mov	r5, r3
    ca06:	9302      	str	r3, [sp, #8]
	float sw2_time = 0.0;
    ca08:	ed9f 9a4e 	vldr	s18, [pc, #312]	; cb44 <main+0x294>
	float sw1_time = 0.0;
    ca0c:	eef0 8a49 	vmov.f32	s17, s18
	bool was_locked = false;
    ca10:	9303      	str	r3, [sp, #12]
	bool was_bt_z = false;
    ca12:	469b      	mov	fp, r3
	int not_click_cnt = 0;
    ca14:	9301      	str	r3, [sp, #4]
	int click_cnt = 0;
    ca16:	461f      	mov	r7, r3
	bool was_sw_both = false;
    ca18:	461c      	mov	r4, r3
	bool was_sw2 = false;
    ca1a:	461e      	mov	r6, r3
    ca1c:	e2a9      	b.n	cf72 <main+0x6c2>
				is_cc != 2;
    ca1e:	4b4a      	ldr	r3, [pc, #296]	; (cb48 <main+0x298>)
    ca20:	681b      	ldr	r3, [r3, #0]
				(vesc_val.rx_cnt == 0 || fabsf(vesc_val.speed) < 1.0) &&
    ca22:	2b02      	cmp	r3, #2
    ca24:	d001      	beq.n	ca2a <main+0x17a>
    ca26:	2301      	movs	r3, #1
    ca28:	e002      	b.n	ca30 <main+0x180>
    ca2a:	2300      	movs	r3, #0
    ca2c:	e000      	b.n	ca30 <main+0x180>
    ca2e:	2300      	movs	r3, #0
    ca30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ca34:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
		bool clicked_1 = !SW1 && was_sw1 && sw1_time < 0.5;
    ca38:	f412 2f00 	tst.w	r2, #524288	; 0x80000
    ca3c:	d00f      	beq.n	ca5e <main+0x1ae>
    ca3e:	4a38      	ldr	r2, [pc, #224]	; (cb20 <main+0x270>)
    ca40:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
    ca44:	f012 0f02 	tst.w	r2, #2
    ca48:	d01c      	beq.n	ca84 <main+0x1d4>
    ca4a:	b1ed      	cbz	r5, ca88 <main+0x1d8>
    ca4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    ca50:	eef4 8ae7 	vcmpe.f32	s17, s15
    ca54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ca58:	d518      	bpl.n	ca8c <main+0x1dc>
    ca5a:	2501      	movs	r5, #1
    ca5c:	e000      	b.n	ca60 <main+0x1b0>
    ca5e:	2500      	movs	r5, #0
    ca60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ca64:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
		bool clicked_2 = !SW2 && was_sw2 && sw2_time < 1.0;
    ca68:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    ca6c:	d010      	beq.n	ca90 <main+0x1e0>
    ca6e:	b356      	cbz	r6, cac6 <main+0x216>
    ca70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    ca74:	eeb4 9ae7 	vcmpe.f32	s18, s15
    ca78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ca7c:	d426      	bmi.n	cacc <main+0x21c>
    ca7e:	f04f 0800 	mov.w	r8, #0
    ca82:	e007      	b.n	ca94 <main+0x1e4>
		bool clicked_1 = !SW1 && was_sw1 && sw1_time < 0.5;
    ca84:	2500      	movs	r5, #0
    ca86:	e7eb      	b.n	ca60 <main+0x1b0>
    ca88:	2500      	movs	r5, #0
    ca8a:	e7e9      	b.n	ca60 <main+0x1b0>
    ca8c:	2500      	movs	r5, #0
    ca8e:	e7e7      	b.n	ca60 <main+0x1b0>
		bool clicked_2 = !SW2 && was_sw2 && sw2_time < 1.0;
    ca90:	f04f 0800 	mov.w	r8, #0
		if (chdir_valid) {
    ca94:	b1fb      	cbz	r3, cad6 <main+0x226>
			if (clicked_1) {
    ca96:	b1e5      	cbz	r5, cad2 <main+0x222>
				click_cnt++;
    ca98:	f107 0901 	add.w	r9, r7, #1
    ca9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    caa0:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
			if (SW1) {
    caa4:	f412 2f00 	tst.w	r2, #524288	; 0x80000
    caa8:	d02e      	beq.n	cb08 <main+0x258>
    caaa:	4a1d      	ldr	r2, [pc, #116]	; (cb20 <main+0x270>)
    caac:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
    cab0:	f012 0f02 	tst.w	r2, #2
    cab4:	d02b      	beq.n	cb0e <main+0x25e>
				not_click_cnt++;
    cab6:	9a01      	ldr	r2, [sp, #4]
    cab8:	3201      	adds	r2, #1
    caba:	9201      	str	r2, [sp, #4]
			if (not_click_cnt >= 10) {
    cabc:	2a09      	cmp	r2, #9
    cabe:	dd0d      	ble.n	cadc <main+0x22c>
				click_cnt = 0;
    cac0:	f04f 0900 	mov.w	r9, #0
    cac4:	e00a      	b.n	cadc <main+0x22c>
		bool clicked_2 = !SW2 && was_sw2 && sw2_time < 1.0;
    cac6:	f04f 0800 	mov.w	r8, #0
    caca:	e7e3      	b.n	ca94 <main+0x1e4>
    cacc:	f04f 0801 	mov.w	r8, #1
    cad0:	e7e0      	b.n	ca94 <main+0x1e4>
    cad2:	46b9      	mov	r9, r7
    cad4:	e7e2      	b.n	ca9c <main+0x1ec>
			not_click_cnt = 0;
    cad6:	2200      	movs	r2, #0
    cad8:	9201      	str	r2, [sp, #4]
			click_cnt = 0;
    cada:	4691      	mov	r9, r2
		if ((chdir_valid && ((click_cnt_prev == 1 && click_cnt == 0) || (sw1_time > 0.5 && sw2_time < 0.1))) ||
    cadc:	bbb3      	cbnz	r3, cb4c <main+0x29c>
				(!chdir_valid && (clicked_1 || (sw1_time > 0.5 && sw2_time < 0.1)))) {
    cade:	2d00      	cmp	r5, #0
    cae0:	d148      	bne.n	cb74 <main+0x2c4>
    cae2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    cae6:	eef4 8ae7 	vcmpe.f32	s17, s15
    caea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    caee:	dd49      	ble.n	cb84 <main+0x2d4>
    caf0:	ee19 0a10 	vmov	r0, s18
    caf4:	f7f4 fcb8 	bl	1468 <__aeabi_f2d>
    caf8:	a307      	add	r3, pc, #28	; (adr r3, cb18 <main+0x268>)
    cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
    cafe:	f7f4 ff7d 	bl	19fc <__aeabi_dcmplt>
    cb02:	2800      	cmp	r0, #0
    cb04:	d03e      	beq.n	cb84 <main+0x2d4>
    cb06:	e035      	b.n	cb74 <main+0x2c4>
				not_click_cnt = 0;
    cb08:	2200      	movs	r2, #0
    cb0a:	9201      	str	r2, [sp, #4]
    cb0c:	e7e6      	b.n	cadc <main+0x22c>
    cb0e:	2200      	movs	r2, #0
    cb10:	9201      	str	r2, [sp, #4]
    cb12:	e7e3      	b.n	cadc <main+0x22c>
    cb14:	f3af 8000 	nop.w
    cb18:	9999999a 	.word	0x9999999a
    cb1c:	3fb99999 	.word	0x3fb99999
    cb20:	50000300 	.word	0x50000300
    cb24:	200022f4 	.word	0x200022f4
    cb28:	200022f0 	.word	0x200022f0
    cb2c:	100000a4 	.word	0x100000a4
    cb30:	000261b0 	.word	0x000261b0
    cb34:	00026178 	.word	0x00026178
    cb38:	0002618c 	.word	0x0002618c
    cb3c:	40010000 	.word	0x40010000
    cb40:	6e524635 	.word	0x6e524635
    cb44:	00000000 	.word	0x00000000
    cb48:	20002328 	.word	0x20002328
		if ((chdir_valid && ((click_cnt_prev == 1 && click_cnt == 0) || (sw1_time > 0.5 && sw2_time < 0.1))) ||
    cb4c:	2f01      	cmp	r7, #1
    cb4e:	f000 8093 	beq.w	cc78 <main+0x3c8>
    cb52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    cb56:	eef4 8ae7 	vcmpe.f32	s17, s15
    cb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb5e:	dd11      	ble.n	cb84 <main+0x2d4>
    cb60:	ee19 0a10 	vmov	r0, s18
    cb64:	f7f4 fc80 	bl	1468 <__aeabi_f2d>
    cb68:	a385      	add	r3, pc, #532	; (adr r3, cd80 <main+0x4d0>)
    cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb6e:	f7f4 ff45 	bl	19fc <__aeabi_dcmplt>
    cb72:	b138      	cbz	r0, cb84 <main+0x2d4>
			if (is_cc == 0) {
    cb74:	4b86      	ldr	r3, [pc, #536]	; (cd90 <main+0x4e0>)
    cb76:	681b      	ldr	r3, [r3, #0]
    cb78:	2b00      	cmp	r3, #0
    cb7a:	f040 8082 	bne.w	cc82 <main+0x3d2>
				is_cc = 2;
    cb7e:	4b84      	ldr	r3, [pc, #528]	; (cd90 <main+0x4e0>)
    cb80:	2202      	movs	r2, #2
    cb82:	601a      	str	r2, [r3, #0]
		if (js < -0.08 || js > 0.08 || click_cnt >= 2) {
    cb84:	ee18 0a10 	vmov	r0, s16
    cb88:	f7f4 fc6e 	bl	1468 <__aeabi_f2d>
    cb8c:	4606      	mov	r6, r0
    cb8e:	460f      	mov	r7, r1
    cb90:	a375      	add	r3, pc, #468	; (adr r3, cd68 <main+0x4b8>)
    cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb96:	f7f4 ff31 	bl	19fc <__aeabi_dcmplt>
    cb9a:	b950      	cbnz	r0, cbb2 <main+0x302>
    cb9c:	a374      	add	r3, pc, #464	; (adr r3, cd70 <main+0x4c0>)
    cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cba2:	4630      	mov	r0, r6
    cba4:	4639      	mov	r1, r7
    cba6:	f7f4 ff47 	bl	1a38 <__aeabi_dcmpgt>
    cbaa:	b910      	cbnz	r0, cbb2 <main+0x302>
    cbac:	f1b9 0f01 	cmp.w	r9, #1
    cbb0:	dd73      	ble.n	cc9a <main+0x3ea>
			is_cc = 0;
    cbb2:	4b77      	ldr	r3, [pc, #476]	; (cd90 <main+0x4e0>)
    cbb4:	2200      	movs	r2, #0
    cbb6:	601a      	str	r2, [r3, #0]
		int bt_z = click_cnt >= 2;
    cbb8:	f1b9 0f01 	cmp.w	r9, #1
    cbbc:	bfcc      	ite	gt
    cbbe:	f04f 0a01 	movgt.w	sl, #1
    cbc2:	4692      	movle	sl, r2
		if (bt_z) {
    cbc4:	dd06      	ble.n	cbd4 <main+0x324>
			if (bt_z != was_bt_z) {
    cbc6:	45da      	cmp	sl, fp
    cbc8:	d004      	beq.n	cbd4 <main+0x324>
				is_rev = !is_rev;
    cbca:	4a72      	ldr	r2, [pc, #456]	; (cd94 <main+0x4e4>)
    cbcc:	7813      	ldrb	r3, [r2, #0]
    cbce:	f083 0301 	eor.w	r3, r3, #1
    cbd2:	7013      	strb	r3, [r2, #0]
		if (clicked_1 || clicked_2) {
    cbd4:	b915      	cbnz	r5, cbdc <main+0x32c>
    cbd6:	f1b8 0f00 	cmp.w	r8, #0
    cbda:	d002      	beq.n	cbe2 <main+0x332>
			esb_no_rx_cnt = 0;
    cbdc:	4b6e      	ldr	r3, [pc, #440]	; (cd98 <main+0x4e8>)
    cbde:	2200      	movs	r2, #0
    cbe0:	601a      	str	r2, [r3, #0]
		if (mote_locked) {
    cbe2:	4b6e      	ldr	r3, [pc, #440]	; (cd9c <main+0x4ec>)
    cbe4:	781b      	ldrb	r3, [r3, #0]
    cbe6:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    cbea:	2b00      	cmp	r3, #0
    cbec:	d058      	beq.n	cca0 <main+0x3f0>
			is_cc = 0;
    cbee:	2300      	movs	r3, #0
    cbf0:	4a67      	ldr	r2, [pc, #412]	; (cd90 <main+0x4e0>)
    cbf2:	6013      	str	r3, [r2, #0]
			screen_now = 0;
    cbf4:	4a6a      	ldr	r2, [pc, #424]	; (cda0 <main+0x4f0>)
    cbf6:	6013      	str	r3, [r2, #0]
			is_rev = false;
    cbf8:	4a66      	ldr	r2, [pc, #408]	; (cd94 <main+0x4e4>)
    cbfa:	7013      	strb	r3, [r2, #0]
			if (js > 0.9 && (clicked_1 || clicked_2)) {
    cbfc:	a35e      	add	r3, pc, #376	; (adr r3, cd78 <main+0x4c8>)
    cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc02:	4630      	mov	r0, r6
    cc04:	4639      	mov	r1, r7
    cc06:	f7f4 ff17 	bl	1a38 <__aeabi_dcmpgt>
    cc0a:	b140      	cbz	r0, cc1e <main+0x36e>
    cc0c:	b915      	cbnz	r5, cc14 <main+0x364>
    cc0e:	f1b8 0f00 	cmp.w	r8, #0
    cc12:	d004      	beq.n	cc1e <main+0x36e>
				mote_locked = false;
    cc14:	4b61      	ldr	r3, [pc, #388]	; (cd9c <main+0x4ec>)
    cc16:	2200      	movs	r2, #0
    cc18:	701a      	strb	r2, [r3, #0]
				was_locked = true;
    cc1a:	f8cd b00c 	str.w	fp, [sp, #12]
    cc1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cc22:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		was_sw_both = (SW1 && SW2) || (was_sw_both && (SW1 || SW2));
    cc26:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    cc2a:	d005      	beq.n	cc38 <main+0x388>
    cc2c:	4b5d      	ldr	r3, [pc, #372]	; (cda4 <main+0x4f4>)
    cc2e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    cc32:	f013 0f02 	tst.w	r3, #2
    cc36:	d106      	bne.n	cc46 <main+0x396>
    cc38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cc3c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    cc40:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    cc44:	d068      	beq.n	cd18 <main+0x468>
    cc46:	2c00      	cmp	r4, #0
    cc48:	f000 8082 	beq.w	cd50 <main+0x4a0>
    cc4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cc50:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    cc54:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    cc58:	d07c      	beq.n	cd54 <main+0x4a4>
    cc5a:	4b52      	ldr	r3, [pc, #328]	; (cda4 <main+0x4f4>)
    cc5c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    cc60:	f013 0f02 	tst.w	r3, #2
    cc64:	d078      	beq.n	cd58 <main+0x4a8>
    cc66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cc6a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    cc6e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    cc72:	d073      	beq.n	cd5c <main+0x4ac>
    cc74:	2400      	movs	r4, #0
    cc76:	e050      	b.n	cd1a <main+0x46a>
		if ((chdir_valid && ((click_cnt_prev == 1 && click_cnt == 0) || (sw1_time > 0.5 && sw2_time < 0.1))) ||
    cc78:	f1b9 0f00 	cmp.w	r9, #0
    cc7c:	f43f af7a 	beq.w	cb74 <main+0x2c4>
    cc80:	e767      	b.n	cb52 <main+0x2a2>
			} else if (sw1_time < 0.5) {
    cc82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    cc86:	eef4 8ae7 	vcmpe.f32	s17, s15
    cc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc8e:	f57f af79 	bpl.w	cb84 <main+0x2d4>
				is_cc = 0;
    cc92:	4b3f      	ldr	r3, [pc, #252]	; (cd90 <main+0x4e0>)
    cc94:	2200      	movs	r2, #0
    cc96:	601a      	str	r2, [r3, #0]
    cc98:	e774      	b.n	cb84 <main+0x2d4>
		int bt_z = click_cnt >= 2;
    cc9a:	f04f 0a00 	mov.w	sl, #0
    cc9e:	e799      	b.n	cbd4 <main+0x324>
			if (fabsf(vesc_val.speed) < 0.1 && js < -0.9 &&
    cca0:	4b41      	ldr	r3, [pc, #260]	; (cda8 <main+0x4f8>)
    cca2:	edd3 7a02 	vldr	s15, [r3, #8]
    cca6:	eef0 7ae7 	vabs.f32	s15, s15
    ccaa:	ee17 0a90 	vmov	r0, s15
    ccae:	f7f4 fbdb 	bl	1468 <__aeabi_f2d>
    ccb2:	a333      	add	r3, pc, #204	; (adr r3, cd80 <main+0x4d0>)
    ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccb8:	f7f4 fea0 	bl	19fc <__aeabi_dcmplt>
    ccbc:	b170      	cbz	r0, ccdc <main+0x42c>
    ccbe:	a332      	add	r3, pc, #200	; (adr r3, cd88 <main+0x4d8>)
    ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccc4:	4630      	mov	r0, r6
    ccc6:	4639      	mov	r1, r7
    ccc8:	f7f4 fe98 	bl	19fc <__aeabi_dcmplt>
    cccc:	b130      	cbz	r0, ccdc <main+0x42c>
    ccce:	b915      	cbnz	r5, ccd6 <main+0x426>
					(clicked_1 || clicked_2)) {
    ccd0:	f1b8 0f00 	cmp.w	r8, #0
    ccd4:	d002      	beq.n	ccdc <main+0x42c>
				mote_locked = true;
    ccd6:	4b31      	ldr	r3, [pc, #196]	; (cd9c <main+0x4ec>)
    ccd8:	2201      	movs	r2, #1
    ccda:	701a      	strb	r2, [r3, #0]
			if (js < 0.1 && was_locked) {
    ccdc:	a328      	add	r3, pc, #160	; (adr r3, cd80 <main+0x4d0>)
    ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
    cce2:	4630      	mov	r0, r6
    cce4:	4639      	mov	r1, r7
    cce6:	f7f4 fe89 	bl	19fc <__aeabi_dcmplt>
    ccea:	b118      	cbz	r0, ccf4 <main+0x444>
    ccec:	9b03      	ldr	r3, [sp, #12]
    ccee:	b10b      	cbz	r3, ccf4 <main+0x444>
				was_locked = false;
    ccf0:	f8cd b00c 	str.w	fp, [sp, #12]
			if (!mote_locked && clicked_2) {
    ccf4:	4b29      	ldr	r3, [pc, #164]	; (cd9c <main+0x4ec>)
    ccf6:	781b      	ldrb	r3, [r3, #0]
    ccf8:	2b00      	cmp	r3, #0
    ccfa:	d190      	bne.n	cc1e <main+0x36e>
    ccfc:	f1b8 0f00 	cmp.w	r8, #0
    cd00:	d08d      	beq.n	cc1e <main+0x36e>
				screen_now++;
    cd02:	4b27      	ldr	r3, [pc, #156]	; (cda0 <main+0x4f0>)
    cd04:	681a      	ldr	r2, [r3, #0]
    cd06:	3201      	adds	r2, #1
    cd08:	601a      	str	r2, [r3, #0]
				if (screen_now >= 3) {
    cd0a:	681b      	ldr	r3, [r3, #0]
    cd0c:	2b02      	cmp	r3, #2
    cd0e:	dd86      	ble.n	cc1e <main+0x36e>
					screen_now = 0;
    cd10:	4b23      	ldr	r3, [pc, #140]	; (cda0 <main+0x4f0>)
    cd12:	2200      	movs	r2, #0
    cd14:	601a      	str	r2, [r3, #0]
    cd16:	e782      	b.n	cc1e <main+0x36e>
		was_sw_both = (SW1 && SW2) || (was_sw_both && (SW1 || SW2));
    cd18:	2401      	movs	r4, #1
    cd1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cd1e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		was_sw1 = SW1 && !was_sw_both;
    cd22:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    cd26:	d005      	beq.n	cd34 <main+0x484>
    cd28:	4b1e      	ldr	r3, [pc, #120]	; (cda4 <main+0x4f4>)
    cd2a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    cd2e:	f013 0f02 	tst.w	r3, #2
    cd32:	d115      	bne.n	cd60 <main+0x4b0>
    cd34:	b9b4      	cbnz	r4, cd64 <main+0x4b4>
    cd36:	2501      	movs	r5, #1
    cd38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cd3c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		was_sw2 = SW2 && !was_sw_both;
    cd40:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    cd44:	d132      	bne.n	cdac <main+0x4fc>
    cd46:	2c00      	cmp	r4, #0
    cd48:	f000 809f 	beq.w	ce8a <main+0x5da>
    cd4c:	2600      	movs	r6, #0
    cd4e:	e02e      	b.n	cdae <main+0x4fe>
		was_sw_both = (SW1 && SW2) || (was_sw_both && (SW1 || SW2));
    cd50:	2400      	movs	r4, #0
    cd52:	e7e2      	b.n	cd1a <main+0x46a>
    cd54:	2401      	movs	r4, #1
    cd56:	e7e0      	b.n	cd1a <main+0x46a>
    cd58:	2401      	movs	r4, #1
    cd5a:	e7de      	b.n	cd1a <main+0x46a>
    cd5c:	2401      	movs	r4, #1
    cd5e:	e7dc      	b.n	cd1a <main+0x46a>
		was_sw1 = SW1 && !was_sw_both;
    cd60:	2500      	movs	r5, #0
    cd62:	e7e9      	b.n	cd38 <main+0x488>
    cd64:	2500      	movs	r5, #0
    cd66:	e7e7      	b.n	cd38 <main+0x488>
    cd68:	47ae147b 	.word	0x47ae147b
    cd6c:	bfb47ae1 	.word	0xbfb47ae1
    cd70:	47ae147b 	.word	0x47ae147b
    cd74:	3fb47ae1 	.word	0x3fb47ae1
    cd78:	cccccccd 	.word	0xcccccccd
    cd7c:	3feccccc 	.word	0x3feccccc
    cd80:	9999999a 	.word	0x9999999a
    cd84:	3fb99999 	.word	0x3fb99999
    cd88:	cccccccd 	.word	0xcccccccd
    cd8c:	bfeccccc 	.word	0xbfeccccc
    cd90:	20002328 	.word	0x20002328
    cd94:	20004ba8 	.word	0x20004ba8
    cd98:	2000233c 	.word	0x2000233c
    cd9c:	20004ba7 	.word	0x20004ba7
    cda0:	20002324 	.word	0x20002324
    cda4:	50000300 	.word	0x50000300
    cda8:	20002344 	.word	0x20002344
		was_sw2 = SW2 && !was_sw_both;
    cdac:	2600      	movs	r6, #0
    cdae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cdb2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		if (SW1 || was_sw_both) {
    cdb6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    cdba:	d007      	beq.n	cdcc <main+0x51c>
    cdbc:	4b8e      	ldr	r3, [pc, #568]	; (cff8 <main+0x748>)
    cdbe:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    cdc2:	f013 0f02 	tst.w	r3, #2
    cdc6:	d001      	beq.n	cdcc <main+0x51c>
    cdc8:	2c00      	cmp	r4, #0
    cdca:	d060      	beq.n	ce8e <main+0x5de>
			sw1_time += 0.02;
    cdcc:	ee18 0a90 	vmov	r0, s17
    cdd0:	f7f4 fb4a 	bl	1468 <__aeabi_f2d>
    cdd4:	a382      	add	r3, pc, #520	; (adr r3, cfe0 <main+0x730>)
    cdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
    cdda:	f7f4 f9e7 	bl	11ac <__adddf3>
    cdde:	f7f4 fe55 	bl	1a8c <__aeabi_d2f>
    cde2:	ee08 0a90 	vmov	s17, r0
    cde6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cdea:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		if (SW2 || was_sw_both) {
    cdee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    cdf2:	d001      	beq.n	cdf8 <main+0x548>
    cdf4:	2c00      	cmp	r4, #0
    cdf6:	d04d      	beq.n	ce94 <main+0x5e4>
			sw2_time += 0.02;
    cdf8:	ee19 0a10 	vmov	r0, s18
    cdfc:	f7f4 fb34 	bl	1468 <__aeabi_f2d>
    ce00:	a377      	add	r3, pc, #476	; (adr r3, cfe0 <main+0x730>)
    ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce06:	f7f4 f9d1 	bl	11ac <__adddf3>
    ce0a:	f7f4 fe3f 	bl	1a8c <__aeabi_d2f>
    ce0e:	ee09 0a10 	vmov	s18, r0
		if (sw2_time > 1.0 && sw1_time < 0.1 && !mote_locked && fabsf(vesc_val.speed) < 1.0) {
    ce12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    ce16:	eeb4 9ae7 	vcmpe.f32	s18, s15
    ce1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce1e:	dd1a      	ble.n	ce56 <main+0x5a6>
    ce20:	ee18 0a90 	vmov	r0, s17
    ce24:	f7f4 fb20 	bl	1468 <__aeabi_f2d>
    ce28:	a36f      	add	r3, pc, #444	; (adr r3, cfe8 <main+0x738>)
    ce2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce2e:	f7f4 fde5 	bl	19fc <__aeabi_dcmplt>
    ce32:	b180      	cbz	r0, ce56 <main+0x5a6>
    ce34:	4b71      	ldr	r3, [pc, #452]	; (cffc <main+0x74c>)
    ce36:	781b      	ldrb	r3, [r3, #0]
    ce38:	f003 07ff 	and.w	r7, r3, #255	; 0xff
    ce3c:	b95b      	cbnz	r3, ce56 <main+0x5a6>
    ce3e:	4b70      	ldr	r3, [pc, #448]	; (d000 <main+0x750>)
    ce40:	edd3 7a02 	vldr	s15, [r3, #8]
    ce44:	eef0 7ae7 	vabs.f32	s15, s15
    ce48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    ce4c:	eef4 7ac7 	vcmpe.f32	s15, s14
    ce50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce54:	d421      	bmi.n	ce9a <main+0x5ea>
		if (is_cc == 2 && (sw1_time > 0.5 && sw2_time < 0.1)) {
    ce56:	4b6b      	ldr	r3, [pc, #428]	; (d004 <main+0x754>)
    ce58:	681b      	ldr	r3, [r3, #0]
    ce5a:	2b02      	cmp	r3, #2
    ce5c:	d022      	beq.n	cea4 <main+0x5f4>
		if (sw1_time > 2.0 && sw2_time > 2.0) {
    ce5e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    ce62:	eef4 8ae7 	vcmpe.f32	s17, s15
    ce66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce6a:	dd30      	ble.n	cece <main+0x61e>
    ce6c:	eeb4 9ae7 	vcmpe.f32	s18, s15
    ce70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ce74:	dd35      	ble.n	cee2 <main+0x632>
			if (!imperial_toggled) {
    ce76:	9b02      	ldr	r3, [sp, #8]
    ce78:	bb5b      	cbnz	r3, ced2 <main+0x622>
				conf.use_imperial_units = !conf.use_imperial_units;
    ce7a:	4a63      	ldr	r2, [pc, #396]	; (d008 <main+0x758>)
    ce7c:	7813      	ldrb	r3, [r2, #0]
    ce7e:	f083 0301 	eor.w	r3, r3, #1
    ce82:	7013      	strb	r3, [r2, #0]
				imperial_toggled = true;
    ce84:	2301      	movs	r3, #1
    ce86:	9302      	str	r3, [sp, #8]
    ce88:	e023      	b.n	ced2 <main+0x622>
		was_sw2 = SW2 && !was_sw_both;
    ce8a:	2601      	movs	r6, #1
    ce8c:	e78f      	b.n	cdae <main+0x4fe>
			sw1_time = 0.0;
    ce8e:	eddf 8a5f 	vldr	s17, [pc, #380]	; d00c <main+0x75c>
    ce92:	e7a8      	b.n	cde6 <main+0x536>
			sw2_time = 0.0;
    ce94:	ed9f 9a5d 	vldr	s18, [pc, #372]	; d00c <main+0x75c>
    ce98:	e7bb      	b.n	ce12 <main+0x562>
			go_to_sleep_long_press();
    ce9a:	f002 fa63 	bl	f364 <go_to_sleep_long_press>
			was_sw2 = false;
    ce9e:	463e      	mov	r6, r7
			was_sw1 = false;
    cea0:	463d      	mov	r5, r7
    cea2:	e7d8      	b.n	ce56 <main+0x5a6>
		if (is_cc == 2 && (sw1_time > 0.5 && sw2_time < 0.1)) {
    cea4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    cea8:	eef4 8ae7 	vcmpe.f32	s17, s15
    ceac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ceb0:	ddd5      	ble.n	ce5e <main+0x5ae>
    ceb2:	ee19 0a10 	vmov	r0, s18
    ceb6:	f7f4 fad7 	bl	1468 <__aeabi_f2d>
    ceba:	a34b      	add	r3, pc, #300	; (adr r3, cfe8 <main+0x738>)
    cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
    cec0:	f7f4 fd9c 	bl	19fc <__aeabi_dcmplt>
    cec4:	2800      	cmp	r0, #0
    cec6:	d0ca      	beq.n	ce5e <main+0x5ae>
			js = 1.0;
    cec8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    cecc:	e7c7      	b.n	ce5e <main+0x5ae>
			imperial_toggled = false;
    cece:	2300      	movs	r3, #0
    ced0:	9302      	str	r3, [sp, #8]
		if (mote_locked || was_locked) {
    ced2:	4b4a      	ldr	r3, [pc, #296]	; (cffc <main+0x74c>)
    ced4:	781b      	ldrb	r3, [r3, #0]
    ced6:	b93b      	cbnz	r3, cee8 <main+0x638>
    ced8:	9b03      	ldr	r3, [sp, #12]
    ceda:	b13b      	cbz	r3, ceec <main+0x63c>
			js = 0.0;
    cedc:	ed9f 8a4b 	vldr	s16, [pc, #300]	; d00c <main+0x75c>
    cee0:	e004      	b.n	ceec <main+0x63c>
			imperial_toggled = false;
    cee2:	2300      	movs	r3, #0
    cee4:	9302      	str	r3, [sp, #8]
    cee6:	e7f4      	b.n	ced2 <main+0x622>
			js = 0.0;
    cee8:	ed9f 8a48 	vldr	s16, [pc, #288]	; d00c <main+0x75c>
		pl[index++] = MOTE_PACKET_BUTTONS;
    ceec:	2301      	movs	r3, #1
    ceee:	f88d 3014 	strb.w	r3, [sp, #20]
		pl[index++] = 128; // X
    cef2:	2380      	movs	r3, #128	; 0x80
    cef4:	f88d 3015 	strb.w	r3, [sp, #21]
		pl[index++] = (js + 1.0) * 127; // Y
    cef8:	ee18 0a10 	vmov	r0, s16
    cefc:	f7f4 fab4 	bl	1468 <__aeabi_f2d>
    cf00:	2200      	movs	r2, #0
    cf02:	4b43      	ldr	r3, [pc, #268]	; (d010 <main+0x760>)
    cf04:	f7f4 f952 	bl	11ac <__adddf3>
    cf08:	a339      	add	r3, pc, #228	; (adr r3, cff0 <main+0x740>)
    cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf0e:	f7f4 fb03 	bl	1518 <__aeabi_dmul>
    cf12:	f7f4 fd9b 	bl	1a4c <__aeabi_d2uiz>
    cf16:	f88d 0016 	strb.w	r0, [sp, #22]
		pl[index++] = (is_cc == 2) | (0 << 1) | (bt_push << 2) | (1 << 3) | (is_rev << 4);
    cf1a:	4b3a      	ldr	r3, [pc, #232]	; (d004 <main+0x754>)
    cf1c:	681b      	ldr	r3, [r3, #0]
    cf1e:	2b02      	cmp	r3, #2
    cf20:	bf14      	ite	ne
    cf22:	2300      	movne	r3, #0
    cf24:	2301      	moveq	r3, #1
    cf26:	f043 0308 	orr.w	r3, r3, #8
    cf2a:	4a3a      	ldr	r2, [pc, #232]	; (d014 <main+0x764>)
    cf2c:	7812      	ldrb	r2, [r2, #0]
    cf2e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    cf32:	f88d 3017 	strb.w	r3, [sp, #23]
		pl[index++] = 0;
    cf36:	2300      	movs	r3, #0
    cf38:	f88d 3018 	strb.w	r3, [sp, #24]
		pl[index++] = 0;
    cf3c:	f88d 3019 	strb.w	r3, [sp, #25]
		nrf_esb_stop_rx();
    cf40:	f003 f984 	bl	1024c <nrf_esb_stop_rx>
		rfhelp_send_data_crc((char*)pl, index);
    cf44:	2106      	movs	r1, #6
    cf46:	a805      	add	r0, sp, #20
    cf48:	f002 f8e6 	bl	f118 <rfhelp_send_data_crc>
		esb_wait_idle();
    cf4c:	f012 f9b7 	bl	1f2be <esb_wait_idle>
		nrf_esb_start_rx();
    cf50:	f003 f936 	bl	101c0 <nrf_esb_start_rx>
		k_msleep(20);
    cf54:	2014      	movs	r0, #20
    cf56:	f012 f9ab 	bl	1f2b0 <k_msleep>
		esb_no_rx_cnt++;
    cf5a:	4b2f      	ldr	r3, [pc, #188]	; (d018 <main+0x768>)
    cf5c:	681a      	ldr	r2, [r3, #0]
    cf5e:	3201      	adds	r2, #1
    cf60:	601a      	str	r2, [r3, #0]
		if (esb_no_rx_cnt >= 1000) {
    cf62:	681b      	ldr	r3, [r3, #0]
    cf64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    cf68:	db01      	blt.n	cf6e <main+0x6be>
			go_to_sleep();
    cf6a:	f002 f957 	bl	f21c <go_to_sleep>
	for(;;) {
    cf6e:	46d3      	mov	fp, sl
    cf70:	464f      	mov	r7, r9
		NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    cf72:	4b2a      	ldr	r3, [pc, #168]	; (d01c <main+0x76c>)
    cf74:	4a2a      	ldr	r2, [pc, #168]	; (d020 <main+0x770>)
    cf76:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		float js = v_js * 2.0 - 1.0;
    cf7a:	4b2a      	ldr	r3, [pc, #168]	; (d024 <main+0x774>)
    cf7c:	6818      	ldr	r0, [r3, #0]
    cf7e:	f7f4 fa73 	bl	1468 <__aeabi_f2d>
    cf82:	4602      	mov	r2, r0
    cf84:	460b      	mov	r3, r1
    cf86:	f7f4 f911 	bl	11ac <__adddf3>
    cf8a:	2200      	movs	r2, #0
    cf8c:	4b20      	ldr	r3, [pc, #128]	; (d010 <main+0x760>)
    cf8e:	f7f4 f90b 	bl	11a8 <__aeabi_dsub>
    cf92:	f7f4 fd7b 	bl	1a8c <__aeabi_d2f>
    cf96:	ee08 0a10 	vmov	s16, r0
		bool chdir_valid = fabsf(js) < 0.1 &&
    cf9a:	eef0 7ac8 	vabs.f32	s15, s16
    cf9e:	ee17 0a90 	vmov	r0, s15
    cfa2:	f7f4 fa61 	bl	1468 <__aeabi_f2d>
				(vesc_val.rx_cnt == 0 || fabsf(vesc_val.speed) < 1.0) &&
    cfa6:	a310      	add	r3, pc, #64	; (adr r3, cfe8 <main+0x738>)
    cfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfac:	f7f4 fd26 	bl	19fc <__aeabi_dcmplt>
    cfb0:	2800      	cmp	r0, #0
    cfb2:	f43f ad3c 	beq.w	ca2e <main+0x17e>
    cfb6:	4b12      	ldr	r3, [pc, #72]	; (d000 <main+0x750>)
    cfb8:	681b      	ldr	r3, [r3, #0]
		bool chdir_valid = fabsf(js) < 0.1 &&
    cfba:	2b00      	cmp	r3, #0
    cfbc:	f43f ad2f 	beq.w	ca1e <main+0x16e>
				(vesc_val.rx_cnt == 0 || fabsf(vesc_val.speed) < 1.0) &&
    cfc0:	4b0f      	ldr	r3, [pc, #60]	; (d000 <main+0x750>)
    cfc2:	edd3 7a02 	vldr	s15, [r3, #8]
    cfc6:	eef0 7ae7 	vabs.f32	s15, s15
    cfca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    cfce:	eef4 7ac7 	vcmpe.f32	s15, s14
    cfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cfd6:	f53f ad22 	bmi.w	ca1e <main+0x16e>
    cfda:	2300      	movs	r3, #0
    cfdc:	e528      	b.n	ca30 <main+0x180>
    cfde:	bf00      	nop
    cfe0:	47ae147b 	.word	0x47ae147b
    cfe4:	3f947ae1 	.word	0x3f947ae1
    cfe8:	9999999a 	.word	0x9999999a
    cfec:	3fb99999 	.word	0x3fb99999
    cff0:	00000000 	.word	0x00000000
    cff4:	405fc000 	.word	0x405fc000
    cff8:	50000300 	.word	0x50000300
    cffc:	20004ba7 	.word	0x20004ba7
    d000:	20002344 	.word	0x20002344
    d004:	20002328 	.word	0x20002328
    d008:	200022f0 	.word	0x200022f0
    d00c:	00000000 	.word	0x00000000
    d010:	3ff00000 	.word	0x3ff00000
    d014:	20004ba8 	.word	0x20004ba8
    d018:	2000233c 	.word	0x2000233c
    d01c:	40010000 	.word	0x40010000
    d020:	6e524635 	.word	0x6e524635
    d024:	20000444 	.word	0x20000444

0000d028 <ahrs_update_madgwick_imu>:
	att->q1 = q1;
	att->q2 = q2;
	att->q3 = q3;
}

void ahrs_update_madgwick_imu(float *gyroXYZ, float *accelXYZ, float dt, ATTITUDE_INFO *att) {
    d028:	b538      	push	{r3, r4, r5, lr}
    d02a:	ed2d 8b0e 	vpush	{d8-d14}
    d02e:	eeb0 ba40 	vmov.f32	s22, s0
    d032:	4614      	mov	r4, r2
	float accelNorm, recipNorm;
	float qDot1, qDot2, qDot3, qDot4;

	float q0 = att->q0;
    d034:	ed92 ca00 	vldr	s24, [r2]
	float q1 = att->q1;
    d038:	edd2 aa01 	vldr	s21, [r2, #4]
	float q2 = att->q2;
    d03c:	ed92 aa02 	vldr	s20, [r2, #8]
	float q3 = att->q3;
    d040:	edd2 ba03 	vldr	s23, [r2, #12]

	float gx = gyroXYZ[0];
    d044:	ed90 7a00 	vldr	s14, [r0]
	float gy = gyroXYZ[1];
    d048:	edd0 6a01 	vldr	s13, [r0, #4]
	float gz = gyroXYZ[2];
    d04c:	edd0 7a02 	vldr	s15, [r0, #8]

	float ax = accelXYZ[0];
    d050:	ed91 da00 	vldr	s26, [r1]
	float ay = accelXYZ[1];
    d054:	edd1 ca01 	vldr	s25, [r1, #4]
	float az = accelXYZ[2];
    d058:	edd1 da02 	vldr	s27, [r1, #8]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    d05c:	ee6a 9ac7 	vnmul.f32	s19, s21, s14
    d060:	ee2a 6a26 	vmul.f32	s12, s20, s13
    d064:	ee79 9ac6 	vsub.f32	s19, s19, s12
    d068:	ee2b 6aa7 	vmul.f32	s12, s23, s15
    d06c:	ee79 9ac6 	vsub.f32	s19, s19, s12
    d070:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    d074:	ee69 9a86 	vmul.f32	s19, s19, s12
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    d078:	ee2c 9a07 	vmul.f32	s18, s24, s14
    d07c:	ee6a 5a27 	vmul.f32	s11, s20, s15
    d080:	ee39 9a25 	vadd.f32	s18, s18, s11
    d084:	ee6b 5aa6 	vmul.f32	s11, s23, s13
    d088:	ee39 9a65 	vsub.f32	s18, s18, s11
    d08c:	ee29 9a06 	vmul.f32	s18, s18, s12
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    d090:	ee6c 8a26 	vmul.f32	s17, s24, s13
    d094:	ee6a 5aa7 	vmul.f32	s11, s21, s15
    d098:	ee78 8ae5 	vsub.f32	s17, s17, s11
    d09c:	ee6b 5a87 	vmul.f32	s11, s23, s14
    d0a0:	ee78 8aa5 	vadd.f32	s17, s17, s11
    d0a4:	ee68 8a86 	vmul.f32	s17, s17, s12
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    d0a8:	ee6c 7a27 	vmul.f32	s15, s24, s15
    d0ac:	ee6a 6aa6 	vmul.f32	s13, s21, s13
    d0b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
    d0b4:	ee2a 7a07 	vmul.f32	s14, s20, s14
    d0b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    d0bc:	ee27 8a86 	vmul.f32	s16, s15, s12

	accelNorm = sqrtf(ax * ax + ay * ay + az * az);
    d0c0:	ee2d ea0d 	vmul.f32	s28, s26, s26
    d0c4:	ee6c 7aac 	vmul.f32	s15, s25, s25
    d0c8:	ee3e ea27 	vadd.f32	s28, s28, s15
    d0cc:	ee6d 7aad 	vmul.f32	s15, s27, s27
    d0d0:	ee3e ea27 	vadd.f32	s28, s28, s15
    d0d4:	eeb0 0a4e 	vmov.f32	s0, s28
    d0d8:	f00d faba 	bl	1a650 <sqrtf>
    d0dc:	ee10 5a10 	vmov	r5, s0

	// Compute feedback only if accelerometer abs(vector)is not too small to avoid a division
	// by a small number
	if (accelNorm > 0.01) {
    d0e0:	4628      	mov	r0, r5
    d0e2:	f7f4 f9c1 	bl	1468 <__aeabi_f2d>
    d0e6:	a37b      	add	r3, pc, #492	; (adr r3, d2d4 <ahrs_update_madgwick_imu+0x2ac>)
    d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0ec:	f7f4 fca4 	bl	1a38 <__aeabi_dcmpgt>
    d0f0:	bb90      	cbnz	r0, d158 <ahrs_update_madgwick_imu+0x130>
		qDot3 -= BETA * s2 * accelConfidence;
		qDot4 -= BETA * s3 * accelConfidence;
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * dt;
    d0f2:	ee69 9a8b 	vmul.f32	s19, s19, s22
    d0f6:	ee79 9a8c 	vadd.f32	s19, s19, s24
	q1 += qDot2 * dt;
    d0fa:	ee29 9a0b 	vmul.f32	s18, s18, s22
    d0fe:	ee39 9a2a 	vadd.f32	s18, s18, s21
	q2 += qDot3 * dt;
    d102:	ee68 8a8b 	vmul.f32	s17, s17, s22
    d106:	ee78 8a8a 	vadd.f32	s17, s17, s20
	q3 += qDot4 * dt;
    d10a:	ee28 8a0b 	vmul.f32	s16, s16, s22
    d10e:	ee38 8a2b 	vadd.f32	s16, s16, s23

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    d112:	ee69 7aa9 	vmul.f32	s15, s19, s19
    d116:	ee29 7a09 	vmul.f32	s14, s18, s18
    d11a:	ee77 7a87 	vadd.f32	s15, s15, s14
    d11e:	ee28 7aa8 	vmul.f32	s14, s17, s17
    d122:	ee77 7a87 	vadd.f32	s15, s15, s14
    d126:	ee28 0a08 	vmul.f32	s0, s16, s16
    d12a:	ee37 0a80 	vadd.f32	s0, s15, s0
    d12e:	f012 fdbc 	bl	1fcaa <invSqrt>
	q0 *= recipNorm;
    d132:	ee69 9a80 	vmul.f32	s19, s19, s0
	q1 *= recipNorm;
    d136:	ee29 9a00 	vmul.f32	s18, s18, s0
	q2 *= recipNorm;
    d13a:	ee68 8a80 	vmul.f32	s17, s17, s0
	q3 *= recipNorm;
    d13e:	ee28 8a00 	vmul.f32	s16, s16, s0

	att->q0 = q0;
    d142:	edc4 9a00 	vstr	s19, [r4]
	att->q1 = q1;
    d146:	ed84 9a01 	vstr	s18, [r4, #4]
	att->q2 = q2;
    d14a:	edc4 8a02 	vstr	s17, [r4, #8]
	att->q3 = q3;
    d14e:	ed84 8a03 	vstr	s16, [r4, #12]
}
    d152:	ecbd 8b0e 	vpop	{d8-d14}
    d156:	bd38      	pop	{r3, r4, r5, pc}
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    d158:	eeb0 0a4e 	vmov.f32	s0, s28
    d15c:	f012 fda5 	bl	1fcaa <invSqrt>
		ax *= recipNorm;
    d160:	ee2d da00 	vmul.f32	s26, s26, s0
		ay *= recipNorm;
    d164:	ee2c 6a80 	vmul.f32	s12, s25, s0
		az *= recipNorm;
    d168:	ee2d 0a80 	vmul.f32	s0, s27, s0
		_2q0 = 2.0f * q0;
    d16c:	ee3c 2a0c 	vadd.f32	s4, s24, s24
		_2q1 = 2.0f * q1;
    d170:	ee7a 4aaa 	vadd.f32	s9, s21, s21
		_2q2 = 2.0f * q2;
    d174:	ee3a 5a0a 	vadd.f32	s10, s20, s20
		_2q3 = 2.0f * q3;
    d178:	ee3b 3aab 	vadd.f32	s6, s23, s23
		_4q0 = 4.0f * q0;
    d17c:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
    d180:	ee6c 0a25 	vmul.f32	s1, s24, s11
		_4q1 = 4.0f * q1;
    d184:	ee6a 1aa5 	vmul.f32	s3, s21, s11
		_4q2 = 4.0f * q2;
    d188:	ee2a 4a25 	vmul.f32	s8, s20, s11
		_8q1 = 8.0f * q1;
    d18c:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
    d190:	ee2a 1aa3 	vmul.f32	s2, s21, s7
		_8q2 = 8.0f * q2;
    d194:	ee6a 3a23 	vmul.f32	s7, s20, s7
		q0q0 = q0 * q0;
    d198:	ee6c 7a0c 	vmul.f32	s15, s24, s24
		q1q1 = q1 * q1;
    d19c:	ee2a 7aaa 	vmul.f32	s14, s21, s21
		q2q2 = q2 * q2;
    d1a0:	ee6a 6a0a 	vmul.f32	s13, s20, s20
		q3q3 = q3 * q3;
    d1a4:	ee6b 2aab 	vmul.f32	s5, s23, s23
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
    d1a8:	ee20 eaa6 	vmul.f32	s28, s1, s13
    d1ac:	ee6d ca05 	vmul.f32	s25, s26, s10
    d1b0:	ee3e ea2c 	vadd.f32	s28, s28, s25
    d1b4:	ee60 0a87 	vmul.f32	s1, s1, s14
    d1b8:	ee3e ea20 	vadd.f32	s28, s28, s1
    d1bc:	ee66 0a24 	vmul.f32	s1, s12, s9
    d1c0:	ee3e ea60 	vsub.f32	s28, s28, s1
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
    d1c4:	ee61 daa2 	vmul.f32	s27, s3, s5
    d1c8:	ee6d 0a03 	vmul.f32	s1, s26, s6
    d1cc:	ee7d dae0 	vsub.f32	s27, s27, s1
    d1d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
    d1d4:	ee67 0aaa 	vmul.f32	s1, s15, s21
    d1d8:	ee7d daa0 	vadd.f32	s27, s27, s1
    d1dc:	ee66 0a02 	vmul.f32	s1, s12, s4
    d1e0:	ee7d dae0 	vsub.f32	s27, s27, s1
    d1e4:	ee7d dae1 	vsub.f32	s27, s27, s3
    d1e8:	ee61 0a07 	vmul.f32	s1, s2, s14
    d1ec:	ee7d daa0 	vadd.f32	s27, s27, s1
    d1f0:	ee21 1a26 	vmul.f32	s2, s2, s13
    d1f4:	ee7d da81 	vadd.f32	s27, s27, s2
    d1f8:	ee60 1a21 	vmul.f32	s3, s0, s3
    d1fc:	ee7d daa1 	vadd.f32	s27, s27, s3
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
    d200:	ee67 7a8a 	vmul.f32	s15, s15, s20
    d204:	ee2d 2a02 	vmul.f32	s4, s26, s4
    d208:	ee77 7a82 	vadd.f32	s15, s15, s4
    d20c:	ee64 2a22 	vmul.f32	s5, s8, s5
    d210:	ee77 7aa2 	vadd.f32	s15, s15, s5
    d214:	ee26 3a03 	vmul.f32	s6, s12, s6
    d218:	ee77 7ac3 	vsub.f32	s15, s15, s6
    d21c:	ee77 7ac4 	vsub.f32	s15, s15, s8
    d220:	ee23 3a87 	vmul.f32	s6, s7, s14
    d224:	ee77 7a83 	vadd.f32	s15, s15, s6
    d228:	ee63 3aa6 	vmul.f32	s7, s7, s13
    d22c:	ee77 7aa3 	vadd.f32	s15, s15, s7
    d230:	ee20 0a04 	vmul.f32	s0, s0, s8
    d234:	ee77 ea80 	vadd.f32	s29, s15, s0
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
    d238:	ee27 7a25 	vmul.f32	s14, s14, s11
    d23c:	ee27 7a2b 	vmul.f32	s14, s14, s23
    d240:	ee2d da24 	vmul.f32	s26, s26, s9
    d244:	ee77 ca4d 	vsub.f32	s25, s14, s26
    d248:	ee66 6aa5 	vmul.f32	s13, s13, s11
    d24c:	ee66 6aab 	vmul.f32	s13, s13, s23
    d250:	ee3c 7aa6 	vadd.f32	s14, s25, s13
    d254:	ee66 ca05 	vmul.f32	s25, s12, s10
    d258:	ee77 ca6c 	vsub.f32	s25, s14, s25
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
    d25c:	ee6e 7a0e 	vmul.f32	s15, s28, s28
    d260:	ee2d 7aad 	vmul.f32	s14, s27, s27
    d264:	ee77 7a87 	vadd.f32	s15, s15, s14
    d268:	ee2e 7aae 	vmul.f32	s14, s29, s29
    d26c:	ee77 7a87 	vadd.f32	s15, s15, s14
    d270:	ee2c 0aac 	vmul.f32	s0, s25, s25
    d274:	ee37 0a80 	vadd.f32	s0, s15, s0
    d278:	f012 fd17 	bl	1fcaa <invSqrt>
		s0 *= recipNorm;
    d27c:	ee2e ea00 	vmul.f32	s28, s28, s0
		s1 *= recipNorm;
    d280:	ee6d da80 	vmul.f32	s27, s27, s0
		s2 *= recipNorm;
    d284:	ee6e ea80 	vmul.f32	s29, s29, s0
		s3 *= recipNorm;
    d288:	ee6c ca80 	vmul.f32	s25, s25, s0
		accelConfidence = calculateAccConfidence(accelNorm, &att->accMagP);
    d28c:	f104 001c 	add.w	r0, r4, #28
    d290:	ee00 5a10 	vmov	s0, r5
    d294:	f003 fa62 	bl	1075c <calculateAccConfidence>
		qDot1 -= BETA * s0 * accelConfidence;
    d298:	eddf 7a0d 	vldr	s15, [pc, #52]	; d2d0 <ahrs_update_madgwick_imu+0x2a8>
    d29c:	ee2e ea27 	vmul.f32	s28, s28, s15
    d2a0:	ee2e ea00 	vmul.f32	s28, s28, s0
    d2a4:	ee79 9ace 	vsub.f32	s19, s19, s28
		qDot2 -= BETA * s1 * accelConfidence;
    d2a8:	ee6d daa7 	vmul.f32	s27, s27, s15
    d2ac:	ee6d da80 	vmul.f32	s27, s27, s0
    d2b0:	ee39 9a6d 	vsub.f32	s18, s18, s27
		qDot3 -= BETA * s2 * accelConfidence;
    d2b4:	ee6e eaa7 	vmul.f32	s29, s29, s15
    d2b8:	ee6e ea80 	vmul.f32	s29, s29, s0
    d2bc:	ee78 8aee 	vsub.f32	s17, s17, s29
		qDot4 -= BETA * s3 * accelConfidence;
    d2c0:	ee6c caa7 	vmul.f32	s25, s25, s15
    d2c4:	ee2c 0a80 	vmul.f32	s0, s25, s0
    d2c8:	ee38 8a40 	vsub.f32	s16, s16, s0
    d2cc:	e711      	b.n	d0f2 <ahrs_update_madgwick_imu+0xca>
    d2ce:	bf00      	nop
    d2d0:	3dcccccd 	.word	0x3dcccccd
    d2d4:	47ae147b 	.word	0x47ae147b
    d2d8:	3f847ae1 	.word	0x3f847ae1
    d2dc:	00000000 	.word	0x00000000

0000d2e0 <imu_sample_thd>:
	sensor.accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
	sensor.gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
	bmi160_set_power_mode(&sensor);
}

static void imu_sample_thd(void) {
    d2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2e2:	ed2d 8b02 	vpush	{d8}
    d2e6:	b091      	sub	sp, #68	; 0x44
	imu_init(NRF_GPIO_PIN_MAP(1, 2), NRF_GPIO_PIN_MAP(1, 3));
    d2e8:	2123      	movs	r1, #35	; 0x23
    d2ea:	2022      	movs	r0, #34	; 0x22
    d2ec:	f003 fab2 	bl	10854 <imu_init>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    d2f0:	f016 f8c6 	bl	23480 <sys_clock_cycle_get_32>
    d2f4:	4604      	mov	r4, r0
    d2f6:	e067      	b.n	d3c8 <imu_sample_thd+0xe8>

	uint32_t start = k_cycle_get_32();

	for (;;) {
		if (going_to_sleep) {
			imu_sleep();
    d2f8:	f003 faa0 	bl	1083c <imu_sleep>
    reg->PIN_CNF[pin_number] = cnf;
    d2fc:	4b9e      	ldr	r3, [pc, #632]	; (d578 <imu_sample_thd+0x298>)
    d2fe:	2202      	movs	r2, #2
    d300:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
    d304:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

			nrf_gpio_cfg_default(NRF_GPIO_PIN_MAP(1, 2));
			nrf_gpio_cfg_default(NRF_GPIO_PIN_MAP(1, 3));

			for(;;) {
				k_msleep(100);
    d308:	2064      	movs	r0, #100	; 0x64
    d30a:	f012 fce4 	bl	1fcd6 <k_msleep>
			for(;;) {
    d30e:	e7fb      	b.n	d308 <imu_sample_thd+0x28>
		struct bmi160_sensor_data gyro;

		int8_t res = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);

		if (res != BMI160_OK) {
			k_msleep(10);
    d310:	200a      	movs	r0, #10
    d312:	f012 fce0 	bl	1fcd6 <k_msleep>
			continue;
    d316:	e057      	b.n	d3c8 <imu_sample_thd+0xe8>

			imu_samples_ready(s);
		}

#ifdef IMU_FLIP
		m_accel[0] = -tmp_accel[0];
    d318:	eddd 7a06 	vldr	s15, [sp, #24]
    d31c:	eef1 7a67 	vneg.f32	s15, s15
    d320:	4d96      	ldr	r5, [pc, #600]	; (d57c <imu_sample_thd+0x29c>)
    d322:	edc5 7a00 	vstr	s15, [r5]
		m_accel[1] = tmp_accel[1];
    d326:	9b07      	ldr	r3, [sp, #28]
    d328:	606b      	str	r3, [r5, #4]
		m_accel[2] = -tmp_accel[2];
    d32a:	eddd 7a08 	vldr	s15, [sp, #32]
    d32e:	eef1 7a67 	vneg.f32	s15, s15
    d332:	edc5 7a02 	vstr	s15, [r5, #8]

		m_gyro[0] = -tmp_gyro[0];
    d336:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
    d33a:	eef1 7a67 	vneg.f32	s15, s15
    d33e:	ee17 0a90 	vmov	r0, s15
    d342:	4b8f      	ldr	r3, [pc, #572]	; (d580 <imu_sample_thd+0x2a0>)
    d344:	edc3 7a00 	vstr	s15, [r3]
		m_gyro[1] = tmp_gyro[1];
    d348:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    d34a:	605f      	str	r7, [r3, #4]
		m_gyro[2] = -tmp_gyro[2];
    d34c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
    d350:	eef1 7a67 	vneg.f32	s15, s15
    d354:	ee17 6a90 	vmov	r6, s15
    d358:	edc3 7a02 	vstr	s15, [r3, #8]
		m_gyro[1] = tmp_gyro[1];
		m_gyro[2] = tmp_gyro[2];
#endif

		float gyro_rad[3];
		gyro_rad[0] = m_gyro[0] * M_PI / 180.0;
    d35c:	f7f4 f884 	bl	1468 <__aeabi_f2d>
    d360:	a383      	add	r3, pc, #524	; (adr r3, d570 <imu_sample_thd+0x290>)
    d362:	e9d3 2300 	ldrd	r2, r3, [r3]
    d366:	f7f4 f8d7 	bl	1518 <__aeabi_dmul>
    d36a:	2200      	movs	r2, #0
    d36c:	4b85      	ldr	r3, [pc, #532]	; (d584 <imu_sample_thd+0x2a4>)
    d36e:	f7f4 f9fd 	bl	176c <__aeabi_ddiv>
    d372:	f7f4 fb8b 	bl	1a8c <__aeabi_d2f>
    d376:	900c      	str	r0, [sp, #48]	; 0x30
		gyro_rad[1] = m_gyro[1] * M_PI / 180.0;
    d378:	4638      	mov	r0, r7
    d37a:	f7f4 f875 	bl	1468 <__aeabi_f2d>
    d37e:	a37c      	add	r3, pc, #496	; (adr r3, d570 <imu_sample_thd+0x290>)
    d380:	e9d3 2300 	ldrd	r2, r3, [r3]
    d384:	f7f4 f8c8 	bl	1518 <__aeabi_dmul>
    d388:	2200      	movs	r2, #0
    d38a:	4b7e      	ldr	r3, [pc, #504]	; (d584 <imu_sample_thd+0x2a4>)
    d38c:	f7f4 f9ee 	bl	176c <__aeabi_ddiv>
    d390:	f7f4 fb7c 	bl	1a8c <__aeabi_d2f>
    d394:	900d      	str	r0, [sp, #52]	; 0x34
		gyro_rad[2] = m_gyro[2] * M_PI / 180.0;
    d396:	4630      	mov	r0, r6
    d398:	f7f4 f866 	bl	1468 <__aeabi_f2d>
    d39c:	a374      	add	r3, pc, #464	; (adr r3, d570 <imu_sample_thd+0x290>)
    d39e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3a2:	f7f4 f8b9 	bl	1518 <__aeabi_dmul>
    d3a6:	2200      	movs	r2, #0
    d3a8:	4b76      	ldr	r3, [pc, #472]	; (d584 <imu_sample_thd+0x2a4>)
    d3aa:	f7f4 f9df 	bl	176c <__aeabi_ddiv>
    d3ae:	f7f4 fb6d 	bl	1a8c <__aeabi_d2f>
    d3b2:	900e      	str	r0, [sp, #56]	; 0x38

		ahrs_update_madgwick_imu(gyro_rad, m_accel, dt, (ATTITUDE_INFO*)&m_att);
    d3b4:	4a74      	ldr	r2, [pc, #464]	; (d588 <imu_sample_thd+0x2a8>)
    d3b6:	eeb0 0a48 	vmov.f32	s0, s16
    d3ba:	4629      	mov	r1, r5
    d3bc:	a80c      	add	r0, sp, #48	; 0x30
    d3be:	f7ff fe33 	bl	d028 <ahrs_update_madgwick_imu>

		k_msleep(10);
    d3c2:	200a      	movs	r0, #10
    d3c4:	f012 fc87 	bl	1fcd6 <k_msleep>
		if (going_to_sleep) {
    d3c8:	4b70      	ldr	r3, [pc, #448]	; (d58c <imu_sample_thd+0x2ac>)
    d3ca:	781b      	ldrb	r3, [r3, #0]
    d3cc:	2b00      	cmp	r3, #0
    d3ce:	d193      	bne.n	d2f8 <imu_sample_thd+0x18>
    d3d0:	f016 f856 	bl	23480 <sys_clock_cycle_get_32>
		float dt = ((float)k_cyc_to_ns_floor64(k_cycle_get_32() - start) / 1e9);
    d3d4:	1b03      	subs	r3, r0, r4
			return ((t * to_hz + off) / from_hz);
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    d3d6:	0bd8      	lsrs	r0, r3, #15
    d3d8:	4a6d      	ldr	r2, [pc, #436]	; (d590 <imu_sample_thd+0x2b0>)
    d3da:	fba0 0102 	umull	r0, r1, r0, r2
    d3de:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d3e2:	fba3 3202 	umull	r3, r2, r3, r2
    d3e6:	0bdb      	lsrs	r3, r3, #15
    d3e8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    d3ec:	18c0      	adds	r0, r0, r3
    d3ee:	f141 0100 	adc.w	r1, r1, #0
    d3f2:	f7f4 fc63 	bl	1cbc <__aeabi_ul2f>
    d3f6:	ee07 0a10 	vmov	s14, r0
    d3fa:	eddf 7a66 	vldr	s15, [pc, #408]	; d594 <imu_sample_thd+0x2b4>
    d3fe:	ee87 8a27 	vdiv.f32	s16, s14, s15
    d402:	f016 f83d 	bl	23480 <sys_clock_cycle_get_32>
    d406:	4604      	mov	r4, r0
		int8_t res = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
    d408:	4b63      	ldr	r3, [pc, #396]	; (d598 <imu_sample_thd+0x2b8>)
    d40a:	aa03      	add	r2, sp, #12
    d40c:	4669      	mov	r1, sp
    d40e:	2003      	movs	r0, #3
    d410:	f012 fc00 	bl	1fc14 <bmi160_get_sensor_data>
		if (res != BMI160_OK) {
    d414:	2800      	cmp	r0, #0
    d416:	f47f af7b 	bne.w	d310 <imu_sample_thd+0x30>
		tmp_accel[0] = (float)accel.x * 16.0 / 32768.0;
    d41a:	f9bd 0000 	ldrsh.w	r0, [sp]
    d41e:	ee07 0a90 	vmov	s15, r0
    d422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d426:	ee17 0a90 	vmov	r0, s15
    d42a:	f7f4 f81d 	bl	1468 <__aeabi_f2d>
    d42e:	2200      	movs	r2, #0
    d430:	4b5a      	ldr	r3, [pc, #360]	; (d59c <imu_sample_thd+0x2bc>)
    d432:	f7f4 f871 	bl	1518 <__aeabi_dmul>
    d436:	2200      	movs	r2, #0
    d438:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    d43c:	f7f4 f86c 	bl	1518 <__aeabi_dmul>
    d440:	f7f4 fb24 	bl	1a8c <__aeabi_d2f>
    d444:	9006      	str	r0, [sp, #24]
		tmp_accel[1] = (float)accel.y * 16.0 / 32768.0;
    d446:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
    d44a:	ee07 0a90 	vmov	s15, r0
    d44e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d452:	ee17 0a90 	vmov	r0, s15
    d456:	f7f4 f807 	bl	1468 <__aeabi_f2d>
    d45a:	2200      	movs	r2, #0
    d45c:	4b4f      	ldr	r3, [pc, #316]	; (d59c <imu_sample_thd+0x2bc>)
    d45e:	f7f4 f85b 	bl	1518 <__aeabi_dmul>
    d462:	2200      	movs	r2, #0
    d464:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    d468:	f7f4 f856 	bl	1518 <__aeabi_dmul>
    d46c:	f7f4 fb0e 	bl	1a8c <__aeabi_d2f>
    d470:	9007      	str	r0, [sp, #28]
		tmp_accel[2] = (float)accel.z * 16.0 / 32768.0;
    d472:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
    d476:	ee07 0a90 	vmov	s15, r0
    d47a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d47e:	ee17 0a90 	vmov	r0, s15
    d482:	f7f3 fff1 	bl	1468 <__aeabi_f2d>
    d486:	2200      	movs	r2, #0
    d488:	4b44      	ldr	r3, [pc, #272]	; (d59c <imu_sample_thd+0x2bc>)
    d48a:	f7f4 f845 	bl	1518 <__aeabi_dmul>
    d48e:	2200      	movs	r2, #0
    d490:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    d494:	f7f4 f840 	bl	1518 <__aeabi_dmul>
    d498:	f7f4 faf8 	bl	1a8c <__aeabi_d2f>
    d49c:	9008      	str	r0, [sp, #32]
		tmp_gyro[0] = (float)gyro.x * 2000.0 / 32768.0;
    d49e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
    d4a2:	ee07 0a90 	vmov	s15, r0
    d4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d4aa:	ee17 0a90 	vmov	r0, s15
    d4ae:	f7f3 ffdb 	bl	1468 <__aeabi_f2d>
    d4b2:	2200      	movs	r2, #0
    d4b4:	4b3a      	ldr	r3, [pc, #232]	; (d5a0 <imu_sample_thd+0x2c0>)
    d4b6:	f7f4 f82f 	bl	1518 <__aeabi_dmul>
    d4ba:	2200      	movs	r2, #0
    d4bc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    d4c0:	f7f4 f82a 	bl	1518 <__aeabi_dmul>
    d4c4:	f7f4 fae2 	bl	1a8c <__aeabi_d2f>
    d4c8:	9009      	str	r0, [sp, #36]	; 0x24
		tmp_gyro[1] = (float)gyro.y * 2000.0 / 32768.0;
    d4ca:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
    d4ce:	ee07 0a90 	vmov	s15, r0
    d4d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d4d6:	ee17 0a90 	vmov	r0, s15
    d4da:	f7f3 ffc5 	bl	1468 <__aeabi_f2d>
    d4de:	2200      	movs	r2, #0
    d4e0:	4b2f      	ldr	r3, [pc, #188]	; (d5a0 <imu_sample_thd+0x2c0>)
    d4e2:	f7f4 f819 	bl	1518 <__aeabi_dmul>
    d4e6:	2200      	movs	r2, #0
    d4e8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    d4ec:	f7f4 f814 	bl	1518 <__aeabi_dmul>
    d4f0:	f7f4 facc 	bl	1a8c <__aeabi_d2f>
    d4f4:	900a      	str	r0, [sp, #40]	; 0x28
		tmp_gyro[2] = (float)gyro.z * 2000.0 / 32768.0;
    d4f6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
    d4fa:	ee07 0a90 	vmov	s15, r0
    d4fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d502:	ee17 0a90 	vmov	r0, s15
    d506:	f7f3 ffaf 	bl	1468 <__aeabi_f2d>
    d50a:	2200      	movs	r2, #0
    d50c:	4b24      	ldr	r3, [pc, #144]	; (d5a0 <imu_sample_thd+0x2c0>)
    d50e:	f7f4 f803 	bl	1518 <__aeabi_dmul>
    d512:	2200      	movs	r2, #0
    d514:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    d518:	f7f3 fffe 	bl	1518 <__aeabi_dmul>
    d51c:	f7f4 fab6 	bl	1a8c <__aeabi_d2f>
    d520:	900b      	str	r0, [sp, #44]	; 0x2c
		if (imu_samples_ready) {
    d522:	4b20      	ldr	r3, [pc, #128]	; (d5a4 <imu_sample_thd+0x2c4>)
    d524:	681b      	ldr	r3, [r3, #0]
    d526:	2b00      	cmp	r3, #0
    d528:	f43f aef6 	beq.w	d318 <imu_sample_thd+0x38>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    d52c:	f017 fb7c 	bl	24c28 <z_impl_k_uptime_ticks>
			s.time_ms_today = k_uptime_get_32();
    d530:	900c      	str	r0, [sp, #48]	; 0x30
			s.accX = accel.x;
    d532:	f9bd 3000 	ldrsh.w	r3, [sp]
    d536:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			s.accY = accel.y;
    d53a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
    d53e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
			s.accZ = accel.z;
    d542:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    d546:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
			s.gyroX = gyro.x;
    d54a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    d54e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			s.gyroY = gyro.y;
    d552:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
    d556:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
			s.gyroZ = gyro.z;
    d55a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    d55e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
			imu_samples_ready(s);
    d562:	4b10      	ldr	r3, [pc, #64]	; (d5a4 <imu_sample_thd+0x2c4>)
    d564:	681d      	ldr	r5, [r3, #0]
    d566:	ab10      	add	r3, sp, #64	; 0x40
    d568:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    d56c:	47a8      	blx	r5
    d56e:	e6d3      	b.n	d318 <imu_sample_thd+0x38>
    d570:	54442d18 	.word	0x54442d18
    d574:	400921fb 	.word	0x400921fb
    d578:	50000300 	.word	0x50000300
    d57c:	20002700 	.word	0x20002700
    d580:	200026f4 	.word	0x200026f4
    d584:	40668000 	.word	0x40668000
    d588:	2000270c 	.word	0x2000270c
    d58c:	20004ba6 	.word	0x20004ba6
    d590:	3b9aca00 	.word	0x3b9aca00
    d594:	4e6e6b28 	.word	0x4e6e6b28
    d598:	200026cc 	.word	0x200026cc
    d59c:	40300000 	.word	0x40300000
    d5a0:	409f4000 	.word	0x409f4000
    d5a4:	200026bc 	.word	0x200026bc

0000d5a8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    d5a8:	b530      	push	{r4, r5, lr}
    d5aa:	b089      	sub	sp, #36	; 0x24
    d5ac:	4604      	mov	r4, r0
    d5ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    d5b0:	2000      	movs	r0, #0
    d5b2:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
	list->tail = NULL;
    d5b6:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    d5ba:	f504 7080 	add.w	r0, r4, #256	; 0x100
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    d5be:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	list->tail = (sys_dnode_t *)list;
    d5c2:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    d5c6:	f504 7084 	add.w	r0, r4, #264	; 0x108
	list->head = (sys_dnode_t *)list;
    d5ca:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	list->tail = (sys_dnode_t *)list;
    d5ce:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    d5d2:	b1ed      	cbz	r5, d610 <k_work_queue_start+0x68>
    d5d4:	7928      	ldrb	r0, [r5, #4]
    d5d6:	b9e8      	cbnz	r0, d614 <k_work_queue_start+0x6c>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    d5d8:	2001      	movs	r0, #1
	*flagp = flags;
    d5da:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d5de:	ed9f 7b10 	vldr	d7, [pc, #64]	; d620 <k_work_queue_start+0x78>
    d5e2:	ed8d 7b06 	vstr	d7, [sp, #24]
    d5e6:	2000      	movs	r0, #0
    d5e8:	9004      	str	r0, [sp, #16]
    d5ea:	9303      	str	r3, [sp, #12]
    d5ec:	9002      	str	r0, [sp, #8]
    d5ee:	9001      	str	r0, [sp, #4]
    d5f0:	9400      	str	r4, [sp, #0]
    d5f2:	4b0d      	ldr	r3, [pc, #52]	; (d628 <k_work_queue_start+0x80>)
    d5f4:	4620      	mov	r0, r4
    d5f6:	f016 ff32 	bl	2445e <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    d5fa:	b125      	cbz	r5, d606 <k_work_queue_start+0x5e>
    d5fc:	6829      	ldr	r1, [r5, #0]
    d5fe:	b111      	cbz	r1, d606 <k_work_queue_start+0x5e>
	return z_impl_k_thread_name_set(thread, str);
    d600:	4620      	mov	r0, r4
    d602:	f00b febf 	bl	19384 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    d606:	4620      	mov	r0, r4
    d608:	f016 ff19 	bl	2443e <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    d60c:	b009      	add	sp, #36	; 0x24
    d60e:	bd30      	pop	{r4, r5, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    d610:	2001      	movs	r0, #1
    d612:	e7e2      	b.n	d5da <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    d614:	f240 1001 	movw	r0, #257	; 0x101
    d618:	e7df      	b.n	d5da <k_work_queue_start+0x32>
    d61a:	bf00      	nop
    d61c:	f3af 8000 	nop.w
    d620:	ffffffff 	.word	0xffffffff
    d624:	ffffffff 	.word	0xffffffff
    d628:	000198fd 	.word	0x000198fd
    d62c:	00000000 	.word	0x00000000

0000d630 <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    d630:	b510      	push	{r4, lr}
    d632:	b082      	sub	sp, #8
    d634:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    d636:	2300      	movs	r3, #0
    d638:	3204      	adds	r2, #4
    d63a:	d20e      	bcs.n	d65a <z_heap_aligned_alloc+0x2a>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    d63c:	b97b      	cbnz	r3, d65e <z_heap_aligned_alloc+0x2e>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    d63e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; d668 <z_heap_aligned_alloc+0x38>
    d642:	ed8d 7b00 	vstr	d7, [sp]
    d646:	f041 0104 	orr.w	r1, r1, #4
    d64a:	4620      	mov	r0, r4
    d64c:	f016 fe16 	bl	2427c <k_heap_aligned_alloc>
	if (mem == NULL) {
    d650:	b108      	cbz	r0, d656 <z_heap_aligned_alloc+0x26>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
    d652:	f840 4b04 	str.w	r4, [r0], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    d656:	b002      	add	sp, #8
    d658:	bd10      	pop	{r4, pc}
    d65a:	2301      	movs	r3, #1
    d65c:	e7ee      	b.n	d63c <z_heap_aligned_alloc+0xc>
		return NULL;
    d65e:	2000      	movs	r0, #0
    d660:	e7f9      	b.n	d656 <z_heap_aligned_alloc+0x26>
    d662:	bf00      	nop
    d664:	f3af 8000 	nop.w
	...

0000d670 <_strtod_l>:
    d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d674:	b09d      	sub	sp, #116	; 0x74
    d676:	461f      	mov	r7, r3
    d678:	2300      	movs	r3, #0
    d67a:	9318      	str	r3, [sp, #96]	; 0x60
    d67c:	4b9a      	ldr	r3, [pc, #616]	; (d8e8 <_strtod_l+0x278>)
    d67e:	920f      	str	r2, [sp, #60]	; 0x3c
    d680:	681d      	ldr	r5, [r3, #0]
    d682:	4682      	mov	sl, r0
    d684:	4628      	mov	r0, r5
    d686:	460c      	mov	r4, r1
    d688:	f7fc fa69 	bl	9b5e <strlen>
    d68c:	f04f 0800 	mov.w	r8, #0
    d690:	4683      	mov	fp, r0
    d692:	f04f 0900 	mov.w	r9, #0
    d696:	4622      	mov	r2, r4
    d698:	9217      	str	r2, [sp, #92]	; 0x5c
    d69a:	7813      	ldrb	r3, [r2, #0]
    d69c:	2b2b      	cmp	r3, #43	; 0x2b
    d69e:	d03b      	beq.n	d718 <_strtod_l+0xa8>
    d6a0:	d82c      	bhi.n	d6fc <_strtod_l+0x8c>
    d6a2:	2b0d      	cmp	r3, #13
    d6a4:	d826      	bhi.n	d6f4 <_strtod_l+0x84>
    d6a6:	2b08      	cmp	r3, #8
    d6a8:	d826      	bhi.n	d6f8 <_strtod_l+0x88>
    d6aa:	2b00      	cmp	r3, #0
    d6ac:	d02f      	beq.n	d70e <_strtod_l+0x9e>
    d6ae:	2300      	movs	r3, #0
    d6b0:	930d      	str	r3, [sp, #52]	; 0x34
    d6b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    d6b4:	7833      	ldrb	r3, [r6, #0]
    d6b6:	2b30      	cmp	r3, #48	; 0x30
    d6b8:	d174      	bne.n	d7a4 <_strtod_l+0x134>
    d6ba:	7873      	ldrb	r3, [r6, #1]
    d6bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    d6c0:	2b58      	cmp	r3, #88	; 0x58
    d6c2:	d165      	bne.n	d790 <_strtod_l+0x120>
    d6c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d6c6:	9301      	str	r3, [sp, #4]
    d6c8:	ab18      	add	r3, sp, #96	; 0x60
    d6ca:	9300      	str	r3, [sp, #0]
    d6cc:	4a87      	ldr	r2, [pc, #540]	; (d8ec <_strtod_l+0x27c>)
    d6ce:	9702      	str	r7, [sp, #8]
    d6d0:	ab19      	add	r3, sp, #100	; 0x64
    d6d2:	a917      	add	r1, sp, #92	; 0x5c
    d6d4:	4650      	mov	r0, sl
    d6d6:	f00d feb5 	bl	1b444 <__gethex>
    d6da:	f010 0507 	ands.w	r5, r0, #7
    d6de:	4604      	mov	r4, r0
    d6e0:	d035      	beq.n	d74e <_strtod_l+0xde>
    d6e2:	2d06      	cmp	r5, #6
    d6e4:	d11a      	bne.n	d71c <_strtod_l+0xac>
    d6e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d6e8:	b10b      	cbz	r3, d6ee <_strtod_l+0x7e>
    d6ea:	3601      	adds	r6, #1
    d6ec:	601e      	str	r6, [r3, #0]
    d6ee:	4642      	mov	r2, r8
    d6f0:	464b      	mov	r3, r9
    d6f2:	e037      	b.n	d764 <_strtod_l+0xf4>
    d6f4:	2b20      	cmp	r3, #32
    d6f6:	d1da      	bne.n	d6ae <_strtod_l+0x3e>
    d6f8:	3201      	adds	r2, #1
    d6fa:	e7cd      	b.n	d698 <_strtod_l+0x28>
    d6fc:	2b2d      	cmp	r3, #45	; 0x2d
    d6fe:	d1d6      	bne.n	d6ae <_strtod_l+0x3e>
    d700:	2301      	movs	r3, #1
    d702:	930d      	str	r3, [sp, #52]	; 0x34
    d704:	1c53      	adds	r3, r2, #1
    d706:	9317      	str	r3, [sp, #92]	; 0x5c
    d708:	7853      	ldrb	r3, [r2, #1]
    d70a:	2b00      	cmp	r3, #0
    d70c:	d1d1      	bne.n	d6b2 <_strtod_l+0x42>
    d70e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d710:	2b00      	cmp	r3, #0
    d712:	d0ec      	beq.n	d6ee <_strtod_l+0x7e>
    d714:	601c      	str	r4, [r3, #0]
    d716:	e7ea      	b.n	d6ee <_strtod_l+0x7e>
    d718:	2300      	movs	r3, #0
    d71a:	e7f2      	b.n	d702 <_strtod_l+0x92>
    d71c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d71e:	b13a      	cbz	r2, d730 <_strtod_l+0xc0>
    d720:	2135      	movs	r1, #53	; 0x35
    d722:	a81a      	add	r0, sp, #104	; 0x68
    d724:	f017 ff4f 	bl	255c6 <__copybits>
    d728:	9918      	ldr	r1, [sp, #96]	; 0x60
    d72a:	4650      	mov	r0, sl
    d72c:	f00e f90a 	bl	1b944 <_Bfree>
    d730:	3d01      	subs	r5, #1
    d732:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d734:	2d04      	cmp	r5, #4
    d736:	d806      	bhi.n	d746 <_strtod_l+0xd6>
    d738:	e8df f005 	tbb	[pc, r5]
    d73c:	25220319 	.word	0x25220319
    d740:	19          	.byte	0x19
    d741:	00          	.byte	0x00
    d742:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    d746:	0721      	lsls	r1, r4, #28
    d748:	d501      	bpl.n	d74e <_strtod_l+0xde>
    d74a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    d74e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d750:	b113      	cbz	r3, d758 <_strtod_l+0xe8>
    d752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d756:	6013      	str	r3, [r2, #0]
    d758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d75a:	2b00      	cmp	r3, #0
    d75c:	d0c7      	beq.n	d6ee <_strtod_l+0x7e>
    d75e:	4642      	mov	r2, r8
    d760:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    d764:	ec43 2b10 	vmov	d0, r2, r3
    d768:	b01d      	add	sp, #116	; 0x74
    d76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d76e:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    d772:	f202 4233 	addw	r2, r2, #1075	; 0x433
    d776:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    d77a:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    d77e:	e7e2      	b.n	d746 <_strtod_l+0xd6>
    d780:	f8df 916c 	ldr.w	r9, [pc, #364]	; d8f0 <_strtod_l+0x280>
    d784:	e7df      	b.n	d746 <_strtod_l+0xd6>
    d786:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    d78a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    d78e:	e7da      	b.n	d746 <_strtod_l+0xd6>
    d790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d792:	1c5a      	adds	r2, r3, #1
    d794:	9217      	str	r2, [sp, #92]	; 0x5c
    d796:	785b      	ldrb	r3, [r3, #1]
    d798:	2b30      	cmp	r3, #48	; 0x30
    d79a:	d0f9      	beq.n	d790 <_strtod_l+0x120>
    d79c:	2b00      	cmp	r3, #0
    d79e:	d0d6      	beq.n	d74e <_strtod_l+0xde>
    d7a0:	2301      	movs	r3, #1
    d7a2:	e000      	b.n	d7a6 <_strtod_l+0x136>
    d7a4:	2300      	movs	r3, #0
    d7a6:	2700      	movs	r7, #0
    d7a8:	e9cd 7705 	strd	r7, r7, [sp, #20]
    d7ac:	9304      	str	r3, [sp, #16]
    d7ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d7b0:	930a      	str	r3, [sp, #40]	; 0x28
    d7b2:	220a      	movs	r2, #10
    d7b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d7b6:	7806      	ldrb	r6, [r0, #0]
    d7b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    d7bc:	b2d9      	uxtb	r1, r3
    d7be:	2909      	cmp	r1, #9
    d7c0:	d924      	bls.n	d80c <_strtod_l+0x19c>
    d7c2:	465a      	mov	r2, fp
    d7c4:	4629      	mov	r1, r5
    d7c6:	f017 ffab 	bl	25720 <strncmp>
    d7ca:	2800      	cmp	r0, #0
    d7cc:	d02d      	beq.n	d82a <_strtod_l+0x1ba>
    d7ce:	2000      	movs	r0, #0
    d7d0:	9d05      	ldr	r5, [sp, #20]
    d7d2:	4632      	mov	r2, r6
    d7d4:	4683      	mov	fp, r0
    d7d6:	4603      	mov	r3, r0
    d7d8:	2a65      	cmp	r2, #101	; 0x65
    d7da:	d001      	beq.n	d7e0 <_strtod_l+0x170>
    d7dc:	2a45      	cmp	r2, #69	; 0x45
    d7de:	d113      	bne.n	d808 <_strtod_l+0x198>
    d7e0:	b91d      	cbnz	r5, d7ea <_strtod_l+0x17a>
    d7e2:	9a04      	ldr	r2, [sp, #16]
    d7e4:	4302      	orrs	r2, r0
    d7e6:	d092      	beq.n	d70e <_strtod_l+0x9e>
    d7e8:	2500      	movs	r5, #0
    d7ea:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    d7ec:	1c62      	adds	r2, r4, #1
    d7ee:	9217      	str	r2, [sp, #92]	; 0x5c
    d7f0:	7862      	ldrb	r2, [r4, #1]
    d7f2:	2a2b      	cmp	r2, #43	; 0x2b
    d7f4:	d06f      	beq.n	d8d6 <_strtod_l+0x266>
    d7f6:	2a2d      	cmp	r2, #45	; 0x2d
    d7f8:	d073      	beq.n	d8e2 <_strtod_l+0x272>
    d7fa:	f04f 0c00 	mov.w	ip, #0
    d7fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    d802:	2909      	cmp	r1, #9
    d804:	d97a      	bls.n	d8fc <_strtod_l+0x28c>
    d806:	9417      	str	r4, [sp, #92]	; 0x5c
    d808:	2600      	movs	r6, #0
    d80a:	e099      	b.n	d940 <_strtod_l+0x2d0>
    d80c:	9905      	ldr	r1, [sp, #20]
    d80e:	2908      	cmp	r1, #8
    d810:	bfdd      	ittte	le
    d812:	9906      	ldrle	r1, [sp, #24]
    d814:	fb02 3301 	mlale	r3, r2, r1, r3
    d818:	9306      	strle	r3, [sp, #24]
    d81a:	fb02 3707 	mlagt	r7, r2, r7, r3
    d81e:	9b05      	ldr	r3, [sp, #20]
    d820:	3001      	adds	r0, #1
    d822:	3301      	adds	r3, #1
    d824:	9305      	str	r3, [sp, #20]
    d826:	9017      	str	r0, [sp, #92]	; 0x5c
    d828:	e7c4      	b.n	d7b4 <_strtod_l+0x144>
    d82a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d82c:	eb03 020b 	add.w	r2, r3, fp
    d830:	9217      	str	r2, [sp, #92]	; 0x5c
    d832:	f813 200b 	ldrb.w	r2, [r3, fp]
    d836:	9b05      	ldr	r3, [sp, #20]
    d838:	b3ab      	cbz	r3, d8a6 <_strtod_l+0x236>
    d83a:	4683      	mov	fp, r0
    d83c:	461d      	mov	r5, r3
    d83e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    d842:	2b09      	cmp	r3, #9
    d844:	d912      	bls.n	d86c <_strtod_l+0x1fc>
    d846:	2301      	movs	r3, #1
    d848:	e7c6      	b.n	d7d8 <_strtod_l+0x168>
    d84a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d84c:	1c5a      	adds	r2, r3, #1
    d84e:	9217      	str	r2, [sp, #92]	; 0x5c
    d850:	785a      	ldrb	r2, [r3, #1]
    d852:	3001      	adds	r0, #1
    d854:	2a30      	cmp	r2, #48	; 0x30
    d856:	d0f8      	beq.n	d84a <_strtod_l+0x1da>
    d858:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    d85c:	2b08      	cmp	r3, #8
    d85e:	f200 84ef 	bhi.w	e240 <_strtod_l+0xbd0>
    d862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d864:	930a      	str	r3, [sp, #40]	; 0x28
    d866:	4683      	mov	fp, r0
    d868:	2000      	movs	r0, #0
    d86a:	4605      	mov	r5, r0
    d86c:	3a30      	subs	r2, #48	; 0x30
    d86e:	f100 0301 	add.w	r3, r0, #1
    d872:	d012      	beq.n	d89a <_strtod_l+0x22a>
    d874:	449b      	add	fp, r3
    d876:	eb00 0c05 	add.w	ip, r0, r5
    d87a:	462b      	mov	r3, r5
    d87c:	210a      	movs	r1, #10
    d87e:	4563      	cmp	r3, ip
    d880:	d113      	bne.n	d8aa <_strtod_l+0x23a>
    d882:	182b      	adds	r3, r5, r0
    d884:	2b08      	cmp	r3, #8
    d886:	f105 0501 	add.w	r5, r5, #1
    d88a:	4405      	add	r5, r0
    d88c:	dc19      	bgt.n	d8c2 <_strtod_l+0x252>
    d88e:	9906      	ldr	r1, [sp, #24]
    d890:	230a      	movs	r3, #10
    d892:	fb03 2301 	mla	r3, r3, r1, r2
    d896:	9306      	str	r3, [sp, #24]
    d898:	2300      	movs	r3, #0
    d89a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d89c:	1c51      	adds	r1, r2, #1
    d89e:	9117      	str	r1, [sp, #92]	; 0x5c
    d8a0:	7852      	ldrb	r2, [r2, #1]
    d8a2:	4618      	mov	r0, r3
    d8a4:	e7cb      	b.n	d83e <_strtod_l+0x1ce>
    d8a6:	9805      	ldr	r0, [sp, #20]
    d8a8:	e7d4      	b.n	d854 <_strtod_l+0x1e4>
    d8aa:	2b08      	cmp	r3, #8
    d8ac:	f103 0301 	add.w	r3, r3, #1
    d8b0:	dc03      	bgt.n	d8ba <_strtod_l+0x24a>
    d8b2:	9e06      	ldr	r6, [sp, #24]
    d8b4:	434e      	muls	r6, r1
    d8b6:	9606      	str	r6, [sp, #24]
    d8b8:	e7e1      	b.n	d87e <_strtod_l+0x20e>
    d8ba:	2b10      	cmp	r3, #16
    d8bc:	bfd8      	it	le
    d8be:	434f      	mulle	r7, r1
    d8c0:	e7dd      	b.n	d87e <_strtod_l+0x20e>
    d8c2:	2b0f      	cmp	r3, #15
    d8c4:	bfdc      	itt	le
    d8c6:	230a      	movle	r3, #10
    d8c8:	fb03 2707 	mlale	r7, r3, r7, r2
    d8cc:	e7e4      	b.n	d898 <_strtod_l+0x228>
    d8ce:	f04f 0b00 	mov.w	fp, #0
    d8d2:	2301      	movs	r3, #1
    d8d4:	e785      	b.n	d7e2 <_strtod_l+0x172>
    d8d6:	f04f 0c00 	mov.w	ip, #0
    d8da:	1ca2      	adds	r2, r4, #2
    d8dc:	9217      	str	r2, [sp, #92]	; 0x5c
    d8de:	78a2      	ldrb	r2, [r4, #2]
    d8e0:	e78d      	b.n	d7fe <_strtod_l+0x18e>
    d8e2:	f04f 0c01 	mov.w	ip, #1
    d8e6:	e7f8      	b.n	d8da <_strtod_l+0x26a>
    d8e8:	00026bb8 	.word	0x00026bb8
    d8ec:	00026ba0 	.word	0x00026ba0
    d8f0:	7ff00000 	.word	0x7ff00000
    d8f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d8f6:	1c51      	adds	r1, r2, #1
    d8f8:	9117      	str	r1, [sp, #92]	; 0x5c
    d8fa:	7852      	ldrb	r2, [r2, #1]
    d8fc:	2a30      	cmp	r2, #48	; 0x30
    d8fe:	d0f9      	beq.n	d8f4 <_strtod_l+0x284>
    d900:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    d904:	2908      	cmp	r1, #8
    d906:	f63f af7f 	bhi.w	d808 <_strtod_l+0x198>
    d90a:	3a30      	subs	r2, #48	; 0x30
    d90c:	9207      	str	r2, [sp, #28]
    d90e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d910:	920c      	str	r2, [sp, #48]	; 0x30
    d912:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d914:	1c56      	adds	r6, r2, #1
    d916:	9617      	str	r6, [sp, #92]	; 0x5c
    d918:	7852      	ldrb	r2, [r2, #1]
    d91a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    d91e:	f1be 0f09 	cmp.w	lr, #9
    d922:	d938      	bls.n	d996 <_strtod_l+0x326>
    d924:	990c      	ldr	r1, [sp, #48]	; 0x30
    d926:	1a76      	subs	r6, r6, r1
    d928:	2e08      	cmp	r6, #8
    d92a:	f644 661f 	movw	r6, #19999	; 0x4e1f
    d92e:	dc03      	bgt.n	d938 <_strtod_l+0x2c8>
    d930:	9907      	ldr	r1, [sp, #28]
    d932:	428e      	cmp	r6, r1
    d934:	bfa8      	it	ge
    d936:	460e      	movge	r6, r1
    d938:	f1bc 0f00 	cmp.w	ip, #0
    d93c:	d000      	beq.n	d940 <_strtod_l+0x2d0>
    d93e:	4276      	negs	r6, r6
    d940:	2d00      	cmp	r5, #0
    d942:	d14f      	bne.n	d9e4 <_strtod_l+0x374>
    d944:	9904      	ldr	r1, [sp, #16]
    d946:	4308      	orrs	r0, r1
    d948:	f47f af01 	bne.w	d74e <_strtod_l+0xde>
    d94c:	2b00      	cmp	r3, #0
    d94e:	f47f aede 	bne.w	d70e <_strtod_l+0x9e>
    d952:	2a69      	cmp	r2, #105	; 0x69
    d954:	d029      	beq.n	d9aa <_strtod_l+0x33a>
    d956:	dc26      	bgt.n	d9a6 <_strtod_l+0x336>
    d958:	2a49      	cmp	r2, #73	; 0x49
    d95a:	d026      	beq.n	d9aa <_strtod_l+0x33a>
    d95c:	2a4e      	cmp	r2, #78	; 0x4e
    d95e:	f47f aed6 	bne.w	d70e <_strtod_l+0x9e>
    d962:	499b      	ldr	r1, [pc, #620]	; (dbd0 <_strtod_l+0x560>)
    d964:	a817      	add	r0, sp, #92	; 0x5c
    d966:	f017 fcd1 	bl	2530c <__match>
    d96a:	2800      	cmp	r0, #0
    d96c:	f43f aecf 	beq.w	d70e <_strtod_l+0x9e>
    d970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d972:	781b      	ldrb	r3, [r3, #0]
    d974:	2b28      	cmp	r3, #40	; 0x28
    d976:	d12f      	bne.n	d9d8 <_strtod_l+0x368>
    d978:	4996      	ldr	r1, [pc, #600]	; (dbd4 <_strtod_l+0x564>)
    d97a:	aa1a      	add	r2, sp, #104	; 0x68
    d97c:	a817      	add	r0, sp, #92	; 0x5c
    d97e:	f017 fcd9 	bl	25334 <__hexnan>
    d982:	2805      	cmp	r0, #5
    d984:	d128      	bne.n	d9d8 <_strtod_l+0x368>
    d986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d988:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    d98c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    d990:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    d994:	e6db      	b.n	d74e <_strtod_l+0xde>
    d996:	9e07      	ldr	r6, [sp, #28]
    d998:	210a      	movs	r1, #10
    d99a:	fb01 2106 	mla	r1, r1, r6, r2
    d99e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    d9a2:	9207      	str	r2, [sp, #28]
    d9a4:	e7b5      	b.n	d912 <_strtod_l+0x2a2>
    d9a6:	2a6e      	cmp	r2, #110	; 0x6e
    d9a8:	e7d9      	b.n	d95e <_strtod_l+0x2ee>
    d9aa:	498b      	ldr	r1, [pc, #556]	; (dbd8 <_strtod_l+0x568>)
    d9ac:	a817      	add	r0, sp, #92	; 0x5c
    d9ae:	f017 fcad 	bl	2530c <__match>
    d9b2:	2800      	cmp	r0, #0
    d9b4:	f43f aeab 	beq.w	d70e <_strtod_l+0x9e>
    d9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d9ba:	4988      	ldr	r1, [pc, #544]	; (dbdc <_strtod_l+0x56c>)
    d9bc:	3b01      	subs	r3, #1
    d9be:	a817      	add	r0, sp, #92	; 0x5c
    d9c0:	9317      	str	r3, [sp, #92]	; 0x5c
    d9c2:	f017 fca3 	bl	2530c <__match>
    d9c6:	b910      	cbnz	r0, d9ce <_strtod_l+0x35e>
    d9c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d9ca:	3301      	adds	r3, #1
    d9cc:	9317      	str	r3, [sp, #92]	; 0x5c
    d9ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; dbec <_strtod_l+0x57c>
    d9d2:	f04f 0800 	mov.w	r8, #0
    d9d6:	e6ba      	b.n	d74e <_strtod_l+0xde>
    d9d8:	4881      	ldr	r0, [pc, #516]	; (dbe0 <_strtod_l+0x570>)
    d9da:	f001 fa79 	bl	eed0 <nan>
    d9de:	ec59 8b10 	vmov	r8, r9, d0
    d9e2:	e6b4      	b.n	d74e <_strtod_l+0xde>
    d9e4:	eba6 030b 	sub.w	r3, r6, fp
    d9e8:	930c      	str	r3, [sp, #48]	; 0x30
    d9ea:	9b05      	ldr	r3, [sp, #20]
    d9ec:	9806      	ldr	r0, [sp, #24]
    d9ee:	2b00      	cmp	r3, #0
    d9f0:	bf08      	it	eq
    d9f2:	462b      	moveq	r3, r5
    d9f4:	2d10      	cmp	r5, #16
    d9f6:	9305      	str	r3, [sp, #20]
    d9f8:	462c      	mov	r4, r5
    d9fa:	bfa8      	it	ge
    d9fc:	2410      	movge	r4, #16
    d9fe:	f7f3 fd11 	bl	1424 <__aeabi_ui2d>
    da02:	2d09      	cmp	r5, #9
    da04:	4680      	mov	r8, r0
    da06:	4689      	mov	r9, r1
    da08:	dc13      	bgt.n	da32 <_strtod_l+0x3c2>
    da0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    da0c:	2b00      	cmp	r3, #0
    da0e:	f43f ae9e 	beq.w	d74e <_strtod_l+0xde>
    da12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    da14:	dd78      	ble.n	db08 <_strtod_l+0x498>
    da16:	2b16      	cmp	r3, #22
    da18:	dc45      	bgt.n	daa6 <_strtod_l+0x436>
    da1a:	4972      	ldr	r1, [pc, #456]	; (dbe4 <_strtod_l+0x574>)
    da1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    da20:	e9d1 0100 	ldrd	r0, r1, [r1]
    da24:	4642      	mov	r2, r8
    da26:	464b      	mov	r3, r9
    da28:	f7f3 fd76 	bl	1518 <__aeabi_dmul>
    da2c:	4680      	mov	r8, r0
    da2e:	4689      	mov	r9, r1
    da30:	e68d      	b.n	d74e <_strtod_l+0xde>
    da32:	4b6c      	ldr	r3, [pc, #432]	; (dbe4 <_strtod_l+0x574>)
    da34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    da38:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    da3c:	f7f3 fd6c 	bl	1518 <__aeabi_dmul>
    da40:	4680      	mov	r8, r0
    da42:	4638      	mov	r0, r7
    da44:	4689      	mov	r9, r1
    da46:	f7f3 fced 	bl	1424 <__aeabi_ui2d>
    da4a:	4602      	mov	r2, r0
    da4c:	460b      	mov	r3, r1
    da4e:	4640      	mov	r0, r8
    da50:	4649      	mov	r1, r9
    da52:	f7f3 fbab 	bl	11ac <__adddf3>
    da56:	2d0f      	cmp	r5, #15
    da58:	4680      	mov	r8, r0
    da5a:	4689      	mov	r9, r1
    da5c:	ddd5      	ble.n	da0a <_strtod_l+0x39a>
    da5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    da60:	1b2c      	subs	r4, r5, r4
    da62:	441c      	add	r4, r3
    da64:	2c00      	cmp	r4, #0
    da66:	dc25      	bgt.n	dab4 <_strtod_l+0x444>
    da68:	f000 80a2 	beq.w	dbb0 <_strtod_l+0x540>
    da6c:	4264      	negs	r4, r4
    da6e:	f014 020f 	ands.w	r2, r4, #15
    da72:	d00a      	beq.n	da8a <_strtod_l+0x41a>
    da74:	4b5b      	ldr	r3, [pc, #364]	; (dbe4 <_strtod_l+0x574>)
    da76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    da7a:	4640      	mov	r0, r8
    da7c:	4649      	mov	r1, r9
    da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    da82:	f7f3 fe73 	bl	176c <__aeabi_ddiv>
    da86:	4680      	mov	r8, r0
    da88:	4689      	mov	r9, r1
    da8a:	1124      	asrs	r4, r4, #4
    da8c:	f000 8090 	beq.w	dbb0 <_strtod_l+0x540>
    da90:	2c1f      	cmp	r4, #31
    da92:	f340 80b1 	ble.w	dbf8 <_strtod_l+0x588>
    da96:	2322      	movs	r3, #34	; 0x22
    da98:	f04f 0800 	mov.w	r8, #0
    da9c:	f04f 0900 	mov.w	r9, #0
    daa0:	f8ca 3000 	str.w	r3, [sl]
    daa4:	e653      	b.n	d74e <_strtod_l+0xde>
    daa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    daa8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    daac:	4293      	cmp	r3, r2
    daae:	da19      	bge.n	dae4 <_strtod_l+0x474>
    dab0:	1b2c      	subs	r4, r5, r4
    dab2:	4414      	add	r4, r2
    dab4:	f014 030f 	ands.w	r3, r4, #15
    dab8:	d00a      	beq.n	dad0 <_strtod_l+0x460>
    daba:	494a      	ldr	r1, [pc, #296]	; (dbe4 <_strtod_l+0x574>)
    dabc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    dac0:	4642      	mov	r2, r8
    dac2:	464b      	mov	r3, r9
    dac4:	e9d1 0100 	ldrd	r0, r1, [r1]
    dac8:	f7f3 fd26 	bl	1518 <__aeabi_dmul>
    dacc:	4680      	mov	r8, r0
    dace:	4689      	mov	r9, r1
    dad0:	f034 040f 	bics.w	r4, r4, #15
    dad4:	d06c      	beq.n	dbb0 <_strtod_l+0x540>
    dad6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    dada:	dd41      	ble.n	db60 <_strtod_l+0x4f0>
    dadc:	2322      	movs	r3, #34	; 0x22
    dade:	f8ca 3000 	str.w	r3, [sl]
    dae2:	e774      	b.n	d9ce <_strtod_l+0x35e>
    dae4:	4c3f      	ldr	r4, [pc, #252]	; (dbe4 <_strtod_l+0x574>)
    dae6:	f1c5 050f 	rsb	r5, r5, #15
    daea:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    daee:	4642      	mov	r2, r8
    daf0:	464b      	mov	r3, r9
    daf2:	e9d1 0100 	ldrd	r0, r1, [r1]
    daf6:	f7f3 fd0f 	bl	1518 <__aeabi_dmul>
    dafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dafc:	1b5d      	subs	r5, r3, r5
    dafe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    db02:	e9d4 2300 	ldrd	r2, r3, [r4]
    db06:	e78f      	b.n	da28 <_strtod_l+0x3b8>
    db08:	3316      	adds	r3, #22
    db0a:	dba8      	blt.n	da5e <_strtod_l+0x3ee>
    db0c:	4b35      	ldr	r3, [pc, #212]	; (dbe4 <_strtod_l+0x574>)
    db0e:	ebab 0206 	sub.w	r2, fp, r6
    db12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    db16:	e9d3 2300 	ldrd	r2, r3, [r3]
    db1a:	4640      	mov	r0, r8
    db1c:	4649      	mov	r1, r9
    db1e:	f7f3 fe25 	bl	176c <__aeabi_ddiv>
    db22:	e783      	b.n	da2c <_strtod_l+0x3bc>
    db24:	2300      	movs	r3, #0
    db26:	9306      	str	r3, [sp, #24]
    db28:	2322      	movs	r3, #34	; 0x22
    db2a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; dbec <_strtod_l+0x57c>
    db2e:	f8ca 3000 	str.w	r3, [sl]
    db32:	f04f 0800 	mov.w	r8, #0
    db36:	9918      	ldr	r1, [sp, #96]	; 0x60
    db38:	4650      	mov	r0, sl
    db3a:	f00d ff03 	bl	1b944 <_Bfree>
    db3e:	9906      	ldr	r1, [sp, #24]
    db40:	4650      	mov	r0, sl
    db42:	f00d feff 	bl	1b944 <_Bfree>
    db46:	9905      	ldr	r1, [sp, #20]
    db48:	4650      	mov	r0, sl
    db4a:	f00d fefb 	bl	1b944 <_Bfree>
    db4e:	9910      	ldr	r1, [sp, #64]	; 0x40
    db50:	4650      	mov	r0, sl
    db52:	f00d fef7 	bl	1b944 <_Bfree>
    db56:	9907      	ldr	r1, [sp, #28]
    db58:	4650      	mov	r0, sl
    db5a:	f00d fef3 	bl	1b944 <_Bfree>
    db5e:	e5f6      	b.n	d74e <_strtod_l+0xde>
    db60:	2300      	movs	r3, #0
    db62:	4f21      	ldr	r7, [pc, #132]	; (dbe8 <_strtod_l+0x578>)
    db64:	9304      	str	r3, [sp, #16]
    db66:	1124      	asrs	r4, r4, #4
    db68:	4640      	mov	r0, r8
    db6a:	4649      	mov	r1, r9
    db6c:	2c01      	cmp	r4, #1
    db6e:	dc22      	bgt.n	dbb6 <_strtod_l+0x546>
    db70:	b10b      	cbz	r3, db76 <_strtod_l+0x506>
    db72:	4680      	mov	r8, r0
    db74:	4689      	mov	r9, r1
    db76:	9b04      	ldr	r3, [sp, #16]
    db78:	491b      	ldr	r1, [pc, #108]	; (dbe8 <_strtod_l+0x578>)
    db7a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    db7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    db82:	4642      	mov	r2, r8
    db84:	464b      	mov	r3, r9
    db86:	e9d1 0100 	ldrd	r0, r1, [r1]
    db8a:	f7f3 fcc5 	bl	1518 <__aeabi_dmul>
    db8e:	4b17      	ldr	r3, [pc, #92]	; (dbec <_strtod_l+0x57c>)
    db90:	460a      	mov	r2, r1
    db92:	400b      	ands	r3, r1
    db94:	4916      	ldr	r1, [pc, #88]	; (dbf0 <_strtod_l+0x580>)
    db96:	428b      	cmp	r3, r1
    db98:	4680      	mov	r8, r0
    db9a:	d89f      	bhi.n	dadc <_strtod_l+0x46c>
    db9c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    dba0:	428b      	cmp	r3, r1
    dba2:	bf86      	itte	hi
    dba4:	f8df 904c 	ldrhi.w	r9, [pc, #76]	; dbf4 <_strtod_l+0x584>
    dba8:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
    dbac:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    dbb0:	2300      	movs	r3, #0
    dbb2:	9304      	str	r3, [sp, #16]
    dbb4:	e04b      	b.n	dc4e <_strtod_l+0x5de>
    dbb6:	07e2      	lsls	r2, r4, #31
    dbb8:	d504      	bpl.n	dbc4 <_strtod_l+0x554>
    dbba:	e9d7 2300 	ldrd	r2, r3, [r7]
    dbbe:	f7f3 fcab 	bl	1518 <__aeabi_dmul>
    dbc2:	2301      	movs	r3, #1
    dbc4:	9a04      	ldr	r2, [sp, #16]
    dbc6:	3201      	adds	r2, #1
    dbc8:	9204      	str	r2, [sp, #16]
    dbca:	1064      	asrs	r4, r4, #1
    dbcc:	3708      	adds	r7, #8
    dbce:	e7cd      	b.n	db6c <_strtod_l+0x4fc>
    dbd0:	00026ec6 	.word	0x00026ec6
    dbd4:	00026b8c 	.word	0x00026b8c
    dbd8:	00026ebe 	.word	0x00026ebe
    dbdc:	00026ef5 	.word	0x00026ef5
    dbe0:	00027094 	.word	0x00027094
    dbe4:	00026078 	.word	0x00026078
    dbe8:	00026050 	.word	0x00026050
    dbec:	7ff00000 	.word	0x7ff00000
    dbf0:	7ca00000 	.word	0x7ca00000
    dbf4:	7fefffff 	.word	0x7fefffff
    dbf8:	f014 0310 	ands.w	r3, r4, #16
    dbfc:	bf18      	it	ne
    dbfe:	236a      	movne	r3, #106	; 0x6a
    dc00:	4faa      	ldr	r7, [pc, #680]	; (deac <_strtod_l+0x83c>)
    dc02:	9304      	str	r3, [sp, #16]
    dc04:	4640      	mov	r0, r8
    dc06:	4649      	mov	r1, r9
    dc08:	2300      	movs	r3, #0
    dc0a:	07e2      	lsls	r2, r4, #31
    dc0c:	d504      	bpl.n	dc18 <_strtod_l+0x5a8>
    dc0e:	e9d7 2300 	ldrd	r2, r3, [r7]
    dc12:	f7f3 fc81 	bl	1518 <__aeabi_dmul>
    dc16:	2301      	movs	r3, #1
    dc18:	1064      	asrs	r4, r4, #1
    dc1a:	f107 0708 	add.w	r7, r7, #8
    dc1e:	d1f4      	bne.n	dc0a <_strtod_l+0x59a>
    dc20:	b10b      	cbz	r3, dc26 <_strtod_l+0x5b6>
    dc22:	4680      	mov	r8, r0
    dc24:	4689      	mov	r9, r1
    dc26:	9b04      	ldr	r3, [sp, #16]
    dc28:	b143      	cbz	r3, dc3c <_strtod_l+0x5cc>
    dc2a:	f3c9 520a 	ubfx	r2, r9, #20, #11
    dc2e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    dc32:	2b00      	cmp	r3, #0
    dc34:	4649      	mov	r1, r9
    dc36:	dc4e      	bgt.n	dcd6 <_strtod_l+0x666>
    dc38:	236a      	movs	r3, #106	; 0x6a
    dc3a:	9304      	str	r3, [sp, #16]
    dc3c:	2200      	movs	r2, #0
    dc3e:	2300      	movs	r3, #0
    dc40:	4640      	mov	r0, r8
    dc42:	4649      	mov	r1, r9
    dc44:	f7f3 fed0 	bl	19e8 <__aeabi_dcmpeq>
    dc48:	2800      	cmp	r0, #0
    dc4a:	f47f af24 	bne.w	da96 <_strtod_l+0x426>
    dc4e:	9b06      	ldr	r3, [sp, #24]
    dc50:	9300      	str	r3, [sp, #0]
    dc52:	9a05      	ldr	r2, [sp, #20]
    dc54:	990a      	ldr	r1, [sp, #40]	; 0x28
    dc56:	462b      	mov	r3, r5
    dc58:	4650      	mov	r0, sl
    dc5a:	f00d fedb 	bl	1ba14 <__s2b>
    dc5e:	9010      	str	r0, [sp, #64]	; 0x40
    dc60:	2800      	cmp	r0, #0
    dc62:	f43f af3b 	beq.w	dadc <_strtod_l+0x46c>
    dc66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc68:	ebab 0b06 	sub.w	fp, fp, r6
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	bfb4      	ite	lt
    dc70:	465b      	movlt	r3, fp
    dc72:	2300      	movge	r3, #0
    dc74:	9311      	str	r3, [sp, #68]	; 0x44
    dc76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    dc7c:	9313      	str	r3, [sp, #76]	; 0x4c
    dc7e:	2300      	movs	r3, #0
    dc80:	9307      	str	r3, [sp, #28]
    dc82:	9305      	str	r3, [sp, #20]
    dc84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc86:	4650      	mov	r0, sl
    dc88:	6859      	ldr	r1, [r3, #4]
    dc8a:	f00d fe1b 	bl	1b8c4 <_Balloc>
    dc8e:	9006      	str	r0, [sp, #24]
    dc90:	2800      	cmp	r0, #0
    dc92:	f43f af49 	beq.w	db28 <_strtod_l+0x4b8>
    dc96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc98:	691a      	ldr	r2, [r3, #16]
    dc9a:	3202      	adds	r2, #2
    dc9c:	f103 010c 	add.w	r1, r3, #12
    dca0:	0092      	lsls	r2, r2, #2
    dca2:	300c      	adds	r0, #12
    dca4:	f017 f8b1 	bl	24e0a <memcpy>
    dca8:	ec49 8b10 	vmov	d0, r8, r9
    dcac:	aa1a      	add	r2, sp, #104	; 0x68
    dcae:	a919      	add	r1, sp, #100	; 0x64
    dcb0:	4650      	mov	r0, sl
    dcb2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    dcb6:	f00e f981 	bl	1bfbc <__d2b>
    dcba:	9018      	str	r0, [sp, #96]	; 0x60
    dcbc:	2800      	cmp	r0, #0
    dcbe:	f43f af33 	beq.w	db28 <_strtod_l+0x4b8>
    dcc2:	2101      	movs	r1, #1
    dcc4:	4650      	mov	r0, sl
    dcc6:	f00d feef 	bl	1baa8 <__i2b>
    dcca:	9005      	str	r0, [sp, #20]
    dccc:	4603      	mov	r3, r0
    dcce:	b9d0      	cbnz	r0, dd06 <_strtod_l+0x696>
    dcd0:	2300      	movs	r3, #0
    dcd2:	9305      	str	r3, [sp, #20]
    dcd4:	e728      	b.n	db28 <_strtod_l+0x4b8>
    dcd6:	2b1f      	cmp	r3, #31
    dcd8:	dd0e      	ble.n	dcf8 <_strtod_l+0x688>
    dcda:	2b34      	cmp	r3, #52	; 0x34
    dcdc:	bfde      	ittt	le
    dcde:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
    dce2:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    dce6:	4093      	lslle	r3, r2
    dce8:	f04f 0800 	mov.w	r8, #0
    dcec:	bfcc      	ite	gt
    dcee:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    dcf2:	ea03 0901 	andle.w	r9, r3, r1
    dcf6:	e79f      	b.n	dc38 <_strtod_l+0x5c8>
    dcf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dcfc:	fa02 f303 	lsl.w	r3, r2, r3
    dd00:	ea03 0808 	and.w	r8, r3, r8
    dd04:	e798      	b.n	dc38 <_strtod_l+0x5c8>
    dd06:	9c19      	ldr	r4, [sp, #100]	; 0x64
    dd08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    dd0a:	2c00      	cmp	r4, #0
    dd0c:	bfab      	itete	ge
    dd0e:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    dd10:	9b13      	ldrlt	r3, [sp, #76]	; 0x4c
    dd12:	9e13      	ldrge	r6, [sp, #76]	; 0x4c
    dd14:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    dd16:	bfac      	ite	ge
    dd18:	18e7      	addge	r7, r4, r3
    dd1a:	1b1e      	sublt	r6, r3, r4
    dd1c:	9b04      	ldr	r3, [sp, #16]
    dd1e:	1ae4      	subs	r4, r4, r3
    dd20:	4414      	add	r4, r2
    dd22:	4b63      	ldr	r3, [pc, #396]	; (deb0 <_strtod_l+0x840>)
    dd24:	3c01      	subs	r4, #1
    dd26:	429c      	cmp	r4, r3
    dd28:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    dd2c:	f280 80b2 	bge.w	de94 <_strtod_l+0x824>
    dd30:	1b1b      	subs	r3, r3, r4
    dd32:	2b1f      	cmp	r3, #31
    dd34:	bfc2      	ittt	gt
    dd36:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    dd3a:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    dd3e:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    dd42:	f04f 0501 	mov.w	r5, #1
    dd46:	bfc8      	it	gt
    dd48:	34e2      	addgt	r4, #226	; 0xe2
    dd4a:	eba2 0203 	sub.w	r2, r2, r3
    dd4e:	bfda      	itte	le
    dd50:	409d      	lslle	r5, r3
    dd52:	2400      	movle	r4, #0
    dd54:	fa05 f404 	lslgt.w	r4, r5, r4
    dd58:	eb07 0b02 	add.w	fp, r7, r2
    dd5c:	9b04      	ldr	r3, [sp, #16]
    dd5e:	455f      	cmp	r7, fp
    dd60:	4416      	add	r6, r2
    dd62:	441e      	add	r6, r3
    dd64:	463b      	mov	r3, r7
    dd66:	bfa8      	it	ge
    dd68:	465b      	movge	r3, fp
    dd6a:	42b3      	cmp	r3, r6
    dd6c:	bfa8      	it	ge
    dd6e:	4633      	movge	r3, r6
    dd70:	2b00      	cmp	r3, #0
    dd72:	bfc2      	ittt	gt
    dd74:	ebab 0b03 	subgt.w	fp, fp, r3
    dd78:	1af6      	subgt	r6, r6, r3
    dd7a:	1aff      	subgt	r7, r7, r3
    dd7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dd7e:	2b00      	cmp	r3, #0
    dd80:	dd16      	ble.n	ddb0 <_strtod_l+0x740>
    dd82:	9905      	ldr	r1, [sp, #20]
    dd84:	461a      	mov	r2, r3
    dd86:	4650      	mov	r0, sl
    dd88:	f00d ff4e 	bl	1bc28 <__pow5mult>
    dd8c:	9005      	str	r0, [sp, #20]
    dd8e:	2800      	cmp	r0, #0
    dd90:	d09e      	beq.n	dcd0 <_strtod_l+0x660>
    dd92:	4601      	mov	r1, r0
    dd94:	9a18      	ldr	r2, [sp, #96]	; 0x60
    dd96:	4650      	mov	r0, sl
    dd98:	f00d fe9c 	bl	1bad4 <__multiply>
    dd9c:	900e      	str	r0, [sp, #56]	; 0x38
    dd9e:	2800      	cmp	r0, #0
    dda0:	f43f aec2 	beq.w	db28 <_strtod_l+0x4b8>
    dda4:	9918      	ldr	r1, [sp, #96]	; 0x60
    dda6:	4650      	mov	r0, sl
    dda8:	f00d fdcc 	bl	1b944 <_Bfree>
    ddac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ddae:	9318      	str	r3, [sp, #96]	; 0x60
    ddb0:	f1bb 0f00 	cmp.w	fp, #0
    ddb4:	dc71      	bgt.n	de9a <_strtod_l+0x82a>
    ddb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ddb8:	2b00      	cmp	r3, #0
    ddba:	dd08      	ble.n	ddce <_strtod_l+0x75e>
    ddbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ddbe:	9906      	ldr	r1, [sp, #24]
    ddc0:	4650      	mov	r0, sl
    ddc2:	f00d ff31 	bl	1bc28 <__pow5mult>
    ddc6:	9006      	str	r0, [sp, #24]
    ddc8:	2800      	cmp	r0, #0
    ddca:	f43f aeab 	beq.w	db24 <_strtod_l+0x4b4>
    ddce:	2e00      	cmp	r6, #0
    ddd0:	dd08      	ble.n	dde4 <_strtod_l+0x774>
    ddd2:	9906      	ldr	r1, [sp, #24]
    ddd4:	4632      	mov	r2, r6
    ddd6:	4650      	mov	r0, sl
    ddd8:	f00d ff80 	bl	1bcdc <__lshift>
    dddc:	9006      	str	r0, [sp, #24]
    ddde:	2800      	cmp	r0, #0
    dde0:	f43f aea0 	beq.w	db24 <_strtod_l+0x4b4>
    dde4:	2f00      	cmp	r7, #0
    dde6:	dd08      	ble.n	ddfa <_strtod_l+0x78a>
    dde8:	9905      	ldr	r1, [sp, #20]
    ddea:	463a      	mov	r2, r7
    ddec:	4650      	mov	r0, sl
    ddee:	f00d ff75 	bl	1bcdc <__lshift>
    ddf2:	9005      	str	r0, [sp, #20]
    ddf4:	2800      	cmp	r0, #0
    ddf6:	f43f ae97 	beq.w	db28 <_strtod_l+0x4b8>
    ddfa:	9a06      	ldr	r2, [sp, #24]
    ddfc:	9918      	ldr	r1, [sp, #96]	; 0x60
    ddfe:	4650      	mov	r0, sl
    de00:	f00d ffd8 	bl	1bdb4 <__mdiff>
    de04:	9007      	str	r0, [sp, #28]
    de06:	2800      	cmp	r0, #0
    de08:	f43f ae8e 	beq.w	db28 <_strtod_l+0x4b8>
    de0c:	68c3      	ldr	r3, [r0, #12]
    de0e:	930e      	str	r3, [sp, #56]	; 0x38
    de10:	2300      	movs	r3, #0
    de12:	9905      	ldr	r1, [sp, #20]
    de14:	60c3      	str	r3, [r0, #12]
    de16:	f017 fb89 	bl	2552c <__mcmp>
    de1a:	2800      	cmp	r0, #0
    de1c:	da4a      	bge.n	deb4 <_strtod_l+0x844>
    de1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de20:	ea53 0308 	orrs.w	r3, r3, r8
    de24:	f040 80bb 	bne.w	df9e <_strtod_l+0x92e>
    de28:	f3c9 0313 	ubfx	r3, r9, #0, #20
    de2c:	2b00      	cmp	r3, #0
    de2e:	f040 80b6 	bne.w	df9e <_strtod_l+0x92e>
    de32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    de36:	0d1b      	lsrs	r3, r3, #20
    de38:	051b      	lsls	r3, r3, #20
    de3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    de3e:	f240 80ae 	bls.w	df9e <_strtod_l+0x92e>
    de42:	9b07      	ldr	r3, [sp, #28]
    de44:	695b      	ldr	r3, [r3, #20]
    de46:	b923      	cbnz	r3, de52 <_strtod_l+0x7e2>
    de48:	9b07      	ldr	r3, [sp, #28]
    de4a:	691b      	ldr	r3, [r3, #16]
    de4c:	2b01      	cmp	r3, #1
    de4e:	f340 80a6 	ble.w	df9e <_strtod_l+0x92e>
    de52:	9907      	ldr	r1, [sp, #28]
    de54:	2201      	movs	r2, #1
    de56:	4650      	mov	r0, sl
    de58:	f00d ff40 	bl	1bcdc <__lshift>
    de5c:	9905      	ldr	r1, [sp, #20]
    de5e:	9007      	str	r0, [sp, #28]
    de60:	f017 fb64 	bl	2552c <__mcmp>
    de64:	2800      	cmp	r0, #0
    de66:	f340 809a 	ble.w	df9e <_strtod_l+0x92e>
    de6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    de6e:	9a04      	ldr	r2, [sp, #16]
    de70:	0d1b      	lsrs	r3, r3, #20
    de72:	051b      	lsls	r3, r3, #20
    de74:	2a00      	cmp	r2, #0
    de76:	d078      	beq.n	df6a <_strtod_l+0x8fa>
    de78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    de7c:	d86c      	bhi.n	df58 <_strtod_l+0x8e8>
    de7e:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    de82:	d845      	bhi.n	df10 <_strtod_l+0x8a0>
    de84:	f04f 0800 	mov.w	r8, #0
    de88:	f04f 0900 	mov.w	r9, #0
    de8c:	2322      	movs	r3, #34	; 0x22
    de8e:	f8ca 3000 	str.w	r3, [sl]
    de92:	e650      	b.n	db36 <_strtod_l+0x4c6>
    de94:	2400      	movs	r4, #0
    de96:	2501      	movs	r5, #1
    de98:	e75e      	b.n	dd58 <_strtod_l+0x6e8>
    de9a:	9918      	ldr	r1, [sp, #96]	; 0x60
    de9c:	465a      	mov	r2, fp
    de9e:	4650      	mov	r0, sl
    dea0:	f00d ff1c 	bl	1bcdc <__lshift>
    dea4:	9018      	str	r0, [sp, #96]	; 0x60
    dea6:	2800      	cmp	r0, #0
    dea8:	d185      	bne.n	ddb6 <_strtod_l+0x746>
    deaa:	e63d      	b.n	db28 <_strtod_l+0x4b8>
    deac:	00026028 	.word	0x00026028
    deb0:	fffffc02 	.word	0xfffffc02
    deb4:	46cb      	mov	fp, r9
    deb6:	f040 80a3 	bne.w	e000 <_strtod_l+0x990>
    deba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    debc:	f3c9 0313 	ubfx	r3, r9, #0, #20
    dec0:	2a00      	cmp	r2, #0
    dec2:	d040      	beq.n	df46 <_strtod_l+0x8d6>
    dec4:	4a9c      	ldr	r2, [pc, #624]	; (e138 <_strtod_l+0xac8>)
    dec6:	4293      	cmp	r3, r2
    dec8:	d158      	bne.n	df7c <_strtod_l+0x90c>
    deca:	9b04      	ldr	r3, [sp, #16]
    decc:	4642      	mov	r2, r8
    dece:	b97b      	cbnz	r3, def0 <_strtod_l+0x880>
    ded0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    ded4:	f040 8089 	bne.w	dfea <_strtod_l+0x97a>
    ded8:	4b98      	ldr	r3, [pc, #608]	; (e13c <_strtod_l+0xacc>)
    deda:	4599      	cmp	r9, r3
    dedc:	f43f ae24 	beq.w	db28 <_strtod_l+0x4b8>
    dee0:	4b97      	ldr	r3, [pc, #604]	; (e140 <_strtod_l+0xad0>)
    dee2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    dee6:	ea09 0303 	and.w	r3, r9, r3
    deea:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    deee:	e622      	b.n	db36 <_strtod_l+0x4c6>
    def0:	4b93      	ldr	r3, [pc, #588]	; (e140 <_strtod_l+0xad0>)
    def2:	ea09 0303 	and.w	r3, r9, r3
    def6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    defa:	d916      	bls.n	df2a <_strtod_l+0x8ba>
    defc:	f118 0101 	adds.w	r1, r8, #1
    df00:	d11b      	bne.n	df3a <_strtod_l+0x8ca>
    df02:	4a8e      	ldr	r2, [pc, #568]	; (e13c <_strtod_l+0xacc>)
    df04:	4591      	cmp	r9, r2
    df06:	f43f ae0f 	beq.w	db28 <_strtod_l+0x4b8>
    df0a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    df0e:	4680      	mov	r8, r0
    df10:	4b8c      	ldr	r3, [pc, #560]	; (e144 <_strtod_l+0xad4>)
    df12:	4640      	mov	r0, r8
    df14:	4649      	mov	r1, r9
    df16:	2200      	movs	r2, #0
    df18:	f7f3 fafe 	bl	1518 <__aeabi_dmul>
    df1c:	460b      	mov	r3, r1
    df1e:	4303      	orrs	r3, r0
    df20:	4680      	mov	r8, r0
    df22:	4689      	mov	r9, r1
    df24:	f47f ae07 	bne.w	db36 <_strtod_l+0x4c6>
    df28:	e7b0      	b.n	de8c <_strtod_l+0x81c>
    df2a:	0d1e      	lsrs	r6, r3, #20
    df2c:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    df30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    df34:	40b1      	lsls	r1, r6
    df36:	4588      	cmp	r8, r1
    df38:	d0e7      	beq.n	df0a <_strtod_l+0x89a>
    df3a:	2c00      	cmp	r4, #0
    df3c:	d05e      	beq.n	dffc <_strtod_l+0x98c>
    df3e:	ea14 0f0b 	tst.w	r4, fp
    df42:	d0e5      	beq.n	df10 <_strtod_l+0x8a0>
    df44:	e01e      	b.n	df84 <_strtod_l+0x914>
    df46:	2b00      	cmp	r3, #0
    df48:	d14a      	bne.n	dfe0 <_strtod_l+0x970>
    df4a:	f1b8 0f00 	cmp.w	r8, #0
    df4e:	d08c      	beq.n	de6a <_strtod_l+0x7fa>
    df50:	b364      	cbz	r4, dfac <_strtod_l+0x93c>
    df52:	ea14 0f0b 	tst.w	r4, fp
    df56:	e02b      	b.n	dfb0 <_strtod_l+0x940>
    df58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    df5c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    df60:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    df64:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    df68:	e7d2      	b.n	df10 <_strtod_l+0x8a0>
    df6a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    df6e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    df72:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    df76:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    df7a:	e5dc      	b.n	db36 <_strtod_l+0x4c6>
    df7c:	b19c      	cbz	r4, dfa6 <_strtod_l+0x936>
    df7e:	ea14 0f09 	tst.w	r4, r9
    df82:	d00c      	beq.n	df9e <_strtod_l+0x92e>
    df84:	4640      	mov	r0, r8
    df86:	4649      	mov	r1, r9
    df88:	9a04      	ldr	r2, [sp, #16]
    df8a:	f017 f89f 	bl	250cc <sulp>
    df8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    df92:	ec53 2b10 	vmov	r2, r3, d0
    df96:	f7f3 f909 	bl	11ac <__adddf3>
    df9a:	4680      	mov	r8, r0
    df9c:	4689      	mov	r9, r1
    df9e:	9b04      	ldr	r3, [sp, #16]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d1b5      	bne.n	df10 <_strtod_l+0x8a0>
    dfa4:	e5c7      	b.n	db36 <_strtod_l+0x4c6>
    dfa6:	ea15 0f08 	tst.w	r5, r8
    dfaa:	e7ea      	b.n	df82 <_strtod_l+0x912>
    dfac:	ea18 0f05 	tst.w	r8, r5
    dfb0:	d0f5      	beq.n	df9e <_strtod_l+0x92e>
    dfb2:	9a04      	ldr	r2, [sp, #16]
    dfb4:	4640      	mov	r0, r8
    dfb6:	4649      	mov	r1, r9
    dfb8:	f017 f888 	bl	250cc <sulp>
    dfbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    dfc0:	ec53 2b10 	vmov	r2, r3, d0
    dfc4:	f7f3 f8f0 	bl	11a8 <__aeabi_dsub>
    dfc8:	2200      	movs	r2, #0
    dfca:	2300      	movs	r3, #0
    dfcc:	4604      	mov	r4, r0
    dfce:	460d      	mov	r5, r1
    dfd0:	f7f3 fd0a 	bl	19e8 <__aeabi_dcmpeq>
    dfd4:	2800      	cmp	r0, #0
    dfd6:	f47f af55 	bne.w	de84 <_strtod_l+0x814>
    dfda:	46a0      	mov	r8, r4
    dfdc:	46a9      	mov	r9, r5
    dfde:	e7de      	b.n	df9e <_strtod_l+0x92e>
    dfe0:	2c00      	cmp	r4, #0
    dfe2:	d1b6      	bne.n	df52 <_strtod_l+0x8e2>
    dfe4:	ea15 0f08 	tst.w	r5, r8
    dfe8:	e7e2      	b.n	dfb0 <_strtod_l+0x940>
    dfea:	b124      	cbz	r4, dff6 <_strtod_l+0x986>
    dfec:	ea14 0f09 	tst.w	r4, r9
    dff0:	f43f ada1 	beq.w	db36 <_strtod_l+0x4c6>
    dff4:	e7c6      	b.n	df84 <_strtod_l+0x914>
    dff6:	ea18 0f05 	tst.w	r8, r5
    dffa:	e7f9      	b.n	dff0 <_strtod_l+0x980>
    dffc:	422a      	tst	r2, r5
    dffe:	e7a0      	b.n	df42 <_strtod_l+0x8d2>
    e000:	9905      	ldr	r1, [sp, #20]
    e002:	9807      	ldr	r0, [sp, #28]
    e004:	f017 faad 	bl	25562 <__ratio>
    e008:	ec55 4b10 	vmov	r4, r5, d0
    e00c:	2200      	movs	r2, #0
    e00e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e012:	4620      	mov	r0, r4
    e014:	4629      	mov	r1, r5
    e016:	f7f3 fcfb 	bl	1a10 <__aeabi_dcmple>
    e01a:	2800      	cmp	r0, #0
    e01c:	d06d      	beq.n	e0fa <_strtod_l+0xa8a>
    e01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e020:	2b00      	cmp	r3, #0
    e022:	d178      	bne.n	e116 <_strtod_l+0xaa6>
    e024:	f1b8 0f00 	cmp.w	r8, #0
    e028:	d156      	bne.n	e0d8 <_strtod_l+0xa68>
    e02a:	f3c9 0313 	ubfx	r3, r9, #0, #20
    e02e:	2b00      	cmp	r3, #0
    e030:	d159      	bne.n	e0e6 <_strtod_l+0xa76>
    e032:	4b45      	ldr	r3, [pc, #276]	; (e148 <_strtod_l+0xad8>)
    e034:	2200      	movs	r2, #0
    e036:	4620      	mov	r0, r4
    e038:	4629      	mov	r1, r5
    e03a:	f7f3 fcdf 	bl	19fc <__aeabi_dcmplt>
    e03e:	2800      	cmp	r0, #0
    e040:	d158      	bne.n	e0f4 <_strtod_l+0xa84>
    e042:	4620      	mov	r0, r4
    e044:	4629      	mov	r1, r5
    e046:	4b41      	ldr	r3, [pc, #260]	; (e14c <_strtod_l+0xadc>)
    e048:	2200      	movs	r2, #0
    e04a:	f7f3 fa65 	bl	1518 <__aeabi_dmul>
    e04e:	4604      	mov	r4, r0
    e050:	460d      	mov	r5, r1
    e052:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    e056:	9408      	str	r4, [sp, #32]
    e058:	9309      	str	r3, [sp, #36]	; 0x24
    e05a:	4b39      	ldr	r3, [pc, #228]	; (e140 <_strtod_l+0xad0>)
    e05c:	ea0b 0303 	and.w	r3, fp, r3
    e060:	9312      	str	r3, [sp, #72]	; 0x48
    e062:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e064:	4b3a      	ldr	r3, [pc, #232]	; (e150 <_strtod_l+0xae0>)
    e066:	429a      	cmp	r2, r3
    e068:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    e06c:	f040 80a9 	bne.w	e1c2 <_strtod_l+0xb52>
    e070:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    e074:	ec49 8b10 	vmov	d0, r8, r9
    e078:	f00d ff30 	bl	1bedc <__ulp>
    e07c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    e080:	ec51 0b10 	vmov	r0, r1, d0
    e084:	f7f3 fa48 	bl	1518 <__aeabi_dmul>
    e088:	4642      	mov	r2, r8
    e08a:	464b      	mov	r3, r9
    e08c:	f7f3 f88e 	bl	11ac <__adddf3>
    e090:	460b      	mov	r3, r1
    e092:	492b      	ldr	r1, [pc, #172]	; (e140 <_strtod_l+0xad0>)
    e094:	4a2f      	ldr	r2, [pc, #188]	; (e154 <_strtod_l+0xae4>)
    e096:	4019      	ands	r1, r3
    e098:	4291      	cmp	r1, r2
    e09a:	4680      	mov	r8, r0
    e09c:	d95c      	bls.n	e158 <_strtod_l+0xae8>
    e09e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e0a0:	4b26      	ldr	r3, [pc, #152]	; (e13c <_strtod_l+0xacc>)
    e0a2:	429a      	cmp	r2, r3
    e0a4:	d103      	bne.n	e0ae <_strtod_l+0xa3e>
    e0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e0a8:	3301      	adds	r3, #1
    e0aa:	f43f ad3d 	beq.w	db28 <_strtod_l+0x4b8>
    e0ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; e13c <_strtod_l+0xacc>
    e0b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    e0b6:	9918      	ldr	r1, [sp, #96]	; 0x60
    e0b8:	4650      	mov	r0, sl
    e0ba:	f00d fc43 	bl	1b944 <_Bfree>
    e0be:	9906      	ldr	r1, [sp, #24]
    e0c0:	4650      	mov	r0, sl
    e0c2:	f00d fc3f 	bl	1b944 <_Bfree>
    e0c6:	9905      	ldr	r1, [sp, #20]
    e0c8:	4650      	mov	r0, sl
    e0ca:	f00d fc3b 	bl	1b944 <_Bfree>
    e0ce:	9907      	ldr	r1, [sp, #28]
    e0d0:	4650      	mov	r0, sl
    e0d2:	f00d fc37 	bl	1b944 <_Bfree>
    e0d6:	e5d5      	b.n	dc84 <_strtod_l+0x614>
    e0d8:	f1b8 0f01 	cmp.w	r8, #1
    e0dc:	d103      	bne.n	e0e6 <_strtod_l+0xa76>
    e0de:	f1b9 0f00 	cmp.w	r9, #0
    e0e2:	f43f aecf 	beq.w	de84 <_strtod_l+0x814>
    e0e6:	ed9f 7b10 	vldr	d7, [pc, #64]	; e128 <_strtod_l+0xab8>
    e0ea:	4d17      	ldr	r5, [pc, #92]	; (e148 <_strtod_l+0xad8>)
    e0ec:	ed8d 7b08 	vstr	d7, [sp, #32]
    e0f0:	2400      	movs	r4, #0
    e0f2:	e7b2      	b.n	e05a <_strtod_l+0x9ea>
    e0f4:	4d15      	ldr	r5, [pc, #84]	; (e14c <_strtod_l+0xadc>)
    e0f6:	2400      	movs	r4, #0
    e0f8:	e7ab      	b.n	e052 <_strtod_l+0x9e2>
    e0fa:	4b14      	ldr	r3, [pc, #80]	; (e14c <_strtod_l+0xadc>)
    e0fc:	4620      	mov	r0, r4
    e0fe:	4629      	mov	r1, r5
    e100:	2200      	movs	r2, #0
    e102:	f7f3 fa09 	bl	1518 <__aeabi_dmul>
    e106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e108:	4604      	mov	r4, r0
    e10a:	460d      	mov	r5, r1
    e10c:	2b00      	cmp	r3, #0
    e10e:	d0a0      	beq.n	e052 <_strtod_l+0x9e2>
    e110:	e9cd 4508 	strd	r4, r5, [sp, #32]
    e114:	e7a1      	b.n	e05a <_strtod_l+0x9ea>
    e116:	ed9f 7b06 	vldr	d7, [pc, #24]	; e130 <_strtod_l+0xac0>
    e11a:	ed8d 7b08 	vstr	d7, [sp, #32]
    e11e:	ec55 4b17 	vmov	r4, r5, d7
    e122:	e79a      	b.n	e05a <_strtod_l+0x9ea>
    e124:	f3af 8000 	nop.w
    e128:	00000000 	.word	0x00000000
    e12c:	bff00000 	.word	0xbff00000
    e130:	00000000 	.word	0x00000000
    e134:	3ff00000 	.word	0x3ff00000
    e138:	000fffff 	.word	0x000fffff
    e13c:	7fefffff 	.word	0x7fefffff
    e140:	7ff00000 	.word	0x7ff00000
    e144:	39500000 	.word	0x39500000
    e148:	3ff00000 	.word	0x3ff00000
    e14c:	3fe00000 	.word	0x3fe00000
    e150:	7fe00000 	.word	0x7fe00000
    e154:	7c9fffff 	.word	0x7c9fffff
    e158:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    e15c:	9b04      	ldr	r3, [sp, #16]
    e15e:	464e      	mov	r6, r9
    e160:	2b00      	cmp	r3, #0
    e162:	d1a8      	bne.n	e0b6 <_strtod_l+0xa46>
    e164:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    e168:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e16a:	0d1b      	lsrs	r3, r3, #20
    e16c:	051b      	lsls	r3, r3, #20
    e16e:	429a      	cmp	r2, r3
    e170:	d1a1      	bne.n	e0b6 <_strtod_l+0xa46>
    e172:	4620      	mov	r0, r4
    e174:	4629      	mov	r1, r5
    e176:	f7fb fb81 	bl	987c <__aeabi_d2lz>
    e17a:	f7f3 f99f 	bl	14bc <__aeabi_l2d>
    e17e:	460b      	mov	r3, r1
    e180:	4602      	mov	r2, r0
    e182:	4629      	mov	r1, r5
    e184:	4620      	mov	r0, r4
    e186:	f7f3 f80f 	bl	11a8 <__aeabi_dsub>
    e18a:	f3c9 0613 	ubfx	r6, r9, #0, #20
    e18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e190:	ea46 0608 	orr.w	r6, r6, r8
    e194:	431e      	orrs	r6, r3
    e196:	4604      	mov	r4, r0
    e198:	460d      	mov	r5, r1
    e19a:	d04b      	beq.n	e234 <_strtod_l+0xbc4>
    e19c:	a32e      	add	r3, pc, #184	; (adr r3, e258 <_strtod_l+0xbe8>)
    e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1a2:	f7f3 fc2b 	bl	19fc <__aeabi_dcmplt>
    e1a6:	2800      	cmp	r0, #0
    e1a8:	f47f acc5 	bne.w	db36 <_strtod_l+0x4c6>
    e1ac:	a32c      	add	r3, pc, #176	; (adr r3, e260 <_strtod_l+0xbf0>)
    e1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1b2:	4620      	mov	r0, r4
    e1b4:	4629      	mov	r1, r5
    e1b6:	f7f3 fc3f 	bl	1a38 <__aeabi_dcmpgt>
    e1ba:	2800      	cmp	r0, #0
    e1bc:	f43f af7b 	beq.w	e0b6 <_strtod_l+0xa46>
    e1c0:	e4b9      	b.n	db36 <_strtod_l+0x4c6>
    e1c2:	9b04      	ldr	r3, [sp, #16]
    e1c4:	b313      	cbz	r3, e20c <_strtod_l+0xb9c>
    e1c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e1c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    e1cc:	d81e      	bhi.n	e20c <_strtod_l+0xb9c>
    e1ce:	a326      	add	r3, pc, #152	; (adr r3, e268 <_strtod_l+0xbf8>)
    e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1d4:	4620      	mov	r0, r4
    e1d6:	4629      	mov	r1, r5
    e1d8:	f7f3 fc1a 	bl	1a10 <__aeabi_dcmple>
    e1dc:	b190      	cbz	r0, e204 <_strtod_l+0xb94>
    e1de:	4629      	mov	r1, r5
    e1e0:	4620      	mov	r0, r4
    e1e2:	f7f3 fc33 	bl	1a4c <__aeabi_d2uiz>
    e1e6:	2801      	cmp	r0, #1
    e1e8:	bf38      	it	cc
    e1ea:	2001      	movcc	r0, #1
    e1ec:	f7f3 f91a 	bl	1424 <__aeabi_ui2d>
    e1f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e1f2:	4604      	mov	r4, r0
    e1f4:	460d      	mov	r5, r1
    e1f6:	b9d3      	cbnz	r3, e22e <_strtod_l+0xbbe>
    e1f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e1fc:	9014      	str	r0, [sp, #80]	; 0x50
    e1fe:	9315      	str	r3, [sp, #84]	; 0x54
    e200:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    e204:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e206:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    e20a:	1a9f      	subs	r7, r3, r2
    e20c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    e210:	f00d fe64 	bl	1bedc <__ulp>
    e214:	4630      	mov	r0, r6
    e216:	ec53 2b10 	vmov	r2, r3, d0
    e21a:	4639      	mov	r1, r7
    e21c:	f7f3 f97c 	bl	1518 <__aeabi_dmul>
    e220:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    e224:	f7f2 ffc2 	bl	11ac <__adddf3>
    e228:	4680      	mov	r8, r0
    e22a:	4689      	mov	r9, r1
    e22c:	e796      	b.n	e15c <_strtod_l+0xaec>
    e22e:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
    e232:	e7e5      	b.n	e200 <_strtod_l+0xb90>
    e234:	a30e      	add	r3, pc, #56	; (adr r3, e270 <_strtod_l+0xc00>)
    e236:	e9d3 2300 	ldrd	r2, r3, [r3]
    e23a:	f7f3 fbdf 	bl	19fc <__aeabi_dcmplt>
    e23e:	e7bc      	b.n	e1ba <_strtod_l+0xb4a>
    e240:	2a65      	cmp	r2, #101	; 0x65
    e242:	f43f ab44 	beq.w	d8ce <_strtod_l+0x25e>
    e246:	2a45      	cmp	r2, #69	; 0x45
    e248:	f43f ab41 	beq.w	d8ce <_strtod_l+0x25e>
    e24c:	2301      	movs	r3, #1
    e24e:	f7ff bb79 	b.w	d944 <_strtod_l+0x2d4>
    e252:	bf00      	nop
    e254:	f3af 8000 	nop.w
    e258:	94a03595 	.word	0x94a03595
    e25c:	3fdfffff 	.word	0x3fdfffff
    e260:	35afe535 	.word	0x35afe535
    e264:	3fe00000 	.word	0x3fe00000
    e268:	ffc00000 	.word	0xffc00000
    e26c:	41dfffff 	.word	0x41dfffff
    e270:	94a03595 	.word	0x94a03595
    e274:	3fcfffff 	.word	0x3fcfffff

0000e278 <_dtoa_r>:
    e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e27c:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e27e:	b097      	sub	sp, #92	; 0x5c
    e280:	ed8d 0b00 	vstr	d0, [sp]
    e284:	ec55 4b10 	vmov	r4, r5, d0
    e288:	9e20      	ldr	r6, [sp, #128]	; 0x80
    e28a:	9108      	str	r1, [sp, #32]
    e28c:	4683      	mov	fp, r0
    e28e:	920c      	str	r2, [sp, #48]	; 0x30
    e290:	9312      	str	r3, [sp, #72]	; 0x48
    e292:	b97f      	cbnz	r7, e2b4 <_dtoa_r+0x3c>
    e294:	2010      	movs	r0, #16
    e296:	f00c fa07 	bl	1a6a8 <malloc>
    e29a:	4602      	mov	r2, r0
    e29c:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    e2a0:	b920      	cbnz	r0, e2ac <_dtoa_r+0x34>
    e2a2:	4ba7      	ldr	r3, [pc, #668]	; (e540 <_dtoa_r+0x2c8>)
    e2a4:	21ea      	movs	r1, #234	; 0xea
    e2a6:	48a7      	ldr	r0, [pc, #668]	; (e544 <_dtoa_r+0x2cc>)
    e2a8:	f00d ffdc 	bl	1c264 <__assert_func>
    e2ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
    e2b0:	6007      	str	r7, [r0, #0]
    e2b2:	60c7      	str	r7, [r0, #12]
    e2b4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    e2b8:	6819      	ldr	r1, [r3, #0]
    e2ba:	b159      	cbz	r1, e2d4 <_dtoa_r+0x5c>
    e2bc:	685a      	ldr	r2, [r3, #4]
    e2be:	604a      	str	r2, [r1, #4]
    e2c0:	2301      	movs	r3, #1
    e2c2:	4093      	lsls	r3, r2
    e2c4:	608b      	str	r3, [r1, #8]
    e2c6:	4658      	mov	r0, fp
    e2c8:	f00d fb3c 	bl	1b944 <_Bfree>
    e2cc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    e2d0:	2200      	movs	r2, #0
    e2d2:	601a      	str	r2, [r3, #0]
    e2d4:	1e2b      	subs	r3, r5, #0
    e2d6:	bfb9      	ittee	lt
    e2d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    e2dc:	9301      	strlt	r3, [sp, #4]
    e2de:	2300      	movge	r3, #0
    e2e0:	6033      	strge	r3, [r6, #0]
    e2e2:	9f01      	ldr	r7, [sp, #4]
    e2e4:	4b98      	ldr	r3, [pc, #608]	; (e548 <_dtoa_r+0x2d0>)
    e2e6:	bfbc      	itt	lt
    e2e8:	2201      	movlt	r2, #1
    e2ea:	6032      	strlt	r2, [r6, #0]
    e2ec:	43bb      	bics	r3, r7
    e2ee:	d119      	bne.n	e324 <_dtoa_r+0xac>
    e2f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e2f2:	f242 730f 	movw	r3, #9999	; 0x270f
    e2f6:	6013      	str	r3, [r2, #0]
    e2f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
    e2fc:	4323      	orrs	r3, r4
    e2fe:	f000 85dd 	beq.w	eebc <_dtoa_r+0xc44>
    e302:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e304:	b953      	cbnz	r3, e31c <_dtoa_r+0xa4>
    e306:	4b91      	ldr	r3, [pc, #580]	; (e54c <_dtoa_r+0x2d4>)
    e308:	e021      	b.n	e34e <_dtoa_r+0xd6>
    e30a:	4b91      	ldr	r3, [pc, #580]	; (e550 <_dtoa_r+0x2d8>)
    e30c:	9303      	str	r3, [sp, #12]
    e30e:	3308      	adds	r3, #8
    e310:	9a21      	ldr	r2, [sp, #132]	; 0x84
    e312:	6013      	str	r3, [r2, #0]
    e314:	9803      	ldr	r0, [sp, #12]
    e316:	b017      	add	sp, #92	; 0x5c
    e318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e31c:	4b8b      	ldr	r3, [pc, #556]	; (e54c <_dtoa_r+0x2d4>)
    e31e:	9303      	str	r3, [sp, #12]
    e320:	3303      	adds	r3, #3
    e322:	e7f5      	b.n	e310 <_dtoa_r+0x98>
    e324:	ed9d 7b00 	vldr	d7, [sp]
    e328:	2200      	movs	r2, #0
    e32a:	ec51 0b17 	vmov	r0, r1, d7
    e32e:	2300      	movs	r3, #0
    e330:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    e334:	f7f3 fb58 	bl	19e8 <__aeabi_dcmpeq>
    e338:	4680      	mov	r8, r0
    e33a:	b150      	cbz	r0, e352 <_dtoa_r+0xda>
    e33c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e33e:	2301      	movs	r3, #1
    e340:	6013      	str	r3, [r2, #0]
    e342:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e344:	b113      	cbz	r3, e34c <_dtoa_r+0xd4>
    e346:	9a21      	ldr	r2, [sp, #132]	; 0x84
    e348:	4b82      	ldr	r3, [pc, #520]	; (e554 <_dtoa_r+0x2dc>)
    e34a:	6013      	str	r3, [r2, #0]
    e34c:	4b82      	ldr	r3, [pc, #520]	; (e558 <_dtoa_r+0x2e0>)
    e34e:	9303      	str	r3, [sp, #12]
    e350:	e7e0      	b.n	e314 <_dtoa_r+0x9c>
    e352:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    e356:	aa14      	add	r2, sp, #80	; 0x50
    e358:	a915      	add	r1, sp, #84	; 0x54
    e35a:	4658      	mov	r0, fp
    e35c:	f00d fe2e 	bl	1bfbc <__d2b>
    e360:	f3c7 560a 	ubfx	r6, r7, #20, #11
    e364:	9002      	str	r0, [sp, #8]
    e366:	2e00      	cmp	r6, #0
    e368:	d078      	beq.n	e45c <_dtoa_r+0x1e4>
    e36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e36c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    e370:	f3c3 0313 	ubfx	r3, r3, #0, #20
    e374:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e378:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    e37c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e380:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    e384:	4619      	mov	r1, r3
    e386:	2200      	movs	r2, #0
    e388:	4b74      	ldr	r3, [pc, #464]	; (e55c <_dtoa_r+0x2e4>)
    e38a:	f7f2 ff0d 	bl	11a8 <__aeabi_dsub>
    e38e:	a366      	add	r3, pc, #408	; (adr r3, e528 <_dtoa_r+0x2b0>)
    e390:	e9d3 2300 	ldrd	r2, r3, [r3]
    e394:	f7f3 f8c0 	bl	1518 <__aeabi_dmul>
    e398:	a365      	add	r3, pc, #404	; (adr r3, e530 <_dtoa_r+0x2b8>)
    e39a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e39e:	f7f2 ff05 	bl	11ac <__adddf3>
    e3a2:	4604      	mov	r4, r0
    e3a4:	4630      	mov	r0, r6
    e3a6:	460d      	mov	r5, r1
    e3a8:	f7f3 f84c 	bl	1444 <__aeabi_i2d>
    e3ac:	a362      	add	r3, pc, #392	; (adr r3, e538 <_dtoa_r+0x2c0>)
    e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3b2:	f7f3 f8b1 	bl	1518 <__aeabi_dmul>
    e3b6:	4602      	mov	r2, r0
    e3b8:	460b      	mov	r3, r1
    e3ba:	4620      	mov	r0, r4
    e3bc:	4629      	mov	r1, r5
    e3be:	f7f2 fef5 	bl	11ac <__adddf3>
    e3c2:	4604      	mov	r4, r0
    e3c4:	460d      	mov	r5, r1
    e3c6:	f7f3 fd0d 	bl	1de4 <__aeabi_d2iz>
    e3ca:	2200      	movs	r2, #0
    e3cc:	4607      	mov	r7, r0
    e3ce:	2300      	movs	r3, #0
    e3d0:	4620      	mov	r0, r4
    e3d2:	4629      	mov	r1, r5
    e3d4:	f7f3 fb12 	bl	19fc <__aeabi_dcmplt>
    e3d8:	b140      	cbz	r0, e3ec <_dtoa_r+0x174>
    e3da:	4638      	mov	r0, r7
    e3dc:	f7f3 f832 	bl	1444 <__aeabi_i2d>
    e3e0:	4622      	mov	r2, r4
    e3e2:	462b      	mov	r3, r5
    e3e4:	f7f3 fb00 	bl	19e8 <__aeabi_dcmpeq>
    e3e8:	b900      	cbnz	r0, e3ec <_dtoa_r+0x174>
    e3ea:	3f01      	subs	r7, #1
    e3ec:	2f16      	cmp	r7, #22
    e3ee:	d852      	bhi.n	e496 <_dtoa_r+0x21e>
    e3f0:	4b5b      	ldr	r3, [pc, #364]	; (e560 <_dtoa_r+0x2e8>)
    e3f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    e3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e3fe:	f7f3 fafd 	bl	19fc <__aeabi_dcmplt>
    e402:	2800      	cmp	r0, #0
    e404:	d049      	beq.n	e49a <_dtoa_r+0x222>
    e406:	3f01      	subs	r7, #1
    e408:	2300      	movs	r3, #0
    e40a:	9311      	str	r3, [sp, #68]	; 0x44
    e40c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e40e:	1b9b      	subs	r3, r3, r6
    e410:	1e5a      	subs	r2, r3, #1
    e412:	bf45      	ittet	mi
    e414:	f1c3 0301 	rsbmi	r3, r3, #1
    e418:	9306      	strmi	r3, [sp, #24]
    e41a:	2300      	movpl	r3, #0
    e41c:	2300      	movmi	r3, #0
    e41e:	9207      	str	r2, [sp, #28]
    e420:	bf54      	ite	pl
    e422:	9306      	strpl	r3, [sp, #24]
    e424:	9307      	strmi	r3, [sp, #28]
    e426:	2f00      	cmp	r7, #0
    e428:	db39      	blt.n	e49e <_dtoa_r+0x226>
    e42a:	9b07      	ldr	r3, [sp, #28]
    e42c:	9710      	str	r7, [sp, #64]	; 0x40
    e42e:	443b      	add	r3, r7
    e430:	9307      	str	r3, [sp, #28]
    e432:	2300      	movs	r3, #0
    e434:	9309      	str	r3, [sp, #36]	; 0x24
    e436:	9b08      	ldr	r3, [sp, #32]
    e438:	2b09      	cmp	r3, #9
    e43a:	d866      	bhi.n	e50a <_dtoa_r+0x292>
    e43c:	2b05      	cmp	r3, #5
    e43e:	bfc4      	itt	gt
    e440:	3b04      	subgt	r3, #4
    e442:	9308      	strgt	r3, [sp, #32]
    e444:	9b08      	ldr	r3, [sp, #32]
    e446:	f1a3 0302 	sub.w	r3, r3, #2
    e44a:	bfcc      	ite	gt
    e44c:	2400      	movgt	r4, #0
    e44e:	2401      	movle	r4, #1
    e450:	2b03      	cmp	r3, #3
    e452:	d865      	bhi.n	e520 <_dtoa_r+0x2a8>
    e454:	e8df f003 	tbb	[pc, r3]
    e458:	5736382b 	.word	0x5736382b
    e45c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    e460:	441e      	add	r6, r3
    e462:	f206 4332 	addw	r3, r6, #1074	; 0x432
    e466:	2b20      	cmp	r3, #32
    e468:	bfc1      	itttt	gt
    e46a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    e46e:	409f      	lslgt	r7, r3
    e470:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    e474:	fa24 f303 	lsrgt.w	r3, r4, r3
    e478:	bfd6      	itet	le
    e47a:	f1c3 0320 	rsble	r3, r3, #32
    e47e:	ea47 0003 	orrgt.w	r0, r7, r3
    e482:	fa04 f003 	lslle.w	r0, r4, r3
    e486:	f7f2 ffcd 	bl	1424 <__aeabi_ui2d>
    e48a:	2201      	movs	r2, #1
    e48c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    e490:	3e01      	subs	r6, #1
    e492:	9213      	str	r2, [sp, #76]	; 0x4c
    e494:	e776      	b.n	e384 <_dtoa_r+0x10c>
    e496:	2301      	movs	r3, #1
    e498:	e7b7      	b.n	e40a <_dtoa_r+0x192>
    e49a:	9011      	str	r0, [sp, #68]	; 0x44
    e49c:	e7b6      	b.n	e40c <_dtoa_r+0x194>
    e49e:	9b06      	ldr	r3, [sp, #24]
    e4a0:	1bdb      	subs	r3, r3, r7
    e4a2:	9306      	str	r3, [sp, #24]
    e4a4:	427b      	negs	r3, r7
    e4a6:	9309      	str	r3, [sp, #36]	; 0x24
    e4a8:	2300      	movs	r3, #0
    e4aa:	9310      	str	r3, [sp, #64]	; 0x40
    e4ac:	e7c3      	b.n	e436 <_dtoa_r+0x1be>
    e4ae:	2300      	movs	r3, #0
    e4b0:	930d      	str	r3, [sp, #52]	; 0x34
    e4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e4b4:	2b00      	cmp	r3, #0
    e4b6:	dc57      	bgt.n	e568 <_dtoa_r+0x2f0>
    e4b8:	2301      	movs	r3, #1
    e4ba:	9304      	str	r3, [sp, #16]
    e4bc:	4699      	mov	r9, r3
    e4be:	461a      	mov	r2, r3
    e4c0:	920c      	str	r2, [sp, #48]	; 0x30
    e4c2:	e00c      	b.n	e4de <_dtoa_r+0x266>
    e4c4:	2301      	movs	r3, #1
    e4c6:	e7f3      	b.n	e4b0 <_dtoa_r+0x238>
    e4c8:	2300      	movs	r3, #0
    e4ca:	930d      	str	r3, [sp, #52]	; 0x34
    e4cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e4ce:	18fb      	adds	r3, r7, r3
    e4d0:	f103 0901 	add.w	r9, r3, #1
    e4d4:	9304      	str	r3, [sp, #16]
    e4d6:	464b      	mov	r3, r9
    e4d8:	2b01      	cmp	r3, #1
    e4da:	bfb8      	it	lt
    e4dc:	2301      	movlt	r3, #1
    e4de:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    e4e2:	2100      	movs	r1, #0
    e4e4:	2204      	movs	r2, #4
    e4e6:	f102 0514 	add.w	r5, r2, #20
    e4ea:	429d      	cmp	r5, r3
    e4ec:	d940      	bls.n	e570 <_dtoa_r+0x2f8>
    e4ee:	6041      	str	r1, [r0, #4]
    e4f0:	4658      	mov	r0, fp
    e4f2:	f00d f9e7 	bl	1b8c4 <_Balloc>
    e4f6:	9003      	str	r0, [sp, #12]
    e4f8:	2800      	cmp	r0, #0
    e4fa:	d13c      	bne.n	e576 <_dtoa_r+0x2fe>
    e4fc:	4b19      	ldr	r3, [pc, #100]	; (e564 <_dtoa_r+0x2ec>)
    e4fe:	4602      	mov	r2, r0
    e500:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    e504:	e6cf      	b.n	e2a6 <_dtoa_r+0x2e>
    e506:	2301      	movs	r3, #1
    e508:	e7df      	b.n	e4ca <_dtoa_r+0x252>
    e50a:	2401      	movs	r4, #1
    e50c:	2300      	movs	r3, #0
    e50e:	9308      	str	r3, [sp, #32]
    e510:	940d      	str	r4, [sp, #52]	; 0x34
    e512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e516:	9304      	str	r3, [sp, #16]
    e518:	4699      	mov	r9, r3
    e51a:	2200      	movs	r2, #0
    e51c:	2312      	movs	r3, #18
    e51e:	e7cf      	b.n	e4c0 <_dtoa_r+0x248>
    e520:	2301      	movs	r3, #1
    e522:	930d      	str	r3, [sp, #52]	; 0x34
    e524:	e7f5      	b.n	e512 <_dtoa_r+0x29a>
    e526:	bf00      	nop
    e528:	636f4361 	.word	0x636f4361
    e52c:	3fd287a7 	.word	0x3fd287a7
    e530:	8b60c8b3 	.word	0x8b60c8b3
    e534:	3fc68a28 	.word	0x3fc68a28
    e538:	509f79fb 	.word	0x509f79fb
    e53c:	3fd34413 	.word	0x3fd34413
    e540:	00026eff 	.word	0x00026eff
    e544:	00026f16 	.word	0x00026f16
    e548:	7ff00000 	.word	0x7ff00000
    e54c:	00026efb 	.word	0x00026efb
    e550:	00026ef2 	.word	0x00026ef2
    e554:	00026eca 	.word	0x00026eca
    e558:	00026ec9 	.word	0x00026ec9
    e55c:	3ff80000 	.word	0x3ff80000
    e560:	00026078 	.word	0x00026078
    e564:	00026f70 	.word	0x00026f70
    e568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e56a:	9304      	str	r3, [sp, #16]
    e56c:	4699      	mov	r9, r3
    e56e:	e7b6      	b.n	e4de <_dtoa_r+0x266>
    e570:	3101      	adds	r1, #1
    e572:	0052      	lsls	r2, r2, #1
    e574:	e7b7      	b.n	e4e6 <_dtoa_r+0x26e>
    e576:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    e57a:	9a03      	ldr	r2, [sp, #12]
    e57c:	601a      	str	r2, [r3, #0]
    e57e:	f1b9 0f0e 	cmp.w	r9, #14
    e582:	d86f      	bhi.n	e664 <_dtoa_r+0x3ec>
    e584:	2c00      	cmp	r4, #0
    e586:	d06d      	beq.n	e664 <_dtoa_r+0x3ec>
    e588:	2f00      	cmp	r7, #0
    e58a:	dd36      	ble.n	e5fa <_dtoa_r+0x382>
    e58c:	4ba1      	ldr	r3, [pc, #644]	; (e814 <_dtoa_r+0x59c>)
    e58e:	f007 020f 	and.w	r2, r7, #15
    e592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    e596:	ed93 7b00 	vldr	d7, [r3]
    e59a:	05f8      	lsls	r0, r7, #23
    e59c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    e5a0:	ea4f 1427 	mov.w	r4, r7, asr #4
    e5a4:	d517      	bpl.n	e5d6 <_dtoa_r+0x35e>
    e5a6:	4b9c      	ldr	r3, [pc, #624]	; (e818 <_dtoa_r+0x5a0>)
    e5a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e5ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    e5b0:	f7f3 f8dc 	bl	176c <__aeabi_ddiv>
    e5b4:	e9cd 0100 	strd	r0, r1, [sp]
    e5b8:	f004 040f 	and.w	r4, r4, #15
    e5bc:	f04f 0803 	mov.w	r8, #3
    e5c0:	4d95      	ldr	r5, [pc, #596]	; (e818 <_dtoa_r+0x5a0>)
    e5c2:	b95c      	cbnz	r4, e5dc <_dtoa_r+0x364>
    e5c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    e5c8:	e9dd 0100 	ldrd	r0, r1, [sp]
    e5cc:	f7f3 f8ce 	bl	176c <__aeabi_ddiv>
    e5d0:	e9cd 0100 	strd	r0, r1, [sp]
    e5d4:	e02b      	b.n	e62e <_dtoa_r+0x3b6>
    e5d6:	f04f 0802 	mov.w	r8, #2
    e5da:	e7f1      	b.n	e5c0 <_dtoa_r+0x348>
    e5dc:	07e1      	lsls	r1, r4, #31
    e5de:	d509      	bpl.n	e5f4 <_dtoa_r+0x37c>
    e5e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    e5e4:	e9d5 2300 	ldrd	r2, r3, [r5]
    e5e8:	f7f2 ff96 	bl	1518 <__aeabi_dmul>
    e5ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    e5f0:	f108 0801 	add.w	r8, r8, #1
    e5f4:	1064      	asrs	r4, r4, #1
    e5f6:	3508      	adds	r5, #8
    e5f8:	e7e3      	b.n	e5c2 <_dtoa_r+0x34a>
    e5fa:	f000 8107 	beq.w	e80c <_dtoa_r+0x594>
    e5fe:	427c      	negs	r4, r7
    e600:	4b84      	ldr	r3, [pc, #528]	; (e814 <_dtoa_r+0x59c>)
    e602:	4d85      	ldr	r5, [pc, #532]	; (e818 <_dtoa_r+0x5a0>)
    e604:	f004 020f 	and.w	r2, r4, #15
    e608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    e60c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e614:	f7f2 ff80 	bl	1518 <__aeabi_dmul>
    e618:	e9cd 0100 	strd	r0, r1, [sp]
    e61c:	1124      	asrs	r4, r4, #4
    e61e:	2300      	movs	r3, #0
    e620:	f04f 0802 	mov.w	r8, #2
    e624:	2c00      	cmp	r4, #0
    e626:	f040 80e5 	bne.w	e7f4 <_dtoa_r+0x57c>
    e62a:	2b00      	cmp	r3, #0
    e62c:	d1d0      	bne.n	e5d0 <_dtoa_r+0x358>
    e62e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e630:	e9dd 4500 	ldrd	r4, r5, [sp]
    e634:	2b00      	cmp	r3, #0
    e636:	f000 814c 	beq.w	e8d2 <_dtoa_r+0x65a>
    e63a:	4b78      	ldr	r3, [pc, #480]	; (e81c <_dtoa_r+0x5a4>)
    e63c:	2200      	movs	r2, #0
    e63e:	4620      	mov	r0, r4
    e640:	4629      	mov	r1, r5
    e642:	f7f3 f9db 	bl	19fc <__aeabi_dcmplt>
    e646:	2800      	cmp	r0, #0
    e648:	f000 8143 	beq.w	e8d2 <_dtoa_r+0x65a>
    e64c:	f1b9 0f00 	cmp.w	r9, #0
    e650:	f000 813f 	beq.w	e8d2 <_dtoa_r+0x65a>
    e654:	9b04      	ldr	r3, [sp, #16]
    e656:	2b00      	cmp	r3, #0
    e658:	f300 80e4 	bgt.w	e824 <_dtoa_r+0x5ac>
    e65c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    e660:	e9cd 3400 	strd	r3, r4, [sp]
    e664:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e666:	2b00      	cmp	r3, #0
    e668:	db02      	blt.n	e670 <_dtoa_r+0x3f8>
    e66a:	2f0e      	cmp	r7, #14
    e66c:	f340 8242 	ble.w	eaf4 <_dtoa_r+0x87c>
    e670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e672:	2a00      	cmp	r2, #0
    e674:	f040 8267 	bne.w	eb46 <_dtoa_r+0x8ce>
    e678:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e67a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    e67e:	2500      	movs	r5, #0
    e680:	f1b8 0f00 	cmp.w	r8, #0
    e684:	d00d      	beq.n	e6a2 <_dtoa_r+0x42a>
    e686:	9b07      	ldr	r3, [sp, #28]
    e688:	2b00      	cmp	r3, #0
    e68a:	dd0a      	ble.n	e6a2 <_dtoa_r+0x42a>
    e68c:	4543      	cmp	r3, r8
    e68e:	9a06      	ldr	r2, [sp, #24]
    e690:	bfa8      	it	ge
    e692:	4643      	movge	r3, r8
    e694:	1ad2      	subs	r2, r2, r3
    e696:	9206      	str	r2, [sp, #24]
    e698:	9a07      	ldr	r2, [sp, #28]
    e69a:	eba8 0803 	sub.w	r8, r8, r3
    e69e:	1ad3      	subs	r3, r2, r3
    e6a0:	9307      	str	r3, [sp, #28]
    e6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6a4:	b30b      	cbz	r3, e6ea <_dtoa_r+0x472>
    e6a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e6a8:	2b00      	cmp	r3, #0
    e6aa:	f000 82a6 	beq.w	ebfa <_dtoa_r+0x982>
    e6ae:	2c00      	cmp	r4, #0
    e6b0:	f000 82a1 	beq.w	ebf6 <_dtoa_r+0x97e>
    e6b4:	4629      	mov	r1, r5
    e6b6:	4622      	mov	r2, r4
    e6b8:	4658      	mov	r0, fp
    e6ba:	f00d fab5 	bl	1bc28 <__pow5mult>
    e6be:	9a02      	ldr	r2, [sp, #8]
    e6c0:	4601      	mov	r1, r0
    e6c2:	4605      	mov	r5, r0
    e6c4:	4658      	mov	r0, fp
    e6c6:	f00d fa05 	bl	1bad4 <__multiply>
    e6ca:	9902      	ldr	r1, [sp, #8]
    e6cc:	4606      	mov	r6, r0
    e6ce:	4658      	mov	r0, fp
    e6d0:	f00d f938 	bl	1b944 <_Bfree>
    e6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6d6:	1b1b      	subs	r3, r3, r4
    e6d8:	9309      	str	r3, [sp, #36]	; 0x24
    e6da:	f000 8291 	beq.w	ec00 <_dtoa_r+0x988>
    e6de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e6e0:	4631      	mov	r1, r6
    e6e2:	4658      	mov	r0, fp
    e6e4:	f00d faa0 	bl	1bc28 <__pow5mult>
    e6e8:	9002      	str	r0, [sp, #8]
    e6ea:	2101      	movs	r1, #1
    e6ec:	4658      	mov	r0, fp
    e6ee:	f00d f9db 	bl	1baa8 <__i2b>
    e6f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e6f4:	4604      	mov	r4, r0
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	f000 8284 	beq.w	ec04 <_dtoa_r+0x98c>
    e6fc:	461a      	mov	r2, r3
    e6fe:	4601      	mov	r1, r0
    e700:	4658      	mov	r0, fp
    e702:	f00d fa91 	bl	1bc28 <__pow5mult>
    e706:	9b08      	ldr	r3, [sp, #32]
    e708:	2b01      	cmp	r3, #1
    e70a:	4604      	mov	r4, r0
    e70c:	dc03      	bgt.n	e716 <_dtoa_r+0x49e>
    e70e:	9b00      	ldr	r3, [sp, #0]
    e710:	2b00      	cmp	r3, #0
    e712:	f000 827c 	beq.w	ec0e <_dtoa_r+0x996>
    e716:	2600      	movs	r6, #0
    e718:	6923      	ldr	r3, [r4, #16]
    e71a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    e71e:	6918      	ldr	r0, [r3, #16]
    e720:	f016 feb5 	bl	2548e <__hi0bits>
    e724:	9610      	str	r6, [sp, #64]	; 0x40
    e726:	f1c0 0020 	rsb	r0, r0, #32
    e72a:	9b07      	ldr	r3, [sp, #28]
    e72c:	4418      	add	r0, r3
    e72e:	f010 001f 	ands.w	r0, r0, #31
    e732:	f000 8291 	beq.w	ec58 <_dtoa_r+0x9e0>
    e736:	f1c0 0320 	rsb	r3, r0, #32
    e73a:	2b04      	cmp	r3, #4
    e73c:	f340 8281 	ble.w	ec42 <_dtoa_r+0x9ca>
    e740:	9b06      	ldr	r3, [sp, #24]
    e742:	f1c0 001c 	rsb	r0, r0, #28
    e746:	4403      	add	r3, r0
    e748:	9306      	str	r3, [sp, #24]
    e74a:	9b07      	ldr	r3, [sp, #28]
    e74c:	4403      	add	r3, r0
    e74e:	4480      	add	r8, r0
    e750:	9307      	str	r3, [sp, #28]
    e752:	9b06      	ldr	r3, [sp, #24]
    e754:	2b00      	cmp	r3, #0
    e756:	dd05      	ble.n	e764 <_dtoa_r+0x4ec>
    e758:	9902      	ldr	r1, [sp, #8]
    e75a:	461a      	mov	r2, r3
    e75c:	4658      	mov	r0, fp
    e75e:	f00d fabd 	bl	1bcdc <__lshift>
    e762:	9002      	str	r0, [sp, #8]
    e764:	9b07      	ldr	r3, [sp, #28]
    e766:	2b00      	cmp	r3, #0
    e768:	dd05      	ble.n	e776 <_dtoa_r+0x4fe>
    e76a:	4621      	mov	r1, r4
    e76c:	461a      	mov	r2, r3
    e76e:	4658      	mov	r0, fp
    e770:	f00d fab4 	bl	1bcdc <__lshift>
    e774:	4604      	mov	r4, r0
    e776:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e778:	2b00      	cmp	r3, #0
    e77a:	f000 8276 	beq.w	ec6a <_dtoa_r+0x9f2>
    e77e:	9802      	ldr	r0, [sp, #8]
    e780:	4621      	mov	r1, r4
    e782:	f016 fed3 	bl	2552c <__mcmp>
    e786:	2800      	cmp	r0, #0
    e788:	f280 826f 	bge.w	ec6a <_dtoa_r+0x9f2>
    e78c:	2300      	movs	r3, #0
    e78e:	9902      	ldr	r1, [sp, #8]
    e790:	220a      	movs	r2, #10
    e792:	4658      	mov	r0, fp
    e794:	f00d f8f8 	bl	1b988 <__multadd>
    e798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e79a:	9002      	str	r0, [sp, #8]
    e79c:	1e7e      	subs	r6, r7, #1
    e79e:	2b00      	cmp	r3, #0
    e7a0:	f000 825c 	beq.w	ec5c <_dtoa_r+0x9e4>
    e7a4:	2300      	movs	r3, #0
    e7a6:	4629      	mov	r1, r5
    e7a8:	220a      	movs	r2, #10
    e7aa:	4658      	mov	r0, fp
    e7ac:	f00d f8ec 	bl	1b988 <__multadd>
    e7b0:	9b04      	ldr	r3, [sp, #16]
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	4605      	mov	r5, r0
    e7b6:	dc03      	bgt.n	e7c0 <_dtoa_r+0x548>
    e7b8:	9b08      	ldr	r3, [sp, #32]
    e7ba:	2b02      	cmp	r3, #2
    e7bc:	f300 825e 	bgt.w	ec7c <_dtoa_r+0xa04>
    e7c0:	f1b8 0f00 	cmp.w	r8, #0
    e7c4:	dd05      	ble.n	e7d2 <_dtoa_r+0x55a>
    e7c6:	4629      	mov	r1, r5
    e7c8:	4642      	mov	r2, r8
    e7ca:	4658      	mov	r0, fp
    e7cc:	f00d fa86 	bl	1bcdc <__lshift>
    e7d0:	4605      	mov	r5, r0
    e7d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e7d4:	2b00      	cmp	r3, #0
    e7d6:	f000 82d0 	beq.w	ed7a <_dtoa_r+0xb02>
    e7da:	6869      	ldr	r1, [r5, #4]
    e7dc:	4658      	mov	r0, fp
    e7de:	f00d f871 	bl	1b8c4 <_Balloc>
    e7e2:	4607      	mov	r7, r0
    e7e4:	2800      	cmp	r0, #0
    e7e6:	f040 827f 	bne.w	ece8 <_dtoa_r+0xa70>
    e7ea:	4b0d      	ldr	r3, [pc, #52]	; (e820 <_dtoa_r+0x5a8>)
    e7ec:	4602      	mov	r2, r0
    e7ee:	f240 21ea 	movw	r1, #746	; 0x2ea
    e7f2:	e558      	b.n	e2a6 <_dtoa_r+0x2e>
    e7f4:	07e2      	lsls	r2, r4, #31
    e7f6:	d506      	bpl.n	e806 <_dtoa_r+0x58e>
    e7f8:	e9d5 2300 	ldrd	r2, r3, [r5]
    e7fc:	f7f2 fe8c 	bl	1518 <__aeabi_dmul>
    e800:	f108 0801 	add.w	r8, r8, #1
    e804:	2301      	movs	r3, #1
    e806:	1064      	asrs	r4, r4, #1
    e808:	3508      	adds	r5, #8
    e80a:	e70b      	b.n	e624 <_dtoa_r+0x3ac>
    e80c:	f04f 0802 	mov.w	r8, #2
    e810:	e70d      	b.n	e62e <_dtoa_r+0x3b6>
    e812:	bf00      	nop
    e814:	00026078 	.word	0x00026078
    e818:	00026050 	.word	0x00026050
    e81c:	3ff00000 	.word	0x3ff00000
    e820:	00026f70 	.word	0x00026f70
    e824:	4620      	mov	r0, r4
    e826:	4bad      	ldr	r3, [pc, #692]	; (eadc <_dtoa_r+0x864>)
    e828:	2200      	movs	r2, #0
    e82a:	4629      	mov	r1, r5
    e82c:	f7f2 fe74 	bl	1518 <__aeabi_dmul>
    e830:	e9cd 0100 	strd	r0, r1, [sp]
    e834:	9c04      	ldr	r4, [sp, #16]
    e836:	1e7e      	subs	r6, r7, #1
    e838:	f108 0801 	add.w	r8, r8, #1
    e83c:	4640      	mov	r0, r8
    e83e:	f7f2 fe01 	bl	1444 <__aeabi_i2d>
    e842:	e9dd 2300 	ldrd	r2, r3, [sp]
    e846:	f7f2 fe67 	bl	1518 <__aeabi_dmul>
    e84a:	4ba5      	ldr	r3, [pc, #660]	; (eae0 <_dtoa_r+0x868>)
    e84c:	2200      	movs	r2, #0
    e84e:	f7f2 fcad 	bl	11ac <__adddf3>
    e852:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    e856:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    e85a:	930f      	str	r3, [sp, #60]	; 0x3c
    e85c:	2c00      	cmp	r4, #0
    e85e:	d13b      	bne.n	e8d8 <_dtoa_r+0x660>
    e860:	e9dd 0100 	ldrd	r0, r1, [sp]
    e864:	4b9f      	ldr	r3, [pc, #636]	; (eae4 <_dtoa_r+0x86c>)
    e866:	2200      	movs	r2, #0
    e868:	f7f2 fc9e 	bl	11a8 <__aeabi_dsub>
    e86c:	4602      	mov	r2, r0
    e86e:	460b      	mov	r3, r1
    e870:	e9cd 2300 	strd	r2, r3, [sp]
    e874:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    e878:	f7f3 f8de 	bl	1a38 <__aeabi_dcmpgt>
    e87c:	2800      	cmp	r0, #0
    e87e:	f040 8157 	bne.w	eb30 <_dtoa_r+0x8b8>
    e882:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
    e886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e88a:	e9dd 0100 	ldrd	r0, r1, [sp]
    e88e:	f7f3 f8b5 	bl	19fc <__aeabi_dcmplt>
    e892:	2800      	cmp	r0, #0
    e894:	f43f aee2 	beq.w	e65c <_dtoa_r+0x3e4>
    e898:	2400      	movs	r4, #0
    e89a:	4625      	mov	r5, r4
    e89c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e89e:	f8dd a00c 	ldr.w	sl, [sp, #12]
    e8a2:	43de      	mvns	r6, r3
    e8a4:	f04f 0800 	mov.w	r8, #0
    e8a8:	4621      	mov	r1, r4
    e8aa:	4658      	mov	r0, fp
    e8ac:	f00d f84a 	bl	1b944 <_Bfree>
    e8b0:	2d00      	cmp	r5, #0
    e8b2:	f000 80a9 	beq.w	ea08 <_dtoa_r+0x790>
    e8b6:	f1b8 0f00 	cmp.w	r8, #0
    e8ba:	d005      	beq.n	e8c8 <_dtoa_r+0x650>
    e8bc:	45a8      	cmp	r8, r5
    e8be:	d003      	beq.n	e8c8 <_dtoa_r+0x650>
    e8c0:	4641      	mov	r1, r8
    e8c2:	4658      	mov	r0, fp
    e8c4:	f00d f83e 	bl	1b944 <_Bfree>
    e8c8:	4629      	mov	r1, r5
    e8ca:	4658      	mov	r0, fp
    e8cc:	f00d f83a 	bl	1b944 <_Bfree>
    e8d0:	e09a      	b.n	ea08 <_dtoa_r+0x790>
    e8d2:	463e      	mov	r6, r7
    e8d4:	464c      	mov	r4, r9
    e8d6:	e7b1      	b.n	e83c <_dtoa_r+0x5c4>
    e8d8:	4b83      	ldr	r3, [pc, #524]	; (eae8 <_dtoa_r+0x870>)
    e8da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    e8de:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    e8e2:	9b03      	ldr	r3, [sp, #12]
    e8e4:	441c      	add	r4, r3
    e8e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	d04a      	beq.n	e982 <_dtoa_r+0x70a>
    e8ec:	4602      	mov	r2, r0
    e8ee:	460b      	mov	r3, r1
    e8f0:	2000      	movs	r0, #0
    e8f2:	497e      	ldr	r1, [pc, #504]	; (eaec <_dtoa_r+0x874>)
    e8f4:	f7f2 ff3a 	bl	176c <__aeabi_ddiv>
    e8f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    e8fc:	f7f2 fc54 	bl	11a8 <__aeabi_dsub>
    e900:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    e904:	f8dd a00c 	ldr.w	sl, [sp, #12]
    e908:	e9dd 0100 	ldrd	r0, r1, [sp]
    e90c:	f7f3 fa6a 	bl	1de4 <__aeabi_d2iz>
    e910:	4605      	mov	r5, r0
    e912:	f7f2 fd97 	bl	1444 <__aeabi_i2d>
    e916:	4602      	mov	r2, r0
    e918:	460b      	mov	r3, r1
    e91a:	e9dd 0100 	ldrd	r0, r1, [sp]
    e91e:	f7f2 fc43 	bl	11a8 <__aeabi_dsub>
    e922:	3530      	adds	r5, #48	; 0x30
    e924:	e9cd 0100 	strd	r0, r1, [sp]
    e928:	4602      	mov	r2, r0
    e92a:	460b      	mov	r3, r1
    e92c:	f80a 5b01 	strb.w	r5, [sl], #1
    e930:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    e934:	f7f3 f880 	bl	1a38 <__aeabi_dcmpgt>
    e938:	2800      	cmp	r0, #0
    e93a:	d165      	bne.n	ea08 <_dtoa_r+0x790>
    e93c:	e9dd 2300 	ldrd	r2, r3, [sp]
    e940:	496b      	ldr	r1, [pc, #428]	; (eaf0 <_dtoa_r+0x878>)
    e942:	2000      	movs	r0, #0
    e944:	f7f2 fc30 	bl	11a8 <__aeabi_dsub>
    e948:	4602      	mov	r2, r0
    e94a:	460b      	mov	r3, r1
    e94c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    e950:	f7f3 f872 	bl	1a38 <__aeabi_dcmpgt>
    e954:	2800      	cmp	r0, #0
    e956:	f040 810d 	bne.w	eb74 <_dtoa_r+0x8fc>
    e95a:	45a2      	cmp	sl, r4
    e95c:	f000 80ea 	beq.w	eb34 <_dtoa_r+0x8bc>
    e960:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    e964:	4b5d      	ldr	r3, [pc, #372]	; (eadc <_dtoa_r+0x864>)
    e966:	2200      	movs	r2, #0
    e968:	f7f2 fdd6 	bl	1518 <__aeabi_dmul>
    e96c:	4b5b      	ldr	r3, [pc, #364]	; (eadc <_dtoa_r+0x864>)
    e96e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    e972:	2200      	movs	r2, #0
    e974:	e9dd 0100 	ldrd	r0, r1, [sp]
    e978:	f7f2 fdce 	bl	1518 <__aeabi_dmul>
    e97c:	e9cd 0100 	strd	r0, r1, [sp]
    e980:	e7c2      	b.n	e908 <_dtoa_r+0x690>
    e982:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    e986:	f7f2 fdc7 	bl	1518 <__aeabi_dmul>
    e98a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    e98e:	f8dd a00c 	ldr.w	sl, [sp, #12]
    e992:	46a0      	mov	r8, r4
    e994:	e9dd 0100 	ldrd	r0, r1, [sp]
    e998:	f7f3 fa24 	bl	1de4 <__aeabi_d2iz>
    e99c:	4605      	mov	r5, r0
    e99e:	f7f2 fd51 	bl	1444 <__aeabi_i2d>
    e9a2:	4602      	mov	r2, r0
    e9a4:	460b      	mov	r3, r1
    e9a6:	e9dd 0100 	ldrd	r0, r1, [sp]
    e9aa:	f7f2 fbfd 	bl	11a8 <__aeabi_dsub>
    e9ae:	3530      	adds	r5, #48	; 0x30
    e9b0:	f80a 5b01 	strb.w	r5, [sl], #1
    e9b4:	4602      	mov	r2, r0
    e9b6:	460b      	mov	r3, r1
    e9b8:	45a2      	cmp	sl, r4
    e9ba:	e9cd 2300 	strd	r2, r3, [sp]
    e9be:	f04f 0200 	mov.w	r2, #0
    e9c2:	d123      	bne.n	ea0c <_dtoa_r+0x794>
    e9c4:	4b49      	ldr	r3, [pc, #292]	; (eaec <_dtoa_r+0x874>)
    e9c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    e9ca:	f7f2 fbef 	bl	11ac <__adddf3>
    e9ce:	4602      	mov	r2, r0
    e9d0:	460b      	mov	r3, r1
    e9d2:	e9dd 0100 	ldrd	r0, r1, [sp]
    e9d6:	f7f3 f82f 	bl	1a38 <__aeabi_dcmpgt>
    e9da:	2800      	cmp	r0, #0
    e9dc:	f040 80ca 	bne.w	eb74 <_dtoa_r+0x8fc>
    e9e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    e9e4:	4941      	ldr	r1, [pc, #260]	; (eaec <_dtoa_r+0x874>)
    e9e6:	2000      	movs	r0, #0
    e9e8:	f7f2 fbde 	bl	11a8 <__aeabi_dsub>
    e9ec:	4602      	mov	r2, r0
    e9ee:	460b      	mov	r3, r1
    e9f0:	e9dd 0100 	ldrd	r0, r1, [sp]
    e9f4:	f7f3 f802 	bl	19fc <__aeabi_dcmplt>
    e9f8:	b170      	cbz	r0, ea18 <_dtoa_r+0x7a0>
    e9fa:	46c2      	mov	sl, r8
    e9fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    ea00:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    ea04:	2b30      	cmp	r3, #48	; 0x30
    ea06:	d0f8      	beq.n	e9fa <_dtoa_r+0x782>
    ea08:	4637      	mov	r7, r6
    ea0a:	e055      	b.n	eab8 <_dtoa_r+0x840>
    ea0c:	4b33      	ldr	r3, [pc, #204]	; (eadc <_dtoa_r+0x864>)
    ea0e:	f7f2 fd83 	bl	1518 <__aeabi_dmul>
    ea12:	e9cd 0100 	strd	r0, r1, [sp]
    ea16:	e7bd      	b.n	e994 <_dtoa_r+0x71c>
    ea18:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    ea1c:	e9cd 3400 	strd	r3, r4, [sp]
    ea20:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ea22:	2b00      	cmp	r3, #0
    ea24:	f6ff ae28 	blt.w	e678 <_dtoa_r+0x400>
    ea28:	2f0e      	cmp	r7, #14
    ea2a:	f73f ae25 	bgt.w	e678 <_dtoa_r+0x400>
    ea2e:	4b2e      	ldr	r3, [pc, #184]	; (eae8 <_dtoa_r+0x870>)
    ea30:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ea34:	ed93 7b00 	vldr	d7, [r3]
    ea38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea3a:	2b00      	cmp	r3, #0
    ea3c:	ed8d 7b04 	vstr	d7, [sp, #16]
    ea40:	da02      	bge.n	ea48 <_dtoa_r+0x7d0>
    ea42:	f1b9 0f00 	cmp.w	r9, #0
    ea46:	d064      	beq.n	eb12 <_dtoa_r+0x89a>
    ea48:	e9dd 4500 	ldrd	r4, r5, [sp]
    ea4c:	f8dd a00c 	ldr.w	sl, [sp, #12]
    ea50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea54:	4620      	mov	r0, r4
    ea56:	4629      	mov	r1, r5
    ea58:	f7f2 fe88 	bl	176c <__aeabi_ddiv>
    ea5c:	f7f3 f9c2 	bl	1de4 <__aeabi_d2iz>
    ea60:	4606      	mov	r6, r0
    ea62:	f7f2 fcef 	bl	1444 <__aeabi_i2d>
    ea66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea6a:	f7f2 fd55 	bl	1518 <__aeabi_dmul>
    ea6e:	4602      	mov	r2, r0
    ea70:	460b      	mov	r3, r1
    ea72:	4620      	mov	r0, r4
    ea74:	4629      	mov	r1, r5
    ea76:	f106 0430 	add.w	r4, r6, #48	; 0x30
    ea7a:	f7f2 fb95 	bl	11a8 <__aeabi_dsub>
    ea7e:	f80a 4b01 	strb.w	r4, [sl], #1
    ea82:	9c03      	ldr	r4, [sp, #12]
    ea84:	ebaa 0404 	sub.w	r4, sl, r4
    ea88:	45a1      	cmp	r9, r4
    ea8a:	4602      	mov	r2, r0
    ea8c:	460b      	mov	r3, r1
    ea8e:	f040 8082 	bne.w	eb96 <_dtoa_r+0x91e>
    ea92:	f7f2 fb8b 	bl	11ac <__adddf3>
    ea96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea9a:	4604      	mov	r4, r0
    ea9c:	460d      	mov	r5, r1
    ea9e:	f7f2 ffcb 	bl	1a38 <__aeabi_dcmpgt>
    eaa2:	2800      	cmp	r0, #0
    eaa4:	d165      	bne.n	eb72 <_dtoa_r+0x8fa>
    eaa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    eaaa:	4620      	mov	r0, r4
    eaac:	4629      	mov	r1, r5
    eaae:	f7f2 ff9b 	bl	19e8 <__aeabi_dcmpeq>
    eab2:	b108      	cbz	r0, eab8 <_dtoa_r+0x840>
    eab4:	07f3      	lsls	r3, r6, #31
    eab6:	d45c      	bmi.n	eb72 <_dtoa_r+0x8fa>
    eab8:	9902      	ldr	r1, [sp, #8]
    eaba:	4658      	mov	r0, fp
    eabc:	f00c ff42 	bl	1b944 <_Bfree>
    eac0:	2300      	movs	r3, #0
    eac2:	f88a 3000 	strb.w	r3, [sl]
    eac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eac8:	3701      	adds	r7, #1
    eaca:	601f      	str	r7, [r3, #0]
    eacc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    eace:	2b00      	cmp	r3, #0
    ead0:	f43f ac20 	beq.w	e314 <_dtoa_r+0x9c>
    ead4:	f8c3 a000 	str.w	sl, [r3]
    ead8:	e41c      	b.n	e314 <_dtoa_r+0x9c>
    eada:	bf00      	nop
    eadc:	40240000 	.word	0x40240000
    eae0:	401c0000 	.word	0x401c0000
    eae4:	40140000 	.word	0x40140000
    eae8:	00026078 	.word	0x00026078
    eaec:	3fe00000 	.word	0x3fe00000
    eaf0:	3ff00000 	.word	0x3ff00000
    eaf4:	4ba2      	ldr	r3, [pc, #648]	; (ed80 <_dtoa_r+0xb08>)
    eaf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    eafa:	ed93 7b00 	vldr	d7, [r3]
    eafe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eb00:	2b00      	cmp	r3, #0
    eb02:	ed8d 7b04 	vstr	d7, [sp, #16]
    eb06:	da9f      	bge.n	ea48 <_dtoa_r+0x7d0>
    eb08:	f1b9 0f00 	cmp.w	r9, #0
    eb0c:	dc9c      	bgt.n	ea48 <_dtoa_r+0x7d0>
    eb0e:	f47f aec3 	bne.w	e898 <_dtoa_r+0x620>
    eb12:	4b9c      	ldr	r3, [pc, #624]	; (ed84 <_dtoa_r+0xb0c>)
    eb14:	2200      	movs	r2, #0
    eb16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    eb1a:	f7f2 fcfd 	bl	1518 <__aeabi_dmul>
    eb1e:	e9dd 2300 	ldrd	r2, r3, [sp]
    eb22:	f7f2 ff7f 	bl	1a24 <__aeabi_dcmpge>
    eb26:	4604      	mov	r4, r0
    eb28:	2800      	cmp	r0, #0
    eb2a:	f47f aeb5 	bne.w	e898 <_dtoa_r+0x620>
    eb2e:	463e      	mov	r6, r7
    eb30:	4625      	mov	r5, r4
    eb32:	e0b4      	b.n	ec9e <_dtoa_r+0xa26>
    eb34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    eb38:	e9cd 3400 	strd	r3, r4, [sp]
    eb3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    eb3e:	2b00      	cmp	r3, #0
    eb40:	db01      	blt.n	eb46 <_dtoa_r+0x8ce>
    eb42:	2f0e      	cmp	r7, #14
    eb44:	ddd6      	ble.n	eaf4 <_dtoa_r+0x87c>
    eb46:	9a08      	ldr	r2, [sp, #32]
    eb48:	2a01      	cmp	r2, #1
    eb4a:	dc36      	bgt.n	ebba <_dtoa_r+0x942>
    eb4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eb4e:	b382      	cbz	r2, ebb2 <_dtoa_r+0x93a>
    eb50:	f203 4333 	addw	r3, r3, #1075	; 0x433
    eb54:	9c09      	ldr	r4, [sp, #36]	; 0x24
    eb56:	f8dd 8018 	ldr.w	r8, [sp, #24]
    eb5a:	9a06      	ldr	r2, [sp, #24]
    eb5c:	441a      	add	r2, r3
    eb5e:	9206      	str	r2, [sp, #24]
    eb60:	9a07      	ldr	r2, [sp, #28]
    eb62:	2101      	movs	r1, #1
    eb64:	441a      	add	r2, r3
    eb66:	4658      	mov	r0, fp
    eb68:	9207      	str	r2, [sp, #28]
    eb6a:	f00c ff9d 	bl	1baa8 <__i2b>
    eb6e:	4605      	mov	r5, r0
    eb70:	e586      	b.n	e680 <_dtoa_r+0x408>
    eb72:	463e      	mov	r6, r7
    eb74:	4653      	mov	r3, sl
    eb76:	469a      	mov	sl, r3
    eb78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    eb7c:	2a39      	cmp	r2, #57	; 0x39
    eb7e:	d106      	bne.n	eb8e <_dtoa_r+0x916>
    eb80:	9a03      	ldr	r2, [sp, #12]
    eb82:	429a      	cmp	r2, r3
    eb84:	d1f7      	bne.n	eb76 <_dtoa_r+0x8fe>
    eb86:	9903      	ldr	r1, [sp, #12]
    eb88:	2230      	movs	r2, #48	; 0x30
    eb8a:	3601      	adds	r6, #1
    eb8c:	700a      	strb	r2, [r1, #0]
    eb8e:	781a      	ldrb	r2, [r3, #0]
    eb90:	3201      	adds	r2, #1
    eb92:	701a      	strb	r2, [r3, #0]
    eb94:	e738      	b.n	ea08 <_dtoa_r+0x790>
    eb96:	4b7c      	ldr	r3, [pc, #496]	; (ed88 <_dtoa_r+0xb10>)
    eb98:	2200      	movs	r2, #0
    eb9a:	f7f2 fcbd 	bl	1518 <__aeabi_dmul>
    eb9e:	2200      	movs	r2, #0
    eba0:	2300      	movs	r3, #0
    eba2:	4604      	mov	r4, r0
    eba4:	460d      	mov	r5, r1
    eba6:	f7f2 ff1f 	bl	19e8 <__aeabi_dcmpeq>
    ebaa:	2800      	cmp	r0, #0
    ebac:	f43f af50 	beq.w	ea50 <_dtoa_r+0x7d8>
    ebb0:	e782      	b.n	eab8 <_dtoa_r+0x840>
    ebb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ebb4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    ebb8:	e7cc      	b.n	eb54 <_dtoa_r+0x8dc>
    ebba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ebbc:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
    ebc0:	42a3      	cmp	r3, r4
    ebc2:	db08      	blt.n	ebd6 <_dtoa_r+0x95e>
    ebc4:	f1b9 0f00 	cmp.w	r9, #0
    ebc8:	eba3 0404 	sub.w	r4, r3, r4
    ebcc:	db0e      	blt.n	ebec <_dtoa_r+0x974>
    ebce:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ebd2:	464b      	mov	r3, r9
    ebd4:	e7c1      	b.n	eb5a <_dtoa_r+0x8e2>
    ebd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ebd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ebda:	9409      	str	r4, [sp, #36]	; 0x24
    ebdc:	1ae3      	subs	r3, r4, r3
    ebde:	441a      	add	r2, r3
    ebe0:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ebe4:	9210      	str	r2, [sp, #64]	; 0x40
    ebe6:	464b      	mov	r3, r9
    ebe8:	2400      	movs	r4, #0
    ebea:	e7b6      	b.n	eb5a <_dtoa_r+0x8e2>
    ebec:	9b06      	ldr	r3, [sp, #24]
    ebee:	eba3 0809 	sub.w	r8, r3, r9
    ebf2:	2300      	movs	r3, #0
    ebf4:	e7b1      	b.n	eb5a <_dtoa_r+0x8e2>
    ebf6:	9e02      	ldr	r6, [sp, #8]
    ebf8:	e571      	b.n	e6de <_dtoa_r+0x466>
    ebfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ebfc:	9902      	ldr	r1, [sp, #8]
    ebfe:	e570      	b.n	e6e2 <_dtoa_r+0x46a>
    ec00:	9602      	str	r6, [sp, #8]
    ec02:	e572      	b.n	e6ea <_dtoa_r+0x472>
    ec04:	9b08      	ldr	r3, [sp, #32]
    ec06:	2b01      	cmp	r3, #1
    ec08:	dc17      	bgt.n	ec3a <_dtoa_r+0x9c2>
    ec0a:	9b00      	ldr	r3, [sp, #0]
    ec0c:	b9ab      	cbnz	r3, ec3a <_dtoa_r+0x9c2>
    ec0e:	9b01      	ldr	r3, [sp, #4]
    ec10:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ec14:	b99b      	cbnz	r3, ec3e <_dtoa_r+0x9c6>
    ec16:	9b01      	ldr	r3, [sp, #4]
    ec18:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    ec1c:	0d36      	lsrs	r6, r6, #20
    ec1e:	0536      	lsls	r6, r6, #20
    ec20:	b136      	cbz	r6, ec30 <_dtoa_r+0x9b8>
    ec22:	9b06      	ldr	r3, [sp, #24]
    ec24:	3301      	adds	r3, #1
    ec26:	9306      	str	r3, [sp, #24]
    ec28:	9b07      	ldr	r3, [sp, #28]
    ec2a:	3301      	adds	r3, #1
    ec2c:	9307      	str	r3, [sp, #28]
    ec2e:	2601      	movs	r6, #1
    ec30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ec32:	2b00      	cmp	r3, #0
    ec34:	f47f ad70 	bne.w	e718 <_dtoa_r+0x4a0>
    ec38:	9610      	str	r6, [sp, #64]	; 0x40
    ec3a:	2001      	movs	r0, #1
    ec3c:	e575      	b.n	e72a <_dtoa_r+0x4b2>
    ec3e:	2600      	movs	r6, #0
    ec40:	e7f6      	b.n	ec30 <_dtoa_r+0x9b8>
    ec42:	f43f ad86 	beq.w	e752 <_dtoa_r+0x4da>
    ec46:	9a06      	ldr	r2, [sp, #24]
    ec48:	331c      	adds	r3, #28
    ec4a:	441a      	add	r2, r3
    ec4c:	9206      	str	r2, [sp, #24]
    ec4e:	9a07      	ldr	r2, [sp, #28]
    ec50:	441a      	add	r2, r3
    ec52:	4498      	add	r8, r3
    ec54:	9207      	str	r2, [sp, #28]
    ec56:	e57c      	b.n	e752 <_dtoa_r+0x4da>
    ec58:	4603      	mov	r3, r0
    ec5a:	e7f4      	b.n	ec46 <_dtoa_r+0x9ce>
    ec5c:	9b04      	ldr	r3, [sp, #16]
    ec5e:	2b00      	cmp	r3, #0
    ec60:	dc2b      	bgt.n	ecba <_dtoa_r+0xa42>
    ec62:	9b08      	ldr	r3, [sp, #32]
    ec64:	2b02      	cmp	r3, #2
    ec66:	dc09      	bgt.n	ec7c <_dtoa_r+0xa04>
    ec68:	e027      	b.n	ecba <_dtoa_r+0xa42>
    ec6a:	f1b9 0f00 	cmp.w	r9, #0
    ec6e:	dc1d      	bgt.n	ecac <_dtoa_r+0xa34>
    ec70:	9b08      	ldr	r3, [sp, #32]
    ec72:	2b02      	cmp	r3, #2
    ec74:	dd1a      	ble.n	ecac <_dtoa_r+0xa34>
    ec76:	f8cd 9010 	str.w	r9, [sp, #16]
    ec7a:	463e      	mov	r6, r7
    ec7c:	9b04      	ldr	r3, [sp, #16]
    ec7e:	2b00      	cmp	r3, #0
    ec80:	f47f ae0c 	bne.w	e89c <_dtoa_r+0x624>
    ec84:	4621      	mov	r1, r4
    ec86:	2205      	movs	r2, #5
    ec88:	4658      	mov	r0, fp
    ec8a:	f00c fe7d 	bl	1b988 <__multadd>
    ec8e:	4601      	mov	r1, r0
    ec90:	4604      	mov	r4, r0
    ec92:	9802      	ldr	r0, [sp, #8]
    ec94:	f016 fc4a 	bl	2552c <__mcmp>
    ec98:	2800      	cmp	r0, #0
    ec9a:	f77f adff 	ble.w	e89c <_dtoa_r+0x624>
    ec9e:	f8dd a00c 	ldr.w	sl, [sp, #12]
    eca2:	2331      	movs	r3, #49	; 0x31
    eca4:	f80a 3b01 	strb.w	r3, [sl], #1
    eca8:	3601      	adds	r6, #1
    ecaa:	e5fb      	b.n	e8a4 <_dtoa_r+0x62c>
    ecac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ecae:	f8cd 9010 	str.w	r9, [sp, #16]
    ecb2:	463e      	mov	r6, r7
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	f47f ad83 	bne.w	e7c0 <_dtoa_r+0x548>
    ecba:	9f03      	ldr	r7, [sp, #12]
    ecbc:	9802      	ldr	r0, [sp, #8]
    ecbe:	4621      	mov	r1, r4
    ecc0:	f016 fa24 	bl	2510c <quorem>
    ecc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
    ecc8:	f807 9b01 	strb.w	r9, [r7], #1
    eccc:	9b03      	ldr	r3, [sp, #12]
    ecce:	9a04      	ldr	r2, [sp, #16]
    ecd0:	1afb      	subs	r3, r7, r3
    ecd2:	429a      	cmp	r2, r3
    ecd4:	f340 80cb 	ble.w	ee6e <_dtoa_r+0xbf6>
    ecd8:	9902      	ldr	r1, [sp, #8]
    ecda:	2300      	movs	r3, #0
    ecdc:	220a      	movs	r2, #10
    ecde:	4658      	mov	r0, fp
    ece0:	f00c fe52 	bl	1b988 <__multadd>
    ece4:	9002      	str	r0, [sp, #8]
    ece6:	e7e9      	b.n	ecbc <_dtoa_r+0xa44>
    ece8:	692a      	ldr	r2, [r5, #16]
    ecea:	3202      	adds	r2, #2
    ecec:	0092      	lsls	r2, r2, #2
    ecee:	f105 010c 	add.w	r1, r5, #12
    ecf2:	300c      	adds	r0, #12
    ecf4:	f016 f889 	bl	24e0a <memcpy>
    ecf8:	2201      	movs	r2, #1
    ecfa:	4639      	mov	r1, r7
    ecfc:	4658      	mov	r0, fp
    ecfe:	f00c ffed 	bl	1bcdc <__lshift>
    ed02:	9b03      	ldr	r3, [sp, #12]
    ed04:	f103 0a01 	add.w	sl, r3, #1
    ed08:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    ed0c:	4413      	add	r3, r2
    ed0e:	9307      	str	r3, [sp, #28]
    ed10:	9b00      	ldr	r3, [sp, #0]
    ed12:	f003 0301 	and.w	r3, r3, #1
    ed16:	46a8      	mov	r8, r5
    ed18:	9309      	str	r3, [sp, #36]	; 0x24
    ed1a:	4605      	mov	r5, r0
    ed1c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    ed20:	4621      	mov	r1, r4
    ed22:	9802      	ldr	r0, [sp, #8]
    ed24:	9304      	str	r3, [sp, #16]
    ed26:	f016 f9f1 	bl	2510c <quorem>
    ed2a:	4641      	mov	r1, r8
    ed2c:	9006      	str	r0, [sp, #24]
    ed2e:	f100 0930 	add.w	r9, r0, #48	; 0x30
    ed32:	9802      	ldr	r0, [sp, #8]
    ed34:	f016 fbfa 	bl	2552c <__mcmp>
    ed38:	462a      	mov	r2, r5
    ed3a:	4621      	mov	r1, r4
    ed3c:	4607      	mov	r7, r0
    ed3e:	4658      	mov	r0, fp
    ed40:	f00d f838 	bl	1bdb4 <__mdiff>
    ed44:	68c2      	ldr	r2, [r0, #12]
    ed46:	4601      	mov	r1, r0
    ed48:	b302      	cbz	r2, ed8c <_dtoa_r+0xb14>
    ed4a:	4658      	mov	r0, fp
    ed4c:	f00c fdfa 	bl	1b944 <_Bfree>
    ed50:	2f00      	cmp	r7, #0
    ed52:	da3a      	bge.n	edca <_dtoa_r+0xb52>
    ed54:	9902      	ldr	r1, [sp, #8]
    ed56:	2201      	movs	r2, #1
    ed58:	4658      	mov	r0, fp
    ed5a:	f00c ffbf 	bl	1bcdc <__lshift>
    ed5e:	4621      	mov	r1, r4
    ed60:	9002      	str	r0, [sp, #8]
    ed62:	f016 fbe3 	bl	2552c <__mcmp>
    ed66:	2800      	cmp	r0, #0
    ed68:	dc03      	bgt.n	ed72 <_dtoa_r+0xafa>
    ed6a:	d129      	bne.n	edc0 <_dtoa_r+0xb48>
    ed6c:	f019 0f01 	tst.w	r9, #1
    ed70:	d026      	beq.n	edc0 <_dtoa_r+0xb48>
    ed72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    ed76:	d11d      	bne.n	edb4 <_dtoa_r+0xb3c>
    ed78:	e032      	b.n	ede0 <_dtoa_r+0xb68>
    ed7a:	4628      	mov	r0, r5
    ed7c:	e7c1      	b.n	ed02 <_dtoa_r+0xa8a>
    ed7e:	bf00      	nop
    ed80:	00026078 	.word	0x00026078
    ed84:	40140000 	.word	0x40140000
    ed88:	40240000 	.word	0x40240000
    ed8c:	900a      	str	r0, [sp, #40]	; 0x28
    ed8e:	9802      	ldr	r0, [sp, #8]
    ed90:	f016 fbcc 	bl	2552c <__mcmp>
    ed94:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed96:	900c      	str	r0, [sp, #48]	; 0x30
    ed98:	4658      	mov	r0, fp
    ed9a:	f00c fdd3 	bl	1b944 <_Bfree>
    ed9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    eda0:	bb5a      	cbnz	r2, edfa <_dtoa_r+0xb82>
    eda2:	9b08      	ldr	r3, [sp, #32]
    eda4:	b953      	cbnz	r3, edbc <_dtoa_r+0xb44>
    eda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eda8:	b943      	cbnz	r3, edbc <_dtoa_r+0xb44>
    edaa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    edae:	d017      	beq.n	ede0 <_dtoa_r+0xb68>
    edb0:	2f00      	cmp	r7, #0
    edb2:	dd05      	ble.n	edc0 <_dtoa_r+0xb48>
    edb4:	9b06      	ldr	r3, [sp, #24]
    edb6:	f103 0931 	add.w	r9, r3, #49	; 0x31
    edba:	e001      	b.n	edc0 <_dtoa_r+0xb48>
    edbc:	2f00      	cmp	r7, #0
    edbe:	da2a      	bge.n	ee16 <_dtoa_r+0xb9e>
    edc0:	f8dd a010 	ldr.w	sl, [sp, #16]
    edc4:	f80a 9b01 	strb.w	r9, [sl], #1
    edc8:	e56e      	b.n	e8a8 <_dtoa_r+0x630>
    edca:	9b08      	ldr	r3, [sp, #32]
    edcc:	433b      	orrs	r3, r7
    edce:	d104      	bne.n	edda <_dtoa_r+0xb62>
    edd0:	9b00      	ldr	r3, [sp, #0]
    edd2:	f003 0301 	and.w	r3, r3, #1
    edd6:	2b00      	cmp	r3, #0
    edd8:	d0bc      	beq.n	ed54 <_dtoa_r+0xadc>
    edda:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    edde:	d136      	bne.n	ee4e <_dtoa_r+0xbd6>
    ede0:	9f04      	ldr	r7, [sp, #16]
    ede2:	2339      	movs	r3, #57	; 0x39
    ede4:	f807 3b01 	strb.w	r3, [r7], #1
    ede8:	46ba      	mov	sl, r7
    edea:	3f01      	subs	r7, #1
    edec:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    edf0:	2b39      	cmp	r3, #57	; 0x39
    edf2:	d05b      	beq.n	eeac <_dtoa_r+0xc34>
    edf4:	3301      	adds	r3, #1
    edf6:	703b      	strb	r3, [r7, #0]
    edf8:	e556      	b.n	e8a8 <_dtoa_r+0x630>
    edfa:	2f00      	cmp	r7, #0
    edfc:	db06      	blt.n	ee0c <_dtoa_r+0xb94>
    edfe:	9b08      	ldr	r3, [sp, #32]
    ee00:	433b      	orrs	r3, r7
    ee02:	d106      	bne.n	ee12 <_dtoa_r+0xb9a>
    ee04:	9b00      	ldr	r3, [sp, #0]
    ee06:	f003 0301 	and.w	r3, r3, #1
    ee0a:	b913      	cbnz	r3, ee12 <_dtoa_r+0xb9a>
    ee0c:	2a00      	cmp	r2, #0
    ee0e:	dca1      	bgt.n	ed54 <_dtoa_r+0xadc>
    ee10:	e7d6      	b.n	edc0 <_dtoa_r+0xb48>
    ee12:	2a00      	cmp	r2, #0
    ee14:	dce1      	bgt.n	edda <_dtoa_r+0xb62>
    ee16:	9b07      	ldr	r3, [sp, #28]
    ee18:	f80a 9c01 	strb.w	r9, [sl, #-1]
    ee1c:	4553      	cmp	r3, sl
    ee1e:	4657      	mov	r7, sl
    ee20:	d02f      	beq.n	ee82 <_dtoa_r+0xc0a>
    ee22:	9902      	ldr	r1, [sp, #8]
    ee24:	2300      	movs	r3, #0
    ee26:	220a      	movs	r2, #10
    ee28:	4658      	mov	r0, fp
    ee2a:	f00c fdad 	bl	1b988 <__multadd>
    ee2e:	45a8      	cmp	r8, r5
    ee30:	9002      	str	r0, [sp, #8]
    ee32:	f04f 0300 	mov.w	r3, #0
    ee36:	f04f 020a 	mov.w	r2, #10
    ee3a:	4641      	mov	r1, r8
    ee3c:	4658      	mov	r0, fp
    ee3e:	d10b      	bne.n	ee58 <_dtoa_r+0xbe0>
    ee40:	f00c fda2 	bl	1b988 <__multadd>
    ee44:	4680      	mov	r8, r0
    ee46:	4605      	mov	r5, r0
    ee48:	f10a 0a01 	add.w	sl, sl, #1
    ee4c:	e766      	b.n	ed1c <_dtoa_r+0xaa4>
    ee4e:	f8dd a010 	ldr.w	sl, [sp, #16]
    ee52:	f109 0901 	add.w	r9, r9, #1
    ee56:	e7b5      	b.n	edc4 <_dtoa_r+0xb4c>
    ee58:	f00c fd96 	bl	1b988 <__multadd>
    ee5c:	4629      	mov	r1, r5
    ee5e:	4680      	mov	r8, r0
    ee60:	2300      	movs	r3, #0
    ee62:	220a      	movs	r2, #10
    ee64:	4658      	mov	r0, fp
    ee66:	f00c fd8f 	bl	1b988 <__multadd>
    ee6a:	4605      	mov	r5, r0
    ee6c:	e7ec      	b.n	ee48 <_dtoa_r+0xbd0>
    ee6e:	9b04      	ldr	r3, [sp, #16]
    ee70:	2b00      	cmp	r3, #0
    ee72:	bfc8      	it	gt
    ee74:	461f      	movgt	r7, r3
    ee76:	9b03      	ldr	r3, [sp, #12]
    ee78:	bfd8      	it	le
    ee7a:	2701      	movle	r7, #1
    ee7c:	441f      	add	r7, r3
    ee7e:	f04f 0800 	mov.w	r8, #0
    ee82:	9902      	ldr	r1, [sp, #8]
    ee84:	2201      	movs	r2, #1
    ee86:	4658      	mov	r0, fp
    ee88:	f00c ff28 	bl	1bcdc <__lshift>
    ee8c:	4621      	mov	r1, r4
    ee8e:	9002      	str	r0, [sp, #8]
    ee90:	f016 fb4c 	bl	2552c <__mcmp>
    ee94:	2800      	cmp	r0, #0
    ee96:	dca7      	bgt.n	ede8 <_dtoa_r+0xb70>
    ee98:	d102      	bne.n	eea0 <_dtoa_r+0xc28>
    ee9a:	f019 0f01 	tst.w	r9, #1
    ee9e:	d1a3      	bne.n	ede8 <_dtoa_r+0xb70>
    eea0:	46ba      	mov	sl, r7
    eea2:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    eea6:	2b30      	cmp	r3, #48	; 0x30
    eea8:	d0fa      	beq.n	eea0 <_dtoa_r+0xc28>
    eeaa:	e4fd      	b.n	e8a8 <_dtoa_r+0x630>
    eeac:	9b03      	ldr	r3, [sp, #12]
    eeae:	42bb      	cmp	r3, r7
    eeb0:	d19a      	bne.n	ede8 <_dtoa_r+0xb70>
    eeb2:	9a03      	ldr	r2, [sp, #12]
    eeb4:	2331      	movs	r3, #49	; 0x31
    eeb6:	3601      	adds	r6, #1
    eeb8:	7013      	strb	r3, [r2, #0]
    eeba:	e4f5      	b.n	e8a8 <_dtoa_r+0x630>
    eebc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    eebe:	2b00      	cmp	r3, #0
    eec0:	f47f aa23 	bne.w	e30a <_dtoa_r+0x92>
    eec4:	4b01      	ldr	r3, [pc, #4]	; (eecc <_dtoa_r+0xc54>)
    eec6:	f7ff ba42 	b.w	e34e <_dtoa_r+0xd6>
    eeca:	bf00      	nop
    eecc:	00026ef2 	.word	0x00026ef2

0000eed0 <nan>:
    eed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; eed8 <nan+0x8>
    eed4:	4770      	bx	lr
    eed6:	bf00      	nop
    eed8:	00000000 	.word	0x00000000
    eedc:	7ff80000 	.word	0x7ff80000

0000eee0 <crc32c>:
static uint32_t crc32c(uint8_t *data, uint32_t len) {
    eee0:	b510      	push	{r4, lr}
    eee2:	4604      	mov	r4, r0
    eee4:	4608      	mov	r0, r1
	for (uint32_t i = 0; i < len;i++) {
    eee6:	2100      	movs	r1, #0
	uint32_t crc = 0xFFFFFFFF;
    eee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	for (uint32_t i = 0; i < len;i++) {
    eeec:	e00c      	b.n	ef08 <crc32c+0x28>
			uint32_t mask = -(crc & 1);
    eeee:	f342 0e00 	sbfx	lr, r2, #0, #1
			crc = (crc >> 1) ^ (0x82F63B78 & mask);
    eef2:	4b0a      	ldr	r3, [pc, #40]	; (ef1c <crc32c+0x3c>)
    eef4:	ea0e 0303 	and.w	r3, lr, r3
    eef8:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
		for (int j = 7;j >= 0;j--) {
    eefc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    ef00:	f1bc 0f00 	cmp.w	ip, #0
    ef04:	daf3      	bge.n	eeee <crc32c+0xe>
	for (uint32_t i = 0; i < len;i++) {
    ef06:	3101      	adds	r1, #1
    ef08:	4281      	cmp	r1, r0
    ef0a:	d204      	bcs.n	ef16 <crc32c+0x36>
		uint32_t byte = data[i];
    ef0c:	5c63      	ldrb	r3, [r4, r1]
		crc = crc ^ byte;
    ef0e:	405a      	eors	r2, r3
		for (int j = 7;j >= 0;j--) {
    ef10:	f04f 0c07 	mov.w	ip, #7
    ef14:	e7f4      	b.n	ef00 <crc32c+0x20>
}
    ef16:	43d0      	mvns	r0, r2
    ef18:	bd10      	pop	{r4, pc}
    ef1a:	bf00      	nop
    ef1c:	82f63b78 	.word	0x82f63b78

0000ef20 <esb_event_handler>:
void esb_event_handler(struct nrf_esb_evt const *event) {
    ef20:	b508      	push	{r3, lr}
	switch (event->evt_id) {
    ef22:	7803      	ldrb	r3, [r0, #0]
    ef24:	2b01      	cmp	r3, #1
    ef26:	d002      	beq.n	ef2e <esb_event_handler+0xe>
    ef28:	2b02      	cmp	r3, #2
    ef2a:	d003      	beq.n	ef34 <esb_event_handler+0x14>
}
    ef2c:	bd08      	pop	{r3, pc}
		nrf_esb_flush_tx();
    ef2e:	f001 f9b7 	bl	102a0 <nrf_esb_flush_tx>
		break;
    ef32:	e7fb      	b.n	ef2c <esb_event_handler+0xc>
		if (nrf_esb_read_rx_payload(&esb_info_obj.rx_payload) == 0) {
    ef34:	4804      	ldr	r0, [pc, #16]	; (ef48 <esb_event_handler+0x28>)
    ef36:	f001 f8ff 	bl	10138 <nrf_esb_read_rx_payload>
    ef3a:	2800      	cmp	r0, #0
    ef3c:	d1f6      	bne.n	ef2c <esb_event_handler+0xc>
			k_work_submit(&esb_info_obj.work);
    ef3e:	4803      	ldr	r0, [pc, #12]	; (ef4c <esb_event_handler+0x2c>)
    ef40:	f00a fd6e 	bl	19a20 <k_work_submit>
}
    ef44:	e7f2      	b.n	ef2c <esb_event_handler+0xc>
    ef46:	bf00      	nop
    ef48:	200022c8 	.word	0x200022c8
    ef4c:	200022b8 	.word	0x200022b8

0000ef50 <handle_esb_rx>:
	if (info->rx_payload.length > 0) {
    ef50:	7c03      	ldrb	r3, [r0, #16]
    ef52:	b903      	cbnz	r3, ef56 <handle_esb_rx+0x6>
    ef54:	4770      	bx	lr
void handle_esb_rx(struct k_work *item) {
    ef56:	b570      	push	{r4, r5, r6, lr}
    ef58:	ed2d 8b02 	vpush	{d8}
    ef5c:	b082      	sub	sp, #8
    ef5e:	4604      	mov	r4, r0
		uint16_t crc = (uint16_t)info->rx_payload.data[info->rx_payload.length - 2] << 8 |
    ef60:	1e99      	subs	r1, r3, #2
    ef62:	1842      	adds	r2, r0, r1
    ef64:	7d52      	ldrb	r2, [r2, #21]
				(uint16_t)info->rx_payload.data[info->rx_payload.length - 1];
    ef66:	3b01      	subs	r3, #1
    ef68:	4403      	add	r3, r0
    ef6a:	7d5d      	ldrb	r5, [r3, #21]
		uint16_t crc = (uint16_t)info->rx_payload.data[info->rx_payload.length - 2] << 8 |
    ef6c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
		uint16_t crc_calc = crc16_2(info->rx_payload.data, info->rx_payload.length - 2);
    ef70:	f100 0615 	add.w	r6, r0, #21
    ef74:	4630      	mov	r0, r6
    ef76:	f001 fa3b 	bl	103f0 <crc16_2>
		if (crc == crc_calc) {
    ef7a:	4285      	cmp	r5, r0
    ef7c:	d003      	beq.n	ef86 <handle_esb_rx+0x36>
}
    ef7e:	b002      	add	sp, #8
    ef80:	ecbd 8b02 	vpop	{d8}
    ef84:	bd70      	pop	{r4, r5, r6, pc}
			esb_rx_cnt++;
    ef86:	4a37      	ldr	r2, [pc, #220]	; (f064 <handle_esb_rx+0x114>)
    ef88:	6813      	ldr	r3, [r2, #0]
    ef8a:	3301      	adds	r3, #1
    ef8c:	6013      	str	r3, [r2, #0]
			esb_no_rx_cnt = 0;
    ef8e:	4b36      	ldr	r3, [pc, #216]	; (f068 <handle_esb_rx+0x118>)
    ef90:	2200      	movs	r2, #0
    ef92:	601a      	str	r2, [r3, #0]
			if (info->rx_payload.data[0] == MOTE_PACKET_ALIVE && info->rx_payload.length >= 15) {
    ef94:	7d63      	ldrb	r3, [r4, #21]
    ef96:	2b02      	cmp	r3, #2
    ef98:	d1f1      	bne.n	ef7e <handle_esb_rx+0x2e>
    ef9a:	7c23      	ldrb	r3, [r4, #16]
    ef9c:	2b0e      	cmp	r3, #14
    ef9e:	d9ee      	bls.n	ef7e <handle_esb_rx+0x2e>
				int32_t index = 1;
    efa0:	2301      	movs	r3, #1
    efa2:	9301      	str	r3, [sp, #4]
				vesc_val.rx_cnt++;
    efa4:	4d31      	ldr	r5, [pc, #196]	; (f06c <handle_esb_rx+0x11c>)
    efa6:	682b      	ldr	r3, [r5, #0]
    efa8:	3301      	adds	r3, #1
    efaa:	602b      	str	r3, [r5, #0]
				vesc_val.battery_level = buffer_get_float16(info->rx_payload.data, 1e3, &index);
    efac:	ed9f 8a30 	vldr	s16, [pc, #192]	; f070 <handle_esb_rx+0x120>
    efb0:	a901      	add	r1, sp, #4
    efb2:	eeb0 0a48 	vmov.f32	s0, s16
    efb6:	4630      	mov	r0, r6
    efb8:	f010 f9bf 	bl	1f33a <buffer_get_float16>
    efbc:	ed85 0a01 	vstr	s0, [r5, #4]
				vesc_val.speed = buffer_get_float32(info->rx_payload.data, 1e3, &index);
    efc0:	a901      	add	r1, sp, #4
    efc2:	eeb0 0a48 	vmov.f32	s0, s16
    efc6:	4630      	mov	r0, r6
    efc8:	f010 f9c7 	bl	1f35a <buffer_get_float32>
    efcc:	ed85 0a02 	vstr	s0, [r5, #8]
				vesc_val.distance = buffer_get_float32(info->rx_payload.data, 1e3, &index);
    efd0:	a901      	add	r1, sp, #4
    efd2:	eeb0 0a48 	vmov.f32	s0, s16
    efd6:	4630      	mov	r0, r6
    efd8:	f010 f9bf 	bl	1f35a <buffer_get_float32>
    efdc:	ed85 0a03 	vstr	s0, [r5, #12]
				vesc_val.temp_fet = buffer_get_float16(info->rx_payload.data, 1e1, &index);
    efe0:	a901      	add	r1, sp, #4
    efe2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
    efe6:	4630      	mov	r0, r6
    efe8:	f010 f9a7 	bl	1f33a <buffer_get_float16>
    efec:	ed85 0a04 	vstr	s0, [r5, #16]
				vesc_val.temp_motor = buffer_get_float16(info->rx_payload.data, 1e1, &index);
    eff0:	a901      	add	r1, sp, #4
    eff2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
    eff6:	4630      	mov	r0, r6
    eff8:	f010 f99f 	bl	1f33a <buffer_get_float16>
    effc:	ed85 0a05 	vstr	s0, [r5, #20]
				index++; // Skip sequence number
    f000:	9b01      	ldr	r3, [sp, #4]
    f002:	3301      	adds	r3, #1
    f004:	9301      	str	r3, [sp, #4]
				if (info->rx_payload.length >= 28) {
    f006:	7c23      	ldrb	r3, [r4, #16]
    f008:	2b1b      	cmp	r3, #27
    f00a:	d9b8      	bls.n	ef7e <handle_esb_rx+0x2e>
					vesc_val.wh_left = buffer_get_float32(info->rx_payload.data, 1e3, &index);
    f00c:	a901      	add	r1, sp, #4
    f00e:	eeb0 0a48 	vmov.f32	s0, s16
    f012:	4630      	mov	r0, r6
    f014:	f010 f9a1 	bl	1f35a <buffer_get_float32>
    f018:	ed85 0a06 	vstr	s0, [r5, #24]
					vesc_val.wh_used = buffer_get_float32(info->rx_payload.data, 1e4, &index);
    f01c:	ed9f 8a15 	vldr	s16, [pc, #84]	; f074 <handle_esb_rx+0x124>
    f020:	a901      	add	r1, sp, #4
    f022:	eeb0 0a48 	vmov.f32	s0, s16
    f026:	4630      	mov	r0, r6
    f028:	f010 f997 	bl	1f35a <buffer_get_float32>
    f02c:	ed85 0a07 	vstr	s0, [r5, #28]
					vesc_val.wh_charged = buffer_get_float32(info->rx_payload.data, 1e4, &index);
    f030:	a901      	add	r1, sp, #4
    f032:	eeb0 0a48 	vmov.f32	s0, s16
    f036:	4630      	mov	r0, r6
    f038:	f010 f98f 	bl	1f35a <buffer_get_float32>
    f03c:	ed85 0a08 	vstr	s0, [r5, #32]
					vesc_val.curr_prop = (float)((int8_t)info->rx_payload.data[index++]) / 100.0;
    f040:	9b01      	ldr	r3, [sp, #4]
    f042:	1c5a      	adds	r2, r3, #1
    f044:	9201      	str	r2, [sp, #4]
    f046:	441c      	add	r4, r3
    f048:	f994 3015 	ldrsb.w	r3, [r4, #21]
    f04c:	ee07 3a90 	vmov	s15, r3
    f050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    f054:	eddf 6a08 	vldr	s13, [pc, #32]	; f078 <handle_esb_rx+0x128>
    f058:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    f05c:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
}
    f060:	e78d      	b.n	ef7e <handle_esb_rx+0x2e>
    f062:	bf00      	nop
    f064:	20002340 	.word	0x20002340
    f068:	2000233c 	.word	0x2000233c
    f06c:	20002344 	.word	0x20002344
    f070:	447a0000 	.word	0x447a0000
    f074:	461c4000 	.word	0x461c4000
    f078:	42c80000 	.word	0x42c80000

0000f07c <esb_init>:
int esb_init(void) {
    f07c:	b508      	push	{r3, lr}
	k_work_init(&esb_info_obj.work, handle_esb_rx);
    f07e:	490e      	ldr	r1, [pc, #56]	; (f0b8 <esb_init+0x3c>)
    f080:	480e      	ldr	r0, [pc, #56]	; (f0bc <esb_init+0x40>)
    f082:	f015 fb6b 	bl	2475c <k_work_init>
	nrf_esb_config.protocol = NRF_ESB_PROTOCOL_ESB_DPL;
    f086:	480e      	ldr	r0, [pc, #56]	; (f0c0 <esb_init+0x44>)
    f088:	2201      	movs	r2, #1
    f08a:	7002      	strb	r2, [r0, #0]
	nrf_esb_config.retransmit_delay = 1000;
    f08c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f090:	8183      	strh	r3, [r0, #12]
	nrf_esb_config.retransmit_count = 1;
    f092:	81c2      	strh	r2, [r0, #14]
	nrf_esb_config.tx_mode = NRF_ESB_TXMODE_AUTO;
    f094:	2300      	movs	r3, #0
    f096:	7403      	strb	r3, [r0, #16]
	nrf_esb_config.bitrate = NRF_ESB_BITRATE_1MBPS;
    f098:	7203      	strb	r3, [r0, #8]
	nrf_esb_config.event_handler = esb_event_handler;
    f09a:	490a      	ldr	r1, [pc, #40]	; (f0c4 <esb_init+0x48>)
    f09c:	6041      	str	r1, [r0, #4]
	nrf_esb_config.mode = NRF_ESB_MODE_PTX;
    f09e:	7043      	strb	r3, [r0, #1]
	nrf_esb_config.selective_auto_ack = false;
    f0a0:	7503      	strb	r3, [r0, #20]
	nrf_esb_config.crc = NRF_ESB_CRC_8BIT;
    f0a2:	7242      	strb	r2, [r0, #9]
	nrf_esb_config.tx_output_power = NRF_ESB_TX_POWER_8DBM;
    f0a4:	2308      	movs	r3, #8
    f0a6:	7283      	strb	r3, [r0, #10]
	err = nrf_esb_init(&nrf_esb_config);
    f0a8:	f000 ff3e 	bl	ff28 <nrf_esb_init>
	if (err) {
    f0ac:	b100      	cbz	r0, f0b0 <esb_init+0x34>
}
    f0ae:	bd08      	pop	{r3, pc}
	err = nrf_esb_set_address_length(3);
    f0b0:	2003      	movs	r0, #3
    f0b2:	f001 f911 	bl	102d8 <nrf_esb_set_address_length>
	if (err) {
    f0b6:	e7fa      	b.n	f0ae <esb_init+0x32>
    f0b8:	0000ef51 	.word	0x0000ef51
    f0bc:	200022b8 	.word	0x200022b8
    f0c0:	20000428 	.word	0x20000428
    f0c4:	0000ef21 	.word	0x0000ef21

0000f0c8 <set_addr_ch>:
void set_addr_ch(uint32_t h) {
    f0c8:	b500      	push	{lr}
    f0ca:	b085      	sub	sp, #20
    f0cc:	4603      	mov	r3, r0
	uint8_t base_addr_0[4] = {199, 0, 0, 0};
    f0ce:	22c7      	movs	r2, #199	; 0xc7
    f0d0:	9203      	str	r2, [sp, #12]
	uint8_t addr_prefix[8] = {198, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
    f0d2:	4910      	ldr	r1, [pc, #64]	; (f114 <set_addr_ch+0x4c>)
    f0d4:	aa01      	add	r2, sp, #4
    f0d6:	c903      	ldmia	r1, {r0, r1}
    f0d8:	e882 0003 	stmia.w	r2, {r0, r1}
	addr_prefix[0] = h & 0xFF;
    f0dc:	f88d 3004 	strb.w	r3, [sp, #4]
	base_addr_0[0] = (h >> 8) & 0xFF;
    f0e0:	0a1a      	lsrs	r2, r3, #8
    f0e2:	f88d 200c 	strb.w	r2, [sp, #12]
	base_addr_0[1] = (h >> 16) & 0xFF;
    f0e6:	0c1a      	lsrs	r2, r3, #16
    f0e8:	f88d 200d 	strb.w	r2, [sp, #13]
	channel = (h >> 24) & 0x3F;
    f0ec:	f3c3 6005 	ubfx	r0, r3, #24, #6
	if (channel <= 5) {
    f0f0:	2805      	cmp	r0, #5
    f0f2:	d800      	bhi.n	f0f6 <set_addr_ch+0x2e>
		channel += 5;
    f0f4:	3005      	adds	r0, #5
	nrf_esb_set_rf_channel(channel);
    f0f6:	f001 f967 	bl	103c8 <nrf_esb_set_rf_channel>
	nrf_esb_set_base_address_0(base_addr_0);
    f0fa:	a803      	add	r0, sp, #12
    f0fc:	f001 f90c 	bl	10318 <nrf_esb_set_base_address_0>
	nrf_esb_set_base_address_1(base_addr_0);
    f100:	a803      	add	r0, sp, #12
    f102:	f001 f921 	bl	10348 <nrf_esb_set_base_address_1>
	nrf_esb_set_prefixes(addr_prefix, 1);
    f106:	2101      	movs	r1, #1
    f108:	a801      	add	r0, sp, #4
    f10a:	f001 f935 	bl	10378 <nrf_esb_set_prefixes>
}
    f10e:	b005      	add	sp, #20
    f110:	f85d fb04 	ldr.w	pc, [sp], #4
    f114:	00026148 	.word	0x00026148

0000f118 <rfhelp_send_data_crc>:
void rfhelp_send_data_crc(char *data, int len) {
    f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f11a:	4607      	mov	r7, r0
    f11c:	460c      	mov	r4, r1
	tx_payload.pipe = 0;
    f11e:	4d10      	ldr	r5, [pc, #64]	; (f160 <rfhelp_send_data_crc+0x48>)
    f120:	2300      	movs	r3, #0
    f122:	706b      	strb	r3, [r5, #1]
	tx_payload.length = len + 2;
    f124:	1c8a      	adds	r2, r1, #2
    f126:	702a      	strb	r2, [r5, #0]
	tx_payload.noack = false;
    f128:	70eb      	strb	r3, [r5, #3]
	unsigned short crc = crc16_2((unsigned char*)data, len);
    f12a:	f001 f961 	bl	103f0 <crc16_2>
    f12e:	4606      	mov	r6, r0
	memcpy(tx_payload.data, data, len);
    f130:	2320      	movs	r3, #32
    f132:	4622      	mov	r2, r4
    f134:	4639      	mov	r1, r7
    f136:	1d68      	adds	r0, r5, #5
    f138:	f015 fe75 	bl	24e26 <__memcpy_chk>
	tx_payload.data[len] = (char)(crc >> 8);
    f13c:	f3c6 2207 	ubfx	r2, r6, #8, #8
    f140:	192b      	adds	r3, r5, r4
    f142:	715a      	strb	r2, [r3, #5]
	tx_payload.data[len + 1] = (char)(crc & 0xFF);
    f144:	3401      	adds	r4, #1
    f146:	442c      	add	r4, r5
    f148:	7166      	strb	r6, [r4, #5]
	int res = nrf_esb_write_payload(&tx_payload); 
    f14a:	4628      	mov	r0, r5
    f14c:	f000 ff64 	bl	10018 <nrf_esb_write_payload>
	if (res) {
    f150:	b900      	cbnz	r0, f154 <rfhelp_send_data_crc+0x3c>
}
    f152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f154:	4601      	mov	r1, r0
		printk("TX failed %d\r\n", res);
    f156:	4803      	ldr	r0, [pc, #12]	; (f164 <rfhelp_send_data_crc+0x4c>)
    f158:	f010 fdca 	bl	1fcf0 <printk>
}
    f15c:	e7f9      	b.n	f152 <rfhelp_send_data_crc+0x3a>
    f15e:	bf00      	nop
    f160:	20002290 	.word	0x20002290
    f164:	00026154 	.word	0x00026154

0000f168 <send_pairing_info>:
void send_pairing_info(uint32_t h) {
    f168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f16c:	b086      	sub	sp, #24
    f16e:	4604      	mov	r4, r0
	uint8_t base_addr_0[4] = {0xC5, 0, 0, 0};
    f170:	23c5      	movs	r3, #197	; 0xc5
    f172:	9305      	str	r3, [sp, #20]
	uint8_t addr_prefix[8] = {0xC6, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
    f174:	4a1c      	ldr	r2, [pc, #112]	; (f1e8 <send_pairing_info+0x80>)
    f176:	ab03      	add	r3, sp, #12
    f178:	e892 0003 	ldmia.w	r2, {r0, r1}
    f17c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t addr0 = h & 0xFF;
    f180:	fa5f f884 	uxtb.w	r8, r4
	uint8_t addr1 = (h >> 8) & 0xFF;
    f184:	f3c4 2707 	ubfx	r7, r4, #8, #8
	uint8_t addr2 = (h >> 16) & 0xFF;
    f188:	f3c4 4607 	ubfx	r6, r4, #16, #8
	uint8_t ch = (h >> 24) & 0x3F;
    f18c:	f3c4 6505 	ubfx	r5, r4, #24, #6
	if (ch <= 5) {
    f190:	2d05      	cmp	r5, #5
    f192:	d800      	bhi.n	f196 <send_pairing_info+0x2e>
		ch += 5;
    f194:	3505      	adds	r5, #5
	nrf_esb_stop_rx();
    f196:	f001 f859 	bl	1024c <nrf_esb_stop_rx>
	nrf_esb_set_rf_channel(channel);
    f19a:	2043      	movs	r0, #67	; 0x43
    f19c:	f001 f914 	bl	103c8 <nrf_esb_set_rf_channel>
	nrf_esb_set_base_address_0(base_addr_0);
    f1a0:	a805      	add	r0, sp, #20
    f1a2:	f001 f8b9 	bl	10318 <nrf_esb_set_base_address_0>
	nrf_esb_set_base_address_1(base_addr_0);
    f1a6:	a805      	add	r0, sp, #20
    f1a8:	f001 f8ce 	bl	10348 <nrf_esb_set_base_address_1>
	nrf_esb_set_prefixes(addr_prefix, 1);
    f1ac:	2101      	movs	r1, #1
    f1ae:	a803      	add	r0, sp, #12
    f1b0:	f001 f8e2 	bl	10378 <nrf_esb_set_prefixes>
	pl[index++] = MOTE_PACKET_PAIRING_INFO;
    f1b4:	2307      	movs	r3, #7
    f1b6:	f88d 3004 	strb.w	r3, [sp, #4]
	pl[index++] = addr0;
    f1ba:	f88d 8005 	strb.w	r8, [sp, #5]
	pl[index++] = addr1;
    f1be:	f88d 7006 	strb.w	r7, [sp, #6]
	pl[index++] = addr2;
    f1c2:	f88d 6007 	strb.w	r6, [sp, #7]
	pl[index++] = ch;
    f1c6:	f88d 5008 	strb.w	r5, [sp, #8]
	rfhelp_send_data_crc((char*)pl, index);
    f1ca:	2105      	movs	r1, #5
    f1cc:	a801      	add	r0, sp, #4
    f1ce:	f7ff ffa3 	bl	f118 <rfhelp_send_data_crc>
	esb_wait_idle();
    f1d2:	f010 f874 	bl	1f2be <esb_wait_idle>
	set_addr_ch(h);
    f1d6:	4620      	mov	r0, r4
    f1d8:	f7ff ff76 	bl	f0c8 <set_addr_ch>
	nrf_esb_start_rx();
    f1dc:	f000 fff0 	bl	101c0 <nrf_esb_start_rx>
}
    f1e0:	b006      	add	sp, #24
    f1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1e6:	bf00      	nop
    f1e8:	00026148 	.word	0x00026148

0000f1ec <clocks_start>:
int clocks_start(void) {
    f1ec:	b510      	push	{r4, lr}
	NRF_CLOCK->TASKS_HFCLKSTART = 1;
    f1ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f1f2:	2201      	movs	r2, #1
    f1f4:	601a      	str	r2, [r3, #0]
	while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0);
    f1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f1fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    f1fe:	2b00      	cmp	r3, #0
    f200:	d0f9      	beq.n	f1f6 <clocks_start+0xa>
	NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    f202:	2400      	movs	r4, #0
    f204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f208:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	printk("HF clock started\r\n");
    f20c:	4802      	ldr	r0, [pc, #8]	; (f218 <clocks_start+0x2c>)
    f20e:	f010 fd6f 	bl	1fcf0 <printk>
}
    f212:	4620      	mov	r0, r4
    f214:	bd10      	pop	{r4, pc}
    f216:	bf00      	nop
    f218:	00026164 	.word	0x00026164

0000f21c <go_to_sleep>:
void go_to_sleep(void) {
    f21c:	b538      	push	{r3, r4, r5, lr}
	sleep_in_ms = 5000;
    f21e:	4b48      	ldr	r3, [pc, #288]	; (f340 <go_to_sleep+0x124>)
    f220:	f241 3288 	movw	r2, #5000	; 0x1388
    f224:	601a      	str	r2, [r3, #0]
	bool was_sw2 = false;
    f226:	2500      	movs	r5, #0
	bool was_sw1 = false;
    f228:	462c      	mov	r4, r5
	while (sleep_in_ms > 0) {
    f22a:	e033      	b.n	f294 <go_to_sleep+0x78>
		bool clicked_1 = SW1 && !was_sw1;
    f22c:	2300      	movs	r3, #0
    f22e:	e045      	b.n	f2bc <go_to_sleep+0xa0>
    f230:	2300      	movs	r3, #0
    f232:	e043      	b.n	f2bc <go_to_sleep+0xa0>
		bool clicked_2 = SW2 && !was_sw2;
    f234:	2200      	movs	r2, #0
		if (clicked_1 || clicked_2) {
    f236:	b903      	cbnz	r3, f23a <go_to_sleep+0x1e>
    f238:	b112      	cbz	r2, f240 <go_to_sleep+0x24>
			esb_no_rx_cnt = 0;
    f23a:	4b42      	ldr	r3, [pc, #264]	; (f344 <go_to_sleep+0x128>)
    f23c:	2200      	movs	r2, #0
    f23e:	601a      	str	r2, [r3, #0]
    return p_reg->IN;
    f240:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f244:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		was_sw1 = SW1;
    f248:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    f24c:	d009      	beq.n	f262 <go_to_sleep+0x46>
    f24e:	4b3e      	ldr	r3, [pc, #248]	; (f348 <go_to_sleep+0x12c>)
    f250:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    f254:	f013 0f02 	tst.w	r3, #2
    f258:	d03b      	beq.n	f2d2 <go_to_sleep+0xb6>
    f25a:	2400      	movs	r4, #0
    f25c:	e002      	b.n	f264 <go_to_sleep+0x48>
		bool clicked_2 = SW2 && !was_sw2;
    f25e:	2201      	movs	r2, #1
    f260:	e7e9      	b.n	f236 <go_to_sleep+0x1a>
		was_sw1 = SW1;
    f262:	2401      	movs	r4, #1
    f264:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f268:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		was_sw2 = SW2;
    f26c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    f270:	bf0c      	ite	eq
    f272:	2501      	moveq	r5, #1
    f274:	2500      	movne	r5, #0
		sleep_in_ms -= 20;
    f276:	4a32      	ldr	r2, [pc, #200]	; (f340 <go_to_sleep+0x124>)
    f278:	6813      	ldr	r3, [r2, #0]
    f27a:	3b14      	subs	r3, #20
    f27c:	6013      	str	r3, [r2, #0]
		NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    f27e:	4b33      	ldr	r3, [pc, #204]	; (f34c <go_to_sleep+0x130>)
    f280:	4a33      	ldr	r2, [pc, #204]	; (f350 <go_to_sleep+0x134>)
    f282:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		k_msleep(20);
    f286:	2014      	movs	r0, #20
    f288:	f010 f812 	bl	1f2b0 <k_msleep>
		if (esb_no_rx_cnt < 5) {
    f28c:	4b2d      	ldr	r3, [pc, #180]	; (f344 <go_to_sleep+0x128>)
    f28e:	681b      	ldr	r3, [r3, #0]
    f290:	2b04      	cmp	r3, #4
    f292:	dd20      	ble.n	f2d6 <go_to_sleep+0xba>
	while (sleep_in_ms > 0) {
    f294:	4b2a      	ldr	r3, [pc, #168]	; (f340 <go_to_sleep+0x124>)
    f296:	681b      	ldr	r3, [r3, #0]
    f298:	2b00      	cmp	r3, #0
    f29a:	dd21      	ble.n	f2e0 <go_to_sleep+0xc4>
    f29c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f2a0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		bool clicked_1 = SW1 && !was_sw1;
    f2a4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    f2a8:	d005      	beq.n	f2b6 <go_to_sleep+0x9a>
    f2aa:	4b27      	ldr	r3, [pc, #156]	; (f348 <go_to_sleep+0x12c>)
    f2ac:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    f2b0:	f013 0f02 	tst.w	r3, #2
    f2b4:	d1ba      	bne.n	f22c <go_to_sleep+0x10>
    f2b6:	2c00      	cmp	r4, #0
    f2b8:	d1ba      	bne.n	f230 <go_to_sleep+0x14>
    f2ba:	2301      	movs	r3, #1
    f2bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    f2c0:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
		bool clicked_2 = SW2 && !was_sw2;
    f2c4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    f2c8:	d1b4      	bne.n	f234 <go_to_sleep+0x18>
    f2ca:	2d00      	cmp	r5, #0
    f2cc:	d0c7      	beq.n	f25e <go_to_sleep+0x42>
    f2ce:	2200      	movs	r2, #0
    f2d0:	e7b1      	b.n	f236 <go_to_sleep+0x1a>
		was_sw1 = SW1;
    f2d2:	2401      	movs	r4, #1
    f2d4:	e7c6      	b.n	f264 <go_to_sleep+0x48>
			sleep_in_ms = -1;
    f2d6:	4b1a      	ldr	r3, [pc, #104]	; (f340 <go_to_sleep+0x124>)
    f2d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f2dc:	601a      	str	r2, [r3, #0]
			return;
    f2de:	e02d      	b.n	f33c <go_to_sleep+0x120>
	going_to_sleep = true;
    f2e0:	4b1c      	ldr	r3, [pc, #112]	; (f354 <go_to_sleep+0x138>)
    f2e2:	2201      	movs	r2, #1
    f2e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0;i < 10;i++) {
    f2e6:	2400      	movs	r4, #0
    f2e8:	2c09      	cmp	r4, #9
    f2ea:	dc08      	bgt.n	f2fe <go_to_sleep+0xe2>
		NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    f2ec:	4b17      	ldr	r3, [pc, #92]	; (f34c <go_to_sleep+0x130>)
    f2ee:	4a18      	ldr	r2, [pc, #96]	; (f350 <go_to_sleep+0x134>)
    f2f0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		k_msleep(100);
    f2f4:	2064      	movs	r0, #100	; 0x64
    f2f6:	f00f ffdb 	bl	1f2b0 <k_msleep>
	for (int i = 0;i < 10;i++) {
    f2fa:	3401      	adds	r4, #1
    f2fc:	e7f4      	b.n	f2e8 <go_to_sleep+0xcc>
	nrf_esb_disable();
    f2fe:	f000 fde9 	bl	fed4 <nrf_esb_disable>
	NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    f302:	4b12      	ldr	r3, [pc, #72]	; (f34c <go_to_sleep+0x130>)
    f304:	4a12      	ldr	r2, [pc, #72]	; (f350 <go_to_sleep+0x134>)
    f306:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
	nvs_write(&fs, CONF_DATA_ID, &conf, sizeof(conf));
    f30a:	2301      	movs	r3, #1
    f30c:	4a12      	ldr	r2, [pc, #72]	; (f358 <go_to_sleep+0x13c>)
    f30e:	4619      	mov	r1, r3
    f310:	4812      	ldr	r0, [pc, #72]	; (f35c <go_to_sleep+0x140>)
    f312:	f012 f8a1 	bl	21458 <nvs_write>
    p_reg->OUTSET = set_mask;
    f316:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f31a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f31e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    f322:	4a0f      	ldr	r2, [pc, #60]	; (f360 <go_to_sleep+0x144>)
    f324:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
    f328:	4907      	ldr	r1, [pc, #28]	; (f348 <go_to_sleep+0x12c>)
    f32a:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
    f32e:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
	NRF_POWER->SYSTEMOFF = 1;
    f332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f336:	2201      	movs	r2, #1
    f338:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f33c:	bd38      	pop	{r3, r4, r5, pc}
    f33e:	bf00      	nop
    f340:	20000440 	.word	0x20000440
    f344:	2000233c 	.word	0x2000233c
    f348:	50000300 	.word	0x50000300
    f34c:	40010000 	.word	0x40010000
    f350:	6e524635 	.word	0x6e524635
    f354:	20004ba6 	.word	0x20004ba6
    f358:	200022f0 	.word	0x200022f0
    f35c:	200022f4 	.word	0x200022f4
    f360:	0003000c 	.word	0x0003000c

0000f364 <go_to_sleep_long_press>:
void go_to_sleep_long_press(void) {
    f364:	b510      	push	{r4, lr}
	sleep_in_ms = 2000;
    f366:	4b2e      	ldr	r3, [pc, #184]	; (f420 <go_to_sleep_long_press+0xbc>)
    f368:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    f36c:	601a      	str	r2, [r3, #0]
	while (sleep_in_ms > 0) {
    f36e:	4b2c      	ldr	r3, [pc, #176]	; (f420 <go_to_sleep_long_press+0xbc>)
    f370:	681b      	ldr	r3, [r3, #0]
    f372:	2b00      	cmp	r3, #0
    f374:	dd16      	ble.n	f3a4 <go_to_sleep_long_press+0x40>
		sleep_in_ms -= 20;
    f376:	4a2a      	ldr	r2, [pc, #168]	; (f420 <go_to_sleep_long_press+0xbc>)
    f378:	6813      	ldr	r3, [r2, #0]
    f37a:	3b14      	subs	r3, #20
    f37c:	6013      	str	r3, [r2, #0]
		NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    f37e:	4b29      	ldr	r3, [pc, #164]	; (f424 <go_to_sleep_long_press+0xc0>)
    f380:	4a29      	ldr	r2, [pc, #164]	; (f428 <go_to_sleep_long_press+0xc4>)
    f382:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		k_msleep(20);
    f386:	2014      	movs	r0, #20
    f388:	f00f ff92 	bl	1f2b0 <k_msleep>
    return p_reg->IN;
    f38c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f390:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
		if (!SW2) {
    f394:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    f398:	d0e9      	beq.n	f36e <go_to_sleep_long_press+0xa>
			sleep_in_ms = -1;
    f39a:	4b21      	ldr	r3, [pc, #132]	; (f420 <go_to_sleep_long_press+0xbc>)
    f39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3a0:	601a      	str	r2, [r3, #0]
			return;
    f3a2:	e03c      	b.n	f41e <go_to_sleep_long_press+0xba>
	going_to_sleep = true;
    f3a4:	4b21      	ldr	r3, [pc, #132]	; (f42c <go_to_sleep_long_press+0xc8>)
    f3a6:	2201      	movs	r2, #1
    f3a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0;i < 10;i++) {
    f3aa:	2400      	movs	r4, #0
    f3ac:	2c09      	cmp	r4, #9
    f3ae:	dc08      	bgt.n	f3c2 <go_to_sleep_long_press+0x5e>
		NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    f3b0:	4b1c      	ldr	r3, [pc, #112]	; (f424 <go_to_sleep_long_press+0xc0>)
    f3b2:	4a1d      	ldr	r2, [pc, #116]	; (f428 <go_to_sleep_long_press+0xc4>)
    f3b4:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		k_msleep(100);
    f3b8:	2064      	movs	r0, #100	; 0x64
    f3ba:	f00f ff79 	bl	1f2b0 <k_msleep>
	for (int i = 0;i < 10;i++) {
    f3be:	3401      	adds	r4, #1
    f3c0:	e7f4      	b.n	f3ac <go_to_sleep_long_press+0x48>
    f3c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f3c6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	while (SW2) {
    f3ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    f3ce:	d107      	bne.n	f3e0 <go_to_sleep_long_press+0x7c>
		NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    f3d0:	4b14      	ldr	r3, [pc, #80]	; (f424 <go_to_sleep_long_press+0xc0>)
    f3d2:	4a15      	ldr	r2, [pc, #84]	; (f428 <go_to_sleep_long_press+0xc4>)
    f3d4:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		k_msleep(20);
    f3d8:	2014      	movs	r0, #20
    f3da:	f00f ff69 	bl	1f2b0 <k_msleep>
    f3de:	e7f0      	b.n	f3c2 <go_to_sleep_long_press+0x5e>
	nrf_esb_disable();
    f3e0:	f000 fd78 	bl	fed4 <nrf_esb_disable>
	NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    f3e4:	4b0f      	ldr	r3, [pc, #60]	; (f424 <go_to_sleep_long_press+0xc0>)
    f3e6:	4a10      	ldr	r2, [pc, #64]	; (f428 <go_to_sleep_long_press+0xc4>)
    f3e8:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
	nvs_write(&fs, CONF_DATA_ID, &conf, sizeof(conf));
    f3ec:	2301      	movs	r3, #1
    f3ee:	4a10      	ldr	r2, [pc, #64]	; (f430 <go_to_sleep_long_press+0xcc>)
    f3f0:	4619      	mov	r1, r3
    f3f2:	4810      	ldr	r0, [pc, #64]	; (f434 <go_to_sleep_long_press+0xd0>)
    f3f4:	f012 f830 	bl	21458 <nvs_write>
    p_reg->OUTSET = set_mask;
    f3f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f3fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f400:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    f404:	4a0c      	ldr	r2, [pc, #48]	; (f438 <go_to_sleep_long_press+0xd4>)
    f406:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
    f40a:	490c      	ldr	r1, [pc, #48]	; (f43c <go_to_sleep_long_press+0xd8>)
    f40c:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
    f410:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734
	NRF_POWER->SYSTEMOFF = 1;
    f414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f418:	2201      	movs	r2, #1
    f41a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f41e:	bd10      	pop	{r4, pc}
    f420:	20000440 	.word	0x20000440
    f424:	40010000 	.word	0x40010000
    f428:	6e524635 	.word	0x6e524635
    f42c:	20004ba6 	.word	0x20004ba6
    f430:	200022f0 	.word	0x200022f0
    f434:	200022f4 	.word	0x200022f4
    f438:	0003000c 	.word	0x0003000c
    f43c:	50000300 	.word	0x50000300

0000f440 <update_rf_payload_format_esb_dpl>:

static void update_rf_payload_format_esb_dpl(uint32_t payload_length)
{
#if (CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH <= 32)
	/* Using 6 bits for length */
	NRF_RADIO->PCNF0 = (0 << RADIO_PCNF0_S0LEN_Pos) |
    f440:	4a07      	ldr	r2, [pc, #28]	; (f460 <update_rf_payload_format_esb_dpl+0x20>)
    f442:	4b08      	ldr	r3, [pc, #32]	; (f464 <update_rf_payload_format_esb_dpl+0x24>)
    f444:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   (3 << RADIO_PCNF0_S1LEN_Pos);
#endif
	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    f448:	4b07      	ldr	r3, [pc, #28]	; (f468 <update_rf_payload_format_esb_dpl+0x28>)
    f44a:	7c5b      	ldrb	r3, [r3, #17]
    f44c:	3b01      	subs	r3, #1
    f44e:	041b      	lsls	r3, r3, #16
		(0 << RADIO_PCNF1_STATLEN_Pos) |
    f450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f454:	f043 0320 	orr.w	r3, r3, #32
	NRF_RADIO->PCNF1 =
    f458:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
		(CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH << RADIO_PCNF1_MAXLEN_Pos);
}
    f45c:	4770      	bx	lr
    f45e:	bf00      	nop
    f460:	40001000 	.word	0x40001000
    f464:	00030006 	.word	0x00030006
    f468:	20000448 	.word	0x20000448

0000f46c <update_rf_payload_format_esb>:

static void update_rf_payload_format_esb(uint32_t payload_length)
{
	NRF_RADIO->PCNF0 = (1 << RADIO_PCNF0_S0LEN_Pos) |
    f46c:	4907      	ldr	r1, [pc, #28]	; (f48c <update_rf_payload_format_esb+0x20>)
    f46e:	4b08      	ldr	r3, [pc, #32]	; (f490 <update_rf_payload_format_esb+0x24>)
    f470:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
			   (1 << RADIO_PCNF0_S1LEN_Pos);

	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    f474:	4b07      	ldr	r3, [pc, #28]	; (f494 <update_rf_payload_format_esb+0x28>)
    f476:	7c5a      	ldrb	r2, [r3, #17]
    f478:	3a01      	subs	r2, #1
		(payload_length << RADIO_PCNF1_STATLEN_Pos) |
    f47a:	0203      	lsls	r3, r0, #8
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    f47c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		(payload_length << RADIO_PCNF1_STATLEN_Pos) |
    f480:	4318      	orrs	r0, r3
    f482:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
	NRF_RADIO->PCNF1 =
    f486:	f8c1 0518 	str.w	r0, [r1, #1304]	; 0x518
		(payload_length << RADIO_PCNF1_MAXLEN_Pos);
}
    f48a:	4770      	bx	lr
    f48c:	40001000 	.word	0x40001000
    f490:	00010100 	.word	0x00010100
    f494:	20000448 	.word	0x20000448

0000f498 <update_radio_tx_power>:
	}
}

static void update_radio_tx_power(void)
{
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
    f498:	4b02      	ldr	r3, [pc, #8]	; (f4a4 <update_radio_tx_power+0xc>)
    f49a:	7a9a      	ldrb	r2, [r3, #10]
    f49c:	4b02      	ldr	r3, [pc, #8]	; (f4a8 <update_radio_tx_power+0x10>)
    f49e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
			     << RADIO_TXPOWER_TXPOWER_Pos;
}
    f4a2:	4770      	bx	lr
    f4a4:	200026a4 	.word	0x200026a4
    f4a8:	40001000 	.word	0x40001000

0000f4ac <update_radio_bitrate>:

static bool update_radio_bitrate(void)
{
	NRF_RADIO->MODE = esb_cfg.bitrate << RADIO_MODE_MODE_Pos;
    f4ac:	4b0f      	ldr	r3, [pc, #60]	; (f4ec <update_radio_bitrate+0x40>)
    f4ae:	7a1b      	ldrb	r3, [r3, #8]
    f4b0:	4a0f      	ldr	r2, [pc, #60]	; (f4f0 <update_radio_bitrate+0x44>)
    f4b2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
    f4b6:	2b04      	cmp	r3, #4
    f4b8:	d815      	bhi.n	f4e6 <update_radio_bitrate+0x3a>
    f4ba:	e8df f003 	tbb	[pc, r3]
    f4be:	0308      	.short	0x0308
    f4c0:	0e14      	.short	0x0e14
    f4c2:	03          	.byte	0x03
    f4c3:	00          	.byte	0x00
	case NRF_ESB_BITRATE_2MBPS:
#ifdef CONFIG_SOC_SERIES_NRF52X
	case NRF_ESB_BITRATE_2MBPS_BLE:
#endif
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
    f4c4:	4b0b      	ldr	r3, [pc, #44]	; (f4f4 <update_radio_bitrate+0x48>)
    f4c6:	22a0      	movs	r2, #160	; 0xa0
    f4c8:	601a      	str	r2, [r3, #0]
	default:
		/* Should not be reached */
		return false;
	}

	return true;
    f4ca:	2001      	movs	r0, #1
		break;
    f4cc:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
    f4ce:	4b09      	ldr	r3, [pc, #36]	; (f4f4 <update_radio_bitrate+0x48>)
    f4d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
    f4d4:	601a      	str	r2, [r3, #0]
	return true;
    f4d6:	2001      	movs	r0, #1
		break;
    f4d8:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS_BLE;
    f4da:	4b06      	ldr	r3, [pc, #24]	; (f4f4 <update_radio_bitrate+0x48>)
    f4dc:	f44f 7296 	mov.w	r2, #300	; 0x12c
    f4e0:	601a      	str	r2, [r3, #0]
	return true;
    f4e2:	2001      	movs	r0, #1
		break;
    f4e4:	4770      	bx	lr
	switch (esb_cfg.bitrate) {
    f4e6:	2000      	movs	r0, #0
}
    f4e8:	4770      	bx	lr
    f4ea:	bf00      	nop
    f4ec:	200026a4 	.word	0x200026a4
    f4f0:	40001000 	.word	0x40001000
    f4f4:	200025c4 	.word	0x200025c4

0000f4f8 <update_radio_protocol>:

static bool update_radio_protocol(void)
{
	switch (esb_cfg.protocol) {
    f4f8:	4b08      	ldr	r3, [pc, #32]	; (f51c <update_radio_protocol+0x24>)
    f4fa:	781b      	ldrb	r3, [r3, #0]
    f4fc:	b133      	cbz	r3, f50c <update_radio_protocol+0x14>
    f4fe:	2b01      	cmp	r3, #1
    f500:	d109      	bne.n	f516 <update_radio_protocol+0x1e>
	case NRF_ESB_PROTOCOL_ESB_DPL:
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
    f502:	4b07      	ldr	r3, [pc, #28]	; (f520 <update_radio_protocol+0x28>)
    f504:	4a07      	ldr	r2, [pc, #28]	; (f524 <update_radio_protocol+0x2c>)
    f506:	601a      	str	r2, [r3, #0]

	default:
		/* Should not be reached */
		return false;
	}
	return true;
    f508:	2001      	movs	r0, #1
		break;
    f50a:	4770      	bx	lr
		update_rf_payload_format = update_rf_payload_format_esb;
    f50c:	4b04      	ldr	r3, [pc, #16]	; (f520 <update_radio_protocol+0x28>)
    f50e:	4a06      	ldr	r2, [pc, #24]	; (f528 <update_radio_protocol+0x30>)
    f510:	601a      	str	r2, [r3, #0]
	return true;
    f512:	2001      	movs	r0, #1
		break;
    f514:	4770      	bx	lr
	switch (esb_cfg.protocol) {
    f516:	2000      	movs	r0, #0
}
    f518:	4770      	bx	lr
    f51a:	bf00      	nop
    f51c:	200026a4 	.word	0x200026a4
    f520:	200025bc 	.word	0x200025bc
    f524:	0000f441 	.word	0x0000f441
    f528:	0000f46d 	.word	0x0000f46d

0000f52c <update_radio_crc>:

static bool update_radio_crc(void)
{
	switch (esb_cfg.crc) {
    f52c:	4b0f      	ldr	r3, [pc, #60]	; (f56c <update_radio_crc+0x40>)
    f52e:	7a5b      	ldrb	r3, [r3, #9]
    f530:	2b01      	cmp	r3, #1
    f532:	d011      	beq.n	f558 <update_radio_crc+0x2c>
    f534:	2b02      	cmp	r3, #2
    f536:	d002      	beq.n	f53e <update_radio_crc+0x12>
    f538:	b14b      	cbz	r3, f54e <update_radio_crc+0x22>
    f53a:	2000      	movs	r0, #0
    f53c:	4770      	bx	lr
	case NRF_ESB_CRC_16BIT:
		NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    f53e:	4a0c      	ldr	r2, [pc, #48]	; (f570 <update_radio_crc+0x44>)
    f540:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f544:	f8c2 153c 	str.w	r1, [r2, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    f548:	490a      	ldr	r1, [pc, #40]	; (f574 <update_radio_crc+0x48>)
    f54a:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
	// Why was this here?? Took forever to figure out why it didn't work...
//	NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
//	NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
//	NRF_RADIO->CRCCNF = NRF_ESB_CRC_16BIT << RADIO_CRCCNF_LEN_Pos;

	NRF_RADIO->CRCCNF = esb_cfg.crc << RADIO_CRCCNF_LEN_Pos;
    f54e:	4a08      	ldr	r2, [pc, #32]	; (f570 <update_radio_crc+0x44>)
    f550:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534

	return true;
    f554:	2001      	movs	r0, #1
}
    f556:	4770      	bx	lr
		NRF_RADIO->CRCINIT = 0xFFUL;  /* Initial value */
    f558:	4a05      	ldr	r2, [pc, #20]	; (f570 <update_radio_crc+0x44>)
    f55a:	21ff      	movs	r1, #255	; 0xff
    f55c:	f8c2 153c 	str.w	r1, [r2, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
    f560:	f240 1107 	movw	r1, #263	; 0x107
    f564:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
		break;
    f568:	e7f1      	b.n	f54e <update_radio_crc+0x22>
    f56a:	bf00      	nop
    f56c:	200026a4 	.word	0x200026a4
    f570:	40001000 	.word	0x40001000
    f574:	00011021 	.word	0x00011021

0000f578 <update_radio_parameters>:

static bool update_radio_parameters(void)
{
    f578:	b538      	push	{r3, r4, r5, lr}
	bool params_valid = true;

	update_radio_tx_power();
    f57a:	f7ff ff8d 	bl	f498 <update_radio_tx_power>
	params_valid &= update_radio_bitrate();
    f57e:	f7ff ff95 	bl	f4ac <update_radio_bitrate>
    f582:	4604      	mov	r4, r0
	params_valid &= update_radio_protocol();
    f584:	f7ff ffb8 	bl	f4f8 <update_radio_protocol>
    f588:	4004      	ands	r4, r0
    f58a:	b2e4      	uxtb	r4, r4
	params_valid &= update_radio_crc();
    f58c:	f7ff ffce 	bl	f52c <update_radio_crc>
    f590:	4004      	ands	r4, r0
	update_rf_payload_format(esb_cfg.payload_length);
    f592:	4d06      	ldr	r5, [pc, #24]	; (f5ac <update_radio_parameters+0x34>)
    f594:	4b06      	ldr	r3, [pc, #24]	; (f5b0 <update_radio_parameters+0x38>)
    f596:	681b      	ldr	r3, [r3, #0]
    f598:	7ce8      	ldrb	r0, [r5, #19]
    f59a:	4798      	blx	r3
	params_valid &=
	    (esb_cfg.retransmit_delay >= RETRANSMIT_DELAY_MIN);
    f59c:	89ab      	ldrh	r3, [r5, #12]

	return params_valid;
}
    f59e:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
    f5a2:	bf94      	ite	ls
    f5a4:	2000      	movls	r0, #0
    f5a6:	f004 0001 	andhi.w	r0, r4, #1
    f5aa:	bd38      	pop	{r3, r4, r5, pc}
    f5ac:	200026a4 	.word	0x200026a4
    f5b0:	200025bc 	.word	0x200025bc

0000f5b4 <reset_fifos>:

static void reset_fifos(void)
{
	tx_fifo.back = 0;
    f5b4:	4a04      	ldr	r2, [pc, #16]	; (f5c8 <reset_fifos+0x14>)
    f5b6:	2300      	movs	r3, #0
    f5b8:	6213      	str	r3, [r2, #32]
	tx_fifo.front = 0;
    f5ba:	6253      	str	r3, [r2, #36]	; 0x24
	tx_fifo.count = 0;
    f5bc:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
    f5be:	4a03      	ldr	r2, [pc, #12]	; (f5cc <reset_fifos+0x18>)
    f5c0:	6213      	str	r3, [r2, #32]
	rx_fifo.front = 0;
    f5c2:	6253      	str	r3, [r2, #36]	; 0x24
	rx_fifo.count = 0;
    f5c4:	6293      	str	r3, [r2, #40]	; 0x28
}
    f5c6:	4770      	bx	lr
    f5c8:	20002670 	.word	0x20002670
    f5cc:	20002644 	.word	0x20002644

0000f5d0 <initialize_fifos>:

static void initialize_fifos(void)
{
    f5d0:	b508      	push	{r3, lr}
	static struct nrf_esb_payload rx_payload[CONFIG_NRF_ESB_RX_FIFO_SIZE];
	static struct nrf_esb_payload tx_payload[CONFIG_NRF_ESB_TX_FIFO_SIZE];

	reset_fifos();
    f5d2:	f7ff ffef 	bl	f5b4 <reset_fifos>

	for (size_t i = 0; i < CONFIG_NRF_ESB_TX_FIFO_SIZE; i++) {
    f5d6:	2300      	movs	r3, #0
    f5d8:	e009      	b.n	f5ee <initialize_fifos+0x1e>
		tx_fifo.payload[i] = &tx_payload[i];
    f5da:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    f5de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    f5e2:	490b      	ldr	r1, [pc, #44]	; (f610 <initialize_fifos+0x40>)
    f5e4:	440a      	add	r2, r1
    f5e6:	490b      	ldr	r1, [pc, #44]	; (f614 <initialize_fifos+0x44>)
    f5e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < CONFIG_NRF_ESB_TX_FIFO_SIZE; i++) {
    f5ec:	3301      	adds	r3, #1
    f5ee:	2b07      	cmp	r3, #7
    f5f0:	d9f3      	bls.n	f5da <initialize_fifos+0xa>
	}

	for (size_t i = 0; i < CONFIG_NRF_ESB_RX_FIFO_SIZE; i++) {
    f5f2:	2300      	movs	r3, #0
    f5f4:	e009      	b.n	f60a <initialize_fifos+0x3a>
		rx_fifo.payload[i] = &rx_payload[i];
    f5f6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    f5fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    f5fe:	4906      	ldr	r1, [pc, #24]	; (f618 <initialize_fifos+0x48>)
    f600:	440a      	add	r2, r1
    f602:	4906      	ldr	r1, [pc, #24]	; (f61c <initialize_fifos+0x4c>)
    f604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < CONFIG_NRF_ESB_RX_FIFO_SIZE; i++) {
    f608:	3301      	adds	r3, #1
    f60a:	2b07      	cmp	r3, #7
    f60c:	d9f3      	bls.n	f5f6 <initialize_fifos+0x26>
	}
}
    f60e:	bd08      	pop	{r3, pc}
    f610:	20002494 	.word	0x20002494
    f614:	20002670 	.word	0x20002670
    f618:	2000236c 	.word	0x2000236c
    f61c:	20002644 	.word	0x20002644

0000f620 <tx_fifo_remove_last>:

static void tx_fifo_remove_last(void)
{
	if (tx_fifo.count == 0) {
    f620:	4b0d      	ldr	r3, [pc, #52]	; (f658 <tx_fifo_remove_last+0x38>)
    f622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f624:	b1bb      	cbz	r3, f656 <tx_fifo_remove_last+0x36>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    f626:	f04f 0340 	mov.w	r3, #64	; 0x40
    f62a:	f3ef 8111 	mrs	r1, BASEPRI
    f62e:	f383 8812 	msr	BASEPRI_MAX, r3
    f632:	f3bf 8f6f 	isb	sy
		return;
	}

	uint32_t key = irq_lock();

	tx_fifo.count--;
    f636:	4a08      	ldr	r2, [pc, #32]	; (f658 <tx_fifo_remove_last+0x38>)
    f638:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f63a:	3b01      	subs	r3, #1
    f63c:	6293      	str	r3, [r2, #40]	; 0x28
	if (++tx_fifo.front >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
    f63e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    f640:	3301      	adds	r3, #1
    f642:	6253      	str	r3, [r2, #36]	; 0x24
    f644:	2b07      	cmp	r3, #7
    f646:	d902      	bls.n	f64e <tx_fifo_remove_last+0x2e>
		tx_fifo.front = 0;
    f648:	4613      	mov	r3, r2
    f64a:	2200      	movs	r2, #0
    f64c:	625a      	str	r2, [r3, #36]	; 0x24
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    f64e:	f381 8811 	msr	BASEPRI, r1
    f652:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);
}
    f656:	4770      	bx	lr
    f658:	20002670 	.word	0x20002670

0000f65c <sys_timer_init>:
}

static void sys_timer_init(void)
{
	/* Configure the system timer with a 1 MHz base frequency */
	ESB_SYS_TIMER->PRESCALER = 4;
    f65c:	4b05      	ldr	r3, [pc, #20]	; (f674 <sys_timer_init+0x18>)
    f65e:	2204      	movs	r2, #4
    f660:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	ESB_SYS_TIMER->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    f664:	2200      	movs	r2, #0
    f666:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
    f66a:	f240 2202 	movw	r2, #514	; 0x202
    f66e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
				TIMER_SHORTS_COMPARE1_STOP_Msk;
}
    f672:	4770      	bx	lr
    f674:	4001a000 	.word	0x4001a000

0000f678 <ppi_init>:

static void ppi_init(void)
{
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TIMER_START].EEP =
    f678:	4b12      	ldr	r3, [pc, #72]	; (f6c4 <ppi_init+0x4c>)
    f67a:	4a13      	ldr	r2, [pc, #76]	; (f6c8 <ppi_init+0x50>)
    f67c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		(uint32_t)&NRF_RADIO->EVENTS_READY;
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TIMER_START].TEP =
    f680:	4a12      	ldr	r2, [pc, #72]	; (f6cc <ppi_init+0x54>)
    f682:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		(uint32_t)&ESB_SYS_TIMER->TASKS_START;

	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TIMER_STOP].EEP =
    f686:	f5a2 32c7 	sub.w	r2, r2, #101888	; 0x18e00
    f68a:	3afc      	subs	r2, #252	; 0xfc
    f68c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
		(uint32_t)&NRF_RADIO->EVENTS_ADDRESS;
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TIMER_STOP].TEP =
    f690:	f502 32c7 	add.w	r2, r2, #101888	; 0x18e00
    f694:	f502 7286 	add.w	r2, r2, #268	; 0x10c
    f698:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
		(uint32_t)&ESB_SYS_TIMER->TASKS_SHUTDOWN;

	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_RX_TIMEOUT].EEP =
    f69c:	f502 7298 	add.w	r2, r2, #304	; 0x130
    f6a0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
		(uint32_t)&ESB_SYS_TIMER->EVENTS_COMPARE[0];
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_RX_TIMEOUT].TEP =
    f6a4:	f5a2 32c8 	sub.w	r2, r2, #102400	; 0x19000
    f6a8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
    f6ac:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
		(uint32_t)&NRF_RADIO->TASKS_DISABLE;

	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TX_START].EEP =
    f6b0:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
    f6b4:	f502 729a 	add.w	r2, r2, #308	; 0x134
    f6b8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
		(uint32_t)&ESB_SYS_TIMER->EVENTS_COMPARE[1];
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TX_START].TEP =
    f6bc:	4a04      	ldr	r2, [pc, #16]	; (f6d0 <ppi_init+0x58>)
    f6be:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
		(uint32_t)&NRF_RADIO->TASKS_TXEN;
}
    f6c2:	4770      	bx	lr
    f6c4:	4001f000 	.word	0x4001f000
    f6c8:	40001100 	.word	0x40001100
    f6cc:	4001a000 	.word	0x4001a000
    f6d0:	40001000 	.word	0x40001000

0000f6d4 <on_radio_disabled_tx>:
		start_tx_transaction();
	}
}

static void on_radio_disabled_tx(void)
{
    f6d4:	b510      	push	{r4, lr}
	/* Remove the DISABLED -> RXEN shortcut, to make sure the radio stays
	 * disabled after the RX window
	 */
	NRF_RADIO->SHORTS = radio_shorts_common;
    f6d6:	4819      	ldr	r0, [pc, #100]	; (f73c <on_radio_disabled_tx+0x68>)
    f6d8:	f240 1313 	movw	r3, #275	; 0x113
    f6dc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Make sure the timer is started the next time the radio is ready,
	 * and that it will disable the radio automatically if no packet is
	 * received by the time defined in wait_for_ack_timeout_us
	 */
	ESB_SYS_TIMER->CC[0] = wait_for_ack_timeout_us;
    f6e0:	4b17      	ldr	r3, [pc, #92]	; (f740 <on_radio_disabled_tx+0x6c>)
    f6e2:	681a      	ldr	r2, [r3, #0]
    f6e4:	4b17      	ldr	r3, [pc, #92]	; (f744 <on_radio_disabled_tx+0x70>)
    f6e6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	ESB_SYS_TIMER->CC[1] = esb_cfg.retransmit_delay - 130;
    f6ea:	4917      	ldr	r1, [pc, #92]	; (f748 <on_radio_disabled_tx+0x74>)
    f6ec:	898a      	ldrh	r2, [r1, #12]
    f6ee:	3a82      	subs	r2, #130	; 0x82
    f6f0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
	ESB_SYS_TIMER->TASKS_CLEAR = 1;
    f6f4:	2401      	movs	r4, #1
    f6f6:	60dc      	str	r4, [r3, #12]
	ESB_SYS_TIMER->EVENTS_COMPARE[0] = 0;
    f6f8:	2200      	movs	r2, #0
    f6fa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	ESB_SYS_TIMER->EVENTS_COMPARE[1] = 0;
    f6fe:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	/* Remove */
	ESB_SYS_TIMER->TASKS_START = 1;
    f702:	601c      	str	r4, [r3, #0]

	NRF_PPI->CHENSET = (1 << CONFIG_NRF_ESB_PPI_TIMER_START) |
    f704:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    f708:	24e0      	movs	r4, #224	; 0xe0
    f70a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
			   (1 << CONFIG_NRF_ESB_PPI_RX_TIMEOUT) |
			   (1 << CONFIG_NRF_ESB_PPI_TIMER_STOP);
	NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TX_START);
    f70e:	f44f 7480 	mov.w	r4, #256	; 0x100
    f712:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_RADIO->EVENTS_END = 0;
    f716:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c

	if (esb_cfg.protocol == NRF_ESB_PROTOCOL_ESB) {
    f71a:	780b      	ldrb	r3, [r1, #0]
    f71c:	b91b      	cbnz	r3, f726 <on_radio_disabled_tx+0x52>
		update_rf_payload_format(0);
    f71e:	4b0b      	ldr	r3, [pc, #44]	; (f74c <on_radio_disabled_tx+0x78>)
    f720:	681b      	ldr	r3, [r3, #0]
    f722:	4610      	mov	r0, r2
    f724:	4798      	blx	r3
	}

	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
    f726:	4a0a      	ldr	r2, [pc, #40]	; (f750 <on_radio_disabled_tx+0x7c>)
    f728:	4b04      	ldr	r3, [pc, #16]	; (f73c <on_radio_disabled_tx+0x68>)
    f72a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_tx_wait_for_ack;
    f72e:	4b09      	ldr	r3, [pc, #36]	; (f754 <on_radio_disabled_tx+0x80>)
    f730:	4a09      	ldr	r2, [pc, #36]	; (f758 <on_radio_disabled_tx+0x84>)
    f732:	601a      	str	r2, [r3, #0]
	esb_state = ESB_STATE_PTX_RX_ACK;
    f734:	4b09      	ldr	r3, [pc, #36]	; (f75c <on_radio_disabled_tx+0x88>)
    f736:	2203      	movs	r2, #3
    f738:	701a      	strb	r2, [r3, #0]
}
    f73a:	bd10      	pop	{r4, pc}
    f73c:	40001000 	.word	0x40001000
    f740:	200025c4 	.word	0x200025c4
    f744:	4001a000 	.word	0x4001a000
    f748:	200026a4 	.word	0x200026a4
    f74c:	200025bc 	.word	0x200025bc
    f750:	200025fc 	.word	0x200025fc
    f754:	200025c0 	.word	0x200025c0
    f758:	0000faa9 	.word	0x0000faa9
    f75c:	20004baa 	.word	0x20004baa

0000f760 <clear_events_restart_rx>:
		}
	}
}

static void clear_events_restart_rx(void)
{
    f760:	b510      	push	{r4, lr}
	NRF_RADIO->SHORTS = radio_shorts_common;
    f762:	4c11      	ldr	r4, [pc, #68]	; (f7a8 <clear_events_restart_rx+0x48>)
    f764:	f240 1313 	movw	r3, #275	; 0x113
    f768:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	update_rf_payload_format(esb_cfg.payload_length);
    f76c:	4b0f      	ldr	r3, [pc, #60]	; (f7ac <clear_events_restart_rx+0x4c>)
    f76e:	681b      	ldr	r3, [r3, #0]
    f770:	4a0f      	ldr	r2, [pc, #60]	; (f7b0 <clear_events_restart_rx+0x50>)
    f772:	7cd0      	ldrb	r0, [r2, #19]
    f774:	4798      	blx	r3
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
    f776:	4b0f      	ldr	r3, [pc, #60]	; (f7b4 <clear_events_restart_rx+0x54>)
    f778:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	NRF_RADIO->EVENTS_DISABLED = 0;
    f77c:	2300      	movs	r3, #0
    f77e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_DISABLE = 1;
    f782:	2301      	movs	r3, #1
    f784:	6123      	str	r3, [r4, #16]

	while (NRF_RADIO->EVENTS_DISABLED == 0) {
    f786:	4b08      	ldr	r3, [pc, #32]	; (f7a8 <clear_events_restart_rx+0x48>)
    f788:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f78c:	2b00      	cmp	r3, #0
    f78e:	d0fa      	beq.n	f786 <clear_events_restart_rx+0x26>
		/* wait for register to settle */
	}

	NRF_RADIO->EVENTS_DISABLED = 0;
    f790:	4b05      	ldr	r3, [pc, #20]	; (f7a8 <clear_events_restart_rx+0x48>)
    f792:	2200      	movs	r2, #0
    f794:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	NRF_RADIO->SHORTS = radio_shorts_common |
    f798:	f240 1217 	movw	r2, #279	; 0x117
    f79c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;

	NRF_RADIO->TASKS_RXEN = 1;
    f7a0:	2201      	movs	r2, #1
    f7a2:	605a      	str	r2, [r3, #4]
}
    f7a4:	bd10      	pop	{r4, pc}
    f7a6:	bf00      	nop
    f7a8:	40001000 	.word	0x40001000
    f7ac:	200025bc 	.word	0x200025bc
    f7b0:	200026a4 	.word	0x200026a4
    f7b4:	200025fc 	.word	0x200025fc

0000f7b8 <on_radio_disabled_rx_ack>:
		}
	}
}

static void on_radio_disabled_rx_ack(void)
{
    f7b8:	b510      	push	{r4, lr}
	NRF_RADIO->SHORTS = radio_shorts_common |
    f7ba:	4c0a      	ldr	r4, [pc, #40]	; (f7e4 <on_radio_disabled_rx_ack+0x2c>)
    f7bc:	f240 1317 	movw	r3, #279	; 0x117
    f7c0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
	update_rf_payload_format(esb_cfg.payload_length);
    f7c4:	4b08      	ldr	r3, [pc, #32]	; (f7e8 <on_radio_disabled_rx_ack+0x30>)
    f7c6:	681b      	ldr	r3, [r3, #0]
    f7c8:	4a08      	ldr	r2, [pc, #32]	; (f7ec <on_radio_disabled_rx_ack+0x34>)
    f7ca:	7cd0      	ldrb	r0, [r2, #19]
    f7cc:	4798      	blx	r3

	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
    f7ce:	4b08      	ldr	r3, [pc, #32]	; (f7f0 <on_radio_disabled_rx_ack+0x38>)
    f7d0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_rx;
    f7d4:	4b07      	ldr	r3, [pc, #28]	; (f7f4 <on_radio_disabled_rx_ack+0x3c>)
    f7d6:	4a08      	ldr	r2, [pc, #32]	; (f7f8 <on_radio_disabled_rx_ack+0x40>)
    f7d8:	601a      	str	r2, [r3, #0]

	esb_state = ESB_STATE_PRX;
    f7da:	4b08      	ldr	r3, [pc, #32]	; (f7fc <on_radio_disabled_rx_ack+0x44>)
    f7dc:	2204      	movs	r2, #4
    f7de:	701a      	strb	r2, [r3, #0]
}
    f7e0:	bd10      	pop	{r4, pc}
    f7e2:	bf00      	nop
    f7e4:	40001000 	.word	0x40001000
    f7e8:	200025bc 	.word	0x200025bc
    f7ec:	200026a4 	.word	0x200026a4
    f7f0:	200025fc 	.word	0x200025fc
    f7f4:	200025c0 	.word	0x200025c0
    f7f8:	0000fd4d 	.word	0x0000fd4d
    f7fc:	20004baa 	.word	0x20004baa

0000f800 <get_and_clear_irqs>:
	__asm__ volatile(
    f800:	f04f 0340 	mov.w	r3, #64	; 0x40
    f804:	f3ef 8211 	mrs	r2, BASEPRI
    f808:	f383 8812 	msr	BASEPRI_MAX, r3
    f80c:	f3bf 8f6f 	isb	sy
{
	__ASSERT_NO_MSG(interrupts != NULL);

	uint32_t key = irq_lock();

	*interrupts = interrupt_flags;
    f810:	4b04      	ldr	r3, [pc, #16]	; (f824 <get_and_clear_irqs+0x24>)
    f812:	6819      	ldr	r1, [r3, #0]
    f814:	6001      	str	r1, [r0, #0]
	interrupt_flags = 0;
    f816:	2100      	movs	r1, #0
    f818:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    f81a:	f382 8811 	msr	BASEPRI, r2
    f81e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    f822:	4770      	bx	lr
    f824:	200025d0 	.word	0x200025d0

0000f828 <RADIO_IRQHandler>:

static void RADIO_IRQHandler(void)
{
    f828:	b508      	push	{r3, lr}
	if (NRF_RADIO->EVENTS_READY &&
    f82a:	4b19      	ldr	r3, [pc, #100]	; (f890 <RADIO_IRQHandler+0x68>)
    f82c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    f830:	b163      	cbz	r3, f84c <RADIO_IRQHandler+0x24>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    f832:	4b17      	ldr	r3, [pc, #92]	; (f890 <RADIO_IRQHandler+0x68>)
    f834:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    f838:	f013 0f01 	tst.w	r3, #1
    f83c:	d006      	beq.n	f84c <RADIO_IRQHandler+0x24>
		NRF_RADIO->EVENTS_READY = 0;
    f83e:	4b14      	ldr	r3, [pc, #80]	; (f890 <RADIO_IRQHandler+0x68>)
    f840:	2200      	movs	r2, #0
    f842:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    f846:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
    f84a:	681b      	ldr	r3, [r3, #0]
	}

	if (NRF_RADIO->EVENTS_END &&
    f84c:	4b10      	ldr	r3, [pc, #64]	; (f890 <RADIO_IRQHandler+0x68>)
    f84e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    f852:	b14b      	cbz	r3, f868 <RADIO_IRQHandler+0x40>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    f854:	4b0e      	ldr	r3, [pc, #56]	; (f890 <RADIO_IRQHandler+0x68>)
    f856:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    f85a:	f013 0f08 	tst.w	r3, #8
    f85e:	d003      	beq.n	f868 <RADIO_IRQHandler+0x40>
		NRF_RADIO->EVENTS_END = 0;
    f860:	4b0b      	ldr	r3, [pc, #44]	; (f890 <RADIO_IRQHandler+0x68>)
    f862:	2200      	movs	r2, #0
    f864:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		if (on_radio_end) {
			on_radio_end();
		}
	}

	if (NRF_RADIO->EVENTS_DISABLED &&
    f868:	4b09      	ldr	r3, [pc, #36]	; (f890 <RADIO_IRQHandler+0x68>)
    f86a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f86e:	b16b      	cbz	r3, f88c <RADIO_IRQHandler+0x64>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    f870:	4b07      	ldr	r3, [pc, #28]	; (f890 <RADIO_IRQHandler+0x68>)
    f872:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    f876:	f013 0f10 	tst.w	r3, #16
    f87a:	d007      	beq.n	f88c <RADIO_IRQHandler+0x64>
		NRF_RADIO->EVENTS_DISABLED = 0;
    f87c:	4b04      	ldr	r3, [pc, #16]	; (f890 <RADIO_IRQHandler+0x68>)
    f87e:	2200      	movs	r2, #0
    f880:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		/* Call the correct on_radio_disable function, depending on the
		 * current protocol state.
		 */
		if (on_radio_disabled) {
    f884:	4b03      	ldr	r3, [pc, #12]	; (f894 <RADIO_IRQHandler+0x6c>)
    f886:	681b      	ldr	r3, [r3, #0]
    f888:	b103      	cbz	r3, f88c <RADIO_IRQHandler+0x64>
			on_radio_disabled();
    f88a:	4798      	blx	r3
		}
	}
}
    f88c:	bd08      	pop	{r3, pc}
    f88e:	bf00      	nop
    f890:	40001000 	.word	0x40001000
    f894:	200025c0 	.word	0x200025c0

0000f898 <SWI0_EGU0_IRQHandler>:

static void ESB_EVT_IRQHandler(void)
{
    f898:	b500      	push	{lr}
    f89a:	b085      	sub	sp, #20
	uint32_t interrupts;
	struct nrf_esb_evt event;

	event.tx_attempts = last_tx_attempts;
    f89c:	4b15      	ldr	r3, [pc, #84]	; (f8f4 <SWI0_EGU0_IRQHandler+0x5c>)
    f89e:	681b      	ldr	r3, [r3, #0]
    f8a0:	9302      	str	r3, [sp, #8]

	get_and_clear_irqs(&interrupts);
    f8a2:	a803      	add	r0, sp, #12
    f8a4:	f7ff ffac 	bl	f800 <get_and_clear_irqs>
	if (event_handler != NULL) {
    f8a8:	4b13      	ldr	r3, [pc, #76]	; (f8f8 <SWI0_EGU0_IRQHandler+0x60>)
    f8aa:	681b      	ldr	r3, [r3, #0]
    f8ac:	b1f3      	cbz	r3, f8ec <SWI0_EGU0_IRQHandler+0x54>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    f8ae:	9a03      	ldr	r2, [sp, #12]
    f8b0:	f012 0f01 	tst.w	r2, #1
    f8b4:	d004      	beq.n	f8c0 <SWI0_EGU0_IRQHandler+0x28>
			event.evt_id = NRF_ESB_EVENT_TX_SUCCESS;
    f8b6:	2200      	movs	r2, #0
    f8b8:	f88d 2004 	strb.w	r2, [sp, #4]
			event_handler(&event);
    f8bc:	a801      	add	r0, sp, #4
    f8be:	4798      	blx	r3
		}
		if (interrupts & INT_TX_FAILED_MSK) {
    f8c0:	9b03      	ldr	r3, [sp, #12]
    f8c2:	f013 0f02 	tst.w	r3, #2
    f8c6:	d006      	beq.n	f8d6 <SWI0_EGU0_IRQHandler+0x3e>
			event.evt_id = NRF_ESB_EVENT_TX_FAILED;
    f8c8:	2301      	movs	r3, #1
    f8ca:	f88d 3004 	strb.w	r3, [sp, #4]
			event_handler(&event);
    f8ce:	4b0a      	ldr	r3, [pc, #40]	; (f8f8 <SWI0_EGU0_IRQHandler+0x60>)
    f8d0:	681b      	ldr	r3, [r3, #0]
    f8d2:	a801      	add	r0, sp, #4
    f8d4:	4798      	blx	r3
		}
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    f8d6:	9b03      	ldr	r3, [sp, #12]
    f8d8:	f013 0f04 	tst.w	r3, #4
    f8dc:	d006      	beq.n	f8ec <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = NRF_ESB_EVENT_RX_RECEIVED;
    f8de:	2302      	movs	r3, #2
    f8e0:	f88d 3004 	strb.w	r3, [sp, #4]
			event_handler(&event);
    f8e4:	4b04      	ldr	r3, [pc, #16]	; (f8f8 <SWI0_EGU0_IRQHandler+0x60>)
    f8e6:	681b      	ldr	r3, [r3, #0]
    f8e8:	a801      	add	r0, sp, #4
    f8ea:	4798      	blx	r3
		}
	}
}
    f8ec:	b005      	add	sp, #20
    f8ee:	f85d fb04 	ldr.w	pc, [sp], #4
    f8f2:	bf00      	nop
    f8f4:	200025c8 	.word	0x200025c8
    f8f8:	200026a0 	.word	0x200026a0

0000f8fc <start_tx_transaction>:
{
    f8fc:	b538      	push	{r3, r4, r5, lr}
	last_tx_attempts = 1;
    f8fe:	4b4a      	ldr	r3, [pc, #296]	; (fa28 <start_tx_transaction+0x12c>)
    f900:	2201      	movs	r2, #1
    f902:	601a      	str	r2, [r3, #0]
	current_payload = tx_fifo.payload[tx_fifo.front];
    f904:	4b49      	ldr	r3, [pc, #292]	; (fa2c <start_tx_transaction+0x130>)
    f906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    f90c:	4b48      	ldr	r3, [pc, #288]	; (fa30 <start_tx_transaction+0x134>)
    f90e:	6019      	str	r1, [r3, #0]
	switch (esb_cfg.protocol) {
    f910:	4b48      	ldr	r3, [pc, #288]	; (fa34 <start_tx_transaction+0x138>)
    f912:	781b      	ldrb	r3, [r3, #0]
    f914:	b323      	cbz	r3, f960 <start_tx_transaction+0x64>
    f916:	2b01      	cmp	r3, #1
    f918:	d046      	beq.n	f9a8 <start_tx_transaction+0xac>
	NRF_RADIO->TXADDRESS = current_payload->pipe;
    f91a:	4b45      	ldr	r3, [pc, #276]	; (fa30 <start_tx_transaction+0x134>)
    f91c:	681b      	ldr	r3, [r3, #0]
    f91e:	785a      	ldrb	r2, [r3, #1]
    f920:	4c45      	ldr	r4, [pc, #276]	; (fa38 <start_tx_transaction+0x13c>)
    f922:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES = 1 << current_payload->pipe;
    f926:	785b      	ldrb	r3, [r3, #1]
    f928:	2501      	movs	r5, #1
    f92a:	fa05 f303 	lsl.w	r3, r5, r3
    f92e:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
    f932:	4b42      	ldr	r3, [pc, #264]	; (fa3c <start_tx_transaction+0x140>)
    f934:	7cdb      	ldrb	r3, [r3, #19]
    f936:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
    f93a:	4b41      	ldr	r3, [pc, #260]	; (fa40 <start_tx_transaction+0x144>)
    f93c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f940:	4b40      	ldr	r3, [pc, #256]	; (fa44 <start_tx_transaction+0x148>)
    f942:	2202      	movs	r2, #2
    f944:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    f948:	4628      	mov	r0, r5
    f94a:	f012 f940 	bl	21bce <arch_irq_enable>
	NRF_RADIO->EVENTS_ADDRESS = 0;
    f94e:	2300      	movs	r3, #0
    f950:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    f954:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	NRF_RADIO->EVENTS_DISABLED = 0;
    f958:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_TXEN = 1;
    f95c:	6025      	str	r5, [r4, #0]
}
    f95e:	bd38      	pop	{r3, r4, r5, pc}
		update_rf_payload_format(current_payload->length);
    f960:	4b39      	ldr	r3, [pc, #228]	; (fa48 <start_tx_transaction+0x14c>)
    f962:	681b      	ldr	r3, [r3, #0]
    f964:	7808      	ldrb	r0, [r1, #0]
    f966:	4798      	blx	r3
		tx_payload_buffer[0] = current_payload->pid;
    f968:	4b31      	ldr	r3, [pc, #196]	; (fa30 <start_tx_transaction+0x134>)
    f96a:	6819      	ldr	r1, [r3, #0]
    f96c:	790b      	ldrb	r3, [r1, #4]
    f96e:	4834      	ldr	r0, [pc, #208]	; (fa40 <start_tx_transaction+0x144>)
    f970:	7003      	strb	r3, [r0, #0]
		tx_payload_buffer[1] = 0;
    f972:	2300      	movs	r3, #0
    f974:	7043      	strb	r3, [r0, #1]
		memcpy(&tx_payload_buffer[2], current_payload->data,
    f976:	2320      	movs	r3, #32
    f978:	f811 2b05 	ldrb.w	r2, [r1], #5
    f97c:	3002      	adds	r0, #2
    f97e:	f015 fa52 	bl	24e26 <__memcpy_chk>
		NRF_RADIO->SHORTS = radio_shorts_common |
    f982:	4b2d      	ldr	r3, [pc, #180]	; (fa38 <start_tx_transaction+0x13c>)
    f984:	f240 121b 	movw	r2, #283	; 0x11b
    f988:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk |
    f98c:	2211      	movs	r2, #17
    f98e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		retransmits_remaining = esb_cfg.retransmit_count;
    f992:	4b28      	ldr	r3, [pc, #160]	; (fa34 <start_tx_transaction+0x138>)
    f994:	89da      	ldrh	r2, [r3, #14]
    f996:	4b2d      	ldr	r3, [pc, #180]	; (fa4c <start_tx_transaction+0x150>)
    f998:	601a      	str	r2, [r3, #0]
		on_radio_disabled = on_radio_disabled_tx;
    f99a:	4b2d      	ldr	r3, [pc, #180]	; (fa50 <start_tx_transaction+0x154>)
    f99c:	4a2d      	ldr	r2, [pc, #180]	; (fa54 <start_tx_transaction+0x158>)
    f99e:	601a      	str	r2, [r3, #0]
		esb_state = ESB_STATE_PTX_TX_ACK;
    f9a0:	4b2d      	ldr	r3, [pc, #180]	; (fa58 <start_tx_transaction+0x15c>)
    f9a2:	2202      	movs	r2, #2
    f9a4:	701a      	strb	r2, [r3, #0]
		break;
    f9a6:	e7b8      	b.n	f91a <start_tx_transaction+0x1e>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    f9a8:	78ca      	ldrb	r2, [r1, #3]
    f9aa:	b122      	cbz	r2, f9b6 <start_tx_transaction+0xba>
    f9ac:	4b21      	ldr	r3, [pc, #132]	; (fa34 <start_tx_transaction+0x138>)
    f9ae:	7d1b      	ldrb	r3, [r3, #20]
    f9b0:	bb43      	cbnz	r3, fa04 <start_tx_transaction+0x108>
    f9b2:	2401      	movs	r4, #1
    f9b4:	e000      	b.n	f9b8 <start_tx_transaction+0xbc>
    f9b6:	2401      	movs	r4, #1
		tx_payload_buffer[0] = current_payload->length;
    f9b8:	780b      	ldrb	r3, [r1, #0]
    f9ba:	4821      	ldr	r0, [pc, #132]	; (fa40 <start_tx_transaction+0x144>)
    f9bc:	7003      	strb	r3, [r0, #0]
		tx_payload_buffer[1] = current_payload->pid << 1;
    f9be:	790b      	ldrb	r3, [r1, #4]
    f9c0:	005b      	lsls	r3, r3, #1
    f9c2:	b2db      	uxtb	r3, r3
    f9c4:	7043      	strb	r3, [r0, #1]
		tx_payload_buffer[1] |= current_payload->noack ? 0x00 : 0x01;
    f9c6:	2a00      	cmp	r2, #0
    f9c8:	bf08      	it	eq
    f9ca:	f043 0301 	orreq.w	r3, r3, #1
    f9ce:	7043      	strb	r3, [r0, #1]
		memcpy(&tx_payload_buffer[2], current_payload->data,
    f9d0:	2320      	movs	r3, #32
    f9d2:	f811 2b05 	ldrb.w	r2, [r1], #5
    f9d6:	3002      	adds	r0, #2
    f9d8:	f015 fa25 	bl	24e26 <__memcpy_chk>
		if (ack) {
    f9dc:	b1a4      	cbz	r4, fa08 <start_tx_transaction+0x10c>
			NRF_RADIO->SHORTS = radio_shorts_common |
    f9de:	4b16      	ldr	r3, [pc, #88]	; (fa38 <start_tx_transaction+0x13c>)
    f9e0:	f240 121b 	movw	r2, #283	; 0x11b
    f9e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk |
    f9e8:	2211      	movs	r2, #17
    f9ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			retransmits_remaining = esb_cfg.retransmit_count;
    f9ee:	4b11      	ldr	r3, [pc, #68]	; (fa34 <start_tx_transaction+0x138>)
    f9f0:	89da      	ldrh	r2, [r3, #14]
    f9f2:	4b16      	ldr	r3, [pc, #88]	; (fa4c <start_tx_transaction+0x150>)
    f9f4:	601a      	str	r2, [r3, #0]
			on_radio_disabled = on_radio_disabled_tx;
    f9f6:	4b16      	ldr	r3, [pc, #88]	; (fa50 <start_tx_transaction+0x154>)
    f9f8:	4a16      	ldr	r2, [pc, #88]	; (fa54 <start_tx_transaction+0x158>)
    f9fa:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    f9fc:	4b16      	ldr	r3, [pc, #88]	; (fa58 <start_tx_transaction+0x15c>)
    f9fe:	2202      	movs	r2, #2
    fa00:	701a      	strb	r2, [r3, #0]
    fa02:	e78a      	b.n	f91a <start_tx_transaction+0x1e>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    fa04:	2400      	movs	r4, #0
    fa06:	e7d7      	b.n	f9b8 <start_tx_transaction+0xbc>
			NRF_RADIO->SHORTS = radio_shorts_common;
    fa08:	4b0b      	ldr	r3, [pc, #44]	; (fa38 <start_tx_transaction+0x13c>)
    fa0a:	f240 1213 	movw	r2, #275	; 0x113
    fa0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
    fa12:	2210      	movs	r2, #16
    fa14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			on_radio_disabled = on_radio_disabled_tx_noack;
    fa18:	4b0d      	ldr	r3, [pc, #52]	; (fa50 <start_tx_transaction+0x154>)
    fa1a:	4a10      	ldr	r2, [pc, #64]	; (fa5c <start_tx_transaction+0x160>)
    fa1c:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX;
    fa1e:	4b0e      	ldr	r3, [pc, #56]	; (fa58 <start_tx_transaction+0x15c>)
    fa20:	2201      	movs	r2, #1
    fa22:	701a      	strb	r2, [r3, #0]
    fa24:	e779      	b.n	f91a <start_tx_transaction+0x1e>
    fa26:	bf00      	nop
    fa28:	200025c8 	.word	0x200025c8
    fa2c:	20002670 	.word	0x20002670
    fa30:	2000269c 	.word	0x2000269c
    fa34:	200026a4 	.word	0x200026a4
    fa38:	40001000 	.word	0x40001000
    fa3c:	20000448 	.word	0x20000448
    fa40:	20002620 	.word	0x20002620
    fa44:	e000e100 	.word	0xe000e100
    fa48:	200025bc 	.word	0x200025bc
    fa4c:	200025cc 	.word	0x200025cc
    fa50:	200025c0 	.word	0x200025c0
    fa54:	0000f6d5 	.word	0x0000f6d5
    fa58:	20004baa 	.word	0x20004baa
    fa5c:	0000fa61 	.word	0x0000fa61

0000fa60 <on_radio_disabled_tx_noack>:
{
    fa60:	b508      	push	{r3, lr}
	interrupt_flags |= INT_TX_SUCCESS_MSK;
    fa62:	4a0d      	ldr	r2, [pc, #52]	; (fa98 <on_radio_disabled_tx_noack+0x38>)
    fa64:	6813      	ldr	r3, [r2, #0]
    fa66:	f043 0301 	orr.w	r3, r3, #1
    fa6a:	6013      	str	r3, [r2, #0]
	tx_fifo_remove_last();
    fa6c:	f7ff fdd8 	bl	f620 <tx_fifo_remove_last>
	if (tx_fifo.count == 0) {
    fa70:	4b0a      	ldr	r3, [pc, #40]	; (fa9c <on_radio_disabled_tx_noack+0x3c>)
    fa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fa74:	b943      	cbnz	r3, fa88 <on_radio_disabled_tx_noack+0x28>
		esb_state = ESB_STATE_IDLE;
    fa76:	4b0a      	ldr	r3, [pc, #40]	; (faa0 <on_radio_disabled_tx_noack+0x40>)
    fa78:	2200      	movs	r2, #0
    fa7a:	701a      	strb	r2, [r3, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fa7c:	4b09      	ldr	r3, [pc, #36]	; (faa4 <on_radio_disabled_tx_noack+0x44>)
    fa7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    fa82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    fa86:	bd08      	pop	{r3, pc}
    fa88:	4b06      	ldr	r3, [pc, #24]	; (faa4 <on_radio_disabled_tx_noack+0x44>)
    fa8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    fa8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		start_tx_transaction();
    fa92:	f7ff ff33 	bl	f8fc <start_tx_transaction>
}
    fa96:	e7f6      	b.n	fa86 <on_radio_disabled_tx_noack+0x26>
    fa98:	200025d0 	.word	0x200025d0
    fa9c:	20002670 	.word	0x20002670
    faa0:	20004baa 	.word	0x20004baa
    faa4:	e000e100 	.word	0xe000e100

0000faa8 <on_radio_disabled_tx_wait_for_ack>:
{
    faa8:	b510      	push	{r4, lr}
	NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TIMER_START) |
    faaa:	4b41      	ldr	r3, [pc, #260]	; (fbb0 <on_radio_disabled_tx_wait_for_ack+0x108>)
    faac:	22e0      	movs	r2, #224	; 0xe0
    faae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	if (NRF_RADIO->EVENTS_END && NRF_RADIO->CRCSTATUS != 0) {
    fab2:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
    fab6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    faba:	b11b      	cbz	r3, fac4 <on_radio_disabled_tx_wait_for_ack+0x1c>
    fabc:	4b3d      	ldr	r3, [pc, #244]	; (fbb4 <on_radio_disabled_tx_wait_for_ack+0x10c>)
    fabe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    fac2:	bb0b      	cbnz	r3, fb08 <on_radio_disabled_tx_wait_for_ack+0x60>
		if (retransmits_remaining-- == 0) {
    fac4:	4a3c      	ldr	r2, [pc, #240]	; (fbb8 <on_radio_disabled_tx_wait_for_ack+0x110>)
    fac6:	6813      	ldr	r3, [r2, #0]
    fac8:	1e59      	subs	r1, r3, #1
    faca:	6011      	str	r1, [r2, #0]
    facc:	2b00      	cmp	r3, #0
    face:	d14b      	bne.n	fb68 <on_radio_disabled_tx_wait_for_ack+0xc0>
			ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
    fad0:	4b3a      	ldr	r3, [pc, #232]	; (fbbc <on_radio_disabled_tx_wait_for_ack+0x114>)
    fad2:	2201      	movs	r2, #1
    fad4:	611a      	str	r2, [r3, #16]
			NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TX_START);
    fad6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    fada:	f44f 7280 	mov.w	r2, #256	; 0x100
    fade:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			last_tx_attempts = esb_cfg.retransmit_count + 1;
    fae2:	4b37      	ldr	r3, [pc, #220]	; (fbc0 <on_radio_disabled_tx_wait_for_ack+0x118>)
    fae4:	89db      	ldrh	r3, [r3, #14]
    fae6:	3301      	adds	r3, #1
    fae8:	4a36      	ldr	r2, [pc, #216]	; (fbc4 <on_radio_disabled_tx_wait_for_ack+0x11c>)
    faea:	6013      	str	r3, [r2, #0]
			interrupt_flags |= INT_TX_FAILED_MSK;
    faec:	4a36      	ldr	r2, [pc, #216]	; (fbc8 <on_radio_disabled_tx_wait_for_ack+0x120>)
    faee:	6813      	ldr	r3, [r2, #0]
    faf0:	f043 0302 	orr.w	r3, r3, #2
    faf4:	6013      	str	r3, [r2, #0]
			esb_state = ESB_STATE_IDLE;
    faf6:	4b35      	ldr	r3, [pc, #212]	; (fbcc <on_radio_disabled_tx_wait_for_ack+0x124>)
    faf8:	2200      	movs	r2, #0
    fafa:	701a      	strb	r2, [r3, #0]
    fafc:	4b34      	ldr	r3, [pc, #208]	; (fbd0 <on_radio_disabled_tx_wait_for_ack+0x128>)
    fafe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    fb02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    fb06:	bd10      	pop	{r4, pc}
		ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
    fb08:	4b2c      	ldr	r3, [pc, #176]	; (fbbc <on_radio_disabled_tx_wait_for_ack+0x114>)
    fb0a:	2201      	movs	r2, #1
    fb0c:	611a      	str	r2, [r3, #16]
		NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TX_START);
    fb0e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
    fb12:	f44f 7280 	mov.w	r2, #256	; 0x100
    fb16:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    fb1a:	4a2b      	ldr	r2, [pc, #172]	; (fbc8 <on_radio_disabled_tx_wait_for_ack+0x120>)
    fb1c:	6813      	ldr	r3, [r2, #0]
    fb1e:	f043 0301 	orr.w	r3, r3, #1
    fb22:	6013      	str	r3, [r2, #0]
		last_tx_attempts = esb_cfg.retransmit_count -
    fb24:	4b26      	ldr	r3, [pc, #152]	; (fbc0 <on_radio_disabled_tx_wait_for_ack+0x118>)
    fb26:	89db      	ldrh	r3, [r3, #14]
    fb28:	4a23      	ldr	r2, [pc, #140]	; (fbb8 <on_radio_disabled_tx_wait_for_ack+0x110>)
    fb2a:	6812      	ldr	r2, [r2, #0]
    fb2c:	1a9b      	subs	r3, r3, r2
				   retransmits_remaining + 1;
    fb2e:	3301      	adds	r3, #1
		last_tx_attempts = esb_cfg.retransmit_count -
    fb30:	4a24      	ldr	r2, [pc, #144]	; (fbc4 <on_radio_disabled_tx_wait_for_ack+0x11c>)
    fb32:	6013      	str	r3, [r2, #0]
		tx_fifo_remove_last();
    fb34:	f7ff fd74 	bl	f620 <tx_fifo_remove_last>
		if ((tx_fifo.count == 0) ||
    fb38:	4b26      	ldr	r3, [pc, #152]	; (fbd4 <on_radio_disabled_tx_wait_for_ack+0x12c>)
    fb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fb3c:	b11b      	cbz	r3, fb46 <on_radio_disabled_tx_wait_for_ack+0x9e>
		    (esb_cfg.tx_mode == NRF_ESB_TXMODE_MANUAL)) {
    fb3e:	4b20      	ldr	r3, [pc, #128]	; (fbc0 <on_radio_disabled_tx_wait_for_ack+0x118>)
    fb40:	7c1b      	ldrb	r3, [r3, #16]
		if ((tx_fifo.count == 0) ||
    fb42:	2b01      	cmp	r3, #1
    fb44:	d108      	bne.n	fb58 <on_radio_disabled_tx_wait_for_ack+0xb0>
			esb_state = ESB_STATE_IDLE;
    fb46:	4b21      	ldr	r3, [pc, #132]	; (fbcc <on_radio_disabled_tx_wait_for_ack+0x124>)
    fb48:	2200      	movs	r2, #0
    fb4a:	701a      	strb	r2, [r3, #0]
    fb4c:	4b20      	ldr	r3, [pc, #128]	; (fbd0 <on_radio_disabled_tx_wait_for_ack+0x128>)
    fb4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    fb52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fb56:	e7d6      	b.n	fb06 <on_radio_disabled_tx_wait_for_ack+0x5e>
    fb58:	4b1d      	ldr	r3, [pc, #116]	; (fbd0 <on_radio_disabled_tx_wait_for_ack+0x128>)
    fb5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    fb5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			start_tx_transaction();
    fb62:	f7ff fecb 	bl	f8fc <start_tx_transaction>
    fb66:	e7ce      	b.n	fb06 <on_radio_disabled_tx_wait_for_ack+0x5e>
			NRF_RADIO->SHORTS = radio_shorts_common |
    fb68:	4c12      	ldr	r4, [pc, #72]	; (fbb4 <on_radio_disabled_tx_wait_for_ack+0x10c>)
    fb6a:	f240 131b 	movw	r3, #283	; 0x11b
    fb6e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			update_rf_payload_format(current_payload->length);
    fb72:	4b19      	ldr	r3, [pc, #100]	; (fbd8 <on_radio_disabled_tx_wait_for_ack+0x130>)
    fb74:	681a      	ldr	r2, [r3, #0]
    fb76:	4b19      	ldr	r3, [pc, #100]	; (fbdc <on_radio_disabled_tx_wait_for_ack+0x134>)
    fb78:	681b      	ldr	r3, [r3, #0]
    fb7a:	7810      	ldrb	r0, [r2, #0]
    fb7c:	4798      	blx	r3
			NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
    fb7e:	4b18      	ldr	r3, [pc, #96]	; (fbe0 <on_radio_disabled_tx_wait_for_ack+0x138>)
    fb80:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
			on_radio_disabled = on_radio_disabled_tx;
    fb84:	4b17      	ldr	r3, [pc, #92]	; (fbe4 <on_radio_disabled_tx_wait_for_ack+0x13c>)
    fb86:	4a18      	ldr	r2, [pc, #96]	; (fbe8 <on_radio_disabled_tx_wait_for_ack+0x140>)
    fb88:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    fb8a:	4b10      	ldr	r3, [pc, #64]	; (fbcc <on_radio_disabled_tx_wait_for_ack+0x124>)
    fb8c:	2202      	movs	r2, #2
    fb8e:	701a      	strb	r2, [r3, #0]
			ESB_SYS_TIMER->TASKS_START = 1;
    fb90:	4b0a      	ldr	r3, [pc, #40]	; (fbbc <on_radio_disabled_tx_wait_for_ack+0x114>)
    fb92:	2201      	movs	r2, #1
    fb94:	601a      	str	r2, [r3, #0]
			NRF_PPI->CHENSET = (1 << CONFIG_NRF_ESB_PPI_TX_START);
    fb96:	4a06      	ldr	r2, [pc, #24]	; (fbb0 <on_radio_disabled_tx_wait_for_ack+0x108>)
    fb98:	f44f 7180 	mov.w	r1, #256	; 0x100
    fb9c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
			if (ESB_SYS_TIMER->EVENTS_COMPARE[1]) {
    fba0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    fba4:	2b00      	cmp	r3, #0
    fba6:	d0ae      	beq.n	fb06 <on_radio_disabled_tx_wait_for_ack+0x5e>
				NRF_RADIO->TASKS_TXEN = 1;
    fba8:	2201      	movs	r2, #1
    fbaa:	6022      	str	r2, [r4, #0]
}
    fbac:	e7ab      	b.n	fb06 <on_radio_disabled_tx_wait_for_ack+0x5e>
    fbae:	bf00      	nop
    fbb0:	4001f000 	.word	0x4001f000
    fbb4:	40001000 	.word	0x40001000
    fbb8:	200025cc 	.word	0x200025cc
    fbbc:	4001a000 	.word	0x4001a000
    fbc0:	200026a4 	.word	0x200026a4
    fbc4:	200025c8 	.word	0x200025c8
    fbc8:	200025d0 	.word	0x200025d0
    fbcc:	20004baa 	.word	0x20004baa
    fbd0:	e000e100 	.word	0xe000e100
    fbd4:	20002670 	.word	0x20002670
    fbd8:	2000269c 	.word	0x2000269c
    fbdc:	200025bc 	.word	0x200025bc
    fbe0:	20002620 	.word	0x20002620
    fbe4:	200025c0 	.word	0x200025c0
    fbe8:	0000f6d5 	.word	0x0000f6d5

0000fbec <on_radio_disabled_rx_dpl>:
{
    fbec:	b510      	push	{r4, lr}
	if (tx_fifo.count > 0 &&
    fbee:	4b21      	ldr	r3, [pc, #132]	; (fc74 <on_radio_disabled_rx_dpl+0x88>)
    fbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fbf2:	b153      	cbz	r3, fc0a <on_radio_disabled_rx_dpl+0x1e>
	    (tx_fifo.payload[tx_fifo.front]->pipe == NRF_RADIO->RXMATCH)) {
    fbf4:	4a1f      	ldr	r2, [pc, #124]	; (fc74 <on_radio_disabled_rx_dpl+0x88>)
    fbf6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    fbf8:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    fbfc:	f892 c001 	ldrb.w	ip, [r2, #1]
    fc00:	4a1d      	ldr	r2, [pc, #116]	; (fc78 <on_radio_disabled_rx_dpl+0x8c>)
    fc02:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
	if (tx_fifo.count > 0 &&
    fc06:	4594      	cmp	ip, r2
    fc08:	d00c      	beq.n	fc24 <on_radio_disabled_rx_dpl+0x38>
		pipe_info->ack_payload = false;
    fc0a:	2400      	movs	r4, #0
    fc0c:	70cc      	strb	r4, [r1, #3]
		update_rf_payload_format(0);
    fc0e:	4b1b      	ldr	r3, [pc, #108]	; (fc7c <on_radio_disabled_rx_dpl+0x90>)
    fc10:	681b      	ldr	r3, [r3, #0]
    fc12:	4620      	mov	r0, r4
    fc14:	4798      	blx	r3
		tx_payload_buffer[0] = 0;
    fc16:	4b1a      	ldr	r3, [pc, #104]	; (fc80 <on_radio_disabled_rx_dpl+0x94>)
    fc18:	701c      	strb	r4, [r3, #0]
	tx_payload_buffer[1] = rx_payload_buffer[1];
    fc1a:	4b1a      	ldr	r3, [pc, #104]	; (fc84 <on_radio_disabled_rx_dpl+0x98>)
    fc1c:	785a      	ldrb	r2, [r3, #1]
    fc1e:	4b18      	ldr	r3, [pc, #96]	; (fc80 <on_radio_disabled_rx_dpl+0x94>)
    fc20:	705a      	strb	r2, [r3, #1]
}
    fc22:	bd10      	pop	{r4, pc}
		if (pipe_info->ack_payload && !retransmit_payload) {
    fc24:	78ca      	ldrb	r2, [r1, #3]
    fc26:	b172      	cbz	r2, fc46 <on_radio_disabled_rx_dpl+0x5a>
    fc28:	b968      	cbnz	r0, fc46 <on_radio_disabled_rx_dpl+0x5a>
			if (++tx_fifo.front >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
    fc2a:	3401      	adds	r4, #1
    fc2c:	4a11      	ldr	r2, [pc, #68]	; (fc74 <on_radio_disabled_rx_dpl+0x88>)
    fc2e:	6254      	str	r4, [r2, #36]	; 0x24
    fc30:	2c07      	cmp	r4, #7
    fc32:	d900      	bls.n	fc36 <on_radio_disabled_rx_dpl+0x4a>
				tx_fifo.front = 0;
    fc34:	6250      	str	r0, [r2, #36]	; 0x24
			tx_fifo.count--;
    fc36:	3b01      	subs	r3, #1
    fc38:	4a0e      	ldr	r2, [pc, #56]	; (fc74 <on_radio_disabled_rx_dpl+0x88>)
    fc3a:	6293      	str	r3, [r2, #40]	; 0x28
			interrupt_flags |= INT_TX_SUCCESS_MSK;
    fc3c:	4a12      	ldr	r2, [pc, #72]	; (fc88 <on_radio_disabled_rx_dpl+0x9c>)
    fc3e:	6813      	ldr	r3, [r2, #0]
    fc40:	f043 0301 	orr.w	r3, r3, #1
    fc44:	6013      	str	r3, [r2, #0]
		pipe_info->ack_payload = true;
    fc46:	2301      	movs	r3, #1
    fc48:	70cb      	strb	r3, [r1, #3]
		current_payload = tx_fifo.payload[tx_fifo.front];
    fc4a:	4b0a      	ldr	r3, [pc, #40]	; (fc74 <on_radio_disabled_rx_dpl+0x88>)
    fc4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fc52:	4c0e      	ldr	r4, [pc, #56]	; (fc8c <on_radio_disabled_rx_dpl+0xa0>)
    fc54:	6023      	str	r3, [r4, #0]
		update_rf_payload_format(current_payload->length);
    fc56:	4a09      	ldr	r2, [pc, #36]	; (fc7c <on_radio_disabled_rx_dpl+0x90>)
    fc58:	6812      	ldr	r2, [r2, #0]
    fc5a:	7818      	ldrb	r0, [r3, #0]
    fc5c:	4790      	blx	r2
		tx_payload_buffer[0] = current_payload->length;
    fc5e:	6821      	ldr	r1, [r4, #0]
    fc60:	f811 2b05 	ldrb.w	r2, [r1], #5
    fc64:	4806      	ldr	r0, [pc, #24]	; (fc80 <on_radio_disabled_rx_dpl+0x94>)
    fc66:	f800 2b02 	strb.w	r2, [r0], #2
		memcpy(&tx_payload_buffer[2], current_payload->data,
    fc6a:	2320      	movs	r3, #32
    fc6c:	f015 f8db 	bl	24e26 <__memcpy_chk>
    fc70:	e7d3      	b.n	fc1a <on_radio_disabled_rx_dpl+0x2e>
    fc72:	bf00      	nop
    fc74:	20002670 	.word	0x20002670
    fc78:	40001000 	.word	0x40001000
    fc7c:	200025bc 	.word	0x200025bc
    fc80:	20002620 	.word	0x20002620
    fc84:	200025fc 	.word	0x200025fc
    fc88:	200025d0 	.word	0x200025d0
    fc8c:	2000269c 	.word	0x2000269c

0000fc90 <rx_fifo_push_rfbuf>:
	if (rx_fifo.count >= CONFIG_NRF_ESB_RX_FIFO_SIZE) {
    fc90:	4b29      	ldr	r3, [pc, #164]	; (fd38 <rx_fifo_push_rfbuf+0xa8>)
    fc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fc94:	2b07      	cmp	r3, #7
    fc96:	d84b      	bhi.n	fd30 <rx_fifo_push_rfbuf+0xa0>
{
    fc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc9c:	4606      	mov	r6, r0
    fc9e:	460f      	mov	r7, r1
	if (esb_cfg.protocol == NRF_ESB_PROTOCOL_ESB_DPL) {
    fca0:	4b26      	ldr	r3, [pc, #152]	; (fd3c <rx_fifo_push_rfbuf+0xac>)
    fca2:	781b      	ldrb	r3, [r3, #0]
    fca4:	2b01      	cmp	r3, #1
    fca6:	d031      	beq.n	fd0c <rx_fifo_push_rfbuf+0x7c>
	} else if (esb_cfg.mode == NRF_ESB_MODE_PTX) {
    fca8:	4b24      	ldr	r3, [pc, #144]	; (fd3c <rx_fifo_push_rfbuf+0xac>)
    fcaa:	785b      	ldrb	r3, [r3, #1]
    fcac:	2b00      	cmp	r3, #0
    fcae:	d137      	bne.n	fd20 <rx_fifo_push_rfbuf+0x90>
		rx_fifo.payload[rx_fifo.back]->length = 0;
    fcb0:	4b21      	ldr	r3, [pc, #132]	; (fd38 <rx_fifo_push_rfbuf+0xa8>)
    fcb2:	6a1a      	ldr	r2, [r3, #32]
    fcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fcb8:	2200      	movs	r2, #0
    fcba:	701a      	strb	r2, [r3, #0]
	memcpy(rx_fifo.payload[rx_fifo.back]->data, &rx_payload_buffer[2],
    fcbc:	4d1e      	ldr	r5, [pc, #120]	; (fd38 <rx_fifo_push_rfbuf+0xa8>)
    fcbe:	6a2b      	ldr	r3, [r5, #32]
    fcc0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    fcc4:	f8df 8080 	ldr.w	r8, [pc, #128]	; fd48 <rx_fifo_push_rfbuf+0xb8>
    fcc8:	f810 2b05 	ldrb.w	r2, [r0], #5
    fccc:	4641      	mov	r1, r8
    fcce:	f015 f89c 	bl	24e0a <memcpy>
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
    fcd2:	6a2b      	ldr	r3, [r5, #32]
    fcd4:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    fcd8:	7066      	strb	r6, [r4, #1]
	rx_fifo.payload[rx_fifo.back]->rssi = NRF_RADIO->RSSISAMPLE;
    fcda:	4a19      	ldr	r2, [pc, #100]	; (fd40 <rx_fifo_push_rfbuf+0xb0>)
    fcdc:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
    fce0:	70a2      	strb	r2, [r4, #2]
	rx_fifo.payload[rx_fifo.back]->pid = pid;
    fce2:	7127      	strb	r7, [r4, #4]
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
    fce4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
    fce8:	f082 0201 	eor.w	r2, r2, #1
    fcec:	f002 0201 	and.w	r2, r2, #1
    fcf0:	70e2      	strb	r2, [r4, #3]
	if (++rx_fifo.back >= CONFIG_NRF_ESB_RX_FIFO_SIZE) {
    fcf2:	3301      	adds	r3, #1
    fcf4:	622b      	str	r3, [r5, #32]
    fcf6:	2b07      	cmp	r3, #7
    fcf8:	d901      	bls.n	fcfe <rx_fifo_push_rfbuf+0x6e>
		rx_fifo.back = 0;
    fcfa:	2200      	movs	r2, #0
    fcfc:	622a      	str	r2, [r5, #32]
	rx_fifo.count++;
    fcfe:	4a0e      	ldr	r2, [pc, #56]	; (fd38 <rx_fifo_push_rfbuf+0xa8>)
    fd00:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fd02:	3301      	adds	r3, #1
    fd04:	6293      	str	r3, [r2, #40]	; 0x28
	return true;
    fd06:	2001      	movs	r0, #1
}
    fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rx_payload_buffer[0] > CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH) {
    fd0c:	4b0d      	ldr	r3, [pc, #52]	; (fd44 <rx_fifo_push_rfbuf+0xb4>)
    fd0e:	781b      	ldrb	r3, [r3, #0]
    fd10:	2b20      	cmp	r3, #32
    fd12:	d80f      	bhi.n	fd34 <rx_fifo_push_rfbuf+0xa4>
		rx_fifo.payload[rx_fifo.back]->length = rx_payload_buffer[0];
    fd14:	4a08      	ldr	r2, [pc, #32]	; (fd38 <rx_fifo_push_rfbuf+0xa8>)
    fd16:	6a11      	ldr	r1, [r2, #32]
    fd18:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    fd1c:	7013      	strb	r3, [r2, #0]
    fd1e:	e7cd      	b.n	fcbc <rx_fifo_push_rfbuf+0x2c>
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
    fd20:	4b05      	ldr	r3, [pc, #20]	; (fd38 <rx_fifo_push_rfbuf+0xa8>)
    fd22:	6a1a      	ldr	r2, [r3, #32]
    fd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fd28:	4a04      	ldr	r2, [pc, #16]	; (fd3c <rx_fifo_push_rfbuf+0xac>)
    fd2a:	7cd2      	ldrb	r2, [r2, #19]
    fd2c:	701a      	strb	r2, [r3, #0]
    fd2e:	e7c5      	b.n	fcbc <rx_fifo_push_rfbuf+0x2c>
		return false;
    fd30:	2000      	movs	r0, #0
}
    fd32:	4770      	bx	lr
			return false;
    fd34:	2000      	movs	r0, #0
    fd36:	e7e7      	b.n	fd08 <rx_fifo_push_rfbuf+0x78>
    fd38:	20002644 	.word	0x20002644
    fd3c:	200026a4 	.word	0x200026a4
    fd40:	40001000 	.word	0x40001000
    fd44:	200025fc 	.word	0x200025fc
    fd48:	200025fe 	.word	0x200025fe

0000fd4c <on_radio_disabled_rx>:
{
    fd4c:	b570      	push	{r4, r5, r6, lr}
	if (NRF_RADIO->CRCSTATUS == 0) {
    fd4e:	4b3f      	ldr	r3, [pc, #252]	; (fe4c <on_radio_disabled_rx+0x100>)
    fd50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    fd54:	2b00      	cmp	r3, #0
    fd56:	d041      	beq.n	fddc <on_radio_disabled_rx+0x90>
	if (rx_fifo.count >= CONFIG_NRF_ESB_RX_FIFO_SIZE) {
    fd58:	4b3d      	ldr	r3, [pc, #244]	; (fe50 <on_radio_disabled_rx+0x104>)
    fd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd5c:	2b07      	cmp	r3, #7
    fd5e:	d840      	bhi.n	fde2 <on_radio_disabled_rx+0x96>
	pipe_info = &rx_pipe_info[NRF_RADIO->RXMATCH];
    fd60:	4a3a      	ldr	r2, [pc, #232]	; (fe4c <on_radio_disabled_rx+0x100>)
    fd62:	f8d2 4408 	ldr.w	r4, [r2, #1032]	; 0x408
    fd66:	4b3b      	ldr	r3, [pc, #236]	; (fe54 <on_radio_disabled_rx+0x108>)
    fd68:	eb03 0184 	add.w	r1, r3, r4, lsl #2
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    fd6c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    fd70:	f833 3024 	ldrh.w	r3, [r3, r4, lsl #2]
    fd74:	429a      	cmp	r2, r3
    fd76:	d037      	beq.n	fde8 <on_radio_disabled_rx+0x9c>
	bool send_rx_event = true;
    fd78:	2501      	movs	r5, #1
	bool retransmit_payload = false;
    fd7a:	2000      	movs	r0, #0
	pipe_info->pid = rx_payload_buffer[1] >> 1;
    fd7c:	4b36      	ldr	r3, [pc, #216]	; (fe58 <on_radio_disabled_rx+0x10c>)
    fd7e:	785a      	ldrb	r2, [r3, #1]
    fd80:	4b34      	ldr	r3, [pc, #208]	; (fe54 <on_radio_disabled_rx+0x108>)
    fd82:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    fd86:	ea4f 0c52 	mov.w	ip, r2, lsr #1
    fd8a:	f886 c002 	strb.w	ip, [r6, #2]
	pipe_info->crc = NRF_RADIO->RXCRC;
    fd8e:	4e2f      	ldr	r6, [pc, #188]	; (fe4c <on_radio_disabled_rx+0x100>)
    fd90:	f8d6 640c 	ldr.w	r6, [r6, #1036]	; 0x40c
    fd94:	f823 6024 	strh.w	r6, [r3, r4, lsl #2]
	if ((esb_cfg.selective_auto_ack == false) ||
    fd98:	4b30      	ldr	r3, [pc, #192]	; (fe5c <on_radio_disabled_rx+0x110>)
    fd9a:	7d1b      	ldrb	r3, [r3, #20]
    fd9c:	b113      	cbz	r3, fda4 <on_radio_disabled_rx+0x58>
    fd9e:	f012 0f01 	tst.w	r2, #1
    fda2:	d038      	beq.n	fe16 <on_radio_disabled_rx+0xca>
		NRF_RADIO->SHORTS = radio_shorts_common |
    fda4:	4b29      	ldr	r3, [pc, #164]	; (fe4c <on_radio_disabled_rx+0x100>)
    fda6:	f240 121b 	movw	r2, #283	; 0x11b
    fdaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		switch (esb_cfg.protocol) {
    fdae:	4b2b      	ldr	r3, [pc, #172]	; (fe5c <on_radio_disabled_rx+0x110>)
    fdb0:	781b      	ldrb	r3, [r3, #0]
    fdb2:	b32b      	cbz	r3, fe00 <on_radio_disabled_rx+0xb4>
    fdb4:	2b01      	cmp	r3, #1
    fdb6:	d101      	bne.n	fdbc <on_radio_disabled_rx+0x70>
			on_radio_disabled_rx_dpl(retransmit_payload, pipe_info);
    fdb8:	f7ff ff18 	bl	fbec <on_radio_disabled_rx_dpl>
		esb_state = ESB_STATE_PRX_SEND_ACK;
    fdbc:	4b28      	ldr	r3, [pc, #160]	; (fe60 <on_radio_disabled_rx+0x114>)
    fdbe:	2205      	movs	r2, #5
    fdc0:	701a      	strb	r2, [r3, #0]
		NRF_RADIO->TXADDRESS = NRF_RADIO->RXMATCH;
    fdc2:	4b22      	ldr	r3, [pc, #136]	; (fe4c <on_radio_disabled_rx+0x100>)
    fdc4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    fdc8:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		NRF_RADIO->PACKETPTR = (uint32_t)tx_payload_buffer;
    fdcc:	4a25      	ldr	r2, [pc, #148]	; (fe64 <on_radio_disabled_rx+0x118>)
    fdce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		on_radio_disabled = on_radio_disabled_rx_ack;
    fdd2:	4b25      	ldr	r3, [pc, #148]	; (fe68 <on_radio_disabled_rx+0x11c>)
    fdd4:	4a25      	ldr	r2, [pc, #148]	; (fe6c <on_radio_disabled_rx+0x120>)
    fdd6:	601a      	str	r2, [r3, #0]
	if (send_rx_event) {
    fdd8:	bb05      	cbnz	r5, fe1c <on_radio_disabled_rx+0xd0>
}
    fdda:	bd70      	pop	{r4, r5, r6, pc}
		clear_events_restart_rx();
    fddc:	f7ff fcc0 	bl	f760 <clear_events_restart_rx>
		return;
    fde0:	e7fb      	b.n	fdda <on_radio_disabled_rx+0x8e>
		clear_events_restart_rx();
    fde2:	f7ff fcbd 	bl	f760 <clear_events_restart_rx>
		return;
    fde6:	e7f8      	b.n	fdda <on_radio_disabled_rx+0x8e>
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
    fde8:	4b1b      	ldr	r3, [pc, #108]	; (fe58 <on_radio_disabled_rx+0x10c>)
    fdea:	785a      	ldrb	r2, [r3, #1]
    fdec:	788b      	ldrb	r3, [r1, #2]
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    fdee:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
    fdf2:	d002      	beq.n	fdfa <on_radio_disabled_rx+0xae>
	bool send_rx_event = true;
    fdf4:	2501      	movs	r5, #1
	bool retransmit_payload = false;
    fdf6:	2000      	movs	r0, #0
    fdf8:	e7c0      	b.n	fd7c <on_radio_disabled_rx+0x30>
		send_rx_event = false;
    fdfa:	2500      	movs	r5, #0
		retransmit_payload = true;
    fdfc:	2001      	movs	r0, #1
    fdfe:	e7bd      	b.n	fd7c <on_radio_disabled_rx+0x30>
			update_rf_payload_format(0);
    fe00:	4b1b      	ldr	r3, [pc, #108]	; (fe70 <on_radio_disabled_rx+0x124>)
    fe02:	681b      	ldr	r3, [r3, #0]
    fe04:	2000      	movs	r0, #0
    fe06:	4798      	blx	r3
			tx_payload_buffer[0] = rx_payload_buffer[0];
    fe08:	4b13      	ldr	r3, [pc, #76]	; (fe58 <on_radio_disabled_rx+0x10c>)
    fe0a:	781a      	ldrb	r2, [r3, #0]
    fe0c:	4b15      	ldr	r3, [pc, #84]	; (fe64 <on_radio_disabled_rx+0x118>)
    fe0e:	701a      	strb	r2, [r3, #0]
			tx_payload_buffer[1] = 0;
    fe10:	2200      	movs	r2, #0
    fe12:	705a      	strb	r2, [r3, #1]
			break;
    fe14:	e7d2      	b.n	fdbc <on_radio_disabled_rx+0x70>
		clear_events_restart_rx();
    fe16:	f7ff fca3 	bl	f760 <clear_events_restart_rx>
    fe1a:	e7dd      	b.n	fdd8 <on_radio_disabled_rx+0x8c>
		if (rx_fifo_push_rfbuf(NRF_RADIO->RXMATCH, pipe_info->pid)) {
    fe1c:	4b0b      	ldr	r3, [pc, #44]	; (fe4c <on_radio_disabled_rx+0x100>)
    fe1e:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    fe22:	4b0c      	ldr	r3, [pc, #48]	; (fe54 <on_radio_disabled_rx+0x108>)
    fe24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fe28:	7899      	ldrb	r1, [r3, #2]
    fe2a:	b2c0      	uxtb	r0, r0
    fe2c:	f7ff ff30 	bl	fc90 <rx_fifo_push_rfbuf>
    fe30:	2800      	cmp	r0, #0
    fe32:	d0d2      	beq.n	fdda <on_radio_disabled_rx+0x8e>
			interrupt_flags |= INT_RX_DATA_RECEIVED_MSK;
    fe34:	4a0f      	ldr	r2, [pc, #60]	; (fe74 <on_radio_disabled_rx+0x128>)
    fe36:	6813      	ldr	r3, [r2, #0]
    fe38:	f043 0304 	orr.w	r3, r3, #4
    fe3c:	6013      	str	r3, [r2, #0]
    fe3e:	4b0e      	ldr	r3, [pc, #56]	; (fe78 <on_radio_disabled_rx+0x12c>)
    fe40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    fe44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fe48:	e7c7      	b.n	fdda <on_radio_disabled_rx+0x8e>
    fe4a:	bf00      	nop
    fe4c:	40001000 	.word	0x40001000
    fe50:	20002644 	.word	0x20002644
    fe54:	200025d4 	.word	0x200025d4
    fe58:	200025fc 	.word	0x200025fc
    fe5c:	200026a4 	.word	0x200026a4
    fe60:	20004baa 	.word	0x20004baa
    fe64:	20002620 	.word	0x20002620
    fe68:	200025c0 	.word	0x200025c0
    fe6c:	0000f7b9 	.word	0x0000f7b9
    fe70:	200025bc 	.word	0x200025bc
    fe74:	200025d0 	.word	0x200025d0
    fe78:	e000e100 	.word	0xe000e100

0000fe7c <update_radio_addresses>:
{
    fe7c:	b538      	push	{r3, r4, r5, lr}
    fe7e:	4604      	mov	r4, r0
	if ((update_mask & ADDR_UPDATE_MASK_BASE0) != 0) {
    fe80:	f010 0f01 	tst.w	r0, #1
    fe84:	d005      	beq.n	fe92 <update_radio_addresses+0x16>
		NRF_RADIO->BASE0 = addr_conv(esb_addr.base_addr_p0);
    fe86:	480f      	ldr	r0, [pc, #60]	; (fec4 <update_radio_addresses+0x48>)
    fe88:	f00f fa35 	bl	1f2f6 <addr_conv>
    fe8c:	4b0e      	ldr	r3, [pc, #56]	; (fec8 <update_radio_addresses+0x4c>)
    fe8e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	if ((update_mask & ADDR_UPDATE_MASK_BASE1) != 0) {
    fe92:	f014 0f02 	tst.w	r4, #2
    fe96:	d005      	beq.n	fea4 <update_radio_addresses+0x28>
		NRF_RADIO->BASE1 = addr_conv(esb_addr.base_addr_p1);
    fe98:	480c      	ldr	r0, [pc, #48]	; (fecc <update_radio_addresses+0x50>)
    fe9a:	f00f fa2c 	bl	1f2f6 <addr_conv>
    fe9e:	4b0a      	ldr	r3, [pc, #40]	; (fec8 <update_radio_addresses+0x4c>)
    fea0:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
    fea4:	f014 0f04 	tst.w	r4, #4
    fea8:	d00b      	beq.n	fec2 <update_radio_addresses+0x46>
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
    feaa:	4d09      	ldr	r5, [pc, #36]	; (fed0 <update_radio_addresses+0x54>)
    feac:	4628      	mov	r0, r5
    feae:	f00f fa12 	bl	1f2d6 <bytewise_bit_swap>
		NRF_RADIO->PREFIX0 =
    feb2:	4c05      	ldr	r4, [pc, #20]	; (fec8 <update_radio_addresses+0x4c>)
    feb4:	f8c4 0524 	str.w	r0, [r4, #1316]	; 0x524
			bytewise_bit_swap(&esb_addr.pipe_prefixes[4]);
    feb8:	1d28      	adds	r0, r5, #4
    feba:	f00f fa0c 	bl	1f2d6 <bytewise_bit_swap>
		NRF_RADIO->PREFIX1 =
    febe:	f8c4 0528 	str.w	r0, [r4, #1320]	; 0x528
}
    fec2:	bd38      	pop	{r3, r4, r5, pc}
    fec4:	20000448 	.word	0x20000448
    fec8:	40001000 	.word	0x40001000
    fecc:	2000044c 	.word	0x2000044c
    fed0:	20000450 	.word	0x20000450

0000fed4 <nrf_esb_disable>:

	return 0;
}

void nrf_esb_disable(void)
{
    fed4:	b510      	push	{r4, lr}
	/*  Clear PPI */
	NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TIMER_START) |
    fed6:	4b0e      	ldr	r3, [pc, #56]	; (ff10 <nrf_esb_disable+0x3c>)
    fed8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    fedc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			   (1 << CONFIG_NRF_ESB_PPI_TIMER_STOP) |
			   (1 << CONFIG_NRF_ESB_PPI_RX_TIMEOUT) |
			   (1 << CONFIG_NRF_ESB_PPI_TX_START);

	esb_state = ESB_STATE_IDLE;
    fee0:	2400      	movs	r4, #0
    fee2:	4b0c      	ldr	r3, [pc, #48]	; (ff14 <nrf_esb_disable+0x40>)
    fee4:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
    fee6:	4b0c      	ldr	r3, [pc, #48]	; (ff18 <nrf_esb_disable+0x44>)
    fee8:	701c      	strb	r4, [r3, #0]

	reset_fifos();
    feea:	f7ff fb63 	bl	f5b4 <reset_fifos>

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    feee:	2220      	movs	r2, #32
    fef0:	4621      	mov	r1, r4
    fef2:	480a      	ldr	r0, [pc, #40]	; (ff1c <nrf_esb_disable+0x48>)
    fef4:	f014 ffaa 	bl	24e4c <memset>
	memset(pids, 0, sizeof(pids));
    fef8:	4b09      	ldr	r3, [pc, #36]	; (ff20 <nrf_esb_disable+0x4c>)
    fefa:	601c      	str	r4, [r3, #0]
    fefc:	605c      	str	r4, [r3, #4]

	/*  Disable the radio */
	irq_disable(ESB_EVT_IRQ);
    fefe:	2014      	movs	r0, #20
    ff00:	f011 fe6a 	bl	21bd8 <arch_irq_disable>

	NRF_RADIO->SHORTS =
    ff04:	4b07      	ldr	r3, [pc, #28]	; (ff24 <nrf_esb_disable+0x50>)
    ff06:	2203      	movs	r2, #3
    ff08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    RADIO_SHORTS_READY_START_Enabled << RADIO_SHORTS_READY_START_Pos |
	    RADIO_SHORTS_END_DISABLE_Enabled << RADIO_SHORTS_END_DISABLE_Pos;
}
    ff0c:	bd10      	pop	{r4, pc}
    ff0e:	bf00      	nop
    ff10:	4001f000 	.word	0x4001f000
    ff14:	20004baa 	.word	0x20004baa
    ff18:	20004bab 	.word	0x20004bab
    ff1c:	200025d4 	.word	0x200025d4
    ff20:	200025f4 	.word	0x200025f4
    ff24:	40001000 	.word	0x40001000

0000ff28 <nrf_esb_init>:
	if (config == NULL) {
    ff28:	2800      	cmp	r0, #0
    ff2a:	d055      	beq.n	ffd8 <nrf_esb_init+0xb0>
{
    ff2c:	b538      	push	{r3, r4, r5, lr}
    ff2e:	4605      	mov	r5, r0
	if (esb_initialized) {
    ff30:	4b2b      	ldr	r3, [pc, #172]	; (ffe0 <nrf_esb_init+0xb8>)
    ff32:	781b      	ldrb	r3, [r3, #0]
    ff34:	2b00      	cmp	r3, #0
    ff36:	d14c      	bne.n	ffd2 <nrf_esb_init+0xaa>
	event_handler = config->event_handler;
    ff38:	686a      	ldr	r2, [r5, #4]
    ff3a:	4b2a      	ldr	r3, [pc, #168]	; (ffe4 <nrf_esb_init+0xbc>)
    ff3c:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    ff3e:	4c2a      	ldr	r4, [pc, #168]	; (ffe8 <nrf_esb_init+0xc0>)
    ff40:	6828      	ldr	r0, [r5, #0]
    ff42:	6869      	ldr	r1, [r5, #4]
    ff44:	68aa      	ldr	r2, [r5, #8]
    ff46:	68eb      	ldr	r3, [r5, #12]
    ff48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ff4a:	6928      	ldr	r0, [r5, #16]
    ff4c:	6969      	ldr	r1, [r5, #20]
    ff4e:	c403      	stmia	r4!, {r0, r1}
	interrupt_flags = 0;
    ff50:	2400      	movs	r4, #0
    ff52:	4b26      	ldr	r3, [pc, #152]	; (ffec <nrf_esb_init+0xc4>)
    ff54:	601c      	str	r4, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    ff56:	2220      	movs	r2, #32
    ff58:	4621      	mov	r1, r4
    ff5a:	4825      	ldr	r0, [pc, #148]	; (fff0 <nrf_esb_init+0xc8>)
    ff5c:	f014 ff76 	bl	24e4c <memset>
	memset(pids, 0, sizeof(pids));
    ff60:	4b24      	ldr	r3, [pc, #144]	; (fff4 <nrf_esb_init+0xcc>)
    ff62:	601c      	str	r4, [r3, #0]
    ff64:	605c      	str	r4, [r3, #4]
	update_radio_parameters();
    ff66:	f7ff fb07 	bl	f578 <update_radio_parameters>
	NRF_RADIO->BASE0 = 0xE7E7E7E7;
    ff6a:	4b23      	ldr	r3, [pc, #140]	; (fff8 <nrf_esb_init+0xd0>)
    ff6c:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
    ff70:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
	NRF_RADIO->BASE1 = 0x43434343;
    ff74:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
    ff78:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_RADIO->PREFIX0 = 0x23C343E7;
    ff7c:	4a1f      	ldr	r2, [pc, #124]	; (fffc <nrf_esb_init+0xd4>)
    ff7e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_RADIO->PREFIX1 = 0x13E363A3;
    ff82:	4a1f      	ldr	r2, [pc, #124]	; (10000 <nrf_esb_init+0xd8>)
    ff84:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	initialize_fifos();
    ff88:	f7ff fb22 	bl	f5d0 <initialize_fifos>
	sys_timer_init();
    ff8c:	f7ff fb66 	bl	f65c <sys_timer_init>
	ppi_init();
    ff90:	f7ff fb72 	bl	f678 <ppi_init>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, 1, RADIO_IRQHandler, 0);
    ff94:	4622      	mov	r2, r4
    ff96:	2101      	movs	r1, #1
    ff98:	4608      	mov	r0, r1
    ff9a:	f011 fe22 	bl	21be2 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, 2, ESB_EVT_IRQHandler, 0);
    ff9e:	4622      	mov	r2, r4
    ffa0:	2102      	movs	r1, #2
    ffa2:	2001      	movs	r0, #1
    ffa4:	f011 fe1d 	bl	21be2 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, 2, NRF_ESB_SYS_TIMER_IRQHandler, 0);
    ffa8:	4622      	mov	r2, r4
    ffaa:	2102      	movs	r1, #2
    ffac:	2001      	movs	r0, #1
    ffae:	f011 fe18 	bl	21be2 <z_arm_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    ffb2:	2001      	movs	r0, #1
    ffb4:	f011 fe0b 	bl	21bce <arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI0_IRQn);
    ffb8:	2014      	movs	r0, #20
    ffba:	f011 fe08 	bl	21bce <arch_irq_enable>
	irq_enable(ESB_SYS_TIMER_IRQn);
    ffbe:	201a      	movs	r0, #26
    ffc0:	f011 fe05 	bl	21bce <arch_irq_enable>
	esb_state = ESB_STATE_IDLE;
    ffc4:	4b0f      	ldr	r3, [pc, #60]	; (10004 <nrf_esb_init+0xdc>)
    ffc6:	701c      	strb	r4, [r3, #0]
	esb_initialized = true;
    ffc8:	4b05      	ldr	r3, [pc, #20]	; (ffe0 <nrf_esb_init+0xb8>)
    ffca:	2201      	movs	r2, #1
    ffcc:	701a      	strb	r2, [r3, #0]
	return 0;
    ffce:	4620      	mov	r0, r4
}
    ffd0:	bd38      	pop	{r3, r4, r5, pc}
		nrf_esb_disable();
    ffd2:	f7ff ff7f 	bl	fed4 <nrf_esb_disable>
    ffd6:	e7af      	b.n	ff38 <nrf_esb_init+0x10>
		return -EINVAL;
    ffd8:	f06f 0015 	mvn.w	r0, #21
}
    ffdc:	4770      	bx	lr
    ffde:	bf00      	nop
    ffe0:	20004bab 	.word	0x20004bab
    ffe4:	200026a0 	.word	0x200026a0
    ffe8:	200026a4 	.word	0x200026a4
    ffec:	200025d0 	.word	0x200025d0
    fff0:	200025d4 	.word	0x200025d4
    fff4:	200025f4 	.word	0x200025f4
    fff8:	40001000 	.word	0x40001000
    fffc:	23c343e7 	.word	0x23c343e7
   10000:	13e363a3 	.word	0x13e363a3
   10004:	20004baa 	.word	0x20004baa

00010008 <nrf_esb_is_idle>:

bool nrf_esb_is_idle(void)
{
	return (esb_state == ESB_STATE_IDLE);
   10008:	4b02      	ldr	r3, [pc, #8]	; (10014 <nrf_esb_is_idle+0xc>)
   1000a:	7818      	ldrb	r0, [r3, #0]
}
   1000c:	fab0 f080 	clz	r0, r0
   10010:	0940      	lsrs	r0, r0, #5
   10012:	4770      	bx	lr
   10014:	20004baa 	.word	0x20004baa

00010018 <nrf_esb_write_payload>:

int nrf_esb_write_payload(const struct nrf_esb_payload *payload)
{
	if (!esb_initialized) {
   10018:	4b42      	ldr	r3, [pc, #264]	; (10124 <nrf_esb_write_payload+0x10c>)
   1001a:	781b      	ldrb	r3, [r3, #0]
   1001c:	2b00      	cmp	r3, #0
   1001e:	d06a      	beq.n	100f6 <nrf_esb_write_payload+0xde>
		return -EACCES;
	}
	if (payload == NULL) {
   10020:	2800      	cmp	r0, #0
   10022:	d06b      	beq.n	100fc <nrf_esb_write_payload+0xe4>
		return -EINVAL;
	}
	if (payload->length == 0 ||
   10024:	7802      	ldrb	r2, [r0, #0]
   10026:	1e53      	subs	r3, r2, #1
   10028:	b2db      	uxtb	r3, r3
   1002a:	2b1f      	cmp	r3, #31
   1002c:	d869      	bhi.n	10102 <nrf_esb_write_payload+0xea>
	    payload->length > CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH ||
	    (esb_cfg.protocol == NRF_ESB_PROTOCOL_ESB &&
   1002e:	4b3e      	ldr	r3, [pc, #248]	; (10128 <nrf_esb_write_payload+0x110>)
   10030:	781b      	ldrb	r3, [r3, #0]
	    payload->length > CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH ||
   10032:	b91b      	cbnz	r3, 1003c <nrf_esb_write_payload+0x24>
	     payload->length > esb_cfg.payload_length)) {
   10034:	4b3c      	ldr	r3, [pc, #240]	; (10128 <nrf_esb_write_payload+0x110>)
   10036:	7cdb      	ldrb	r3, [r3, #19]
	    (esb_cfg.protocol == NRF_ESB_PROTOCOL_ESB &&
   10038:	429a      	cmp	r2, r3
   1003a:	d865      	bhi.n	10108 <nrf_esb_write_payload+0xf0>
		return -EMSGSIZE;
	}
	if (tx_fifo.count >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
   1003c:	4b3b      	ldr	r3, [pc, #236]	; (1012c <nrf_esb_write_payload+0x114>)
   1003e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10040:	2b07      	cmp	r3, #7
   10042:	d864      	bhi.n	1010e <nrf_esb_write_payload+0xf6>
		return -ENOMEM;
	}
	if (payload->pipe >= CONFIG_NRF_ESB_PIPE_COUNT) {
   10044:	7843      	ldrb	r3, [r0, #1]
   10046:	2b07      	cmp	r3, #7
   10048:	d864      	bhi.n	10114 <nrf_esb_write_payload+0xfc>
{
   1004a:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1004c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10050:	f3ef 8c11 	mrs	ip, BASEPRI
   10054:	f383 8812 	msr	BASEPRI_MAX, r3
   10058:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	uint32_t key = irq_lock();

	memcpy(tx_fifo.payload[tx_fifo.back], payload,
   1005c:	4a33      	ldr	r2, [pc, #204]	; (1012c <nrf_esb_write_payload+0x114>)
   1005e:	6a11      	ldr	r1, [r2, #32]
   10060:	4603      	mov	r3, r0
   10062:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   10066:	f100 0620 	add.w	r6, r0, #32
   1006a:	681d      	ldr	r5, [r3, #0]
   1006c:	685c      	ldr	r4, [r3, #4]
   1006e:	f8d3 e008 	ldr.w	lr, [r3, #8]
   10072:	68d9      	ldr	r1, [r3, #12]
   10074:	6015      	str	r5, [r2, #0]
   10076:	6054      	str	r4, [r2, #4]
   10078:	f8c2 e008 	str.w	lr, [r2, #8]
   1007c:	60d1      	str	r1, [r2, #12]
   1007e:	3310      	adds	r3, #16
   10080:	3210      	adds	r2, #16
   10082:	42b3      	cmp	r3, r6
   10084:	d1f1      	bne.n	1006a <nrf_esb_write_payload+0x52>
   10086:	6819      	ldr	r1, [r3, #0]
   10088:	6011      	str	r1, [r2, #0]
   1008a:	791b      	ldrb	r3, [r3, #4]
   1008c:	7113      	strb	r3, [r2, #4]
	       sizeof(struct nrf_esb_payload));

	pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
   1008e:	f890 e001 	ldrb.w	lr, [r0, #1]
   10092:	4927      	ldr	r1, [pc, #156]	; (10130 <nrf_esb_write_payload+0x118>)
   10094:	f811 300e 	ldrb.w	r3, [r1, lr]
   10098:	3301      	adds	r3, #1
   1009a:	425a      	negs	r2, r3
   1009c:	f003 0303 	and.w	r3, r3, #3
   100a0:	f002 0203 	and.w	r2, r2, #3
   100a4:	bf58      	it	pl
   100a6:	4253      	negpl	r3, r2
   100a8:	f801 300e 	strb.w	r3, [r1, lr]
	tx_fifo.payload[tx_fifo.back]->pid = pids[payload->pipe];
   100ac:	7844      	ldrb	r4, [r0, #1]
   100ae:	4a1f      	ldr	r2, [pc, #124]	; (1012c <nrf_esb_write_payload+0x114>)
   100b0:	6a13      	ldr	r3, [r2, #32]
   100b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   100b6:	5d09      	ldrb	r1, [r1, r4]
   100b8:	7101      	strb	r1, [r0, #4]

	if (++tx_fifo.back >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
   100ba:	3301      	adds	r3, #1
   100bc:	6213      	str	r3, [r2, #32]
   100be:	2b07      	cmp	r3, #7
   100c0:	d902      	bls.n	100c8 <nrf_esb_write_payload+0xb0>
		tx_fifo.back = 0;
   100c2:	4613      	mov	r3, r2
   100c4:	2200      	movs	r2, #0
   100c6:	621a      	str	r2, [r3, #32]
	}

	tx_fifo.count++;
   100c8:	4a18      	ldr	r2, [pc, #96]	; (1012c <nrf_esb_write_payload+0x114>)
   100ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
   100cc:	3301      	adds	r3, #1
   100ce:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
   100d0:	f38c 8811 	msr	BASEPRI, ip
   100d4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	if (esb_cfg.mode == NRF_ESB_MODE_PTX &&
   100d8:	4b13      	ldr	r3, [pc, #76]	; (10128 <nrf_esb_write_payload+0x110>)
   100da:	785b      	ldrb	r3, [r3, #1]
   100dc:	b9eb      	cbnz	r3, 1011a <nrf_esb_write_payload+0x102>
	    esb_cfg.tx_mode == NRF_ESB_TXMODE_AUTO &&
   100de:	4b12      	ldr	r3, [pc, #72]	; (10128 <nrf_esb_write_payload+0x110>)
   100e0:	7c1b      	ldrb	r3, [r3, #16]
	if (esb_cfg.mode == NRF_ESB_MODE_PTX &&
   100e2:	b9e3      	cbnz	r3, 1011e <nrf_esb_write_payload+0x106>
	    esb_state == ESB_STATE_IDLE) {
   100e4:	4b13      	ldr	r3, [pc, #76]	; (10134 <nrf_esb_write_payload+0x11c>)
   100e6:	781b      	ldrb	r3, [r3, #0]
	    esb_cfg.tx_mode == NRF_ESB_TXMODE_AUTO &&
   100e8:	b10b      	cbz	r3, 100ee <nrf_esb_write_payload+0xd6>
		start_tx_transaction();
	}
	
	return 0;
   100ea:	2000      	movs	r0, #0
   100ec:	e016      	b.n	1011c <nrf_esb_write_payload+0x104>
		start_tx_transaction();
   100ee:	f7ff fc05 	bl	f8fc <start_tx_transaction>
	return 0;
   100f2:	2000      	movs	r0, #0
   100f4:	e012      	b.n	1011c <nrf_esb_write_payload+0x104>
		return -EACCES;
   100f6:	f06f 000c 	mvn.w	r0, #12
   100fa:	4770      	bx	lr
		return -EINVAL;
   100fc:	f06f 0015 	mvn.w	r0, #21
   10100:	4770      	bx	lr
		return -EMSGSIZE;
   10102:	f06f 0079 	mvn.w	r0, #121	; 0x79
   10106:	4770      	bx	lr
   10108:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1010c:	4770      	bx	lr
		return -ENOMEM;
   1010e:	f06f 000b 	mvn.w	r0, #11
   10112:	4770      	bx	lr
		return -EINVAL;
   10114:	f06f 0015 	mvn.w	r0, #21
}
   10118:	4770      	bx	lr
	return 0;
   1011a:	2000      	movs	r0, #0
}
   1011c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1011e:	2000      	movs	r0, #0
   10120:	e7fc      	b.n	1011c <nrf_esb_write_payload+0x104>
   10122:	bf00      	nop
   10124:	20004bab 	.word	0x20004bab
   10128:	200026a4 	.word	0x200026a4
   1012c:	20002670 	.word	0x20002670
   10130:	200025f4 	.word	0x200025f4
   10134:	20004baa 	.word	0x20004baa

00010138 <nrf_esb_read_rx_payload>:

int nrf_esb_read_rx_payload(struct nrf_esb_payload *payload)
{
   10138:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
   1013a:	4b1f      	ldr	r3, [pc, #124]	; (101b8 <nrf_esb_read_rx_payload+0x80>)
   1013c:	781b      	ldrb	r3, [r3, #0]
   1013e:	2b00      	cmp	r3, #0
   10140:	d031      	beq.n	101a6 <nrf_esb_read_rx_payload+0x6e>
		return -EACCES;
	}
	if (payload == NULL) {
   10142:	2800      	cmp	r0, #0
   10144:	d032      	beq.n	101ac <nrf_esb_read_rx_payload+0x74>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
   10146:	4b1d      	ldr	r3, [pc, #116]	; (101bc <nrf_esb_read_rx_payload+0x84>)
   10148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1014a:	2b00      	cmp	r3, #0
   1014c:	d031      	beq.n	101b2 <nrf_esb_read_rx_payload+0x7a>
	__asm__ volatile(
   1014e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10152:	f3ef 8411 	mrs	r4, BASEPRI
   10156:	f383 8812 	msr	BASEPRI_MAX, r3
   1015a:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	uint32_t key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
   1015e:	4d17      	ldr	r5, [pc, #92]	; (101bc <nrf_esb_read_rx_payload+0x84>)
   10160:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10162:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   10166:	780a      	ldrb	r2, [r1, #0]
   10168:	7002      	strb	r2, [r0, #0]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
   1016a:	784b      	ldrb	r3, [r1, #1]
   1016c:	7043      	strb	r3, [r0, #1]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
   1016e:	f991 3002 	ldrsb.w	r3, [r1, #2]
   10172:	7083      	strb	r3, [r0, #2]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
   10174:	790b      	ldrb	r3, [r1, #4]
   10176:	7103      	strb	r3, [r0, #4]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
   10178:	78cb      	ldrb	r3, [r1, #3]
   1017a:	70c3      	strb	r3, [r0, #3]
   1017c:	3105      	adds	r1, #5
   1017e:	3005      	adds	r0, #5
   10180:	f014 fe43 	bl	24e0a <memcpy>
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
	       payload->length);

	if (++rx_fifo.front >= CONFIG_NRF_ESB_RX_FIFO_SIZE) {
   10184:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10186:	3301      	adds	r3, #1
   10188:	626b      	str	r3, [r5, #36]	; 0x24
   1018a:	2b07      	cmp	r3, #7
   1018c:	d901      	bls.n	10192 <nrf_esb_read_rx_payload+0x5a>
		rx_fifo.front = 0;
   1018e:	2200      	movs	r2, #0
   10190:	626a      	str	r2, [r5, #36]	; 0x24
	}

	rx_fifo.count--;
   10192:	4a0a      	ldr	r2, [pc, #40]	; (101bc <nrf_esb_read_rx_payload+0x84>)
   10194:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10196:	3b01      	subs	r3, #1
   10198:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
   1019a:	f384 8811 	msr	BASEPRI, r4
   1019e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
   101a2:	2000      	movs	r0, #0
}
   101a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   101a6:	f06f 000c 	mvn.w	r0, #12
   101aa:	e7fb      	b.n	101a4 <nrf_esb_read_rx_payload+0x6c>
		return -EINVAL;
   101ac:	f06f 0015 	mvn.w	r0, #21
   101b0:	e7f8      	b.n	101a4 <nrf_esb_read_rx_payload+0x6c>
		return -ENODATA;
   101b2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   101b6:	e7f5      	b.n	101a4 <nrf_esb_read_rx_payload+0x6c>
   101b8:	20004bab 	.word	0x20004bab
   101bc:	20002644 	.word	0x20002644

000101c0 <nrf_esb_start_rx>:

	return 0;
}

int nrf_esb_start_rx(void)
{
   101c0:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
   101c2:	4b1b      	ldr	r3, [pc, #108]	; (10230 <nrf_esb_start_rx+0x70>)
   101c4:	781b      	ldrb	r3, [r3, #0]
   101c6:	bb7b      	cbnz	r3, 10228 <nrf_esb_start_rx+0x68>
		return -EBUSY;
	}

	NRF_RADIO->INTENCLR = 0xFFFFFFFF;
   101c8:	4c1a      	ldr	r4, [pc, #104]	; (10234 <nrf_esb_start_rx+0x74>)
   101ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   101ce:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	NRF_RADIO->EVENTS_DISABLED = 0;
   101d2:	2500      	movs	r5, #0
   101d4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
	on_radio_disabled = on_radio_disabled_rx;
   101d8:	4b17      	ldr	r3, [pc, #92]	; (10238 <nrf_esb_start_rx+0x78>)
   101da:	4a18      	ldr	r2, [pc, #96]	; (1023c <nrf_esb_start_rx+0x7c>)
   101dc:	601a      	str	r2, [r3, #0]

	NRF_RADIO->SHORTS = radio_shorts_common |
   101de:	f240 1317 	movw	r3, #279	; 0x117
   101e2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
	NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   101e6:	2310      	movs	r3, #16
   101e8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	esb_state = ESB_STATE_PRX;
   101ec:	4b10      	ldr	r3, [pc, #64]	; (10230 <nrf_esb_start_rx+0x70>)
   101ee:	2204      	movs	r2, #4
   101f0:	701a      	strb	r2, [r3, #0]

	NRF_RADIO->RXADDRESSES = esb_addr.rx_pipes_enabled;
   101f2:	4b13      	ldr	r3, [pc, #76]	; (10240 <nrf_esb_start_rx+0x80>)
   101f4:	7c9a      	ldrb	r2, [r3, #18]
   101f6:	f8c4 2530 	str.w	r2, [r4, #1328]	; 0x530
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
   101fa:	7cdb      	ldrb	r3, [r3, #19]
   101fc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	NRF_RADIO->PACKETPTR = (uint32_t)rx_payload_buffer;
   10200:	4b10      	ldr	r3, [pc, #64]	; (10244 <nrf_esb_start_rx+0x84>)
   10202:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10206:	4b10      	ldr	r3, [pc, #64]	; (10248 <nrf_esb_start_rx+0x88>)
   10208:	2202      	movs	r2, #2
   1020a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
   1020e:	2001      	movs	r0, #1
   10210:	f011 fcdd 	bl	21bce <arch_irq_enable>

	NRF_RADIO->EVENTS_ADDRESS = 0;
   10214:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
   10218:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NRF_RADIO->EVENTS_DISABLED = 0;
   1021c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110

	NRF_RADIO->TASKS_RXEN = 1;
   10220:	2301      	movs	r3, #1
   10222:	6063      	str	r3, [r4, #4]

	return 0;
   10224:	4628      	mov	r0, r5
}
   10226:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   10228:	f06f 000f 	mvn.w	r0, #15
   1022c:	e7fb      	b.n	10226 <nrf_esb_start_rx+0x66>
   1022e:	bf00      	nop
   10230:	20004baa 	.word	0x20004baa
   10234:	40001000 	.word	0x40001000
   10238:	200025c0 	.word	0x200025c0
   1023c:	0000fd4d 	.word	0x0000fd4d
   10240:	20000448 	.word	0x20000448
   10244:	200025fc 	.word	0x200025fc
   10248:	e000e100 	.word	0xe000e100

0001024c <nrf_esb_stop_rx>:

int nrf_esb_stop_rx(void)
{
	if (esb_state != ESB_STATE_PRX && esb_state != ESB_STATE_PRX_SEND_ACK) {
   1024c:	4b11      	ldr	r3, [pc, #68]	; (10294 <nrf_esb_stop_rx+0x48>)
   1024e:	781b      	ldrb	r3, [r3, #0]
   10250:	b2db      	uxtb	r3, r3
   10252:	2b04      	cmp	r3, #4
   10254:	d004      	beq.n	10260 <nrf_esb_stop_rx+0x14>
   10256:	4b0f      	ldr	r3, [pc, #60]	; (10294 <nrf_esb_stop_rx+0x48>)
   10258:	781b      	ldrb	r3, [r3, #0]
   1025a:	b2db      	uxtb	r3, r3
   1025c:	2b05      	cmp	r3, #5
   1025e:	d116      	bne.n	1028e <nrf_esb_stop_rx+0x42>
		return -EINVAL;
	}

	NRF_RADIO->SHORTS = 0;
   10260:	4b0d      	ldr	r3, [pc, #52]	; (10298 <nrf_esb_stop_rx+0x4c>)
   10262:	2200      	movs	r2, #0
   10264:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->INTENCLR = 0xFFFFFFFF;
   10268:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1026c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	on_radio_disabled = NULL;
   10270:	490a      	ldr	r1, [pc, #40]	; (1029c <nrf_esb_stop_rx+0x50>)
   10272:	600a      	str	r2, [r1, #0]
	NRF_RADIO->EVENTS_DISABLED = 0;
   10274:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	NRF_RADIO->TASKS_DISABLE = 1;
   10278:	2201      	movs	r2, #1
   1027a:	611a      	str	r2, [r3, #16]
	while (NRF_RADIO->EVENTS_DISABLED == 0) {
   1027c:	4b06      	ldr	r3, [pc, #24]	; (10298 <nrf_esb_stop_rx+0x4c>)
   1027e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10282:	2b00      	cmp	r3, #0
   10284:	d0fa      	beq.n	1027c <nrf_esb_stop_rx+0x30>
		/* wait for register to settle */
	}

	esb_state = ESB_STATE_IDLE;
   10286:	2000      	movs	r0, #0
   10288:	4b02      	ldr	r3, [pc, #8]	; (10294 <nrf_esb_stop_rx+0x48>)
   1028a:	7018      	strb	r0, [r3, #0]

	return 0;
   1028c:	4770      	bx	lr
		return -EINVAL;
   1028e:	f06f 0015 	mvn.w	r0, #21
}
   10292:	4770      	bx	lr
   10294:	20004baa 	.word	0x20004baa
   10298:	40001000 	.word	0x40001000
   1029c:	200025c0 	.word	0x200025c0

000102a0 <nrf_esb_flush_tx>:

int nrf_esb_flush_tx(void)
{
	if (!esb_initialized) {
   102a0:	4b0b      	ldr	r3, [pc, #44]	; (102d0 <nrf_esb_flush_tx+0x30>)
   102a2:	781b      	ldrb	r3, [r3, #0]
   102a4:	b18b      	cbz	r3, 102ca <nrf_esb_flush_tx+0x2a>
	__asm__ volatile(
   102a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   102aa:	f3ef 8211 	mrs	r2, BASEPRI
   102ae:	f383 8812 	msr	BASEPRI_MAX, r3
   102b2:	f3bf 8f6f 	isb	sy
		return -EACCES;
	}

	uint32_t key = irq_lock();

	tx_fifo.count = 0;
   102b6:	4b07      	ldr	r3, [pc, #28]	; (102d4 <nrf_esb_flush_tx+0x34>)
   102b8:	2000      	movs	r0, #0
   102ba:	6298      	str	r0, [r3, #40]	; 0x28
	tx_fifo.back = 0;
   102bc:	6218      	str	r0, [r3, #32]
	tx_fifo.front = 0;
   102be:	6258      	str	r0, [r3, #36]	; 0x24
	__asm__ volatile(
   102c0:	f382 8811 	msr	BASEPRI, r2
   102c4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
   102c8:	4770      	bx	lr
		return -EACCES;
   102ca:	f06f 000c 	mvn.w	r0, #12
}
   102ce:	4770      	bx	lr
   102d0:	20004bab 	.word	0x20004bab
   102d4:	20002670 	.word	0x20002670

000102d8 <nrf_esb_set_address_length>:

	return 0;
}

int nrf_esb_set_address_length(uint8_t length)
{
   102d8:	b508      	push	{r3, lr}
	if (esb_state != ESB_STATE_IDLE) {
   102da:	4b0b      	ldr	r3, [pc, #44]	; (10308 <nrf_esb_set_address_length+0x30>)
   102dc:	781b      	ldrb	r3, [r3, #0]
   102de:	b963      	cbnz	r3, 102fa <nrf_esb_set_address_length+0x22>
		return -EBUSY;
	}
	if (!(length > 2 && length < 6)) {
   102e0:	1ec3      	subs	r3, r0, #3
   102e2:	b2db      	uxtb	r3, r3
   102e4:	2b02      	cmp	r3, #2
   102e6:	d80b      	bhi.n	10300 <nrf_esb_set_address_length+0x28>
			return -EINVAL;
		}
	}
#endif

	esb_addr.addr_length = length;
   102e8:	4b08      	ldr	r3, [pc, #32]	; (1030c <nrf_esb_set_address_length+0x34>)
   102ea:	7458      	strb	r0, [r3, #17]

	update_rf_payload_format(esb_cfg.payload_length);
   102ec:	4b08      	ldr	r3, [pc, #32]	; (10310 <nrf_esb_set_address_length+0x38>)
   102ee:	681b      	ldr	r3, [r3, #0]
   102f0:	4a08      	ldr	r2, [pc, #32]	; (10314 <nrf_esb_set_address_length+0x3c>)
   102f2:	7cd0      	ldrb	r0, [r2, #19]
   102f4:	4798      	blx	r3
	apply_address_workarounds();

	return 0;
   102f6:	2000      	movs	r0, #0
}
   102f8:	bd08      	pop	{r3, pc}
		return -EBUSY;
   102fa:	f06f 000f 	mvn.w	r0, #15
   102fe:	e7fb      	b.n	102f8 <nrf_esb_set_address_length+0x20>
		return -EINVAL;
   10300:	f06f 0015 	mvn.w	r0, #21
   10304:	e7f8      	b.n	102f8 <nrf_esb_set_address_length+0x20>
   10306:	bf00      	nop
   10308:	20004baa 	.word	0x20004baa
   1030c:	20000448 	.word	0x20000448
   10310:	200025bc 	.word	0x200025bc
   10314:	200026a4 	.word	0x200026a4

00010318 <nrf_esb_set_base_address_0>:

int nrf_esb_set_base_address_0(const uint8_t *addr)
{
   10318:	b508      	push	{r3, lr}
	if (esb_state != ESB_STATE_IDLE) {
   1031a:	4b09      	ldr	r3, [pc, #36]	; (10340 <nrf_esb_set_base_address_0+0x28>)
   1031c:	781b      	ldrb	r3, [r3, #0]
   1031e:	b943      	cbnz	r3, 10332 <nrf_esb_set_base_address_0+0x1a>
		return -EBUSY;
	}
	if (addr == NULL) {
   10320:	b150      	cbz	r0, 10338 <nrf_esb_set_base_address_0+0x20>
			return -EINVAL;
		}
	}
#endif

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
   10322:	6802      	ldr	r2, [r0, #0]
   10324:	4b07      	ldr	r3, [pc, #28]	; (10344 <nrf_esb_set_base_address_0+0x2c>)
   10326:	601a      	str	r2, [r3, #0]

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);
   10328:	2001      	movs	r0, #1
   1032a:	f7ff fda7 	bl	fe7c <update_radio_addresses>
	apply_address_workarounds();

	return 0;
   1032e:	2000      	movs	r0, #0
}
   10330:	bd08      	pop	{r3, pc}
		return -EBUSY;
   10332:	f06f 000f 	mvn.w	r0, #15
   10336:	e7fb      	b.n	10330 <nrf_esb_set_base_address_0+0x18>
		return -EINVAL;
   10338:	f06f 0015 	mvn.w	r0, #21
   1033c:	e7f8      	b.n	10330 <nrf_esb_set_base_address_0+0x18>
   1033e:	bf00      	nop
   10340:	20004baa 	.word	0x20004baa
   10344:	20000448 	.word	0x20000448

00010348 <nrf_esb_set_base_address_1>:

int nrf_esb_set_base_address_1(const uint8_t *addr)
{
   10348:	b508      	push	{r3, lr}
	if (esb_state != ESB_STATE_IDLE) {
   1034a:	4b09      	ldr	r3, [pc, #36]	; (10370 <nrf_esb_set_base_address_1+0x28>)
   1034c:	781b      	ldrb	r3, [r3, #0]
   1034e:	b943      	cbnz	r3, 10362 <nrf_esb_set_base_address_1+0x1a>
		return -EBUSY;
	}
	if (addr == NULL) {
   10350:	b150      	cbz	r0, 10368 <nrf_esb_set_base_address_1+0x20>
			return -EINVAL;
		}
	}
#endif

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
   10352:	6802      	ldr	r2, [r0, #0]
   10354:	4b07      	ldr	r3, [pc, #28]	; (10374 <nrf_esb_set_base_address_1+0x2c>)
   10356:	605a      	str	r2, [r3, #4]

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);
   10358:	2002      	movs	r0, #2
   1035a:	f7ff fd8f 	bl	fe7c <update_radio_addresses>
	apply_address_workarounds();

	return 0;
   1035e:	2000      	movs	r0, #0
}
   10360:	bd08      	pop	{r3, pc}
		return -EBUSY;
   10362:	f06f 000f 	mvn.w	r0, #15
   10366:	e7fb      	b.n	10360 <nrf_esb_set_base_address_1+0x18>
		return -EINVAL;
   10368:	f06f 0015 	mvn.w	r0, #21
   1036c:	e7f8      	b.n	10360 <nrf_esb_set_base_address_1+0x18>
   1036e:	bf00      	nop
   10370:	20004baa 	.word	0x20004baa
   10374:	20000448 	.word	0x20000448

00010378 <nrf_esb_set_prefixes>:

int nrf_esb_set_prefixes(const uint8_t *prefixes, uint8_t num_pipes)
{
   10378:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
   1037a:	4b11      	ldr	r3, [pc, #68]	; (103c0 <nrf_esb_set_prefixes+0x48>)
   1037c:	781b      	ldrb	r3, [r3, #0]
   1037e:	b9ab      	cbnz	r3, 103ac <nrf_esb_set_prefixes+0x34>
   10380:	460c      	mov	r4, r1
		return -EBUSY;
	}
	if (prefixes == NULL) {
   10382:	b1b0      	cbz	r0, 103b2 <nrf_esb_set_prefixes+0x3a>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_NRF_ESB_PIPE_COUNT)) {
   10384:	2908      	cmp	r1, #8
   10386:	d817      	bhi.n	103b8 <nrf_esb_set_prefixes+0x40>
			}
		}
	}
#endif

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
   10388:	4d0e      	ldr	r5, [pc, #56]	; (103c4 <nrf_esb_set_prefixes+0x4c>)
   1038a:	230c      	movs	r3, #12
   1038c:	460a      	mov	r2, r1
   1038e:	4601      	mov	r1, r0
   10390:	4628      	mov	r0, r5
   10392:	f014 fd48 	bl	24e26 <__memcpy_chk>
	esb_addr.num_pipes = num_pipes;
   10396:	722c      	strb	r4, [r5, #8]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
   10398:	f1c4 0408 	rsb	r4, r4, #8
   1039c:	23ff      	movs	r3, #255	; 0xff
   1039e:	4123      	asrs	r3, r4
   103a0:	72ab      	strb	r3, [r5, #10]

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);
   103a2:	2004      	movs	r0, #4
   103a4:	f7ff fd6a 	bl	fe7c <update_radio_addresses>
	apply_address_workarounds();

	return 0;
   103a8:	2000      	movs	r0, #0
}
   103aa:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   103ac:	f06f 000f 	mvn.w	r0, #15
   103b0:	e7fb      	b.n	103aa <nrf_esb_set_prefixes+0x32>
		return -EINVAL;
   103b2:	f06f 0015 	mvn.w	r0, #21
   103b6:	e7f8      	b.n	103aa <nrf_esb_set_prefixes+0x32>
		return -EINVAL;
   103b8:	f06f 0015 	mvn.w	r0, #21
   103bc:	e7f5      	b.n	103aa <nrf_esb_set_prefixes+0x32>
   103be:	bf00      	nop
   103c0:	20004baa 	.word	0x20004baa
   103c4:	20000450 	.word	0x20000450

000103c8 <nrf_esb_set_rf_channel>:
	return 0;
}

int nrf_esb_set_rf_channel(uint32_t channel)
{
	if (esb_state != ESB_STATE_IDLE) {
   103c8:	4b07      	ldr	r3, [pc, #28]	; (103e8 <nrf_esb_set_rf_channel+0x20>)
   103ca:	781b      	ldrb	r3, [r3, #0]
   103cc:	b92b      	cbnz	r3, 103da <nrf_esb_set_rf_channel+0x12>
		return -EBUSY;
	}
	if (channel > 100) {
   103ce:	2864      	cmp	r0, #100	; 0x64
   103d0:	d806      	bhi.n	103e0 <nrf_esb_set_rf_channel+0x18>
		return -EINVAL;
	}

	esb_addr.rf_channel = channel;
   103d2:	4b06      	ldr	r3, [pc, #24]	; (103ec <nrf_esb_set_rf_channel+0x24>)
   103d4:	74d8      	strb	r0, [r3, #19]

	return 0;
   103d6:	2000      	movs	r0, #0
   103d8:	4770      	bx	lr
		return -EBUSY;
   103da:	f06f 000f 	mvn.w	r0, #15
   103de:	4770      	bx	lr
		return -EINVAL;
   103e0:	f06f 0015 	mvn.w	r0, #21
}
   103e4:	4770      	bx	lr
   103e6:	bf00      	nop
   103e8:	20004baa 	.word	0x20004baa
   103ec:	20000448 	.word	0x20000448

000103f0 <crc16_2>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16_2(unsigned char *buf, unsigned int len) {
   103f0:	4603      	mov	r3, r0
	unsigned int i;
	unsigned short cksum = 0;
   103f2:	2000      	movs	r0, #0
	for (i = 0; i < len; i++) {
   103f4:	4684      	mov	ip, r0
   103f6:	4288      	cmp	r0, r1
   103f8:	d211      	bcs.n	1041e <crc16_2+0x2e>
unsigned short crc16_2(unsigned char *buf, unsigned int len) {
   103fa:	b410      	push	{r4}
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
   103fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   10400:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
   10404:	4c06      	ldr	r4, [pc, #24]	; (10420 <crc16_2+0x30>)
   10406:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   1040a:	ea82 2000 	eor.w	r0, r2, r0, lsl #8
   1040e:	b280      	uxth	r0, r0
	for (i = 0; i < len; i++) {
   10410:	f10c 0c01 	add.w	ip, ip, #1
   10414:	458c      	cmp	ip, r1
   10416:	d3f1      	bcc.n	103fc <crc16_2+0xc>
	}
	return cksum;
}
   10418:	f85d 4b04 	ldr.w	r4, [sp], #4
   1041c:	4770      	bx	lr
   1041e:	4770      	bx	lr
   10420:	000261c4 	.word	0x000261c4

00010424 <clock_stretch_timeout>:
	}

	return byte;
}

static bool clock_stretch_timeout(i2c_bb_state *s) {
   10424:	b082      	sub	sp, #8
	volatile uint32_t cnt = 0;
   10426:	2300      	movs	r3, #0
   10428:	9301      	str	r3, [sp, #4]
	while(READ_SCL() == 0) {
   1042a:	e00d      	b.n	10448 <clock_stretch_timeout+0x24>
        case 1: return NRF_P1;
   1042c:	4b0d      	ldr	r3, [pc, #52]	; (10464 <clock_stretch_timeout+0x40>)
    return p_reg->IN;
   1042e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   10432:	40d3      	lsrs	r3, r2
   10434:	f013 0f01 	tst.w	r3, #1
   10438:	d10f      	bne.n	1045a <clock_stretch_timeout+0x36>
		cnt++;
   1043a:	9b01      	ldr	r3, [sp, #4]
   1043c:	3301      	adds	r3, #1
   1043e:	9301      	str	r3, [sp, #4]

		if (cnt >= 6000000) {
   10440:	9a01      	ldr	r2, [sp, #4]
   10442:	4b09      	ldr	r3, [pc, #36]	; (10468 <clock_stretch_timeout+0x44>)
   10444:	429a      	cmp	r2, r3
   10446:	d80b      	bhi.n	10460 <clock_stretch_timeout+0x3c>
	while(READ_SCL() == 0) {
   10448:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1044a:	f003 021f 	and.w	r2, r3, #31

    return pin_number >> 5;
   1044e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10450:	2b01      	cmp	r3, #1
   10452:	d0eb      	beq.n	1042c <clock_stretch_timeout+0x8>
        case 0: return NRF_P0;
   10454:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   10458:	e7e9      	b.n	1042e <clock_stretch_timeout+0xa>
			return false;
		}
	}

	return true;
   1045a:	2001      	movs	r0, #1
}
   1045c:	b002      	add	sp, #8
   1045e:	4770      	bx	lr
			return false;
   10460:	2000      	movs	r0, #0
   10462:	e7fb      	b.n	1045c <clock_stretch_timeout+0x38>
   10464:	50000300 	.word	0x50000300
   10468:	005b8d7f 	.word	0x005b8d7f

0001046c <i2c_start_cond>:
static void i2c_start_cond(i2c_bb_state *s) {
   1046c:	b510      	push	{r4, lr}
   1046e:	4604      	mov	r4, r0
	if (s->has_started) {
   10470:	7a03      	ldrb	r3, [r0, #8]
   10472:	b30b      	cbz	r3, 104b8 <i2c_start_cond+0x4c>
		SDA_HIGH();
   10474:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   10476:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1047a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1047c:	2b01      	cmp	r3, #1
   1047e:	d042      	beq.n	10506 <i2c_start_cond+0x9a>
        case 0: return NRF_P0;
   10480:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   10484:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   10488:	220c      	movs	r2, #12
   1048a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		i2c_delay();
   1048e:	f00e ff74 	bl	1f37a <i2c_delay>
		SCL_HIGH();
   10492:	6863      	ldr	r3, [r4, #4]
    *p_pin = pin_number & 0x1F;
   10494:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10498:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1049a:	2b01      	cmp	r3, #1
   1049c:	d035      	beq.n	1050a <i2c_start_cond+0x9e>
        case 0: return NRF_P0;
   1049e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   104a2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   104a6:	220c      	movs	r2, #12
   104a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (!clock_stretch_timeout(s)) {
   104ac:	4620      	mov	r0, r4
   104ae:	f7ff ffb9 	bl	10424 <clock_stretch_timeout>
   104b2:	b338      	cbz	r0, 10504 <i2c_start_cond+0x98>
		i2c_delay();
   104b4:	f00e ff61 	bl	1f37a <i2c_delay>
	if (READ_SDA() == 0) {
   104b8:	6822      	ldr	r2, [r4, #0]
    *p_pin = pin_number & 0x1F;
   104ba:	f002 031f 	and.w	r3, r2, #31
    return pin_number >> 5;
   104be:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   104c0:	2a01      	cmp	r2, #1
   104c2:	d024      	beq.n	1050e <i2c_start_cond+0xa2>
        case 0: return NRF_P0;
   104c4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return p_reg->IN;
   104c8:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   104cc:	40da      	lsrs	r2, r3
   104ce:	f012 0f01 	tst.w	r2, #1
   104d2:	d101      	bne.n	104d8 <i2c_start_cond+0x6c>
		s->has_error = true;
   104d4:	2201      	movs	r2, #1
   104d6:	7262      	strb	r2, [r4, #9]
    reg->PIN_CNF[pin_number] = cnf;
   104d8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   104dc:	2203      	movs	r2, #3
   104de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i2c_delay();
   104e2:	f00e ff4a 	bl	1f37a <i2c_delay>
	SCL_LOW();
   104e6:	6863      	ldr	r3, [r4, #4]
    *p_pin = pin_number & 0x1F;
   104e8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   104ec:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   104ee:	2b01      	cmp	r3, #1
   104f0:	d00f      	beq.n	10512 <i2c_start_cond+0xa6>
        case 0: return NRF_P0;
   104f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   104f6:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   104fa:	2203      	movs	r2, #3
   104fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s->has_started = true;
   10500:	2301      	movs	r3, #1
   10502:	7223      	strb	r3, [r4, #8]
}
   10504:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   10506:	4904      	ldr	r1, [pc, #16]	; (10518 <i2c_start_cond+0xac>)
   10508:	e7bc      	b.n	10484 <i2c_start_cond+0x18>
   1050a:	4903      	ldr	r1, [pc, #12]	; (10518 <i2c_start_cond+0xac>)
   1050c:	e7c9      	b.n	104a2 <i2c_start_cond+0x36>
   1050e:	4902      	ldr	r1, [pc, #8]	; (10518 <i2c_start_cond+0xac>)
   10510:	e7da      	b.n	104c8 <i2c_start_cond+0x5c>
   10512:	4901      	ldr	r1, [pc, #4]	; (10518 <i2c_start_cond+0xac>)
   10514:	e7ef      	b.n	104f6 <i2c_start_cond+0x8a>
   10516:	bf00      	nop
   10518:	50000300 	.word	0x50000300

0001051c <i2c_stop_cond>:
static void i2c_stop_cond(i2c_bb_state *s) {
   1051c:	b510      	push	{r4, lr}
   1051e:	4604      	mov	r4, r0
	SDA_LOW();
   10520:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   10522:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10526:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10528:	2b01      	cmp	r3, #1
   1052a:	d01a      	beq.n	10562 <i2c_stop_cond+0x46>
        case 0: return NRF_P0;
   1052c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   10530:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   10534:	2203      	movs	r2, #3
   10536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i2c_delay();
   1053a:	f00e ff1e 	bl	1f37a <i2c_delay>
	SCL_HIGH();
   1053e:	6863      	ldr	r3, [r4, #4]
    *p_pin = pin_number & 0x1F;
   10540:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10544:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10546:	2b01      	cmp	r3, #1
   10548:	d00d      	beq.n	10566 <i2c_stop_cond+0x4a>
        case 0: return NRF_P0;
   1054a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1054e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   10552:	220c      	movs	r2, #12
   10554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!clock_stretch_timeout(s)) {
   10558:	4620      	mov	r0, r4
   1055a:	f7ff ff63 	bl	10424 <clock_stretch_timeout>
   1055e:	b920      	cbnz	r0, 1056a <i2c_stop_cond+0x4e>
}
   10560:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   10562:	4916      	ldr	r1, [pc, #88]	; (105bc <i2c_stop_cond+0xa0>)
   10564:	e7e4      	b.n	10530 <i2c_stop_cond+0x14>
   10566:	4915      	ldr	r1, [pc, #84]	; (105bc <i2c_stop_cond+0xa0>)
   10568:	e7f1      	b.n	1054e <i2c_stop_cond+0x32>
	i2c_delay();
   1056a:	f00e ff06 	bl	1f37a <i2c_delay>
	SDA_HIGH();
   1056e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   10570:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10574:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10576:	2b01      	cmp	r3, #1
   10578:	d01b      	beq.n	105b2 <i2c_stop_cond+0x96>
        case 0: return NRF_P0;
   1057a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1057e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   10582:	220c      	movs	r2, #12
   10584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i2c_delay();
   10588:	f00e fef7 	bl	1f37a <i2c_delay>
	if (READ_SDA() == 0) {
   1058c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1058e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10592:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10594:	2b01      	cmp	r3, #1
   10596:	d00e      	beq.n	105b6 <i2c_stop_cond+0x9a>
        case 0: return NRF_P0;
   10598:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   1059c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   105a0:	40d3      	lsrs	r3, r2
   105a2:	f013 0f01 	tst.w	r3, #1
   105a6:	d101      	bne.n	105ac <i2c_stop_cond+0x90>
		s->has_error = true;
   105a8:	2301      	movs	r3, #1
   105aa:	7263      	strb	r3, [r4, #9]
	s->has_started = false;
   105ac:	2300      	movs	r3, #0
   105ae:	7223      	strb	r3, [r4, #8]
   105b0:	e7d6      	b.n	10560 <i2c_stop_cond+0x44>
        case 1: return NRF_P1;
   105b2:	4902      	ldr	r1, [pc, #8]	; (105bc <i2c_stop_cond+0xa0>)
   105b4:	e7e3      	b.n	1057e <i2c_stop_cond+0x62>
   105b6:	4b01      	ldr	r3, [pc, #4]	; (105bc <i2c_stop_cond+0xa0>)
   105b8:	e7f0      	b.n	1059c <i2c_stop_cond+0x80>
   105ba:	bf00      	nop
   105bc:	50000300 	.word	0x50000300

000105c0 <i2c_write_bit>:
static void i2c_write_bit(i2c_bb_state *s, bool bit) {
   105c0:	b538      	push	{r3, r4, r5, lr}
   105c2:	4604      	mov	r4, r0
	if (bit) {
   105c4:	460d      	mov	r5, r1
   105c6:	2900      	cmp	r1, #0
   105c8:	d042      	beq.n	10650 <i2c_write_bit+0x90>
		SDA_HIGH();
   105ca:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   105cc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   105d0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   105d2:	2b01      	cmp	r3, #1
   105d4:	d03a      	beq.n	1064c <i2c_write_bit+0x8c>
        case 0: return NRF_P0;
   105d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   105da:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   105de:	220c      	movs	r2, #12
   105e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i2c_delay();
   105e4:	f00e fec9 	bl	1f37a <i2c_delay>
	SCL_HIGH();
   105e8:	6863      	ldr	r3, [r4, #4]
    *p_pin = pin_number & 0x1F;
   105ea:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   105ee:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   105f0:	2b01      	cmp	r3, #1
   105f2:	d03d      	beq.n	10670 <i2c_write_bit+0xb0>
        case 0: return NRF_P0;
   105f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   105f8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   105fc:	220c      	movs	r2, #12
   105fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i2c_delay();
   10602:	f00e feba 	bl	1f37a <i2c_delay>
	if (!clock_stretch_timeout(s)) {
   10606:	4620      	mov	r0, r4
   10608:	f7ff ff0c 	bl	10424 <clock_stretch_timeout>
   1060c:	b1e8      	cbz	r0, 1064a <i2c_write_bit+0x8a>
	if (bit && (READ_SDA() == 0)) {
   1060e:	b17d      	cbz	r5, 10630 <i2c_write_bit+0x70>
   10610:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   10612:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10616:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10618:	2b01      	cmp	r3, #1
   1061a:	d02b      	beq.n	10674 <i2c_write_bit+0xb4>
        case 0: return NRF_P0;
   1061c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   10620:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   10624:	40d3      	lsrs	r3, r2
   10626:	f013 0f01 	tst.w	r3, #1
   1062a:	d101      	bne.n	10630 <i2c_write_bit+0x70>
		s->has_error = true;
   1062c:	2301      	movs	r3, #1
   1062e:	7263      	strb	r3, [r4, #9]
	SCL_LOW();
   10630:	6863      	ldr	r3, [r4, #4]
    *p_pin = pin_number & 0x1F;
   10632:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10636:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10638:	2b01      	cmp	r3, #1
   1063a:	d01d      	beq.n	10678 <i2c_write_bit+0xb8>
        case 0: return NRF_P0;
   1063c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   10640:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   10644:	2203      	movs	r2, #3
   10646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1064a:	bd38      	pop	{r3, r4, r5, pc}
        case 1: return NRF_P1;
   1064c:	490b      	ldr	r1, [pc, #44]	; (1067c <i2c_write_bit+0xbc>)
   1064e:	e7c4      	b.n	105da <i2c_write_bit+0x1a>
		SDA_LOW();
   10650:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   10652:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10656:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10658:	2b01      	cmp	r3, #1
   1065a:	d007      	beq.n	1066c <i2c_write_bit+0xac>
        case 0: return NRF_P0;
   1065c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   10660:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   10664:	2203      	movs	r2, #3
   10666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1066a:	e7bb      	b.n	105e4 <i2c_write_bit+0x24>
        case 1: return NRF_P1;
   1066c:	4903      	ldr	r1, [pc, #12]	; (1067c <i2c_write_bit+0xbc>)
   1066e:	e7f7      	b.n	10660 <i2c_write_bit+0xa0>
   10670:	4902      	ldr	r1, [pc, #8]	; (1067c <i2c_write_bit+0xbc>)
   10672:	e7c1      	b.n	105f8 <i2c_write_bit+0x38>
   10674:	4b01      	ldr	r3, [pc, #4]	; (1067c <i2c_write_bit+0xbc>)
   10676:	e7d3      	b.n	10620 <i2c_write_bit+0x60>
   10678:	4900      	ldr	r1, [pc, #0]	; (1067c <i2c_write_bit+0xbc>)
   1067a:	e7e1      	b.n	10640 <i2c_write_bit+0x80>
   1067c:	50000300 	.word	0x50000300

00010680 <i2c_read_bit>:
static bool i2c_read_bit(i2c_bb_state *s) {
   10680:	b510      	push	{r4, lr}
   10682:	4604      	mov	r4, r0
	SDA_HIGH();
   10684:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   10686:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1068a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1068c:	2b01      	cmp	r3, #1
   1068e:	d01c      	beq.n	106ca <i2c_read_bit+0x4a>
        case 0: return NRF_P0;
   10690:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   10694:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   10698:	220c      	movs	r2, #12
   1069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i2c_delay();
   1069e:	f00e fe6c 	bl	1f37a <i2c_delay>
	SCL_HIGH();
   106a2:	6863      	ldr	r3, [r4, #4]
    *p_pin = pin_number & 0x1F;
   106a4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   106a8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   106aa:	2b01      	cmp	r3, #1
   106ac:	d00f      	beq.n	106ce <i2c_read_bit+0x4e>
        case 0: return NRF_P0;
   106ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   106b2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   106b6:	220c      	movs	r2, #12
   106b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!clock_stretch_timeout(s)) {
   106bc:	4620      	mov	r0, r4
   106be:	f7ff feb1 	bl	10424 <clock_stretch_timeout>
   106c2:	4603      	mov	r3, r0
   106c4:	b928      	cbnz	r0, 106d2 <i2c_read_bit+0x52>
}
   106c6:	4618      	mov	r0, r3
   106c8:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   106ca:	4912      	ldr	r1, [pc, #72]	; (10714 <i2c_read_bit+0x94>)
   106cc:	e7e2      	b.n	10694 <i2c_read_bit+0x14>
   106ce:	4911      	ldr	r1, [pc, #68]	; (10714 <i2c_read_bit+0x94>)
   106d0:	e7ef      	b.n	106b2 <i2c_read_bit+0x32>
	i2c_delay();
   106d2:	f00e fe52 	bl	1f37a <i2c_delay>
	bit = READ_SDA();
   106d6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   106d8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   106dc:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   106de:	2b01      	cmp	r3, #1
   106e0:	d014      	beq.n	1070c <i2c_read_bit+0x8c>
        case 0: return NRF_P0;
   106e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   106e6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   106ea:	40d3      	lsrs	r3, r2
   106ec:	f003 0301 	and.w	r3, r3, #1
	SCL_LOW();
   106f0:	6862      	ldr	r2, [r4, #4]
    *p_pin = pin_number & 0x1F;
   106f2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   106f6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   106f8:	2a01      	cmp	r2, #1
   106fa:	d009      	beq.n	10710 <i2c_read_bit+0x90>
        case 0: return NRF_P0;
   106fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   10700:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   10704:	2103      	movs	r1, #3
   10706:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	return bit;
   1070a:	e7dc      	b.n	106c6 <i2c_read_bit+0x46>
        case 1: return NRF_P1;
   1070c:	4b01      	ldr	r3, [pc, #4]	; (10714 <i2c_read_bit+0x94>)
   1070e:	e7ea      	b.n	106e6 <i2c_read_bit+0x66>
   10710:	4800      	ldr	r0, [pc, #0]	; (10714 <i2c_read_bit+0x94>)
   10712:	e7f5      	b.n	10700 <i2c_read_bit+0x80>
   10714:	50000300 	.word	0x50000300

00010718 <i2c_bb_init>:
	nrf_gpio_pin_clear(s->scl_pin);
   10718:	6843      	ldr	r3, [r0, #4]
    *p_pin = pin_number & 0x1F;
   1071a:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   1071e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10720:	2b01      	cmp	r3, #1
   10722:	d015      	beq.n	10750 <i2c_bb_init+0x38>
        case 0: return NRF_P0;
   10724:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   10728:	2301      	movs	r3, #1
   1072a:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   1072c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
	nrf_gpio_pin_clear(s->sda_pin);
   10730:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   10732:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   10736:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10738:	2b01      	cmp	r3, #1
   1073a:	d00b      	beq.n	10754 <i2c_bb_init+0x3c>
        case 0: return NRF_P0;
   1073c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   10740:	2301      	movs	r3, #1
   10742:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   10744:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
	s->has_started = false;
   10748:	2300      	movs	r3, #0
   1074a:	7203      	strb	r3, [r0, #8]
	s->has_error = false;
   1074c:	7243      	strb	r3, [r0, #9]
}
   1074e:	4770      	bx	lr
        case 1: return NRF_P1;
   10750:	4a01      	ldr	r2, [pc, #4]	; (10758 <i2c_bb_init+0x40>)
   10752:	e7e9      	b.n	10728 <i2c_bb_init+0x10>
   10754:	4a00      	ldr	r2, [pc, #0]	; (10758 <i2c_bb_init+0x40>)
   10756:	e7f3      	b.n	10740 <i2c_bb_init+0x28>
   10758:	50000300 	.word	0x50000300

0001075c <calculateAccConfidence>:
static float calculateAccConfidence(float accMag, float *accMagP) {
   1075c:	b500      	push	{lr}
   1075e:	ed2d 8b02 	vpush	{d8}
   10762:	b083      	sub	sp, #12
	accMag = *accMagP * 0.9f + accMag * 0.1f;
   10764:	edd0 7a00 	vldr	s15, [r0]
   10768:	ed9f 7a12 	vldr	s14, [pc, #72]	; 107b4 <calculateAccConfidence+0x58>
   1076c:	ee67 7a87 	vmul.f32	s15, s15, s14
   10770:	ed9f 7a11 	vldr	s14, [pc, #68]	; 107b8 <calculateAccConfidence+0x5c>
   10774:	ee20 0a07 	vmul.f32	s0, s0, s14
   10778:	ee37 0a80 	vadd.f32	s0, s15, s0
	*accMagP = accMag;
   1077c:	ed80 0a00 	vstr	s0, [r0]
	confidence = 1.0 - (ACC_CONFIDENCE_DECAY * sqrtf(fabsf(accMag - 1.0f)));
   10780:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   10784:	ee30 0a48 	vsub.f32	s0, s0, s16
   10788:	eeb0 0ac0 	vabs.f32	s0, s0
   1078c:	f009 ff60 	bl	1a650 <sqrtf>
   10790:	ee38 0a40 	vsub.f32	s0, s16, s0
   10794:	ed8d 0a01 	vstr	s0, [sp, #4]
	utils_truncate_number(&confidence, 0.0, 1.0);
   10798:	eef0 0a48 	vmov.f32	s1, s16
   1079c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 107bc <calculateAccConfidence+0x60>
   107a0:	a801      	add	r0, sp, #4
   107a2:	f00f fa6c 	bl	1fc7e <utils_truncate_number>
}
   107a6:	ed9d 0a01 	vldr	s0, [sp, #4]
   107aa:	b003      	add	sp, #12
   107ac:	ecbd 8b02 	vpop	{d8}
   107b0:	f85d fb04 	ldr.w	pc, [sp], #4
   107b4:	3f666666 	.word	0x3f666666
   107b8:	3dcccccd 	.word	0x3dcccccd
   107bc:	00000000 	.word	0x00000000

000107c0 <user_i2c_read>:
static int8_t user_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len) {
   107c0:	b500      	push	{lr}
   107c2:	b085      	sub	sp, #20
	txbuf[0] = reg_addr;
   107c4:	f88d 100c 	strb.w	r1, [sp, #12]
	return i2c_bb_tx_rx(&s_i2c, dev_addr, txbuf, 1, data, len) ? BMI160_OK : BMI160_E_COM_FAIL;
   107c8:	9301      	str	r3, [sp, #4]
   107ca:	9200      	str	r2, [sp, #0]
   107cc:	2301      	movs	r3, #1
   107ce:	aa03      	add	r2, sp, #12
   107d0:	4601      	mov	r1, r0
   107d2:	4805      	ldr	r0, [pc, #20]	; (107e8 <user_i2c_read+0x28>)
   107d4:	f00e fe13 	bl	1f3fe <i2c_bb_tx_rx>
   107d8:	b118      	cbz	r0, 107e2 <user_i2c_read+0x22>
   107da:	2000      	movs	r0, #0
}
   107dc:	b005      	add	sp, #20
   107de:	f85d fb04 	ldr.w	pc, [sp], #4
	return i2c_bb_tx_rx(&s_i2c, dev_addr, txbuf, 1, data, len) ? BMI160_OK : BMI160_E_COM_FAIL;
   107e2:	f06f 0001 	mvn.w	r0, #1
   107e6:	e7f9      	b.n	107dc <user_i2c_read+0x1c>
   107e8:	200026c0 	.word	0x200026c0

000107ec <user_i2c_write>:
static int8_t user_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len) {
   107ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   107ee:	b083      	sub	sp, #12
   107f0:	af02      	add	r7, sp, #8
   107f2:	4604      	mov	r4, r0
   107f4:	4608      	mov	r0, r1
   107f6:	4611      	mov	r1, r2
   107f8:	461a      	mov	r2, r3
	uint8_t txbuf[len + 1];
   107fa:	1c5e      	adds	r6, r3, #1
   107fc:	3308      	adds	r3, #8
   107fe:	08db      	lsrs	r3, r3, #3
   10800:	466d      	mov	r5, sp
   10802:	eba5 03c3 	sub.w	r3, r5, r3, lsl #3
   10806:	469d      	mov	sp, r3
   10808:	ad02      	add	r5, sp, #8
	txbuf[0] = reg_addr;
   1080a:	f88d 0008 	strb.w	r0, [sp, #8]
   1080e:	f10d 0009 	add.w	r0, sp, #9
   10812:	f014 fafa 	bl	24e0a <memcpy>
	return i2c_bb_tx_rx(&s_i2c, dev_addr, txbuf, len + 1, 0, 0) ? BMI160_OK : BMI160_E_COM_FAIL;
   10816:	2300      	movs	r3, #0
   10818:	9301      	str	r3, [sp, #4]
   1081a:	9300      	str	r3, [sp, #0]
   1081c:	4633      	mov	r3, r6
   1081e:	462a      	mov	r2, r5
   10820:	4621      	mov	r1, r4
   10822:	4805      	ldr	r0, [pc, #20]	; (10838 <user_i2c_write+0x4c>)
   10824:	f00e fdeb 	bl	1f3fe <i2c_bb_tx_rx>
   10828:	b118      	cbz	r0, 10832 <user_i2c_write+0x46>
   1082a:	2000      	movs	r0, #0
}
   1082c:	3704      	adds	r7, #4
   1082e:	46bd      	mov	sp, r7
   10830:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return i2c_bb_tx_rx(&s_i2c, dev_addr, txbuf, len + 1, 0, 0) ? BMI160_OK : BMI160_E_COM_FAIL;
   10832:	f06f 0001 	mvn.w	r0, #1
   10836:	e7f9      	b.n	1082c <user_i2c_write+0x40>
   10838:	200026c0 	.word	0x200026c0

0001083c <imu_sleep>:
static void imu_sleep(void) {
   1083c:	b508      	push	{r3, lr}
	sensor.accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
   1083e:	4804      	ldr	r0, [pc, #16]	; (10850 <imu_sleep+0x14>)
   10840:	2310      	movs	r3, #16
   10842:	7103      	strb	r3, [r0, #4]
	sensor.gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
   10844:	2314      	movs	r3, #20
   10846:	7303      	strb	r3, [r0, #12]
	bmi160_set_power_mode(&sensor);
   10848:	f00f f9b4 	bl	1fbb4 <bmi160_set_power_mode>
}
   1084c:	bd08      	pop	{r3, pc}
   1084e:	bf00      	nop
   10850:	200026cc 	.word	0x200026cc

00010854 <imu_init>:
void imu_init(int scl_pin, int sda_pin) {
   10854:	b538      	push	{r3, r4, r5, lr}
	s_i2c.scl_pin = scl_pin;
   10856:	4b14      	ldr	r3, [pc, #80]	; (108a8 <imu_init+0x54>)
   10858:	6058      	str	r0, [r3, #4]
	s_i2c.sda_pin = sda_pin;
   1085a:	6019      	str	r1, [r3, #0]
	i2c_bb_init(&s_i2c);
   1085c:	4618      	mov	r0, r3
   1085e:	f7ff ff5b 	bl	10718 <i2c_bb_init>
	ahrs_init_attitude_info(&m_att);
   10862:	4812      	ldr	r0, [pc, #72]	; (108ac <imu_init+0x58>)
   10864:	f00f fa29 	bl	1fcba <ahrs_init_attitude_info>
	sensor.id = BMI160_I2C_ADDR;
   10868:	4c11      	ldr	r4, [pc, #68]	; (108b0 <imu_init+0x5c>)
   1086a:	2368      	movs	r3, #104	; 0x68
   1086c:	7063      	strb	r3, [r4, #1]
	sensor.interface = BMI160_I2C_INTF;
   1086e:	2500      	movs	r5, #0
   10870:	70a5      	strb	r5, [r4, #2]
	sensor.read = user_i2c_read;
   10872:	4b10      	ldr	r3, [pc, #64]	; (108b4 <imu_init+0x60>)
   10874:	61e3      	str	r3, [r4, #28]
	sensor.write = user_i2c_write;
   10876:	4b10      	ldr	r3, [pc, #64]	; (108b8 <imu_init+0x64>)
   10878:	6223      	str	r3, [r4, #32]
	sensor.delay_ms = user_delay_ms;
   1087a:	4b10      	ldr	r3, [pc, #64]	; (108bc <imu_init+0x68>)
   1087c:	6263      	str	r3, [r4, #36]	; 0x24
	bmi160_init(&sensor);
   1087e:	4620      	mov	r0, r4
   10880:	f00f f964 	bl	1fb4c <bmi160_init>
	sensor.accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
   10884:	2208      	movs	r2, #8
   10886:	7162      	strb	r2, [r4, #5]
	sensor.accel_cfg.range = BMI160_ACCEL_RANGE_16G;
   10888:	230c      	movs	r3, #12
   1088a:	71a3      	strb	r3, [r4, #6]
	sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
   1088c:	2302      	movs	r3, #2
   1088e:	71e3      	strb	r3, [r4, #7]
	sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
   10890:	2111      	movs	r1, #17
   10892:	7121      	strb	r1, [r4, #4]
	sensor.gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
   10894:	7362      	strb	r2, [r4, #13]
	sensor.gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
   10896:	73a5      	strb	r5, [r4, #14]
	sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
   10898:	73e3      	strb	r3, [r4, #15]
	sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
   1089a:	2315      	movs	r3, #21
   1089c:	7323      	strb	r3, [r4, #12]
	bmi160_set_sens_conf(&sensor);
   1089e:	4620      	mov	r0, r4
   108a0:	f00f f99b 	bl	1fbda <bmi160_set_sens_conf>
}
   108a4:	bd38      	pop	{r3, r4, r5, pc}
   108a6:	bf00      	nop
   108a8:	200026c0 	.word	0x200026c0
   108ac:	2000270c 	.word	0x2000270c
   108b0:	200026cc 	.word	0x200026cc
   108b4:	000107c1 	.word	0x000107c1
   108b8:	000107ed 	.word	0x000107ed
   108bc:	0001fce5 	.word	0x0001fce5

000108c0 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
   108c0:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
   108c2:	4b02      	ldr	r3, [pc, #8]	; (108cc <char_out+0xc>)
   108c4:	681b      	ldr	r3, [r3, #0]
   108c6:	4798      	blx	r3
}
   108c8:	bd08      	pop	{r3, pc}
   108ca:	bf00      	nop
   108cc:	2000045c 	.word	0x2000045c

000108d0 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
   108d0:	b500      	push	{lr}
   108d2:	b083      	sub	sp, #12
   108d4:	4602      	mov	r2, r0
   108d6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   108d8:	2100      	movs	r1, #0
   108da:	9100      	str	r1, [sp, #0]
   108dc:	4802      	ldr	r0, [pc, #8]	; (108e8 <vprintk+0x18>)
   108de:	f000 fb9b 	bl	11018 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   108e2:	b003      	add	sp, #12
   108e4:	f85d fb04 	ldr.w	pc, [sp], #4
   108e8:	000108c1 	.word	0x000108c1

000108ec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   108ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   108f0:	b083      	sub	sp, #12
   108f2:	4604      	mov	r4, r0
   108f4:	4608      	mov	r0, r1
   108f6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   108f8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   108fa:	f013 0f08 	tst.w	r3, #8
   108fe:	d105      	bne.n	1090c <process_event+0x20>
   10900:	f003 0607 	and.w	r6, r3, #7
	list->head = NULL;
   10904:	2300      	movs	r3, #0
   10906:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   10908:	9301      	str	r3, [sp, #4]
}
   1090a:	e055      	b.n	109b8 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
   1090c:	2901      	cmp	r1, #1
   1090e:	d009      	beq.n	10924 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10910:	f043 0320 	orr.w	r3, r3, #32
   10914:	8323      	strh	r3, [r4, #24]
   10916:	f385 8811 	msr	BASEPRI, r5
   1091a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1091e:	b003      	add	sp, #12
   10920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10924:	f043 0310 	orr.w	r3, r3, #16
   10928:	8323      	strh	r3, [r4, #24]
   1092a:	e7f4      	b.n	10916 <process_event+0x2a>
			evt = process_recheck(mgr);
   1092c:	4620      	mov	r0, r4
   1092e:	f00f fc49 	bl	201c4 <process_recheck>
   10932:	e043      	b.n	109bc <process_event+0xd0>
			res = mgr->last_res;
   10934:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   10938:	464a      	mov	r2, r9
   1093a:	4669      	mov	r1, sp
   1093c:	4620      	mov	r0, r4
   1093e:	f00f fc5a 	bl	201f6 <process_complete>
		onoff_transition_fn transit = NULL;
   10942:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10946:	8b23      	ldrh	r3, [r4, #24]
   10948:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1094c:	42b7      	cmp	r7, r6
   1094e:	d069      	beq.n	10a24 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10950:	68a2      	ldr	r2, [r4, #8]
   10952:	2a00      	cmp	r2, #0
   10954:	d066      	beq.n	10a24 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10956:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10958:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1095c:	8323      	strh	r3, [r4, #24]
   1095e:	f385 8811 	msr	BASEPRI, r5
   10962:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10966:	2a00      	cmp	r2, #0
   10968:	d164      	bne.n	10a34 <process_event+0x148>
   1096a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   1096c:	b12b      	cbz	r3, 1097a <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
   1096e:	464b      	mov	r3, r9
   10970:	463a      	mov	r2, r7
   10972:	4669      	mov	r1, sp
   10974:	4620      	mov	r0, r4
   10976:	f00f fcb7 	bl	202e8 <notify_all>
			if (transit != NULL) {
   1097a:	f1b8 0f00 	cmp.w	r8, #0
   1097e:	d002      	beq.n	10986 <process_event+0x9a>
				transit(mgr, transition_complete);
   10980:	4934      	ldr	r1, [pc, #208]	; (10a54 <process_event+0x168>)
   10982:	4620      	mov	r0, r4
   10984:	47c0      	blx	r8
	__asm__ volatile(
   10986:	f04f 0340 	mov.w	r3, #64	; 0x40
   1098a:	f3ef 8511 	mrs	r5, BASEPRI
   1098e:	f383 8812 	msr	BASEPRI_MAX, r3
   10992:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10996:	8b23      	ldrh	r3, [r4, #24]
   10998:	f023 0308 	bic.w	r3, r3, #8
   1099c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1099e:	8b23      	ldrh	r3, [r4, #24]
   109a0:	f013 0f10 	tst.w	r3, #16
   109a4:	d04c      	beq.n	10a40 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   109a6:	f023 0310 	bic.w	r3, r3, #16
   109aa:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   109ac:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   109ae:	8b26      	ldrh	r6, [r4, #24]
   109b0:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   109b4:	2800      	cmp	r0, #0
   109b6:	d0ae      	beq.n	10916 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   109b8:	2802      	cmp	r0, #2
   109ba:	d0b7      	beq.n	1092c <process_event+0x40>
		if (evt == EVT_NOP) {
   109bc:	2800      	cmp	r0, #0
   109be:	d0aa      	beq.n	10916 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   109c0:	3801      	subs	r0, #1
   109c2:	2804      	cmp	r0, #4
   109c4:	d82a      	bhi.n	10a1c <process_event+0x130>
   109c6:	a301      	add	r3, pc, #4	; (adr r3, 109cc <process_event+0xe0>)
   109c8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   109cc:	00010935 	.word	0x00010935
   109d0:	00010a1d 	.word	0x00010a1d
   109d4:	000109e1 	.word	0x000109e1
   109d8:	000109f5 	.word	0x000109f5
   109dc:	00010a09 	.word	0x00010a09
			transit = mgr->transitions->start;
   109e0:	6923      	ldr	r3, [r4, #16]
   109e2:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
   109e6:	2106      	movs	r1, #6
   109e8:	4620      	mov	r0, r4
   109ea:	f00f fbc1 	bl	20170 <set_state>
		res = 0;
   109ee:	f04f 0900 	mov.w	r9, #0
   109f2:	e7a8      	b.n	10946 <process_event+0x5a>
			transit = mgr->transitions->stop;
   109f4:	6923      	ldr	r3, [r4, #16]
   109f6:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   109fa:	2104      	movs	r1, #4
   109fc:	4620      	mov	r0, r4
   109fe:	f00f fbb7 	bl	20170 <set_state>
		res = 0;
   10a02:	f04f 0900 	mov.w	r9, #0
   10a06:	e79e      	b.n	10946 <process_event+0x5a>
			transit = mgr->transitions->reset;
   10a08:	6923      	ldr	r3, [r4, #16]
   10a0a:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   10a0e:	2105      	movs	r1, #5
   10a10:	4620      	mov	r0, r4
   10a12:	f00f fbad 	bl	20170 <set_state>
		res = 0;
   10a16:	f04f 0900 	mov.w	r9, #0
   10a1a:	e794      	b.n	10946 <process_event+0x5a>
		if (evt == EVT_NOP) {
   10a1c:	f04f 0800 	mov.w	r8, #0
   10a20:	46c1      	mov	r9, r8
   10a22:	e790      	b.n	10946 <process_event+0x5a>
   10a24:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   10a26:	b10a      	cbz	r2, 10a2c <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10a28:	2200      	movs	r2, #0
   10a2a:	e795      	b.n	10958 <process_event+0x6c>
		    || (transit != NULL)) {
   10a2c:	f1b8 0f00 	cmp.w	r8, #0
   10a30:	d192      	bne.n	10958 <process_event+0x6c>
   10a32:	e7b4      	b.n	1099e <process_event+0xb2>
				notify_monitors(mgr, state, res);
   10a34:	464a      	mov	r2, r9
   10a36:	4639      	mov	r1, r7
   10a38:	4620      	mov	r0, r4
   10a3a:	f00f fba1 	bl	20180 <notify_monitors>
   10a3e:	e794      	b.n	1096a <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10a40:	f013 0f20 	tst.w	r3, #32
   10a44:	d004      	beq.n	10a50 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10a46:	f023 0320 	bic.w	r3, r3, #32
   10a4a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   10a4c:	2002      	movs	r0, #2
   10a4e:	e7ae      	b.n	109ae <process_event+0xc2>
		evt = EVT_NOP;
   10a50:	2000      	movs	r0, #0
   10a52:	e7ac      	b.n	109ae <process_event+0xc2>
   10a54:	00020317 	.word	0x00020317

00010a58 <crc8_ccitt>:
uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   10a58:	f04f 0c00 	mov.w	ip, #0
   10a5c:	4594      	cmp	ip, r2
   10a5e:	d215      	bcs.n	10a8c <crc8_ccitt+0x34>
{
   10a60:	b510      	push	{r4, lr}
		val ^= p[i];
   10a62:	f811 300c 	ldrb.w	r3, [r1, ip]
   10a66:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10a68:	0903      	lsrs	r3, r0, #4
   10a6a:	4c09      	ldr	r4, [pc, #36]	; (10a90 <crc8_ccitt+0x38>)
   10a6c:	5ce3      	ldrb	r3, [r4, r3]
   10a6e:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   10a72:	fa5f fe83 	uxtb.w	lr, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   10a76:	f3c3 1303 	ubfx	r3, r3, #4, #4
   10a7a:	5ce0      	ldrb	r0, [r4, r3]
   10a7c:	ea80 100e 	eor.w	r0, r0, lr, lsl #4
   10a80:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   10a82:	f10c 0c01 	add.w	ip, ip, #1
   10a86:	4594      	cmp	ip, r2
   10a88:	d3eb      	bcc.n	10a62 <crc8_ccitt+0xa>
	}
	return val;
}
   10a8a:	bd10      	pop	{r4, pc}
   10a8c:	4770      	bx	lr
   10a8e:	bf00      	nop
   10a90:	000263e0 	.word	0x000263e0

00010a94 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   10a94:	4684      	mov	ip, r0
	const char *sp = *str;
   10a96:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   10a98:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp) != 0) {
   10a9a:	e006      	b.n	10aaa <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   10a9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10aa0:	3201      	adds	r2, #1
   10aa2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   10aa6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   10aaa:	7813      	ldrb	r3, [r2, #0]
   10aac:	4903      	ldr	r1, [pc, #12]	; (10abc <extract_decimal+0x28>)
   10aae:	5cc9      	ldrb	r1, [r1, r3]
   10ab0:	f011 0f04 	tst.w	r1, #4
   10ab4:	d1f2      	bne.n	10a9c <extract_decimal+0x8>
	}
	*str = sp;
   10ab6:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
   10aba:	4770      	bx	lr
   10abc:	00026db9 	.word	0x00026db9

00010ac0 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   10ac0:	4684      	mov	ip, r0
   10ac2:	4608      	mov	r0, r1
	bool loop = true;
   10ac4:	2201      	movs	r2, #1
   10ac6:	e026      	b.n	10b16 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   10ac8:	f89c 3000 	ldrb.w	r3, [ip]
   10acc:	f043 0304 	orr.w	r3, r3, #4
   10ad0:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   10ad4:	b1f2      	cbz	r2, 10b14 <extract_flags+0x54>
			++sp;
   10ad6:	3001      	adds	r0, #1
   10ad8:	e01c      	b.n	10b14 <extract_flags+0x54>
			conv->flag_plus = true;
   10ada:	f89c 3000 	ldrb.w	r3, [ip]
   10ade:	f043 0308 	orr.w	r3, r3, #8
   10ae2:	f88c 3000 	strb.w	r3, [ip]
			break;
   10ae6:	e7f5      	b.n	10ad4 <extract_flags+0x14>
			conv->flag_space = true;
   10ae8:	f89c 3000 	ldrb.w	r3, [ip]
   10aec:	f043 0310 	orr.w	r3, r3, #16
   10af0:	f88c 3000 	strb.w	r3, [ip]
			break;
   10af4:	e7ee      	b.n	10ad4 <extract_flags+0x14>
			conv->flag_hash = true;
   10af6:	f89c 3000 	ldrb.w	r3, [ip]
   10afa:	f043 0320 	orr.w	r3, r3, #32
   10afe:	f88c 3000 	strb.w	r3, [ip]
			break;
   10b02:	e7e7      	b.n	10ad4 <extract_flags+0x14>
			conv->flag_zero = true;
   10b04:	f89c 3000 	ldrb.w	r3, [ip]
   10b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10b0c:	f88c 3000 	strb.w	r3, [ip]
			break;
   10b10:	e7e0      	b.n	10ad4 <extract_flags+0x14>
		switch (*sp) {
   10b12:	2200      	movs	r2, #0
		}
	} while (loop);
   10b14:	b342      	cbz	r2, 10b68 <extract_flags+0xa8>
		switch (*sp) {
   10b16:	7803      	ldrb	r3, [r0, #0]
   10b18:	3b20      	subs	r3, #32
   10b1a:	2b10      	cmp	r3, #16
   10b1c:	d8f9      	bhi.n	10b12 <extract_flags+0x52>
   10b1e:	a101      	add	r1, pc, #4	; (adr r1, 10b24 <extract_flags+0x64>)
   10b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   10b24:	00010ae9 	.word	0x00010ae9
   10b28:	00010b13 	.word	0x00010b13
   10b2c:	00010b13 	.word	0x00010b13
   10b30:	00010af7 	.word	0x00010af7
   10b34:	00010b13 	.word	0x00010b13
   10b38:	00010b13 	.word	0x00010b13
   10b3c:	00010b13 	.word	0x00010b13
   10b40:	00010b13 	.word	0x00010b13
   10b44:	00010b13 	.word	0x00010b13
   10b48:	00010b13 	.word	0x00010b13
   10b4c:	00010b13 	.word	0x00010b13
   10b50:	00010adb 	.word	0x00010adb
   10b54:	00010b13 	.word	0x00010b13
   10b58:	00010ac9 	.word	0x00010ac9
   10b5c:	00010b13 	.word	0x00010b13
   10b60:	00010b13 	.word	0x00010b13
   10b64:	00010b05 	.word	0x00010b05

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   10b68:	f89c 3000 	ldrb.w	r3, [ip]
   10b6c:	f003 0344 	and.w	r3, r3, #68	; 0x44
   10b70:	2b44      	cmp	r3, #68	; 0x44
   10b72:	d000      	beq.n	10b76 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   10b74:	4770      	bx	lr
		conv->flag_zero = false;
   10b76:	f89c 3000 	ldrb.w	r3, [ip]
   10b7a:	f36f 1386 	bfc	r3, #6, #1
   10b7e:	f88c 3000 	strb.w	r3, [ip]
   10b82:	e7f7      	b.n	10b74 <extract_flags+0xb4>

00010b84 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   10b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b88:	4605      	mov	r5, r0
   10b8a:	460c      	mov	r4, r1
   10b8c:	4693      	mov	fp, r2
   10b8e:	4699      	mov	r9, r3
   10b90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
   10b92:	78d0      	ldrb	r0, [r2, #3]
   10b94:	4b25      	ldr	r3, [pc, #148]	; (10c2c <encode_uint+0xa8>)
   10b96:	f813 a000 	ldrb.w	sl, [r3, r0]
   10b9a:	f00a 0a03 	and.w	sl, sl, #3
	const unsigned int radix = conversion_radix(conv->specifier);
   10b9e:	f00f feb2 	bl	20906 <conversion_radix>
   10ba2:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   10ba4:	e015      	b.n	10bd2 <encode_uint+0x4e>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   10ba6:	f1ba 0f01 	cmp.w	sl, #1
   10baa:	d020      	beq.n	10bee <encode_uint+0x6a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10bac:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10bae:	3257      	adds	r2, #87	; 0x57
   10bb0:	b2d2      	uxtb	r2, r2
   10bb2:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   10bb6:	4632      	mov	r2, r6
   10bb8:	4643      	mov	r3, r8
   10bba:	4628      	mov	r0, r5
   10bbc:	4621      	mov	r1, r4
   10bbe:	f7f1 f8c3 	bl	1d48 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   10bc2:	42b5      	cmp	r5, r6
   10bc4:	f174 0400 	sbcs.w	r4, r4, #0
   10bc8:	d315      	bcc.n	10bf6 <encode_uint+0x72>
   10bca:	454f      	cmp	r7, r9
   10bcc:	d913      	bls.n	10bf6 <encode_uint+0x72>
		value /= radix;
   10bce:	4605      	mov	r5, r0
   10bd0:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   10bd2:	f04f 0800 	mov.w	r8, #0
   10bd6:	4632      	mov	r2, r6
   10bd8:	4643      	mov	r3, r8
   10bda:	4628      	mov	r0, r5
   10bdc:	4621      	mov	r1, r4
   10bde:	f7f1 f8b3 	bl	1d48 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10be2:	2a09      	cmp	r2, #9
   10be4:	d8df      	bhi.n	10ba6 <encode_uint+0x22>
   10be6:	b2d2      	uxtb	r2, r2
   10be8:	3230      	adds	r2, #48	; 0x30
   10bea:	b2d2      	uxtb	r2, r2
   10bec:	e7e1      	b.n	10bb2 <encode_uint+0x2e>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10bee:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10bf0:	3237      	adds	r2, #55	; 0x37
   10bf2:	b2d2      	uxtb	r2, r2
   10bf4:	e7dd      	b.n	10bb2 <encode_uint+0x2e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   10bf6:	f89b 3000 	ldrb.w	r3, [fp]
   10bfa:	f013 0f20 	tst.w	r3, #32
   10bfe:	d003      	beq.n	10c08 <encode_uint+0x84>
		if (radix == 8) {
   10c00:	2e08      	cmp	r6, #8
   10c02:	d004      	beq.n	10c0e <encode_uint+0x8a>
			conv->altform_0 = true;
		} else if (radix == 16) {
   10c04:	2e10      	cmp	r6, #16
   10c06:	d009      	beq.n	10c1c <encode_uint+0x98>
			;
		}
	}

	return bp;
}
   10c08:	4638      	mov	r0, r7
   10c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   10c0e:	f89b 3002 	ldrb.w	r3, [fp, #2]
   10c12:	f043 0308 	orr.w	r3, r3, #8
   10c16:	f88b 3002 	strb.w	r3, [fp, #2]
   10c1a:	e7f5      	b.n	10c08 <encode_uint+0x84>
			conv->altform_0c = true;
   10c1c:	f89b 3002 	ldrb.w	r3, [fp, #2]
   10c20:	f043 0310 	orr.w	r3, r3, #16
   10c24:	f88b 3002 	strb.w	r3, [fp, #2]
   10c28:	e7ee      	b.n	10c08 <encode_uint+0x84>
   10c2a:	bf00      	nop
   10c2c:	00026db9 	.word	0x00026db9

00010c30 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
   10c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c34:	b087      	sub	sp, #28
   10c36:	ec55 4b10 	vmov	r4, r5, d0
   10c3a:	4607      	mov	r7, r0
   10c3c:	460e      	mov	r6, r1
   10c3e:	4699      	mov	r9, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
   10c40:	4621      	mov	r1, r4
   10c42:	1e2b      	subs	r3, r5, #0
   10c44:	db06      	blt.n	10c54 <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
   10c46:	7800      	ldrb	r0, [r0, #0]
   10c48:	f010 0f08 	tst.w	r0, #8
   10c4c:	d012      	beq.n	10c74 <encode_float+0x44>
		*sign = '+';
   10c4e:	202b      	movs	r0, #43	; 0x2b
   10c50:	7010      	strb	r0, [r2, #0]
   10c52:	e001      	b.n	10c58 <encode_float+0x28>
		*sign = '-';
   10c54:	202d      	movs	r0, #45	; 0x2d
   10c56:	7010      	strb	r0, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
   10c58:	f897 8003 	ldrb.w	r8, [r7, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   10c5c:	f3c3 540a 	ubfx	r4, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   10c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
   10c64:	9104      	str	r1, [sp, #16]
   10c66:	9305      	str	r3, [sp, #20]
	bool is_subnormal = (expo == 0) && (fract != 0);
   10c68:	b954      	cbnz	r4, 10c80 <encode_float+0x50>
   10c6a:	ea51 0203 	orrs.w	r2, r1, r3
   10c6e:	d127      	bne.n	10cc0 <encode_float+0x90>
   10c70:	2200      	movs	r2, #0
   10c72:	e006      	b.n	10c82 <encode_float+0x52>
	} else if (conv->flag_space) {
   10c74:	f010 0f10 	tst.w	r0, #16
   10c78:	d0ee      	beq.n	10c58 <encode_float+0x28>
		*sign = ' ';
   10c7a:	2020      	movs	r0, #32
   10c7c:	7010      	strb	r0, [r2, #0]
   10c7e:	e7eb      	b.n	10c58 <encode_float+0x28>
	bool is_subnormal = (expo == 0) && (fract != 0);
   10c80:	2200      	movs	r2, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   10c82:	f240 70ff 	movw	r0, #2047	; 0x7ff
   10c86:	4284      	cmp	r4, r0
   10c88:	d01c      	beq.n	10cc4 <encode_float+0x94>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
   10c8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   10c8e:	d05d      	beq.n	10d4c <encode_float+0x11c>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
   10c90:	02db      	lsls	r3, r3, #11
   10c92:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   10c96:	02c9      	lsls	r1, r1, #11
   10c98:	9104      	str	r1, [sp, #16]
   10c9a:	9305      	str	r3, [sp, #20]
	fract &= ~SIGN_MASK;
   10c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   10ca0:	9305      	str	r3, [sp, #20]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
   10ca2:	4321      	orrs	r1, r4
   10ca4:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
   10ca8:	4319      	orrs	r1, r3
   10caa:	d007      	beq.n	10cbc <encode_float+0x8c>
		if (is_subnormal) {
   10cac:	2a00      	cmp	r2, #0
   10cae:	d151      	bne.n	10d54 <encode_float+0x124>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   10cb0:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
   10cb4:	9b05      	ldr	r3, [sp, #20]
   10cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10cba:	9305      	str	r3, [sp, #20]
		c = 'f';
   10cbc:	2500      	movs	r5, #0
   10cbe:	e06a      	b.n	10d96 <encode_float+0x166>
	bool is_subnormal = (expo == 0) && (fract != 0);
   10cc0:	2201      	movs	r2, #1
   10cc2:	e7de      	b.n	10c82 <encode_float+0x52>
		if (fract == 0) {
   10cc4:	430b      	orrs	r3, r1
   10cc6:	d124      	bne.n	10d12 <encode_float+0xe2>
			if (isupper((unsigned char)c) != 0) {
   10cc8:	4b9d      	ldr	r3, [pc, #628]	; (10f40 <encode_float+0x310>)
   10cca:	f813 3008 	ldrb.w	r3, [r3, r8]
   10cce:	f003 0303 	and.w	r3, r3, #3
   10cd2:	2b01      	cmp	r3, #1
   10cd4:	d011      	beq.n	10cfa <encode_float+0xca>
				*buf++ = 'i';
   10cd6:	2369      	movs	r3, #105	; 0x69
   10cd8:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'n';
   10cdc:	236e      	movs	r3, #110	; 0x6e
   10cde:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'f';
   10ce2:	f109 0203 	add.w	r2, r9, #3
   10ce6:	2366      	movs	r3, #102	; 0x66
   10ce8:	f889 3002 	strb.w	r3, [r9, #2]
		conv->flag_zero = false;
   10cec:	783b      	ldrb	r3, [r7, #0]
   10cee:	f36f 1386 	bfc	r3, #6, #1
   10cf2:	703b      	strb	r3, [r7, #0]
		*bpe = buf;
   10cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10cf6:	601a      	str	r2, [r3, #0]
		return bps;
   10cf8:	e178      	b.n	10fec <encode_float+0x3bc>
				*buf++ = 'I';
   10cfa:	2349      	movs	r3, #73	; 0x49
   10cfc:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'N';
   10d00:	234e      	movs	r3, #78	; 0x4e
   10d02:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'F';
   10d06:	f109 0203 	add.w	r2, r9, #3
   10d0a:	2346      	movs	r3, #70	; 0x46
   10d0c:	f889 3002 	strb.w	r3, [r9, #2]
   10d10:	e7ec      	b.n	10cec <encode_float+0xbc>
			if (isupper((unsigned char)c) != 0) {
   10d12:	4b8b      	ldr	r3, [pc, #556]	; (10f40 <encode_float+0x310>)
   10d14:	f813 3008 	ldrb.w	r3, [r3, r8]
   10d18:	f003 0303 	and.w	r3, r3, #3
   10d1c:	2b01      	cmp	r3, #1
   10d1e:	d00a      	beq.n	10d36 <encode_float+0x106>
				*buf++ = 'n';
   10d20:	236e      	movs	r3, #110	; 0x6e
   10d22:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'a';
   10d26:	2261      	movs	r2, #97	; 0x61
   10d28:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'n';
   10d2c:	f109 0203 	add.w	r2, r9, #3
   10d30:	f889 3002 	strb.w	r3, [r9, #2]
   10d34:	e7da      	b.n	10cec <encode_float+0xbc>
				*buf++ = 'N';
   10d36:	234e      	movs	r3, #78	; 0x4e
   10d38:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'A';
   10d3c:	2241      	movs	r2, #65	; 0x41
   10d3e:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'N';
   10d42:	f109 0203 	add.w	r2, r9, #3
   10d46:	f889 3002 	strb.w	r3, [r9, #2]
   10d4a:	e7cf      	b.n	10cec <encode_float+0xbc>
		c = 'f';
   10d4c:	f04f 0866 	mov.w	r8, #102	; 0x66
   10d50:	e79e      	b.n	10c90 <encode_float+0x60>
				expo--;
   10d52:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   10d54:	9b04      	ldr	r3, [sp, #16]
   10d56:	9a05      	ldr	r2, [sp, #20]
   10d58:	18db      	adds	r3, r3, r3
   10d5a:	4152      	adcs	r2, r2
   10d5c:	9304      	str	r3, [sp, #16]
   10d5e:	9205      	str	r2, [sp, #20]
   10d60:	2a00      	cmp	r2, #0
   10d62:	daf6      	bge.n	10d52 <encode_float+0x122>
   10d64:	e7a4      	b.n	10cb0 <encode_float+0x80>
		/*
		 * Make room to allow a multiplication by 5 without overflow.
		 * We test only the top part for faster code.
		 */
		do {
			fract >>= 1;
   10d66:	9b05      	ldr	r3, [sp, #20]
   10d68:	9a04      	ldr	r2, [sp, #16]
   10d6a:	0852      	lsrs	r2, r2, #1
   10d6c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   10d70:	085b      	lsrs	r3, r3, #1
   10d72:	9204      	str	r2, [sp, #16]
   10d74:	9305      	str	r3, [sp, #20]
			expo++;
   10d76:	4621      	mov	r1, r4
   10d78:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   10d7a:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
   10d7e:	d2f2      	bcs.n	10d66 <encode_float+0x136>

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
   10d80:	009c      	lsls	r4, r3, #2
   10d82:	ea44 7492 	orr.w	r4, r4, r2, lsr #30
   10d86:	0090      	lsls	r0, r2, #2
   10d88:	1880      	adds	r0, r0, r2
   10d8a:	eb43 0304 	adc.w	r3, r3, r4
   10d8e:	9004      	str	r0, [sp, #16]
   10d90:	9305      	str	r3, [sp, #20]
		expo++;
   10d92:	1c8c      	adds	r4, r1, #2
		decexp--;
   10d94:	3d01      	subs	r5, #1
	while (expo < -2) {
   10d96:	f114 0f02 	cmn.w	r4, #2
   10d9a:	dbe4      	blt.n	10d66 <encode_float+0x136>
   10d9c:	e014      	b.n	10dc8 <encode_float+0x198>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
   10d9e:	9b04      	ldr	r3, [sp, #16]
   10da0:	3302      	adds	r3, #2
   10da2:	9a05      	ldr	r2, [sp, #20]
   10da4:	f142 0200 	adc.w	r2, r2, #0
   10da8:	9304      	str	r3, [sp, #16]
   10daa:	9205      	str	r2, [sp, #20]
		_ldiv5(&fract);
   10dac:	a804      	add	r0, sp, #16
   10dae:	f00f fd64 	bl	2087a <_ldiv5>
		expo--;
   10db2:	3c01      	subs	r4, #1
		decexp++;
   10db4:	3501      	adds	r5, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
   10db6:	9a04      	ldr	r2, [sp, #16]
   10db8:	9b05      	ldr	r3, [sp, #20]
   10dba:	1892      	adds	r2, r2, r2
   10dbc:	415b      	adcs	r3, r3
   10dbe:	9204      	str	r2, [sp, #16]
   10dc0:	9305      	str	r3, [sp, #20]
			expo--;
   10dc2:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
   10dc4:	2b00      	cmp	r3, #0
   10dc6:	daf6      	bge.n	10db6 <encode_float+0x186>
	while (expo > 0) {
   10dc8:	2c00      	cmp	r4, #0
   10dca:	dce8      	bgt.n	10d9e <encode_float+0x16e>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
   10dcc:	f1c4 0104 	rsb	r1, r4, #4
   10dd0:	9a05      	ldr	r2, [sp, #20]
   10dd2:	341c      	adds	r4, #28
   10dd4:	f1a1 0020 	sub.w	r0, r1, #32
   10dd8:	9b04      	ldr	r3, [sp, #16]
   10dda:	40cb      	lsrs	r3, r1
   10ddc:	fa02 f404 	lsl.w	r4, r2, r4
   10de0:	4323      	orrs	r3, r4
   10de2:	fa22 f000 	lsr.w	r0, r2, r0
   10de6:	4303      	orrs	r3, r0
   10de8:	40ca      	lsrs	r2, r1
   10dea:	9304      	str	r3, [sp, #16]
   10dec:	9205      	str	r2, [sp, #20]

	if ((c == 'g') || (c == 'G')) {
   10dee:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   10df2:	d014      	beq.n	10e1e <encode_float+0x1ee>
   10df4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   10df8:	d011      	beq.n	10e1e <encode_float+0x1ee>
	bool prune_zero = false;
   10dfa:	f04f 0b00 	mov.w	fp, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
   10dfe:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   10e02:	d02a      	beq.n	10e5a <encode_float+0x22a>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
   10e04:	f106 0a01 	add.w	sl, r6, #1
	}

	int digit_count = 16;
   10e08:	2310      	movs	r3, #16
   10e0a:	9303      	str	r3, [sp, #12]

	if (decimals > 16) {
   10e0c:	459a      	cmp	sl, r3
   10e0e:	dd00      	ble.n	10e12 <encode_float+0x1e2>
		decimals = 16;
   10e10:	469a      	mov	sl, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
   10e12:	2200      	movs	r2, #0
   10e14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   10e18:	e9cd 2300 	strd	r2, r3, [sp]
	while (decimals--) {
   10e1c:	e029      	b.n	10e72 <encode_float+0x242>
		if (decexp < (-4 + 1) || decexp > precision) {
   10e1e:	f115 0f03 	cmn.w	r5, #3
   10e22:	db01      	blt.n	10e28 <encode_float+0x1f8>
   10e24:	42b5      	cmp	r5, r6
   10e26:	dd11      	ble.n	10e4c <encode_float+0x21c>
			c += 'e' - 'g';  /* e or E */
   10e28:	f1a8 0802 	sub.w	r8, r8, #2
   10e2c:	fa5f f888 	uxtb.w	r8, r8
			if (precision > 0) {
   10e30:	2e00      	cmp	r6, #0
   10e32:	dd00      	ble.n	10e36 <encode_float+0x206>
				precision--;
   10e34:	3e01      	subs	r6, #1
		if (!conv->flag_hash && (precision > 0)) {
   10e36:	783b      	ldrb	r3, [r7, #0]
   10e38:	f3c3 1b40 	ubfx	fp, r3, #5, #1
   10e3c:	f013 0f20 	tst.w	r3, #32
   10e40:	d108      	bne.n	10e54 <encode_float+0x224>
   10e42:	2e00      	cmp	r6, #0
   10e44:	dddb      	ble.n	10dfe <encode_float+0x1ce>
			prune_zero = true;
   10e46:	f04f 0b01 	mov.w	fp, #1
   10e4a:	e7d8      	b.n	10dfe <encode_float+0x1ce>
			precision -= decexp;
   10e4c:	1b76      	subs	r6, r6, r5
			c = 'f';
   10e4e:	f04f 0866 	mov.w	r8, #102	; 0x66
   10e52:	e7f0      	b.n	10e36 <encode_float+0x206>
	bool prune_zero = false;
   10e54:	f04f 0b00 	mov.w	fp, #0
   10e58:	e7d1      	b.n	10dfe <encode_float+0x1ce>
		if (decimals < 0) {
   10e5a:	eb15 0a06 	adds.w	sl, r5, r6
   10e5e:	d5d3      	bpl.n	10e08 <encode_float+0x1d8>
	int digit_count = 16;
   10e60:	2310      	movs	r3, #16
   10e62:	9303      	str	r3, [sp, #12]
			decimals = 0;
   10e64:	f04f 0a00 	mov.w	sl, #0
   10e68:	e7d3      	b.n	10e12 <encode_float+0x1e2>
		_ldiv10(&round);
   10e6a:	4668      	mov	r0, sp
   10e6c:	f00f fd21 	bl	208b2 <_ldiv10>
	while (decimals--) {
   10e70:	46a2      	mov	sl, r4
   10e72:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
   10e76:	f1ba 0f00 	cmp.w	sl, #0
   10e7a:	d1f6      	bne.n	10e6a <encode_float+0x23a>
	}
	fract += round;
   10e7c:	9b04      	ldr	r3, [sp, #16]
   10e7e:	9a00      	ldr	r2, [sp, #0]
   10e80:	189b      	adds	r3, r3, r2
   10e82:	9a05      	ldr	r2, [sp, #20]
   10e84:	9901      	ldr	r1, [sp, #4]
   10e86:	eb42 0201 	adc.w	r2, r2, r1
   10e8a:	9304      	str	r3, [sp, #16]
   10e8c:	9205      	str	r2, [sp, #20]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
   10e8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10e92:	4299      	cmp	r1, r3
   10e94:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
   10e98:	4193      	sbcs	r3, r2
   10e9a:	d306      	bcc.n	10eaa <encode_float+0x27a>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
   10e9c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   10ea0:	d138      	bne.n	10f14 <encode_float+0x2e4>
		if (decexp > 0) {
   10ea2:	2d00      	cmp	r5, #0
   10ea4:	dd31      	ble.n	10f0a <encode_float+0x2da>
	char *buf = bps;
   10ea6:	464c      	mov	r4, r9
   10ea8:	e00b      	b.n	10ec2 <encode_float+0x292>
		_ldiv10(&fract);
   10eaa:	a804      	add	r0, sp, #16
   10eac:	f00f fd01 	bl	208b2 <_ldiv10>
		decexp++;
   10eb0:	3501      	adds	r5, #1
   10eb2:	e7f3      	b.n	10e9c <encode_float+0x26c>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
   10eb4:	a903      	add	r1, sp, #12
   10eb6:	a804      	add	r0, sp, #16
   10eb8:	f00f fd07 	bl	208ca <_get_digit>
   10ebc:	f804 0b01 	strb.w	r0, [r4], #1
				decexp--;
   10ec0:	3d01      	subs	r5, #1
			while (decexp > 0 && digit_count > 0) {
   10ec2:	2d00      	cmp	r5, #0
   10ec4:	dd02      	ble.n	10ecc <encode_float+0x29c>
   10ec6:	9b03      	ldr	r3, [sp, #12]
   10ec8:	2b00      	cmp	r3, #0
   10eca:	dcf3      	bgt.n	10eb4 <encode_float+0x284>
			}

			conv->pad0_value = decexp;
   10ecc:	607d      	str	r5, [r7, #4]

			decexp = 0;
   10ece:	4655      	mov	r5, sl
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   10ed0:	783b      	ldrb	r3, [r7, #0]
   10ed2:	f013 0f20 	tst.w	r3, #32
   10ed6:	d101      	bne.n	10edc <encode_float+0x2ac>
   10ed8:	2e00      	cmp	r6, #0
   10eda:	dd02      	ble.n	10ee2 <encode_float+0x2b2>
			*buf++ = '.';
   10edc:	232e      	movs	r3, #46	; 0x2e
   10ede:	f804 3b01 	strb.w	r3, [r4], #1
		}

		if (decexp < 0 && precision > 0) {
   10ee2:	2d00      	cmp	r5, #0
   10ee4:	da35      	bge.n	10f52 <encode_float+0x322>
   10ee6:	2e00      	cmp	r6, #0
   10ee8:	dd33      	ble.n	10f52 <encode_float+0x322>
			conv->pad0_value = -decexp;
   10eea:	426b      	negs	r3, r5
   10eec:	607b      	str	r3, [r7, #4]
			if (conv->pad0_value > precision) {
   10eee:	429e      	cmp	r6, r3
   10ef0:	da00      	bge.n	10ef4 <encode_float+0x2c4>
				conv->pad0_value = precision;
   10ef2:	607e      	str	r6, [r7, #4]
			}

			precision -= conv->pad0_value;
   10ef4:	687b      	ldr	r3, [r7, #4]
   10ef6:	1af6      	subs	r6, r6, r3
			conv->pad_postdp = (conv->pad0_value > 0);
   10ef8:	2b00      	cmp	r3, #0
   10efa:	bfd4      	ite	le
   10efc:	2300      	movle	r3, #0
   10efe:	2301      	movgt	r3, #1
   10f00:	78ba      	ldrb	r2, [r7, #2]
   10f02:	f363 1245 	bfi	r2, r3, #5, #1
   10f06:	70ba      	strb	r2, [r7, #2]
   10f08:	e023      	b.n	10f52 <encode_float+0x322>
			*buf++ = '0';
   10f0a:	464c      	mov	r4, r9
   10f0c:	2330      	movs	r3, #48	; 0x30
   10f0e:	f804 3b01 	strb.w	r3, [r4], #1
   10f12:	e7dd      	b.n	10ed0 <encode_float+0x2a0>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
   10f14:	a903      	add	r1, sp, #12
   10f16:	a804      	add	r0, sp, #16
   10f18:	f00f fcd7 	bl	208ca <_get_digit>
   10f1c:	464c      	mov	r4, r9
   10f1e:	f804 0b01 	strb.w	r0, [r4], #1
		if (*buf++ != '0') {
   10f22:	2830      	cmp	r0, #48	; 0x30
   10f24:	d000      	beq.n	10f28 <encode_float+0x2f8>
			decexp--;
   10f26:	3d01      	subs	r5, #1
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   10f28:	783b      	ldrb	r3, [r7, #0]
   10f2a:	f013 0f20 	tst.w	r3, #32
   10f2e:	d101      	bne.n	10f34 <encode_float+0x304>
   10f30:	2e00      	cmp	r6, #0
   10f32:	dd0e      	ble.n	10f52 <encode_float+0x322>
			*buf++ = '.';
   10f34:	f109 0402 	add.w	r4, r9, #2
   10f38:	232e      	movs	r3, #46	; 0x2e
   10f3a:	f889 3001 	strb.w	r3, [r9, #1]
   10f3e:	e008      	b.n	10f52 <encode_float+0x322>
   10f40:	00026db9 	.word	0x00026db9
		}
	}

	while (precision > 0 && digit_count > 0) {
		*buf++ = _get_digit(&fract, &digit_count);
   10f44:	a903      	add	r1, sp, #12
   10f46:	a804      	add	r0, sp, #16
   10f48:	f00f fcbf 	bl	208ca <_get_digit>
   10f4c:	f804 0b01 	strb.w	r0, [r4], #1
		precision--;
   10f50:	3e01      	subs	r6, #1
	while (precision > 0 && digit_count > 0) {
   10f52:	2e00      	cmp	r6, #0
   10f54:	dd02      	ble.n	10f5c <encode_float+0x32c>
   10f56:	9b03      	ldr	r3, [sp, #12]
   10f58:	2b00      	cmp	r3, #0
   10f5a:	dcf3      	bgt.n	10f44 <encode_float+0x314>
	}

	conv->pad0_pre_exp = precision;
   10f5c:	60be      	str	r6, [r7, #8]

	if (prune_zero) {
   10f5e:	f1bb 0f00 	cmp.w	fp, #0
   10f62:	d009      	beq.n	10f78 <encode_float+0x348>
		conv->pad0_pre_exp = 0;
   10f64:	2300      	movs	r3, #0
   10f66:	60bb      	str	r3, [r7, #8]
		while (*--buf == '0') {
   10f68:	4623      	mov	r3, r4
   10f6a:	461c      	mov	r4, r3
   10f6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   10f70:	2a30      	cmp	r2, #48	; 0x30
   10f72:	d0fa      	beq.n	10f6a <encode_float+0x33a>
			;
		}
		if (*buf != '.') {
   10f74:	2a2e      	cmp	r2, #46	; 0x2e
   10f76:	d03d      	beq.n	10ff4 <encode_float+0x3c4>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
   10f78:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   10f7c:	d002      	beq.n	10f84 <encode_float+0x354>
   10f7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   10f82:	d126      	bne.n	10fd2 <encode_float+0x3a2>
		*buf++ = c;
   10f84:	f884 8000 	strb.w	r8, [r4]
		if (decexp < 0) {
   10f88:	2d00      	cmp	r5, #0
   10f8a:	db35      	blt.n	10ff8 <encode_float+0x3c8>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
   10f8c:	1ca2      	adds	r2, r4, #2
   10f8e:	232b      	movs	r3, #43	; 0x2b
   10f90:	7063      	strb	r3, [r4, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
   10f92:	2d63      	cmp	r5, #99	; 0x63
   10f94:	dd0c      	ble.n	10fb0 <encode_float+0x380>
			*buf++ = (decexp / 100) + '0';
   10f96:	491e      	ldr	r1, [pc, #120]	; (11010 <encode_float+0x3e0>)
   10f98:	fb81 3105 	smull	r3, r1, r1, r5
   10f9c:	17eb      	asrs	r3, r5, #31
   10f9e:	ebc3 1361 	rsb	r3, r3, r1, asr #5
   10fa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
   10fa6:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
   10faa:	2164      	movs	r1, #100	; 0x64
   10fac:	fb01 5513 	mls	r5, r1, r3, r5
		}

		*buf++ = (decexp / 10) + '0';
   10fb0:	4918      	ldr	r1, [pc, #96]	; (11014 <encode_float+0x3e4>)
   10fb2:	fb81 3105 	smull	r3, r1, r1, r5
   10fb6:	17eb      	asrs	r3, r5, #31
   10fb8:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   10fbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
   10fc0:	4614      	mov	r4, r2
   10fc2:	f804 1b02 	strb.w	r1, [r4], #2
		*buf++ = (decexp % 10) + '0';
   10fc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10fca:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
   10fce:	3330      	adds	r3, #48	; 0x30
   10fd0:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
   10fd2:	687b      	ldr	r3, [r7, #4]
		|| (conv->pad0_pre_exp > 0);
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	dd14      	ble.n	11002 <encode_float+0x3d2>
   10fd8:	f04f 0a01 	mov.w	sl, #1
	conv->pad_fp = (conv->pad0_value > 0)
   10fdc:	78bb      	ldrb	r3, [r7, #2]
   10fde:	f36a 1386 	bfi	r3, sl, #6, #1
   10fe2:	70bb      	strb	r3, [r7, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
   10fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10fe6:	601c      	str	r4, [r3, #0]
	*buf = 0;
   10fe8:	2300      	movs	r3, #0
   10fea:	7023      	strb	r3, [r4, #0]
	return bps;
}
   10fec:	4648      	mov	r0, r9
   10fee:	b007      	add	sp, #28
   10ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
   10ff4:	461c      	mov	r4, r3
   10ff6:	e7bf      	b.n	10f78 <encode_float+0x348>
			decexp = -decexp;
   10ff8:	426d      	negs	r5, r5
			*buf++ = '-';
   10ffa:	1ca2      	adds	r2, r4, #2
   10ffc:	232d      	movs	r3, #45	; 0x2d
   10ffe:	7063      	strb	r3, [r4, #1]
   11000:	e7c7      	b.n	10f92 <encode_float+0x362>
		|| (conv->pad0_pre_exp > 0);
   11002:	68bb      	ldr	r3, [r7, #8]
   11004:	2b00      	cmp	r3, #0
   11006:	dde9      	ble.n	10fdc <encode_float+0x3ac>
   11008:	f04f 0a01 	mov.w	sl, #1
   1100c:	e7e6      	b.n	10fdc <encode_float+0x3ac>
   1100e:	bf00      	nop
   11010:	51eb851f 	.word	0x51eb851f
   11014:	66666667 	.word	0x66666667

00011018 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1101c:	b095      	sub	sp, #84	; 0x54
   1101e:	4606      	mov	r6, r0
   11020:	460d      	mov	r5, r1
   11022:	4690      	mov	r8, r2
   11024:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11026:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11028:	f898 0000 	ldrb.w	r0, [r8]
   1102c:	2800      	cmp	r0, #0
   1102e:	f000 8345 	beq.w	116bc <z_cbvprintf_impl+0x6a4>
		if (*fp != '%') {
   11032:	2825      	cmp	r0, #37	; 0x25
   11034:	d008      	beq.n	11048 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   11036:	f108 0801 	add.w	r8, r8, #1
   1103a:	4629      	mov	r1, r5
   1103c:	47b0      	blx	r6
   1103e:	2800      	cmp	r0, #0
   11040:	f2c0 833d 	blt.w	116be <z_cbvprintf_impl+0x6a6>
   11044:	3401      	adds	r4, #1
			continue;
   11046:	e7ef      	b.n	11028 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   11048:	2300      	movs	r3, #0
   1104a:	9306      	str	r3, [sp, #24]
   1104c:	9307      	str	r3, [sp, #28]
   1104e:	9308      	str	r3, [sp, #32]
   11050:	9309      	str	r3, [sp, #36]	; 0x24
   11052:	930a      	str	r3, [sp, #40]	; 0x28
   11054:	930b      	str	r3, [sp, #44]	; 0x2c
		union argument_value *const value = &state.value;
		const char *sp = fp;
		int width = -1;
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
   11056:	f10d 024d 	add.w	r2, sp, #77	; 0x4d
   1105a:	9205      	str	r2, [sp, #20]
		char sign = 0;
   1105c:	f88d 3013 	strb.w	r3, [sp, #19]

		fp = extract_conversion(conv, sp);
   11060:	4641      	mov	r1, r8
   11062:	a808      	add	r0, sp, #32
   11064:	f00f fbe7 	bl	20836 <extract_conversion>
   11068:	4681      	mov	r9, r0

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   1106a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1106e:	f013 0f01 	tst.w	r3, #1
   11072:	f000 809e 	beq.w	111b2 <z_cbvprintf_impl+0x19a>
			width = va_arg(ap, int);
   11076:	9b03      	ldr	r3, [sp, #12]
   11078:	1d1a      	adds	r2, r3, #4
   1107a:	9203      	str	r2, [sp, #12]
   1107c:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   1107e:	2f00      	cmp	r7, #0
   11080:	f2c0 808f 	blt.w	111a2 <z_cbvprintf_impl+0x18a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   11084:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11088:	f013 0f04 	tst.w	r3, #4
   1108c:	f000 80a3 	beq.w	111d6 <z_cbvprintf_impl+0x1be>
			int arg = va_arg(ap, int);
   11090:	9b03      	ldr	r3, [sp, #12]
   11092:	1d1a      	adds	r2, r3, #4
   11094:	9203      	str	r2, [sp, #12]
   11096:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   1109a:	f1ba 0f00 	cmp.w	sl, #0
   1109e:	f2c0 8091 	blt.w	111c4 <z_cbvprintf_impl+0x1ac>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   110a2:	2300      	movs	r3, #0
   110a4:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   110a6:	930a      	str	r3, [sp, #40]	; 0x28

		/* FP conversion requires knowing the precision. */
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
		    && (conv->specifier_cat == SPECIFIER_FP)
   110a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   110ac:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   110b0:	2b04      	cmp	r3, #4
   110b2:	f000 8099 	beq.w	111e8 <z_cbvprintf_impl+0x1d0>
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   110b6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   110ba:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   110be:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   110c2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   110c6:	2b01      	cmp	r3, #1
   110c8:	f000 809e 	beq.w	11208 <z_cbvprintf_impl+0x1f0>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   110cc:	2b02      	cmp	r3, #2
   110ce:	f000 80e3 	beq.w	11298 <z_cbvprintf_impl+0x280>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   110d2:	2b04      	cmp	r3, #4
   110d4:	f000 8134 	beq.w	11340 <z_cbvprintf_impl+0x328>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   110d8:	2b03      	cmp	r3, #3
   110da:	f000 814b 	beq.w	11374 <z_cbvprintf_impl+0x35c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   110de:	f89d 2020 	ldrb.w	r2, [sp, #32]
   110e2:	f012 0f03 	tst.w	r2, #3
   110e6:	f040 814b 	bne.w	11380 <z_cbvprintf_impl+0x368>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   110ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   110ee:	3b25      	subs	r3, #37	; 0x25
   110f0:	2b53      	cmp	r3, #83	; 0x53
   110f2:	f200 81fc 	bhi.w	114ee <z_cbvprintf_impl+0x4d6>
   110f6:	e8df f013 	tbh	[pc, r3, lsl #1]
   110fa:	014f      	.short	0x014f
   110fc:	01fa01fa 	.word	0x01fa01fa
   11100:	01fa01fa 	.word	0x01fa01fa
   11104:	01fa01fa 	.word	0x01fa01fa
   11108:	01fa01fa 	.word	0x01fa01fa
   1110c:	01fa01fa 	.word	0x01fa01fa
   11110:	01fa01fa 	.word	0x01fa01fa
   11114:	01fa01fa 	.word	0x01fa01fa
   11118:	01fa01fa 	.word	0x01fa01fa
   1111c:	01fa01fa 	.word	0x01fa01fa
   11120:	01fa01fa 	.word	0x01fa01fa
   11124:	01fa01fa 	.word	0x01fa01fa
   11128:	01fa01fa 	.word	0x01fa01fa
   1112c:	01fa01fa 	.word	0x01fa01fa
   11130:	01fc01fa 	.word	0x01fc01fa
   11134:	01fa01fa 	.word	0x01fa01fa
   11138:	01fc01fa 	.word	0x01fc01fa
   1113c:	01fc01fc 	.word	0x01fc01fc
   11140:	01fa01fa 	.word	0x01fa01fa
   11144:	01fa01fa 	.word	0x01fa01fa
   11148:	01fa01fa 	.word	0x01fa01fa
   1114c:	01fa01fa 	.word	0x01fa01fa
   11150:	01fa01fa 	.word	0x01fa01fa
   11154:	01fa01fa 	.word	0x01fa01fa
   11158:	01fa01fa 	.word	0x01fa01fa
   1115c:	01fa01fa 	.word	0x01fa01fa
   11160:	01fa01b1 	.word	0x01fa01b1
   11164:	01fa01fa 	.word	0x01fa01fa
   11168:	01fa01fa 	.word	0x01fa01fa
   1116c:	01fa01fa 	.word	0x01fa01fa
   11170:	01fc01fa 	.word	0x01fc01fa
   11174:	019c01fa 	.word	0x019c01fa
   11178:	01fc01a5 	.word	0x01fc01a5
   1117c:	01fc01fc 	.word	0x01fc01fc
   11180:	01a501fa 	.word	0x01a501fa
   11184:	01fa01fa 	.word	0x01fa01fa
   11188:	01fa01fa 	.word	0x01fa01fa
   1118c:	01b101f5 	.word	0x01b101f5
   11190:	01fa01dc 	.word	0x01fa01dc
   11194:	015701fa 	.word	0x015701fa
   11198:	01b101fa 	.word	0x01b101fa
   1119c:	01fa01fa 	.word	0x01fa01fa
   111a0:	01b1      	.short	0x01b1
				conv->flag_dash = true;
   111a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   111a6:	f043 0304 	orr.w	r3, r3, #4
   111aa:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   111ae:	427f      	negs	r7, r7
   111b0:	e768      	b.n	11084 <z_cbvprintf_impl+0x6c>
		} else if (conv->width_present) {
   111b2:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   111b6:	2b00      	cmp	r3, #0
   111b8:	db02      	blt.n	111c0 <z_cbvprintf_impl+0x1a8>
		int width = -1;
   111ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   111be:	e761      	b.n	11084 <z_cbvprintf_impl+0x6c>
			width = conv->width_value;
   111c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   111c2:	e75f      	b.n	11084 <z_cbvprintf_impl+0x6c>
				conv->prec_present = false;
   111c4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   111c8:	f36f 0341 	bfc	r3, #1, #1
   111cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   111d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   111d4:	e765      	b.n	110a2 <z_cbvprintf_impl+0x8a>
		} else if (conv->prec_present) {
   111d6:	f013 0f02 	tst.w	r3, #2
   111da:	d002      	beq.n	111e2 <z_cbvprintf_impl+0x1ca>
			precision = conv->prec_value;
   111dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   111e0:	e75f      	b.n	110a2 <z_cbvprintf_impl+0x8a>
		int precision = -1;
   111e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   111e6:	e75c      	b.n	110a2 <z_cbvprintf_impl+0x8a>
		    && !conv->prec_present) {
   111e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   111ec:	f013 0f02 	tst.w	r3, #2
   111f0:	f47f af61 	bne.w	110b6 <z_cbvprintf_impl+0x9e>
			if (conv->specifier_a) {
   111f4:	f99d 3021 	ldrsb.w	r3, [sp, #33]	; 0x21
   111f8:	2b00      	cmp	r3, #0
   111fa:	db02      	blt.n	11202 <z_cbvprintf_impl+0x1ea>
				precision = 6;
   111fc:	f04f 0a06 	mov.w	sl, #6
   11200:	e759      	b.n	110b6 <z_cbvprintf_impl+0x9e>
				precision = FRACTION_HEX;
   11202:	f04f 0a0d 	mov.w	sl, #13
   11206:	e756      	b.n	110b6 <z_cbvprintf_impl+0x9e>
			switch (length_mod) {
   11208:	1ed3      	subs	r3, r2, #3
   1120a:	2b04      	cmp	r3, #4
   1120c:	d804      	bhi.n	11218 <z_cbvprintf_impl+0x200>
   1120e:	e8df f003 	tbb	[pc, r3]
   11212:	1d0b      	.short	0x1d0b
   11214:	3529      	.short	0x3529
   11216:	35          	.byte	0x35
   11217:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11218:	9b03      	ldr	r3, [sp, #12]
   1121a:	1d19      	adds	r1, r3, #4
   1121c:	9103      	str	r1, [sp, #12]
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	17d9      	asrs	r1, r3, #31
   11222:	9306      	str	r3, [sp, #24]
   11224:	9107      	str	r1, [sp, #28]
				break;
   11226:	e006      	b.n	11236 <z_cbvprintf_impl+0x21e>
					value->sint = va_arg(ap, long);
   11228:	9b03      	ldr	r3, [sp, #12]
   1122a:	1d19      	adds	r1, r3, #4
   1122c:	9103      	str	r1, [sp, #12]
   1122e:	681b      	ldr	r3, [r3, #0]
   11230:	17d9      	asrs	r1, r3, #31
   11232:	9306      	str	r3, [sp, #24]
   11234:	9107      	str	r1, [sp, #28]
			if (length_mod == LENGTH_HH) {
   11236:	2a01      	cmp	r2, #1
   11238:	d028      	beq.n	1128c <z_cbvprintf_impl+0x274>
			} else if (length_mod == LENGTH_H) {
   1123a:	2a02      	cmp	r2, #2
   1123c:	f47f af4f 	bne.w	110de <z_cbvprintf_impl+0xc6>
				value->sint = (short)value->sint;
   11240:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   11244:	17da      	asrs	r2, r3, #31
   11246:	9306      	str	r3, [sp, #24]
   11248:	9207      	str	r2, [sp, #28]
   1124a:	e748      	b.n	110de <z_cbvprintf_impl+0xc6>
					(sint_value_type)va_arg(ap, long long);
   1124c:	9b03      	ldr	r3, [sp, #12]
   1124e:	3307      	adds	r3, #7
   11250:	f023 0307 	bic.w	r3, r3, #7
   11254:	f103 0108 	add.w	r1, r3, #8
   11258:	9103      	str	r1, [sp, #12]
   1125a:	e9d3 0100 	ldrd	r0, r1, [r3]
				value->sint =
   1125e:	e9cd 0106 	strd	r0, r1, [sp, #24]
				break;
   11262:	e7e8      	b.n	11236 <z_cbvprintf_impl+0x21e>
					(sint_value_type)va_arg(ap, intmax_t);
   11264:	9b03      	ldr	r3, [sp, #12]
   11266:	3307      	adds	r3, #7
   11268:	f023 0307 	bic.w	r3, r3, #7
   1126c:	f103 0108 	add.w	r1, r3, #8
   11270:	9103      	str	r1, [sp, #12]
   11272:	e9d3 0100 	ldrd	r0, r1, [r3]
				value->sint =
   11276:	e9cd 0106 	strd	r0, r1, [sp, #24]
				break;
   1127a:	e7dc      	b.n	11236 <z_cbvprintf_impl+0x21e>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1127c:	9b03      	ldr	r3, [sp, #12]
   1127e:	1d19      	adds	r1, r3, #4
   11280:	9103      	str	r1, [sp, #12]
   11282:	681b      	ldr	r3, [r3, #0]
   11284:	17d9      	asrs	r1, r3, #31
				value->sint =
   11286:	9306      	str	r3, [sp, #24]
   11288:	9107      	str	r1, [sp, #28]
				break;
   1128a:	e7d4      	b.n	11236 <z_cbvprintf_impl+0x21e>
				value->sint = (signed char)value->sint;
   1128c:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   11290:	17da      	asrs	r2, r3, #31
   11292:	9306      	str	r3, [sp, #24]
   11294:	9207      	str	r2, [sp, #28]
   11296:	e722      	b.n	110de <z_cbvprintf_impl+0xc6>
			switch (length_mod) {
   11298:	1ed3      	subs	r3, r2, #3
   1129a:	2b04      	cmp	r3, #4
   1129c:	d804      	bhi.n	112a8 <z_cbvprintf_impl+0x290>
   1129e:	e8df f003 	tbb	[pc, r3]
   112a2:	1f0b      	.short	0x1f0b
   112a4:	4135      	.short	0x4135
   112a6:	41          	.byte	0x41
   112a7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   112a8:	9b03      	ldr	r3, [sp, #12]
   112aa:	1d19      	adds	r1, r3, #4
   112ac:	9103      	str	r1, [sp, #12]
   112ae:	681b      	ldr	r3, [r3, #0]
   112b0:	9306      	str	r3, [sp, #24]
   112b2:	2300      	movs	r3, #0
   112b4:	9307      	str	r3, [sp, #28]
				break;
   112b6:	e01e      	b.n	112f6 <z_cbvprintf_impl+0x2de>
				    && (conv->specifier == 'c')) {
   112b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   112bc:	2b63      	cmp	r3, #99	; 0x63
   112be:	d007      	beq.n	112d0 <z_cbvprintf_impl+0x2b8>
					value->uint = va_arg(ap, unsigned long);
   112c0:	9b03      	ldr	r3, [sp, #12]
   112c2:	1d19      	adds	r1, r3, #4
   112c4:	9103      	str	r1, [sp, #12]
   112c6:	681b      	ldr	r3, [r3, #0]
   112c8:	9306      	str	r3, [sp, #24]
   112ca:	2300      	movs	r3, #0
   112cc:	9307      	str	r3, [sp, #28]
   112ce:	e012      	b.n	112f6 <z_cbvprintf_impl+0x2de>
					value->uint = (wchar_t)va_arg(ap,
   112d0:	9b03      	ldr	r3, [sp, #12]
   112d2:	1d19      	adds	r1, r3, #4
   112d4:	9103      	str	r1, [sp, #12]
   112d6:	681b      	ldr	r3, [r3, #0]
   112d8:	9306      	str	r3, [sp, #24]
   112da:	2300      	movs	r3, #0
   112dc:	9307      	str	r3, [sp, #28]
   112de:	e00a      	b.n	112f6 <z_cbvprintf_impl+0x2de>
					(uint_value_type)va_arg(ap,
   112e0:	9b03      	ldr	r3, [sp, #12]
   112e2:	3307      	adds	r3, #7
   112e4:	f023 0307 	bic.w	r3, r3, #7
   112e8:	f103 0108 	add.w	r1, r3, #8
   112ec:	9103      	str	r1, [sp, #12]
   112ee:	e9d3 0100 	ldrd	r0, r1, [r3]
				value->uint =
   112f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
			if (length_mod == LENGTH_HH) {
   112f6:	2a01      	cmp	r2, #1
   112f8:	d01c      	beq.n	11334 <z_cbvprintf_impl+0x31c>
			} else if (length_mod == LENGTH_H) {
   112fa:	2a02      	cmp	r2, #2
   112fc:	f47f aeef 	bne.w	110de <z_cbvprintf_impl+0xc6>
				value->uint = (unsigned short)value->uint;
   11300:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11304:	9306      	str	r3, [sp, #24]
   11306:	2300      	movs	r3, #0
   11308:	9307      	str	r3, [sp, #28]
   1130a:	e6e8      	b.n	110de <z_cbvprintf_impl+0xc6>
					(uint_value_type)va_arg(ap,
   1130c:	9b03      	ldr	r3, [sp, #12]
   1130e:	3307      	adds	r3, #7
   11310:	f023 0307 	bic.w	r3, r3, #7
   11314:	f103 0108 	add.w	r1, r3, #8
   11318:	9103      	str	r1, [sp, #12]
   1131a:	e9d3 0100 	ldrd	r0, r1, [r3]
				value->uint =
   1131e:	e9cd 0106 	strd	r0, r1, [sp, #24]
				break;
   11322:	e7e8      	b.n	112f6 <z_cbvprintf_impl+0x2de>
					(uint_value_type)va_arg(ap, size_t);
   11324:	9b03      	ldr	r3, [sp, #12]
   11326:	1d19      	adds	r1, r3, #4
   11328:	9103      	str	r1, [sp, #12]
   1132a:	681b      	ldr	r3, [r3, #0]
				value->uint =
   1132c:	9306      	str	r3, [sp, #24]
   1132e:	2300      	movs	r3, #0
   11330:	9307      	str	r3, [sp, #28]
				break;
   11332:	e7e0      	b.n	112f6 <z_cbvprintf_impl+0x2de>
				value->uint = (unsigned char)value->uint;
   11334:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11338:	9306      	str	r3, [sp, #24]
   1133a:	2300      	movs	r3, #0
   1133c:	9307      	str	r3, [sp, #28]
   1133e:	e6ce      	b.n	110de <z_cbvprintf_impl+0xc6>
			if (length_mod == LENGTH_UPPER_L) {
   11340:	2a08      	cmp	r2, #8
   11342:	d00b      	beq.n	1135c <z_cbvprintf_impl+0x344>
				value->dbl = va_arg(ap, double);
   11344:	9b03      	ldr	r3, [sp, #12]
   11346:	3307      	adds	r3, #7
   11348:	f023 0307 	bic.w	r3, r3, #7
   1134c:	f103 0208 	add.w	r2, r3, #8
   11350:	9203      	str	r2, [sp, #12]
   11352:	e9d3 2300 	ldrd	r2, r3, [r3]
   11356:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1135a:	e6c0      	b.n	110de <z_cbvprintf_impl+0xc6>
				value->ldbl = va_arg(ap, long double);
   1135c:	9b03      	ldr	r3, [sp, #12]
   1135e:	3307      	adds	r3, #7
   11360:	f023 0307 	bic.w	r3, r3, #7
   11364:	f103 0208 	add.w	r2, r3, #8
   11368:	9203      	str	r2, [sp, #12]
   1136a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1136e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11372:	e6b4      	b.n	110de <z_cbvprintf_impl+0xc6>
			value->ptr = va_arg(ap, void *);
   11374:	9b03      	ldr	r3, [sp, #12]
   11376:	1d1a      	adds	r2, r3, #4
   11378:	9203      	str	r2, [sp, #12]
   1137a:	681b      	ldr	r3, [r3, #0]
   1137c:	9306      	str	r3, [sp, #24]
   1137e:	e6ae      	b.n	110de <z_cbvprintf_impl+0xc6>
			OUTS(sp, fp);
   11380:	464b      	mov	r3, r9
   11382:	4642      	mov	r2, r8
   11384:	4629      	mov	r1, r5
   11386:	4630      	mov	r0, r6
   11388:	f00f faf1 	bl	2096e <outs>
   1138c:	2800      	cmp	r0, #0
   1138e:	f2c0 8196 	blt.w	116be <z_cbvprintf_impl+0x6a6>
   11392:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   11394:	46c8      	mov	r8, r9
			continue;
   11396:	e647      	b.n	11028 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   11398:	4629      	mov	r1, r5
   1139a:	2025      	movs	r0, #37	; 0x25
   1139c:	47b0      	blx	r6
   1139e:	2800      	cmp	r0, #0
   113a0:	f2c0 818d 	blt.w	116be <z_cbvprintf_impl+0x6a6>
   113a4:	3401      	adds	r4, #1
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   113a6:	e0a2      	b.n	114ee <z_cbvprintf_impl+0x4d6>
			bps = (const char *)value->ptr;
   113a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if (precision >= 0) {
   113ac:	f1ba 0f00 	cmp.w	sl, #0
   113b0:	da3a      	bge.n	11428 <z_cbvprintf_impl+0x410>
				len = strlen(bps);
   113b2:	4640      	mov	r0, r8
   113b4:	f7f8 fbd3 	bl	9b5e <strlen>
			bpe = bps + len;
   113b8:	4440      	add	r0, r8
   113ba:	9005      	str	r0, [sp, #20]
		if (bps == NULL) {
   113bc:	f1b8 0f00 	cmp.w	r8, #0
   113c0:	f000 8095 	beq.w	114ee <z_cbvprintf_impl+0x4d6>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   113c4:	9b05      	ldr	r3, [sp, #20]
   113c6:	eba3 0308 	sub.w	r3, r3, r8
		int pad_len = 0;

		if (sign != 0) {
   113ca:	f89d 0013 	ldrb.w	r0, [sp, #19]
   113ce:	b100      	cbz	r0, 113d2 <z_cbvprintf_impl+0x3ba>
			nj_len += 1U;
   113d0:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   113d2:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   113d6:	f011 0f10 	tst.w	r1, #16
   113da:	f000 8097 	beq.w	1150c <z_cbvprintf_impl+0x4f4>
			nj_len += 2U;
   113de:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   113e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   113e2:	4413      	add	r3, r2
		if (conv->pad_fp) {
   113e4:	f011 0f40 	tst.w	r1, #64	; 0x40
   113e8:	d001      	beq.n	113ee <z_cbvprintf_impl+0x3d6>
			nj_len += conv->pad0_pre_exp;
   113ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   113ec:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   113ee:	2f00      	cmp	r7, #0
   113f0:	f340 80a4 	ble.w	1153c <z_cbvprintf_impl+0x524>
			width -= (int)nj_len;
   113f4:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   113f6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   113fa:	f013 0f04 	tst.w	r3, #4
   113fe:	f040 809d 	bne.w	1153c <z_cbvprintf_impl+0x524>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   11402:	f013 0f40 	tst.w	r3, #64	; 0x40
   11406:	f000 8092 	beq.w	1152e <z_cbvprintf_impl+0x516>
					if (sign != 0) {
   1140a:	2800      	cmp	r0, #0
   1140c:	f000 8092 	beq.w	11534 <z_cbvprintf_impl+0x51c>
						OUTC(sign);
   11410:	4629      	mov	r1, r5
   11412:	47b0      	blx	r6
   11414:	2800      	cmp	r0, #0
   11416:	f2c0 8152 	blt.w	116be <z_cbvprintf_impl+0x6a6>
   1141a:	3401      	adds	r4, #1
						sign = 0;
   1141c:	2300      	movs	r3, #0
   1141e:	f88d 3013 	strb.w	r3, [sp, #19]
					}
					pad = '0';
   11422:	f04f 0a30 	mov.w	sl, #48	; 0x30
   11426:	e087      	b.n	11538 <z_cbvprintf_impl+0x520>
				len = strnlen(bps, precision);
   11428:	4651      	mov	r1, sl
   1142a:	4640      	mov	r0, r8
   1142c:	f013 fe42 	bl	250b4 <strnlen>
   11430:	e7c2      	b.n	113b8 <z_cbvprintf_impl+0x3a0>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11432:	9b06      	ldr	r3, [sp, #24]
   11434:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			bpe = buf + 1;
   11438:	f10d 0335 	add.w	r3, sp, #53	; 0x35
   1143c:	9305      	str	r3, [sp, #20]
			bps = buf;
   1143e:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   11442:	e7bf      	b.n	113c4 <z_cbvprintf_impl+0x3ac>
			if (conv->flag_plus) {
   11444:	f012 0f08 	tst.w	r2, #8
   11448:	d023      	beq.n	11492 <z_cbvprintf_impl+0x47a>
				sign = '+';
   1144a:	232b      	movs	r3, #43	; 0x2b
   1144c:	f88d 3013 	strb.w	r3, [sp, #19]
			sint = value->sint;
   11450:	9a06      	ldr	r2, [sp, #24]
   11452:	9b07      	ldr	r3, [sp, #28]
			if (sint < 0) {
   11454:	2b00      	cmp	r3, #0
   11456:	db23      	blt.n	114a0 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)sint;
   11458:	9206      	str	r2, [sp, #24]
   1145a:	9307      	str	r3, [sp, #28]
			bps = encode_uint(value->uint, conv, buf, bpe);
   1145c:	9b05      	ldr	r3, [sp, #20]
   1145e:	9300      	str	r3, [sp, #0]
   11460:	ab0d      	add	r3, sp, #52	; 0x34
   11462:	aa08      	add	r2, sp, #32
   11464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11468:	f7ff fb8c 	bl	10b84 <encode_uint>
   1146c:	4680      	mov	r8, r0
			if (precision >= 0) {
   1146e:	f1ba 0f00 	cmp.w	sl, #0
   11472:	dba3      	blt.n	113bc <z_cbvprintf_impl+0x3a4>
				size_t len = bpe - bps;
   11474:	9b05      	ldr	r3, [sp, #20]
   11476:	eba3 0308 	sub.w	r3, r3, r8
				conv->flag_zero = false;
   1147a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1147e:	f36f 1286 	bfc	r2, #6, #1
   11482:	f88d 2020 	strb.w	r2, [sp, #32]
				if (len < (size_t)precision) {
   11486:	459a      	cmp	sl, r3
   11488:	d998      	bls.n	113bc <z_cbvprintf_impl+0x3a4>
					conv->pad0_value = precision - (int)len;
   1148a:	ebaa 0303 	sub.w	r3, sl, r3
   1148e:	9309      	str	r3, [sp, #36]	; 0x24
   11490:	e794      	b.n	113bc <z_cbvprintf_impl+0x3a4>
			} else if (conv->flag_space) {
   11492:	f012 0f10 	tst.w	r2, #16
   11496:	d0db      	beq.n	11450 <z_cbvprintf_impl+0x438>
				sign = ' ';
   11498:	2320      	movs	r3, #32
   1149a:	f88d 3013 	strb.w	r3, [sp, #19]
   1149e:	e7d7      	b.n	11450 <z_cbvprintf_impl+0x438>
				sign = '-';
   114a0:	212d      	movs	r1, #45	; 0x2d
   114a2:	f88d 1013 	strb.w	r1, [sp, #19]
				value->uint = (uint_value_type)-sint;
   114a6:	4252      	negs	r2, r2
   114a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   114ac:	9206      	str	r2, [sp, #24]
   114ae:	9307      	str	r3, [sp, #28]
   114b0:	e7d4      	b.n	1145c <z_cbvprintf_impl+0x444>
			if (value->ptr != NULL) {
   114b2:	9806      	ldr	r0, [sp, #24]
   114b4:	b920      	cbnz	r0, 114c0 <z_cbvprintf_impl+0x4a8>
			bpe = bps + 5;
   114b6:	4b83      	ldr	r3, [pc, #524]	; (116c4 <z_cbvprintf_impl+0x6ac>)
   114b8:	9305      	str	r3, [sp, #20]
			bps = "(nil)";
   114ba:	f1a3 0805 	sub.w	r8, r3, #5
   114be:	e781      	b.n	113c4 <z_cbvprintf_impl+0x3ac>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   114c0:	9b05      	ldr	r3, [sp, #20]
   114c2:	9300      	str	r3, [sp, #0]
   114c4:	ab0d      	add	r3, sp, #52	; 0x34
   114c6:	aa08      	add	r2, sp, #32
   114c8:	2100      	movs	r1, #0
   114ca:	f7ff fb5b 	bl	10b84 <encode_uint>
   114ce:	4680      	mov	r8, r0
				conv->altform_0c = true;
   114d0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   114d4:	f043 0310 	orr.w	r3, r3, #16
   114d8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   114dc:	2378      	movs	r3, #120	; 0x78
   114de:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				goto prec_int_pad0;
   114e2:	e7c4      	b.n	1146e <z_cbvprintf_impl+0x456>
				store_count(conv, value->ptr, count);
   114e4:	4622      	mov	r2, r4
   114e6:	9906      	ldr	r1, [sp, #24]
   114e8:	a808      	add	r0, sp, #32
   114ea:	f00f fa21 	bl	20930 <store_count>
		fp = extract_conversion(conv, sp);
   114ee:	46c8      	mov	r8, r9
			continue;
   114f0:	e59a      	b.n	11028 <z_cbvprintf_impl+0x10>
				bps = encode_float(value->dbl, conv, precision,
   114f2:	ab05      	add	r3, sp, #20
   114f4:	9300      	str	r3, [sp, #0]
   114f6:	ab0d      	add	r3, sp, #52	; 0x34
   114f8:	f10d 0213 	add.w	r2, sp, #19
   114fc:	4651      	mov	r1, sl
   114fe:	a808      	add	r0, sp, #32
   11500:	ed9d 0b06 	vldr	d0, [sp, #24]
   11504:	f7ff fb94 	bl	10c30 <encode_float>
   11508:	4680      	mov	r8, r0
			break;
   1150a:	e757      	b.n	113bc <z_cbvprintf_impl+0x3a4>
		} else if (conv->altform_0) {
   1150c:	f011 0f08 	tst.w	r1, #8
   11510:	f43f af66 	beq.w	113e0 <z_cbvprintf_impl+0x3c8>
			nj_len += 1U;
   11514:	3301      	adds	r3, #1
   11516:	e763      	b.n	113e0 <z_cbvprintf_impl+0x3c8>
				}

				while (width-- > 0) {
					OUTC(pad);
   11518:	3401      	adds	r4, #1
				while (width-- > 0) {
   1151a:	463b      	mov	r3, r7
   1151c:	1e5f      	subs	r7, r3, #1
   1151e:	2b00      	cmp	r3, #0
   11520:	dd0c      	ble.n	1153c <z_cbvprintf_impl+0x524>
					OUTC(pad);
   11522:	4629      	mov	r1, r5
   11524:	4650      	mov	r0, sl
   11526:	47b0      	blx	r6
   11528:	2800      	cmp	r0, #0
   1152a:	daf5      	bge.n	11518 <z_cbvprintf_impl+0x500>
   1152c:	e0c7      	b.n	116be <z_cbvprintf_impl+0x6a6>
				char pad = ' ';
   1152e:	f04f 0a20 	mov.w	sl, #32
   11532:	e001      	b.n	11538 <z_cbvprintf_impl+0x520>
					pad = '0';
   11534:	f04f 0a30 	mov.w	sl, #48	; 0x30
   11538:	463b      	mov	r3, r7
   1153a:	e7ef      	b.n	1151c <z_cbvprintf_impl+0x504>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   1153c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   11540:	b128      	cbz	r0, 1154e <z_cbvprintf_impl+0x536>
			OUTC(sign);
   11542:	4629      	mov	r1, r5
   11544:	47b0      	blx	r6
   11546:	2800      	cmp	r0, #0
   11548:	f2c0 80b9 	blt.w	116be <z_cbvprintf_impl+0x6a6>
   1154c:	3401      	adds	r4, #1
		}

		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1154e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11552:	f013 0f40 	tst.w	r3, #64	; 0x40
   11556:	d074      	beq.n	11642 <z_cbvprintf_impl+0x62a>
			const char *cp = bps;

			if (conv->specifier_a) {
   11558:	f99d 3021 	ldrsb.w	r3, [sp, #33]	; 0x21
   1155c:	2b00      	cmp	r3, #0
   1155e:	db0f      	blt.n	11580 <z_cbvprintf_impl+0x568>
				/* Only padding is pre_exp */
				while (*cp != 'p') {
					OUTC(*cp++);
				}
			} else {
				while (isdigit((unsigned char)*cp) != 0) {
   11560:	f898 0000 	ldrb.w	r0, [r8]
   11564:	4b58      	ldr	r3, [pc, #352]	; (116c8 <z_cbvprintf_impl+0x6b0>)
   11566:	5c1b      	ldrb	r3, [r3, r0]
   11568:	f013 0f04 	tst.w	r3, #4
   1156c:	d015      	beq.n	1159a <z_cbvprintf_impl+0x582>
					OUTC(*cp++);
   1156e:	f108 0801 	add.w	r8, r8, #1
   11572:	4629      	mov	r1, r5
   11574:	47b0      	blx	r6
   11576:	2800      	cmp	r0, #0
   11578:	f2c0 80a1 	blt.w	116be <z_cbvprintf_impl+0x6a6>
   1157c:	3401      	adds	r4, #1
   1157e:	e7ef      	b.n	11560 <z_cbvprintf_impl+0x548>
				while (*cp != 'p') {
   11580:	f898 0000 	ldrb.w	r0, [r8]
   11584:	2870      	cmp	r0, #112	; 0x70
   11586:	d045      	beq.n	11614 <z_cbvprintf_impl+0x5fc>
					OUTC(*cp++);
   11588:	f108 0801 	add.w	r8, r8, #1
   1158c:	4629      	mov	r1, r5
   1158e:	47b0      	blx	r6
   11590:	2800      	cmp	r0, #0
   11592:	f2c0 8094 	blt.w	116be <z_cbvprintf_impl+0x6a6>
   11596:	3401      	adds	r4, #1
   11598:	e7f2      	b.n	11580 <z_cbvprintf_impl+0x568>
				}

				pad_len = conv->pad0_value;
   1159a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
				if (!conv->pad_postdp) {
   1159e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   115a2:	f013 0f20 	tst.w	r3, #32
   115a6:	d012      	beq.n	115ce <z_cbvprintf_impl+0x5b6>
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}

				if (*cp == '.') {
   115a8:	f898 0000 	ldrb.w	r0, [r8]
   115ac:	282e      	cmp	r0, #46	; 0x2e
   115ae:	d01d      	beq.n	115ec <z_cbvprintf_impl+0x5d4>
					 */
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}
				while (isdigit((unsigned char)*cp) != 0) {
   115b0:	f898 0000 	ldrb.w	r0, [r8]
   115b4:	4b44      	ldr	r3, [pc, #272]	; (116c8 <z_cbvprintf_impl+0x6b0>)
   115b6:	5c1b      	ldrb	r3, [r3, r0]
   115b8:	f013 0f04 	tst.w	r3, #4
   115bc:	d02a      	beq.n	11614 <z_cbvprintf_impl+0x5fc>
					OUTC(*cp++);
   115be:	f108 0801 	add.w	r8, r8, #1
   115c2:	4629      	mov	r1, r5
   115c4:	47b0      	blx	r6
   115c6:	2800      	cmp	r0, #0
   115c8:	db79      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   115ca:	3401      	adds	r4, #1
   115cc:	e7f0      	b.n	115b0 <z_cbvprintf_impl+0x598>
					while (pad_len-- > 0) {
   115ce:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
   115d2:	f1ba 0f00 	cmp.w	sl, #0
   115d6:	dd07      	ble.n	115e8 <z_cbvprintf_impl+0x5d0>
						OUTC('0');
   115d8:	4629      	mov	r1, r5
   115da:	2030      	movs	r0, #48	; 0x30
   115dc:	47b0      	blx	r6
   115de:	2800      	cmp	r0, #0
   115e0:	db6d      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   115e2:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   115e4:	46da      	mov	sl, fp
   115e6:	e7f2      	b.n	115ce <z_cbvprintf_impl+0x5b6>
   115e8:	46da      	mov	sl, fp
   115ea:	e7dd      	b.n	115a8 <z_cbvprintf_impl+0x590>
					OUTC(*cp++);
   115ec:	f108 0801 	add.w	r8, r8, #1
   115f0:	4629      	mov	r1, r5
   115f2:	47b0      	blx	r6
   115f4:	2800      	cmp	r0, #0
   115f6:	db62      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   115f8:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   115fa:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
   115fe:	f1ba 0f00 	cmp.w	sl, #0
   11602:	ddd5      	ble.n	115b0 <z_cbvprintf_impl+0x598>
						OUTC('0');
   11604:	4629      	mov	r1, r5
   11606:	2030      	movs	r0, #48	; 0x30
   11608:	47b0      	blx	r6
   1160a:	2800      	cmp	r0, #0
   1160c:	db57      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   1160e:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   11610:	46da      	mov	sl, fp
   11612:	e7f2      	b.n	115fa <z_cbvprintf_impl+0x5e2>
				}
			}

			pad_len = conv->pad0_pre_exp;
   11614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			while (pad_len-- > 0) {
   11616:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   1161a:	2b00      	cmp	r3, #0
   1161c:	dd07      	ble.n	1162e <z_cbvprintf_impl+0x616>
				OUTC('0');
   1161e:	4629      	mov	r1, r5
   11620:	2030      	movs	r0, #48	; 0x30
   11622:	47b0      	blx	r6
   11624:	2800      	cmp	r0, #0
   11626:	db4a      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   11628:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1162a:	4653      	mov	r3, sl
   1162c:	e7f3      	b.n	11616 <z_cbvprintf_impl+0x5fe>
			}

			OUTS(cp, bpe);
   1162e:	9b05      	ldr	r3, [sp, #20]
   11630:	4642      	mov	r2, r8
   11632:	4629      	mov	r1, r5
   11634:	4630      	mov	r0, r6
   11636:	f00f f99a 	bl	2096e <outs>
   1163a:	2800      	cmp	r0, #0
   1163c:	db3f      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   1163e:	4404      	add	r4, r0
   11640:	e032      	b.n	116a8 <z_cbvprintf_impl+0x690>
		} else {
			if (conv->altform_0c | conv->altform_0) {
   11642:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11646:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1164a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1164e:	431a      	orrs	r2, r3
   11650:	d005      	beq.n	1165e <z_cbvprintf_impl+0x646>
				OUTC('0');
   11652:	4629      	mov	r1, r5
   11654:	2030      	movs	r0, #48	; 0x30
   11656:	47b0      	blx	r6
   11658:	2800      	cmp	r0, #0
   1165a:	db30      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   1165c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   1165e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11662:	f013 0f10 	tst.w	r3, #16
   11666:	d006      	beq.n	11676 <z_cbvprintf_impl+0x65e>
				OUTC(conv->specifier);
   11668:	4629      	mov	r1, r5
   1166a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1166e:	47b0      	blx	r6
   11670:	2800      	cmp	r0, #0
   11672:	db24      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   11674:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   11676:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   11678:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   1167c:	2b00      	cmp	r3, #0
   1167e:	dd07      	ble.n	11690 <z_cbvprintf_impl+0x678>
				OUTC('0');
   11680:	4629      	mov	r1, r5
   11682:	2030      	movs	r0, #48	; 0x30
   11684:	47b0      	blx	r6
   11686:	2800      	cmp	r0, #0
   11688:	db19      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   1168a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1168c:	4653      	mov	r3, sl
   1168e:	e7f3      	b.n	11678 <z_cbvprintf_impl+0x660>
			}

			OUTS(bps, bpe);
   11690:	9b05      	ldr	r3, [sp, #20]
   11692:	4642      	mov	r2, r8
   11694:	4629      	mov	r1, r5
   11696:	4630      	mov	r0, r6
   11698:	f00f f969 	bl	2096e <outs>
   1169c:	2800      	cmp	r0, #0
   1169e:	db0e      	blt.n	116be <z_cbvprintf_impl+0x6a6>
   116a0:	4404      	add	r4, r0
   116a2:	e001      	b.n	116a8 <z_cbvprintf_impl+0x690>
		}

		/* Finish left justification */
		while (width > 0) {
			OUTC(' ');
   116a4:	3401      	adds	r4, #1
			--width;
   116a6:	3f01      	subs	r7, #1
		while (width > 0) {
   116a8:	2f00      	cmp	r7, #0
   116aa:	dd05      	ble.n	116b8 <z_cbvprintf_impl+0x6a0>
			OUTC(' ');
   116ac:	4629      	mov	r1, r5
   116ae:	2020      	movs	r0, #32
   116b0:	47b0      	blx	r6
   116b2:	2800      	cmp	r0, #0
   116b4:	daf6      	bge.n	116a4 <z_cbvprintf_impl+0x68c>
   116b6:	e002      	b.n	116be <z_cbvprintf_impl+0x6a6>
		fp = extract_conversion(conv, sp);
   116b8:	46c8      	mov	r8, r9
   116ba:	e4b5      	b.n	11028 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   116bc:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   116be:	b015      	add	sp, #84	; 0x54
   116c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116c4:	000263f5 	.word	0x000263f5
   116c8:	00026db9 	.word	0x00026db9

000116cc <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   116cc:	b508      	push	{r3, lr}
   116ce:	4604      	mov	r4, r0
   116d0:	f04f 0240 	mov.w	r2, #64	; 0x40
   116d4:	f3ef 8311 	mrs	r3, BASEPRI
   116d8:	f382 8812 	msr	BASEPRI_MAX, r2
   116dc:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   116e0:	f005 f932 	bl	16948 <sys_clock_disable>
	}

	sys_arch_reboot(type);
   116e4:	4620      	mov	r0, r4
   116e6:	f010 fb83 	bl	21df0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   116ea:	4803      	ldr	r0, [pc, #12]	; (116f8 <sys_reboot+0x2c>)
   116ec:	f00e fb00 	bl	1fcf0 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   116f0:	f001 fbc2 	bl	12e78 <arch_cpu_idle>
   116f4:	e7fc      	b.n	116f0 <sys_reboot+0x24>
   116f6:	bf00      	nop
   116f8:	000263f8 	.word	0x000263f8

000116fc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   116fc:	f005 bcbc 	b.w	17078 <SystemInit>

00011700 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   11700:	b570      	push	{r4, r5, r6, lr}
   11702:	4605      	mov	r5, r0
   11704:	f04f 0340 	mov.w	r3, #64	; 0x40
   11708:	f3ef 8611 	mrs	r6, BASEPRI
   1170c:	f383 8812 	msr	BASEPRI_MAX, r3
   11710:	f3bf 8f6f 	isb	sy
   11714:	4b0e      	ldr	r3, [pc, #56]	; (11750 <pm_state_notify+0x50>)
   11716:	681c      	ldr	r4, [r3, #0]
   11718:	e00d      	b.n	11736 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   1171a:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   1171c:	b13a      	cbz	r2, 1172e <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1171e:	4b0d      	ldr	r3, [pc, #52]	; (11754 <pm_state_notify+0x54>)
   11720:	7c1b      	ldrb	r3, [r3, #16]
   11722:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11726:	490c      	ldr	r1, [pc, #48]	; (11758 <pm_state_notify+0x58>)
   11728:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   1172c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1172e:	4623      	mov	r3, r4
	return node->next;
   11730:	6824      	ldr	r4, [r4, #0]
   11732:	b104      	cbz	r4, 11736 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   11734:	b123      	cbz	r3, 11740 <pm_state_notify+0x40>
   11736:	b12c      	cbz	r4, 11744 <pm_state_notify+0x44>
		if (entering_state) {
   11738:	2d00      	cmp	r5, #0
   1173a:	d0ee      	beq.n	1171a <pm_state_notify+0x1a>
			callback = notifier->state_entry;
   1173c:	6862      	ldr	r2, [r4, #4]
   1173e:	e7ed      	b.n	1171c <pm_state_notify+0x1c>
   11740:	461c      	mov	r4, r3
   11742:	e7f8      	b.n	11736 <pm_state_notify+0x36>
	__asm__ volatile(
   11744:	f386 8811 	msr	BASEPRI, r6
   11748:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1174c:	bd70      	pop	{r4, r5, r6, pc}
   1174e:	bf00      	nop
   11750:	20002748 	.word	0x20002748
   11754:	20004084 	.word	0x20004084
   11758:	2000273c 	.word	0x2000273c

0001175c <pm_exit_pos_ops>:
{
   1175c:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
   1175e:	4b06      	ldr	r3, [pc, #24]	; (11778 <pm_exit_pos_ops+0x1c>)
   11760:	b123      	cbz	r3, 1176c <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   11762:	7841      	ldrb	r1, [r0, #1]
   11764:	7800      	ldrb	r0, [r0, #0]
   11766:	f010 fb5a 	bl	21e1e <pm_state_exit_post_ops>
}
   1176a:	bd08      	pop	{r3, pc}
   1176c:	2300      	movs	r3, #0
   1176e:	f383 8811 	msr	BASEPRI, r3
   11772:	f3bf 8f6f 	isb	sy
   11776:	e7f8      	b.n	1176a <pm_exit_pos_ops+0xe>
   11778:	00021e1f 	.word	0x00021e1f

0001177c <pm_system_resume>:

void pm_system_resume(void)
{
   1177c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1177e:	4b0e      	ldr	r3, [pc, #56]	; (117b8 <pm_system_resume+0x3c>)
   11780:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   11782:	4621      	mov	r1, r4
   11784:	480d      	ldr	r0, [pc, #52]	; (117bc <pm_system_resume+0x40>)
   11786:	f00f ff8b 	bl	216a0 <atomic_test_and_clear_bit>
   1178a:	b900      	cbnz	r0, 1178e <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   1178c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   1178e:	0065      	lsls	r5, r4, #1
   11790:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   11794:	4e0a      	ldr	r6, [pc, #40]	; (117c0 <pm_system_resume+0x44>)
   11796:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   1179a:	f7ff ffdf 	bl	1175c <pm_exit_pos_ops>
		pm_state_notify(false);
   1179e:	2000      	movs	r0, #0
   117a0:	f7ff ffae 	bl	11700 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   117a4:	192b      	adds	r3, r5, r4
   117a6:	0099      	lsls	r1, r3, #2
   117a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   117ac:	2200      	movs	r2, #0
   117ae:	5072      	str	r2, [r6, r1]
   117b0:	605a      	str	r2, [r3, #4]
   117b2:	609a      	str	r2, [r3, #8]
}
   117b4:	e7ea      	b.n	1178c <pm_system_resume+0x10>
   117b6:	bf00      	nop
   117b8:	20004084 	.word	0x20004084
   117bc:	20002750 	.word	0x20002750
   117c0:	2000273c 	.word	0x2000273c

000117c4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   117c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117c6:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   117c8:	4b3d      	ldr	r3, [pc, #244]	; (118c0 <pm_system_suspend+0xfc>)
   117ca:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
   117cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   117d0:	f3ef 8611 	mrs	r6, BASEPRI
   117d4:	f383 8812 	msr	BASEPRI_MAX, r3
   117d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   117dc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   117e0:	4b38      	ldr	r3, [pc, #224]	; (118c4 <pm_system_suspend+0x100>)
   117e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   117e6:	2b00      	cmp	r3, #0
   117e8:	d052      	beq.n	11890 <pm_system_suspend+0xcc>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   117ea:	4b37      	ldr	r3, [pc, #220]	; (118c8 <pm_system_suspend+0x104>)
   117ec:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   117f0:	4f34      	ldr	r7, [pc, #208]	; (118c4 <pm_system_suspend+0x100>)
   117f2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   117f6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   117fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   117fe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   11802:	2300      	movs	r3, #0
   11804:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
   11808:	f386 8811 	msr	BASEPRI, r6
   1180c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   11810:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   11814:	4a2c      	ldr	r2, [pc, #176]	; (118c8 <pm_system_suspend+0x104>)
   11816:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1181a:	2b00      	cmp	r3, #0
   1181c:	d04d      	beq.n	118ba <pm_system_suspend+0xf6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1181e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   11822:	d018      	beq.n	11856 <pm_system_suspend+0x92>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
		     k_us_to_ticks_ceil32(
   11824:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   11828:	4b27      	ldr	r3, [pc, #156]	; (118c8 <pm_system_suspend+0x104>)
   1182a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1182e:	689b      	ldr	r3, [r3, #8]
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_us_to_ticks_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
   11830:	2200      	movs	r2, #0
		t += off;
   11832:	f240 30e7 	movw	r0, #999	; 0x3e7
   11836:	1818      	adds	r0, r3, r0
   11838:	f142 0100 	adc.w	r1, r2, #0
		if (result32 && (t < BIT64(32))) {
   1183c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11840:	4286      	cmp	r6, r0
   11842:	418a      	sbcs	r2, r1
   11844:	d333      	bcc.n	118ae <pm_system_suspend+0xea>
			return ((uint32_t)t) / (from_hz / to_hz);
   11846:	4b21      	ldr	r3, [pc, #132]	; (118cc <pm_system_suspend+0x108>)
   11848:	fba3 3000 	umull	r3, r0, r3, r0
   1184c:	0980      	lsrs	r0, r0, #6
		sys_clock_set_timeout(ticks -
   1184e:	2101      	movs	r1, #1
   11850:	1a28      	subs	r0, r5, r0
   11852:	f005 f829 	bl	168a8 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   11856:	f008 f96f 	bl	19b38 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1185a:	2001      	movs	r0, #1
   1185c:	f7ff ff50 	bl	11700 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   11860:	4621      	mov	r1, r4
   11862:	481b      	ldr	r0, [pc, #108]	; (118d0 <pm_system_suspend+0x10c>)
   11864:	f00f ff38 	bl	216d8 <atomic_set_bit>
	if (pm_state_set != NULL) {
   11868:	4b1a      	ldr	r3, [pc, #104]	; (118d4 <pm_system_suspend+0x110>)
   1186a:	b15b      	cbz	r3, 11884 <pm_system_suspend+0xc0>
		pm_state_set(info->state, info->substate_id);
   1186c:	4a16      	ldr	r2, [pc, #88]	; (118c8 <pm_system_suspend+0x104>)
   1186e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   11872:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11876:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1187a:	7859      	ldrb	r1, [r3, #1]
   1187c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   11880:	f010 fac5 	bl	21e0e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   11884:	f7ff ff7a 	bl	1177c <pm_system_resume>
	k_sched_unlock();
   11888:	f008 fb42 	bl	19f10 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   1188c:	2001      	movs	r0, #1
}
   1188e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
   11890:	4601      	mov	r1, r0
   11892:	4620      	mov	r0, r4
   11894:	f000 f820 	bl	118d8 <pm_policy_next_state>
		if (info != NULL) {
   11898:	2800      	cmp	r0, #0
   1189a:	d0b5      	beq.n	11808 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   1189c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   118a0:	4b09      	ldr	r3, [pc, #36]	; (118c8 <pm_system_suspend+0x104>)
   118a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   118a6:	c807      	ldmia	r0, {r0, r1, r2}
   118a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   118ac:	e7ac      	b.n	11808 <pm_system_suspend+0x44>
			return t / ((uint64_t)from_hz / to_hz);
   118ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   118b2:	2300      	movs	r3, #0
   118b4:	f7f0 fa48 	bl	1d48 <__aeabi_uldivmod>
   118b8:	e7c9      	b.n	1184e <pm_system_suspend+0x8a>
		return false;
   118ba:	2000      	movs	r0, #0
   118bc:	e7e7      	b.n	1188e <pm_system_suspend+0xca>
   118be:	bf00      	nop
   118c0:	20004084 	.word	0x20004084
   118c4:	20002730 	.word	0x20002730
   118c8:	2000273c 	.word	0x2000273c
   118cc:	10624dd3 	.word	0x10624dd3
   118d0:	20002750 	.word	0x20002750
   118d4:	00021e0f 	.word	0x00021e0f

000118d8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   118d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   118da:	b083      	sub	sp, #12
   118dc:	460f      	mov	r7, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   118de:	a901      	add	r1, sp, #4
   118e0:	f000 f858 	bl	11994 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   118e4:	1e45      	subs	r5, r0, #1
   118e6:	b22d      	sxth	r5, r5
   118e8:	e014      	b.n	11914 <pm_policy_next_state+0x3c>
   118ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   118ee:	2300      	movs	r3, #0
   118f0:	f7f0 fa2a 	bl	1d48 <__aeabi_uldivmod>
   118f4:	4604      	mov	r4, r0
   118f6:	e02b      	b.n	11950 <pm_policy_next_state+0x78>
   118f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   118fc:	2300      	movs	r3, #0
   118fe:	f7f0 fa23 	bl	1d48 <__aeabi_uldivmod>
   11902:	e035      	b.n	11970 <pm_policy_next_state+0x98>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   11904:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   11908:	d03c      	beq.n	11984 <pm_policy_next_state+0xac>
		    (ticks >= (min_residency + exit_latency))) {
   1190a:	4423      	add	r3, r4
		if ((ticks == K_TICKS_FOREVER) ||
   1190c:	42bb      	cmp	r3, r7
   1190e:	d939      	bls.n	11984 <pm_policy_next_state+0xac>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   11910:	3d01      	subs	r5, #1
   11912:	b22d      	sxth	r5, r5
   11914:	2d00      	cmp	r5, #0
   11916:	db34      	blt.n	11982 <pm_policy_next_state+0xaa>
		const struct pm_state_info *state = &cpu_states[i];
   11918:	9b01      	ldr	r3, [sp, #4]
   1191a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1191e:	eb03 0682 	add.w	r6, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   11922:	7871      	ldrb	r1, [r6, #1]
   11924:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   11928:	f00f fee9 	bl	216fe <pm_policy_state_lock_is_active>
   1192c:	2800      	cmp	r0, #0
   1192e:	d1ef      	bne.n	11910 <pm_policy_next_state+0x38>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   11930:	6874      	ldr	r4, [r6, #4]
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
   11932:	2300      	movs	r3, #0
		t += off;
   11934:	f240 30e7 	movw	r0, #999	; 0x3e7
   11938:	1820      	adds	r0, r4, r0
   1193a:	f143 0100 	adc.w	r1, r3, #0
		if (result32 && (t < BIT64(32))) {
   1193e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11942:	4282      	cmp	r2, r0
   11944:	418b      	sbcs	r3, r1
   11946:	d3d0      	bcc.n	118ea <pm_policy_next_state+0x12>
			return ((uint32_t)t) / (from_hz / to_hz);
   11948:	4b10      	ldr	r3, [pc, #64]	; (1198c <pm_policy_next_state+0xb4>)
   1194a:	fba3 3400 	umull	r3, r4, r3, r0
   1194e:	09a4      	lsrs	r4, r4, #6
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   11950:	68b3      	ldr	r3, [r6, #8]
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
   11952:	2200      	movs	r2, #0
		t += off;
   11954:	f240 30e7 	movw	r0, #999	; 0x3e7
   11958:	1818      	adds	r0, r3, r0
   1195a:	f142 0100 	adc.w	r1, r2, #0
		if (result32 && (t < BIT64(32))) {
   1195e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   11962:	4584      	cmp	ip, r0
   11964:	418a      	sbcs	r2, r1
   11966:	d3c7      	bcc.n	118f8 <pm_policy_next_state+0x20>
			return ((uint32_t)t) / (from_hz / to_hz);
   11968:	4b08      	ldr	r3, [pc, #32]	; (1198c <pm_policy_next_state+0xb4>)
   1196a:	fba3 3000 	umull	r3, r0, r3, r0
   1196e:	0980      	lsrs	r0, r0, #6
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
   11970:	4603      	mov	r3, r0
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   11972:	4a07      	ldr	r2, [pc, #28]	; (11990 <pm_policy_next_state+0xb8>)
   11974:	6812      	ldr	r2, [r2, #0]
   11976:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1197a:	d0c3      	beq.n	11904 <pm_policy_next_state+0x2c>
   1197c:	4282      	cmp	r2, r0
   1197e:	d8c1      	bhi.n	11904 <pm_policy_next_state+0x2c>
   11980:	e7c6      	b.n	11910 <pm_policy_next_state+0x38>
			return state;
		}
	}

	return NULL;
   11982:	2600      	movs	r6, #0
}
   11984:	4630      	mov	r0, r6
   11986:	b003      	add	sp, #12
   11988:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1198a:	bf00      	nop
   1198c:	10624dd3 	.word	0x10624dd3
   11990:	20000460 	.word	0x20000460

00011994 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   11994:	b908      	cbnz	r0, 1199a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   11996:	4b02      	ldr	r3, [pc, #8]	; (119a0 <pm_state_cpu_get_all+0xc>)
   11998:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1199a:	2000      	movs	r0, #0
   1199c:	4770      	bx	lr
   1199e:	bf00      	nop
   119a0:	00026430 	.word	0x00026430

000119a4 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   119a4:	2807      	cmp	r0, #7
   119a6:	d901      	bls.n	119ac <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
   119a8:	2000      	movs	r0, #0
}
   119aa:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
   119ac:	4b02      	ldr	r3, [pc, #8]	; (119b8 <usb_set_alt_setting+0x14>)
   119ae:	4403      	add	r3, r0
   119b0:	f883 10bb 	strb.w	r1, [r3, #187]	; 0xbb
		return true;
   119b4:	2001      	movs	r0, #1
   119b6:	4770      	bx	lr
   119b8:	20002754 	.word	0x20002754

000119bc <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   119bc:	2807      	cmp	r0, #7
   119be:	d901      	bls.n	119c4 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
   119c0:	2000      	movs	r0, #0
}
   119c2:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
   119c4:	4b02      	ldr	r3, [pc, #8]	; (119d0 <usb_get_alt_setting+0x14>)
   119c6:	4403      	add	r3, r0
   119c8:	f893 00bb 	ldrb.w	r0, [r3, #187]	; 0xbb
   119cc:	4770      	bx	lr
   119ce:	bf00      	nop
   119d0:	20002754 	.word	0x20002754

000119d4 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
   119d4:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
   119d6:	7803      	ldrb	r3, [r0, #0]
   119d8:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
   119dc:	330a      	adds	r3, #10
   119de:	4c06      	ldr	r4, [pc, #24]	; (119f8 <usb_handle_request+0x24>)
   119e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
   119e4:	b123      	cbz	r3, 119f0 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
   119e6:	4798      	blx	r3
   119e8:	2800      	cmp	r0, #0
   119ea:	db03      	blt.n	119f4 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
   119ec:	2001      	movs	r0, #1
}
   119ee:	bd10      	pop	{r4, pc}
		return false;
   119f0:	2000      	movs	r0, #0
   119f2:	e7fc      	b.n	119ee <usb_handle_request+0x1a>
		return false;
   119f4:	2000      	movs	r0, #0
   119f6:	e7fa      	b.n	119ee <usb_handle_request+0x1a>
   119f8:	20002754 	.word	0x20002754

000119fc <usb_register_request_handler>:
 * @param [in] handler    Callback function pointer
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
   119fc:	300a      	adds	r0, #10
   119fe:	4b02      	ldr	r3, [pc, #8]	; (11a08 <usb_register_request_handler+0xc>)
   11a00:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   11a04:	4770      	bx	lr
   11a06:	bf00      	nop
   11a08:	20002754 	.word	0x20002754

00011a0c <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
   11a0c:	4b01      	ldr	r3, [pc, #4]	; (11a14 <usb_register_descriptors+0x8>)
   11a0e:	6258      	str	r0, [r3, #36]	; 0x24
}
   11a10:	4770      	bx	lr
   11a12:	bf00      	nop
   11a14:	20002754 	.word	0x20002754

00011a18 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
   11a18:	b530      	push	{r4, r5, lr}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   11a1a:	8845      	ldrh	r5, [r0, #2]
   11a1c:	ea4f 2e15 	mov.w	lr, r5, lsr #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   11a20:	f1ae 0304 	sub.w	r3, lr, #4
   11a24:	b2db      	uxtb	r3, r3
   11a26:	2b01      	cmp	r3, #1
   11a28:	d921      	bls.n	11a6e <usb_get_descriptor+0x56>
   11a2a:	b2ed      	uxtb	r5, r5
   11a2c:	f1be 0f07 	cmp.w	lr, #7
   11a30:	d81f      	bhi.n	11a72 <usb_get_descriptor+0x5a>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
   11a32:	4b11      	ldr	r3, [pc, #68]	; (11a78 <usb_get_descriptor+0x60>)
   11a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
   11a36:	2400      	movs	r4, #0

	while (p[DESC_bLength] != 0U) {
   11a38:	e000      	b.n	11a3c <usb_get_descriptor+0x24>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
   11a3a:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
   11a3c:	7818      	ldrb	r0, [r3, #0]
   11a3e:	b140      	cbz	r0, 11a52 <usb_get_descriptor+0x3a>
		if (p[DESC_bDescriptorType] == type) {
   11a40:	f893 c001 	ldrb.w	ip, [r3, #1]
   11a44:	45f4      	cmp	ip, lr
   11a46:	d1f8      	bne.n	11a3a <usb_get_descriptor+0x22>
			if (cur_index == index) {
   11a48:	42a5      	cmp	r5, r4
   11a4a:	d001      	beq.n	11a50 <usb_get_descriptor+0x38>
			cur_index++;
   11a4c:	3401      	adds	r4, #1
   11a4e:	e7f4      	b.n	11a3a <usb_get_descriptor+0x22>
				found = true;
   11a50:	2001      	movs	r0, #1
	}

	if (found) {
   11a52:	b168      	cbz	r0, 11a70 <usb_get_descriptor+0x58>
		/* set data pointer */
		*data = p;
   11a54:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
   11a56:	f1be 0f02 	cmp.w	lr, #2
   11a5a:	d002      	beq.n	11a62 <usb_get_descriptor+0x4a>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
   11a5c:	781b      	ldrb	r3, [r3, #0]
   11a5e:	600b      	str	r3, [r1, #0]
   11a60:	e006      	b.n	11a70 <usb_get_descriptor+0x58>
			*len = (p[CONF_DESC_wTotalLength]) |
   11a62:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
   11a64:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
   11a66:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   11a6a:	600b      	str	r3, [r1, #0]
   11a6c:	e000      	b.n	11a70 <usb_get_descriptor+0x58>
		return false;
   11a6e:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
   11a70:	bd30      	pop	{r4, r5, pc}
		return false;
   11a72:	2000      	movs	r0, #0
   11a74:	e7fc      	b.n	11a70 <usb_get_descriptor+0x58>
   11a76:	bf00      	nop
   11a78:	20002754 	.word	0x20002754

00011a7c <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
   11a7c:	b538      	push	{r3, r4, r5, lr}
   11a7e:	460c      	mov	r4, r1
	const uint8_t *p = usb_dev.descriptors;
   11a80:	4b0d      	ldr	r3, [pc, #52]	; (11ab8 <usb_get_interface+0x3c>)
   11a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
   11a84:	6815      	ldr	r5, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
   11a86:	e000      	b.n	11a8a <usb_get_interface+0xe>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
   11a88:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
   11a8a:	781a      	ldrb	r2, [r3, #0]
   11a8c:	b18a      	cbz	r2, 11ab2 <usb_get_interface+0x36>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   11a8e:	f893 c001 	ldrb.w	ip, [r3, #1]
   11a92:	f1bc 0f04 	cmp.w	ip, #4
   11a96:	d1f7      	bne.n	11a88 <usb_get_interface+0xc>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   11a98:	f893 c002 	ldrb.w	ip, [r3, #2]
			if (cur_iface == setup->wIndex) {
   11a9c:	f8b0 e004 	ldrh.w	lr, [r0, #4]
   11aa0:	45f4      	cmp	ip, lr
   11aa2:	d1f1      	bne.n	11a88 <usb_get_interface+0xc>
				data[0] = usb_get_alt_setting(cur_iface);
   11aa4:	4660      	mov	r0, ip
   11aa6:	f7ff ff89 	bl	119bc <usb_get_alt_setting>
   11aaa:	7028      	strb	r0, [r5, #0]
				*len = 1;
   11aac:	2001      	movs	r0, #1
   11aae:	6020      	str	r0, [r4, #0]
				return true;
   11ab0:	e000      	b.n	11ab4 <usb_get_interface+0x38>
	}

	return false;
   11ab2:	2000      	movs	r0, #0
}
   11ab4:	bd38      	pop	{r3, r4, r5, pc}
   11ab6:	bf00      	nop
   11ab8:	20002754 	.word	0x20002754

00011abc <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
   11abc:	4b03      	ldr	r3, [pc, #12]	; (11acc <is_device_configured+0x10>)
   11abe:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
   11ac2:	3800      	subs	r0, #0
   11ac4:	bf18      	it	ne
   11ac6:	2001      	movne	r0, #1
   11ac8:	4770      	bx	lr
   11aca:	bf00      	nop
   11acc:	20002754 	.word	0x20002754

00011ad0 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   11ad0:	4b07      	ldr	r3, [pc, #28]	; (11af0 <is_interface_valid+0x20>)
   11ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
   11ad4:	e000      	b.n	11ad8 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
   11ad6:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
   11ad8:	781a      	ldrb	r2, [r3, #0]
   11ada:	b13a      	cbz	r2, 11aec <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   11adc:	7859      	ldrb	r1, [r3, #1]
   11ade:	2902      	cmp	r1, #2
   11ae0:	d1f9      	bne.n	11ad6 <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
   11ae2:	7919      	ldrb	r1, [r3, #4]
   11ae4:	4281      	cmp	r1, r0
   11ae6:	d9f6      	bls.n	11ad6 <is_interface_valid+0x6>
				return true;
   11ae8:	2001      	movs	r0, #1
	}

	return false;
}
   11aea:	4770      	bx	lr
	return false;
   11aec:	2000      	movs	r0, #0
   11aee:	4770      	bx	lr
   11af0:	20002754 	.word	0x20002754

00011af4 <is_ep_valid>:
static bool is_ep_valid(uint8_t ep)
{
	const struct usb_ep_cfg_data *ep_data;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
   11af4:	f030 0380 	bics.w	r3, r0, #128	; 0x80
   11af8:	d018      	beq.n	11b2c <is_ep_valid+0x38>
		return true;
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11afa:	4910      	ldr	r1, [pc, #64]	; (11b3c <is_ep_valid+0x48>)
   11afc:	4b10      	ldr	r3, [pc, #64]	; (11b40 <is_ep_valid+0x4c>)
   11afe:	4299      	cmp	r1, r3
   11b00:	d21a      	bcs.n	11b38 <is_ep_valid+0x44>
{
   11b02:	b410      	push	{r4}
   11b04:	e003      	b.n	11b0e <is_ep_valid+0x1a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11b06:	3124      	adds	r1, #36	; 0x24
   11b08:	4b0d      	ldr	r3, [pc, #52]	; (11b40 <is_ep_valid+0x4c>)
   11b0a:	4299      	cmp	r1, r3
   11b0c:	d20c      	bcs.n	11b28 <is_ep_valid+0x34>
		ep_data = cfg_data->endpoint;
   11b0e:	6a0c      	ldr	r4, [r1, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   11b10:	2300      	movs	r3, #0
   11b12:	7f0a      	ldrb	r2, [r1, #28]
   11b14:	429a      	cmp	r2, r3
   11b16:	d9f6      	bls.n	11b06 <is_ep_valid+0x12>
			if (ep_data[n].ep_addr == ep) {
   11b18:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   11b1c:	7912      	ldrb	r2, [r2, #4]
   11b1e:	4282      	cmp	r2, r0
   11b20:	d006      	beq.n	11b30 <is_ep_valid+0x3c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   11b22:	3301      	adds	r3, #1
   11b24:	b2db      	uxtb	r3, r3
   11b26:	e7f4      	b.n	11b12 <is_ep_valid+0x1e>
				return true;
			}
		}
	}

	return false;
   11b28:	2000      	movs	r0, #0
   11b2a:	e002      	b.n	11b32 <is_ep_valid+0x3e>
		return true;
   11b2c:	2001      	movs	r0, #1
   11b2e:	4770      	bx	lr
				return true;
   11b30:	2001      	movs	r0, #1
}
   11b32:	f85d 4b04 	ldr.w	r4, [sp], #4
   11b36:	4770      	bx	lr
	return false;
   11b38:	2000      	movs	r0, #0
}
   11b3a:	4770      	bx	lr
   11b3c:	20000a18 	.word	0x20000a18
   11b40:	20000a3c 	.word	0x20000a3c

00011b44 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
   11b44:	4b01      	ldr	r3, [pc, #4]	; (11b4c <usb_register_custom_req_handler+0x8>)
   11b46:	6198      	str	r0, [r3, #24]
}
   11b48:	4770      	bx	lr
   11b4a:	bf00      	nop
   11b4c:	20002754 	.word	0x20002754

00011b50 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
   11b50:	4b01      	ldr	r3, [pc, #4]	; (11b58 <usb_register_status_callback+0x8>)
   11b52:	61d8      	str	r0, [r3, #28]
}
   11b54:	4770      	bx	lr
   11b56:	bf00      	nop
   11b58:	20002754 	.word	0x20002754

00011b5c <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
   11b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b5e:	4606      	mov	r6, r0
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11b60:	4d0a      	ldr	r5, [pc, #40]	; (11b8c <foreach_ep+0x30>)
   11b62:	4b0b      	ldr	r3, [pc, #44]	; (11b90 <foreach_ep+0x34>)
   11b64:	429d      	cmp	r5, r3
   11b66:	d20f      	bcs.n	11b88 <foreach_ep+0x2c>
		ep_data = cfg_data->endpoint;
   11b68:	6a2f      	ldr	r7, [r5, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   11b6a:	2400      	movs	r4, #0
   11b6c:	e001      	b.n	11b72 <foreach_ep+0x16>
   11b6e:	3401      	adds	r4, #1
   11b70:	b2e4      	uxtb	r4, r4
   11b72:	7f2b      	ldrb	r3, [r5, #28]
   11b74:	42a3      	cmp	r3, r4
   11b76:	d905      	bls.n	11b84 <foreach_ep+0x28>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
   11b78:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   11b7c:	47b0      	blx	r6
			if (ret < 0) {
   11b7e:	2800      	cmp	r0, #0
   11b80:	daf5      	bge.n	11b6e <foreach_ep+0x12>
			}
		}
	}

	return 0;
}
   11b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11b84:	3524      	adds	r5, #36	; 0x24
   11b86:	e7ec      	b.n	11b62 <foreach_ep+0x6>
	return 0;
   11b88:	2000      	movs	r0, #0
   11b8a:	e7fa      	b.n	11b82 <foreach_ep+0x26>
   11b8c:	20000a18 	.word	0x20000a18
   11b90:	20000a3c 	.word	0x20000a3c

00011b94 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   11b94:	b538      	push	{r3, r4, r5, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11b96:	4b0c      	ldr	r3, [pc, #48]	; (11bc8 <class_handler+0x34>)
   11b98:	e000      	b.n	11b9c <class_handler+0x8>
   11b9a:	3324      	adds	r3, #36	; 0x24
   11b9c:	4c0b      	ldr	r4, [pc, #44]	; (11bcc <class_handler+0x38>)
   11b9e:	42a3      	cmp	r3, r4
   11ba0:	d20e      	bcs.n	11bc0 <class_handler+0x2c>
		iface = &cfg_data->interface;
		if_descr = cfg_data->interface_descriptor;
   11ba2:	685c      	ldr	r4, [r3, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   11ba4:	4d0a      	ldr	r5, [pc, #40]	; (11bd0 <class_handler+0x3c>)
   11ba6:	6a6d      	ldr	r5, [r5, #36]	; 0x24
   11ba8:	42ac      	cmp	r4, r5
   11baa:	d3f6      	bcc.n	11b9a <class_handler+0x6>
			continue;
		}

		if (iface->class_handler &&
   11bac:	691d      	ldr	r5, [r3, #16]
   11bae:	2d00      	cmp	r5, #0
   11bb0:	d0f3      	beq.n	11b9a <class_handler+0x6>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   11bb2:	f894 c002 	ldrb.w	ip, [r4, #2]
   11bb6:	7904      	ldrb	r4, [r0, #4]
		if (iface->class_handler &&
   11bb8:	45a4      	cmp	ip, r4
   11bba:	d1ee      	bne.n	11b9a <class_handler+0x6>
			return iface->class_handler(pSetup, len, data);
   11bbc:	47a8      	blx	r5
   11bbe:	e001      	b.n	11bc4 <class_handler+0x30>
		}
	}

	return -ENOTSUP;
   11bc0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11bc4:	bd38      	pop	{r3, r4, r5, pc}
   11bc6:	bf00      	nop
   11bc8:	20000a18 	.word	0x20000a18
   11bcc:	20000a3c 	.word	0x20000a3c
   11bd0:	20002754 	.word	0x20002754

00011bd4 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   11bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bd8:	4606      	mov	r6, r0
   11bda:	460f      	mov	r7, r1
   11bdc:	4690      	mov	r8, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11bde:	4c11      	ldr	r4, [pc, #68]	; (11c24 <custom_handler+0x50>)
   11be0:	e005      	b.n	11bee <custom_handler+0x1a>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
   11be2:	4642      	mov	r2, r8
   11be4:	4639      	mov	r1, r7
   11be6:	4630      	mov	r0, r6
   11be8:	47a8      	blx	r5
   11bea:	e019      	b.n	11c20 <custom_handler+0x4c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11bec:	3424      	adds	r4, #36	; 0x24
   11bee:	4b0e      	ldr	r3, [pc, #56]	; (11c28 <custom_handler+0x54>)
   11bf0:	429c      	cmp	r4, r3
   11bf2:	d213      	bcs.n	11c1c <custom_handler+0x48>
		if_descr = cfg_data->interface_descriptor;
   11bf4:	6863      	ldr	r3, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   11bf6:	4d0d      	ldr	r5, [pc, #52]	; (11c2c <custom_handler+0x58>)
   11bf8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
   11bfa:	42ab      	cmp	r3, r5
   11bfc:	d3f6      	bcc.n	11bec <custom_handler+0x18>
		if (iface->custom_handler == NULL) {
   11bfe:	69a5      	ldr	r5, [r4, #24]
   11c00:	2d00      	cmp	r5, #0
   11c02:	d0f3      	beq.n	11bec <custom_handler+0x18>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   11c04:	7899      	ldrb	r1, [r3, #2]
   11c06:	7932      	ldrb	r2, [r6, #4]
   11c08:	4291      	cmp	r1, r2
   11c0a:	d0ea      	beq.n	11be2 <custom_handler+0xe>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   11c0c:	795b      	ldrb	r3, [r3, #5]
   11c0e:	2b01      	cmp	r3, #1
   11c10:	d1ec      	bne.n	11bec <custom_handler+0x18>
				(void)iface->custom_handler(pSetup, len, data);
   11c12:	4642      	mov	r2, r8
   11c14:	4639      	mov	r1, r7
   11c16:	4630      	mov	r0, r6
   11c18:	47a8      	blx	r5
   11c1a:	e7e7      	b.n	11bec <custom_handler+0x18>
			}
		}
	}

	return -ENOTSUP;
   11c1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c24:	20000a18 	.word	0x20000a18
   11c28:	20000a3c 	.word	0x20000a3c
   11c2c:	20002754 	.word	0x20002754

00011c30 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   11c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c32:	4607      	mov	r7, r0
   11c34:	460e      	mov	r6, r1
   11c36:	4615      	mov	r5, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11c38:	4c0a      	ldr	r4, [pc, #40]	; (11c64 <vendor_handler+0x34>)
   11c3a:	e000      	b.n	11c3e <vendor_handler+0xe>
   11c3c:	3424      	adds	r4, #36	; 0x24
   11c3e:	4b0a      	ldr	r3, [pc, #40]	; (11c68 <vendor_handler+0x38>)
   11c40:	429c      	cmp	r4, r3
   11c42:	d20a      	bcs.n	11c5a <vendor_handler+0x2a>
		iface = &cfg_data->interface;
		if (iface->vendor_handler) {
   11c44:	6963      	ldr	r3, [r4, #20]
   11c46:	2b00      	cmp	r3, #0
   11c48:	d0f8      	beq.n	11c3c <vendor_handler+0xc>
			if (!iface->vendor_handler(pSetup, len, data)) {
   11c4a:	462a      	mov	r2, r5
   11c4c:	4631      	mov	r1, r6
   11c4e:	4638      	mov	r0, r7
   11c50:	4798      	blx	r3
   11c52:	4603      	mov	r3, r0
   11c54:	2800      	cmp	r0, #0
   11c56:	d1f1      	bne.n	11c3c <vendor_handler+0xc>
   11c58:	e001      	b.n	11c5e <vendor_handler+0x2e>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   11c5a:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   11c5e:	4618      	mov	r0, r3
   11c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c62:	bf00      	nop
   11c64:	20000a18 	.word	0x20000a18
   11c68:	20000a3c 	.word	0x20000a3c

00011c6c <disable_endpoint>:
{
   11c6c:	b510      	push	{r4, lr}
   11c6e:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
   11c70:	f010 fc46 	bl	22500 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   11c74:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11c78:	d000      	beq.n	11c7c <disable_endpoint+0x10>
	} else if (ret) {
   11c7a:	b950      	cbnz	r0, 11c92 <disable_endpoint+0x26>
	ep_bm = get_ep_bm_from_addr(ep_addr);
   11c7c:	4620      	mov	r0, r4
   11c7e:	f00f fd49 	bl	21714 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   11c82:	4a04      	ldr	r2, [pc, #16]	; (11c94 <disable_endpoint+0x28>)
   11c84:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   11c88:	ea23 0300 	bic.w	r3, r3, r0
   11c8c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
   11c90:	2000      	movs	r0, #0
}
   11c92:	bd10      	pop	{r4, pc}
   11c94:	20002754 	.word	0x20002754

00011c98 <disable_interface_ep>:
{
   11c98:	b538      	push	{r3, r4, r5, lr}
   11c9a:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_data->ep_addr);
   11c9c:	7900      	ldrb	r0, [r0, #4]
   11c9e:	f010 fc2f 	bl	22500 <usb_dc_ep_disable>
   11ca2:	4605      	mov	r5, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
   11ca4:	7920      	ldrb	r0, [r4, #4]
   11ca6:	f00f fd35 	bl	21714 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   11caa:	4a04      	ldr	r2, [pc, #16]	; (11cbc <disable_interface_ep+0x24>)
   11cac:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   11cb0:	ea23 0300 	bic.w	r3, r3, r0
   11cb4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
}
   11cb8:	4628      	mov	r0, r5
   11cba:	bd38      	pop	{r3, r4, r5, pc}
   11cbc:	20002754 	.word	0x20002754

00011cc0 <usb_halt_endpoint_req>:
{
   11cc0:	b570      	push	{r4, r5, r6, lr}
   11cc2:	b082      	sub	sp, #8
   11cc4:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   11cc6:	7904      	ldrb	r4, [r0, #4]
   11cc8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
   11ccc:	4620      	mov	r0, r4
   11cce:	f7ff ff11 	bl	11af4 <is_ep_valid>
   11cd2:	4606      	mov	r6, r0
   11cd4:	b130      	cbz	r0, 11ce4 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   11cd6:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   11cda:	d006      	beq.n	11cea <usb_halt_endpoint_req+0x2a>
   11cdc:	f7ff feee 	bl	11abc <is_device_configured>
   11ce0:	b918      	cbnz	r0, 11cea <usb_halt_endpoint_req+0x2a>
	return false;
   11ce2:	4606      	mov	r6, r0
}
   11ce4:	4630      	mov	r0, r6
   11ce6:	b002      	add	sp, #8
   11ce8:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
   11cea:	b15d      	cbz	r5, 11d04 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
   11cec:	4620      	mov	r0, r4
   11cee:	f003 f8bd 	bl	14e6c <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   11cf2:	4b0a      	ldr	r3, [pc, #40]	; (11d1c <usb_halt_endpoint_req+0x5c>)
   11cf4:	69db      	ldr	r3, [r3, #28]
   11cf6:	2b00      	cmp	r3, #0
   11cf8:	d0f4      	beq.n	11ce4 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   11cfa:	f10d 0107 	add.w	r1, sp, #7
   11cfe:	2008      	movs	r0, #8
   11d00:	4798      	blx	r3
   11d02:	e7ef      	b.n	11ce4 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
   11d04:	4620      	mov	r0, r4
   11d06:	f003 f8e1 	bl	14ecc <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   11d0a:	4b04      	ldr	r3, [pc, #16]	; (11d1c <usb_halt_endpoint_req+0x5c>)
   11d0c:	69db      	ldr	r3, [r3, #28]
   11d0e:	2b00      	cmp	r3, #0
   11d10:	d0e8      	beq.n	11ce4 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   11d12:	f10d 0107 	add.w	r1, sp, #7
   11d16:	2009      	movs	r0, #9
   11d18:	4798      	blx	r3
		return true;
   11d1a:	e7e3      	b.n	11ce4 <usb_halt_endpoint_req+0x24>
   11d1c:	20002754 	.word	0x20002754

00011d20 <set_endpoint>:
{
   11d20:	b530      	push	{r4, r5, lr}
   11d22:	b083      	sub	sp, #12
   11d24:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   11d26:	7880      	ldrb	r0, [r0, #2]
   11d28:	f88d 0000 	strb.w	r0, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   11d2c:	88a3      	ldrh	r3, [r4, #4]
   11d2e:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   11d32:	78e3      	ldrb	r3, [r4, #3]
   11d34:	f003 0303 	and.w	r3, r3, #3
   11d38:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   11d3c:	f00f fcea 	bl	21714 <get_ep_bm_from_addr>
   11d40:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
   11d42:	4b17      	ldr	r3, [pc, #92]	; (11da0 <set_endpoint+0x80>)
   11d44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   11d48:	4203      	tst	r3, r0
   11d4a:	d119      	bne.n	11d80 <set_endpoint+0x60>
	ret = usb_dc_ep_configure(&ep_cfg);
   11d4c:	4668      	mov	r0, sp
   11d4e:	f003 f865 	bl	14e1c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   11d52:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11d56:	d000      	beq.n	11d5a <set_endpoint+0x3a>
	} else if (ret) {
   11d58:	b9e8      	cbnz	r0, 11d96 <set_endpoint+0x76>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   11d5a:	f89d 0000 	ldrb.w	r0, [sp]
   11d5e:	f003 f8ff 	bl	14f60 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   11d62:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11d66:	d000      	beq.n	11d6a <set_endpoint+0x4a>
	} else if (ret) {
   11d68:	b9b8      	cbnz	r0, 11d9a <set_endpoint+0x7a>
	usb_dev.configured = true;
   11d6a:	4b0d      	ldr	r3, [pc, #52]	; (11da0 <set_endpoint+0x80>)
   11d6c:	2001      	movs	r0, #1
   11d6e:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
   11d72:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   11d76:	4315      	orrs	r5, r2
   11d78:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
}
   11d7c:	b003      	add	sp, #12
   11d7e:	bd30      	pop	{r4, r5, pc}
		reset_endpoint(ep_desc);
   11d80:	4620      	mov	r0, r4
   11d82:	f00f fcda 	bl	2173a <reset_endpoint>
		if (!k_is_in_isr()) {
   11d86:	f012 fb54 	bl	24432 <k_is_in_isr>
   11d8a:	2800      	cmp	r0, #0
   11d8c:	d1de      	bne.n	11d4c <set_endpoint+0x2c>
	return z_impl_k_usleep(us);
   11d8e:	2096      	movs	r0, #150	; 0x96
   11d90:	f012 fe99 	bl	24ac6 <z_impl_k_usleep>
   11d94:	e7da      	b.n	11d4c <set_endpoint+0x2c>
		return false;
   11d96:	2000      	movs	r0, #0
   11d98:	e7f0      	b.n	11d7c <set_endpoint+0x5c>
		return false;
   11d9a:	2000      	movs	r0, #0
   11d9c:	e7ee      	b.n	11d7c <set_endpoint+0x5c>
   11d9e:	bf00      	nop
   11da0:	20002754 	.word	0x20002754

00011da4 <usb_set_interface>:
{
   11da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11da8:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
   11daa:	4b19      	ldr	r3, [pc, #100]	; (11e10 <usb_set_interface+0x6c>)
   11dac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
   11dae:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   11db0:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   11db2:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
   11db4:	46b9      	mov	r9, r7
   11db6:	e007      	b.n	11dc8 <usb_set_interface+0x24>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   11db8:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   11dbc:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
   11dbe:	88b0      	ldrh	r0, [r6, #4]
   11dc0:	4285      	cmp	r5, r0
   11dc2:	d012      	beq.n	11dea <usb_set_interface+0x46>
		p += p[DESC_bLength];
   11dc4:	7823      	ldrb	r3, [r4, #0]
   11dc6:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   11dc8:	7823      	ldrb	r3, [r4, #0]
   11dca:	b1c3      	cbz	r3, 11dfe <usb_set_interface+0x5a>
		switch (p[DESC_bDescriptorType]) {
   11dcc:	7863      	ldrb	r3, [r4, #1]
   11dce:	2b04      	cmp	r3, #4
   11dd0:	d0f2      	beq.n	11db8 <usb_set_interface+0x14>
   11dd2:	2b05      	cmp	r3, #5
   11dd4:	d1f6      	bne.n	11dc4 <usb_set_interface+0x20>
			if (cur_iface == setup->wIndex) {
   11dd6:	88b3      	ldrh	r3, [r6, #4]
   11dd8:	429d      	cmp	r5, r3
   11dda:	d1f3      	bne.n	11dc4 <usb_set_interface+0x20>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
   11ddc:	78b2      	ldrb	r2, [r6, #2]
   11dde:	4641      	mov	r1, r8
   11de0:	4620      	mov	r0, r4
   11de2:	f00f fcbf 	bl	21764 <usb_eps_reconfigure>
   11de6:	4607      	mov	r7, r0
   11de8:	e7ec      	b.n	11dc4 <usb_set_interface+0x20>
			    cur_alt_setting == setup->wValue) {
   11dea:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
   11dec:	4588      	cmp	r8, r1
   11dee:	d1e9      	bne.n	11dc4 <usb_set_interface+0x20>
				ret = usb_set_alt_setting(setup->wIndex,
   11df0:	b2c9      	uxtb	r1, r1
   11df2:	b2c0      	uxtb	r0, r0
   11df4:	f7ff fdd6 	bl	119a4 <usb_set_alt_setting>
   11df8:	4607      	mov	r7, r0
				if_desc = (void *)p;
   11dfa:	46a1      	mov	r9, r4
   11dfc:	e7e2      	b.n	11dc4 <usb_set_interface+0x20>
	if (usb_dev.status_callback) {
   11dfe:	4b04      	ldr	r3, [pc, #16]	; (11e10 <usb_set_interface+0x6c>)
   11e00:	69db      	ldr	r3, [r3, #28]
   11e02:	b113      	cbz	r3, 11e0a <usb_set_interface+0x66>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   11e04:	4649      	mov	r1, r9
   11e06:	2007      	movs	r0, #7
   11e08:	4798      	blx	r3
}
   11e0a:	4638      	mov	r0, r7
   11e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11e10:	20002754 	.word	0x20002754

00011e14 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   11e14:	4b02      	ldr	r3, [pc, #8]	; (11e20 <usb_reset_alt_setting+0xc>)
   11e16:	2200      	movs	r2, #0
   11e18:	601a      	str	r2, [r3, #0]
   11e1a:	605a      	str	r2, [r3, #4]
}
   11e1c:	4770      	bx	lr
   11e1e:	bf00      	nop
   11e20:	2000280f 	.word	0x2000280f

00011e24 <usb_set_configuration>:
{
   11e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e28:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   11e2a:	4b22      	ldr	r3, [pc, #136]	; (11eb4 <usb_set_configuration+0x90>)
   11e2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
   11e2e:	8843      	ldrh	r3, [r0, #2]
   11e30:	b11b      	cbz	r3, 11e3a <usb_set_configuration+0x16>
	bool found = false;
   11e32:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
   11e34:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   11e36:	46b0      	mov	r8, r6
   11e38:	e010      	b.n	11e5c <usb_set_configuration+0x38>
		usb_reset_alt_setting();
   11e3a:	f7ff ffeb 	bl	11e14 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   11e3e:	886a      	ldrh	r2, [r5, #2]
   11e40:	4b1c      	ldr	r3, [pc, #112]	; (11eb4 <usb_set_configuration+0x90>)
   11e42:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
   11e46:	69db      	ldr	r3, [r3, #28]
   11e48:	b113      	cbz	r3, 11e50 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   11e4a:	491b      	ldr	r1, [pc, #108]	; (11eb8 <usb_set_configuration+0x94>)
   11e4c:	2003      	movs	r0, #3
   11e4e:	4798      	blx	r3
		return true;
   11e50:	2701      	movs	r7, #1
   11e52:	e01e      	b.n	11e92 <usb_set_configuration+0x6e>
			cur_alt_setting =
   11e54:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
   11e58:	7823      	ldrb	r3, [r4, #0]
   11e5a:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   11e5c:	7823      	ldrb	r3, [r4, #0]
   11e5e:	b1bb      	cbz	r3, 11e90 <usb_set_configuration+0x6c>
		switch (p[DESC_bDescriptorType]) {
   11e60:	7863      	ldrb	r3, [r4, #1]
   11e62:	2b04      	cmp	r3, #4
   11e64:	d0f6      	beq.n	11e54 <usb_set_configuration+0x30>
   11e66:	2b05      	cmp	r3, #5
   11e68:	d007      	beq.n	11e7a <usb_set_configuration+0x56>
   11e6a:	2b02      	cmp	r3, #2
   11e6c:	d1f4      	bne.n	11e58 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
   11e6e:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
   11e70:	886b      	ldrh	r3, [r5, #2]
   11e72:	429e      	cmp	r6, r3
   11e74:	d1f0      	bne.n	11e58 <usb_set_configuration+0x34>
				found = true;
   11e76:	2701      	movs	r7, #1
   11e78:	e7ee      	b.n	11e58 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
   11e7a:	886b      	ldrh	r3, [r5, #2]
   11e7c:	429e      	cmp	r6, r3
   11e7e:	d1eb      	bne.n	11e58 <usb_set_configuration+0x34>
   11e80:	f1b8 0f00 	cmp.w	r8, #0
   11e84:	d1e8      	bne.n	11e58 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   11e86:	4620      	mov	r0, r4
   11e88:	f7ff ff4a 	bl	11d20 <set_endpoint>
   11e8c:	4607      	mov	r7, r0
			break;
   11e8e:	e7e3      	b.n	11e58 <usb_set_configuration+0x34>
	if (found) {
   11e90:	b917      	cbnz	r7, 11e98 <usb_set_configuration+0x74>
}
   11e92:	4638      	mov	r0, r7
   11e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
   11e98:	f7ff ffbc 	bl	11e14 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   11e9c:	886a      	ldrh	r2, [r5, #2]
   11e9e:	4b05      	ldr	r3, [pc, #20]	; (11eb4 <usb_set_configuration+0x90>)
   11ea0:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
   11ea4:	69db      	ldr	r3, [r3, #28]
   11ea6:	2b00      	cmp	r3, #0
   11ea8:	d0f3      	beq.n	11e92 <usb_set_configuration+0x6e>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   11eaa:	4903      	ldr	r1, [pc, #12]	; (11eb8 <usb_set_configuration+0x94>)
   11eac:	2003      	movs	r0, #3
   11eae:	4798      	blx	r3
   11eb0:	e7ef      	b.n	11e92 <usb_set_configuration+0x6e>
   11eb2:	bf00      	nop
   11eb4:	20002754 	.word	0x20002754
   11eb8:	2000280e 	.word	0x2000280e

00011ebc <usb_handle_std_device_req>:
{
   11ebc:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
   11ebe:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
   11ec0:	f990 3000 	ldrsb.w	r3, [r0]
   11ec4:	2b00      	cmp	r3, #0
   11ec6:	db06      	blt.n	11ed6 <usb_handle_std_device_req+0x1a>
		switch (setup->bRequest) {
   11ec8:	7843      	ldrb	r3, [r0, #1]
   11eca:	2b05      	cmp	r3, #5
   11ecc:	d018      	beq.n	11f00 <usb_handle_std_device_req+0x44>
   11ece:	2b09      	cmp	r3, #9
   11ed0:	d01d      	beq.n	11f0e <usb_handle_std_device_req+0x52>
   11ed2:	2000      	movs	r0, #0
}
   11ed4:	bd10      	pop	{r4, pc}
		switch (setup->bRequest) {
   11ed6:	7843      	ldrb	r3, [r0, #1]
   11ed8:	2b06      	cmp	r3, #6
   11eda:	d007      	beq.n	11eec <usb_handle_std_device_req+0x30>
   11edc:	2b08      	cmp	r3, #8
   11ede:	d008      	beq.n	11ef2 <usb_handle_std_device_req+0x36>
   11ee0:	b10b      	cbz	r3, 11ee6 <usb_handle_std_device_req+0x2a>
   11ee2:	2000      	movs	r0, #0
   11ee4:	e7f6      	b.n	11ed4 <usb_handle_std_device_req+0x18>
			return usb_get_status(setup, len, data_buf);
   11ee6:	f00f fc0c 	bl	21702 <usb_get_status>
   11eea:	e7f3      	b.n	11ed4 <usb_handle_std_device_req+0x18>
			return usb_get_descriptor(setup, len, data_buf);
   11eec:	f7ff fd94 	bl	11a18 <usb_get_descriptor>
   11ef0:	e7f0      	b.n	11ed4 <usb_handle_std_device_req+0x18>
			data[0] = usb_dev.configuration;
   11ef2:	4b08      	ldr	r3, [pc, #32]	; (11f14 <usb_handle_std_device_req+0x58>)
   11ef4:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   11ef8:	7023      	strb	r3, [r4, #0]
			*len = 1;
   11efa:	2001      	movs	r0, #1
   11efc:	6008      	str	r0, [r1, #0]
			return true;
   11efe:	e7e9      	b.n	11ed4 <usb_handle_std_device_req+0x18>
			return !usb_dc_set_address(setup->wValue);
   11f00:	7880      	ldrb	r0, [r0, #2]
   11f02:	f002 ff79 	bl	14df8 <usb_dc_set_address>
   11f06:	fab0 f080 	clz	r0, r0
   11f0a:	0940      	lsrs	r0, r0, #5
   11f0c:	e7e2      	b.n	11ed4 <usb_handle_std_device_req+0x18>
			return usb_set_configuration(setup);
   11f0e:	f7ff ff89 	bl	11e24 <usb_set_configuration>
   11f12:	e7df      	b.n	11ed4 <usb_handle_std_device_req+0x18>
   11f14:	20002754 	.word	0x20002754

00011f18 <forward_status_cb>:
{
   11f18:	b570      	push	{r4, r5, r6, lr}
   11f1a:	4605      	mov	r5, r0
   11f1c:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   11f1e:	2804      	cmp	r0, #4
   11f20:	d003      	beq.n	11f2a <forward_status_cb+0x12>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   11f22:	2801      	cmp	r0, #1
   11f24:	d003      	beq.n	11f2e <forward_status_cb+0x16>
{
   11f26:	4c13      	ldr	r4, [pc, #76]	; (11f74 <forward_status_cb+0x5c>)
   11f28:	e011      	b.n	11f4e <forward_status_cb+0x36>
		usb_reset_alt_setting();
   11f2a:	f7ff ff73 	bl	11e14 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   11f2e:	4b12      	ldr	r3, [pc, #72]	; (11f78 <forward_status_cb+0x60>)
   11f30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   11f34:	2b00      	cmp	r3, #0
   11f36:	d0f6      	beq.n	11f26 <forward_status_cb+0xe>
			usb_cancel_transfers();
   11f38:	f000 fc3a 	bl	127b0 <usb_cancel_transfers>
			foreach_ep(disable_interface_ep);
   11f3c:	480f      	ldr	r0, [pc, #60]	; (11f7c <forward_status_cb+0x64>)
   11f3e:	f7ff fe0d 	bl	11b5c <foreach_ep>
			usb_dev.configured = false;
   11f42:	4b0d      	ldr	r3, [pc, #52]	; (11f78 <forward_status_cb+0x60>)
   11f44:	2200      	movs	r2, #0
   11f46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   11f4a:	e7ec      	b.n	11f26 <forward_status_cb+0xe>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11f4c:	3424      	adds	r4, #36	; 0x24
   11f4e:	4b0c      	ldr	r3, [pc, #48]	; (11f80 <forward_status_cb+0x68>)
   11f50:	429c      	cmp	r4, r3
   11f52:	d207      	bcs.n	11f64 <forward_status_cb+0x4c>
		if (cfg_data->cb_usb_status) {
   11f54:	68e3      	ldr	r3, [r4, #12]
   11f56:	2b00      	cmp	r3, #0
   11f58:	d0f8      	beq.n	11f4c <forward_status_cb+0x34>
			cfg_data->cb_usb_status(cfg_data, status, param);
   11f5a:	4632      	mov	r2, r6
   11f5c:	4629      	mov	r1, r5
   11f5e:	4620      	mov	r0, r4
   11f60:	4798      	blx	r3
   11f62:	e7f3      	b.n	11f4c <forward_status_cb+0x34>
	if (usb_dev.user_status_callback) {
   11f64:	4b04      	ldr	r3, [pc, #16]	; (11f78 <forward_status_cb+0x60>)
   11f66:	6a1b      	ldr	r3, [r3, #32]
   11f68:	b113      	cbz	r3, 11f70 <forward_status_cb+0x58>
		usb_dev.user_status_callback(status, param);
   11f6a:	4631      	mov	r1, r6
   11f6c:	4628      	mov	r0, r5
   11f6e:	4798      	blx	r3
}
   11f70:	bd70      	pop	{r4, r5, r6, pc}
   11f72:	bf00      	nop
   11f74:	20000a18 	.word	0x20000a18
   11f78:	20002754 	.word	0x20002754
   11f7c:	00011c99 	.word	0x00011c99
   11f80:	20000a3c 	.word	0x20000a3c

00011f84 <usb_handle_standard_request>:
{
   11f84:	b570      	push	{r4, r5, r6, lr}
   11f86:	4604      	mov	r4, r0
   11f88:	460d      	mov	r5, r1
   11f8a:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
   11f8c:	4b18      	ldr	r3, [pc, #96]	; (11ff0 <usb_handle_standard_request+0x6c>)
   11f8e:	699b      	ldr	r3, [r3, #24]
   11f90:	b10b      	cbz	r3, 11f96 <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   11f92:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   11f94:	b148      	cbz	r0, 11faa <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
   11f96:	7823      	ldrb	r3, [r4, #0]
   11f98:	f003 031f 	and.w	r3, r3, #31
   11f9c:	2b01      	cmp	r3, #1
   11f9e:	d00d      	beq.n	11fbc <usb_handle_standard_request+0x38>
   11fa0:	2b02      	cmp	r3, #2
   11fa2:	d013      	beq.n	11fcc <usb_handle_standard_request+0x48>
   11fa4:	b113      	cbz	r3, 11fac <usb_handle_standard_request+0x28>
   11fa6:	f06f 0015 	mvn.w	r0, #21
}
   11faa:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   11fac:	4632      	mov	r2, r6
   11fae:	4629      	mov	r1, r5
   11fb0:	4620      	mov	r0, r4
   11fb2:	f7ff ff83 	bl	11ebc <usb_handle_std_device_req>
   11fb6:	b188      	cbz	r0, 11fdc <usb_handle_standard_request+0x58>
	int rc = 0;
   11fb8:	2000      	movs	r0, #0
   11fba:	e7f6      	b.n	11faa <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   11fbc:	4632      	mov	r2, r6
   11fbe:	4629      	mov	r1, r5
   11fc0:	4620      	mov	r0, r4
   11fc2:	f00f fbd8 	bl	21776 <usb_handle_std_interface_req>
   11fc6:	b160      	cbz	r0, 11fe2 <usb_handle_standard_request+0x5e>
	int rc = 0;
   11fc8:	2000      	movs	r0, #0
   11fca:	e7ee      	b.n	11faa <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   11fcc:	4632      	mov	r2, r6
   11fce:	4629      	mov	r1, r5
   11fd0:	4620      	mov	r0, r4
   11fd2:	f00f fc18 	bl	21806 <usb_handle_std_endpoint_req>
   11fd6:	b138      	cbz	r0, 11fe8 <usb_handle_standard_request+0x64>
	int rc = 0;
   11fd8:	2000      	movs	r0, #0
   11fda:	e7e6      	b.n	11faa <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   11fdc:	f06f 0015 	mvn.w	r0, #21
   11fe0:	e7e3      	b.n	11faa <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   11fe2:	f06f 0015 	mvn.w	r0, #21
   11fe6:	e7e0      	b.n	11faa <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   11fe8:	f06f 0015 	mvn.w	r0, #21
   11fec:	e7dd      	b.n	11faa <usb_handle_standard_request+0x26>
   11fee:	bf00      	nop
   11ff0:	20002754 	.word	0x20002754

00011ff4 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
   11ff4:	b570      	push	{r4, r5, r6, lr}
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   11ff6:	4e0e      	ldr	r6, [pc, #56]	; (12030 <composite_setup_ep_cb+0x3c>)
   11ff8:	4b0e      	ldr	r3, [pc, #56]	; (12034 <composite_setup_ep_cb+0x40>)
   11ffa:	429e      	cmp	r6, r3
   11ffc:	d215      	bcs.n	1202a <composite_setup_ep_cb+0x36>
		ep_data = cfg_data->endpoint;
   11ffe:	6a35      	ldr	r5, [r6, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   12000:	2400      	movs	r4, #0
   12002:	e001      	b.n	12008 <composite_setup_ep_cb+0x14>
   12004:	3401      	adds	r4, #1
   12006:	b2e4      	uxtb	r4, r4
   12008:	7f33      	ldrb	r3, [r6, #28]
   1200a:	429c      	cmp	r4, r3
   1200c:	d20b      	bcs.n	12026 <composite_setup_ep_cb+0x32>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   1200e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   12012:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
   12016:	7918      	ldrb	r0, [r3, #4]
   12018:	f003 f90c 	bl	15234 <usb_dc_ep_set_callback>
   1201c:	2800      	cmp	r0, #0
   1201e:	d0f1      	beq.n	12004 <composite_setup_ep_cb+0x10>
						   ep_data[n].ep_cb)) {
				return -1;
   12020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
		}
	}

	return 0;
}
   12024:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   12026:	3624      	adds	r6, #36	; 0x24
   12028:	e7e6      	b.n	11ff8 <composite_setup_ep_cb+0x4>
	return 0;
   1202a:	2000      	movs	r0, #0
   1202c:	e7fa      	b.n	12024 <composite_setup_ep_cb+0x30>
   1202e:	bf00      	nop
   12030:	20000a18 	.word	0x20000a18
   12034:	20000a3c 	.word	0x20000a3c

00012038 <usb_data_to_host>:
{
   12038:	b510      	push	{r4, lr}
   1203a:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
   1203c:	4b13      	ldr	r3, [pc, #76]	; (1208c <usb_data_to_host+0x54>)
   1203e:	7d1b      	ldrb	r3, [r3, #20]
   12040:	b9d3      	cbnz	r3, 12078 <usb_data_to_host+0x40>
		uint32_t chunk = usb_dev.data_buf_residue;
   12042:	4c12      	ldr	r4, [pc, #72]	; (1208c <usb_data_to_host+0x54>)
   12044:	68e2      	ldr	r2, [r4, #12]
   12046:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   12048:	ab01      	add	r3, sp, #4
   1204a:	68a1      	ldr	r1, [r4, #8]
   1204c:	2080      	movs	r0, #128	; 0x80
   1204e:	f00f fbfd 	bl	2184c <usb_write>
		usb_dev.data_buf += chunk;
   12052:	68a3      	ldr	r3, [r4, #8]
   12054:	9a01      	ldr	r2, [sp, #4]
   12056:	4413      	add	r3, r2
   12058:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   1205a:	68e3      	ldr	r3, [r4, #12]
   1205c:	1a9b      	subs	r3, r3, r2
   1205e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   12060:	b993      	cbnz	r3, 12088 <usb_data_to_host+0x50>
   12062:	b18a      	cbz	r2, 12088 <usb_data_to_host+0x50>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   12064:	88e2      	ldrh	r2, [r4, #6]
   12066:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue && chunk &&
   12068:	429a      	cmp	r2, r3
   1206a:	dd0d      	ble.n	12088 <usb_data_to_host+0x50>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   1206c:	f013 0f3f 	tst.w	r3, #63	; 0x3f
   12070:	d10a      	bne.n	12088 <usb_data_to_host+0x50>
				usb_dev.zlp_flag = true;
   12072:	2201      	movs	r2, #1
   12074:	7522      	strb	r2, [r4, #20]
   12076:	e007      	b.n	12088 <usb_data_to_host+0x50>
		usb_dev.zlp_flag = false;
   12078:	2100      	movs	r1, #0
   1207a:	4b04      	ldr	r3, [pc, #16]	; (1208c <usb_data_to_host+0x54>)
   1207c:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   1207e:	460b      	mov	r3, r1
   12080:	460a      	mov	r2, r1
   12082:	2080      	movs	r0, #128	; 0x80
   12084:	f002 ff9a 	bl	14fbc <usb_dc_ep_write>
}
   12088:	b002      	add	sp, #8
   1208a:	bd10      	pop	{r4, pc}
   1208c:	20002754 	.word	0x20002754

00012090 <usb_handle_control_transfer>:
{
   12090:	b500      	push	{lr}
   12092:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   12094:	2300      	movs	r3, #0
   12096:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   12098:	2800      	cmp	r0, #0
   1209a:	f040 8085 	bne.w	121a8 <usb_handle_control_transfer+0x118>
   1209e:	b319      	cbz	r1, 120e8 <usb_handle_control_transfer+0x58>
		if (usb_dev.data_buf_residue <= 0) {
   120a0:	4b49      	ldr	r3, [pc, #292]	; (121c8 <usb_handle_control_transfer+0x138>)
   120a2:	68da      	ldr	r2, [r3, #12]
   120a4:	2a00      	cmp	r2, #0
   120a6:	dd67      	ble.n	12178 <usb_handle_control_transfer+0xe8>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   120a8:	ab03      	add	r3, sp, #12
   120aa:	4947      	ldr	r1, [pc, #284]	; (121c8 <usb_handle_control_transfer+0x138>)
   120ac:	6889      	ldr	r1, [r1, #8]
   120ae:	2000      	movs	r0, #0
   120b0:	f010 fa3f 	bl	22532 <usb_dc_ep_read>
   120b4:	2800      	cmp	r0, #0
   120b6:	db6c      	blt.n	12192 <usb_handle_control_transfer+0x102>
		usb_dev.data_buf += chunk;
   120b8:	4a43      	ldr	r2, [pc, #268]	; (121c8 <usb_handle_control_transfer+0x138>)
   120ba:	6893      	ldr	r3, [r2, #8]
   120bc:	9903      	ldr	r1, [sp, #12]
   120be:	440b      	add	r3, r1
   120c0:	6093      	str	r3, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
   120c2:	68d3      	ldr	r3, [r2, #12]
   120c4:	1a5b      	subs	r3, r3, r1
   120c6:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
   120c8:	2b00      	cmp	r3, #0
   120ca:	d16f      	bne.n	121ac <usb_handle_control_transfer+0x11c>
			usb_dev.data_buf = usb_dev.req_data;
   120cc:	4610      	mov	r0, r2
   120ce:	f102 0338 	add.w	r3, r2, #56	; 0x38
   120d2:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
   120d6:	f100 0110 	add.w	r1, r0, #16
   120da:	f7ff fc7b 	bl	119d4 <usb_handle_request>
   120de:	2800      	cmp	r0, #0
   120e0:	d05e      	beq.n	121a0 <usb_handle_control_transfer+0x110>
			usb_data_to_host();
   120e2:	f7ff ffa9 	bl	12038 <usb_data_to_host>
   120e6:	e061      	b.n	121ac <usb_handle_control_transfer+0x11c>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   120e8:	2208      	movs	r2, #8
   120ea:	a901      	add	r1, sp, #4
   120ec:	f010 fa21 	bl	22532 <usb_dc_ep_read>
   120f0:	2800      	cmp	r0, #0
   120f2:	db2e      	blt.n	12152 <usb_handle_control_transfer+0xc2>
		setup->bmRequestType = setup_raw.bmRequestType;
   120f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   120f8:	4b33      	ldr	r3, [pc, #204]	; (121c8 <usb_handle_control_transfer+0x138>)
   120fa:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
   120fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
   12100:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
   12102:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   12106:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   12108:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1210c:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   1210e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   12112:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
   12114:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12118:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
   1211a:	2200      	movs	r2, #0
   1211c:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
   1211e:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
   12120:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
   12122:	f010 0f80 	tst.w	r0, #128	; 0x80
   12126:	d102      	bne.n	1212e <usb_handle_control_transfer+0x9e>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   12128:	2980      	cmp	r1, #128	; 0x80
   1212a:	d816      	bhi.n	1215a <usb_handle_control_transfer+0xca>
			if (setup->wLength) {
   1212c:	b9e1      	cbnz	r1, 12168 <usb_handle_control_transfer+0xd8>
		if (!usb_handle_request(setup,
   1212e:	4a27      	ldr	r2, [pc, #156]	; (121cc <usb_handle_control_transfer+0x13c>)
   12130:	f102 0108 	add.w	r1, r2, #8
   12134:	f1a2 0008 	sub.w	r0, r2, #8
   12138:	f7ff fc4c 	bl	119d4 <usb_handle_request>
   1213c:	b1c0      	cbz	r0, 12170 <usb_handle_control_transfer+0xe0>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   1213e:	4b22      	ldr	r3, [pc, #136]	; (121c8 <usb_handle_control_transfer+0x138>)
   12140:	88da      	ldrh	r2, [r3, #6]
   12142:	6919      	ldr	r1, [r3, #16]
   12144:	428a      	cmp	r2, r1
   12146:	bfa8      	it	ge
   12148:	460a      	movge	r2, r1
   1214a:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
   1214c:	f7ff ff74 	bl	12038 <usb_data_to_host>
   12150:	e02c      	b.n	121ac <usb_handle_control_transfer+0x11c>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   12152:	2080      	movs	r0, #128	; 0x80
   12154:	f002 fe8a 	bl	14e6c <usb_dc_ep_set_stall>
			return;
   12158:	e028      	b.n	121ac <usb_handle_control_transfer+0x11c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   1215a:	2080      	movs	r0, #128	; 0x80
   1215c:	f002 fe86 	bl	14e6c <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   12160:	2000      	movs	r0, #0
   12162:	f002 fe83 	bl	14e6c <usb_dc_ep_set_stall>
				return;
   12166:	e021      	b.n	121ac <usb_handle_control_transfer+0x11c>
				usb_dev.data_buf_len = setup->wLength;
   12168:	4b17      	ldr	r3, [pc, #92]	; (121c8 <usb_handle_control_transfer+0x138>)
   1216a:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
   1216c:	60d9      	str	r1, [r3, #12]
				return;
   1216e:	e01d      	b.n	121ac <usb_handle_control_transfer+0x11c>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   12170:	2080      	movs	r0, #128	; 0x80
   12172:	f002 fe7b 	bl	14e6c <usb_dc_ep_set_stall>
			return;
   12176:	e019      	b.n	121ac <usb_handle_control_transfer+0x11c>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   12178:	ab03      	add	r3, sp, #12
   1217a:	2200      	movs	r2, #0
   1217c:	4912      	ldr	r1, [pc, #72]	; (121c8 <usb_handle_control_transfer+0x138>)
   1217e:	6889      	ldr	r1, [r1, #8]
   12180:	4610      	mov	r0, r2
   12182:	f010 f9d6 	bl	22532 <usb_dc_ep_read>
   12186:	2800      	cmp	r0, #0
   12188:	da10      	bge.n	121ac <usb_handle_control_transfer+0x11c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   1218a:	2080      	movs	r0, #128	; 0x80
   1218c:	f002 fe6e 	bl	14e6c <usb_dc_ep_set_stall>
			return;
   12190:	e00c      	b.n	121ac <usb_handle_control_transfer+0x11c>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   12192:	2080      	movs	r0, #128	; 0x80
   12194:	f002 fe6a 	bl	14e6c <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   12198:	2000      	movs	r0, #0
   1219a:	f002 fe67 	bl	14e6c <usb_dc_ep_set_stall>
			return;
   1219e:	e005      	b.n	121ac <usb_handle_control_transfer+0x11c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   121a0:	2080      	movs	r0, #128	; 0x80
   121a2:	f002 fe63 	bl	14e6c <usb_dc_ep_set_stall>
				return;
   121a6:	e001      	b.n	121ac <usb_handle_control_transfer+0x11c>
	} else if (ep == USB_CONTROL_EP_IN) {
   121a8:	2880      	cmp	r0, #128	; 0x80
   121aa:	d002      	beq.n	121b2 <usb_handle_control_transfer+0x122>
}
   121ac:	b005      	add	sp, #20
   121ae:	f85d fb04 	ldr.w	pc, [sp], #4
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   121b2:	4b05      	ldr	r3, [pc, #20]	; (121c8 <usb_handle_control_transfer+0x138>)
   121b4:	68db      	ldr	r3, [r3, #12]
   121b6:	b91b      	cbnz	r3, 121c0 <usb_handle_control_transfer+0x130>
   121b8:	4b03      	ldr	r3, [pc, #12]	; (121c8 <usb_handle_control_transfer+0x138>)
   121ba:	7d1b      	ldrb	r3, [r3, #20]
   121bc:	2b00      	cmp	r3, #0
   121be:	d0f5      	beq.n	121ac <usb_handle_control_transfer+0x11c>
			usb_data_to_host();
   121c0:	f7ff ff3a 	bl	12038 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
   121c4:	e7f2      	b.n	121ac <usb_handle_control_transfer+0x11c>
   121c6:	bf00      	nop
   121c8:	20002754 	.word	0x20002754
   121cc:	2000275c 	.word	0x2000275c

000121d0 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
   121d0:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
   121d2:	f7ff fc1b 	bl	11a0c <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
   121d6:	4908      	ldr	r1, [pc, #32]	; (121f8 <usb_set_config+0x28>)
   121d8:	2000      	movs	r0, #0
   121da:	f7ff fc0f 	bl	119fc <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
   121de:	4907      	ldr	r1, [pc, #28]	; (121fc <usb_set_config+0x2c>)
   121e0:	2001      	movs	r0, #1
   121e2:	f7ff fc0b 	bl	119fc <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
   121e6:	4906      	ldr	r1, [pc, #24]	; (12200 <usb_set_config+0x30>)
   121e8:	2002      	movs	r0, #2
   121ea:	f7ff fc07 	bl	119fc <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
   121ee:	4805      	ldr	r0, [pc, #20]	; (12204 <usb_set_config+0x34>)
   121f0:	f7ff fca8 	bl	11b44 <usb_register_custom_req_handler>

	return 0;
}
   121f4:	2000      	movs	r0, #0
   121f6:	bd08      	pop	{r3, pc}
   121f8:	00011f85 	.word	0x00011f85
   121fc:	00011b95 	.word	0x00011b95
   12200:	00011c31 	.word	0x00011c31
   12204:	00011bd5 	.word	0x00011bd5

00012208 <usb_enable>:

int usb_enable(usb_dc_status_callback status_cb)
{
   12208:	b530      	push	{r4, r5, lr}
   1220a:	b083      	sub	sp, #12
   1220c:	4605      	mov	r5, r0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   1220e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12216:	4836      	ldr	r0, [pc, #216]	; (122f0 <usb_enable+0xe8>)
   12218:	f007 f98e 	bl	19538 <z_impl_k_mutex_lock>
	 * This should only be called once.
	 */
	LOG_DBG("lock usb_enable_lock mutex");
	k_mutex_lock(&usb_enable_lock, K_FOREVER);

	if (usb_dev.enabled == true) {
   1221c:	4b35      	ldr	r3, [pc, #212]	; (122f4 <usb_enable+0xec>)
   1221e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   12222:	2b00      	cmp	r3, #0
   12224:	d15b      	bne.n	122de <usb_enable+0xd6>
		ret = -EALREADY;
		goto out;
	}

	/* Enable VBUS if needed */
	ret = usb_vbus_set(true);
   12226:	2001      	movs	r0, #1
   12228:	f00f fa85 	bl	21736 <usb_vbus_set>
	if (ret < 0) {
   1222c:	1e04      	subs	r4, r0, #0
   1222e:	db58      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}

	usb_dev.user_status_callback = status_cb;
   12230:	4b30      	ldr	r3, [pc, #192]	; (122f4 <usb_enable+0xec>)
   12232:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
   12234:	4c30      	ldr	r4, [pc, #192]	; (122f8 <usb_enable+0xf0>)
   12236:	4620      	mov	r0, r4
   12238:	f7ff fc8a 	bl	11b50 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
   1223c:	4620      	mov	r0, r4
   1223e:	f003 f80d 	bl	1525c <usb_dc_set_status_callback>

	ret = usb_dc_attach();
   12242:	f002 fd9d 	bl	14d80 <usb_dc_attach>
	if (ret < 0) {
   12246:	1e04      	subs	r4, r0, #0
   12248:	db4b      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}

	ret = usb_transfer_init();
   1224a:	f000 fae3 	bl	12814 <usb_transfer_init>
	if (ret < 0) {
   1224e:	1e04      	subs	r4, r0, #0
   12250:	db47      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}

	/* Configure control EP */
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   12252:	2340      	movs	r3, #64	; 0x40
   12254:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   12258:	2300      	movs	r3, #0
   1225a:	f88d 3004 	strb.w	r3, [sp, #4]

	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   1225e:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   12262:	4668      	mov	r0, sp
   12264:	f002 fdda 	bl	14e1c <usb_dc_ep_configure>
	if (ret < 0) {
   12268:	1e04      	subs	r4, r0, #0
   1226a:	db3a      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}

	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   1226c:	2380      	movs	r3, #128	; 0x80
   1226e:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   12272:	4668      	mov	r0, sp
   12274:	f002 fdd2 	bl	14e1c <usb_dc_ep_configure>
	if (ret < 0) {
   12278:	1e04      	subs	r4, r0, #0
   1227a:	db32      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}

	/* Register endpoint 0 handlers*/
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   1227c:	491f      	ldr	r1, [pc, #124]	; (122fc <usb_enable+0xf4>)
   1227e:	2000      	movs	r0, #0
   12280:	f002 ffd8 	bl	15234 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   12284:	1e04      	subs	r4, r0, #0
   12286:	db2c      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}

	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   12288:	491c      	ldr	r1, [pc, #112]	; (122fc <usb_enable+0xf4>)
   1228a:	2080      	movs	r0, #128	; 0x80
   1228c:	f002 ffd2 	bl	15234 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   12290:	1e04      	subs	r4, r0, #0
   12292:	db26      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}

	/* Register endpoint handlers*/
	ret = composite_setup_ep_cb();
   12294:	f7ff feae 	bl	11ff4 <composite_setup_ep_cb>
	if (ret < 0) {
   12298:	1e04      	subs	r4, r0, #0
   1229a:	db22      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}

	/* Enable control EP */
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   1229c:	2000      	movs	r0, #0
   1229e:	f002 fe5f 	bl	14f60 <usb_dc_ep_enable>
	if (ret < 0) {
   122a2:	1e04      	subs	r4, r0, #0
   122a4:	db1d      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   122a6:	2000      	movs	r0, #0
   122a8:	f00f fa34 	bl	21714 <get_ep_bm_from_addr>
   122ac:	4a11      	ldr	r2, [pc, #68]	; (122f4 <usb_enable+0xec>)
   122ae:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   122b2:	4303      	orrs	r3, r0
   122b4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   122b8:	2080      	movs	r0, #128	; 0x80
   122ba:	f002 fe51 	bl	14f60 <usb_dc_ep_enable>
	if (ret < 0) {
   122be:	1e04      	subs	r4, r0, #0
   122c0:	db0f      	blt.n	122e2 <usb_enable+0xda>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
   122c2:	2080      	movs	r0, #128	; 0x80
   122c4:	f00f fa26 	bl	21714 <get_ep_bm_from_addr>
   122c8:	4b0a      	ldr	r3, [pc, #40]	; (122f4 <usb_enable+0xec>)
   122ca:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   122ce:	4302      	orrs	r2, r0
   122d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	usb_dev.enabled = true;
   122d4:	2201      	movs	r2, #1
   122d6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
   122da:	2400      	movs	r4, #0
   122dc:	e001      	b.n	122e2 <usb_enable+0xda>
		ret = -EALREADY;
   122de:	f06f 0477 	mvn.w	r4, #119	; 0x77
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   122e2:	4803      	ldr	r0, [pc, #12]	; (122f0 <usb_enable+0xe8>)
   122e4:	f007 f9ac 	bl	19640 <z_impl_k_mutex_unlock>
out:
	LOG_DBG("unlock usb_enable_lock mutex");
	k_mutex_unlock(&usb_enable_lock);
	return ret;
}
   122e8:	4620      	mov	r0, r4
   122ea:	b003      	add	sp, #12
   122ec:	bd30      	pop	{r4, r5, pc}
   122ee:	bf00      	nop
   122f0:	200008c4 	.word	0x200008c4
   122f4:	20002754 	.word	0x20002754
   122f8:	00011f19 	.word	0x00011f19
   122fc:	00012091 	.word	0x00012091

00012300 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
   12300:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   12302:	4b09      	ldr	r3, [pc, #36]	; (12328 <usb_device_init+0x28>)
   12304:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   12308:	b943      	cbnz	r3, 1231c <usb_device_init+0x1c>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   1230a:	f000 f8d3 	bl	124b4 <usb_get_device_descriptor>
	if (!device_descriptor) {
   1230e:	b140      	cbz	r0, 12322 <usb_device_init+0x22>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   12310:	f7ff ff5e 	bl	121d0 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
   12314:	2000      	movs	r0, #0
   12316:	f7ff ff77 	bl	12208 <usb_enable>
	}

	return 0;
}
   1231a:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1231c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12320:	e7fb      	b.n	1231a <usb_device_init+0x1a>
		return -1;
   12322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12326:	e7f8      	b.n	1231a <usb_device_init+0x1a>
   12328:	20002754 	.word	0x20002754

0001232c <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
   1232c:	4602      	mov	r2, r0
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   1232e:	4806      	ldr	r0, [pc, #24]	; (12348 <usb_get_cfg_data+0x1c>)
   12330:	e000      	b.n	12334 <usb_get_cfg_data+0x8>
   12332:	3024      	adds	r0, #36	; 0x24
   12334:	4b05      	ldr	r3, [pc, #20]	; (1234c <usb_get_cfg_data+0x20>)
   12336:	4298      	cmp	r0, r3
   12338:	d203      	bcs.n	12342 <usb_get_cfg_data+0x16>
		if (cfg_data->interface_descriptor == iface) {
   1233a:	6843      	ldr	r3, [r0, #4]
   1233c:	4293      	cmp	r3, r2
   1233e:	d1f8      	bne.n	12332 <usb_get_cfg_data+0x6>
   12340:	e000      	b.n	12344 <usb_get_cfg_data+0x18>
			return cfg_data;
		}
	}

	return NULL;
   12342:	2000      	movs	r0, #0
}
   12344:	4770      	bx	lr
   12346:	bf00      	nop
   12348:	20000a18 	.word	0x20000a18
   1234c:	20000a3c 	.word	0x20000a3c

00012350 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   12350:	b510      	push	{r4, lr}
   12352:	b08a      	sub	sp, #40	; 0x28
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   12354:	f10d 0c04 	add.w	ip, sp, #4
   12358:	4c1d      	ldr	r4, [pc, #116]	; (123d0 <usb_update_sn_string_descriptor+0x80>)
   1235a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1235c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12360:	6823      	ldr	r3, [r4, #0]
   12362:	f88c 3000 	strb.w	r3, [ip]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   12366:	2300      	movs	r3, #0
   12368:	9306      	str	r3, [sp, #24]
   1236a:	9307      	str	r3, [sp, #28]
   1236c:	9308      	str	r3, [sp, #32]
   1236e:	9309      	str	r3, [sp, #36]	; 0x24
	memset(sn, 0, sizeof(sn));
   12370:	4a18      	ldr	r2, [pc, #96]	; (123d4 <usb_update_sn_string_descriptor+0x84>)
   12372:	6013      	str	r3, [r2, #0]
   12374:	6053      	str	r3, [r2, #4]
   12376:	6093      	str	r3, [r2, #8]
   12378:	60d3      	str	r3, [r2, #12]
   1237a:	8213      	strh	r3, [r2, #16]
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   1237c:	2110      	movs	r1, #16
   1237e:	a806      	add	r0, sp, #24
   12380:	f010 fd71 	bl	22e66 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   12384:	2800      	cmp	r0, #0
   12386:	dd20      	ble.n	123ca <usb_update_sn_string_descriptor+0x7a>
		skip = MAX(0, hwlen - usblen);
   12388:	2808      	cmp	r0, #8
   1238a:	bfb8      	it	lt
   1238c:	2008      	movlt	r0, #8
   1238e:	f1a0 0c08 	sub.w	ip, r0, #8
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   12392:	2200      	movs	r2, #0
   12394:	e017      	b.n	123c6 <usb_update_sn_string_descriptor+0x76>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   12396:	eb0c 0302 	add.w	r3, ip, r2
   1239a:	3328      	adds	r3, #40	; 0x28
   1239c:	446b      	add	r3, sp
   1239e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   123a2:	0051      	lsls	r1, r2, #1
   123a4:	a80a      	add	r0, sp, #40	; 0x28
   123a6:	eb00 1013 	add.w	r0, r0, r3, lsr #4
   123aa:	f810 ec24 	ldrb.w	lr, [r0, #-36]
   123ae:	4809      	ldr	r0, [pc, #36]	; (123d4 <usb_update_sn_string_descriptor+0x84>)
   123b0:	f800 e012 	strb.w	lr, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   123b4:	f003 030f 	and.w	r3, r3, #15
   123b8:	3101      	adds	r1, #1
   123ba:	3328      	adds	r3, #40	; 0x28
   123bc:	446b      	add	r3, sp
   123be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
   123c2:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
   123c4:	3201      	adds	r2, #1
   123c6:	2a07      	cmp	r2, #7
   123c8:	dde5      	ble.n	12396 <usb_update_sn_string_descriptor+0x46>
		}
	}

	return sn;
}
   123ca:	4802      	ldr	r0, [pc, #8]	; (123d4 <usb_update_sn_string_descriptor+0x84>)
   123cc:	b00a      	add	sp, #40	; 0x28
   123ce:	bd10      	pop	{r4, pc}
   123d0:	0002643c 	.word	0x0002643c
   123d4:	2000281c 	.word	0x2000281c

000123d8 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
   123d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123dc:	b082      	sub	sp, #8
   123de:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
   123e0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   123e4:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
   123e6:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
   123e8:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
   123ea:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
   123ec:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
   123ee:	e02c      	b.n	1244a <usb_fix_descriptor+0x72>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
   123f0:	78e3      	ldrb	r3, [r4, #3]
   123f2:	bb43      	cbnz	r3, 12446 <usb_fix_descriptor+0x6e>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
   123f4:	78a3      	ldrb	r3, [r4, #2]
   123f6:	b953      	cbnz	r3, 1240e <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
   123f8:	4620      	mov	r0, r4
   123fa:	f7ff ff97 	bl	1232c <usb_get_cfg_data>
				if (!cfg_data) {
   123fe:	4680      	mov	r8, r0
   12400:	2800      	cmp	r0, #0
   12402:	d04c      	beq.n	1249e <usb_fix_descriptor+0xc6>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
   12404:	6883      	ldr	r3, [r0, #8]
   12406:	b113      	cbz	r3, 1240e <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
   12408:	4639      	mov	r1, r7
   1240a:	4620      	mov	r0, r4
   1240c:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
   1240e:	3701      	adds	r7, #1
   12410:	b2ff      	uxtb	r7, r7
			break;
   12412:	e018      	b.n	12446 <usb_fix_descriptor+0x6e>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
   12414:	f1b8 0f00 	cmp.w	r8, #0
   12418:	d044      	beq.n	124a4 <usb_fix_descriptor+0xcc>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
   1241a:	aa01      	add	r2, sp, #4
   1241c:	4641      	mov	r1, r8
   1241e:	4620      	mov	r0, r4
   12420:	f00f fa41 	bl	218a6 <usb_validate_ep_cfg_data>
   12424:	b178      	cbz	r0, 12446 <usb_fix_descriptor+0x6e>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
				return -1;
   12426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1242a:	e032      	b.n	12492 <usb_fix_descriptor+0xba>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   1242c:	2d03      	cmp	r5, #3
   1242e:	d021      	beq.n	12474 <usb_fix_descriptor+0x9c>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
   12430:	bb25      	cbnz	r5, 1247c <usb_fix_descriptor+0xa4>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
   12432:	2e00      	cmp	r6, #0
   12434:	d039      	beq.n	124aa <usb_fix_descriptor+0xd2>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   12436:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   12438:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
   1243a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1243e:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
   12440:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
   12442:	3501      	adds	r5, #1
   12444:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   12446:	7823      	ldrb	r3, [r4, #0]
   12448:	441c      	add	r4, r3
	while (head->bLength != 0U) {
   1244a:	7823      	ldrb	r3, [r4, #0]
   1244c:	b1e3      	cbz	r3, 12488 <usb_fix_descriptor+0xb0>
		switch (head->bDescriptorType) {
   1244e:	7863      	ldrb	r3, [r4, #1]
   12450:	2b05      	cmp	r3, #5
   12452:	d8f8      	bhi.n	12446 <usb_fix_descriptor+0x6e>
   12454:	a201      	add	r2, pc, #4	; (adr r2, 1245c <usb_fix_descriptor+0x84>)
   12456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1245a:	bf00      	nop
   1245c:	0001242d 	.word	0x0001242d
   12460:	00012447 	.word	0x00012447
   12464:	00012485 	.word	0x00012485
   12468:	0001242d 	.word	0x0001242d
   1246c:	000123f1 	.word	0x000123f1
   12470:	00012415 	.word	0x00012415
				usb_fix_ascii_sn_string_descriptor(sn);
   12474:	4620      	mov	r0, r4
   12476:	f00f fa77 	bl	21968 <usb_fix_ascii_sn_string_descriptor>
   1247a:	e7d9      	b.n	12430 <usb_fix_descriptor+0x58>
				ascii7_to_utf16le(head);
   1247c:	4620      	mov	r0, r4
   1247e:	f00f fa00 	bl	21882 <ascii7_to_utf16le>
   12482:	e7de      	b.n	12442 <usb_fix_descriptor+0x6a>
			cfg_descr = (struct usb_cfg_descriptor *)head;
   12484:	4626      	mov	r6, r4
   12486:	e7de      	b.n	12446 <usb_fix_descriptor+0x6e>
	}

	if ((head + 1) != __usb_descriptor_end) {
   12488:	1ca0      	adds	r0, r4, #2
   1248a:	4b09      	ldr	r3, [pc, #36]	; (124b0 <usb_fix_descriptor+0xd8>)
   1248c:	4298      	cmp	r0, r3
   1248e:	d103      	bne.n	12498 <usb_fix_descriptor+0xc0>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
   12490:	2000      	movs	r0, #0
}
   12492:	b002      	add	sp, #8
   12494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
   12498:	f7ff ff9e 	bl	123d8 <usb_fix_descriptor>
   1249c:	e7f9      	b.n	12492 <usb_fix_descriptor+0xba>
					return -1;
   1249e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   124a2:	e7f6      	b.n	12492 <usb_fix_descriptor+0xba>
				return -1;
   124a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   124a8:	e7f3      	b.n	12492 <usb_fix_descriptor+0xba>
					return -1;
   124aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   124ae:	e7f0      	b.n	12492 <usb_fix_descriptor+0xba>
   124b0:	20000a17 	.word	0x20000a17

000124b4 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
   124b4:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
   124b6:	4804      	ldr	r0, [pc, #16]	; (124c8 <usb_get_device_descriptor+0x14>)
   124b8:	f7ff ff8e 	bl	123d8 <usb_fix_descriptor>
   124bc:	b908      	cbnz	r0, 124c2 <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   124be:	4802      	ldr	r0, [pc, #8]	; (124c8 <usb_get_device_descriptor+0x14>)
}
   124c0:	bd08      	pop	{r3, pc}
		return NULL;
   124c2:	2000      	movs	r0, #0
   124c4:	e7fc      	b.n	124c0 <usb_get_device_descriptor+0xc>
   124c6:	bf00      	nop
   124c8:	20000974 	.word	0x20000974

000124cc <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   124cc:	2300      	movs	r3, #0
   124ce:	e000      	b.n	124d2 <usb_ep_get_transfer+0x6>
   124d0:	3301      	adds	r3, #1
   124d2:	2b03      	cmp	r3, #3
   124d4:	d812      	bhi.n	124fc <usb_ep_get_transfer+0x30>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   124d6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   124da:	4909      	ldr	r1, [pc, #36]	; (12500 <usb_ep_get_transfer+0x34>)
   124dc:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   124e0:	4282      	cmp	r2, r0
   124e2:	d1f5      	bne.n	124d0 <usb_ep_get_transfer+0x4>
   124e4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
   124e8:	4a05      	ldr	r2, [pc, #20]	; (12500 <usb_ep_get_transfer+0x34>)
   124ea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   124ee:	6852      	ldr	r2, [r2, #4]
   124f0:	2a00      	cmp	r2, #0
   124f2:	d0ed      	beq.n	124d0 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
   124f4:	4802      	ldr	r0, [pc, #8]	; (12500 <usb_ep_get_transfer+0x34>)
   124f6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   124fa:	4770      	bx	lr
		}
	}

	return NULL;
   124fc:	2000      	movs	r0, #0
}
   124fe:	4770      	bx	lr
   12500:	20002830 	.word	0x20002830

00012504 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   12504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12508:	b082      	sub	sp, #8
   1250a:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
   1250c:	f810 5c34 	ldrb.w	r5, [r0, #-52]

	if (trans->status != -EBUSY) {
   12510:	f850 3c30 	ldr.w	r3, [r0, #-48]
   12514:	f113 0f10 	cmn.w	r3, #16
   12518:	d10c      	bne.n	12534 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   1251a:	6903      	ldr	r3, [r0, #16]
   1251c:	f013 0f02 	tst.w	r3, #2
   12520:	d04a      	beq.n	125b8 <usb_transfer_work+0xb4>
		if (!trans->bsize) {
   12522:	f850 2c28 	ldr.w	r2, [r0, #-40]
   12526:	bb52      	cbnz	r2, 1257e <usb_transfer_work+0x7a>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   12528:	f013 0f04 	tst.w	r3, #4
   1252c:	d020      	beq.n	12570 <usb_transfer_work+0x6c>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
   1252e:	2300      	movs	r3, #0
   12530:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   12534:	f854 3c30 	ldr.w	r3, [r4, #-48]
   12538:	f113 0f10 	cmn.w	r3, #16
   1253c:	d015      	beq.n	1256a <usb_transfer_work+0x66>
   1253e:	f854 6c20 	ldr.w	r6, [r4, #-32]
   12542:	b196      	cbz	r6, 1256a <usb_transfer_work+0x66>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   12544:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   12548:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   1254c:	f011 ff71 	bl	24432 <k_is_in_isr>
   12550:	2800      	cmp	r0, #0
   12552:	d165      	bne.n	12620 <usb_transfer_work+0x11c>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
   12554:	2300      	movs	r3, #0
   12556:	f844 3c20 	str.w	r3, [r4, #-32]
		k_sem_give(&trans->sem);
   1255a:	f1a4 0018 	sub.w	r0, r4, #24
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1255e:	f007 f8eb 	bl	19738 <z_impl_k_sem_give>

		/* Transfer completion callback */
		cb(ep, tsize, priv);
   12562:	4642      	mov	r2, r8
   12564:	4639      	mov	r1, r7
   12566:	4628      	mov	r0, r5
   12568:	47b0      	blx	r6
	}
}
   1256a:	b002      	add	sp, #8
   1256c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
   12570:	2300      	movs	r3, #0
   12572:	461a      	mov	r2, r3
   12574:	4619      	mov	r1, r3
   12576:	4628      	mov	r0, r5
   12578:	f00f f968 	bl	2184c <usb_write>
   1257c:	e7d7      	b.n	1252e <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   1257e:	ab01      	add	r3, sp, #4
   12580:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   12584:	4628      	mov	r0, r5
   12586:	f00f f961 	bl	2184c <usb_write>
		if (ret) {
   1258a:	b980      	cbnz	r0, 125ae <usb_transfer_work+0xaa>
		trans->buffer += bytes;
   1258c:	f854 2c2c 	ldr.w	r2, [r4, #-44]
   12590:	9b01      	ldr	r3, [sp, #4]
   12592:	441a      	add	r2, r3
   12594:	f844 2c2c 	str.w	r2, [r4, #-44]
		trans->bsize -= bytes;
   12598:	f854 2c28 	ldr.w	r2, [r4, #-40]
   1259c:	1ad2      	subs	r2, r2, r3
   1259e:	f844 2c28 	str.w	r2, [r4, #-40]
		trans->tsize += bytes;
   125a2:	f854 2c24 	ldr.w	r2, [r4, #-36]
   125a6:	4413      	add	r3, r2
   125a8:	f844 3c24 	str.w	r3, [r4, #-36]
   125ac:	e7c2      	b.n	12534 <usb_transfer_work+0x30>
			trans->status = -EINVAL;
   125ae:	f06f 0315 	mvn.w	r3, #21
   125b2:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   125b6:	e7bd      	b.n	12534 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   125b8:	ab01      	add	r3, sp, #4
   125ba:	f850 2c28 	ldr.w	r2, [r0, #-40]
   125be:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   125c2:	4628      	mov	r0, r5
   125c4:	f002 fd7e 	bl	150c4 <usb_dc_ep_read_wait>
		if (ret) {
   125c8:	b9a0      	cbnz	r0, 125f4 <usb_transfer_work+0xf0>
		trans->buffer += bytes;
   125ca:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   125ce:	9e01      	ldr	r6, [sp, #4]
   125d0:	4433      	add	r3, r6
   125d2:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   125d6:	f854 3c28 	ldr.w	r3, [r4, #-40]
   125da:	1b9b      	subs	r3, r3, r6
   125dc:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   125e0:	f854 3c24 	ldr.w	r3, [r4, #-36]
   125e4:	4433      	add	r3, r6
   125e6:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   125ea:	b946      	cbnz	r6, 125fe <usb_transfer_work+0xfa>
			trans->status = 0;
   125ec:	2300      	movs	r3, #0
   125ee:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   125f2:	e79f      	b.n	12534 <usb_transfer_work+0x30>
			trans->status = -EINVAL;
   125f4:	f06f 0315 	mvn.w	r3, #21
   125f8:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   125fc:	e79a      	b.n	12534 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   125fe:	4628      	mov	r0, r5
   12600:	f002 fe32 	bl	15268 <usb_dc_ep_mps>
   12604:	fbb6 f3f0 	udiv	r3, r6, r0
   12608:	fb00 6613 	mls	r6, r0, r3, r6
   1260c:	2e00      	cmp	r6, #0
   1260e:	d1ed      	bne.n	125ec <usb_transfer_work+0xe8>
   12610:	f854 3c28 	ldr.w	r3, [r4, #-40]
   12614:	2b00      	cmp	r3, #0
   12616:	d0e9      	beq.n	125ec <usb_transfer_work+0xe8>
		usb_dc_ep_read_continue(ep);
   12618:	4628      	mov	r0, r5
   1261a:	f002 fdb1 	bl	15180 <usb_dc_ep_read_continue>
   1261e:	e789      	b.n	12534 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12620:	4621      	mov	r1, r4
   12622:	4802      	ldr	r0, [pc, #8]	; (1262c <usb_transfer_work+0x128>)
   12624:	f012 f8b6 	bl	24794 <k_work_submit_to_queue>
			return;
   12628:	e79f      	b.n	1256a <usb_transfer_work+0x66>
   1262a:	bf00      	nop
   1262c:	20001888 	.word	0x20001888

00012630 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
   12630:	b570      	push	{r4, r5, r6, lr}
   12632:	b082      	sub	sp, #8
   12634:	4606      	mov	r6, r0
   12636:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   12638:	f7ff ff48 	bl	124cc <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   1263c:	1e63      	subs	r3, r4, #1
   1263e:	b2db      	uxtb	r3, r3
   12640:	2b01      	cmp	r3, #1
   12642:	d80a      	bhi.n	1265a <usb_transfer_ep_callback+0x2a>
   12644:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
   12646:	b150      	cbz	r0, 1265e <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   12648:	f011 fef3 	bl	24432 <k_is_in_isr>
   1264c:	b108      	cbz	r0, 12652 <usb_transfer_ep_callback+0x22>
   1264e:	2c01      	cmp	r4, #1
   12650:	d112      	bne.n	12678 <usb_transfer_ep_callback+0x48>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
   12652:	f105 0034 	add.w	r0, r5, #52	; 0x34
   12656:	f7ff ff55 	bl	12504 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   1265a:	b002      	add	sp, #8
   1265c:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
   1265e:	2c01      	cmp	r4, #1
   12660:	d1fb      	bne.n	1265a <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   12662:	ab01      	add	r3, sp, #4
   12664:	2201      	movs	r2, #1
   12666:	f10d 0103 	add.w	r1, sp, #3
   1266a:	4630      	mov	r0, r6
   1266c:	f002 fd2a 	bl	150c4 <usb_dc_ep_read_wait>
			} while (bytes);
   12670:	9b01      	ldr	r3, [sp, #4]
   12672:	2b00      	cmp	r3, #0
   12674:	d1f5      	bne.n	12662 <usb_transfer_ep_callback+0x32>
   12676:	e7f0      	b.n	1265a <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12678:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1267c:	4801      	ldr	r0, [pc, #4]	; (12684 <usb_transfer_ep_callback+0x54>)
   1267e:	f012 f889 	bl	24794 <k_work_submit_to_queue>
   12682:	e7ea      	b.n	1265a <usb_transfer_ep_callback+0x2a>
   12684:	20001888 	.word	0x20001888

00012688 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   12688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1268c:	4606      	mov	r6, r0
   1268e:	4689      	mov	r9, r1
   12690:	4617      	mov	r7, r2
   12692:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   12694:	f00f f9bb 	bl	21a0e <usb_transfer_is_busy>
   12698:	2800      	cmp	r0, #0
   1269a:	d162      	bne.n	12762 <usb_transfer+0xda>
	__asm__ volatile(
   1269c:	f04f 0340 	mov.w	r3, #64	; 0x40
   126a0:	f3ef 8511 	mrs	r5, BASEPRI
   126a4:	f383 8812 	msr	BASEPRI_MAX, r3
   126a8:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   126ac:	2400      	movs	r4, #0
   126ae:	2c03      	cmp	r4, #3
   126b0:	d835      	bhi.n	1271e <usb_transfer+0x96>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   126b2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   126b6:	00c0      	lsls	r0, r0, #3
   126b8:	3018      	adds	r0, #24
   126ba:	4b2b      	ldr	r3, [pc, #172]	; (12768 <usb_transfer+0xe0>)
   126bc:	4418      	add	r0, r3
   126be:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
   126c0:	2200      	movs	r2, #0
   126c2:	2300      	movs	r3, #0
   126c4:	f007 f860 	bl	19788 <z_impl_k_sem_take>
   126c8:	4682      	mov	sl, r0
   126ca:	b108      	cbz	r0, 126d0 <usb_transfer+0x48>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   126cc:	3401      	adds	r4, #1
   126ce:	e7ee      	b.n	126ae <usb_transfer+0x26>
			trans = &ut_data[i];
   126d0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   126d4:	00e2      	lsls	r2, r4, #3
   126d6:	4b24      	ldr	r3, [pc, #144]	; (12768 <usb_transfer+0xe0>)
   126d8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   126dc:	f8d4 b004 	ldr.w	fp, [r4, #4]
   126e0:	f11b 0f10 	cmn.w	fp, #16
   126e4:	d024      	beq.n	12730 <usb_transfer+0xa8>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
   126e6:	549e      	strb	r6, [r3, r2]
	trans->buffer = data;
   126e8:	f8c4 9008 	str.w	r9, [r4, #8]
	trans->bsize = dlen;
   126ec:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
   126ee:	2300      	movs	r3, #0
   126f0:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
   126f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   126f4:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
   126f6:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	trans->priv = cb_data;
   126fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   126fc:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
   126fe:	f06f 030f 	mvn.w	r3, #15
   12702:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   12704:	4630      	mov	r0, r6
   12706:	f002 fdaf 	bl	15268 <usb_dc_ep_mps>
   1270a:	b9b8      	cbnz	r0, 1273c <usb_transfer+0xb4>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
   1270c:	f018 0f02 	tst.w	r8, #2
   12710:	d022      	beq.n	12758 <usb_transfer+0xd0>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   12712:	f104 0134 	add.w	r1, r4, #52	; 0x34
   12716:	4815      	ldr	r0, [pc, #84]	; (1276c <usb_transfer+0xe4>)
   12718:	f012 f83c 	bl	24794 <k_work_submit_to_queue>
   1271c:	e001      	b.n	12722 <usb_transfer+0x9a>
		ret = -ENOMEM;
   1271e:	f06f 0a0b 	mvn.w	sl, #11
	__asm__ volatile(
   12722:	f385 8811 	msr	BASEPRI, r5
   12726:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   1272a:	4650      	mov	r0, sl
   1272c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_give(&trans->sem);
   12730:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
   12734:	f007 f800 	bl	19738 <z_impl_k_sem_give>
		ret = -EBUSY;
   12738:	46da      	mov	sl, fp
		goto done;
   1273a:	e7f2      	b.n	12722 <usb_transfer+0x9a>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   1273c:	4630      	mov	r0, r6
   1273e:	f002 fd93 	bl	15268 <usb_dc_ep_mps>
   12742:	fbb7 f3f0 	udiv	r3, r7, r0
   12746:	fb00 7713 	mls	r7, r0, r3, r7
   1274a:	2f00      	cmp	r7, #0
   1274c:	d0de      	beq.n	1270c <usb_transfer+0x84>
		trans->flags |= USB_TRANS_NO_ZLP;
   1274e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12750:	f043 0304 	orr.w	r3, r3, #4
   12754:	6463      	str	r3, [r4, #68]	; 0x44
   12756:	e7d9      	b.n	1270c <usb_transfer+0x84>
		ret = usb_dc_ep_read_continue(ep);
   12758:	4630      	mov	r0, r6
   1275a:	f002 fd11 	bl	15180 <usb_dc_ep_read_continue>
   1275e:	4682      	mov	sl, r0
   12760:	e7df      	b.n	12722 <usb_transfer+0x9a>
		return -EBUSY;
   12762:	f06f 0a0f 	mvn.w	sl, #15
   12766:	e7e0      	b.n	1272a <usb_transfer+0xa2>
   12768:	20002830 	.word	0x20002830
   1276c:	20001888 	.word	0x20001888

00012770 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   12770:	b510      	push	{r4, lr}
	__asm__ volatile(
   12772:	f04f 0340 	mov.w	r3, #64	; 0x40
   12776:	f3ef 8411 	mrs	r4, BASEPRI
   1277a:	f383 8812 	msr	BASEPRI_MAX, r3
   1277e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   12782:	f7ff fea3 	bl	124cc <usb_ep_get_transfer>
	if (!trans) {
   12786:	b120      	cbz	r0, 12792 <usb_cancel_transfer+0x22>
   12788:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
   1278a:	6843      	ldr	r3, [r0, #4]
   1278c:	f113 0f10 	cmn.w	r3, #16
   12790:	d004      	beq.n	1279c <usb_cancel_transfer+0x2c>
	__asm__ volatile(
   12792:	f384 8811 	msr	BASEPRI, r4
   12796:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
   1279a:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
   1279c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   127a0:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   127a2:	3134      	adds	r1, #52	; 0x34
   127a4:	4801      	ldr	r0, [pc, #4]	; (127ac <usb_cancel_transfer+0x3c>)
   127a6:	f011 fff5 	bl	24794 <k_work_submit_to_queue>
   127aa:	e7f2      	b.n	12792 <usb_cancel_transfer+0x22>
   127ac:	20001888 	.word	0x20001888

000127b0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   127b0:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   127b2:	2400      	movs	r4, #0
   127b4:	e004      	b.n	127c0 <usb_cancel_transfers+0x10>
   127b6:	f385 8811 	msr	BASEPRI, r5
   127ba:	f3bf 8f6f 	isb	sy
   127be:	3401      	adds	r4, #1
   127c0:	2c03      	cmp	r4, #3
   127c2:	d822      	bhi.n	1280a <usb_cancel_transfers+0x5a>
	__asm__ volatile(
   127c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   127c8:	f3ef 8511 	mrs	r5, BASEPRI
   127cc:	f383 8812 	msr	BASEPRI_MAX, r3
   127d0:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   127d4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   127d8:	00da      	lsls	r2, r3, #3
   127da:	4b0c      	ldr	r3, [pc, #48]	; (1280c <usb_cancel_transfers+0x5c>)
   127dc:	4413      	add	r3, r2
   127de:	685b      	ldr	r3, [r3, #4]
   127e0:	f113 0f10 	cmn.w	r3, #16
   127e4:	d1e7      	bne.n	127b6 <usb_cancel_transfers+0x6>
			trans->status = -ECANCELED;
   127e6:	4a09      	ldr	r2, [pc, #36]	; (1280c <usb_cancel_transfers+0x5c>)
   127e8:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   127ec:	00cb      	lsls	r3, r1, #3
   127ee:	4413      	add	r3, r2
   127f0:	f06f 018b 	mvn.w	r1, #139	; 0x8b
   127f4:	6059      	str	r1, [r3, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   127f6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   127fa:	00d9      	lsls	r1, r3, #3
   127fc:	3130      	adds	r1, #48	; 0x30
   127fe:	4411      	add	r1, r2
   12800:	3104      	adds	r1, #4
   12802:	4803      	ldr	r0, [pc, #12]	; (12810 <usb_cancel_transfers+0x60>)
   12804:	f011 ffc6 	bl	24794 <k_work_submit_to_queue>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
   12808:	e7d5      	b.n	127b6 <usb_cancel_transfers+0x6>
		}

		irq_unlock(key);
	}
}
   1280a:	bd38      	pop	{r3, r4, r5, pc}
   1280c:	20002830 	.word	0x20002830
   12810:	20001888 	.word	0x20001888

00012814 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   12814:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   12816:	2400      	movs	r4, #0
   12818:	e014      	b.n	12844 <usb_transfer_init+0x30>
		k_work_init(&ut_data[i].work, usb_transfer_work);
   1281a:	00e5      	lsls	r5, r4, #3
   1281c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   12820:	00d8      	lsls	r0, r3, #3
   12822:	3030      	adds	r0, #48	; 0x30
   12824:	4e09      	ldr	r6, [pc, #36]	; (1284c <usb_transfer_init+0x38>)
   12826:	4430      	add	r0, r6
   12828:	4909      	ldr	r1, [pc, #36]	; (12850 <usb_transfer_init+0x3c>)
   1282a:	3004      	adds	r0, #4
   1282c:	f011 ff96 	bl	2475c <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
   12830:	192b      	adds	r3, r5, r4
   12832:	00d8      	lsls	r0, r3, #3
   12834:	3018      	adds	r0, #24
   12836:	4430      	add	r0, r6
   12838:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   1283a:	2201      	movs	r2, #1
   1283c:	4611      	mov	r1, r2
   1283e:	f011 fefd 	bl	2463c <z_impl_k_sem_init>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   12842:	3401      	adds	r4, #1
   12844:	2c03      	cmp	r4, #3
   12846:	d9e8      	bls.n	1281a <usb_transfer_init+0x6>
	}

	return 0;
}
   12848:	2000      	movs	r0, #0
   1284a:	bd70      	pop	{r4, r5, r6, pc}
   1284c:	20002830 	.word	0x20002830
   12850:	00012505 	.word	0x00012505

00012854 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   12854:	b570      	push	{r4, r5, r6, lr}
   12856:	4604      	mov	r4, r0
   12858:	460e      	mov	r6, r1
   1285a:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   1285c:	7901      	ldrb	r1, [r0, #4]
   1285e:	4818      	ldr	r0, [pc, #96]	; (128c0 <cdc_acm_class_handle_req+0x6c>)
   12860:	f00f f8a5 	bl	219ae <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   12864:	b330      	cbz	r0, 128b4 <cdc_acm_class_handle_req+0x60>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   12866:	f994 2000 	ldrsb.w	r2, [r4]
   1286a:	2a00      	cmp	r2, #0
   1286c:	db18      	blt.n	128a0 <cdc_acm_class_handle_req+0x4c>
		switch (setup->bRequest) {
   1286e:	7862      	ldrb	r2, [r4, #1]
   12870:	2a20      	cmp	r2, #32
   12872:	d004      	beq.n	1287e <cdc_acm_class_handle_req+0x2a>
   12874:	2a22      	cmp	r2, #34	; 0x22
   12876:	d00e      	beq.n	12896 <cdc_acm_class_handle_req+0x42>
   12878:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1287c:	e019      	b.n	128b2 <cdc_acm_class_handle_req+0x5e>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
   1287e:	682a      	ldr	r2, [r5, #0]
   12880:	6811      	ldr	r1, [r2, #0]
   12882:	f840 1c10 	str.w	r1, [r0, #-16]
   12886:	8891      	ldrh	r1, [r2, #4]
   12888:	7992      	ldrb	r2, [r2, #6]
   1288a:	f820 1c0c 	strh.w	r1, [r0, #-12]
   1288e:	f800 2c0a 	strb.w	r2, [r0, #-10]
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
   12892:	2000      	movs	r0, #0
   12894:	e00d      	b.n	128b2 <cdc_acm_class_handle_req+0x5e>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
   12896:	78a2      	ldrb	r2, [r4, #2]
   12898:	f800 2c09 	strb.w	r2, [r0, #-9]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
   1289c:	2000      	movs	r0, #0
   1289e:	e008      	b.n	128b2 <cdc_acm_class_handle_req+0x5e>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
   128a0:	7862      	ldrb	r2, [r4, #1]
   128a2:	2a21      	cmp	r2, #33	; 0x21
   128a4:	d109      	bne.n	128ba <cdc_acm_class_handle_req+0x66>
			*data = (uint8_t *)(&dev_data->line_coding);
   128a6:	f1a0 0310 	sub.w	r3, r0, #16
   128aa:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
   128ac:	2307      	movs	r3, #7
   128ae:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
   128b0:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
   128b2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   128b4:	f06f 0012 	mvn.w	r0, #18
   128b8:	e7fb      	b.n	128b2 <cdc_acm_class_handle_req+0x5e>
	return -ENOTSUP;
   128ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   128be:	e7f8      	b.n	128b2 <cdc_acm_class_handle_req+0x5e>
   128c0:	20002950 	.word	0x20002950

000128c4 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   128c4:	b508      	push	{r3, lr}
   128c6:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   128c8:	4803      	ldr	r0, [pc, #12]	; (128d8 <cdc_acm_int_in+0x14>)
   128ca:	f00f f884 	bl	219d6 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   128ce:	b110      	cbz	r0, 128d6 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
   128d0:	2201      	movs	r2, #1
   128d2:	f800 2c07 	strb.w	r2, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
   128d6:	bd08      	pop	{r3, pc}
   128d8:	20002950 	.word	0x20002950

000128dc <cdc_acm_irq_rx_enable>:
 * @brief Enable RX interrupt
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
   128dc:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   128de:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   128e0:	2301      	movs	r3, #1
   128e2:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
   128e6:	680b      	ldr	r3, [r1, #0]
   128e8:	b113      	cbz	r3, 128f0 <cdc_acm_irq_rx_enable+0x14>
   128ea:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
   128ee:	b903      	cbnz	r3, 128f2 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
   128f0:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   128f2:	3108      	adds	r1, #8
   128f4:	4801      	ldr	r0, [pc, #4]	; (128fc <cdc_acm_irq_rx_enable+0x20>)
   128f6:	f011 ff4d 	bl	24794 <k_work_submit_to_queue>
}
   128fa:	e7f9      	b.n	128f0 <cdc_acm_irq_rx_enable+0x14>
   128fc:	20001888 	.word	0x20001888

00012900 <cdc_acm_irq_tx_enable>:
{
   12900:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12902:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   12904:	2301      	movs	r3, #1
   12906:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
   1290a:	680b      	ldr	r3, [r1, #0]
   1290c:	b113      	cbz	r3, 12914 <cdc_acm_irq_tx_enable+0x14>
   1290e:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   12912:	b903      	cbnz	r3, 12916 <cdc_acm_irq_tx_enable+0x16>
}
   12914:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   12916:	3108      	adds	r1, #8
   12918:	4801      	ldr	r0, [pc, #4]	; (12920 <cdc_acm_irq_tx_enable+0x20>)
   1291a:	f011 ff3b 	bl	24794 <k_work_submit_to_queue>
}
   1291e:	e7f9      	b.n	12914 <cdc_acm_irq_tx_enable+0x14>
   12920:	20001888 	.word	0x20001888

00012924 <cdc_acm_read_cb>:
{
   12924:	b530      	push	{r4, r5, lr}
   12926:	b083      	sub	sp, #12
   12928:	4605      	mov	r5, r0
   1292a:	4614      	mov	r4, r2
	if (size <= 0) {
   1292c:	1e0a      	subs	r2, r1, #0
   1292e:	dd16      	ble.n	1295e <cdc_acm_read_cb+0x3a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   12930:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   12934:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   12938:	f00e f871 	bl	20a1e <ring_buf_put>
	dev_data->rx_ready = true;
   1293c:	2301      	movs	r3, #1
   1293e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
   12942:	6823      	ldr	r3, [r4, #0]
   12944:	b113      	cbz	r3, 1294c <cdc_acm_read_cb+0x28>
   12946:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   1294a:	b9a3      	cbnz	r3, 12976 <cdc_acm_read_cb+0x52>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
   1294c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   12950:	69cb      	ldr	r3, [r1, #28]
   12952:	684a      	ldr	r2, [r1, #4]
   12954:	6949      	ldr	r1, [r1, #20]
   12956:	1a52      	subs	r2, r2, r1
   12958:	1a9b      	subs	r3, r3, r2
   1295a:	2b3f      	cmp	r3, #63	; 0x3f
   1295c:	d911      	bls.n	12982 <cdc_acm_read_cb+0x5e>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   1295e:	9401      	str	r4, [sp, #4]
   12960:	4b0a      	ldr	r3, [pc, #40]	; (1298c <cdc_acm_read_cb+0x68>)
   12962:	9300      	str	r3, [sp, #0]
   12964:	2301      	movs	r3, #1
   12966:	2240      	movs	r2, #64	; 0x40
   12968:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1296c:	4628      	mov	r0, r5
   1296e:	f7ff fe8b 	bl	12688 <usb_transfer>
}
   12972:	b003      	add	sp, #12
   12974:	bd30      	pop	{r4, r5, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   12976:	f104 0108 	add.w	r1, r4, #8
   1297a:	4805      	ldr	r0, [pc, #20]	; (12990 <cdc_acm_read_cb+0x6c>)
   1297c:	f011 ff0a 	bl	24794 <k_work_submit_to_queue>
   12980:	e7e4      	b.n	1294c <cdc_acm_read_cb+0x28>
		dev_data->rx_paused = true;
   12982:	2301      	movs	r3, #1
   12984:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
		return;
   12988:	e7f3      	b.n	12972 <cdc_acm_read_cb+0x4e>
   1298a:	bf00      	nop
   1298c:	00012925 	.word	0x00012925
   12990:	20001888 	.word	0x20001888

00012994 <cdc_acm_reset_port>:
{
   12994:	b508      	push	{r3, lr}
   12996:	4603      	mov	r3, r0
	dev_data->configured = false;
   12998:	f04f 0c00 	mov.w	ip, #0
   1299c:	f880 c09e 	strb.w	ip, [r0, #158]	; 0x9e
	dev_data->suspended = false;
   129a0:	f880 c09f 	strb.w	ip, [r0, #159]	; 0x9f
	dev_data->rx_ready = false;
   129a4:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
	dev_data->tx_ready = false;
   129a8:	f880 c048 	strb.w	ip, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
   129ac:	4a0b      	ldr	r2, [pc, #44]	; (129dc <cdc_acm_reset_port+0x48>)
   129ae:	e892 0003 	ldmia.w	r2, {r0, r1}
   129b2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
   129b6:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
   129ba:	0c09      	lsrs	r1, r1, #16
   129bc:	f883 109a 	strb.w	r1, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
   129c0:	f883 c09c 	strb.w	ip, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
   129c4:	f883 c09b 	strb.w	ip, [r3, #155]	; 0x9b
	dev_data->rx_paused = false;
   129c8:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   129cc:	2240      	movs	r2, #64	; 0x40
   129ce:	4661      	mov	r1, ip
   129d0:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   129d4:	f012 fa3a 	bl	24e4c <memset>
}
   129d8:	bd08      	pop	{r3, pc}
   129da:	bf00      	nop
   129dc:	00026000 	.word	0x00026000

000129e0 <cdc_acm_do_cb>:
{
   129e0:	b510      	push	{r4, lr}
   129e2:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
   129e4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	struct usb_cfg_data *cfg = (void *)dev->config;
   129e8:	685b      	ldr	r3, [r3, #4]
	switch (status) {
   129ea:	3901      	subs	r1, #1
   129ec:	2905      	cmp	r1, #5
   129ee:	d806      	bhi.n	129fe <cdc_acm_do_cb+0x1e>
   129f0:	e8df f001 	tbb	[pc, r1]
   129f4:	27060503 	.word	0x27060503
   129f8:	2e2a      	.short	0x2e2a
		cdc_acm_reset_port(dev_data);
   129fa:	f7ff ffcb 	bl	12994 <cdc_acm_reset_port>
}
   129fe:	bd10      	pop	{r4, pc}
		if (!dev_data->configured) {
   12a00:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   12a04:	b19a      	cbz	r2, 12a2e <cdc_acm_do_cb+0x4e>
		if (!dev_data->tx_ready) {
   12a06:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   12a0a:	2b00      	cmp	r3, #0
   12a0c:	d1f7      	bne.n	129fe <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
   12a0e:	2301      	movs	r3, #1
   12a10:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   12a14:	6823      	ldr	r3, [r4, #0]
   12a16:	2b00      	cmp	r3, #0
   12a18:	d0f1      	beq.n	129fe <cdc_acm_do_cb+0x1e>
   12a1a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d0ed      	beq.n	129fe <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   12a22:	f104 0108 	add.w	r1, r4, #8
   12a26:	480e      	ldr	r0, [pc, #56]	; (12a60 <cdc_acm_do_cb+0x80>)
   12a28:	f011 feb4 	bl	24794 <k_work_submit_to_queue>
   12a2c:	e7e7      	b.n	129fe <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   12a2e:	6a1b      	ldr	r3, [r3, #32]
   12a30:	4602      	mov	r2, r0
   12a32:	2100      	movs	r1, #0
   12a34:	7b18      	ldrb	r0, [r3, #12]
   12a36:	f7ff ff75 	bl	12924 <cdc_acm_read_cb>
			dev_data->configured = true;
   12a3a:	2301      	movs	r3, #1
   12a3c:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
   12a40:	e7e1      	b.n	12a06 <cdc_acm_do_cb+0x26>
		cdc_acm_reset_port(dev_data);
   12a42:	f7ff ffa7 	bl	12994 <cdc_acm_reset_port>
		break;
   12a46:	e7da      	b.n	129fe <cdc_acm_do_cb+0x1e>
		dev_data->suspended = true;
   12a48:	2301      	movs	r3, #1
   12a4a:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
		break;
   12a4e:	e7d6      	b.n	129fe <cdc_acm_do_cb+0x1e>
		if (dev_data->suspended) {
   12a50:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
   12a54:	2b00      	cmp	r3, #0
   12a56:	d0d2      	beq.n	129fe <cdc_acm_do_cb+0x1e>
			dev_data->suspended = false;
   12a58:	2300      	movs	r3, #0
   12a5a:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
}
   12a5e:	e7ce      	b.n	129fe <cdc_acm_do_cb+0x1e>
   12a60:	20001888 	.word	0x20001888

00012a64 <cdc_acm_dev_status_cb>:
{
   12a64:	b538      	push	{r3, r4, r5, lr}
   12a66:	460c      	mov	r4, r1
   12a68:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   12a6a:	4601      	mov	r1, r0
   12a6c:	4804      	ldr	r0, [pc, #16]	; (12a80 <cdc_acm_dev_status_cb+0x1c>)
   12a6e:	f00e ff8c 	bl	2198a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   12a72:	b120      	cbz	r0, 12a7e <cdc_acm_dev_status_cb+0x1a>
	cdc_acm_do_cb(dev_data, status, param);
   12a74:	462a      	mov	r2, r5
   12a76:	4621      	mov	r1, r4
   12a78:	38a4      	subs	r0, #164	; 0xa4
   12a7a:	f7ff ffb1 	bl	129e0 <cdc_acm_do_cb>
}
   12a7e:	bd38      	pop	{r3, r4, r5, pc}
   12a80:	20002950 	.word	0x20002950

00012a84 <cdc_acm_fifo_fill>:
{
   12a84:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12a86:	6904      	ldr	r4, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   12a88:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   12a8c:	b1a3      	cbz	r3, 12ab8 <cdc_acm_fifo_fill+0x34>
   12a8e:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   12a92:	b10b      	cbz	r3, 12a98 <cdc_acm_fifo_fill+0x14>
		return 0;
   12a94:	2000      	movs	r0, #0
   12a96:	e010      	b.n	12aba <cdc_acm_fifo_fill+0x36>
	dev_data->tx_ready = false;
   12a98:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   12a9c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   12aa0:	f00d ffbd 	bl	20a1e <ring_buf_put>
   12aa4:	4605      	mov	r5, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   12aa6:	2200      	movs	r2, #0
   12aa8:	2300      	movs	r3, #0
   12aaa:	f104 0118 	add.w	r1, r4, #24
   12aae:	4803      	ldr	r0, [pc, #12]	; (12abc <cdc_acm_fifo_fill+0x38>)
   12ab0:	f011 fe86 	bl	247c0 <k_work_schedule_for_queue>
	return wrote;
   12ab4:	4628      	mov	r0, r5
   12ab6:	e000      	b.n	12aba <cdc_acm_fifo_fill+0x36>
		return 0;
   12ab8:	2000      	movs	r0, #0
}
   12aba:	bd38      	pop	{r3, r4, r5, pc}
   12abc:	20001888 	.word	0x20001888

00012ac0 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   12ac0:	b510      	push	{r4, lr}
   12ac2:	b082      	sub	sp, #8
   12ac4:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12ac8:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
   12aca:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   12ace:	b113      	cbz	r3, 12ad6 <cdc_acm_poll_out+0x16>
   12ad0:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   12ad4:	b10b      	cbz	r3, 12ada <cdc_acm_poll_out+0x1a>
	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
}
   12ad6:	b002      	add	sp, #8
   12ad8:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
   12ada:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   12ade:	2201      	movs	r2, #1
   12ae0:	f10d 0107 	add.w	r1, sp, #7
   12ae4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   12ae8:	f00d ff99 	bl	20a1e <ring_buf_put>
   12aec:	b980      	cbnz	r0, 12b10 <cdc_acm_poll_out+0x50>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   12aee:	2201      	movs	r2, #1
   12af0:	2100      	movs	r1, #0
   12af2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   12af6:	f00d ffed 	bl	20ad4 <ring_buf_get>
   12afa:	2800      	cmp	r0, #0
   12afc:	d0eb      	beq.n	12ad6 <cdc_acm_poll_out+0x16>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   12afe:	2201      	movs	r2, #1
   12b00:	f10d 0107 	add.w	r1, sp, #7
   12b04:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   12b08:	f00d ff89 	bl	20a1e <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   12b0c:	2800      	cmp	r0, #0
   12b0e:	d0e2      	beq.n	12ad6 <cdc_acm_poll_out+0x16>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
   12b10:	2201      	movs	r2, #1
   12b12:	2300      	movs	r3, #0
   12b14:	f104 0118 	add.w	r1, r4, #24
   12b18:	4801      	ldr	r0, [pc, #4]	; (12b20 <cdc_acm_poll_out+0x60>)
   12b1a:	f011 fe51 	bl	247c0 <k_work_schedule_for_queue>
   12b1e:	e7da      	b.n	12ad6 <cdc_acm_poll_out+0x16>
   12b20:	20001888 	.word	0x20001888

00012b24 <cdc_acm_write_cb>:
{
   12b24:	b510      	push	{r4, lr}
   12b26:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
   12b28:	2301      	movs	r3, #1
   12b2a:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
   12b2e:	6813      	ldr	r3, [r2, #0]
   12b30:	b113      	cbz	r3, 12b38 <cdc_acm_write_cb+0x14>
   12b32:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
   12b36:	b96b      	cbnz	r3, 12b54 <cdc_acm_write_cb+0x30>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   12b38:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	return buf->get_head == buf->put_tail;
   12b3c:	691a      	ldr	r2, [r3, #16]
   12b3e:	689b      	ldr	r3, [r3, #8]
   12b40:	4293      	cmp	r3, r2
   12b42:	d006      	beq.n	12b52 <cdc_acm_write_cb+0x2e>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   12b44:	2200      	movs	r2, #0
   12b46:	2300      	movs	r3, #0
   12b48:	f104 0118 	add.w	r1, r4, #24
   12b4c:	4804      	ldr	r0, [pc, #16]	; (12b60 <cdc_acm_write_cb+0x3c>)
   12b4e:	f011 fe37 	bl	247c0 <k_work_schedule_for_queue>
}
   12b52:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   12b54:	f102 0108 	add.w	r1, r2, #8
   12b58:	4801      	ldr	r0, [pc, #4]	; (12b60 <cdc_acm_write_cb+0x3c>)
   12b5a:	f011 fe1b 	bl	24794 <k_work_submit_to_queue>
   12b5e:	e7eb      	b.n	12b38 <cdc_acm_write_cb+0x14>
   12b60:	20001888 	.word	0x20001888

00012b64 <cdc_acm_init>:
{
   12b64:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   12b66:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
   12b68:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   12b6c:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
	parent->next = child;
   12b70:	2200      	movs	r2, #0
   12b72:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
	return list->tail;
   12b76:	4a0b      	ldr	r2, [pc, #44]	; (12ba4 <cdc_acm_init+0x40>)
   12b78:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12b7a:	b172      	cbz	r2, 12b9a <cdc_acm_init+0x36>
	parent->next = child;
   12b7c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12b7e:	4a09      	ldr	r2, [pc, #36]	; (12ba4 <cdc_acm_init+0x40>)
   12b80:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   12b82:	4909      	ldr	r1, [pc, #36]	; (12ba8 <cdc_acm_init+0x44>)
   12b84:	f104 0008 	add.w	r0, r4, #8
   12b88:	f011 fde8 	bl	2475c <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
   12b8c:	4907      	ldr	r1, [pc, #28]	; (12bac <cdc_acm_init+0x48>)
   12b8e:	f104 0018 	add.w	r0, r4, #24
   12b92:	f011 fe09 	bl	247a8 <k_work_init_delayable>
}
   12b96:	2000      	movs	r0, #0
   12b98:	bd10      	pop	{r4, pc}
   12b9a:	4a02      	ldr	r2, [pc, #8]	; (12ba4 <cdc_acm_init+0x40>)
   12b9c:	6053      	str	r3, [r2, #4]
	list->head = node;
   12b9e:	6013      	str	r3, [r2, #0]
}
   12ba0:	e7ef      	b.n	12b82 <cdc_acm_init+0x1e>
   12ba2:	bf00      	nop
   12ba4:	20002950 	.word	0x20002950
   12ba8:	00021a3f 	.word	0x00021a3f
   12bac:	00012bb1 	.word	0x00012bb1

00012bb0 <tx_work_handler>:
{
   12bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bb2:	b085      	sub	sp, #20
   12bb4:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
   12bb6:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
   12bba:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	struct usb_cfg_data *cfg = (void *)dev->config;
   12bbe:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   12bc0:	6a1b      	ldr	r3, [r3, #32]
   12bc2:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
   12bc4:	4628      	mov	r0, r5
   12bc6:	f00e ff22 	bl	21a0e <usb_transfer_is_busy>
   12bca:	b108      	cbz	r0, 12bd0 <tx_work_handler+0x20>
}
   12bcc:	b005      	add	sp, #20
   12bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   12bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12bd4:	a903      	add	r1, sp, #12
   12bd6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   12bd8:	f00d ff41 	bl	20a5e <ring_buf_get_claim>
	if (!len) {
   12bdc:	4606      	mov	r6, r0
   12bde:	2800      	cmp	r0, #0
   12be0:	d0f4      	beq.n	12bcc <tx_work_handler+0x1c>
	dev_data->tx_ready = false;
   12be2:	2300      	movs	r3, #0
   12be4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   12be8:	f010 0f3f 	tst.w	r0, #63	; 0x3f
   12bec:	d100      	bne.n	12bf0 <tx_work_handler+0x40>
		len -= 1;
   12bee:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   12bf0:	9701      	str	r7, [sp, #4]
   12bf2:	4b06      	ldr	r3, [pc, #24]	; (12c0c <tx_work_handler+0x5c>)
   12bf4:	9300      	str	r3, [sp, #0]
   12bf6:	2302      	movs	r3, #2
   12bf8:	4632      	mov	r2, r6
   12bfa:	9903      	ldr	r1, [sp, #12]
   12bfc:	4628      	mov	r0, r5
   12bfe:	f7ff fd43 	bl	12688 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   12c02:	4631      	mov	r1, r6
   12c04:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   12c06:	f00d ff47 	bl	20a98 <ring_buf_get_finish>
   12c0a:	e7df      	b.n	12bcc <tx_work_handler+0x1c>
   12c0c:	00012b25 	.word	0x00012b25

00012c10 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
   12c10:	b530      	push	{r4, r5, lr}
   12c12:	b083      	sub	sp, #12

	k_work_queue_start(&z_usb_work_q,
   12c14:	4d08      	ldr	r5, [pc, #32]	; (12c38 <z_usb_work_q_init+0x28>)
   12c16:	2400      	movs	r4, #0
   12c18:	9400      	str	r4, [sp, #0]
   12c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12c22:	4906      	ldr	r1, [pc, #24]	; (12c3c <z_usb_work_q_init+0x2c>)
   12c24:	4628      	mov	r0, r5
   12c26:	f7fa fcbf 	bl	d5a8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   12c2a:	4905      	ldr	r1, [pc, #20]	; (12c40 <z_usb_work_q_init+0x30>)
   12c2c:	4628      	mov	r0, r5
   12c2e:	f006 fba9 	bl	19384 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   12c32:	4620      	mov	r0, r4
   12c34:	b003      	add	sp, #12
   12c36:	bd30      	pop	{r4, r5, pc}
   12c38:	20001888 	.word	0x20001888
   12c3c:	20006500 	.word	0x20006500
   12c40:	000264d8 	.word	0x000264d8

00012c44 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   12c44:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   12c46:	4802      	ldr	r0, [pc, #8]	; (12c50 <nrf_cc3xx_platform_abort_init+0xc>)
   12c48:	f009 ff34 	bl	1cab4 <nrf_cc3xx_platform_set_abort>
}
   12c4c:	bd08      	pop	{r3, pc}
   12c4e:	bf00      	nop
   12c50:	000264e4 	.word	0x000264e4

00012c54 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
   12c54:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
   12c58:	d017      	beq.n	12c8a <mutex_flags_unknown+0x36>
   12c5a:	d80c      	bhi.n	12c76 <mutex_flags_unknown+0x22>
   12c5c:	f640 63ba 	movw	r3, #3770	; 0xeba
   12c60:	4298      	cmp	r0, r3
   12c62:	d014      	beq.n	12c8e <mutex_flags_unknown+0x3a>
   12c64:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
   12c68:	d013      	beq.n	12c92 <mutex_flags_unknown+0x3e>
   12c6a:	283a      	cmp	r0, #58	; 0x3a
   12c6c:	d001      	beq.n	12c72 <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
   12c6e:	2001      	movs	r0, #1
   12c70:	4770      	bx	lr
    switch(flags){
   12c72:	2000      	movs	r0, #0
   12c74:	4770      	bx	lr
   12c76:	4b09      	ldr	r3, [pc, #36]	; (12c9c <mutex_flags_unknown+0x48>)
   12c78:	4298      	cmp	r0, r3
   12c7a:	d00c      	beq.n	12c96 <mutex_flags_unknown+0x42>
   12c7c:	4b08      	ldr	r3, [pc, #32]	; (12ca0 <mutex_flags_unknown+0x4c>)
   12c7e:	4298      	cmp	r0, r3
   12c80:	d001      	beq.n	12c86 <mutex_flags_unknown+0x32>
            return true;
   12c82:	2001      	movs	r0, #1
    }
}
   12c84:	4770      	bx	lr
    switch(flags){
   12c86:	2000      	movs	r0, #0
   12c88:	4770      	bx	lr
   12c8a:	2000      	movs	r0, #0
   12c8c:	4770      	bx	lr
   12c8e:	2000      	movs	r0, #0
   12c90:	4770      	bx	lr
   12c92:	2000      	movs	r0, #0
   12c94:	4770      	bx	lr
   12c96:	2000      	movs	r0, #0
   12c98:	4770      	bx	lr
   12c9a:	bf00      	nop
   12c9c:	3a00003a 	.word	0x3a00003a
   12ca0:	a95c5f2c 	.word	0xa95c5f2c

00012ca4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12ca4:	b1e8      	cbz	r0, 12ce2 <mutex_unlock_platform+0x3e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12ca6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12ca8:	6842      	ldr	r2, [r0, #4]
   12caa:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
   12cae:	d007      	beq.n	12cc0 <mutex_unlock_platform+0x1c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12cb0:	490f      	ldr	r1, [pc, #60]	; (12cf0 <mutex_unlock_platform+0x4c>)
   12cb2:	428a      	cmp	r2, r1
   12cb4:	d01a      	beq.n	12cec <mutex_unlock_platform+0x48>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   12cb6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12cb8:	f006 fcc2 	bl	19640 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12cbc:	2000      	movs	r0, #0
    }
}
   12cbe:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   12cc0:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12cc2:	2200      	movs	r2, #0
   12cc4:	f3bf 8f5b 	dmb	ish
   12cc8:	e853 1f00 	ldrex	r1, [r3]
   12ccc:	2901      	cmp	r1, #1
   12cce:	d103      	bne.n	12cd8 <mutex_unlock_platform+0x34>
   12cd0:	e843 2000 	strex	r0, r2, [r3]
   12cd4:	2800      	cmp	r0, #0
   12cd6:	d1f7      	bne.n	12cc8 <mutex_unlock_platform+0x24>
   12cd8:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12cdc:	d104      	bne.n	12ce8 <mutex_unlock_platform+0x44>
   12cde:	4610      	mov	r0, r2
   12ce0:	e7ed      	b.n	12cbe <mutex_unlock_platform+0x1a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12ce2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   12ce6:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12ce8:	4802      	ldr	r0, [pc, #8]	; (12cf4 <mutex_unlock_platform+0x50>)
   12cea:	e7e8      	b.n	12cbe <mutex_unlock_platform+0x1a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12cec:	4802      	ldr	r0, [pc, #8]	; (12cf8 <mutex_unlock_platform+0x54>)
   12cee:	e7e6      	b.n	12cbe <mutex_unlock_platform+0x1a>
   12cf0:	a95c5f2c 	.word	0xa95c5f2c
   12cf4:	ffff8fe9 	.word	0xffff8fe9
   12cf8:	ffff8fea 	.word	0xffff8fea

00012cfc <mutex_lock_platform>:
    if(mutex == NULL) {
   12cfc:	b330      	cbz	r0, 12d4c <mutex_lock_platform+0x50>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12cfe:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   12d00:	6842      	ldr	r2, [r0, #4]
   12d02:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
   12d06:	d00c      	beq.n	12d22 <mutex_lock_platform+0x26>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12d08:	4912      	ldr	r1, [pc, #72]	; (12d54 <mutex_lock_platform+0x58>)
   12d0a:	428a      	cmp	r2, r1
   12d0c:	d01c      	beq.n	12d48 <mutex_lock_platform+0x4c>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12d0e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   12d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d18:	f006 fc0e 	bl	19538 <z_impl_k_mutex_lock>
        if (ret == 0) {
   12d1c:	b188      	cbz	r0, 12d42 <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   12d1e:	480e      	ldr	r0, [pc, #56]	; (12d58 <mutex_lock_platform+0x5c>)
   12d20:	e00f      	b.n	12d42 <mutex_lock_platform+0x46>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   12d22:	6803      	ldr	r3, [r0, #0]
   12d24:	2201      	movs	r2, #1
   12d26:	f3bf 8f5b 	dmb	ish
   12d2a:	e853 1f00 	ldrex	r1, [r3]
   12d2e:	2900      	cmp	r1, #0
   12d30:	d103      	bne.n	12d3a <mutex_lock_platform+0x3e>
   12d32:	e843 2000 	strex	r0, r2, [r3]
   12d36:	2800      	cmp	r0, #0
   12d38:	d1f7      	bne.n	12d2a <mutex_lock_platform+0x2e>
   12d3a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12d3e:	d101      	bne.n	12d44 <mutex_lock_platform+0x48>
   12d40:	2000      	movs	r0, #0
}
   12d42:	bd08      	pop	{r3, pc}
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12d44:	4804      	ldr	r0, [pc, #16]	; (12d58 <mutex_lock_platform+0x5c>)
   12d46:	e7fc      	b.n	12d42 <mutex_lock_platform+0x46>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12d48:	4804      	ldr	r0, [pc, #16]	; (12d5c <mutex_lock_platform+0x60>)
   12d4a:	e7fa      	b.n	12d42 <mutex_lock_platform+0x46>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12d4c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   12d50:	4770      	bx	lr
   12d52:	bf00      	nop
   12d54:	a95c5f2c 	.word	0xa95c5f2c
   12d58:	ffff8fe9 	.word	0xffff8fe9
   12d5c:	ffff8fea 	.word	0xffff8fea

00012d60 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12d60:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12d62:	4604      	mov	r4, r0
   12d64:	b1b0      	cbz	r0, 12d94 <mutex_free_platform+0x34>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12d66:	6863      	ldr	r3, [r4, #4]
   12d68:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12d6c:	d011      	beq.n	12d92 <mutex_free_platform+0x32>
   12d6e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   12d72:	d00e      	beq.n	12d92 <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12d74:	4a0d      	ldr	r2, [pc, #52]	; (12dac <mutex_free_platform+0x4c>)
   12d76:	4293      	cmp	r3, r2
   12d78:	d00b      	beq.n	12d92 <mutex_free_platform+0x32>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   12d7a:	f413 6f68 	tst.w	r3, #3712	; 0xe80
   12d7e:	d10e      	bne.n	12d9e <mutex_free_platform+0x3e>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12d80:	6823      	ldr	r3, [r4, #0]
   12d82:	2200      	movs	r2, #0
   12d84:	601a      	str	r2, [r3, #0]
   12d86:	605a      	str	r2, [r3, #4]
   12d88:	609a      	str	r2, [r3, #8]
   12d8a:	60da      	str	r2, [r3, #12]
   12d8c:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12d8e:	4b07      	ldr	r3, [pc, #28]	; (12dac <mutex_free_platform+0x4c>)
   12d90:	6063      	str	r3, [r4, #4]
}
   12d92:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   12d94:	4b06      	ldr	r3, [pc, #24]	; (12db0 <mutex_free_platform+0x50>)
   12d96:	685b      	ldr	r3, [r3, #4]
   12d98:	4806      	ldr	r0, [pc, #24]	; (12db4 <mutex_free_platform+0x54>)
   12d9a:	4798      	blx	r3
   12d9c:	e7e3      	b.n	12d66 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   12d9e:	4621      	mov	r1, r4
   12da0:	4805      	ldr	r0, [pc, #20]	; (12db8 <mutex_free_platform+0x58>)
   12da2:	f011 fb03 	bl	243ac <k_mem_slab_free>
        mutex->mutex = NULL;
   12da6:	2300      	movs	r3, #0
   12da8:	6023      	str	r3, [r4, #0]
   12daa:	e7f0      	b.n	12d8e <mutex_free_platform+0x2e>
   12dac:	a95c5f2c 	.word	0xa95c5f2c
   12db0:	20000780 	.word	0x20000780
   12db4:	000264ec 	.word	0x000264ec
   12db8:	20002e58 	.word	0x20002e58

00012dbc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12dbc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12dbe:	4604      	mov	r4, r0
   12dc0:	b368      	cbz	r0, 12e1e <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12dc2:	6860      	ldr	r0, [r4, #4]
   12dc4:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
   12dc8:	d028      	beq.n	12e1c <mutex_init_platform+0x60>
   12dca:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
   12dce:	d025      	beq.n	12e1c <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   12dd0:	4b17      	ldr	r3, [pc, #92]	; (12e30 <mutex_init_platform+0x74>)
   12dd2:	4298      	cmp	r0, r3
   12dd4:	d028      	beq.n	12e28 <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
   12dd6:	f7ff ff3d 	bl	12c54 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   12dda:	b1c0      	cbz	r0, 12e0e <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12de4:	4621      	mov	r1, r4
   12de6:	4813      	ldr	r0, [pc, #76]	; (12e34 <mutex_init_platform+0x78>)
   12de8:	f006 fa78 	bl	192dc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12dec:	b908      	cbnz	r0, 12df2 <mutex_init_platform+0x36>
   12dee:	6823      	ldr	r3, [r4, #0]
   12df0:	b91b      	cbnz	r3, 12dfa <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
   12df2:	4b11      	ldr	r3, [pc, #68]	; (12e38 <mutex_init_platform+0x7c>)
   12df4:	685b      	ldr	r3, [r3, #4]
   12df6:	4811      	ldr	r0, [pc, #68]	; (12e3c <mutex_init_platform+0x80>)
   12df8:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12dfa:	6823      	ldr	r3, [r4, #0]
   12dfc:	2200      	movs	r2, #0
   12dfe:	601a      	str	r2, [r3, #0]
   12e00:	605a      	str	r2, [r3, #4]
   12e02:	609a      	str	r2, [r3, #8]
   12e04:	60da      	str	r2, [r3, #12]
   12e06:	611a      	str	r2, [r3, #16]
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   12e08:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   12e0c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   12e0e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   12e10:	f011 fb63 	bl	244da <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12e14:	6863      	ldr	r3, [r4, #4]
   12e16:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   12e1a:	6063      	str	r3, [r4, #4]
}
   12e1c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   12e1e:	4b06      	ldr	r3, [pc, #24]	; (12e38 <mutex_init_platform+0x7c>)
   12e20:	685b      	ldr	r3, [r3, #4]
   12e22:	4807      	ldr	r0, [pc, #28]	; (12e40 <mutex_init_platform+0x84>)
   12e24:	4798      	blx	r3
   12e26:	e7cc      	b.n	12dc2 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   12e28:	6823      	ldr	r3, [r4, #0]
   12e2a:	2b00      	cmp	r3, #0
   12e2c:	d1d3      	bne.n	12dd6 <mutex_init_platform+0x1a>
   12e2e:	e7d5      	b.n	12ddc <mutex_init_platform+0x20>
   12e30:	a95c5f2c 	.word	0xa95c5f2c
   12e34:	20002e58 	.word	0x20002e58
   12e38:	20000780 	.word	0x20000780
   12e3c:	00026514 	.word	0x00026514
   12e40:	000264ec 	.word	0x000264ec

00012e44 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12e44:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   12e46:	2340      	movs	r3, #64	; 0x40
   12e48:	2214      	movs	r2, #20
   12e4a:	4904      	ldr	r1, [pc, #16]	; (12e5c <nrf_cc3xx_platform_mutex_init+0x18>)
   12e4c:	4804      	ldr	r0, [pc, #16]	; (12e60 <nrf_cc3xx_platform_mutex_init+0x1c>)
   12e4e:	f011 fa9f 	bl	24390 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   12e52:	4904      	ldr	r1, [pc, #16]	; (12e64 <nrf_cc3xx_platform_mutex_init+0x20>)
   12e54:	4804      	ldr	r0, [pc, #16]	; (12e68 <nrf_cc3xx_platform_mutex_init+0x24>)
   12e56:	f009 fef1 	bl	1cc3c <nrf_cc3xx_platform_set_mutexes>
}
   12e5a:	bd08      	pop	{r3, pc}
   12e5c:	20002958 	.word	0x20002958
   12e60:	20002e58 	.word	0x20002e58
   12e64:	00026544 	.word	0x00026544
   12e68:	00026558 	.word	0x00026558

00012e6c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12e6c:	4901      	ldr	r1, [pc, #4]	; (12e74 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12e6e:	2210      	movs	r2, #16
	str	r2, [r1]
   12e70:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12e72:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12e74:	e000ed10 	.word	0xe000ed10

00012e78 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12e78:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12e7a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12e7c:	f380 8811 	msr	BASEPRI, r0
	isb
   12e80:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   12e84:	f3bf 8f4f 	dsb	sy
   12e88:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12e8a:	b662      	cpsie	i
	isb
   12e8c:	f3bf 8f6f 	isb	sy

	bx	lr
   12e90:	4770      	bx	lr
   12e92:	bf00      	nop

00012e94 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12e94:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12e96:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12e98:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   12e9c:	f3bf 8f4f 	dsb	sy
   12ea0:	bf20      	wfe

	msr	BASEPRI, r0
   12ea2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12ea6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12ea8:	4770      	bx	lr
   12eaa:	bf00      	nop

00012eac <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
   12eac:	2800      	cmp	r0, #0
   12eae:	db07      	blt.n	12ec0 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12eb0:	f000 021f 	and.w	r2, r0, #31
   12eb4:	0940      	lsrs	r0, r0, #5
   12eb6:	2301      	movs	r3, #1
   12eb8:	4093      	lsls	r3, r2
   12eba:	4a02      	ldr	r2, [pc, #8]	; (12ec4 <__NVIC_EnableIRQ+0x18>)
   12ebc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   12ec0:	4770      	bx	lr
   12ec2:	bf00      	nop
   12ec4:	e000e100 	.word	0xe000e100

00012ec8 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
   12ec8:	2800      	cmp	r0, #0
   12eca:	db0c      	blt.n	12ee6 <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12ecc:	f000 021f 	and.w	r2, r0, #31
   12ed0:	0940      	lsrs	r0, r0, #5
   12ed2:	2301      	movs	r3, #1
   12ed4:	4093      	lsls	r3, r2
   12ed6:	3020      	adds	r0, #32
   12ed8:	4a03      	ldr	r2, [pc, #12]	; (12ee8 <__NVIC_DisableIRQ+0x20>)
   12eda:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12ee2:	f3bf 8f6f 	isb	sy
}
   12ee6:	4770      	bx	lr
   12ee8:	e000e100 	.word	0xe000e100

00012eec <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12eec:	2800      	cmp	r0, #0
   12eee:	db08      	blt.n	12f02 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12ef0:	0149      	lsls	r1, r1, #5
   12ef2:	b2c9      	uxtb	r1, r1
   12ef4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   12ef8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   12efc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   12f00:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f02:	f000 000f 	and.w	r0, r0, #15
   12f06:	0149      	lsls	r1, r1, #5
   12f08:	b2c9      	uxtb	r1, r1
   12f0a:	4b01      	ldr	r3, [pc, #4]	; (12f10 <__NVIC_SetPriority+0x24>)
   12f0c:	5419      	strb	r1, [r3, r0]
  }
}
   12f0e:	4770      	bx	lr
   12f10:	e000ed14 	.word	0xe000ed14

00012f14 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12f14:	0942      	lsrs	r2, r0, #5
   12f16:	4b05      	ldr	r3, [pc, #20]	; (12f2c <arch_irq_is_enabled+0x18>)
   12f18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12f1c:	f000 001f 	and.w	r0, r0, #31
   12f20:	2301      	movs	r3, #1
   12f22:	fa03 f000 	lsl.w	r0, r3, r0
}
   12f26:	4010      	ands	r0, r2
   12f28:	4770      	bx	lr
   12f2a:	bf00      	nop
   12f2c:	e000e100 	.word	0xe000e100

00012f30 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12f30:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   12f32:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12f34:	4b05      	ldr	r3, [pc, #20]	; (12f4c <_arch_isr_direct_pm+0x1c>)
   12f36:	699b      	ldr	r3, [r3, #24]
   12f38:	b90b      	cbnz	r3, 12f3e <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12f3a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12f3c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   12f3e:	4b03      	ldr	r3, [pc, #12]	; (12f4c <_arch_isr_direct_pm+0x1c>)
   12f40:	2200      	movs	r2, #0
   12f42:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   12f44:	f011 faad 	bl	244a2 <z_pm_save_idle_exit>
   12f48:	e7f7      	b.n	12f3a <_arch_isr_direct_pm+0xa>
   12f4a:	bf00      	nop
   12f4c:	20004084 	.word	0x20004084

00012f50 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12f50:	bf30      	wfi
    b z_SysNmiOnReset
   12f52:	f7ff bffd 	b.w	12f50 <z_SysNmiOnReset>
   12f56:	bf00      	nop

00012f58 <z_arm_floating_point_init>:
	/*
	 * Upon reset, the Co-Processor Access Control Register is, normally,
	 * 0x00000000. However, it might be left un-cleared by firmware running
	 * before Zephyr boot.
	 */
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12f58:	4b0c      	ldr	r3, [pc, #48]	; (12f8c <z_arm_floating_point_init+0x34>)
   12f5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12f5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if defined(CONFIG_USERSPACE)
	/* Full access */
	SCB->CPACR |= CPACR_CP10_FULL_ACCESS | CPACR_CP11_FULL_ACCESS;
#else
	/* Privileged access only */
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   12f66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12f6a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   12f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	 * be reserved for them. This configuration improves interrupt latency.
	 * The registers will eventually be stacked when the thread is swapped
	 * out during context-switch or if an ISR attempts to execute floating
	 * point instructions.
	 */
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   12f72:	f503 7300 	add.w	r3, r3, #512	; 0x200
   12f76:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   12f7a:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("dsb 0xF":::"memory");
   12f7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12f80:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   12f84:	2300      	movs	r3, #0
   12f86:	eee1 3a10 	vmsr	fpscr, r3
#if (!defined(CONFIG_FPU) || !defined(CONFIG_FPU_SHARING)) && \
	(!defined(CONFIG_INIT_ARCH_HW_AT_BOOT))

	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
#endif
}
   12f8a:	4770      	bx	lr
   12f8c:	e000ed00 	.word	0xe000ed00

00012f90 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   12f90:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12f92:	4b09      	ldr	r3, [pc, #36]	; (12fb8 <z_arm_prep_c+0x28>)
   12f94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   12f98:	4a08      	ldr	r2, [pc, #32]	; (12fbc <z_arm_prep_c+0x2c>)
   12f9a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12f9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12fa0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
   12fa4:	f7ff ffd8 	bl	12f58 <z_arm_floating_point_init>
#endif
	z_bss_zero();
   12fa8:	f006 f8cc 	bl	19144 <z_bss_zero>
	z_data_copy();
   12fac:	f007 f900 	bl	1a1b0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12fb0:	f000 fb10 	bl	135d4 <z_arm_interrupt_init>
	z_cstart();
   12fb4:	f006 f926 	bl	19204 <z_cstart>
   12fb8:	00001000 	.word	0x00001000
   12fbc:	e000ed00 	.word	0xe000ed00

00012fc0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12fc0:	4a0a      	ldr	r2, [pc, #40]	; (12fec <arch_swap+0x2c>)
   12fc2:	6893      	ldr	r3, [r2, #8]
   12fc4:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   12fc8:	4909      	ldr	r1, [pc, #36]	; (12ff0 <arch_swap+0x30>)
   12fca:	6809      	ldr	r1, [r1, #0]
   12fcc:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12fd0:	4908      	ldr	r1, [pc, #32]	; (12ff4 <arch_swap+0x34>)
   12fd2:	684b      	ldr	r3, [r1, #4]
   12fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12fd8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   12fda:	2300      	movs	r3, #0
   12fdc:	f383 8811 	msr	BASEPRI, r3
   12fe0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12fe4:	6893      	ldr	r3, [r2, #8]
}
   12fe6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   12fea:	4770      	bx	lr
   12fec:	20004084 	.word	0x20004084
   12ff0:	00026b20 	.word	0x00026b20
   12ff4:	e000ed00 	.word	0xe000ed00

00012ff8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12ff8:	4922      	ldr	r1, [pc, #136]	; (13084 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12ffa:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   12ffc:	f882 e0f5 	strb.w	lr, [r2, #245]	; 0xf5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13000:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13004:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13006:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1300a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   1300e:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   13012:	d103      	bne.n	1301c <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   13014:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vstmia r0, {s16-s31}
   13018:	ec80 8a10 	vstmia	r0, {s16-s31}

0001301c <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1301c:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1301e:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13022:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13026:	4f18      	ldr	r7, [pc, #96]	; (13088 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13028:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1302c:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1302e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13030:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   13032:	f992 e0f5 	ldrsb.w	lr, [r2, #245]	; 0xf5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13036:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   1303a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1303c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13040:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   13044:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   13048:	d003      	beq.n	13052 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   1304a:	2300      	movs	r3, #0
    vmsr fpscr, r3
   1304c:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   13050:	e003      	b.n	1305a <in_fp_endif>

00013052 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   13052:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vldmia r0, {s16-s31}
   13056:	ec90 8a10 	vldmia	r0, {s16-s31}

0001305a <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1305a:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   1305e:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   13062:	f383 8814 	msr	CONTROL, r3
    isb
   13066:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1306a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1306c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1306e:	f000 fb61 	bl	13734 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13072:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13076:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1307a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1307e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13082:	4770      	bx	lr
    ldr r1, =_kernel
   13084:	20004084 	.word	0x20004084
    ldr v4, =_SCS_ICSR
   13088:	e000ed04 	.word	0xe000ed04

0001308c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1308c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13090:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13092:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13096:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1309a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1309c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   130a0:	2902      	cmp	r1, #2
    beq _oops
   130a2:	d0ff      	beq.n	130a4 <_oops>

000130a4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   130a4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   130a6:	f00e fd8c 	bl	21bc2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   130aa:	bd01      	pop	{r0, pc}

000130ac <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   130ac:	b410      	push	{r4}
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   130ae:	7b01      	ldrb	r1, [r0, #12]
   130b0:	f011 0f02 	tst.w	r1, #2
   130b4:	d009      	beq.n	130ca <arch_new_thread+0x1e>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
   130b6:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
   130ba:	3140      	adds	r1, #64	; 0x40
   130bc:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
   130c0:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
   130c4:	3940      	subs	r1, #64	; 0x40
   130c6:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   130ca:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   130ce:	4915      	ldr	r1, [pc, #84]	; (13124 <arch_new_thread+0x78>)
   130d0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   130d4:	f021 0101 	bic.w	r1, r1, #1
   130d8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   130dc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   130e0:	9b01      	ldr	r3, [sp, #4]
   130e2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   130e6:	9b02      	ldr	r3, [sp, #8]
   130e8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   130ec:	9b03      	ldr	r3, [sp, #12]
   130ee:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   130f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   130f6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   130fa:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   130fc:	2300      	movs	r3, #0
   130fe:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   13102:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   13106:	23fd      	movs	r3, #253	; 0xfd
   13108:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   1310c:	7b03      	ldrb	r3, [r0, #12]
   1310e:	f013 0f02 	tst.w	r3, #2
   13112:	d003      	beq.n	1311c <arch_new_thread+0x70>
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   13114:	f64f 5308 	movw	r3, #64776	; 0xfd08
   13118:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1311c:	f85d 4b04 	ldr.w	r4, [sp], #4
   13120:	4770      	bx	lr
   13122:	bf00      	nop
   13124:	0001fd0d 	.word	0x0001fd0d

00013128 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   13128:	7b03      	ldrb	r3, [r0, #12]
   1312a:	f013 0f02 	tst.w	r3, #2
   1312e:	d11e      	bne.n	1316e <z_arm_mpu_stack_guard_and_fpu_adjust+0x46>
		((thread->arch.mode_exc_return & EXC_RETURN_FTYPE) == 0)) {
   13130:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   13134:	f013 0f10 	tst.w	r3, #16
   13138:	d019      	beq.n	1316e <z_arm_mpu_stack_guard_and_fpu_adjust+0x46>
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
   1313a:	4a1d      	ldr	r2, [pc, #116]	; (131b0 <z_arm_mpu_stack_guard_and_fpu_adjust+0x88>)
   1313c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1313e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   13142:	6353      	str	r3, [r2, #52]	; 0x34
		if ((thread->arch.mode &
   13144:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   13148:	f013 0f08 	tst.w	r3, #8
   1314c:	d02d      	beq.n	131aa <z_arm_mpu_stack_guard_and_fpu_adjust+0x82>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   1314e:	f023 0308 	bic.w	r3, r3, #8
   13152:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start -=
   13156:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1315a:	3b40      	subs	r3, #64	; 0x40
   1315c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size +=
   13160:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   13164:	3340      	adds	r3, #64	; 0x40
   13166:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
   1316a:	2040      	movs	r0, #64	; 0x40
   1316c:	4770      	bx	lr
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
   1316e:	4a10      	ldr	r2, [pc, #64]	; (131b0 <z_arm_mpu_stack_guard_and_fpu_adjust+0x88>)
   13170:	6b53      	ldr	r3, [r2, #52]	; 0x34
   13172:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   13176:	6353      	str	r3, [r2, #52]	; 0x34
		if ((thread->arch.mode &
   13178:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1317c:	f013 0f08 	tst.w	r3, #8
   13180:	d10d      	bne.n	1319e <z_arm_mpu_stack_guard_and_fpu_adjust+0x76>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   13182:	f043 0308 	orr.w	r3, r3, #8
   13186:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
				thread->stack_info.start +=
   1318a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1318e:	3340      	adds	r3, #64	; 0x40
   13190:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
				thread->stack_info.size -=
   13194:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   13198:	3b40      	subs	r3, #64	; 0x40
   1319a:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		thread->base.user_options |= K_FP_REGS;
   1319e:	7b03      	ldrb	r3, [r0, #12]
   131a0:	f043 0302 	orr.w	r3, r3, #2
   131a4:	7303      	strb	r3, [r0, #12]
		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
   131a6:	2080      	movs	r0, #128	; 0x80
   131a8:	4770      	bx	lr
	return MPU_GUARD_ALIGN_AND_SIZE;
   131aa:	2040      	movs	r0, #64	; 0x40
}
   131ac:	4770      	bx	lr
   131ae:	bf00      	nop
   131b0:	e000ef00 	.word	0xe000ef00

000131b4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   131b4:	4b16      	ldr	r3, [pc, #88]	; (13210 <z_check_thread_stack_fail+0x5c>)
   131b6:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
   131b8:	b1fb      	cbz	r3, 131fa <z_check_thread_stack_fail+0x46>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
   131ba:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   131be:	f012 0f08 	tst.w	r2, #8
   131c2:	d00f      	beq.n	131e4 <z_check_thread_stack_fail+0x30>
   131c4:	2280      	movs	r2, #128	; 0x80
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   131c6:	f110 0f16 	cmn.w	r0, #22
   131ca:	d00d      	beq.n	131e8 <z_check_thread_stack_fail+0x34>
{
   131cc:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   131ce:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
   131d2:	1aa2      	subs	r2, r4, r2
   131d4:	4282      	cmp	r2, r0
   131d6:	d812      	bhi.n	131fe <z_check_thread_stack_fail+0x4a>
   131d8:	4284      	cmp	r4, r0
   131da:	d914      	bls.n	13206 <z_check_thread_stack_fail+0x52>
   131dc:	428c      	cmp	r4, r1
   131de:	d809      	bhi.n	131f4 <z_check_thread_stack_fail+0x40>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   131e0:	2000      	movs	r0, #0
   131e2:	e00d      	b.n	13200 <z_check_thread_stack_fail+0x4c>
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   131e4:	2240      	movs	r2, #64	; 0x40
   131e6:	e7ee      	b.n	131c6 <z_check_thread_stack_fail+0x12>
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   131e8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   131ec:	428a      	cmp	r2, r1
   131ee:	d80c      	bhi.n	1320a <z_check_thread_stack_fail+0x56>
	return 0;
   131f0:	2000      	movs	r0, #0
   131f2:	4770      	bx	lr
		return thread->stack_info.start;
   131f4:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   131f8:	e002      	b.n	13200 <z_check_thread_stack_fail+0x4c>
		return 0;
   131fa:	2000      	movs	r0, #0
   131fc:	4770      	bx	lr
	return 0;
   131fe:	2000      	movs	r0, #0
}
   13200:	f85d 4b04 	ldr.w	r4, [sp], #4
   13204:	4770      	bx	lr
	return 0;
   13206:	2000      	movs	r0, #0
   13208:	e7fa      	b.n	13200 <z_check_thread_stack_fail+0x4c>
		return thread->stack_info.start;
   1320a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
}
   1320e:	4770      	bx	lr
   13210:	20004084 	.word	0x20004084

00013214 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13214:	b508      	push	{r3, lr}
   13216:	4604      	mov	r4, r0
   13218:	460e      	mov	r6, r1
   1321a:	4615      	mov	r5, r2
	z_arm_prepare_switch_to_main();
   1321c:	f00e fcf8 	bl	21c10 <z_arm_prepare_switch_to_main>

	_current = main_thread;
   13220:	4b08      	ldr	r3, [pc, #32]	; (13244 <arch_switch_to_main_thread+0x30>)
   13222:	609c      	str	r4, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13224:	4620      	mov	r0, r4
   13226:	f000 fa85 	bl	13734 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1322a:	4628      	mov	r0, r5
   1322c:	f386 8809 	msr	PSP, r6
   13230:	2100      	movs	r1, #0
   13232:	b663      	cpsie	if
   13234:	f381 8811 	msr	BASEPRI, r1
   13238:	f3bf 8f6f 	isb	sy
   1323c:	2200      	movs	r2, #0
   1323e:	2300      	movs	r3, #0
   13240:	f00c fd64 	bl	1fd0c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13244:	20004084 	.word	0x20004084

00013248 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13248:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1324a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1324c:	4a0b      	ldr	r2, [pc, #44]	; (1327c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1324e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13250:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13252:	bf1e      	ittt	ne
	movne	r1, #0
   13254:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13256:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13258:	f011 f923 	blne	244a2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1325c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1325e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13262:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13266:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1326a:	4905      	ldr	r1, [pc, #20]	; (13280 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1326c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1326e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13270:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13276:	4903      	ldr	r1, [pc, #12]	; (13284 <_isr_wrapper+0x3c>)
	bx r1
   13278:	4708      	bx	r1
   1327a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1327c:	20004084 	.word	0x20004084
	ldr r1, =_sw_isr_table
   13280:	00025cbc 	.word	0x00025cbc
	ldr r1, =z_arm_int_exit
   13284:	00013289 	.word	0x00013289

00013288 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13288:	4b04      	ldr	r3, [pc, #16]	; (1329c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1328a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1328c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1328e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13290:	d003      	beq.n	1329a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13292:	4903      	ldr	r1, [pc, #12]	; (132a0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13298:	600a      	str	r2, [r1, #0]

0001329a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1329a:	4770      	bx	lr
	ldr r3, =_kernel
   1329c:	20004084 	.word	0x20004084
	ldr r1, =_SCS_ICSR
   132a0:	e000ed04 	.word	0xe000ed04

000132a4 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   132a4:	b538      	push	{r3, r4, r5, lr}
   132a6:	4615      	mov	r5, r2
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   132a8:	4b20      	ldr	r3, [pc, #128]	; (1332c <bus_fault+0x88>)
   132aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   132ac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   132b0:	d119      	bne.n	132e6 <bus_fault+0x42>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   132b2:	2416      	movs	r4, #22
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   132b4:	4b1d      	ldr	r3, [pc, #116]	; (1332c <bus_fault+0x88>)
   132b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   132b8:	f413 6f00 	tst.w	r3, #2048	; 0x800
   132bc:	d000      	beq.n	132c0 <bus_fault+0x1c>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   132be:	2418      	movs	r4, #24
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   132c0:	4b1a      	ldr	r3, [pc, #104]	; (1332c <bus_fault+0x88>)
   132c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   132c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   132c8:	d010      	beq.n	132ec <bus_fault+0x48>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   132ca:	4b18      	ldr	r3, [pc, #96]	; (1332c <bus_fault+0x88>)
   132cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   132ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   132d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   132d4:	d009      	beq.n	132ea <bus_fault+0x46>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   132d6:	b1d9      	cbz	r1, 13310 <bus_fault+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   132d8:	4a14      	ldr	r2, [pc, #80]	; (1332c <bus_fault+0x88>)
   132da:	6a93      	ldr	r3, [r2, #40]	; 0x28
   132dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   132e0:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   132e2:	2419      	movs	r4, #25
   132e4:	e002      	b.n	132ec <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_STACKING;
   132e6:	2417      	movs	r4, #23
   132e8:	e7e4      	b.n	132b4 <bus_fault+0x10>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   132ea:	2419      	movs	r4, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   132ec:	4b0f      	ldr	r3, [pc, #60]	; (1332c <bus_fault+0x88>)
   132ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   132f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
   132f4:	d000      	beq.n	132f8 <bus_fault+0x54>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   132f6:	241a      	movs	r4, #26
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   132f8:	4b0c      	ldr	r3, [pc, #48]	; (1332c <bus_fault+0x88>)
   132fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   132fc:	f413 7f80 	tst.w	r3, #256	; 0x100
   13300:	d108      	bne.n	13314 <bus_fault+0x70>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13302:	4b0a      	ldr	r3, [pc, #40]	; (1332c <bus_fault+0x88>)
   13304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13306:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1330a:	d004      	beq.n	13316 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   1330c:	241c      	movs	r4, #28
   1330e:	e002      	b.n	13316 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   13310:	2419      	movs	r4, #25
   13312:	e7eb      	b.n	132ec <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   13314:	241b      	movs	r4, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13316:	4a05      	ldr	r2, [pc, #20]	; (1332c <bus_fault+0x88>)
   13318:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1331a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1331e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   13320:	2101      	movs	r1, #1
   13322:	f00e fc83 	bl	21c2c <memory_fault_recoverable>
   13326:	7028      	strb	r0, [r5, #0]

	return reason;
}
   13328:	4620      	mov	r0, r4
   1332a:	bd38      	pop	{r3, r4, r5, pc}
   1332c:	e000ed00 	.word	0xe000ed00

00013330 <usage_fault>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13330:	4b17      	ldr	r3, [pc, #92]	; (13390 <usage_fault+0x60>)
   13332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13334:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   13338:	d125      	bne.n	13386 <usage_fault+0x56>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   1333a:	201d      	movs	r0, #29
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1333c:	4b14      	ldr	r3, [pc, #80]	; (13390 <usage_fault+0x60>)
   1333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13340:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   13344:	d000      	beq.n	13348 <usage_fault+0x18>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   13346:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13348:	4b11      	ldr	r3, [pc, #68]	; (13390 <usage_fault+0x60>)
   1334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1334c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   13350:	d000      	beq.n	13354 <usage_fault+0x24>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   13352:	2021      	movs	r0, #33	; 0x21
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13354:	4b0e      	ldr	r3, [pc, #56]	; (13390 <usage_fault+0x60>)
   13356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13358:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1335c:	d000      	beq.n	13360 <usage_fault+0x30>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   1335e:	2022      	movs	r0, #34	; 0x22
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13360:	4b0b      	ldr	r3, [pc, #44]	; (13390 <usage_fault+0x60>)
   13362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13364:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   13368:	d000      	beq.n	1336c <usage_fault+0x3c>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   1336a:	2023      	movs	r0, #35	; 0x23
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1336c:	4b08      	ldr	r3, [pc, #32]	; (13390 <usage_fault+0x60>)
   1336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13370:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13374:	d109      	bne.n	1338a <usage_fault+0x5a>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13376:	4a06      	ldr	r2, [pc, #24]	; (13390 <usage_fault+0x60>)
   13378:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1337a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1337e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13382:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13384:	4770      	bx	lr
		reason = K_ERR_ARM_USAGE_DIV_0;
   13386:	201e      	movs	r0, #30
   13388:	e7d8      	b.n	1333c <usage_fault+0xc>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   1338a:	2024      	movs	r0, #36	; 0x24
   1338c:	e7f3      	b.n	13376 <usage_fault+0x46>
   1338e:	bf00      	nop
   13390:	e000ed00 	.word	0xe000ed00

00013394 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   13394:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   13396:	4b0d      	ldr	r3, [pc, #52]	; (133cc <z_arm_is_synchronous_svc+0x38>)
   13398:	695a      	ldr	r2, [r3, #20]
   1339a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1339e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   133a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   133a4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   133a8:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   133ac:	695a      	ldr	r2, [r3, #20]
   133ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   133b2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   133b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   133b8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   133bc:	f64d 7302 	movw	r3, #57090	; 0xdf02
   133c0:	4299      	cmp	r1, r3
   133c2:	d001      	beq.n	133c8 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   133c4:	2000      	movs	r0, #0
   133c6:	4770      	bx	lr
		return true;
   133c8:	2001      	movs	r0, #1
}
   133ca:	4770      	bx	lr
   133cc:	e000ed00 	.word	0xe000ed00

000133d0 <mem_manage_fault>:
{
   133d0:	b570      	push	{r4, r5, r6, lr}
   133d2:	4604      	mov	r4, r0
   133d4:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   133d6:	4b32      	ldr	r3, [pc, #200]	; (134a0 <mem_manage_fault+0xd0>)
   133d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133da:	f013 0f10 	tst.w	r3, #16
   133de:	d11a      	bne.n	13416 <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   133e0:	2510      	movs	r5, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   133e2:	4b2f      	ldr	r3, [pc, #188]	; (134a0 <mem_manage_fault+0xd0>)
   133e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133e6:	f013 0f08 	tst.w	r3, #8
   133ea:	d000      	beq.n	133ee <mem_manage_fault+0x1e>
		reason = K_ERR_ARM_MEM_UNSTACKING;
   133ec:	2512      	movs	r5, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   133ee:	4b2c      	ldr	r3, [pc, #176]	; (134a0 <mem_manage_fault+0xd0>)
   133f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133f2:	f013 0f02 	tst.w	r3, #2
   133f6:	d010      	beq.n	1341a <mem_manage_fault+0x4a>
		uint32_t temp = SCB->MMFAR;
   133f8:	4b29      	ldr	r3, [pc, #164]	; (134a0 <mem_manage_fault+0xd0>)
   133fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   133fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   133fe:	f013 0f80 	tst.w	r3, #128	; 0x80
   13402:	d03d      	beq.n	13480 <mem_manage_fault+0xb0>
			if (from_hard_fault != 0) {
   13404:	2900      	cmp	r1, #0
   13406:	d03f      	beq.n	13488 <mem_manage_fault+0xb8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13408:	4a25      	ldr	r2, [pc, #148]	; (134a0 <mem_manage_fault+0xd0>)
   1340a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1340c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13410:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   13412:	2513      	movs	r5, #19
   13414:	e003      	b.n	1341e <mem_manage_fault+0x4e>
		reason = K_ERR_ARM_MEM_STACKING;
   13416:	2511      	movs	r5, #17
   13418:	e7e3      	b.n	133e2 <mem_manage_fault+0x12>
	uint32_t mmfar = -EINVAL;
   1341a:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1341e:	4b20      	ldr	r3, [pc, #128]	; (134a0 <mem_manage_fault+0xd0>)
   13420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13422:	f013 0f01 	tst.w	r3, #1
   13426:	d000      	beq.n	1342a <mem_manage_fault+0x5a>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   13428:	2514      	movs	r5, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1342a:	4b1d      	ldr	r3, [pc, #116]	; (134a0 <mem_manage_fault+0xd0>)
   1342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1342e:	f013 0f20 	tst.w	r3, #32
   13432:	d000      	beq.n	13436 <mem_manage_fault+0x66>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   13434:	2515      	movs	r5, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13436:	4b1a      	ldr	r3, [pc, #104]	; (134a0 <mem_manage_fault+0xd0>)
   13438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1343a:	f013 0f10 	tst.w	r3, #16
   1343e:	d104      	bne.n	1344a <mem_manage_fault+0x7a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13440:	4b17      	ldr	r3, [pc, #92]	; (134a0 <mem_manage_fault+0xd0>)
   13442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13444:	f013 0f02 	tst.w	r3, #2
   13448:	d004      	beq.n	13454 <mem_manage_fault+0x84>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1344a:	4b15      	ldr	r3, [pc, #84]	; (134a0 <mem_manage_fault+0xd0>)
   1344c:	685b      	ldr	r3, [r3, #4]
   1344e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   13452:	d11b      	bne.n	1348c <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13454:	4b12      	ldr	r3, [pc, #72]	; (134a0 <mem_manage_fault+0xd0>)
   13456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13458:	f013 0f20 	tst.w	r3, #32
   1345c:	d004      	beq.n	13468 <mem_manage_fault+0x98>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1345e:	4a10      	ldr	r2, [pc, #64]	; (134a0 <mem_manage_fault+0xd0>)
   13460:	6a53      	ldr	r3, [r2, #36]	; 0x24
   13462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   13466:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13468:	4a0d      	ldr	r2, [pc, #52]	; (134a0 <mem_manage_fault+0xd0>)
   1346a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1346c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13470:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13472:	2101      	movs	r1, #1
   13474:	4620      	mov	r0, r4
   13476:	f00e fbd9 	bl	21c2c <memory_fault_recoverable>
   1347a:	7030      	strb	r0, [r6, #0]
}
   1347c:	4628      	mov	r0, r5
   1347e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   13480:	f06f 0015 	mvn.w	r0, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   13484:	2513      	movs	r5, #19
   13486:	e7ca      	b.n	1341e <mem_manage_fault+0x4e>
   13488:	2513      	movs	r5, #19
   1348a:	e7c8      	b.n	1341e <mem_manage_fault+0x4e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1348c:	4621      	mov	r1, r4
   1348e:	f7ff fe91 	bl	131b4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13492:	2800      	cmp	r0, #0
   13494:	d0de      	beq.n	13454 <mem_manage_fault+0x84>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13496:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1349a:	2502      	movs	r5, #2
   1349c:	e7da      	b.n	13454 <mem_manage_fault+0x84>
   1349e:	bf00      	nop
   134a0:	e000ed00 	.word	0xe000ed00

000134a4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   134a4:	b538      	push	{r3, r4, r5, lr}
   134a6:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   134a8:	2300      	movs	r3, #0
   134aa:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   134ac:	4b1a      	ldr	r3, [pc, #104]	; (13518 <hard_fault+0x74>)
   134ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   134b0:	f010 0002 	ands.w	r0, r0, #2
   134b4:	d12d      	bne.n	13512 <hard_fault+0x6e>
   134b6:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   134b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   134ba:	2b00      	cmp	r3, #0
   134bc:	db2a      	blt.n	13514 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   134be:	4b16      	ldr	r3, [pc, #88]	; (13518 <hard_fault+0x74>)
   134c0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   134c2:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   134c6:	d025      	beq.n	13514 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
   134c8:	4628      	mov	r0, r5
   134ca:	f7ff ff63 	bl	13394 <z_arm_is_synchronous_svc>
   134ce:	b108      	cbz	r0, 134d4 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
   134d0:	6828      	ldr	r0, [r5, #0]
   134d2:	e01f      	b.n	13514 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   134d4:	4b10      	ldr	r3, [pc, #64]	; (13518 <hard_fault+0x74>)
   134d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134d8:	f013 0fff 	tst.w	r3, #255	; 0xff
   134dc:	d10d      	bne.n	134fa <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   134de:	4b0e      	ldr	r3, [pc, #56]	; (13518 <hard_fault+0x74>)
   134e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
   134e2:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
   134e6:	d10e      	bne.n	13506 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   134e8:	4b0b      	ldr	r3, [pc, #44]	; (13518 <hard_fault+0x74>)
   134ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   134ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   134f0:	d310      	bcc.n	13514 <hard_fault+0x70>
			reason = usage_fault(esf);
   134f2:	4628      	mov	r0, r5
   134f4:	f7ff ff1c 	bl	13330 <usage_fault>
   134f8:	e00c      	b.n	13514 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
   134fa:	4622      	mov	r2, r4
   134fc:	2101      	movs	r1, #1
   134fe:	4628      	mov	r0, r5
   13500:	f7ff ff66 	bl	133d0 <mem_manage_fault>
   13504:	e006      	b.n	13514 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
   13506:	4622      	mov	r2, r4
   13508:	2101      	movs	r1, #1
   1350a:	4628      	mov	r0, r5
   1350c:	f7ff feca 	bl	132a4 <bus_fault>
   13510:	e000      	b.n	13514 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13512:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   13514:	bd38      	pop	{r3, r4, r5, pc}
   13516:	bf00      	nop
   13518:	e000ed00 	.word	0xe000ed00

0001351c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1351c:	b570      	push	{r4, r5, r6, lr}
   1351e:	b09c      	sub	sp, #112	; 0x70
   13520:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13522:	4b22      	ldr	r3, [pc, #136]	; (135ac <z_arm_fault+0x90>)
   13524:	6859      	ldr	r1, [r3, #4]
   13526:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1352a:	2300      	movs	r3, #0
   1352c:	f383 8811 	msr	BASEPRI, r3
   13530:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13534:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13538:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1353c:	d115      	bne.n	1356a <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1353e:	f002 030c 	and.w	r3, r2, #12
   13542:	2b08      	cmp	r3, #8
   13544:	d014      	beq.n	13570 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13546:	f012 0f08 	tst.w	r2, #8
   1354a:	d00b      	beq.n	13564 <z_arm_fault+0x48>
	*nested_exc = false;
   1354c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1354e:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   13552:	4620      	mov	r0, r4
   13554:	f00e fb6f 	bl	21c36 <fault_handle>
   13558:	4605      	mov	r5, r0
	if (recoverable) {
   1355a:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   1355e:	b153      	cbz	r3, 13576 <z_arm_fault+0x5a>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   13560:	b01c      	add	sp, #112	; 0x70
   13562:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
   13564:	4604      	mov	r4, r0
			*nested_exc = true;
   13566:	2601      	movs	r6, #1
   13568:	e7f1      	b.n	1354e <z_arm_fault+0x32>
	*nested_exc = false;
   1356a:	2600      	movs	r6, #0
		return NULL;
   1356c:	4634      	mov	r4, r6
   1356e:	e7ee      	b.n	1354e <z_arm_fault+0x32>
	*nested_exc = false;
   13570:	2600      	movs	r6, #0
		return NULL;
   13572:	4634      	mov	r4, r6
   13574:	e7eb      	b.n	1354e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13576:	2268      	movs	r2, #104	; 0x68
   13578:	4621      	mov	r1, r4
   1357a:	a801      	add	r0, sp, #4
   1357c:	f011 fc45 	bl	24e0a <memcpy>
	if (nested_exc) {
   13580:	b14e      	cbz	r6, 13596 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13582:	9b08      	ldr	r3, [sp, #32]
   13584:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13588:	b95a      	cbnz	r2, 135a2 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1358a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1358e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   13592:	9308      	str	r3, [sp, #32]
   13594:	e005      	b.n	135a2 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13596:	9b08      	ldr	r3, [sp, #32]
   13598:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1359c:	f023 0301 	bic.w	r3, r3, #1
   135a0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   135a2:	a901      	add	r1, sp, #4
   135a4:	4628      	mov	r0, r5
   135a6:	f00e fb08 	bl	21bba <z_arm_fatal_error>
   135aa:	e7d9      	b.n	13560 <z_arm_fault+0x44>
   135ac:	e000ed00 	.word	0xe000ed00

000135b0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   135b0:	4a02      	ldr	r2, [pc, #8]	; (135bc <z_arm_fault_init+0xc>)
   135b2:	6953      	ldr	r3, [r2, #20]
   135b4:	f043 0310 	orr.w	r3, r3, #16
   135b8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   135ba:	4770      	bx	lr
   135bc:	e000ed00 	.word	0xe000ed00

000135c0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   135c0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   135c4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   135c8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   135ca:	4672      	mov	r2, lr
	bl z_arm_fault
   135cc:	f7ff ffa6 	bl	1351c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   135d0:	bd01      	pop	{r0, pc}
   135d2:	bf00      	nop

000135d4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   135d4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   135d6:	e006      	b.n	135e6 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135d8:	f003 030f 	and.w	r3, r3, #15
   135dc:	4909      	ldr	r1, [pc, #36]	; (13604 <z_arm_interrupt_init+0x30>)
   135de:	4419      	add	r1, r3
   135e0:	2340      	movs	r3, #64	; 0x40
   135e2:	760b      	strb	r3, [r1, #24]
   135e4:	3201      	adds	r2, #1
   135e6:	2a2f      	cmp	r2, #47	; 0x2f
   135e8:	dc0a      	bgt.n	13600 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   135ea:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   135ec:	2b00      	cmp	r3, #0
   135ee:	dbf3      	blt.n	135d8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   135f4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   135f8:	2140      	movs	r1, #64	; 0x40
   135fa:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   135fe:	e7f1      	b.n	135e4 <z_arm_interrupt_init+0x10>
	}
}
   13600:	4770      	bx	lr
   13602:	bf00      	nop
   13604:	e000ecfc 	.word	0xe000ecfc

00013608 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   13608:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   1360a:	4913      	ldr	r1, [pc, #76]	; (13658 <__start+0x50>)
    strb r0, [r1]
   1360c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1360e:	2000      	movs	r0, #0
    msr CONTROL, r0
   13610:	f380 8814 	msr	CONTROL, r0
    isb
   13614:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13618:	f7fe f870 	bl	116fc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1361c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1361e:	490f      	ldr	r1, [pc, #60]	; (1365c <__start+0x54>)
    str r0, [r1]
   13620:	6008      	str	r0, [r1, #0]
    dsb
   13622:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13626:	480e      	ldr	r0, [pc, #56]	; (13660 <__start+0x58>)
    msr msp, r0
   13628:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1362c:	f000 f830 	bl	13690 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13630:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13632:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13636:	480b      	ldr	r0, [pc, #44]	; (13664 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13638:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   1363c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1363e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13642:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13646:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13648:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1364a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1364e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13652:	f7ff fc9d 	bl	12f90 <z_arm_prep_c>
   13656:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
   13658:	20004bb6 	.word	0x20004bb6
    ldr r1, =_SCS_MPU_CTRL
   1365c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13660:	20008480 	.word	0x20008480
    ldr r0, =z_interrupt_stacks
   13664:	20007280 	.word	0x20007280

00013668 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13668:	4b08      	ldr	r3, [pc, #32]	; (1368c <z_arm_clear_arm_mpu_config+0x24>)
   1366a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   1366e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13672:	2300      	movs	r3, #0
   13674:	e006      	b.n	13684 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13676:	4a05      	ldr	r2, [pc, #20]	; (1368c <z_arm_clear_arm_mpu_config+0x24>)
   13678:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   1367c:	2100      	movs	r1, #0
   1367e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   13682:	3301      	adds	r3, #1
   13684:	4283      	cmp	r3, r0
   13686:	dbf6      	blt.n	13676 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   13688:	4770      	bx	lr
   1368a:	bf00      	nop
   1368c:	e000ed00 	.word	0xe000ed00

00013690 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13690:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13692:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13694:	2400      	movs	r4, #0
   13696:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1369a:	f7ff ffe5 	bl	13668 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1369e:	4623      	mov	r3, r4
   136a0:	e008      	b.n	136b4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   136a2:	f103 0120 	add.w	r1, r3, #32
   136a6:	4a0e      	ldr	r2, [pc, #56]	; (136e0 <z_arm_init_arch_hw_at_boot+0x50>)
   136a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   136ac:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   136b0:	3301      	adds	r3, #1
   136b2:	b2db      	uxtb	r3, r3
   136b4:	2b07      	cmp	r3, #7
   136b6:	d9f4      	bls.n	136a2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   136b8:	2300      	movs	r3, #0
   136ba:	e008      	b.n	136ce <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   136bc:	f103 0160 	add.w	r1, r3, #96	; 0x60
   136c0:	4a07      	ldr	r2, [pc, #28]	; (136e0 <z_arm_init_arch_hw_at_boot+0x50>)
   136c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   136c6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   136ca:	3301      	adds	r3, #1
   136cc:	b2db      	uxtb	r3, r3
   136ce:	2b07      	cmp	r3, #7
   136d0:	d9f4      	bls.n	136bc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   136d2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   136d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   136d8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   136dc:	bd10      	pop	{r4, pc}
   136de:	bf00      	nop
   136e0:	e000e100 	.word	0xe000e100

000136e4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   136e4:	b508      	push	{r3, lr}
	if (_current == thread) {
   136e6:	4b0a      	ldr	r3, [pc, #40]	; (13710 <z_impl_k_thread_abort+0x2c>)
   136e8:	689b      	ldr	r3, [r3, #8]
   136ea:	4283      	cmp	r3, r0
   136ec:	d002      	beq.n	136f4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   136ee:	f006 fd15 	bl	1a11c <z_thread_abort>
}
   136f2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   136f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   136f8:	2b00      	cmp	r3, #0
   136fa:	d0f8      	beq.n	136ee <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   136fc:	4b05      	ldr	r3, [pc, #20]	; (13714 <z_impl_k_thread_abort+0x30>)
   136fe:	685a      	ldr	r2, [r3, #4]
   13700:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13704:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1370c:	625a      	str	r2, [r3, #36]	; 0x24
   1370e:	e7ee      	b.n	136ee <z_impl_k_thread_abort+0xa>
   13710:	20004084 	.word	0x20004084
   13714:	e000ed00 	.word	0xe000ed00

00013718 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13718:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1371a:	4b03      	ldr	r3, [pc, #12]	; (13728 <z_arm_configure_static_mpu_regions+0x10>)
   1371c:	4a03      	ldr	r2, [pc, #12]	; (1372c <z_arm_configure_static_mpu_regions+0x14>)
   1371e:	2101      	movs	r1, #1
   13720:	4803      	ldr	r0, [pc, #12]	; (13730 <z_arm_configure_static_mpu_regions+0x18>)
   13722:	f00e fb0e 	bl	21d42 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13726:	bd08      	pop	{r3, pc}
   13728:	20040000 	.word	0x20040000
   1372c:	20000000 	.word	0x20000000
   13730:	00026568 	.word	0x00026568

00013734 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13734:	b510      	push	{r4, lr}
   13736:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   13738:	f7ff fcf6 	bl	13128 <z_arm_mpu_stack_guard_and_fpu_adjust>
   1373c:	4603      	mov	r3, r0
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1373e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   13742:	1a12      	subs	r2, r2, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13744:	4804      	ldr	r0, [pc, #16]	; (13758 <z_arm_configure_dynamic_mpu_regions+0x24>)
   13746:	6002      	str	r2, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   13748:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1374a:	4b04      	ldr	r3, [pc, #16]	; (1375c <z_arm_configure_dynamic_mpu_regions+0x28>)
   1374c:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1374e:	2101      	movs	r1, #1
   13750:	f00e fafb 	bl	21d4a <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   13754:	bd10      	pop	{r4, pc}
   13756:	bf00      	nop
   13758:	20002e74 	.word	0x20002e74
   1375c:	150b0000 	.word	0x150b0000

00013760 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13760:	4a08      	ldr	r2, [pc, #32]	; (13784 <region_init+0x24>)
   13762:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13766:	680b      	ldr	r3, [r1, #0]
   13768:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1376c:	4303      	orrs	r3, r0
   1376e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13772:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13776:	688b      	ldr	r3, [r1, #8]
   13778:	f043 0301 	orr.w	r3, r3, #1
   1377c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   13780:	4770      	bx	lr
   13782:	bf00      	nop
   13784:	e000ed00 	.word	0xe000ed00

00013788 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   13788:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   1378a:	4c03      	ldr	r4, [pc, #12]	; (13798 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1378c:	2301      	movs	r3, #1
   1378e:	7822      	ldrb	r2, [r4, #0]
   13790:	f00e faaf 	bl	21cf2 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13794:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   13796:	bd10      	pop	{r4, pc}
   13798:	20004bac 	.word	0x20004bac

0001379c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   1379c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1379e:	2300      	movs	r3, #0
   137a0:	4a09      	ldr	r2, [pc, #36]	; (137c8 <mpu_configure_dynamic_mpu_regions+0x2c>)
   137a2:	7812      	ldrb	r2, [r2, #0]
   137a4:	f00e faa5 	bl	21cf2 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   137a8:	f110 0f16 	cmn.w	r0, #22
   137ac:	d00a      	beq.n	137c4 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   137ae:	4603      	mov	r3, r0
   137b0:	e006      	b.n	137c0 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   137b2:	4a06      	ldr	r2, [pc, #24]	; (137cc <mpu_configure_dynamic_mpu_regions+0x30>)
   137b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   137b8:	2100      	movs	r1, #0
   137ba:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   137be:	3301      	adds	r3, #1
   137c0:	2b07      	cmp	r3, #7
   137c2:	ddf6      	ble.n	137b2 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   137c4:	bd08      	pop	{r3, pc}
   137c6:	bf00      	nop
   137c8:	20004bac 	.word	0x20004bac
   137cc:	e000ed00 	.word	0xe000ed00

000137d0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   137d0:	4b04      	ldr	r3, [pc, #16]	; (137e4 <arm_core_mpu_enable+0x14>)
   137d2:	2205      	movs	r2, #5
   137d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   137d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   137dc:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   137e0:	4770      	bx	lr
   137e2:	bf00      	nop
   137e4:	e000ed00 	.word	0xe000ed00

000137e8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   137e8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   137ec:	4b02      	ldr	r3, [pc, #8]	; (137f8 <arm_core_mpu_disable+0x10>)
   137ee:	2200      	movs	r2, #0
   137f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   137f4:	4770      	bx	lr
   137f6:	bf00      	nop
   137f8:	e000ed00 	.word	0xe000ed00

000137fc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   137fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   137fe:	4b0e      	ldr	r3, [pc, #56]	; (13838 <z_arm_mpu_init+0x3c>)
   13800:	681d      	ldr	r5, [r3, #0]
   13802:	2d08      	cmp	r5, #8
   13804:	d815      	bhi.n	13832 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13806:	f7ff ffef 	bl	137e8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1380a:	2400      	movs	r4, #0
   1380c:	e009      	b.n	13822 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1380e:	4b0a      	ldr	r3, [pc, #40]	; (13838 <z_arm_mpu_init+0x3c>)
   13810:	6859      	ldr	r1, [r3, #4]
   13812:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   13816:	0093      	lsls	r3, r2, #2
   13818:	4419      	add	r1, r3
   1381a:	4620      	mov	r0, r4
   1381c:	f7ff ffa0 	bl	13760 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13820:	3401      	adds	r4, #1
   13822:	42a5      	cmp	r5, r4
   13824:	d8f3      	bhi.n	1380e <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13826:	4b05      	ldr	r3, [pc, #20]	; (1383c <z_arm_mpu_init+0x40>)
   13828:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1382a:	f7ff ffd1 	bl	137d0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1382e:	2000      	movs	r0, #0
}
   13830:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   13832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13836:	e7fb      	b.n	13830 <z_arm_mpu_init+0x34>
   13838:	000265a0 	.word	0x000265a0
   1383c:	20004bac 	.word	0x20004bac

00013840 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   13840:	b570      	push	{r4, r5, r6, lr}
   13842:	4606      	mov	r6, r0
   13844:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   13846:	2400      	movs	r4, #0
   13848:	e000      	b.n	1384c <z_impl_zephyr_read_stdin+0xc>
   1384a:	3401      	adds	r4, #1
   1384c:	42ac      	cmp	r4, r5
   1384e:	da08      	bge.n	13862 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
   13850:	4b05      	ldr	r3, [pc, #20]	; (13868 <z_impl_zephyr_read_stdin+0x28>)
   13852:	681b      	ldr	r3, [r3, #0]
   13854:	4798      	blx	r3
   13856:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   13858:	280a      	cmp	r0, #10
   1385a:	d001      	beq.n	13860 <z_impl_zephyr_read_stdin+0x20>
   1385c:	280d      	cmp	r0, #13
   1385e:	d1f4      	bne.n	1384a <z_impl_zephyr_read_stdin+0xa>
			i++;
   13860:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
   13862:	4620      	mov	r0, r4
   13864:	bd70      	pop	{r4, r5, r6, pc}
   13866:	bf00      	nop
   13868:	200004dc 	.word	0x200004dc

0001386c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1386e:	4605      	mov	r5, r0
   13870:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   13872:	2400      	movs	r4, #0
   13874:	e004      	b.n	13880 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   13876:	4b09      	ldr	r3, [pc, #36]	; (1389c <z_impl_zephyr_write_stdout+0x30>)
   13878:	681b      	ldr	r3, [r3, #0]
   1387a:	7830      	ldrb	r0, [r6, #0]
   1387c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1387e:	3401      	adds	r4, #1
   13880:	42bc      	cmp	r4, r7
   13882:	da08      	bge.n	13896 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   13884:	192e      	adds	r6, r5, r4
   13886:	5d2b      	ldrb	r3, [r5, r4]
   13888:	2b0a      	cmp	r3, #10
   1388a:	d1f4      	bne.n	13876 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   1388c:	4b03      	ldr	r3, [pc, #12]	; (1389c <z_impl_zephyr_write_stdout+0x30>)
   1388e:	681b      	ldr	r3, [r3, #0]
   13890:	200d      	movs	r0, #13
   13892:	4798      	blx	r3
   13894:	e7ef      	b.n	13876 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   13896:	4638      	mov	r0, r7
   13898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1389a:	bf00      	nop
   1389c:	200004e0 	.word	0x200004e0

000138a0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   138a0:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
   138a2:	2205      	movs	r2, #5
   138a4:	4902      	ldr	r1, [pc, #8]	; (138b0 <_exit+0x10>)
   138a6:	2001      	movs	r0, #1
   138a8:	f00e fa60 	bl	21d6c <_write>
	while (1) {
   138ac:	e7fe      	b.n	138ac <_exit+0xc>
   138ae:	bf00      	nop
   138b0:	00026578 	.word	0x00026578

000138b4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   138b4:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   138b6:	4b08      	ldr	r3, [pc, #32]	; (138d8 <_sbrk+0x24>)
   138b8:	6819      	ldr	r1, [r3, #0]
   138ba:	4b08      	ldr	r3, [pc, #32]	; (138dc <_sbrk+0x28>)
   138bc:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   138be:	440a      	add	r2, r1
   138c0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   138c4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   138c8:	429a      	cmp	r2, r3
   138ca:	d202      	bcs.n	138d2 <_sbrk+0x1e>
		heap_sz += count;
   138cc:	4b02      	ldr	r3, [pc, #8]	; (138d8 <_sbrk+0x24>)
   138ce:	601a      	str	r2, [r3, #0]
		ret = ptr;
   138d0:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   138d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
   138d6:	4770      	bx	lr
   138d8:	20002e80 	.word	0x20002e80
   138dc:	20009d70 	.word	0x20009d70

000138e0 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   138e0:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
   138e2:	221d      	movs	r2, #29
   138e4:	4904      	ldr	r1, [pc, #16]	; (138f8 <__chk_fail+0x18>)
   138e6:	2002      	movs	r0, #2
   138e8:	f00e fa40 	bl	21d6c <_write>
	k_oops();
   138ec:	4040      	eors	r0, r0
   138ee:	f380 8811 	msr	BASEPRI, r0
   138f2:	f04f 0003 	mov.w	r0, #3
   138f6:	df02      	svc	2
	CODE_UNREACHABLE;
   138f8:	00026580 	.word	0x00026580

000138fc <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   138fc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13900:	4905      	ldr	r1, [pc, #20]	; (13918 <__NVIC_SystemReset+0x1c>)
   13902:	68ca      	ldr	r2, [r1, #12]
   13904:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13908:	4b04      	ldr	r3, [pc, #16]	; (1391c <__NVIC_SystemReset+0x20>)
   1390a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1390c:	60cb      	str	r3, [r1, #12]
   1390e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13912:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13914:	e7fd      	b.n	13912 <__NVIC_SystemReset+0x16>
   13916:	bf00      	nop
   13918:	e000ed00 	.word	0xe000ed00
   1391c:	05fa0004 	.word	0x05fa0004

00013920 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
   13920:	b510      	push	{r4, lr}
	__asm__ volatile(
   13922:	f04f 0340 	mov.w	r3, #64	; 0x40
   13926:	f3ef 8411 	mrs	r4, BASEPRI
   1392a:	f383 8812 	msr	BASEPRI_MAX, r3
   1392e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13932:	2301      	movs	r3, #1
   13934:	4a0c      	ldr	r2, [pc, #48]	; (13968 <nordicsemi_nrf52_init+0x48>)
   13936:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1393a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1393e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   13942:	f00e fa45 	bl	21dd0 <nrf52_errata_197>
   13946:	b120      	cbz	r0, 13952 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   13948:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1394c:	2201      	movs	r2, #1
   1394e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   13952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13956:	2201      	movs	r2, #1
   13958:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   1395c:	f384 8811 	msr	BASEPRI, r4
   13960:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13964:	2000      	movs	r0, #0
   13966:	bd10      	pop	{r4, pc}
   13968:	4001e000 	.word	0x4001e000

0001396c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1396c:	b130      	cbz	r0, 1397c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   1396e:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13970:	4b03      	ldr	r3, [pc, #12]	; (13980 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13972:	0180      	lsls	r0, r0, #6
   13974:	f043 0301 	orr.w	r3, r3, #1
   13978:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   1397a:	bd08      	pop	{r3, pc}
   1397c:	4770      	bx	lr
   1397e:	bf00      	nop
   13980:	00026020 	.word	0x00026020

00013984 <__NVIC_SystemReset>:
   13984:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13988:	4905      	ldr	r1, [pc, #20]	; (139a0 <__NVIC_SystemReset+0x1c>)
   1398a:	68ca      	ldr	r2, [r1, #12]
   1398c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13990:	4b04      	ldr	r3, [pc, #16]	; (139a4 <__NVIC_SystemReset+0x20>)
   13992:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13994:	60cb      	str	r3, [r1, #12]
   13996:	f3bf 8f4f 	dsb	sy
    __NOP();
   1399a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1399c:	e7fd      	b.n	1399a <__NVIC_SystemReset+0x16>
   1399e:	bf00      	nop
   139a0:	e000ed00 	.word	0xe000ed00
   139a4:	05fa0004 	.word	0x05fa0004

000139a8 <board_nrf52840dongle_nrf52840_init>:

#include <zephyr/init.h>
#include <hal/nrf_power.h>

static int board_nrf52840dongle_nrf52840_init(void)
{
   139a8:	b508      	push	{r3, lr}

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   139aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   139ae:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   139b2:	f013 0f01 	tst.w	r3, #1
   139b6:	d007      	beq.n	139c8 <board_nrf52840dongle_nrf52840_init+0x20>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   139b8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   139bc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   139c0:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   139c4:	2b07      	cmp	r3, #7
   139c6:	d001      	beq.n	139cc <board_nrf52840dongle_nrf52840_init+0x24>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   139c8:	2000      	movs	r0, #0
   139ca:	bd08      	pop	{r3, pc}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   139cc:	4b0e      	ldr	r3, [pc, #56]	; (13a08 <board_nrf52840dongle_nrf52840_init+0x60>)
   139ce:	2201      	movs	r2, #1
   139d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   139d4:	4b0c      	ldr	r3, [pc, #48]	; (13a08 <board_nrf52840dongle_nrf52840_init+0x60>)
   139d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   139da:	2b00      	cmp	r3, #0
   139dc:	d0fa      	beq.n	139d4 <board_nrf52840dongle_nrf52840_init+0x2c>
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   139de:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   139e2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   139e6:	f023 0307 	bic.w	r3, r3, #7
   139ea:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
   139ee:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   139f2:	4b05      	ldr	r3, [pc, #20]	; (13a08 <board_nrf52840dongle_nrf52840_init+0x60>)
   139f4:	2200      	movs	r2, #0
   139f6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   139fa:	4b03      	ldr	r3, [pc, #12]	; (13a08 <board_nrf52840dongle_nrf52840_init+0x60>)
   139fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   13a00:	2b00      	cmp	r3, #0
   13a02:	d0fa      	beq.n	139fa <board_nrf52840dongle_nrf52840_init+0x52>
		NVIC_SystemReset();
   13a04:	f7ff ffbe 	bl	13984 <__NVIC_SystemReset>
   13a08:	4001e000 	.word	0x4001e000

00013a0c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   13a0c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   13a0e:	4804      	ldr	r0, [pc, #16]	; (13a20 <xoshiro128_initialize+0x14>)
   13a10:	f010 fbfa 	bl	24208 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   13a14:	b108      	cbz	r0, 13a1a <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   13a16:	2000      	movs	r0, #0
}
   13a18:	bd08      	pop	{r3, pc}
		return -ENODEV;
   13a1a:	f06f 0012 	mvn.w	r0, #18
   13a1e:	e7fb      	b.n	13a18 <xoshiro128_initialize+0xc>
   13a20:	00025c44 	.word	0x00025c44

00013a24 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13a24:	b538      	push	{r3, r4, r5, lr}
   13a26:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13a28:	4805      	ldr	r0, [pc, #20]	; (13a40 <bt_buf_get_rx+0x1c>)
   13a2a:	f00e fbc5 	bl	221b8 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13a2e:	4605      	mov	r5, r0
   13a30:	b120      	cbz	r0, 13a3c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   13a32:	2100      	movs	r1, #0
   13a34:	300c      	adds	r0, #12
   13a36:	f00e fc26 	bl	22286 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13a3a:	762c      	strb	r4, [r5, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13a3c:	4628      	mov	r0, r5
   13a3e:	bd38      	pop	{r3, r4, r5, pc}
   13a40:	20000948 	.word	0x20000948

00013a44 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13a44:	b538      	push	{r3, r4, r5, lr}
   13a46:	4602      	mov	r2, r0
   13a48:	460b      	mov	r3, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13a4a:	490e      	ldr	r1, [pc, #56]	; (13a84 <bt_buf_get_cmd_complete+0x40>)
   13a4c:	2000      	movs	r0, #0
   13a4e:	f3bf 8f5b 	dmb	ish
   13a52:	e851 4f00 	ldrex	r4, [r1]
   13a56:	e841 0500 	strex	r5, r0, [r1]
   13a5a:	2d00      	cmp	r5, #0
   13a5c:	d1f9      	bne.n	13a52 <bt_buf_get_cmd_complete+0xe>
   13a5e:	f3bf 8f5b 	dmb	ish
   13a62:	4625      	mov	r5, r4
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   13a64:	b92c      	cbnz	r4, 13a72 <bt_buf_get_cmd_complete+0x2e>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13a66:	2001      	movs	r0, #1
   13a68:	f7ff ffdc 	bl	13a24 <bt_buf_get_rx>
   13a6c:	4605      	mov	r5, r0
}
   13a6e:	4628      	mov	r0, r5
   13a70:	bd38      	pop	{r3, r4, r5, pc}
   13a72:	2301      	movs	r3, #1
   13a74:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   13a76:	4601      	mov	r1, r0
   13a78:	8220      	strh	r0, [r4, #16]
   13a7a:	f104 000c 	add.w	r0, r4, #12
   13a7e:	f00e fc02 	bl	22286 <net_buf_simple_reserve>
		return buf;
   13a82:	e7f4      	b.n	13a6e <bt_buf_get_cmd_complete+0x2a>
   13a84:	20000350 	.word	0x20000350

00013a88 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13a88:	b510      	push	{r4, lr}
	switch (evt) {
   13a8a:	f1a0 0c0e 	sub.w	ip, r0, #14
   13a8e:	f1bc 0f01 	cmp.w	ip, #1
   13a92:	d906      	bls.n	13aa2 <bt_buf_get_evt+0x1a>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   13a94:	b959      	cbnz	r1, 13aae <bt_buf_get_evt+0x26>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13a96:	2001      	movs	r0, #1
   13a98:	f7ff ffc4 	bl	13a24 <bt_buf_get_rx>
   13a9c:	4604      	mov	r4, r0
	}
}
   13a9e:	4620      	mov	r0, r4
   13aa0:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
   13aa2:	4610      	mov	r0, r2
   13aa4:	4619      	mov	r1, r3
   13aa6:	f7ff ffcd 	bl	13a44 <bt_buf_get_cmd_complete>
   13aaa:	4604      	mov	r4, r0
   13aac:	e7f7      	b.n	13a9e <bt_buf_get_evt+0x16>
	return net_buf_alloc_fixed(pool, timeout);
   13aae:	4806      	ldr	r0, [pc, #24]	; (13ac8 <bt_buf_get_evt+0x40>)
   13ab0:	f00e fb82 	bl	221b8 <net_buf_alloc_fixed>
			if (buf) {
   13ab4:	4604      	mov	r4, r0
   13ab6:	2800      	cmp	r0, #0
   13ab8:	d0f1      	beq.n	13a9e <bt_buf_get_evt+0x16>
	net_buf_simple_reserve(&buf->b, reserve);
   13aba:	2100      	movs	r1, #0
   13abc:	300c      	adds	r0, #12
   13abe:	f00e fbe2 	bl	22286 <net_buf_simple_reserve>
   13ac2:	2301      	movs	r3, #1
   13ac4:	7623      	strb	r3, [r4, #24]
			return buf;
   13ac6:	e7ea      	b.n	13a9e <bt_buf_get_evt+0x16>
   13ac8:	200008f0 	.word	0x200008f0

00013acc <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   13acc:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   13ace:	7851      	ldrb	r1, [r2, #1]
   13ad0:	4b08      	ldr	r3, [pc, #32]	; (13af4 <read_local_ver_complete+0x28>)
   13ad2:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   13ad6:	8851      	ldrh	r1, [r2, #2]
   13ad8:	f8a3 1072 	strh.w	r1, [r3, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   13adc:	7911      	ldrb	r1, [r2, #4]
   13ade:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   13ae2:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   13ae6:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   13aea:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   13aee:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
}
   13af2:	4770      	bx	lr
   13af4:	20000250 	.word	0x20000250

00013af8 <read_le_features_complete>:

static void read_le_features_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   13af8:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   13afa:	4b03      	ldr	r3, [pc, #12]	; (13b08 <read_le_features_complete+0x10>)
   13afc:	f8d2 0001 	ldr.w	r0, [r2, #1]
   13b00:	f8d2 1005 	ldr.w	r1, [r2, #5]
   13b04:	c303      	stmia	r3!, {r0, r1}
}
   13b06:	4770      	bx	lr
   13b08:	20000328 	.word	0x20000328

00013b0c <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
   13b0c:	b530      	push	{r4, r5, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   13b0e:	68c4      	ldr	r4, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
   13b10:	f104 0c01 	add.w	ip, r4, #1
   13b14:	4d09      	ldr	r5, [pc, #36]	; (13b3c <read_supported_commands_complete+0x30>)
   13b16:	3441      	adds	r4, #65	; 0x41
   13b18:	46ae      	mov	lr, r5
   13b1a:	f8dc 0000 	ldr.w	r0, [ip]
   13b1e:	f8dc 1004 	ldr.w	r1, [ip, #4]
   13b22:	f8dc 2008 	ldr.w	r2, [ip, #8]
   13b26:	f8dc 300c 	ldr.w	r3, [ip, #12]
   13b2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   13b2e:	f10c 0c10 	add.w	ip, ip, #16
   13b32:	4675      	mov	r5, lr
   13b34:	45a4      	cmp	ip, r4
   13b36:	d1ef      	bne.n	13b18 <read_supported_commands_complete+0xc>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
   13b38:	bd30      	pop	{r4, r5, pc}
   13b3a:	bf00      	nop
   13b3c:	200002d0 	.word	0x200002d0

00013b40 <read_local_features_complete>:

static void read_local_features_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   13b40:	68c2      	ldr	r2, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   13b42:	4b03      	ldr	r3, [pc, #12]	; (13b50 <read_local_features_complete+0x10>)
   13b44:	f8d2 0001 	ldr.w	r0, [r2, #1]
   13b48:	f8d2 1005 	ldr.w	r1, [r2, #5]
   13b4c:	c303      	stmia	r3!, {r0, r1}
}
   13b4e:	4770      	bx	lr
   13b50:	200002c8 	.word	0x200002c8

00013b54 <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
   13b54:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   13b56:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   13b58:	3001      	adds	r0, #1
   13b5a:	f00e f985 	bl	21e68 <sys_get_le64>
   13b5e:	4b02      	ldr	r3, [pc, #8]	; (13b68 <le_read_supp_states_complete+0x14>)
   13b60:	e9c3 0138 	strd	r0, r1, [r3, #224]	; 0xe0
}
   13b64:	bd08      	pop	{r3, pc}
   13b66:	bf00      	nop
   13b68:	20000250 	.word	0x20000250

00013b6c <hci_reset_complete>:
	uint8_t status = buf->data[0];
   13b6c:	68c3      	ldr	r3, [r0, #12]
   13b6e:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   13b70:	b98b      	cbnz	r3, 13b96 <hci_reset_complete+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13b72:	4b09      	ldr	r3, [pc, #36]	; (13b98 <hci_reset_complete+0x2c>)
   13b74:	f3bf 8f5b 	dmb	ish
   13b78:	681a      	ldr	r2, [r3, #0]
   13b7a:	f3bf 8f5b 	dmb	ish
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13b7e:	f002 0209 	and.w	r2, r2, #9
   13b82:	f3bf 8f5b 	dmb	ish
   13b86:	e853 1f00 	ldrex	r1, [r3]
   13b8a:	e843 2000 	strex	r0, r2, [r3]
   13b8e:	2800      	cmp	r0, #0
   13b90:	d1f9      	bne.n	13b86 <hci_reset_complete+0x1a>
   13b92:	f3bf 8f5b 	dmb	ish
}
   13b96:	4770      	bx	lr
   13b98:	20000324 	.word	0x20000324

00013b9c <hci_cmd_done>:
{
   13b9c:	b570      	push	{r4, r5, r6, lr}
   13b9e:	4606      	mov	r6, r0
   13ba0:	460d      	mov	r5, r1
   13ba2:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13ba4:	7a90      	ldrb	r0, [r2, #10]
   13ba6:	f000 fd5b 	bl	14660 <net_buf_pool_get>
   13baa:	4b28      	ldr	r3, [pc, #160]	; (13c4c <hci_cmd_done+0xb0>)
   13bac:	4283      	cmp	r3, r0
   13bae:	d000      	beq.n	13bb2 <hci_cmd_done+0x16>
}
   13bb0:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   13bb2:	4620      	mov	r0, r4
   13bb4:	f00e fa5d 	bl	22072 <net_buf_id>
   13bb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13bbc:	4b24      	ldr	r3, [pc, #144]	; (13c50 <hci_cmd_done+0xb4>)
   13bbe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   13bc2:	885b      	ldrh	r3, [r3, #2]
   13bc4:	42b3      	cmp	r3, r6
   13bc6:	d1f3      	bne.n	13bb0 <hci_cmd_done+0x14>
	if (bt_dev.sent_cmd) {
   13bc8:	4b22      	ldr	r3, [pc, #136]	; (13c54 <hci_cmd_done+0xb8>)
   13bca:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13bce:	b128      	cbz	r0, 13bdc <hci_cmd_done+0x40>
		net_buf_unref(bt_dev.sent_cmd);
   13bd0:	f00e fb32 	bl	22238 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13bd4:	4b1f      	ldr	r3, [pc, #124]	; (13c54 <hci_cmd_done+0xb8>)
   13bd6:	2200      	movs	r2, #0
   13bd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	if (cmd(buf)->state && !status) {
   13bdc:	4620      	mov	r0, r4
   13bde:	f00e fa48 	bl	22072 <net_buf_id>
   13be2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13be6:	4b1a      	ldr	r3, [pc, #104]	; (13c50 <hci_cmd_done+0xb4>)
   13be8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   13bec:	685b      	ldr	r3, [r3, #4]
   13bee:	b103      	cbz	r3, 13bf2 <hci_cmd_done+0x56>
   13bf0:	b1ed      	cbz	r5, 13c2e <hci_cmd_done+0x92>
	if (cmd(buf)->sync) {
   13bf2:	4620      	mov	r0, r4
   13bf4:	f00e fa3d 	bl	22072 <net_buf_id>
   13bf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13bfc:	4b14      	ldr	r3, [pc, #80]	; (13c50 <hci_cmd_done+0xb4>)
   13bfe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   13c02:	689b      	ldr	r3, [r3, #8]
   13c04:	2b00      	cmp	r3, #0
   13c06:	d0d3      	beq.n	13bb0 <hci_cmd_done+0x14>
		cmd(buf)->status = status;
   13c08:	4620      	mov	r0, r4
   13c0a:	f00e fa32 	bl	22072 <net_buf_id>
   13c0e:	4e10      	ldr	r6, [pc, #64]	; (13c50 <hci_cmd_done+0xb4>)
   13c10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13c14:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   13c18:	4620      	mov	r0, r4
   13c1a:	f00e fa2a 	bl	22072 <net_buf_id>
   13c1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13c22:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   13c26:	68b0      	ldr	r0, [r6, #8]
	z_impl_k_sem_give(sem);
   13c28:	f005 fd86 	bl	19738 <z_impl_k_sem_give>
}
   13c2c:	e7c0      	b.n	13bb0 <hci_cmd_done+0x14>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13c2e:	4620      	mov	r0, r4
   13c30:	f00e fa1f 	bl	22072 <net_buf_id>
   13c34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13c38:	4b05      	ldr	r3, [pc, #20]	; (13c50 <hci_cmd_done+0xb4>)
   13c3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   13c3e:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   13c40:	7a1a      	ldrb	r2, [r3, #8]
   13c42:	6859      	ldr	r1, [r3, #4]
   13c44:	6818      	ldr	r0, [r3, #0]
   13c46:	f00e f94d 	bl	21ee4 <atomic_set_bit_to>
   13c4a:	e7d2      	b.n	13bf2 <hci_cmd_done+0x56>
   13c4c:	2000091c 	.word	0x2000091c
   13c50:	20002e84 	.word	0x20002e84
   13c54:	20000250 	.word	0x20000250

00013c58 <hci_cmd_status>:
{
   13c58:	b538      	push	{r3, r4, r5, lr}
   13c5a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13c5c:	2104      	movs	r1, #4
   13c5e:	300c      	adds	r0, #12
   13c60:	f00e fb26 	bl	222b0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13c64:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13c66:	4622      	mov	r2, r4
   13c68:	7801      	ldrb	r1, [r0, #0]
   13c6a:	8840      	ldrh	r0, [r0, #2]
   13c6c:	f7ff ff96 	bl	13b9c <hci_cmd_done>
	if (ncmd) {
   13c70:	b905      	cbnz	r5, 13c74 <hci_cmd_status+0x1c>
}
   13c72:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   13c74:	4801      	ldr	r0, [pc, #4]	; (13c7c <hci_cmd_status+0x24>)
   13c76:	f005 fd5f 	bl	19738 <z_impl_k_sem_give>
   13c7a:	e7fa      	b.n	13c72 <hci_cmd_status+0x1a>
   13c7c:	20000338 	.word	0x20000338

00013c80 <hci_cmd_complete>:
{
   13c80:	b538      	push	{r3, r4, r5, lr}
   13c82:	4604      	mov	r4, r0
   13c84:	2103      	movs	r1, #3
   13c86:	300c      	adds	r0, #12
   13c88:	f00e fb12 	bl	222b0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13c8c:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   13c8e:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
   13c90:	4622      	mov	r2, r4
   13c92:	7819      	ldrb	r1, [r3, #0]
   13c94:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13c98:	f7ff ff80 	bl	13b9c <hci_cmd_done>
	if (ncmd) {
   13c9c:	b905      	cbnz	r5, 13ca0 <hci_cmd_complete+0x20>
}
   13c9e:	bd38      	pop	{r3, r4, r5, pc}
   13ca0:	4801      	ldr	r0, [pc, #4]	; (13ca8 <hci_cmd_complete+0x28>)
   13ca2:	f005 fd49 	bl	19738 <z_impl_k_sem_give>
   13ca6:	e7fa      	b.n	13c9e <hci_cmd_complete+0x1e>
   13ca8:	20000338 	.word	0x20000338

00013cac <hci_event>:
{
   13cac:	b538      	push	{r3, r4, r5, lr}
   13cae:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13cb0:	8a03      	ldrh	r3, [r0, #16]
   13cb2:	2b01      	cmp	r3, #1
   13cb4:	d91b      	bls.n	13cee <hci_event+0x42>
   13cb6:	2102      	movs	r1, #2
   13cb8:	f104 000c 	add.w	r0, r4, #12
   13cbc:	f00e faf8 	bl	222b0 <net_buf_simple_pull_mem>
   13cc0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13cc2:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   13cc4:	2b05      	cmp	r3, #5
   13cc6:	d022      	beq.n	13d0e <hci_event+0x62>
   13cc8:	d323      	bcc.n	13d12 <hci_event+0x66>
   13cca:	3b0e      	subs	r3, #14
   13ccc:	b2db      	uxtb	r3, r3
   13cce:	2b01      	cmp	r3, #1
   13cd0:	d81b      	bhi.n	13d0a <hci_event+0x5e>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   13cd2:	2301      	movs	r3, #1
   13cd4:	f013 0f02 	tst.w	r3, #2
   13cd8:	d01d      	beq.n	13d16 <hci_event+0x6a>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13cda:	2303      	movs	r3, #3
   13cdc:	4a15      	ldr	r2, [pc, #84]	; (13d34 <hci_event+0x88>)
   13cde:	4621      	mov	r1, r4
   13ce0:	7828      	ldrb	r0, [r5, #0]
   13ce2:	f00e f8f8 	bl	21ed6 <handle_event>
	net_buf_unref(buf);
   13ce6:	4620      	mov	r0, r4
   13ce8:	f00e faa6 	bl	22238 <net_buf_unref>
}
   13cec:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13cee:	f640 2347 	movw	r3, #2631	; 0xa47
   13cf2:	4a11      	ldr	r2, [pc, #68]	; (13d38 <hci_event+0x8c>)
   13cf4:	4911      	ldr	r1, [pc, #68]	; (13d3c <hci_event+0x90>)
   13cf6:	4812      	ldr	r0, [pc, #72]	; (13d40 <hci_event+0x94>)
   13cf8:	f00c ff0f 	bl	20b1a <assert_print>
   13cfc:	4040      	eors	r0, r0
   13cfe:	f380 8811 	msr	BASEPRI, r0
   13d02:	f04f 0003 	mov.w	r0, #3
   13d06:	df02      	svc	2
   13d08:	e7d5      	b.n	13cb6 <hci_event+0xa>
	default:
		return BT_HCI_EVT_FLAG_RECV;
   13d0a:	2302      	movs	r3, #2
   13d0c:	e7e2      	b.n	13cd4 <hci_event+0x28>
	switch (evt) {
   13d0e:	2303      	movs	r3, #3
   13d10:	e7e0      	b.n	13cd4 <hci_event+0x28>
		return BT_HCI_EVT_FLAG_RECV;
   13d12:	2302      	movs	r3, #2
   13d14:	e7de      	b.n	13cd4 <hci_event+0x28>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13d16:	f640 234b 	movw	r3, #2635	; 0xa4b
   13d1a:	4a07      	ldr	r2, [pc, #28]	; (13d38 <hci_event+0x8c>)
   13d1c:	4909      	ldr	r1, [pc, #36]	; (13d44 <hci_event+0x98>)
   13d1e:	4808      	ldr	r0, [pc, #32]	; (13d40 <hci_event+0x94>)
   13d20:	f00c fefb 	bl	20b1a <assert_print>
   13d24:	4040      	eors	r0, r0
   13d26:	f380 8811 	msr	BASEPRI, r0
   13d2a:	f04f 0003 	mov.w	r0, #3
   13d2e:	df02      	svc	2
   13d30:	e7d3      	b.n	13cda <hci_event+0x2e>
   13d32:	bf00      	nop
   13d34:	00026718 	.word	0x00026718
   13d38:	00026614 	.word	0x00026614
   13d3c:	00026648 	.word	0x00026648
   13d40:	00026664 	.word	0x00026664
   13d44:	00026684 	.word	0x00026684

00013d48 <hci_le_meta_event>:
{
   13d48:	b510      	push	{r4, lr}
   13d4a:	4604      	mov	r4, r0
   13d4c:	2101      	movs	r1, #1
   13d4e:	300c      	adds	r0, #12
   13d50:	f00e faae 	bl	222b0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13d54:	2300      	movs	r3, #0
   13d56:	4a03      	ldr	r2, [pc, #12]	; (13d64 <hci_le_meta_event+0x1c>)
   13d58:	4621      	mov	r1, r4
   13d5a:	7800      	ldrb	r0, [r0, #0]
   13d5c:	f00e f8bb 	bl	21ed6 <handle_event>
}
   13d60:	bd10      	pop	{r4, pc}
   13d62:	bf00      	nop
   13d64:	00026730 	.word	0x00026730

00013d68 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   13d68:	b508      	push	{r3, lr}
   13d6a:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   13d6c:	4803      	ldr	r0, [pc, #12]	; (13d7c <rx_queue_put+0x14>)
   13d6e:	f00e fa2a 	bl	221c6 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   13d72:	4903      	ldr	r1, [pc, #12]	; (13d80 <rx_queue_put+0x18>)
   13d74:	4803      	ldr	r0, [pc, #12]	; (13d84 <rx_queue_put+0x1c>)
   13d76:	f010 fd0d 	bl	24794 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   13d7a:	bd08      	pop	{r3, pc}
   13d7c:	20000354 	.word	0x20000354
   13d80:	200004e4 	.word	0x200004e4
   13d84:	200019a0 	.word	0x200019a0

00013d88 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   13d88:	b508      	push	{r3, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   13d8a:	480a      	ldr	r0, [pc, #40]	; (13db4 <rx_work_handler+0x2c>)
   13d8c:	f00e fa31 	bl	221f2 <net_buf_slist_get>
	if (!buf) {
   13d90:	b160      	cbz	r0, 13dac <rx_work_handler+0x24>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13d92:	7e02      	ldrb	r2, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   13d94:	2a01      	cmp	r2, #1
   13d96:	d00a      	beq.n	13dae <rx_work_handler+0x26>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   13d98:	f00e fa4e 	bl	22238 <net_buf_unref>
	return list->head;
   13d9c:	4b06      	ldr	r3, [pc, #24]	; (13db8 <rx_work_handler+0x30>)
   13d9e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   13da2:	b11b      	cbz	r3, 13dac <rx_work_handler+0x24>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   13da4:	4905      	ldr	r1, [pc, #20]	; (13dbc <rx_work_handler+0x34>)
   13da6:	4806      	ldr	r0, [pc, #24]	; (13dc0 <rx_work_handler+0x38>)
   13da8:	f010 fcf4 	bl	24794 <k_work_submit_to_queue>
#endif
		if (err < 0) {
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   13dac:	bd08      	pop	{r3, pc}
		hci_event(buf);
   13dae:	f7ff ff7d 	bl	13cac <hci_event>
		break;
   13db2:	e7f3      	b.n	13d9c <rx_work_handler+0x14>
   13db4:	20000354 	.word	0x20000354
   13db8:	20000250 	.word	0x20000250
   13dbc:	200004e4 	.word	0x200004e4
   13dc0:	200019a0 	.word	0x200019a0

00013dc4 <bt_hci_cmd_create>:
{
   13dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13dc8:	4606      	mov	r6, r0
   13dca:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   13dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13dd4:	4818      	ldr	r0, [pc, #96]	; (13e38 <bt_hci_cmd_create+0x74>)
   13dd6:	f00e f9ef 	bl	221b8 <net_buf_alloc_fixed>
   13dda:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   13ddc:	f100 090c 	add.w	r9, r0, #12
   13de0:	2100      	movs	r1, #0
   13de2:	4648      	mov	r0, r9
   13de4:	f00e fa4f 	bl	22286 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13de8:	f04f 0800 	mov.w	r8, #0
   13dec:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   13df0:	4620      	mov	r0, r4
   13df2:	f00e f93e 	bl	22072 <net_buf_id>
   13df6:	4d11      	ldr	r5, [pc, #68]	; (13e3c <bt_hci_cmd_create+0x78>)
   13df8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13dfc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   13e00:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   13e02:	4620      	mov	r0, r4
   13e04:	f00e f935 	bl	22072 <net_buf_id>
   13e08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13e0c:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   13e10:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   13e14:	4620      	mov	r0, r4
   13e16:	f00e f92c 	bl	22072 <net_buf_id>
   13e1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13e1e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   13e22:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   13e26:	2103      	movs	r1, #3
   13e28:	4648      	mov	r0, r9
   13e2a:	f00e fa30 	bl	2228e <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   13e2e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   13e30:	7087      	strb	r7, [r0, #2]
}
   13e32:	4620      	mov	r0, r4
   13e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13e38:	2000091c 	.word	0x2000091c
   13e3c:	20002e84 	.word	0x20002e84

00013e40 <bt_hci_cmd_send_sync>:
{
   13e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e42:	b087      	sub	sp, #28
   13e44:	4606      	mov	r6, r0
   13e46:	4615      	mov	r5, r2
	if (!buf) {
   13e48:	460c      	mov	r4, r1
   13e4a:	b359      	cbz	r1, 13ea4 <bt_hci_cmd_send_sync+0x64>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13e4c:	2201      	movs	r2, #1
   13e4e:	2100      	movs	r1, #0
   13e50:	4668      	mov	r0, sp
   13e52:	f010 fbf3 	bl	2463c <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13e56:	4620      	mov	r0, r4
   13e58:	f00e f90b 	bl	22072 <net_buf_id>
   13e5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13e60:	4b26      	ldr	r3, [pc, #152]	; (13efc <bt_hci_cmd_send_sync+0xbc>)
   13e62:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   13e66:	f8c3 d008 	str.w	sp, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13e6a:	4620      	mov	r0, r4
   13e6c:	f00e fa07 	bl	2227e <net_buf_ref>
   13e70:	4601      	mov	r1, r0
   13e72:	4823      	ldr	r0, [pc, #140]	; (13f00 <bt_hci_cmd_send_sync+0xc0>)
   13e74:	f00e f9dc 	bl	22230 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13e78:	f242 7210 	movw	r2, #10000	; 0x2710
   13e7c:	2300      	movs	r3, #0
   13e7e:	4668      	mov	r0, sp
   13e80:	f005 fc82 	bl	19788 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   13e84:	4607      	mov	r7, r0
   13e86:	b9a8      	cbnz	r0, 13eb4 <bt_hci_cmd_send_sync+0x74>
	status = cmd(buf)->status;
   13e88:	4620      	mov	r0, r4
   13e8a:	f00e f8f2 	bl	22072 <net_buf_id>
   13e8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13e92:	4b1a      	ldr	r3, [pc, #104]	; (13efc <bt_hci_cmd_send_sync+0xbc>)
   13e94:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
   13e98:	b9fe      	cbnz	r6, 13eda <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   13e9a:	b34d      	cbz	r5, 13ef0 <bt_hci_cmd_send_sync+0xb0>
		*rsp = buf;
   13e9c:	602c      	str	r4, [r5, #0]
	return 0;
   13e9e:	2000      	movs	r0, #0
}
   13ea0:	b007      	add	sp, #28
   13ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   13ea4:	f7ff ff8e 	bl	13dc4 <bt_hci_cmd_create>
		if (!buf) {
   13ea8:	4604      	mov	r4, r0
   13eaa:	2800      	cmp	r0, #0
   13eac:	d1ce      	bne.n	13e4c <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   13eae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13eb2:	e7f5      	b.n	13ea0 <bt_hci_cmd_send_sync+0x60>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   13eb4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   13eb8:	4a12      	ldr	r2, [pc, #72]	; (13f04 <bt_hci_cmd_send_sync+0xc4>)
   13eba:	4913      	ldr	r1, [pc, #76]	; (13f08 <bt_hci_cmd_send_sync+0xc8>)
   13ebc:	4813      	ldr	r0, [pc, #76]	; (13f0c <bt_hci_cmd_send_sync+0xcc>)
   13ebe:	f00c fe2c 	bl	20b1a <assert_print>
   13ec2:	463a      	mov	r2, r7
   13ec4:	4631      	mov	r1, r6
   13ec6:	4812      	ldr	r0, [pc, #72]	; (13f10 <bt_hci_cmd_send_sync+0xd0>)
   13ec8:	f00c fe27 	bl	20b1a <assert_print>
   13ecc:	4040      	eors	r0, r0
   13ece:	f380 8811 	msr	BASEPRI, r0
   13ed2:	f04f 0003 	mov.w	r0, #3
   13ed6:	df02      	svc	2
   13ed8:	e7d6      	b.n	13e88 <bt_hci_cmd_send_sync+0x48>
		net_buf_unref(buf);
   13eda:	4620      	mov	r0, r4
   13edc:	f00e f9ac 	bl	22238 <net_buf_unref>
		switch (status) {
   13ee0:	2e09      	cmp	r6, #9
   13ee2:	d002      	beq.n	13eea <bt_hci_cmd_send_sync+0xaa>
			return -EIO;
   13ee4:	f06f 0004 	mvn.w	r0, #4
   13ee8:	e7da      	b.n	13ea0 <bt_hci_cmd_send_sync+0x60>
			return -ECONNREFUSED;
   13eea:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   13eee:	e7d7      	b.n	13ea0 <bt_hci_cmd_send_sync+0x60>
		net_buf_unref(buf);
   13ef0:	4620      	mov	r0, r4
   13ef2:	f00e f9a1 	bl	22238 <net_buf_unref>
	return 0;
   13ef6:	2000      	movs	r0, #0
   13ef8:	e7d2      	b.n	13ea0 <bt_hci_cmd_send_sync+0x60>
   13efa:	bf00      	nop
   13efc:	20002e84 	.word	0x20002e84
   13f00:	2000035c 	.word	0x2000035c
   13f04:	00026614 	.word	0x00026614
   13f08:	000266b4 	.word	0x000266b4
   13f0c:	00026664 	.word	0x00026664
   13f10:	000266c0 	.word	0x000266c0

00013f14 <common_init>:
{
   13f14:	b510      	push	{r4, lr}
   13f16:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13f18:	4b22      	ldr	r3, [pc, #136]	; (13fa4 <common_init+0x90>)
   13f1a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   13f1e:	689b      	ldr	r3, [r3, #8]
   13f20:	f013 0f01 	tst.w	r3, #1
   13f24:	d10d      	bne.n	13f42 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   13f26:	aa01      	add	r2, sp, #4
   13f28:	2100      	movs	r1, #0
   13f2a:	f640 4003 	movw	r0, #3075	; 0xc03
   13f2e:	f7ff ff87 	bl	13e40 <bt_hci_cmd_send_sync>
		if (err) {
   13f32:	4604      	mov	r4, r0
   13f34:	b968      	cbnz	r0, 13f52 <common_init+0x3e>
		hci_reset_complete(rsp);
   13f36:	9801      	ldr	r0, [sp, #4]
   13f38:	f7ff fe18 	bl	13b6c <hci_reset_complete>
		net_buf_unref(rsp);
   13f3c:	9801      	ldr	r0, [sp, #4]
   13f3e:	f00e f97b 	bl	22238 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   13f42:	aa01      	add	r2, sp, #4
   13f44:	2100      	movs	r1, #0
   13f46:	f241 0003 	movw	r0, #4099	; 0x1003
   13f4a:	f7ff ff79 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   13f4e:	4604      	mov	r4, r0
   13f50:	b110      	cbz	r0, 13f58 <common_init+0x44>
}
   13f52:	4620      	mov	r0, r4
   13f54:	b002      	add	sp, #8
   13f56:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   13f58:	9801      	ldr	r0, [sp, #4]
   13f5a:	f7ff fdf1 	bl	13b40 <read_local_features_complete>
	net_buf_unref(rsp);
   13f5e:	9801      	ldr	r0, [sp, #4]
   13f60:	f00e f96a 	bl	22238 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   13f64:	aa01      	add	r2, sp, #4
   13f66:	2100      	movs	r1, #0
   13f68:	f241 0001 	movw	r0, #4097	; 0x1001
   13f6c:	f7ff ff68 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   13f70:	4604      	mov	r4, r0
   13f72:	2800      	cmp	r0, #0
   13f74:	d1ed      	bne.n	13f52 <common_init+0x3e>
	read_local_ver_complete(rsp);
   13f76:	9801      	ldr	r0, [sp, #4]
   13f78:	f7ff fda8 	bl	13acc <read_local_ver_complete>
	net_buf_unref(rsp);
   13f7c:	9801      	ldr	r0, [sp, #4]
   13f7e:	f00e f95b 	bl	22238 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   13f82:	aa01      	add	r2, sp, #4
   13f84:	2100      	movs	r1, #0
   13f86:	f241 0002 	movw	r0, #4098	; 0x1002
   13f8a:	f7ff ff59 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   13f8e:	4604      	mov	r4, r0
   13f90:	2800      	cmp	r0, #0
   13f92:	d1de      	bne.n	13f52 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   13f94:	9801      	ldr	r0, [sp, #4]
   13f96:	f7ff fdb9 	bl	13b0c <read_supported_commands_complete>
	net_buf_unref(rsp);
   13f9a:	9801      	ldr	r0, [sp, #4]
   13f9c:	f00e f94c 	bl	22238 <net_buf_unref>
	return 0;
   13fa0:	e7d7      	b.n	13f52 <common_init+0x3e>
   13fa2:	bf00      	nop
   13fa4:	20000250 	.word	0x20000250

00013fa8 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
   13fa8:	4b2b      	ldr	r3, [pc, #172]	; (14058 <le_init+0xb0>)
   13faa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   13fae:	f013 0f40 	tst.w	r3, #64	; 0x40
   13fb2:	d049      	beq.n	14048 <le_init+0xa0>
{
   13fb4:	b510      	push	{r4, lr}
   13fb6:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   13fb8:	aa01      	add	r2, sp, #4
   13fba:	2100      	movs	r1, #0
   13fbc:	f242 0003 	movw	r0, #8195	; 0x2003
   13fc0:	f7ff ff3e 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   13fc4:	4603      	mov	r3, r0
   13fc6:	b110      	cbz	r0, 13fce <le_init+0x26>
}
   13fc8:	4618      	mov	r0, r3
   13fca:	b002      	add	sp, #8
   13fcc:	bd10      	pop	{r4, pc}
	read_le_features_complete(rsp);
   13fce:	9801      	ldr	r0, [sp, #4]
   13fd0:	f7ff fd92 	bl	13af8 <read_le_features_complete>
	net_buf_unref(rsp);
   13fd4:	9801      	ldr	r0, [sp, #4]
   13fd6:	f00e f92f 	bl	22238 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   13fda:	4b1f      	ldr	r3, [pc, #124]	; (14058 <le_init+0xb0>)
   13fdc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   13fe0:	f013 0f20 	tst.w	r3, #32
   13fe4:	d018      	beq.n	14018 <le_init+0x70>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   13fe6:	4b1c      	ldr	r3, [pc, #112]	; (14058 <le_init+0xb0>)
   13fe8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   13fec:	f013 0f08 	tst.w	r3, #8
   13ff0:	d00e      	beq.n	14010 <le_init+0x68>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   13ff2:	aa01      	add	r2, sp, #4
   13ff4:	2100      	movs	r1, #0
   13ff6:	f242 001c 	movw	r0, #8220	; 0x201c
   13ffa:	f7ff ff21 	bl	13e40 <bt_hci_cmd_send_sync>
		if (err) {
   13ffe:	4603      	mov	r3, r0
   14000:	2800      	cmp	r0, #0
   14002:	d1e1      	bne.n	13fc8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   14004:	9801      	ldr	r0, [sp, #4]
   14006:	f7ff fda5 	bl	13b54 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   1400a:	9801      	ldr	r0, [sp, #4]
   1400c:	f00e f914 	bl	22238 <net_buf_unref>
	return  le_set_event_mask();
   14010:	f00d ff93 	bl	21f3a <le_set_event_mask>
   14014:	4603      	mov	r3, r0
   14016:	e7d7      	b.n	13fc8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14018:	2102      	movs	r1, #2
   1401a:	f640 406d 	movw	r0, #3181	; 0xc6d
   1401e:	f7ff fed1 	bl	13dc4 <bt_hci_cmd_create>
		if (!buf) {
   14022:	4604      	mov	r4, r0
   14024:	b1a0      	cbz	r0, 14050 <le_init+0xa8>
   14026:	2102      	movs	r1, #2
   14028:	300c      	adds	r0, #12
   1402a:	f00e f930 	bl	2228e <net_buf_simple_add>
		cp_le->le = 0x01;
   1402e:	2301      	movs	r3, #1
   14030:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   14032:	2200      	movs	r2, #0
   14034:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14036:	4621      	mov	r1, r4
   14038:	f640 406d 	movw	r0, #3181	; 0xc6d
   1403c:	f7ff ff00 	bl	13e40 <bt_hci_cmd_send_sync>
		if (err) {
   14040:	4603      	mov	r3, r0
   14042:	2800      	cmp	r0, #0
   14044:	d0cf      	beq.n	13fe6 <le_init+0x3e>
   14046:	e7bf      	b.n	13fc8 <le_init+0x20>
		return -ENODEV;
   14048:	f06f 0312 	mvn.w	r3, #18
}
   1404c:	4618      	mov	r0, r3
   1404e:	4770      	bx	lr
			return -ENOBUFS;
   14050:	f06f 0368 	mvn.w	r3, #104	; 0x68
   14054:	e7b8      	b.n	13fc8 <le_init+0x20>
   14056:	bf00      	nop
   14058:	20000250 	.word	0x20000250

0001405c <set_event_mask>:
{
   1405c:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1405e:	2108      	movs	r1, #8
   14060:	f640 4001 	movw	r0, #3073	; 0xc01
   14064:	f7ff feae 	bl	13dc4 <bt_hci_cmd_create>
	if (!buf) {
   14068:	b188      	cbz	r0, 1408e <set_event_mask+0x32>
   1406a:	4604      	mov	r4, r0
   1406c:	2108      	movs	r1, #8
   1406e:	300c      	adds	r0, #12
   14070:	f00e f90d 	bl	2228e <net_buf_simple_add>
   14074:	4602      	mov	r2, r0
	sys_put_le64(mask, ev->events);
   14076:	4807      	ldr	r0, [pc, #28]	; (14094 <set_event_mask+0x38>)
   14078:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1407c:	f00d fee3 	bl	21e46 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   14080:	2200      	movs	r2, #0
   14082:	4621      	mov	r1, r4
   14084:	f640 4001 	movw	r0, #3073	; 0xc01
   14088:	f7ff feda 	bl	13e40 <bt_hci_cmd_send_sync>
}
   1408c:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1408e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14092:	e7fb      	b.n	1408c <set_event_mask+0x30>
   14094:	02008000 	.word	0x02008000

00014098 <hci_vs_init>:
{
   14098:	b510      	push	{r4, lr}
   1409a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1409c:	aa01      	add	r2, sp, #4
   1409e:	2100      	movs	r1, #0
   140a0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   140a4:	f7ff fecc 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   140a8:	b108      	cbz	r0, 140ae <hci_vs_init+0x16>
}
   140aa:	b002      	add	sp, #8
   140ac:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
   140ae:	9801      	ldr	r0, [sp, #4]
   140b0:	f00e f8c2 	bl	22238 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   140b4:	aa01      	add	r2, sp, #4
   140b6:	2100      	movs	r1, #0
   140b8:	f64f 4002 	movw	r0, #64514	; 0xfc02
   140bc:	f7ff fec0 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   140c0:	2800      	cmp	r0, #0
   140c2:	d1f2      	bne.n	140aa <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
   140c4:	9801      	ldr	r0, [sp, #4]
   140c6:	68c3      	ldr	r3, [r0, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   140c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   140cc:	4c0c      	ldr	r4, [pc, #48]	; (14100 <hci_vs_init+0x68>)
   140ce:	f8a4 30c1 	strh.w	r3, [r4, #193]	; 0xc1
	net_buf_unref(rsp);
   140d2:	f00e f8b1 	bl	22238 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   140d6:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   140da:	f013 0f04 	tst.w	r3, #4
   140de:	d0e4      	beq.n	140aa <hci_vs_init+0x12>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   140e0:	aa01      	add	r2, sp, #4
   140e2:	2100      	movs	r1, #0
   140e4:	f64f 4003 	movw	r0, #64515	; 0xfc03
   140e8:	f7ff feaa 	bl	13e40 <bt_hci_cmd_send_sync>
		if (err) {
   140ec:	2800      	cmp	r0, #0
   140ee:	d1dc      	bne.n	140aa <hci_vs_init+0x12>
		rp.feat = (void *)rsp->data;
   140f0:	9801      	ldr	r0, [sp, #4]
   140f2:	68c3      	ldr	r3, [r0, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
   140f4:	785a      	ldrb	r2, [r3, #1]
   140f6:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		net_buf_unref(rsp);
   140fa:	f00e f89d 	bl	22238 <net_buf_unref>
   140fe:	e7d4      	b.n	140aa <hci_vs_init+0x12>
   14100:	20000250 	.word	0x20000250

00014104 <hci_init>:
{
   14104:	b508      	push	{r3, lr}
	err = common_init();
   14106:	f7ff ff05 	bl	13f14 <common_init>
	if (err) {
   1410a:	4603      	mov	r3, r0
   1410c:	b108      	cbz	r0, 14112 <hci_init+0xe>
}
   1410e:	4618      	mov	r0, r3
   14110:	bd08      	pop	{r3, pc}
	err = le_init();
   14112:	f7ff ff49 	bl	13fa8 <le_init>
	if (err) {
   14116:	4603      	mov	r3, r0
   14118:	2800      	cmp	r0, #0
   1411a:	d1f8      	bne.n	1410e <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1411c:	4b0a      	ldr	r3, [pc, #40]	; (14148 <hci_init+0x44>)
   1411e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   14122:	f013 0f20 	tst.w	r3, #32
   14126:	d104      	bne.n	14132 <hci_init+0x2e>
		err = bt_br_init();
   14128:	f00d feda 	bl	21ee0 <bt_br_init>
		if (err) {
   1412c:	4603      	mov	r3, r0
   1412e:	2800      	cmp	r0, #0
   14130:	d1ed      	bne.n	1410e <hci_init+0xa>
	err = set_event_mask();
   14132:	f7ff ff93 	bl	1405c <set_event_mask>
	if (err) {
   14136:	4603      	mov	r3, r0
   14138:	2800      	cmp	r0, #0
   1413a:	d1e8      	bne.n	1410e <hci_init+0xa>
	hci_vs_init();
   1413c:	f7ff ffac 	bl	14098 <hci_vs_init>
	err = bt_id_init();
   14140:	f000 fa68 	bl	14614 <bt_id_init>
   14144:	4603      	mov	r3, r0
	if (err) {
   14146:	e7e2      	b.n	1410e <hci_init+0xa>
   14148:	20000250 	.word	0x20000250

0001414c <bt_hci_le_rand>:
{
   1414c:	b570      	push	{r4, r5, r6, lr}
   1414e:	b082      	sub	sp, #8
   14150:	4606      	mov	r6, r0
   14152:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   14154:	4b12      	ldr	r3, [pc, #72]	; (141a0 <bt_hci_le_rand+0x54>)
   14156:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   1415a:	2b00      	cmp	r3, #0
   1415c:	da1d      	bge.n	1419a <bt_hci_le_rand+0x4e>
	while (len > 0) {
   1415e:	b1c4      	cbz	r4, 14192 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   14160:	4625      	mov	r5, r4
   14162:	2c08      	cmp	r4, #8
   14164:	bf28      	it	cs
   14166:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   14168:	aa01      	add	r2, sp, #4
   1416a:	2100      	movs	r1, #0
   1416c:	f242 0018 	movw	r0, #8216	; 0x2018
   14170:	f7ff fe66 	bl	13e40 <bt_hci_cmd_send_sync>
		if (err) {
   14174:	4603      	mov	r3, r0
   14176:	b968      	cbnz	r0, 14194 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   14178:	9b01      	ldr	r3, [sp, #4]
   1417a:	68d9      	ldr	r1, [r3, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1417c:	462a      	mov	r2, r5
   1417e:	3101      	adds	r1, #1
   14180:	4630      	mov	r0, r6
   14182:	f010 fe42 	bl	24e0a <memcpy>
		net_buf_unref(rsp);
   14186:	9801      	ldr	r0, [sp, #4]
   14188:	f00e f856 	bl	22238 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1418c:	442e      	add	r6, r5
		len -= count;
   1418e:	1b64      	subs	r4, r4, r5
   14190:	e7e5      	b.n	1415e <bt_hci_le_rand+0x12>
	return 0;
   14192:	2300      	movs	r3, #0
}
   14194:	4618      	mov	r0, r3
   14196:	b002      	add	sp, #8
   14198:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1419a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1419e:	e7f9      	b.n	14194 <bt_hci_le_rand+0x48>
   141a0:	20000250 	.word	0x20000250

000141a4 <hci_event_prio>:
{
   141a4:	b570      	push	{r4, r5, r6, lr}
   141a6:	b082      	sub	sp, #8
   141a8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   141aa:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   141ae:	4628      	mov	r0, r5
   141b0:	f00e f886 	bl	222c0 <net_buf_simple_headroom>
   141b4:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   141b8:	8a23      	ldrh	r3, [r4, #16]
   141ba:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   141be:	2b01      	cmp	r3, #1
   141c0:	d923      	bls.n	1420a <hci_event_prio+0x66>
	return net_buf_simple_pull_mem(&buf->b, len);
   141c2:	2102      	movs	r1, #2
   141c4:	4628      	mov	r0, r5
   141c6:	f00e f873 	bl	222b0 <net_buf_simple_pull_mem>
   141ca:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   141cc:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   141ce:	2b05      	cmp	r3, #5
   141d0:	d02b      	beq.n	1422a <hci_event_prio+0x86>
   141d2:	d32c      	bcc.n	1422e <hci_event_prio+0x8a>
   141d4:	3b0e      	subs	r3, #14
   141d6:	b2db      	uxtb	r3, r3
   141d8:	2b01      	cmp	r3, #1
   141da:	d824      	bhi.n	14226 <hci_event_prio+0x82>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   141dc:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   141de:	f016 0f01 	tst.w	r6, #1
   141e2:	d026      	beq.n	14232 <hci_event_prio+0x8e>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   141e4:	2302      	movs	r3, #2
   141e6:	4a1c      	ldr	r2, [pc, #112]	; (14258 <hci_event_prio+0xb4>)
   141e8:	4621      	mov	r1, r4
   141ea:	7828      	ldrb	r0, [r5, #0]
   141ec:	f00d fe73 	bl	21ed6 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   141f0:	f016 0f02 	tst.w	r6, #2
   141f4:	d02b      	beq.n	1424e <hci_event_prio+0xaa>
	buf->data = buf->__buf + state->offset;
   141f6:	6963      	ldr	r3, [r4, #20]
   141f8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   141fc:	4413      	add	r3, r2
   141fe:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   14200:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14204:	8223      	strh	r3, [r4, #16]
}
   14206:	b002      	add	sp, #8
   14208:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1420a:	f640 636f 	movw	r3, #3695	; 0xe6f
   1420e:	4a13      	ldr	r2, [pc, #76]	; (1425c <hci_event_prio+0xb8>)
   14210:	4913      	ldr	r1, [pc, #76]	; (14260 <hci_event_prio+0xbc>)
   14212:	4814      	ldr	r0, [pc, #80]	; (14264 <hci_event_prio+0xc0>)
   14214:	f00c fc81 	bl	20b1a <assert_print>
   14218:	4040      	eors	r0, r0
   1421a:	f380 8811 	msr	BASEPRI, r0
   1421e:	f04f 0003 	mov.w	r0, #3
   14222:	df02      	svc	2
   14224:	e7cd      	b.n	141c2 <hci_event_prio+0x1e>
		return BT_HCI_EVT_FLAG_RECV;
   14226:	2602      	movs	r6, #2
   14228:	e7d9      	b.n	141de <hci_event_prio+0x3a>
	switch (evt) {
   1422a:	2603      	movs	r6, #3
   1422c:	e7d7      	b.n	141de <hci_event_prio+0x3a>
		return BT_HCI_EVT_FLAG_RECV;
   1422e:	2602      	movs	r6, #2
   14230:	e7d5      	b.n	141de <hci_event_prio+0x3a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14232:	f640 6373 	movw	r3, #3699	; 0xe73
   14236:	4a09      	ldr	r2, [pc, #36]	; (1425c <hci_event_prio+0xb8>)
   14238:	490b      	ldr	r1, [pc, #44]	; (14268 <hci_event_prio+0xc4>)
   1423a:	480a      	ldr	r0, [pc, #40]	; (14264 <hci_event_prio+0xc0>)
   1423c:	f00c fc6d 	bl	20b1a <assert_print>
   14240:	4040      	eors	r0, r0
   14242:	f380 8811 	msr	BASEPRI, r0
   14246:	f04f 0003 	mov.w	r0, #3
   1424a:	df02      	svc	2
   1424c:	e7ca      	b.n	141e4 <hci_event_prio+0x40>
		net_buf_unref(buf);
   1424e:	4620      	mov	r0, r4
   14250:	f00d fff2 	bl	22238 <net_buf_unref>
}
   14254:	e7d7      	b.n	14206 <hci_event_prio+0x62>
   14256:	bf00      	nop
   14258:	00026708 	.word	0x00026708
   1425c:	00026614 	.word	0x00026614
   14260:	00026648 	.word	0x00026648
   14264:	00026664 	.word	0x00026664
   14268:	000266ec 	.word	0x000266ec

0001426c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1426c:	4b0a      	ldr	r3, [pc, #40]	; (14298 <bt_hci_driver_register+0x2c>)
   1426e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   14272:	b943      	cbnz	r3, 14286 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   14274:	68c3      	ldr	r3, [r0, #12]
   14276:	b14b      	cbz	r3, 1428c <bt_hci_driver_register+0x20>
   14278:	6943      	ldr	r3, [r0, #20]
   1427a:	b153      	cbz	r3, 14292 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   1427c:	4b06      	ldr	r3, [pc, #24]	; (14298 <bt_hci_driver_register+0x2c>)
   1427e:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
	return 0;
   14282:	2000      	movs	r0, #0
   14284:	4770      	bx	lr
		return -EALREADY;
   14286:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1428a:	4770      	bx	lr
		return -EINVAL;
   1428c:	f06f 0015 	mvn.w	r0, #21
   14290:	4770      	bx	lr
   14292:	f06f 0015 	mvn.w	r0, #21
}
   14296:	4770      	bx	lr
   14298:	20000250 	.word	0x20000250

0001429c <bt_finalize_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1429c:	4b06      	ldr	r3, [pc, #24]	; (142b8 <bt_finalize_init+0x1c>)
   1429e:	f3bf 8f5b 	dmb	ish
   142a2:	e853 1f00 	ldrex	r1, [r3]
   142a6:	f041 0104 	orr.w	r1, r1, #4
   142aa:	e843 1200 	strex	r2, r1, [r3]
   142ae:	2a00      	cmp	r2, #0
   142b0:	d1f7      	bne.n	142a2 <bt_finalize_init+0x6>
   142b2:	f3bf 8f5b 	dmb	ish
}
   142b6:	4770      	bx	lr
   142b8:	20000324 	.word	0x20000324

000142bc <init_work>:
{
   142bc:	b508      	push	{r3, lr}
	err = bt_init();
   142be:	f00d fe81 	bl	21fc4 <bt_init>
	if (ready_cb) {
   142c2:	4b02      	ldr	r3, [pc, #8]	; (142cc <init_work+0x10>)
   142c4:	681b      	ldr	r3, [r3, #0]
   142c6:	b103      	cbz	r3, 142ca <init_work+0xe>
		ready_cb(err);
   142c8:	4798      	blx	r3
}
   142ca:	bd08      	pop	{r3, pc}
   142cc:	20002e9c 	.word	0x20002e9c

000142d0 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   142d0:	f3bf 8f5b 	dmb	ish
   142d4:	4b03      	ldr	r3, [pc, #12]	; (142e4 <bt_is_ready+0x14>)
   142d6:	6818      	ldr	r0, [r3, #0]
   142d8:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   142dc:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   142e0:	4770      	bx	lr
   142e2:	bf00      	nop
   142e4:	20000324 	.word	0x20000324

000142e8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   142e8:	b570      	push	{r4, r5, r6, lr}
   142ea:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   142ec:	2400      	movs	r4, #0
   142ee:	e001      	b.n	142f4 <id_find+0xc>
   142f0:	3401      	adds	r4, #1
   142f2:	b2e4      	uxtb	r4, r4
   142f4:	4b09      	ldr	r3, [pc, #36]	; (1431c <id_find+0x34>)
   142f6:	79db      	ldrb	r3, [r3, #7]
   142f8:	42a3      	cmp	r3, r4
   142fa:	d90b      	bls.n	14314 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   142fc:	4626      	mov	r6, r4
   142fe:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 *
 *  @sa bt_addr_le_eq
 */
static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
   14302:	2207      	movs	r2, #7
   14304:	4b05      	ldr	r3, [pc, #20]	; (1431c <id_find+0x34>)
   14306:	4419      	add	r1, r3
   14308:	4628      	mov	r0, r5
   1430a:	f010 fd6e 	bl	24dea <memcmp>
   1430e:	2800      	cmp	r0, #0
   14310:	d1ee      	bne.n	142f0 <id_find+0x8>
   14312:	e001      	b.n	14318 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   14314:	f06f 0601 	mvn.w	r6, #1
}
   14318:	4630      	mov	r0, r6
   1431a:	bd70      	pop	{r4, r5, r6, pc}
   1431c:	20000250 	.word	0x20000250

00014320 <set_random_address>:
{
   14320:	b570      	push	{r4, r5, r6, lr}
   14322:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   14324:	2206      	movs	r2, #6
   14326:	4914      	ldr	r1, [pc, #80]	; (14378 <set_random_address+0x58>)
   14328:	f010 fd5f 	bl	24dea <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1432c:	4605      	mov	r5, r0
   1432e:	b908      	cbnz	r0, 14334 <set_random_address+0x14>
}
   14330:	4628      	mov	r0, r5
   14332:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14334:	2106      	movs	r1, #6
   14336:	f242 0005 	movw	r0, #8197	; 0x2005
   1433a:	f7ff fd43 	bl	13dc4 <bt_hci_cmd_create>
	if (!buf) {
   1433e:	4605      	mov	r5, r0
   14340:	b1b0      	cbz	r0, 14370 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14342:	2206      	movs	r2, #6
   14344:	4621      	mov	r1, r4
   14346:	300c      	adds	r0, #12
   14348:	f00d ffa7 	bl	2229a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1434c:	2200      	movs	r2, #0
   1434e:	4629      	mov	r1, r5
   14350:	f242 0005 	movw	r0, #8197	; 0x2005
   14354:	f7ff fd74 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   14358:	4605      	mov	r5, r0
   1435a:	2800      	cmp	r0, #0
   1435c:	d1e8      	bne.n	14330 <set_random_address+0x10>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   1435e:	4e06      	ldr	r6, [pc, #24]	; (14378 <set_random_address+0x58>)
   14360:	4621      	mov	r1, r4
   14362:	4630      	mov	r0, r6
   14364:	f00d fe38 	bl	21fd8 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14368:	2301      	movs	r3, #1
   1436a:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   1436e:	e7df      	b.n	14330 <set_random_address+0x10>
		return -ENOBUFS;
   14370:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14374:	e7dc      	b.n	14330 <set_random_address+0x10>
   14376:	bf00      	nop
   14378:	200002b9 	.word	0x200002b9

0001437c <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   1437c:	b570      	push	{r4, r5, r6, lr}
   1437e:	b082      	sub	sp, #8
   14380:	4605      	mov	r5, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14382:	460e      	mov	r6, r1
   14384:	b129      	cbz	r1, 14392 <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   14386:	2207      	movs	r2, #7
   14388:	4913      	ldr	r1, [pc, #76]	; (143d8 <id_create+0x5c>)
   1438a:	4630      	mov	r0, r6
   1438c:	f010 fd2d 	bl	24dea <memcmp>
   14390:	b9b8      	cbnz	r0, 143c2 <id_create+0x46>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   14392:	4668      	mov	r0, sp
   14394:	f00d fd49 	bl	21e2a <bt_addr_le_create_static>
			if (err) {
   14398:	4604      	mov	r4, r0
   1439a:	b9d0      	cbnz	r0, 143d2 <id_create+0x56>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   1439c:	4668      	mov	r0, sp
   1439e:	f7ff ffa3 	bl	142e8 <id_find>
   143a2:	2800      	cmp	r0, #0
   143a4:	daf5      	bge.n	14392 <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   143a6:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   143aa:	4b0c      	ldr	r3, [pc, #48]	; (143dc <id_create+0x60>)
   143ac:	441d      	add	r5, r3
   143ae:	4669      	mov	r1, sp
   143b0:	4628      	mov	r0, r5
   143b2:	f00d fe16 	bl	21fe2 <bt_addr_le_copy>

		if (addr) {
   143b6:	b166      	cbz	r6, 143d2 <id_create+0x56>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   143b8:	4629      	mov	r1, r5
   143ba:	4630      	mov	r0, r6
   143bc:	f00d fe11 	bl	21fe2 <bt_addr_le_copy>
   143c0:	e007      	b.n	143d2 <id_create+0x56>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   143c2:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   143c6:	4631      	mov	r1, r6
   143c8:	4804      	ldr	r0, [pc, #16]	; (143dc <id_create+0x60>)
   143ca:	4428      	add	r0, r5
   143cc:	f00d fe09 	bl	21fe2 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   143d0:	2400      	movs	r4, #0
}
   143d2:	4620      	mov	r0, r4
   143d4:	b002      	add	sp, #8
   143d6:	bd70      	pop	{r4, r5, r6, pc}
   143d8:	000265d4 	.word	0x000265d4
   143dc:	20000250 	.word	0x20000250

000143e0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   143e0:	b570      	push	{r4, r5, r6, lr}
   143e2:	b084      	sub	sp, #16
   143e4:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   143e6:	4604      	mov	r4, r0
   143e8:	b188      	cbz	r0, 1440e <bt_id_create+0x2e>
   143ea:	2207      	movs	r2, #7
   143ec:	4926      	ldr	r1, [pc, #152]	; (14488 <bt_id_create+0xa8>)
   143ee:	f010 fcfc 	bl	24dea <memcmp>
   143f2:	b160      	cbz	r0, 1440e <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   143f4:	7823      	ldrb	r3, [r4, #0]
   143f6:	2b01      	cmp	r3, #1
   143f8:	d136      	bne.n	14468 <bt_id_create+0x88>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   143fa:	79a3      	ldrb	r3, [r4, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   143fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14400:	2bc0      	cmp	r3, #192	; 0xc0
   14402:	d134      	bne.n	1446e <bt_id_create+0x8e>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   14404:	4620      	mov	r0, r4
   14406:	f7ff ff6f 	bl	142e8 <id_find>
   1440a:	2800      	cmp	r0, #0
   1440c:	da32      	bge.n	14474 <bt_id_create+0x94>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1440e:	2d00      	cmp	r5, #0
   14410:	d133      	bne.n	1447a <bt_id_create+0x9a>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14412:	4b1e      	ldr	r3, [pc, #120]	; (1448c <bt_id_create+0xac>)
   14414:	79db      	ldrb	r3, [r3, #7]
   14416:	2b01      	cmp	r3, #1
   14418:	d032      	beq.n	14480 <bt_id_create+0xa0>
   1441a:	f3bf 8f5b 	dmb	ish
   1441e:	4b1c      	ldr	r3, [pc, #112]	; (14490 <bt_id_create+0xb0>)
   14420:	681b      	ldr	r3, [r3, #0]
   14422:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14426:	f013 0f01 	tst.w	r3, #1
   1442a:	d10b      	bne.n	14444 <bt_id_create+0x64>
		uint8_t zero_irk[16] = { 0 };
   1442c:	2300      	movs	r3, #0
   1442e:	9300      	str	r3, [sp, #0]
   14430:	9301      	str	r3, [sp, #4]
   14432:	9302      	str	r3, [sp, #8]
   14434:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   14436:	b1a4      	cbz	r4, 14462 <bt_id_create+0x82>
   14438:	2207      	movs	r2, #7
   1443a:	4913      	ldr	r1, [pc, #76]	; (14488 <bt_id_create+0xa8>)
   1443c:	4620      	mov	r0, r4
   1443e:	f010 fcd4 	bl	24dea <memcmp>
   14442:	b170      	cbz	r0, 14462 <bt_id_create+0x82>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   14444:	4b11      	ldr	r3, [pc, #68]	; (1448c <bt_id_create+0xac>)
   14446:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   14448:	462a      	mov	r2, r5
   1444a:	4621      	mov	r1, r4
   1444c:	4630      	mov	r0, r6
   1444e:	f7ff ff95 	bl	1437c <id_create>
	if (err) {
   14452:	b920      	cbnz	r0, 1445e <bt_id_create+0x7e>
		return err;
	} else {
		bt_dev.id_count++;
   14454:	4a0d      	ldr	r2, [pc, #52]	; (1448c <bt_id_create+0xac>)
   14456:	79d3      	ldrb	r3, [r2, #7]
   14458:	3301      	adds	r3, #1
   1445a:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   1445c:	4630      	mov	r0, r6
}
   1445e:	b004      	add	sp, #16
   14460:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   14462:	f06f 0015 	mvn.w	r0, #21
   14466:	e7fa      	b.n	1445e <bt_id_create+0x7e>
			return -EINVAL;
   14468:	f06f 0015 	mvn.w	r0, #21
   1446c:	e7f7      	b.n	1445e <bt_id_create+0x7e>
   1446e:	f06f 0015 	mvn.w	r0, #21
   14472:	e7f4      	b.n	1445e <bt_id_create+0x7e>
			return -EALREADY;
   14474:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14478:	e7f1      	b.n	1445e <bt_id_create+0x7e>
		return -EINVAL;
   1447a:	f06f 0015 	mvn.w	r0, #21
   1447e:	e7ee      	b.n	1445e <bt_id_create+0x7e>
		return -ENOMEM;
   14480:	f06f 000b 	mvn.w	r0, #11
   14484:	e7eb      	b.n	1445e <bt_id_create+0x7e>
   14486:	bf00      	nop
   14488:	000265d4 	.word	0x000265d4
   1448c:	20000250 	.word	0x20000250
   14490:	20000324 	.word	0x20000324

00014494 <bt_id_read_public_addr>:
{
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   14494:	b348      	cbz	r0, 144ea <bt_id_read_public_addr+0x56>
{
   14496:	b570      	push	{r4, r5, r6, lr}
   14498:	b082      	sub	sp, #8
   1449a:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1449c:	aa01      	add	r2, sp, #4
   1449e:	2100      	movs	r1, #0
   144a0:	f241 0009 	movw	r0, #4105	; 0x1009
   144a4:	f7ff fccc 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   144a8:	bb08      	cbnz	r0, 144ee <bt_id_read_public_addr+0x5a>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   144aa:	9e01      	ldr	r6, [sp, #4]
   144ac:	68f4      	ldr	r4, [r6, #12]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   144ae:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   144b0:	2206      	movs	r2, #6
   144b2:	4910      	ldr	r1, [pc, #64]	; (144f4 <bt_id_read_public_addr+0x60>)
   144b4:	4620      	mov	r0, r4
   144b6:	f010 fc98 	bl	24dea <memcmp>
   144ba:	b128      	cbz	r0, 144c8 <bt_id_read_public_addr+0x34>
   144bc:	2206      	movs	r2, #6
   144be:	490e      	ldr	r1, [pc, #56]	; (144f8 <bt_id_read_public_addr+0x64>)
   144c0:	4620      	mov	r0, r4
   144c2:	f010 fc92 	bl	24dea <memcmp>
   144c6:	b928      	cbnz	r0, 144d4 <bt_id_read_public_addr+0x40>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   144c8:	4630      	mov	r0, r6
   144ca:	f00d feb5 	bl	22238 <net_buf_unref>
		return 0U;
   144ce:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   144d0:	b002      	add	sp, #8
   144d2:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_copy(&addr->a, &rp->bdaddr);
   144d4:	4621      	mov	r1, r4
   144d6:	1c68      	adds	r0, r5, #1
   144d8:	f00d fd7e 	bl	21fd8 <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;
   144dc:	2300      	movs	r3, #0
   144de:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   144e0:	9801      	ldr	r0, [sp, #4]
   144e2:	f00d fea9 	bl	22238 <net_buf_unref>
	return 1U;
   144e6:	2001      	movs	r0, #1
   144e8:	e7f2      	b.n	144d0 <bt_id_read_public_addr+0x3c>
		return 0U;
   144ea:	2000      	movs	r0, #0
}
   144ec:	4770      	bx	lr
		return 0U;
   144ee:	2000      	movs	r0, #0
   144f0:	e7ee      	b.n	144d0 <bt_id_read_public_addr+0x3c>
   144f2:	bf00      	nop
   144f4:	000265e4 	.word	0x000265e4
   144f8:	000265dc 	.word	0x000265dc

000144fc <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   144fc:	b500      	push	{lr}
   144fe:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14500:	4668      	mov	r0, sp
   14502:	f7ff ffc7 	bl	14494 <bt_id_read_public_addr>
   14506:	4b06      	ldr	r3, [pc, #24]	; (14520 <bt_setup_public_id_addr+0x24>)
   14508:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1450a:	b918      	cbnz	r0, 14514 <bt_setup_public_id_addr+0x18>
		return 0;
   1450c:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   1450e:	b003      	add	sp, #12
   14510:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   14514:	2200      	movs	r2, #0
   14516:	4669      	mov	r1, sp
   14518:	4610      	mov	r0, r2
   1451a:	f7ff ff2f 	bl	1437c <id_create>
   1451e:	e7f6      	b.n	1450e <bt_setup_public_id_addr+0x12>
   14520:	20000250 	.word	0x20000250

00014524 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14528:	b083      	sub	sp, #12
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1452a:	4b20      	ldr	r3, [pc, #128]	; (145ac <bt_read_static_addr+0x88>)
   1452c:	f893 40c2 	ldrb.w	r4, [r3, #194]	; 0xc2
   14530:	f014 0401 	ands.w	r4, r4, #1
   14534:	d103      	bne.n	1453e <bt_read_static_addr+0x1a>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   14536:	4620      	mov	r0, r4
   14538:	b003      	add	sp, #12
   1453a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1453e:	4605      	mov	r5, r0
   14540:	460e      	mov	r6, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14542:	aa01      	add	r2, sp, #4
   14544:	2100      	movs	r1, #0
   14546:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1454a:	f7ff fc79 	bl	13e40 <bt_hci_cmd_send_sync>
	if (err) {
   1454e:	4684      	mov	ip, r0
   14550:	bb48      	cbnz	r0, 145a6 <bt_read_static_addr+0x82>
	rp = (void *)rsp->data;
   14552:	9801      	ldr	r0, [sp, #4]
   14554:	f8d0 900c 	ldr.w	r9, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   14558:	f899 4001 	ldrb.w	r4, [r9, #1]
   1455c:	42b4      	cmp	r4, r6
   1455e:	bf28      	it	cs
   14560:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   14562:	e01b      	b.n	1459c <bt_read_static_addr+0x78>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   14564:	2116      	movs	r1, #22
   14566:	fb01 f10c 	mul.w	r1, r1, ip
   1456a:	186a      	adds	r2, r5, r1
   1456c:	eb09 0301 	add.w	r3, r9, r1
   14570:	f8d3 e002 	ldr.w	lr, [r3, #2]
   14574:	f8d3 8006 	ldr.w	r8, [r3, #6]
   14578:	f8d3 700a 	ldr.w	r7, [r3, #10]
   1457c:	f8d3 600e 	ldr.w	r6, [r3, #14]
   14580:	f845 e001 	str.w	lr, [r5, r1]
   14584:	f8c2 8004 	str.w	r8, [r2, #4]
   14588:	6097      	str	r7, [r2, #8]
   1458a:	60d6      	str	r6, [r2, #12]
   1458c:	f8d3 e012 	ldr.w	lr, [r3, #18]
   14590:	f8c2 e010 	str.w	lr, [r2, #16]
   14594:	8adb      	ldrh	r3, [r3, #22]
   14596:	8293      	strh	r3, [r2, #20]
	for (i = 0; i < cnt; i++) {
   14598:	f10c 0c01 	add.w	ip, ip, #1
   1459c:	4564      	cmp	r4, ip
   1459e:	dce1      	bgt.n	14564 <bt_read_static_addr+0x40>
	net_buf_unref(rsp);
   145a0:	f00d fe4a 	bl	22238 <net_buf_unref>
	if (!cnt) {
   145a4:	e7c7      	b.n	14536 <bt_read_static_addr+0x12>
		return 0;
   145a6:	2400      	movs	r4, #0
   145a8:	e7c5      	b.n	14536 <bt_read_static_addr+0x12>
   145aa:	bf00      	nop
   145ac:	20000250 	.word	0x20000250

000145b0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   145b0:	b510      	push	{r4, lr}
   145b2:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   145b4:	4b16      	ldr	r3, [pc, #88]	; (14610 <bt_setup_random_id_addr+0x60>)
   145b6:	79dc      	ldrb	r4, [r3, #7]
   145b8:	b934      	cbnz	r4, 145c8 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   145ba:	2101      	movs	r1, #1
   145bc:	a802      	add	r0, sp, #8
   145be:	f7ff ffb1 	bl	14524 <bt_read_static_addr>
   145c2:	4b13      	ldr	r3, [pc, #76]	; (14610 <bt_setup_random_id_addr+0x60>)
   145c4:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   145c6:	b948      	cbnz	r0, 145dc <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   145c8:	2100      	movs	r1, #0
   145ca:	4608      	mov	r0, r1
   145cc:	f7ff ff08 	bl	143e0 <bt_id_create>
   145d0:	4603      	mov	r3, r0
}
   145d2:	4618      	mov	r0, r3
   145d4:	b008      	add	sp, #32
   145d6:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   145d8:	3401      	adds	r4, #1
   145da:	b2e4      	uxtb	r4, r4
   145dc:	4b0c      	ldr	r3, [pc, #48]	; (14610 <bt_setup_random_id_addr+0x60>)
   145de:	79db      	ldrb	r3, [r3, #7]
   145e0:	42a3      	cmp	r3, r4
   145e2:	d913      	bls.n	1460c <bt_setup_random_id_addr+0x5c>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   145e4:	2116      	movs	r1, #22
   145e6:	ab02      	add	r3, sp, #8
   145e8:	fb01 3104 	mla	r1, r1, r4, r3
   145ec:	f10d 0001 	add.w	r0, sp, #1
   145f0:	f00d fcf2 	bl	21fd8 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   145f4:	2301      	movs	r3, #1
   145f6:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   145fa:	2200      	movs	r2, #0
   145fc:	4669      	mov	r1, sp
   145fe:	4620      	mov	r0, r4
   14600:	f7ff febc 	bl	1437c <id_create>
				if (err) {
   14604:	4603      	mov	r3, r0
   14606:	2800      	cmp	r0, #0
   14608:	d0e6      	beq.n	145d8 <bt_setup_random_id_addr+0x28>
   1460a:	e7e2      	b.n	145d2 <bt_setup_random_id_addr+0x22>
			return 0;
   1460c:	2300      	movs	r3, #0
   1460e:	e7e0      	b.n	145d2 <bt_setup_random_id_addr+0x22>
   14610:	20000250 	.word	0x20000250

00014614 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14614:	b508      	push	{r3, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14616:	4b0a      	ldr	r3, [pc, #40]	; (14640 <bt_id_init+0x2c>)
   14618:	79db      	ldrb	r3, [r3, #7]
   1461a:	b123      	cbz	r3, 14626 <bt_id_init+0x12>
			LOG_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1461c:	4b08      	ldr	r3, [pc, #32]	; (14640 <bt_id_init+0x2c>)
   1461e:	79db      	ldrb	r3, [r3, #7]
   14620:	b133      	cbz	r3, 14630 <bt_id_init+0x1c>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14622:	2000      	movs	r0, #0
}
   14624:	bd08      	pop	{r3, pc}
		err = bt_setup_public_id_addr();
   14626:	f7ff ff69 	bl	144fc <bt_setup_public_id_addr>
		if (err) {
   1462a:	2800      	cmp	r0, #0
   1462c:	d0f6      	beq.n	1461c <bt_id_init+0x8>
   1462e:	e7f9      	b.n	14624 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   14630:	f7ff ffbe 	bl	145b0 <bt_setup_random_id_addr>
		if (err) {
   14634:	2800      	cmp	r0, #0
   14636:	d1f5      	bne.n	14624 <bt_id_init+0x10>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14638:	4802      	ldr	r0, [pc, #8]	; (14644 <bt_id_init+0x30>)
   1463a:	f7ff fe71 	bl	14320 <set_random_address>
		if (err) {
   1463e:	e7f1      	b.n	14624 <bt_id_init+0x10>
   14640:	20000250 	.word	0x20000250
   14644:	20000251 	.word	0x20000251

00014648 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   14648:	4b03      	ldr	r3, [pc, #12]	; (14658 <pool_id+0x10>)
   1464a:	1ac0      	subs	r0, r0, r3
   1464c:	1080      	asrs	r0, r0, #2
}
   1464e:	4b03      	ldr	r3, [pc, #12]	; (1465c <pool_id+0x14>)
   14650:	fb03 f000 	mul.w	r0, r3, r0
   14654:	4770      	bx	lr
   14656:	bf00      	nop
   14658:	200008f0 	.word	0x200008f0
   1465c:	ba2e8ba3 	.word	0xba2e8ba3

00014660 <net_buf_pool_get>:
}
   14660:	222c      	movs	r2, #44	; 0x2c
   14662:	4b02      	ldr	r3, [pc, #8]	; (1466c <net_buf_pool_get+0xc>)
   14664:	fb02 3000 	mla	r0, r2, r0, r3
   14668:	4770      	bx	lr
   1466a:	bf00      	nop
   1466c:	200008f0 	.word	0x200008f0

00014670 <endpoint_ctx>:

	return true;
}

static struct nrf_usbd_ep_ctx *endpoint_ctx(const uint8_t ep)
{
   14670:	b510      	push	{r4, lr}
   14672:	4604      	mov	r4, r0
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
   14674:	f00d fe49 	bl	2230a <ep_is_valid>
   14678:	b1c0      	cbz	r0, 146ac <endpoint_ctx+0x3c>
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
   1467a:	f004 030f 	and.w	r3, r4, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
   1467e:	f014 0f80 	tst.w	r4, #128	; 0x80
   14682:	d10a      	bne.n	1469a <endpoint_ctx+0x2a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   14684:	f014 0f08 	tst.w	r4, #8
   14688:	d114      	bne.n	146b4 <endpoint_ctx+0x44>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
   1468a:	f103 0009 	add.w	r0, r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   1468e:	0140      	lsls	r0, r0, #5
   14690:	3048      	adds	r0, #72	; 0x48
   14692:	4b09      	ldr	r3, [pc, #36]	; (146b8 <endpoint_ctx+0x48>)
   14694:	4418      	add	r0, r3
   14696:	3004      	adds	r0, #4
					    ep_num];
		}
	}

	return NULL;
}
   14698:	bd10      	pop	{r4, pc}
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1469a:	f014 0f08 	tst.w	r4, #8
   1469e:	d107      	bne.n	146b0 <endpoint_ctx+0x40>
			return &ctx->ep_ctx[ep_num];
   146a0:	0158      	lsls	r0, r3, #5
   146a2:	3048      	adds	r0, #72	; 0x48
   146a4:	4b04      	ldr	r3, [pc, #16]	; (146b8 <endpoint_ctx+0x48>)
   146a6:	4418      	add	r0, r3
   146a8:	3004      	adds	r0, #4
   146aa:	e7f5      	b.n	14698 <endpoint_ctx+0x28>
		return NULL;
   146ac:	2000      	movs	r0, #0
   146ae:	e7f3      	b.n	14698 <endpoint_ctx+0x28>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   146b0:	4802      	ldr	r0, [pc, #8]	; (146bc <endpoint_ctx+0x4c>)
   146b2:	e7f1      	b.n	14698 <endpoint_ctx+0x28>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   146b4:	4802      	ldr	r0, [pc, #8]	; (146c0 <endpoint_ctx+0x50>)
   146b6:	e7ef      	b.n	14698 <endpoint_ctx+0x28>
   146b8:	20002ea0 	.word	0x20002ea0
   146bc:	20002fec 	.word	0x20002fec
   146c0:	2000310c 	.word	0x2000310c

000146c4 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
   146c4:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   146c6:	2400      	movs	r4, #0
   146c8:	e005      	b.n	146d6 <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
   146ca:	b2e0      	uxtb	r0, r4
   146cc:	f00d fe38 	bl	22340 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
   146d0:	f00d fe40 	bl	22354 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   146d4:	3401      	adds	r4, #1
   146d6:	2c07      	cmp	r4, #7
   146d8:	d9f7      	bls.n	146ca <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   146da:	2400      	movs	r4, #0
   146dc:	e002      	b.n	146e4 <eps_ctx_init+0x20>

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
		}

		ep_ctx_reset(ep_ctx);
   146de:	f00d fe39 	bl	22354 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   146e2:	3401      	adds	r4, #1
   146e4:	2c07      	cmp	r4, #7
   146e6:	d80a      	bhi.n	146fe <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
   146e8:	b2e0      	uxtb	r0, r4
   146ea:	f00d fe2f 	bl	2234c <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   146ee:	6903      	ldr	r3, [r0, #16]
   146f0:	2b00      	cmp	r3, #0
   146f2:	d1f4      	bne.n	146de <eps_ctx_init+0x1a>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   146f4:	4b0a      	ldr	r3, [pc, #40]	; (14720 <eps_ctx_init+0x5c>)
   146f6:	eb03 1384 	add.w	r3, r3, r4, lsl #6
   146fa:	6103      	str	r3, [r0, #16]
   146fc:	e7ef      	b.n	146de <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   146fe:	2088      	movs	r0, #136	; 0x88
   14700:	f00d fe1e 	bl	22340 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
   14704:	f00d fe26 	bl	22354 <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   14708:	2008      	movs	r0, #8
   1470a:	f00d fe1f 	bl	2234c <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
   1470e:	6903      	ldr	r3, [r0, #16]
   14710:	b11b      	cbz	r3, 1471a <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
   14712:	f00d fe1f 	bl	22354 <ep_ctx_reset>
	}

	return 0;
}
   14716:	2000      	movs	r0, #0
   14718:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   1471a:	4b02      	ldr	r3, [pc, #8]	; (14724 <eps_ctx_init+0x60>)
   1471c:	6103      	str	r3, [r0, #16]
   1471e:	e7f8      	b.n	14712 <eps_ctx_init+0x4e>
   14720:	20003530 	.word	0x20003530
   14724:	20003130 	.word	0x20003130

00014728 <usbd_evt_get>:
{
   14728:	b508      	push	{r3, lr}
	return z_impl_k_queue_get(queue, timeout);
   1472a:	2200      	movs	r2, #0
   1472c:	2300      	movs	r3, #0
   1472e:	4802      	ldr	r0, [pc, #8]	; (14738 <usbd_evt_get+0x10>)
   14730:	f004 ffc4 	bl	196bc <z_impl_k_queue_get>
}
   14734:	bd08      	pop	{r3, pc}
   14736:	bf00      	nop
   14738:	200008d8 	.word	0x200008d8

0001473c <usbd_evt_flush>:
{
   1473c:	b510      	push	{r4, lr}
   1473e:	e004      	b.n	1474a <usbd_evt_flush+0xe>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   14740:	1d01      	adds	r1, r0, #4
   14742:	4805      	ldr	r0, [pc, #20]	; (14758 <usbd_evt_flush+0x1c>)
   14744:	f00f fe32 	bl	243ac <k_mem_slab_free>
	} while (ev != NULL);
   14748:	b12c      	cbz	r4, 14756 <usbd_evt_flush+0x1a>
		ev = usbd_evt_get();
   1474a:	f7ff ffed 	bl	14728 <usbd_evt_get>
		if (ev) {
   1474e:	4604      	mov	r4, r0
   14750:	2800      	cmp	r0, #0
   14752:	d1f5      	bne.n	14740 <usbd_evt_flush+0x4>
   14754:	e7f8      	b.n	14748 <usbd_evt_flush+0xc>
}
   14756:	bd10      	pop	{r4, pc}
   14758:	20000808 	.word	0x20000808

0001475c <usbd_evt_alloc>:
{
   1475c:	b500      	push	{lr}
   1475e:	b083      	sub	sp, #12
	if (k_mem_slab_alloc(&fifo_elem_slab,
   14760:	2200      	movs	r2, #0
   14762:	2300      	movs	r3, #0
   14764:	a901      	add	r1, sp, #4
   14766:	4810      	ldr	r0, [pc, #64]	; (147a8 <usbd_evt_alloc+0x4c>)
   14768:	f004 fdb8 	bl	192dc <k_mem_slab_alloc>
   1476c:	b920      	cbnz	r0, 14778 <usbd_evt_alloc+0x1c>
	ev = (struct usbd_event *)block.data;
   1476e:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   14770:	6040      	str	r0, [r0, #4]
}
   14772:	b003      	add	sp, #12
   14774:	f85d fb04 	ldr.w	pc, [sp], #4
		usbd_evt_flush();
   14778:	f7ff ffe0 	bl	1473c <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1477c:	2200      	movs	r2, #0
   1477e:	2300      	movs	r3, #0
   14780:	a901      	add	r1, sp, #4
   14782:	4809      	ldr	r0, [pc, #36]	; (147a8 <usbd_evt_alloc+0x4c>)
   14784:	f004 fdaa 	bl	192dc <k_mem_slab_alloc>
   14788:	b108      	cbz	r0, 1478e <usbd_evt_alloc+0x32>
   1478a:	2000      	movs	r0, #0
   1478c:	e7f1      	b.n	14772 <usbd_evt_alloc+0x16>
		ev = (struct usbd_event *)block.data;
   1478e:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   14790:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   14792:	2304      	movs	r3, #4
   14794:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   14796:	4805      	ldr	r0, [pc, #20]	; (147ac <usbd_evt_alloc+0x50>)
   14798:	f00f ff39 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1479c:	4904      	ldr	r1, [pc, #16]	; (147b0 <usbd_evt_alloc+0x54>)
   1479e:	4805      	ldr	r0, [pc, #20]	; (147b4 <usbd_evt_alloc+0x58>)
   147a0:	f00f fff8 	bl	24794 <k_work_submit_to_queue>
		return NULL;
   147a4:	e7f1      	b.n	1478a <usbd_evt_alloc+0x2e>
   147a6:	bf00      	nop
   147a8:	20000808 	.word	0x20000808
   147ac:	200008d8 	.word	0x200008d8
   147b0:	20002ec8 	.word	0x20002ec8
   147b4:	20001ab8 	.word	0x20001ab8

000147b8 <submit_dc_power_event>:
{
   147b8:	b510      	push	{r4, lr}
   147ba:	4604      	mov	r4, r0
	struct usbd_event *ev = usbd_evt_alloc();
   147bc:	f7ff ffce 	bl	1475c <usbd_evt_alloc>
	if (!ev) {
   147c0:	b150      	cbz	r0, 147d8 <submit_dc_power_event+0x20>
   147c2:	4601      	mov	r1, r0
	ev->evt_type = USBD_EVT_POWER;
   147c4:	2300      	movs	r3, #0
   147c6:	7403      	strb	r3, [r0, #16]
	ev->evt.pwr_evt.state = state;
   147c8:	7204      	strb	r4, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   147ca:	4806      	ldr	r0, [pc, #24]	; (147e4 <submit_dc_power_event+0x2c>)
   147cc:	f00f ff1f 	bl	2460e <k_queue_append>
	if (usbd_ctx.attached) {
   147d0:	4b05      	ldr	r3, [pc, #20]	; (147e8 <submit_dc_power_event+0x30>)
   147d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   147d6:	b903      	cbnz	r3, 147da <submit_dc_power_event+0x22>
}
   147d8:	bd10      	pop	{r4, pc}
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   147da:	4904      	ldr	r1, [pc, #16]	; (147ec <submit_dc_power_event+0x34>)
   147dc:	4804      	ldr	r0, [pc, #16]	; (147f0 <submit_dc_power_event+0x38>)
   147de:	f00f ffd9 	bl	24794 <k_work_submit_to_queue>
}
   147e2:	e7f9      	b.n	147d8 <submit_dc_power_event+0x20>
   147e4:	200008d8 	.word	0x200008d8
   147e8:	20002ea0 	.word	0x20002ea0
   147ec:	20002ec8 	.word	0x20002ec8
   147f0:	20001ab8 	.word	0x20001ab8

000147f4 <usbd_sof_trigger_iso_read>:
 * ISO OUT endpoint does not generate irq by itself and reading
 * from ISO OUT ep is synchronized with SOF frame. For more details
 * refer to Nordic usbd specification.
 */
static void usbd_sof_trigger_iso_read(void)
{
   147f4:	b510      	push	{r4, lr}
	struct usbd_event *ev;
	struct nrf_usbd_ep_ctx *ep_ctx;

	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
   147f6:	2008      	movs	r0, #8
   147f8:	f7ff ff3a 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   147fc:	b110      	cbz	r0, 14804 <usbd_sof_trigger_iso_read+0x10>
   147fe:	4604      	mov	r4, r0
		LOG_ERR("There is no ISO ep");
		return;
	}

	if (ep_ctx->cfg.en) {
   14800:	7a03      	ldrb	r3, [r0, #8]
   14802:	b903      	cbnz	r3, 14806 <usbd_sof_trigger_iso_read+0x12>
		usbd_evt_put(ev);
		usbd_work_schedule();
	} else {
		LOG_DBG("Endpoint is not enabled");
	}
}
   14804:	bd10      	pop	{r4, pc}
		ep_ctx->read_pending = true;
   14806:	2301      	movs	r3, #1
   14808:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
   1480a:	7703      	strb	r3, [r0, #28]
		ev = usbd_evt_alloc();
   1480c:	f7ff ffa6 	bl	1475c <usbd_evt_alloc>
		if (!ev) {
   14810:	4601      	mov	r1, r0
   14812:	2800      	cmp	r0, #0
   14814:	d0f6      	beq.n	14804 <usbd_sof_trigger_iso_read+0x10>
		ev->evt_type = USBD_EVT_EP;
   14816:	2301      	movs	r3, #1
   14818:	7403      	strb	r3, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1481a:	7303      	strb	r3, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   1481c:	6084      	str	r4, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1481e:	4804      	ldr	r0, [pc, #16]	; (14830 <usbd_sof_trigger_iso_read+0x3c>)
   14820:	f00f fef5 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   14824:	4903      	ldr	r1, [pc, #12]	; (14834 <usbd_sof_trigger_iso_read+0x40>)
   14826:	4804      	ldr	r0, [pc, #16]	; (14838 <usbd_sof_trigger_iso_read+0x44>)
   14828:	f00f ffb4 	bl	24794 <k_work_submit_to_queue>
}
   1482c:	e7ea      	b.n	14804 <usbd_sof_trigger_iso_read+0x10>
   1482e:	bf00      	nop
   14830:	200008d8 	.word	0x200008d8
   14834:	20002ec8 	.word	0x20002ec8
   14838:	20001ab8 	.word	0x20001ab8

0001483c <usbd_event_transfer_data>:
{
   1483c:	b570      	push	{r4, r5, r6, lr}
   1483e:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   14840:	7885      	ldrb	r5, [r0, #2]
   14842:	4628      	mov	r0, r5
   14844:	f7ff ff14 	bl	14670 <endpoint_ctx>
   14848:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1484a:	f015 0f80 	tst.w	r5, #128	; 0x80
   1484e:	d114      	bne.n	1487a <usbd_event_transfer_data+0x3e>
		switch (p_event->data.eptransfer.status) {
   14850:	78e3      	ldrb	r3, [r4, #3]
   14852:	b34b      	cbz	r3, 148a8 <usbd_event_transfer_data+0x6c>
   14854:	2b01      	cmp	r3, #1
   14856:	d112      	bne.n	1487e <usbd_event_transfer_data+0x42>
			struct usbd_event *ev = usbd_evt_alloc();
   14858:	f7ff ff80 	bl	1475c <usbd_evt_alloc>
			if (!ev) {
   1485c:	4601      	mov	r1, r0
   1485e:	b170      	cbz	r0, 1487e <usbd_event_transfer_data+0x42>
			ep_ctx->read_pending = true;
   14860:	2301      	movs	r3, #1
   14862:	7773      	strb	r3, [r6, #29]
			ev->evt_type = USBD_EVT_EP;
   14864:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   14866:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   14868:	6086      	str	r6, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1486a:	481b      	ldr	r0, [pc, #108]	; (148d8 <usbd_event_transfer_data+0x9c>)
   1486c:	f00f fecf 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   14870:	491a      	ldr	r1, [pc, #104]	; (148dc <usbd_event_transfer_data+0xa0>)
   14872:	481b      	ldr	r0, [pc, #108]	; (148e0 <usbd_event_transfer_data+0xa4>)
   14874:	f00f ff8e 	bl	24794 <k_work_submit_to_queue>
}
   14878:	e001      	b.n	1487e <usbd_event_transfer_data+0x42>
		switch (p_event->data.eptransfer.status) {
   1487a:	78e3      	ldrb	r3, [r4, #3]
   1487c:	b103      	cbz	r3, 14880 <usbd_event_transfer_data+0x44>
}
   1487e:	bd70      	pop	{r4, r5, r6, pc}
			struct usbd_event *ev = usbd_evt_alloc();
   14880:	f7ff ff6c 	bl	1475c <usbd_evt_alloc>
			if (!ev) {
   14884:	4601      	mov	r1, r0
   14886:	2800      	cmp	r0, #0
   14888:	d0f9      	beq.n	1487e <usbd_event_transfer_data+0x42>
			ep_ctx->write_in_progress = false;
   1488a:	2300      	movs	r3, #0
   1488c:	77b3      	strb	r3, [r6, #30]
			ev->evt_type = USBD_EVT_EP;
   1488e:	2301      	movs	r3, #1
   14890:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   14892:	2303      	movs	r3, #3
   14894:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   14896:	6086      	str	r6, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   14898:	480f      	ldr	r0, [pc, #60]	; (148d8 <usbd_event_transfer_data+0x9c>)
   1489a:	f00f feb8 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1489e:	490f      	ldr	r1, [pc, #60]	; (148dc <usbd_event_transfer_data+0xa0>)
   148a0:	480f      	ldr	r0, [pc, #60]	; (148e0 <usbd_event_transfer_data+0xa4>)
   148a2:	f00f ff77 	bl	24794 <k_work_submit_to_queue>
}
   148a6:	e7ea      	b.n	1487e <usbd_event_transfer_data+0x42>
			struct usbd_event *ev = usbd_evt_alloc();
   148a8:	f7ff ff58 	bl	1475c <usbd_evt_alloc>
			if (!ev) {
   148ac:	4605      	mov	r5, r0
   148ae:	2800      	cmp	r0, #0
   148b0:	d0e5      	beq.n	1487e <usbd_event_transfer_data+0x42>
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   148b2:	78a1      	ldrb	r1, [r4, #2]
   148b4:	480b      	ldr	r0, [pc, #44]	; (148e4 <usbd_event_transfer_data+0xa8>)
   148b6:	f00d fd07 	bl	222c8 <nrf_usbd_ep_amount_get>
   148ba:	60f0      	str	r0, [r6, #12]
			ev->evt_type = USBD_EVT_EP;
   148bc:	2301      	movs	r3, #1
   148be:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   148c0:	2302      	movs	r3, #2
   148c2:	732b      	strb	r3, [r5, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   148c4:	60ae      	str	r6, [r5, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   148c6:	4629      	mov	r1, r5
   148c8:	4803      	ldr	r0, [pc, #12]	; (148d8 <usbd_event_transfer_data+0x9c>)
   148ca:	f00f fea0 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   148ce:	4903      	ldr	r1, [pc, #12]	; (148dc <usbd_event_transfer_data+0xa0>)
   148d0:	4803      	ldr	r0, [pc, #12]	; (148e0 <usbd_event_transfer_data+0xa4>)
   148d2:	f00f ff5f 	bl	24794 <k_work_submit_to_queue>
}
   148d6:	e7d2      	b.n	1487e <usbd_event_transfer_data+0x42>
   148d8:	200008d8 	.word	0x200008d8
   148dc:	20002ec8 	.word	0x20002ec8
   148e0:	20001ab8 	.word	0x20001ab8
   148e4:	40027000 	.word	0x40027000

000148e8 <usbd_work_process_setup>:
{
   148e8:	b510      	push	{r4, lr}
   148ea:	4684      	mov	ip, r0
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   148ec:	6944      	ldr	r4, [r0, #20]
__ssp_bos_icheck3(memset, void *, int)
   148ee:	f04f 0e00 	mov.w	lr, #0
   148f2:	f8c4 e000 	str.w	lr, [r4]
   148f6:	f8c4 e004 	str.w	lr, [r4, #4]
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   148fa:	4b1f      	ldr	r3, [pc, #124]	; (14978 <usbd_work_process_setup+0x90>)
   148fc:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
   14900:	7022      	strb	r2, [r4, #0]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
   14902:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
   14906:	7062      	strb	r2, [r4, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
   14908:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
   1490c:	b289      	uxth	r1, r1
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1490e:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
   14912:	0212      	lsls	r2, r2, #8
   14914:	b292      	uxth	r2, r2
   14916:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   14918:	8062      	strh	r2, [r4, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
   1491a:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
   1491e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   14920:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   14924:	0209      	lsls	r1, r1, #8
   14926:	b289      	uxth	r1, r1
   14928:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   1492a:	80a2      	strh	r2, [r4, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
   1492c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
   14930:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   14932:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   14936:	021b      	lsls	r3, r3, #8
   14938:	b29b      	uxth	r3, r3
   1493a:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   1493c:	80e3      	strh	r3, [r4, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1493e:	2308      	movs	r3, #8
   14940:	60c3      	str	r3, [r0, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   14942:	4b0e      	ldr	r3, [pc, #56]	; (1497c <usbd_work_process_setup+0x94>)
   14944:	6820      	ldr	r0, [r4, #0]
   14946:	6861      	ldr	r1, [r4, #4]
   14948:	c303      	stmia	r3!, {r0, r1}
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   1494a:	f8dc 3000 	ldr.w	r3, [ip]
   1494e:	4671      	mov	r1, lr
   14950:	f89c 0009 	ldrb.w	r0, [ip, #9]
   14954:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   14956:	f994 3000 	ldrsb.w	r3, [r4]
   1495a:	2b00      	cmp	r3, #0
   1495c:	db01      	blt.n	14962 <usbd_work_process_setup+0x7a>
   1495e:	88e3      	ldrh	r3, [r4, #6]
   14960:	b923      	cbnz	r3, 1496c <usbd_work_process_setup+0x84>
		ctx->ctrl_read_len = 0U;
   14962:	4b07      	ldr	r3, [pc, #28]	; (14980 <usbd_work_process_setup+0x98>)
   14964:	2200      	movs	r2, #0
   14966:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
   1496a:	bd10      	pop	{r4, pc}
		ctx->ctrl_read_len = usbd_setup->wLength;
   1496c:	4a04      	ldr	r2, [pc, #16]	; (14980 <usbd_work_process_setup+0x98>)
   1496e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   14972:	f004 f85b 	bl	18a2c <nrfx_usbd_setup_data_clear>
   14976:	e7f8      	b.n	1496a <usbd_work_process_setup+0x82>
   14978:	40027000 	.word	0x40027000
   1497c:	20002ea4 	.word	0x20002ea4
   14980:	20002ea0 	.word	0x20002ea0

00014984 <usbd_work_process_ep_events>:
{
   14984:	b538      	push	{r3, r4, r5, lr}
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   14986:	6804      	ldr	r4, [r0, #0]
	switch (ep_evt->evt_type) {
   14988:	7903      	ldrb	r3, [r0, #4]
   1498a:	2b03      	cmp	r3, #3
   1498c:	d806      	bhi.n	1499c <usbd_work_process_ep_events+0x18>
   1498e:	e8df f003 	tbb	[pc, r3]
   14992:	0602      	.short	0x0602
   14994:	100b      	.short	0x100b
		usbd_work_process_setup(ep_ctx);
   14996:	4620      	mov	r0, r4
   14998:	f7ff ffa6 	bl	148e8 <usbd_work_process_setup>
}
   1499c:	bd38      	pop	{r3, r4, r5, pc}
		usbd_work_process_recvreq(ctx, ep_ctx);
   1499e:	4621      	mov	r1, r4
   149a0:	480f      	ldr	r0, [pc, #60]	; (149e0 <usbd_work_process_ep_events+0x5c>)
   149a2:	f00d fd50 	bl	22446 <usbd_work_process_recvreq>
		break;
   149a6:	e7f9      	b.n	1499c <usbd_work_process_ep_events+0x18>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   149a8:	6823      	ldr	r3, [r4, #0]
   149aa:	2101      	movs	r1, #1
   149ac:	7a60      	ldrb	r0, [r4, #9]
   149ae:	4798      	blx	r3
		break;
   149b0:	e7f4      	b.n	1499c <usbd_work_process_ep_events+0x18>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   149b2:	7aa3      	ldrb	r3, [r4, #10]
   149b4:	b90b      	cbnz	r3, 149ba <usbd_work_process_ep_events+0x36>
		    !ep_ctx->trans_zlp) {
   149b6:	7fe3      	ldrb	r3, [r4, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   149b8:	b123      	cbz	r3, 149c4 <usbd_work_process_ep_events+0x40>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   149ba:	6823      	ldr	r3, [r4, #0]
   149bc:	2102      	movs	r1, #2
   149be:	7a60      	ldrb	r0, [r4, #9]
   149c0:	4798      	blx	r3
}
   149c2:	e7eb      	b.n	1499c <usbd_work_process_ep_events+0x18>
	return z_impl_k_mutex_lock(mutex, timeout);
   149c4:	4d07      	ldr	r5, [pc, #28]	; (149e4 <usbd_work_process_ep_events+0x60>)
   149c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   149ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   149ce:	4628      	mov	r0, r5
   149d0:	f004 fdb2 	bl	19538 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
   149d4:	f004 f870 	bl	18ab8 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
   149d8:	4628      	mov	r0, r5
   149da:	f004 fe31 	bl	19640 <z_impl_k_mutex_unlock>
   149de:	e7ec      	b.n	149ba <usbd_work_process_ep_events+0x36>
   149e0:	20002ea0 	.word	0x20002ea0
   149e4:	20002ed8 	.word	0x20002ed8

000149e8 <usbd_work_process_pwr_events>:
{
   149e8:	b510      	push	{r4, lr}
	switch (pwr_evt->state) {
   149ea:	7803      	ldrb	r3, [r0, #0]
   149ec:	2b04      	cmp	r3, #4
   149ee:	d81c      	bhi.n	14a2a <usbd_work_process_pwr_events+0x42>
   149f0:	e8df f003 	tbb	[pc, r3]
   149f4:	2c0c031c 	.word	0x2c0c031c
   149f8:	3b          	.byte	0x3b
   149f9:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   149fa:	f003 fd0d 	bl	18418 <nrfx_usbd_is_enabled>
   149fe:	b9a0      	cbnz	r0, 14a2a <usbd_work_process_pwr_events+0x42>
			nrfx_usbd_enable();
   14a00:	f003 fc96 	bl	18330 <nrfx_usbd_enable>
			err = hfxo_start(ctx);
   14a04:	481f      	ldr	r0, [pc, #124]	; (14a84 <usbd_work_process_pwr_events+0x9c>)
   14a06:	f00d fd41 	bl	2248c <hfxo_start>
   14a0a:	e00e      	b.n	14a2a <usbd_work_process_pwr_events+0x42>
		usbd_enable_endpoints(ctx);
   14a0c:	4c1d      	ldr	r4, [pc, #116]	; (14a84 <usbd_work_process_pwr_events+0x9c>)
   14a0e:	4620      	mov	r0, r4
   14a10:	f00d fce7 	bl	223e2 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
   14a14:	2001      	movs	r0, #1
   14a16:	f003 fce3 	bl	183e0 <nrfx_usbd_start>
		ctx->ready = true;
   14a1a:	2301      	movs	r3, #1
   14a1c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   14a20:	6823      	ldr	r3, [r4, #0]
   14a22:	b113      	cbz	r3, 14a2a <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   14a24:	2100      	movs	r1, #0
   14a26:	2002      	movs	r0, #2
   14a28:	4798      	blx	r3
}
   14a2a:	bd10      	pop	{r4, pc}
		ctx->ready = false;
   14a2c:	4c15      	ldr	r4, [pc, #84]	; (14a84 <usbd_work_process_pwr_events+0x9c>)
   14a2e:	2300      	movs	r3, #0
   14a30:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   14a34:	f004 f9ea 	bl	18e0c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   14a38:	4620      	mov	r0, r4
   14a3a:	f00d fcb8 	bl	223ae <hfxo_stop>
		if (ctx->status_cb) {
   14a3e:	6823      	ldr	r3, [r4, #0]
   14a40:	2b00      	cmp	r3, #0
   14a42:	d0f2      	beq.n	14a2a <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   14a44:	2100      	movs	r1, #0
   14a46:	2004      	movs	r0, #4
   14a48:	4798      	blx	r3
   14a4a:	e7ee      	b.n	14a2a <usbd_work_process_pwr_events+0x42>
	return get_usbd_ctx()->ready;
   14a4c:	4b0d      	ldr	r3, [pc, #52]	; (14a84 <usbd_work_process_pwr_events+0x9c>)
   14a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
   14a52:	2b00      	cmp	r3, #0
   14a54:	d0e9      	beq.n	14a2a <usbd_work_process_pwr_events+0x42>
			nrfx_usbd_suspend();
   14a56:	f003 fce9 	bl	1842c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   14a5a:	4b0a      	ldr	r3, [pc, #40]	; (14a84 <usbd_work_process_pwr_events+0x9c>)
   14a5c:	681b      	ldr	r3, [r3, #0]
   14a5e:	2b00      	cmp	r3, #0
   14a60:	d0e3      	beq.n	14a2a <usbd_work_process_pwr_events+0x42>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   14a62:	2100      	movs	r1, #0
   14a64:	2005      	movs	r0, #5
   14a66:	4798      	blx	r3
   14a68:	e7df      	b.n	14a2a <usbd_work_process_pwr_events+0x42>
		if (ctx->status_cb && dev_ready()) {
   14a6a:	4b06      	ldr	r3, [pc, #24]	; (14a84 <usbd_work_process_pwr_events+0x9c>)
   14a6c:	681b      	ldr	r3, [r3, #0]
   14a6e:	2b00      	cmp	r3, #0
   14a70:	d0db      	beq.n	14a2a <usbd_work_process_pwr_events+0x42>
	return get_usbd_ctx()->ready;
   14a72:	4a04      	ldr	r2, [pc, #16]	; (14a84 <usbd_work_process_pwr_events+0x9c>)
   14a74:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
   14a78:	2a00      	cmp	r2, #0
   14a7a:	d0d6      	beq.n	14a2a <usbd_work_process_pwr_events+0x42>
			ctx->status_cb(USB_DC_RESUME, NULL);
   14a7c:	2100      	movs	r1, #0
   14a7e:	2006      	movs	r0, #6
   14a80:	4798      	blx	r3
}
   14a82:	e7d2      	b.n	14a2a <usbd_work_process_pwr_events+0x42>
   14a84:	20002ea0 	.word	0x20002ea0

00014a88 <usbd_reinit>:
{
   14a88:	b508      	push	{r3, lr}
	nrfx_power_usbevt_disable();
   14a8a:	f00f fa4e 	bl	23f2a <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   14a8e:	f004 f9bd 	bl	18e0c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   14a92:	f003 fc43 	bl	1831c <nrfx_usbd_uninit>
	usbd_evt_flush();
   14a96:	f7ff fe51 	bl	1473c <usbd_evt_flush>
	ret = eps_ctx_init();
   14a9a:	f7ff fe13 	bl	146c4 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   14a9e:	f00f fa3d 	bl	23f1c <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   14aa2:	4802      	ldr	r0, [pc, #8]	; (14aac <usbd_reinit+0x24>)
   14aa4:	f003 fd02 	bl	184ac <nrfx_usbd_init>
}
   14aa8:	bd08      	pop	{r3, pc}
   14aaa:	bf00      	nop
   14aac:	00014c35 	.word	0x00014c35

00014ab0 <usbd_work_handler>:

/* Work handler */
static void usbd_work_handler(struct k_work *item)
{
   14ab0:	b570      	push	{r4, r5, r6, lr}
   14ab2:	4605      	mov	r5, r0
	struct nrf_usbd_ctx *ctx;
	struct usbd_event *ev;

	ctx = CONTAINER_OF(item, struct nrf_usbd_ctx, usb_work);

	while ((ev = usbd_evt_get()) != NULL) {
   14ab4:	e00c      	b.n	14ad0 <usbd_work_handler+0x20>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   14ab6:	1d21      	adds	r1, r4, #4
   14ab8:	4828      	ldr	r0, [pc, #160]	; (14b5c <usbd_work_handler+0xac>)
   14aba:	f00f fc77 	bl	243ac <k_mem_slab_free>
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
			/* Drop non-power events when cable is detached. */
			usbd_evt_free(ev);
			continue;
   14abe:	e007      	b.n	14ad0 <usbd_work_handler+0x20>
		case USBD_EVT_EP:
			if (!ctx->attached) {
				LOG_ERR("not attached, EP 0x%02x event dropped",
					(uint32_t)ev->evt.ep_evt.ep->cfg.addr);
			}
			usbd_work_process_ep_events(&ev->evt.ep_evt);
   14ac0:	f104 0008 	add.w	r0, r4, #8
   14ac4:	f7ff ff5e 	bl	14984 <usbd_work_process_ep_events>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   14ac8:	1d21      	adds	r1, r4, #4
   14aca:	4824      	ldr	r0, [pc, #144]	; (14b5c <usbd_work_handler+0xac>)
   14acc:	f00f fc6e 	bl	243ac <k_mem_slab_free>
	while ((ev = usbd_evt_get()) != NULL) {
   14ad0:	f7ff fe2a 	bl	14728 <usbd_evt_get>
   14ad4:	4604      	mov	r4, r0
   14ad6:	2800      	cmp	r0, #0
   14ad8:	d03e      	beq.n	14b58 <usbd_work_handler+0xa8>
	return get_usbd_ctx()->ready;
   14ada:	4b21      	ldr	r3, [pc, #132]	; (14b60 <usbd_work_handler+0xb0>)
   14adc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   14ae0:	b913      	cbnz	r3, 14ae8 <usbd_work_handler+0x38>
   14ae2:	7c23      	ldrb	r3, [r4, #16]
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d1e6      	bne.n	14ab6 <usbd_work_handler+0x6>
		switch (ev->evt_type) {
   14ae8:	7c23      	ldrb	r3, [r4, #16]
   14aea:	2b04      	cmp	r3, #4
   14aec:	d8ec      	bhi.n	14ac8 <usbd_work_handler+0x18>
   14aee:	a201      	add	r2, pc, #4	; (adr r2, 14af4 <usbd_work_handler+0x44>)
   14af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14af4:	00014b09 	.word	0x00014b09
   14af8:	00014ac1 	.word	0x00014ac1
   14afc:	00014b13 	.word	0x00014b13
   14b00:	00014b3f 	.word	0x00014b3f
   14b04:	00014b53 	.word	0x00014b53
			break;
		case USBD_EVT_POWER:
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
   14b08:	f104 0008 	add.w	r0, r4, #8
   14b0c:	f7ff ff6c 	bl	149e8 <usbd_work_process_pwr_events>
			break;
   14b10:	e7da      	b.n	14ac8 <usbd_work_handler+0x18>
		case USBD_EVT_RESET:
			LOG_DBG("USBD reset event");
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   14b12:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
   14b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b1e:	4630      	mov	r0, r6
   14b20:	f004 fd0a 	bl	19538 <z_impl_k_mutex_lock>
			eps_ctx_init();
   14b24:	f7ff fdce 	bl	146c4 <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
   14b28:	4630      	mov	r0, r6
   14b2a:	f004 fd89 	bl	19640 <z_impl_k_mutex_unlock>
			k_mutex_unlock(&ctx->drv_lock);

			if (ctx->status_cb) {
   14b2e:	f855 3c28 	ldr.w	r3, [r5, #-40]
   14b32:	2b00      	cmp	r3, #0
   14b34:	d0c8      	beq.n	14ac8 <usbd_work_handler+0x18>
				ctx->status_cb(USB_DC_RESET, NULL);
   14b36:	2100      	movs	r1, #0
   14b38:	2001      	movs	r0, #1
   14b3a:	4798      	blx	r3
   14b3c:	e7c4      	b.n	14ac8 <usbd_work_handler+0x18>
			}
			break;
		case USBD_EVT_SOF:
			usbd_sof_trigger_iso_read();
   14b3e:	f7ff fe59 	bl	147f4 <usbd_sof_trigger_iso_read>

			if (ctx->status_cb) {
   14b42:	f855 3c28 	ldr.w	r3, [r5, #-40]
   14b46:	2b00      	cmp	r3, #0
   14b48:	d0be      	beq.n	14ac8 <usbd_work_handler+0x18>
				ctx->status_cb(USB_DC_SOF, NULL);
   14b4a:	2100      	movs	r1, #0
   14b4c:	200a      	movs	r0, #10
   14b4e:	4798      	blx	r3
   14b50:	e7ba      	b.n	14ac8 <usbd_work_handler+0x18>
				/*
				 * Reinitialize the peripheral after queue
				 * overflow.
				 */
				LOG_ERR("USBD event queue full!");
				usbd_reinit();
   14b52:	f7ff ff99 	bl	14a88 <usbd_reinit>
				break;
   14b56:	e7b7      	b.n	14ac8 <usbd_work_handler+0x18>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
			break;
		}
		usbd_evt_free(ev);
	}
}
   14b58:	bd70      	pop	{r4, r5, r6, pc}
   14b5a:	bf00      	nop
   14b5c:	20000808 	.word	0x20000808
   14b60:	20002ea0 	.word	0x20002ea0

00014b64 <usbd_event_transfer_ctrl>:
{
   14b64:	b570      	push	{r4, r5, r6, lr}
   14b66:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   14b68:	7885      	ldrb	r5, [r0, #2]
   14b6a:	4628      	mov	r0, r5
   14b6c:	f7ff fd80 	bl	14670 <endpoint_ctx>
   14b70:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   14b72:	f015 0f80 	tst.w	r5, #128	; 0x80
   14b76:	d114      	bne.n	14ba2 <usbd_event_transfer_ctrl+0x3e>
		switch (p_event->data.eptransfer.status) {
   14b78:	78e3      	ldrb	r3, [r4, #3]
   14b7a:	b34b      	cbz	r3, 14bd0 <usbd_event_transfer_ctrl+0x6c>
   14b7c:	2b01      	cmp	r3, #1
   14b7e:	d112      	bne.n	14ba6 <usbd_event_transfer_ctrl+0x42>
			struct usbd_event *ev = usbd_evt_alloc();
   14b80:	f7ff fdec 	bl	1475c <usbd_evt_alloc>
			if (!ev) {
   14b84:	4601      	mov	r1, r0
   14b86:	b170      	cbz	r0, 14ba6 <usbd_event_transfer_ctrl+0x42>
			ep_ctx->read_pending = true;
   14b88:	2301      	movs	r3, #1
   14b8a:	7773      	strb	r3, [r6, #29]
			ev->evt_type = USBD_EVT_EP;
   14b8c:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   14b8e:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   14b90:	6086      	str	r6, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   14b92:	4824      	ldr	r0, [pc, #144]	; (14c24 <usbd_event_transfer_ctrl+0xc0>)
   14b94:	f00f fd3b 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   14b98:	4923      	ldr	r1, [pc, #140]	; (14c28 <usbd_event_transfer_ctrl+0xc4>)
   14b9a:	4824      	ldr	r0, [pc, #144]	; (14c2c <usbd_event_transfer_ctrl+0xc8>)
   14b9c:	f00f fdfa 	bl	24794 <k_work_submit_to_queue>
}
   14ba0:	e001      	b.n	14ba6 <usbd_event_transfer_ctrl+0x42>
		switch (p_event->data.eptransfer.status) {
   14ba2:	78e3      	ldrb	r3, [r4, #3]
   14ba4:	b103      	cbz	r3, 14ba8 <usbd_event_transfer_ctrl+0x44>
}
   14ba6:	bd70      	pop	{r4, r5, r6, pc}
			struct usbd_event *ev = usbd_evt_alloc();
   14ba8:	f7ff fdd8 	bl	1475c <usbd_evt_alloc>
			if (!ev) {
   14bac:	4601      	mov	r1, r0
   14bae:	2800      	cmp	r0, #0
   14bb0:	d0f9      	beq.n	14ba6 <usbd_event_transfer_ctrl+0x42>
			ep_ctx->write_in_progress = false;
   14bb2:	2300      	movs	r3, #0
   14bb4:	77b3      	strb	r3, [r6, #30]
			ev->evt_type = USBD_EVT_EP;
   14bb6:	2301      	movs	r3, #1
   14bb8:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   14bba:	2303      	movs	r3, #3
   14bbc:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   14bbe:	6086      	str	r6, [r0, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   14bc0:	4818      	ldr	r0, [pc, #96]	; (14c24 <usbd_event_transfer_ctrl+0xc0>)
   14bc2:	f00f fd24 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   14bc6:	4918      	ldr	r1, [pc, #96]	; (14c28 <usbd_event_transfer_ctrl+0xc4>)
   14bc8:	4818      	ldr	r0, [pc, #96]	; (14c2c <usbd_event_transfer_ctrl+0xc8>)
   14bca:	f00f fde3 	bl	24794 <k_work_submit_to_queue>
}
   14bce:	e7ea      	b.n	14ba6 <usbd_event_transfer_ctrl+0x42>
			struct usbd_event *ev = usbd_evt_alloc();
   14bd0:	f7ff fdc4 	bl	1475c <usbd_evt_alloc>
			if (!ev) {
   14bd4:	4605      	mov	r5, r0
   14bd6:	2800      	cmp	r0, #0
   14bd8:	d0e5      	beq.n	14ba6 <usbd_event_transfer_ctrl+0x42>
			ev->evt_type = USBD_EVT_EP;
   14bda:	2301      	movs	r3, #1
   14bdc:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   14bde:	2302      	movs	r3, #2
   14be0:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   14be2:	6086      	str	r6, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   14be4:	f106 010c 	add.w	r1, r6, #12
   14be8:	78a0      	ldrb	r0, [r4, #2]
   14bea:	f003 fd4b 	bl	18684 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   14bee:	4b10      	ldr	r3, [pc, #64]	; (14c30 <usbd_event_transfer_ctrl+0xcc>)
   14bf0:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
   14bf4:	68f2      	ldr	r2, [r6, #12]
   14bf6:	4293      	cmp	r3, r2
   14bf8:	d80c      	bhi.n	14c14 <usbd_event_transfer_ctrl+0xb0>
				ctx->ctrl_read_len = 0U;
   14bfa:	4b0d      	ldr	r3, [pc, #52]	; (14c30 <usbd_event_transfer_ctrl+0xcc>)
   14bfc:	2200      	movs	r2, #0
   14bfe:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
   14c02:	4629      	mov	r1, r5
   14c04:	4807      	ldr	r0, [pc, #28]	; (14c24 <usbd_event_transfer_ctrl+0xc0>)
   14c06:	f00f fd02 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   14c0a:	4907      	ldr	r1, [pc, #28]	; (14c28 <usbd_event_transfer_ctrl+0xc4>)
   14c0c:	4807      	ldr	r0, [pc, #28]	; (14c2c <usbd_event_transfer_ctrl+0xc8>)
   14c0e:	f00f fdc1 	bl	24794 <k_work_submit_to_queue>
}
   14c12:	e7c8      	b.n	14ba6 <usbd_event_transfer_ctrl+0x42>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   14c14:	1a9b      	subs	r3, r3, r2
   14c16:	4a06      	ldr	r2, [pc, #24]	; (14c30 <usbd_event_transfer_ctrl+0xcc>)
   14c18:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   14c1c:	f003 ff06 	bl	18a2c <nrfx_usbd_setup_data_clear>
   14c20:	e7ef      	b.n	14c02 <usbd_event_transfer_ctrl+0x9e>
   14c22:	bf00      	nop
   14c24:	200008d8 	.word	0x200008d8
   14c28:	20002ec8 	.word	0x20002ec8
   14c2c:	20001ab8 	.word	0x20001ab8
   14c30:	20002ea0 	.word	0x20002ea0

00014c34 <usbd_event_handler>:
{
   14c34:	b510      	push	{r4, lr}
   14c36:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
   14c38:	2300      	movs	r3, #0
   14c3a:	9303      	str	r3, [sp, #12]
   14c3c:	9304      	str	r3, [sp, #16]
   14c3e:	9305      	str	r3, [sp, #20]
   14c40:	9306      	str	r3, [sp, #24]
   14c42:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
   14c44:	7803      	ldrb	r3, [r0, #0]
   14c46:	3b01      	subs	r3, #1
   14c48:	2b05      	cmp	r3, #5
   14c4a:	d81c      	bhi.n	14c86 <usbd_event_handler+0x52>
   14c4c:	e8df f003 	tbb	[pc, r3]
   14c50:	211d0325 	.word	0x211d0325
   14c54:	2943      	.short	0x2943
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   14c56:	2303      	movs	r3, #3
   14c58:	f88d 3014 	strb.w	r3, [sp, #20]
		ev = usbd_evt_alloc();
   14c5c:	f7ff fd7e 	bl	1475c <usbd_evt_alloc>
		if (!ev) {
   14c60:	4603      	mov	r3, r0
   14c62:	b180      	cbz	r0, 14c86 <usbd_event_handler+0x52>
		ev->evt_type = evt.evt_type;
   14c64:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14c68:	7402      	strb	r2, [r0, #16]
		ev->evt = evt.evt;
   14c6a:	f100 0208 	add.w	r2, r0, #8
   14c6e:	a905      	add	r1, sp, #20
   14c70:	c903      	ldmia	r1, {r0, r1}
   14c72:	e882 0003 	stmia.w	r2, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
   14c76:	4619      	mov	r1, r3
   14c78:	4821      	ldr	r0, [pc, #132]	; (14d00 <usbd_event_handler+0xcc>)
   14c7a:	f00f fcc8 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   14c7e:	4921      	ldr	r1, [pc, #132]	; (14d04 <usbd_event_handler+0xd0>)
   14c80:	4821      	ldr	r0, [pc, #132]	; (14d08 <usbd_event_handler+0xd4>)
   14c82:	f00f fd87 	bl	24794 <k_work_submit_to_queue>
}
   14c86:	b008      	add	sp, #32
   14c88:	bd10      	pop	{r4, pc}
		evt.evt.pwr_evt.state = USBD_RESUMED;
   14c8a:	2304      	movs	r3, #4
   14c8c:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
   14c90:	e7e4      	b.n	14c5c <usbd_event_handler+0x28>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   14c92:	2304      	movs	r3, #4
   14c94:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
   14c98:	e7e0      	b.n	14c5c <usbd_event_handler+0x28>
		evt.evt_type = USBD_EVT_RESET;
   14c9a:	2302      	movs	r3, #2
   14c9c:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
   14ca0:	e7dc      	b.n	14c5c <usbd_event_handler+0x28>
   14ca2:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   14ca4:	7880      	ldrb	r0, [r0, #2]
   14ca6:	f7ff fce3 	bl	14670 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   14caa:	7a83      	ldrb	r3, [r0, #10]
   14cac:	2b01      	cmp	r3, #1
   14cae:	d00e      	beq.n	14cce <usbd_event_handler+0x9a>
   14cb0:	d805      	bhi.n	14cbe <usbd_event_handler+0x8a>
   14cb2:	2b00      	cmp	r3, #0
   14cb4:	d1e7      	bne.n	14c86 <usbd_event_handler+0x52>
			usbd_event_transfer_ctrl(p_event);
   14cb6:	4620      	mov	r0, r4
   14cb8:	f7ff ff54 	bl	14b64 <usbd_event_transfer_ctrl>
	if (put_evt) {
   14cbc:	e7e3      	b.n	14c86 <usbd_event_handler+0x52>
   14cbe:	3b02      	subs	r3, #2
   14cc0:	b2db      	uxtb	r3, r3
   14cc2:	2b01      	cmp	r3, #1
   14cc4:	d8df      	bhi.n	14c86 <usbd_event_handler+0x52>
			usbd_event_transfer_data(p_event);
   14cc6:	4620      	mov	r0, r4
   14cc8:	f7ff fdb8 	bl	1483c <usbd_event_transfer_data>
	if (put_evt) {
   14ccc:	e7db      	b.n	14c86 <usbd_event_handler+0x52>
			usbd_event_transfer_data(p_event);
   14cce:	4620      	mov	r0, r4
   14cd0:	f7ff fdb4 	bl	1483c <usbd_event_transfer_data>
	if (put_evt) {
   14cd4:	e7d7      	b.n	14c86 <usbd_event_handler+0x52>
		nrfx_usbd_setup_get(&drv_setup);
   14cd6:	a801      	add	r0, sp, #4
   14cd8:	f003 fe80 	bl	189dc <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   14cdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14ce0:	2b05      	cmp	r3, #5
   14ce2:	d007      	beq.n	14cf4 <usbd_event_handler+0xc0>
				endpoint_ctx(NRF_USBD_EPOUT(0));
   14ce4:	2000      	movs	r0, #0
   14ce6:	f7ff fcc3 	bl	14670 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
   14cea:	2301      	movs	r3, #1
   14cec:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
   14cf0:	9005      	str	r0, [sp, #20]
	if (put_evt) {
   14cf2:	e7b3      	b.n	14c5c <usbd_event_handler+0x28>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   14cf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14cf8:	f013 0f60 	tst.w	r3, #96	; 0x60
   14cfc:	d0c3      	beq.n	14c86 <usbd_event_handler+0x52>
   14cfe:	e7f1      	b.n	14ce4 <usbd_event_handler+0xb0>
   14d00:	200008d8 	.word	0x200008d8
   14d04:	20002ec8 	.word	0x20002ec8
   14d08:	20001ab8 	.word	0x20001ab8

00014d0c <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
   14d0c:	b530      	push	{r4, r5, lr}
   14d0e:	b083      	sub	sp, #12

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
   14d10:	4812      	ldr	r0, [pc, #72]	; (14d5c <usb_init+0x50>)
   14d12:	f003 fbcb 	bl	184ac <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   14d16:	4b12      	ldr	r3, [pc, #72]	; (14d60 <usb_init+0x54>)
   14d18:	4298      	cmp	r0, r3
   14d1a:	d11b      	bne.n	14d54 <usb_init+0x48>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   14d1c:	4811      	ldr	r0, [pc, #68]	; (14d64 <usb_init+0x58>)
   14d1e:	f002 ff77 	bl	17c10 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
   14d22:	4811      	ldr	r0, [pc, #68]	; (14d68 <usb_init+0x5c>)
   14d24:	f002 ffa4 	bl	17c70 <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
   14d28:	4d10      	ldr	r5, [pc, #64]	; (14d6c <usb_init+0x60>)
   14d2a:	2400      	movs	r4, #0
   14d2c:	9400      	str	r4, [sp, #0]
   14d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14d36:	490e      	ldr	r1, [pc, #56]	; (14d70 <usb_init+0x64>)
   14d38:	4628      	mov	r0, r5
   14d3a:	f7f8 fc35 	bl	d5a8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   14d3e:	490d      	ldr	r1, [pc, #52]	; (14d74 <usb_init+0x68>)
   14d40:	4628      	mov	r0, r5
   14d42:	f004 fb1f 	bl	19384 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
   14d46:	490c      	ldr	r1, [pc, #48]	; (14d78 <usb_init+0x6c>)
   14d48:	480c      	ldr	r0, [pc, #48]	; (14d7c <usb_init+0x70>)
   14d4a:	f00f fd07 	bl	2475c <k_work_init>

	return 0;
   14d4e:	4620      	mov	r0, r4
}
   14d50:	b003      	add	sp, #12
   14d52:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   14d54:	f06f 0004 	mvn.w	r0, #4
   14d58:	e7fa      	b.n	14d50 <usb_init+0x44>
   14d5a:	bf00      	nop
   14d5c:	00014c35 	.word	0x00014c35
   14d60:	0bad0000 	.word	0x0bad0000
   14d64:	00026790 	.word	0x00026790
   14d68:	0002678c 	.word	0x0002678c
   14d6c:	20001ab8 	.word	0x20001ab8
   14d70:	20006980 	.word	0x20006980
   14d74:	00026780 	.word	0x00026780
   14d78:	00014ab1 	.word	0x00014ab1
   14d7c:	20002ec8 	.word	0x20002ec8

00014d80 <usb_dc_attach>:
{
   14d80:	b510      	push	{r4, lr}
	if (ctx->attached) {
   14d82:	4b18      	ldr	r3, [pc, #96]	; (14de4 <usb_dc_attach+0x64>)
   14d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   14d88:	b113      	cbz	r3, 14d90 <usb_dc_attach+0x10>
		return 0;
   14d8a:	2400      	movs	r4, #0
}
   14d8c:	4620      	mov	r0, r4
   14d8e:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
   14d90:	4c15      	ldr	r4, [pc, #84]	; (14de8 <usb_dc_attach+0x68>)
   14d92:	4620      	mov	r0, r4
   14d94:	f00f fba1 	bl	244da <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   14d98:	2000      	movs	r0, #0
   14d9a:	f000 fd85 	bl	158a8 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
   14d9e:	f844 0c1c 	str.w	r0, [r4, #-28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14da2:	2200      	movs	r2, #0
   14da4:	2101      	movs	r1, #1
   14da6:	2027      	movs	r0, #39	; 0x27
   14da8:	f00c ff1b 	bl	21be2 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
   14dac:	f00f f8b6 	bl	23f1c <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   14db0:	f7ff fc88 	bl	146c4 <eps_ctx_init>
	if (ret == 0) {
   14db4:	4604      	mov	r4, r0
   14db6:	b918      	cbnz	r0, 14dc0 <usb_dc_attach+0x40>
		ctx->attached = true;
   14db8:	4b0a      	ldr	r3, [pc, #40]	; (14de4 <usb_dc_attach+0x64>)
   14dba:	2201      	movs	r2, #1
   14dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   14dc0:	4b0a      	ldr	r3, [pc, #40]	; (14dec <usb_dc_attach+0x6c>)
   14dc2:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   14dc4:	b11b      	cbz	r3, 14dce <usb_dc_attach+0x4e>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   14dc6:	490a      	ldr	r1, [pc, #40]	; (14df0 <usb_dc_attach+0x70>)
   14dc8:	480a      	ldr	r0, [pc, #40]	; (14df4 <usb_dc_attach+0x74>)
   14dca:	f00f fce3 	bl	24794 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   14dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14dd2:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   14dd6:	f013 0f01 	tst.w	r3, #1
   14dda:	d0d7      	beq.n	14d8c <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   14ddc:	2000      	movs	r0, #0
   14dde:	f00d facd 	bl	2237c <usb_dc_power_event_handler>
   14de2:	e7d3      	b.n	14d8c <usb_dc_attach+0xc>
   14de4:	20002ea0 	.word	0x20002ea0
   14de8:	20002ed8 	.word	0x20002ed8
   14dec:	200008d8 	.word	0x200008d8
   14df0:	20002ec8 	.word	0x20002ec8
   14df4:	20001ab8 	.word	0x20001ab8

00014df8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   14df8:	4b07      	ldr	r3, [pc, #28]	; (14e18 <usb_dc_set_address+0x20>)
   14dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   14dfe:	b12b      	cbz	r3, 14e0c <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
   14e00:	4b05      	ldr	r3, [pc, #20]	; (14e18 <usb_dc_set_address+0x20>)
   14e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   14e06:	b123      	cbz	r3, 14e12 <usb_dc_set_address+0x1a>
	return 0;
   14e08:	2000      	movs	r0, #0
   14e0a:	4770      	bx	lr
		return -ENODEV;
   14e0c:	f06f 0012 	mvn.w	r0, #18
   14e10:	4770      	bx	lr
   14e12:	f06f 0012 	mvn.w	r0, #18
}
   14e16:	4770      	bx	lr
   14e18:	20002ea0 	.word	0x20002ea0

00014e1c <usb_dc_ep_configure>:
{
   14e1c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   14e1e:	4b12      	ldr	r3, [pc, #72]	; (14e68 <usb_dc_ep_configure+0x4c>)
   14e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   14e24:	b1bb      	cbz	r3, 14e56 <usb_dc_ep_configure+0x3a>
   14e26:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   14e28:	7805      	ldrb	r5, [r0, #0]
   14e2a:	4628      	mov	r0, r5
   14e2c:	f7ff fc20 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   14e30:	b1a0      	cbz	r0, 14e5c <usb_dc_ep_configure+0x40>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   14e32:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   14e34:	7922      	ldrb	r2, [r4, #4]
   14e36:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   14e38:	8862      	ldrh	r2, [r4, #2]
   14e3a:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   14e3c:	7820      	ldrb	r0, [r4, #0]
   14e3e:	f010 0f08 	tst.w	r0, #8
   14e42:	d103      	bne.n	14e4c <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   14e44:	8863      	ldrh	r3, [r4, #2]
   14e46:	1e5a      	subs	r2, r3, #1
   14e48:	4213      	tst	r3, r2
   14e4a:	d10a      	bne.n	14e62 <usb_dc_ep_configure+0x46>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   14e4c:	8861      	ldrh	r1, [r4, #2]
   14e4e:	f003 fb1d 	bl	1848c <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   14e52:	2000      	movs	r0, #0
}
   14e54:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   14e56:	f06f 0012 	mvn.w	r0, #18
   14e5a:	e7fb      	b.n	14e54 <usb_dc_ep_configure+0x38>
		return -EINVAL;
   14e5c:	f06f 0015 	mvn.w	r0, #21
   14e60:	e7f8      	b.n	14e54 <usb_dc_ep_configure+0x38>
			return -EINVAL;
   14e62:	f06f 0015 	mvn.w	r0, #21
   14e66:	e7f5      	b.n	14e54 <usb_dc_ep_configure+0x38>
   14e68:	20002ea0 	.word	0x20002ea0

00014e6c <usb_dc_ep_set_stall>:
{
   14e6c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   14e6e:	4b16      	ldr	r3, [pc, #88]	; (14ec8 <usb_dc_ep_set_stall+0x5c>)
   14e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   14e74:	b1e3      	cbz	r3, 14eb0 <usb_dc_ep_set_stall+0x44>
   14e76:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   14e78:	4b13      	ldr	r3, [pc, #76]	; (14ec8 <usb_dc_ep_set_stall+0x5c>)
   14e7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   14e7e:	b1d3      	cbz	r3, 14eb6 <usb_dc_ep_set_stall+0x4a>
	ep_ctx = endpoint_ctx(ep);
   14e80:	f7ff fbf6 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   14e84:	4605      	mov	r5, r0
   14e86:	b1c8      	cbz	r0, 14ebc <usb_dc_ep_set_stall+0x50>
	switch (ep_ctx->cfg.type) {
   14e88:	7a83      	ldrb	r3, [r0, #10]
   14e8a:	2b01      	cmp	r3, #1
   14e8c:	d019      	beq.n	14ec2 <usb_dc_ep_set_stall+0x56>
   14e8e:	d807      	bhi.n	14ea0 <usb_dc_ep_set_stall+0x34>
   14e90:	b90b      	cbnz	r3, 14e96 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
   14e92:	f003 fe19 	bl	18ac8 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
   14e96:	2000      	movs	r0, #0
   14e98:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   14e9a:	696b      	ldr	r3, [r5, #20]
   14e9c:	61ab      	str	r3, [r5, #24]
}
   14e9e:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
   14ea0:	3b02      	subs	r3, #2
   14ea2:	b2db      	uxtb	r3, r3
   14ea4:	2b01      	cmp	r3, #1
   14ea6:	d8f6      	bhi.n	14e96 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   14ea8:	4620      	mov	r0, r4
   14eaa:	f003 fd63 	bl	18974 <nrfx_usbd_ep_stall>
		break;
   14eae:	e7f2      	b.n	14e96 <usb_dc_ep_set_stall+0x2a>
		return -ENODEV;
   14eb0:	f06f 0012 	mvn.w	r0, #18
   14eb4:	e7f3      	b.n	14e9e <usb_dc_ep_set_stall+0x32>
   14eb6:	f06f 0012 	mvn.w	r0, #18
   14eba:	e7f0      	b.n	14e9e <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
   14ebc:	f06f 0015 	mvn.w	r0, #21
   14ec0:	e7ed      	b.n	14e9e <usb_dc_ep_set_stall+0x32>
	switch (ep_ctx->cfg.type) {
   14ec2:	f06f 0015 	mvn.w	r0, #21
   14ec6:	e7ea      	b.n	14e9e <usb_dc_ep_set_stall+0x32>
   14ec8:	20002ea0 	.word	0x20002ea0

00014ecc <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
   14ecc:	4b11      	ldr	r3, [pc, #68]	; (14f14 <usb_dc_ep_clear_stall+0x48>)
   14ece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   14ed2:	b19b      	cbz	r3, 14efc <usb_dc_ep_clear_stall+0x30>
{
   14ed4:	b510      	push	{r4, lr}
   14ed6:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   14ed8:	4b0e      	ldr	r3, [pc, #56]	; (14f14 <usb_dc_ep_clear_stall+0x48>)
   14eda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   14ede:	b183      	cbz	r3, 14f02 <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
   14ee0:	f7ff fbc6 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   14ee4:	b180      	cbz	r0, 14f08 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   14ee6:	f014 0f08 	tst.w	r4, #8
   14eea:	d110      	bne.n	14f0e <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   14eec:	4620      	mov	r0, r4
   14eee:	f003 fd69 	bl	189c4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   14ef2:	4620      	mov	r0, r4
   14ef4:	f004 f818 	bl	18f28 <nrfx_usbd_ep_stall_clear>
	return 0;
   14ef8:	2000      	movs	r0, #0
}
   14efa:	bd10      	pop	{r4, pc}
		return -ENODEV;
   14efc:	f06f 0012 	mvn.w	r0, #18
}
   14f00:	4770      	bx	lr
		return -ENODEV;
   14f02:	f06f 0012 	mvn.w	r0, #18
   14f06:	e7f8      	b.n	14efa <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
   14f08:	f06f 0015 	mvn.w	r0, #21
   14f0c:	e7f5      	b.n	14efa <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
   14f0e:	f06f 0015 	mvn.w	r0, #21
   14f12:	e7f2      	b.n	14efa <usb_dc_ep_clear_stall+0x2e>
   14f14:	20002ea0 	.word	0x20002ea0

00014f18 <usb_dc_ep_is_stalled>:
{
   14f18:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   14f1a:	4b10      	ldr	r3, [pc, #64]	; (14f5c <usb_dc_ep_is_stalled+0x44>)
   14f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   14f20:	b17b      	cbz	r3, 14f42 <usb_dc_ep_is_stalled+0x2a>
   14f22:	4604      	mov	r4, r0
   14f24:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
   14f26:	4b0d      	ldr	r3, [pc, #52]	; (14f5c <usb_dc_ep_is_stalled+0x44>)
   14f28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   14f2c:	b163      	cbz	r3, 14f48 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
   14f2e:	f7ff fb9f 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   14f32:	b160      	cbz	r0, 14f4e <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
   14f34:	b175      	cbz	r5, 14f54 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   14f36:	4620      	mov	r0, r4
   14f38:	f003 fd24 	bl	18984 <nrfx_usbd_ep_stall_check>
   14f3c:	7028      	strb	r0, [r5, #0]
	return 0;
   14f3e:	2000      	movs	r0, #0
}
   14f40:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   14f42:	f06f 0012 	mvn.w	r0, #18
   14f46:	e7fb      	b.n	14f40 <usb_dc_ep_is_stalled+0x28>
   14f48:	f06f 0012 	mvn.w	r0, #18
   14f4c:	e7f8      	b.n	14f40 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
   14f4e:	f06f 0015 	mvn.w	r0, #21
   14f52:	e7f5      	b.n	14f40 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
   14f54:	f06f 0015 	mvn.w	r0, #21
   14f58:	e7f2      	b.n	14f40 <usb_dc_ep_is_stalled+0x28>
   14f5a:	bf00      	nop
   14f5c:	20002ea0 	.word	0x20002ea0

00014f60 <usb_dc_ep_enable>:
{
   14f60:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   14f62:	4b15      	ldr	r3, [pc, #84]	; (14fb8 <usb_dc_ep_enable+0x58>)
   14f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   14f68:	b1eb      	cbz	r3, 14fa6 <usb_dc_ep_enable+0x46>
   14f6a:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   14f6c:	f7ff fb80 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   14f70:	4605      	mov	r5, r0
   14f72:	b1d8      	cbz	r0, 14fac <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   14f74:	f014 0f08 	tst.w	r4, #8
   14f78:	d009      	beq.n	14f8e <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
   14f7a:	7a2b      	ldrb	r3, [r5, #8]
   14f7c:	b9cb      	cbnz	r3, 14fb2 <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
   14f7e:	2301      	movs	r3, #1
   14f80:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
   14f82:	4b0d      	ldr	r3, [pc, #52]	; (14fb8 <usb_dc_ep_enable+0x58>)
   14f84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
   14f88:	b943      	cbnz	r3, 14f9c <usb_dc_ep_enable+0x3c>
	return 0;
   14f8a:	2000      	movs	r0, #0
}
   14f8c:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   14f8e:	4620      	mov	r0, r4
   14f90:	f003 fd18 	bl	189c4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   14f94:	4620      	mov	r0, r4
   14f96:	f003 ffc7 	bl	18f28 <nrfx_usbd_ep_stall_clear>
   14f9a:	e7ee      	b.n	14f7a <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   14f9c:	4620      	mov	r0, r4
   14f9e:	f003 ff6b 	bl	18e78 <nrfx_usbd_ep_enable>
	return 0;
   14fa2:	2000      	movs	r0, #0
   14fa4:	e7f2      	b.n	14f8c <usb_dc_ep_enable+0x2c>
		return -ENODEV;
   14fa6:	f06f 0012 	mvn.w	r0, #18
   14faa:	e7ef      	b.n	14f8c <usb_dc_ep_enable+0x2c>
		return -EINVAL;
   14fac:	f06f 0015 	mvn.w	r0, #21
   14fb0:	e7ec      	b.n	14f8c <usb_dc_ep_enable+0x2c>
		return -EALREADY;
   14fb2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14fb6:	e7e9      	b.n	14f8c <usb_dc_ep_enable+0x2c>
   14fb8:	20002ea0 	.word	0x20002ea0

00014fbc <usb_dc_ep_write>:
{
   14fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fc0:	b084      	sub	sp, #16
   14fc2:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
   14fc4:	4b3c      	ldr	r3, [pc, #240]	; (150b8 <usb_dc_ep_write+0xfc>)
   14fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   14fca:	2b00      	cmp	r3, #0
   14fcc:	d065      	beq.n	1509a <usb_dc_ep_write+0xde>
   14fce:	4604      	mov	r4, r0
   14fd0:	4688      	mov	r8, r1
   14fd2:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
   14fd4:	4b38      	ldr	r3, [pc, #224]	; (150b8 <usb_dc_ep_write+0xfc>)
   14fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   14fda:	2b00      	cmp	r3, #0
   14fdc:	d060      	beq.n	150a0 <usb_dc_ep_write+0xe4>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   14fde:	f010 0f80 	tst.w	r0, #128	; 0x80
   14fe2:	d060      	beq.n	150a6 <usb_dc_ep_write+0xea>
	ep_ctx = endpoint_ctx(ep);
   14fe4:	f7ff fb44 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   14fe8:	4605      	mov	r5, r0
   14fea:	2800      	cmp	r0, #0
   14fec:	d05e      	beq.n	150ac <usb_dc_ep_write+0xf0>
	if (!ep_ctx->cfg.en) {
   14fee:	7a03      	ldrb	r3, [r0, #8]
   14ff0:	2b00      	cmp	r3, #0
   14ff2:	d05e      	beq.n	150b2 <usb_dc_ep_write+0xf6>
	return z_impl_k_mutex_lock(mutex, timeout);
   14ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ffc:	482f      	ldr	r0, [pc, #188]	; (150bc <usb_dc_ep_write+0x100>)
   14ffe:	f004 fa9b 	bl	19538 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
   15002:	7fab      	ldrb	r3, [r5, #30]
   15004:	bb9b      	cbnz	r3, 1506e <usb_dc_ep_write+0xb2>
	if (!data_len && ep_ctx->trans_zlp) {
   15006:	b91e      	cbnz	r6, 15010 <usb_dc_ep_write+0x54>
   15008:	7feb      	ldrb	r3, [r5, #31]
   1500a:	b10b      	cbz	r3, 15010 <usb_dc_ep_write+0x54>
		ep_ctx->trans_zlp = false;
   1500c:	2300      	movs	r3, #0
   1500e:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   15010:	7aab      	ldrb	r3, [r5, #10]
   15012:	b963      	cbnz	r3, 1502e <usb_dc_ep_write+0x72>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   15014:	b15e      	cbz	r6, 1502e <usb_dc_ep_write+0x72>
   15016:	4a28      	ldr	r2, [pc, #160]	; (150b8 <usb_dc_ep_write+0xfc>)
   15018:	8952      	ldrh	r2, [r2, #10]
   1501a:	42b2      	cmp	r2, r6
   1501c:	d907      	bls.n	1502e <usb_dc_ep_write+0x72>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   1501e:	6869      	ldr	r1, [r5, #4]
   15020:	fbb6 f2f1 	udiv	r2, r6, r1
   15024:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   15028:	b90a      	cbnz	r2, 1502e <usb_dc_ep_write+0x72>
			ep_ctx->trans_zlp = true;
   1502a:	2201      	movs	r2, #1
   1502c:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   1502e:	b91b      	cbnz	r3, 15038 <usb_dc_ep_write+0x7c>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   15030:	f003 fd52 	bl	18ad8 <nrfx_usbd_last_setup_dir_get>
   15034:	42a0      	cmp	r0, r4
   15036:	d120      	bne.n	1507a <usb_dc_ep_write+0xbe>
	ep_ctx->write_in_progress = true;
   15038:	2301      	movs	r3, #1
   1503a:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   1503c:	f8cd 8004 	str.w	r8, [sp, #4]
   15040:	9602      	str	r6, [sp, #8]
   15042:	2300      	movs	r3, #0
   15044:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   15046:	a901      	add	r1, sp, #4
   15048:	4620      	mov	r0, r4
   1504a:	f003 fa87 	bl	1855c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   1504e:	4b1c      	ldr	r3, [pc, #112]	; (150c0 <usb_dc_ep_write+0x104>)
   15050:	4298      	cmp	r0, r3
   15052:	d019      	beq.n	15088 <usb_dc_ep_write+0xcc>
		ep_ctx->write_in_progress = false;
   15054:	2300      	movs	r3, #0
   15056:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
   15058:	b1d7      	cbz	r7, 15090 <usb_dc_ep_write+0xd4>
			*ret_bytes = 0;
   1505a:	603b      	str	r3, [r7, #0]
		result = -EIO;
   1505c:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
   15060:	4816      	ldr	r0, [pc, #88]	; (150bc <usb_dc_ep_write+0x100>)
   15062:	f004 faed 	bl	19640 <z_impl_k_mutex_unlock>
}
   15066:	4620      	mov	r0, r4
   15068:	b004      	add	sp, #16
   1506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1506e:	4813      	ldr	r0, [pc, #76]	; (150bc <usb_dc_ep_write+0x100>)
   15070:	f004 fae6 	bl	19640 <z_impl_k_mutex_unlock>
		return -EAGAIN;
   15074:	f06f 040a 	mvn.w	r4, #10
   15078:	e7f5      	b.n	15066 <usb_dc_ep_write+0xaa>
		nrfx_usbd_setup_clear();
   1507a:	f003 fd1d 	bl	18ab8 <nrfx_usbd_setup_clear>
   1507e:	480f      	ldr	r0, [pc, #60]	; (150bc <usb_dc_ep_write+0x100>)
   15080:	f004 fade 	bl	19640 <z_impl_k_mutex_unlock>
		return 0;
   15084:	2400      	movs	r4, #0
   15086:	e7ee      	b.n	15066 <usb_dc_ep_write+0xaa>
		if (ret_bytes) {
   15088:	b12f      	cbz	r7, 15096 <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
   1508a:	603e      	str	r6, [r7, #0]
	int result = 0;
   1508c:	2400      	movs	r4, #0
   1508e:	e7e7      	b.n	15060 <usb_dc_ep_write+0xa4>
		result = -EIO;
   15090:	f06f 0404 	mvn.w	r4, #4
   15094:	e7e4      	b.n	15060 <usb_dc_ep_write+0xa4>
	int result = 0;
   15096:	2400      	movs	r4, #0
   15098:	e7e2      	b.n	15060 <usb_dc_ep_write+0xa4>
		return -ENODEV;
   1509a:	f06f 0412 	mvn.w	r4, #18
   1509e:	e7e2      	b.n	15066 <usb_dc_ep_write+0xaa>
   150a0:	f06f 0412 	mvn.w	r4, #18
   150a4:	e7df      	b.n	15066 <usb_dc_ep_write+0xaa>
		return -EINVAL;
   150a6:	f06f 0415 	mvn.w	r4, #21
   150aa:	e7dc      	b.n	15066 <usb_dc_ep_write+0xaa>
		return -EINVAL;
   150ac:	f06f 0415 	mvn.w	r4, #21
   150b0:	e7d9      	b.n	15066 <usb_dc_ep_write+0xaa>
		return -EINVAL;
   150b2:	f06f 0415 	mvn.w	r4, #21
   150b6:	e7d6      	b.n	15066 <usb_dc_ep_write+0xaa>
   150b8:	20002ea0 	.word	0x20002ea0
   150bc:	20002ed8 	.word	0x20002ed8
   150c0:	0bad0000 	.word	0x0bad0000

000150c4 <usb_dc_ep_read_wait>:
{
   150c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150c8:	461e      	mov	r6, r3
	return get_usbd_ctx()->attached;
   150ca:	4b2b      	ldr	r3, [pc, #172]	; (15178 <usb_dc_ep_read_wait+0xb4>)
   150cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   150d0:	2b00      	cmp	r3, #0
   150d2:	d042      	beq.n	1515a <usb_dc_ep_read_wait+0x96>
   150d4:	460d      	mov	r5, r1
   150d6:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
   150d8:	4b27      	ldr	r3, [pc, #156]	; (15178 <usb_dc_ep_read_wait+0xb4>)
   150da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   150de:	2b00      	cmp	r3, #0
   150e0:	d03e      	beq.n	15160 <usb_dc_ep_read_wait+0x9c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   150e2:	f010 0f80 	tst.w	r0, #128	; 0x80
   150e6:	d13e      	bne.n	15166 <usb_dc_ep_read_wait+0xa2>
	if (!data && max_data_len) {
   150e8:	b349      	cbz	r1, 1513e <usb_dc_ep_read_wait+0x7a>
	ep_ctx = endpoint_ctx(ep);
   150ea:	f7ff fac1 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   150ee:	4604      	mov	r4, r0
   150f0:	2800      	cmp	r0, #0
   150f2:	d03b      	beq.n	1516c <usb_dc_ep_read_wait+0xa8>
	if (!ep_ctx->cfg.en) {
   150f4:	7a03      	ldrb	r3, [r0, #8]
   150f6:	2b00      	cmp	r3, #0
   150f8:	d03b      	beq.n	15172 <usb_dc_ep_read_wait+0xae>
	return z_impl_k_mutex_lock(mutex, timeout);
   150fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   150fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15102:	481e      	ldr	r0, [pc, #120]	; (1517c <usb_dc_ep_read_wait+0xb8>)
   15104:	f004 fa18 	bl	19538 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   15108:	68e3      	ldr	r3, [r4, #12]
   1510a:	46b8      	mov	r8, r7
   1510c:	429f      	cmp	r7, r3
   1510e:	bf28      	it	cs
   15110:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   15112:	b1cd      	cbz	r5, 15148 <usb_dc_ep_read_wait+0x84>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15114:	4642      	mov	r2, r8
   15116:	69a1      	ldr	r1, [r4, #24]
   15118:	4628      	mov	r0, r5
   1511a:	f00f fe76 	bl	24e0a <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   1511e:	69a3      	ldr	r3, [r4, #24]
   15120:	4443      	add	r3, r8
   15122:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   15124:	68e3      	ldr	r3, [r4, #12]
   15126:	eba3 0308 	sub.w	r3, r3, r8
   1512a:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   1512c:	b10e      	cbz	r6, 15132 <usb_dc_ep_read_wait+0x6e>
		*read_bytes = bytes_to_copy;
   1512e:	f8c6 8000 	str.w	r8, [r6]
	return z_impl_k_mutex_unlock(mutex);
   15132:	4812      	ldr	r0, [pc, #72]	; (1517c <usb_dc_ep_read_wait+0xb8>)
   15134:	f004 fa84 	bl	19640 <z_impl_k_mutex_unlock>
	return 0;
   15138:	2000      	movs	r0, #0
}
   1513a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
   1513e:	2a00      	cmp	r2, #0
   15140:	d0d3      	beq.n	150ea <usb_dc_ep_read_wait+0x26>
		return -EINVAL;
   15142:	f06f 0015 	mvn.w	r0, #21
   15146:	e7f8      	b.n	1513a <usb_dc_ep_read_wait+0x76>
	if (!data && !max_data_len) {
   15148:	2f00      	cmp	r7, #0
   1514a:	d1e3      	bne.n	15114 <usb_dc_ep_read_wait+0x50>
		if (read_bytes) {
   1514c:	b106      	cbz	r6, 15150 <usb_dc_ep_read_wait+0x8c>
			*read_bytes = ep_ctx->buf.len;
   1514e:	6033      	str	r3, [r6, #0]
   15150:	480a      	ldr	r0, [pc, #40]	; (1517c <usb_dc_ep_read_wait+0xb8>)
   15152:	f004 fa75 	bl	19640 <z_impl_k_mutex_unlock>
		return 0;
   15156:	2000      	movs	r0, #0
   15158:	e7ef      	b.n	1513a <usb_dc_ep_read_wait+0x76>
		return -ENODEV;
   1515a:	f06f 0012 	mvn.w	r0, #18
   1515e:	e7ec      	b.n	1513a <usb_dc_ep_read_wait+0x76>
   15160:	f06f 0012 	mvn.w	r0, #18
   15164:	e7e9      	b.n	1513a <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
   15166:	f06f 0015 	mvn.w	r0, #21
   1516a:	e7e6      	b.n	1513a <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
   1516c:	f06f 0015 	mvn.w	r0, #21
   15170:	e7e3      	b.n	1513a <usb_dc_ep_read_wait+0x76>
		return -EINVAL;
   15172:	f06f 0015 	mvn.w	r0, #21
   15176:	e7e0      	b.n	1513a <usb_dc_ep_read_wait+0x76>
   15178:	20002ea0 	.word	0x20002ea0
   1517c:	20002ed8 	.word	0x20002ed8

00015180 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
   15180:	4b27      	ldr	r3, [pc, #156]	; (15220 <usb_dc_ep_read_continue+0xa0>)
   15182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   15186:	2b00      	cmp	r3, #0
   15188:	d03a      	beq.n	15200 <usb_dc_ep_read_continue+0x80>
	return get_usbd_ctx()->ready;
   1518a:	4b25      	ldr	r3, [pc, #148]	; (15220 <usb_dc_ep_read_continue+0xa0>)
   1518c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   15190:	2b00      	cmp	r3, #0
   15192:	d038      	beq.n	15206 <usb_dc_ep_read_continue+0x86>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   15194:	f010 0f80 	tst.w	r0, #128	; 0x80
   15198:	d138      	bne.n	1520c <usb_dc_ep_read_continue+0x8c>
{
   1519a:	b510      	push	{r4, lr}
	ep_ctx = endpoint_ctx(ep);
   1519c:	f7ff fa68 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   151a0:	4604      	mov	r4, r0
   151a2:	2800      	cmp	r0, #0
   151a4:	d035      	beq.n	15212 <usb_dc_ep_read_continue+0x92>
	if (!ep_ctx->cfg.en) {
   151a6:	7a03      	ldrb	r3, [r0, #8]
   151a8:	2b00      	cmp	r3, #0
   151aa:	d035      	beq.n	15218 <usb_dc_ep_read_continue+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
   151ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   151b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   151b4:	481b      	ldr	r0, [pc, #108]	; (15224 <usb_dc_ep_read_continue+0xa4>)
   151b6:	f004 f9bf 	bl	19538 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
   151ba:	68e3      	ldr	r3, [r4, #12]
   151bc:	b92b      	cbnz	r3, 151ca <usb_dc_ep_read_continue+0x4a>
		ep_ctx->buf.curr = ep_ctx->buf.data;
   151be:	6963      	ldr	r3, [r4, #20]
   151c0:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
   151c2:	2301      	movs	r3, #1
   151c4:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
   151c6:	7f63      	ldrb	r3, [r4, #29]
   151c8:	b923      	cbnz	r3, 151d4 <usb_dc_ep_read_continue+0x54>
	return z_impl_k_mutex_unlock(mutex);
   151ca:	4816      	ldr	r0, [pc, #88]	; (15224 <usb_dc_ep_read_continue+0xa4>)
   151cc:	f004 fa38 	bl	19640 <z_impl_k_mutex_unlock>
	return 0;
   151d0:	2000      	movs	r0, #0
}
   151d2:	bd10      	pop	{r4, pc}
			struct usbd_event *ev = usbd_evt_alloc();
   151d4:	f7ff fac2 	bl	1475c <usbd_evt_alloc>
			if (!ev) {
   151d8:	4601      	mov	r1, r0
   151da:	b158      	cbz	r0, 151f4 <usb_dc_ep_read_continue+0x74>
			ev->evt_type = USBD_EVT_EP;
   151dc:	2301      	movs	r3, #1
   151de:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   151e0:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   151e2:	7303      	strb	r3, [r0, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
   151e4:	4810      	ldr	r0, [pc, #64]	; (15228 <usb_dc_ep_read_continue+0xa8>)
   151e6:	f00f fa12 	bl	2460e <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   151ea:	4910      	ldr	r1, [pc, #64]	; (1522c <usb_dc_ep_read_continue+0xac>)
   151ec:	4810      	ldr	r0, [pc, #64]	; (15230 <usb_dc_ep_read_continue+0xb0>)
   151ee:	f00f fad1 	bl	24794 <k_work_submit_to_queue>
}
   151f2:	e7ea      	b.n	151ca <usb_dc_ep_read_continue+0x4a>
   151f4:	480b      	ldr	r0, [pc, #44]	; (15224 <usb_dc_ep_read_continue+0xa4>)
   151f6:	f004 fa23 	bl	19640 <z_impl_k_mutex_unlock>
				return -ENOMEM;
   151fa:	f06f 000b 	mvn.w	r0, #11
   151fe:	e7e8      	b.n	151d2 <usb_dc_ep_read_continue+0x52>
		return -ENODEV;
   15200:	f06f 0012 	mvn.w	r0, #18
   15204:	4770      	bx	lr
   15206:	f06f 0012 	mvn.w	r0, #18
   1520a:	4770      	bx	lr
		return -EINVAL;
   1520c:	f06f 0015 	mvn.w	r0, #21
}
   15210:	4770      	bx	lr
		return -EINVAL;
   15212:	f06f 0015 	mvn.w	r0, #21
   15216:	e7dc      	b.n	151d2 <usb_dc_ep_read_continue+0x52>
		return -EINVAL;
   15218:	f06f 0015 	mvn.w	r0, #21
   1521c:	e7d9      	b.n	151d2 <usb_dc_ep_read_continue+0x52>
   1521e:	bf00      	nop
   15220:	20002ea0 	.word	0x20002ea0
   15224:	20002ed8 	.word	0x20002ed8
   15228:	200008d8 	.word	0x200008d8
   1522c:	20002ec8 	.word	0x20002ec8
   15230:	20001ab8 	.word	0x20001ab8

00015234 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
   15234:	4b08      	ldr	r3, [pc, #32]	; (15258 <usb_dc_ep_set_callback+0x24>)
   15236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   1523a:	b13b      	cbz	r3, 1524c <usb_dc_ep_set_callback+0x18>
{
   1523c:	b510      	push	{r4, lr}
   1523e:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
   15240:	f7ff fa16 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   15244:	b128      	cbz	r0, 15252 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   15246:	6004      	str	r4, [r0, #0]
	return 0;
   15248:	2000      	movs	r0, #0
}
   1524a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1524c:	f06f 0012 	mvn.w	r0, #18
}
   15250:	4770      	bx	lr
		return -EINVAL;
   15252:	f06f 0015 	mvn.w	r0, #21
   15256:	e7f8      	b.n	1524a <usb_dc_ep_set_callback+0x16>
   15258:	20002ea0 	.word	0x20002ea0

0001525c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   1525c:	4b01      	ldr	r3, [pc, #4]	; (15264 <usb_dc_set_status_callback+0x8>)
   1525e:	6018      	str	r0, [r3, #0]
}
   15260:	4770      	bx	lr
   15262:	bf00      	nop
   15264:	20002ea0 	.word	0x20002ea0

00015268 <usb_dc_ep_mps>:
{
   15268:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   1526a:	4b07      	ldr	r3, [pc, #28]	; (15288 <usb_dc_ep_mps+0x20>)
   1526c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   15270:	b123      	cbz	r3, 1527c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   15272:	f7ff f9fd 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   15276:	b120      	cbz	r0, 15282 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   15278:	6840      	ldr	r0, [r0, #4]
}
   1527a:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1527c:	f06f 0012 	mvn.w	r0, #18
   15280:	e7fb      	b.n	1527a <usb_dc_ep_mps+0x12>
		return -EINVAL;
   15282:	f06f 0015 	mvn.w	r0, #21
   15286:	e7f8      	b.n	1527a <usb_dc_ep_mps+0x12>
   15288:	20002ea0 	.word	0x20002ea0

0001528c <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
   1528c:	b570      	push	{r4, r5, r6, lr}
   1528e:	b082      	sub	sp, #8
	nrf_saadc_channel_config_t config = {
   15290:	2300      	movs	r3, #0
   15292:	9300      	str	r3, [sp, #0]
   15294:	f8cd 3003 	str.w	r3, [sp, #3]
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   15298:	790d      	ldrb	r5, [r1, #4]
   1529a:	f005 051f 	and.w	r5, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
   1529e:	2d07      	cmp	r5, #7
   152a0:	f200 8086 	bhi.w	153b0 <adc_nrfx_channel_setup+0x124>
   152a4:	460c      	mov	r4, r1
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   152a6:	780b      	ldrb	r3, [r1, #0]
   152a8:	2b0b      	cmp	r3, #11
   152aa:	f200 8084 	bhi.w	153b6 <adc_nrfx_channel_setup+0x12a>
   152ae:	e8df f003 	tbb	[pc, r3]
   152b2:	0609      	.short	0x0609
   152b4:	19821511 	.word	0x19821511
   152b8:	211d8282 	.word	0x211d8282
   152bc:	2582      	.short	0x2582
	case ADC_GAIN_1_6:
		config.gain = NRF_SAADC_GAIN1_6;
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
   152be:	2301      	movs	r3, #1
   152c0:	f88d 3002 	strb.w	r3, [sp, #2]
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   152c4:	7863      	ldrb	r3, [r4, #1]
   152c6:	2b03      	cmp	r3, #3
   152c8:	d01c      	beq.n	15304 <adc_nrfx_channel_setup+0x78>
   152ca:	2b04      	cmp	r3, #4
   152cc:	d01d      	beq.n	1530a <adc_nrfx_channel_setup+0x7e>
   152ce:	f06f 0015 	mvn.w	r0, #21
   152d2:	e05b      	b.n	1538c <adc_nrfx_channel_setup+0x100>
		config.gain = NRF_SAADC_GAIN1_4;
   152d4:	2302      	movs	r3, #2
   152d6:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   152da:	e7f3      	b.n	152c4 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_3;
   152dc:	2303      	movs	r3, #3
   152de:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   152e2:	e7ef      	b.n	152c4 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_2;
   152e4:	2304      	movs	r3, #4
   152e6:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   152ea:	e7eb      	b.n	152c4 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1;
   152ec:	2305      	movs	r3, #5
   152ee:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   152f2:	e7e7      	b.n	152c4 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN2;
   152f4:	2306      	movs	r3, #6
   152f6:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   152fa:	e7e3      	b.n	152c4 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN4;
   152fc:	2307      	movs	r3, #7
   152fe:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   15302:	e7df      	b.n	152c4 <adc_nrfx_channel_setup+0x38>
	case ADC_REF_INTERNAL:
		config.reference = NRF_SAADC_REFERENCE_INTERNAL;
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   15304:	2301      	movs	r3, #1
   15306:	f88d 3003 	strb.w	r3, [sp, #3]
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   1530a:	8863      	ldrh	r3, [r4, #2]
   1530c:	2b00      	cmp	r3, #0
   1530e:	d03f      	beq.n	15390 <adc_nrfx_channel_setup+0x104>
   15310:	f244 0228 	movw	r2, #16424	; 0x4028
   15314:	4293      	cmp	r3, r2
   15316:	d851      	bhi.n	153bc <adc_nrfx_channel_setup+0x130>
   15318:	f244 0203 	movw	r2, #16387	; 0x4003
   1531c:	4293      	cmp	r3, r2
   1531e:	d350      	bcc.n	153c2 <adc_nrfx_channel_setup+0x136>
   15320:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
   15324:	3b03      	subs	r3, #3
   15326:	2b25      	cmp	r3, #37	; 0x25
   15328:	d84e      	bhi.n	153c8 <adc_nrfx_channel_setup+0x13c>
   1532a:	e8df f003 	tbb	[pc, r3]
   1532e:	4d16      	.short	0x4d16
   15330:	4d4d4d13 	.word	0x4d4d4d13
   15334:	4d4d314d 	.word	0x4d4d314d
   15338:	4d354d4d 	.word	0x4d354d4d
   1533c:	394d4d4d 	.word	0x394d4d4d
   15340:	4d4d4d4d 	.word	0x4d4d4d4d
   15344:	4d4d4d4d 	.word	0x4d4d4d4d
   15348:	4d4d4d4d 	.word	0x4d4d4d4d
   1534c:	4d4d4d4d 	.word	0x4d4d4d4d
   15350:	3d4d4d4d 	.word	0x3d4d4d4d
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3):
		config.acq_time = NRF_SAADC_ACQTIME_3US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 5):
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   15354:	2301      	movs	r3, #1
   15356:	f88d 3004 	strb.w	r3, [sp, #4]
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
		return -EINVAL;
	}

	config.mode = (channel_cfg->differential ?
   1535a:	7923      	ldrb	r3, [r4, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
   1535c:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
   15360:	f88d 3005 	strb.w	r3, [sp, #5]
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */

	nrf_saadc_channel_init(NRF_SAADC, channel_id, &config);
   15364:	4e1a      	ldr	r6, [pc, #104]	; (153d0 <adc_nrfx_channel_setup+0x144>)
   15366:	466a      	mov	r2, sp
   15368:	4629      	mov	r1, r5
   1536a:	4630      	mov	r0, r6
   1536c:	f00d f8f0 	bl	22550 <nrf_saadc_channel_init>
	nrf_saadc_channel_input_set(NRF_SAADC,
				    channel_id,
				    NRF_SAADC_INPUT_DISABLED,
				    channel_cfg->input_negative);
   15370:	79a1      	ldrb	r1, [r4, #6]
NRF_STATIC_INLINE void nrf_saadc_channel_input_set(NRF_SAADC_Type *  p_reg,
                                                   uint8_t           channel,
                                                   nrf_saadc_input_t pselp,
                                                   nrf_saadc_input_t pseln)
{
    p_reg->CH[channel].PSELN = pseln;
   15372:	f105 0351 	add.w	r3, r5, #81	; 0x51
   15376:	011a      	lsls	r2, r3, #4
   15378:	eb06 1303 	add.w	r3, r6, r3, lsl #4
   1537c:	6059      	str	r1, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
   1537e:	2000      	movs	r0, #0
   15380:	50b0      	str	r0, [r6, r2]

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   15382:	7962      	ldrb	r2, [r4, #5]
   15384:	4b13      	ldr	r3, [pc, #76]	; (153d4 <adc_nrfx_channel_setup+0x148>)
   15386:	442b      	add	r3, r5
   15388:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	return 0;
}
   1538c:	b002      	add	sp, #8
   1538e:	bd70      	pop	{r4, r5, r6, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   15390:	2302      	movs	r3, #2
   15392:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   15396:	e7e0      	b.n	1535a <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   15398:	2303      	movs	r3, #3
   1539a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   1539e:	e7dc      	b.n	1535a <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   153a0:	2304      	movs	r3, #4
   153a2:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   153a6:	e7d8      	b.n	1535a <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   153a8:	2305      	movs	r3, #5
   153aa:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   153ae:	e7d4      	b.n	1535a <adc_nrfx_channel_setup+0xce>
		return -EINVAL;
   153b0:	f06f 0015 	mvn.w	r0, #21
   153b4:	e7ea      	b.n	1538c <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->gain) {
   153b6:	f06f 0015 	mvn.w	r0, #21
   153ba:	e7e7      	b.n	1538c <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->acquisition_time) {
   153bc:	f06f 0015 	mvn.w	r0, #21
   153c0:	e7e4      	b.n	1538c <adc_nrfx_channel_setup+0x100>
   153c2:	f06f 0015 	mvn.w	r0, #21
   153c6:	e7e1      	b.n	1538c <adc_nrfx_channel_setup+0x100>
   153c8:	f06f 0015 	mvn.w	r0, #21
   153cc:	e7de      	b.n	1538c <adc_nrfx_channel_setup+0x100>
   153ce:	bf00      	nop
   153d0:	40007000 	.word	0x40007000
   153d4:	20000378 	.word	0x20000378

000153d8 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   153d8:	4b07      	ldr	r3, [pc, #28]	; (153f8 <adc_context_start_sampling+0x20>)
   153da:	2201      	movs	r2, #1
   153dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   153e0:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
   153e4:	b113      	cbz	r3, 153ec <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   153e6:	4b04      	ldr	r3, [pc, #16]	; (153f8 <adc_context_start_sampling+0x20>)
   153e8:	60da      	str	r2, [r3, #12]
}
   153ea:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   153ec:	4b02      	ldr	r3, [pc, #8]	; (153f8 <adc_context_start_sampling+0x20>)
   153ee:	2201      	movs	r2, #1
   153f0:	601a      	str	r2, [r3, #0]
   153f2:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   153f4:	4770      	bx	lr
   153f6:	bf00      	nop
   153f8:	40007000 	.word	0x40007000

000153fc <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
   153fc:	b949      	cbnz	r1, 15412 <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   153fe:	4b05      	ldr	r3, [pc, #20]	; (15414 <adc_context_update_buffer_pointer+0x18>)
   15400:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
   15404:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   15408:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1540a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1540e:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
   15412:	4770      	bx	lr
   15414:	40007000 	.word	0x40007000

00015418 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
   15418:	7c03      	ldrb	r3, [r0, #16]
   1541a:	3b08      	subs	r3, #8
   1541c:	2b06      	cmp	r3, #6
   1541e:	d811      	bhi.n	15444 <set_resolution+0x2c>
   15420:	e8df f003 	tbb	[pc, r3]
   15424:	100e1004 	.word	0x100e1004
   15428:	1006      	.short	0x1006
   1542a:	0c          	.byte	0x0c
   1542b:	00          	.byte	0x00
   1542c:	2200      	movs	r2, #0
   1542e:	e000      	b.n	15432 <set_resolution+0x1a>
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   15430:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
   15432:	4b06      	ldr	r3, [pc, #24]	; (1544c <set_resolution+0x34>)
   15434:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
   15438:	2000      	movs	r0, #0
   1543a:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1543c:	2203      	movs	r2, #3
		break;
   1543e:	e7f8      	b.n	15432 <set_resolution+0x1a>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
   15440:	2201      	movs	r2, #1
   15442:	e7f6      	b.n	15432 <set_resolution+0x1a>
	switch (sequence->resolution) {
   15444:	f06f 0015 	mvn.w	r0, #21
}
   15448:	4770      	bx	lr
   1544a:	bf00      	nop
   1544c:	40007000 	.word	0x40007000

00015450 <set_oversampling>:
static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   15450:	2901      	cmp	r1, #1
   15452:	d901      	bls.n	15458 <set_oversampling+0x8>
   15454:	7c43      	ldrb	r3, [r0, #17]
   15456:	b973      	cbnz	r3, 15476 <set_oversampling+0x26>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
   15458:	7c43      	ldrb	r3, [r0, #17]
   1545a:	2b08      	cmp	r3, #8
   1545c:	d80e      	bhi.n	1547c <set_oversampling+0x2c>
   1545e:	e8df f003 	tbb	[pc, r3]
   15462:	0505      	.short	0x0505
   15464:	05050505 	.word	0x05050505
   15468:	0505      	.short	0x0505
   1546a:	05          	.byte	0x05
   1546b:	00          	.byte	0x00
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
   1546c:	4a05      	ldr	r2, [pc, #20]	; (15484 <set_oversampling+0x34>)
   1546e:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
			    sequence->oversampling);
		return -EINVAL;
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
   15472:	2000      	movs	r0, #0
   15474:	4770      	bx	lr
		return -EINVAL;
   15476:	f06f 0015 	mvn.w	r0, #21
   1547a:	4770      	bx	lr
	switch (sequence->oversampling) {
   1547c:	f06f 0015 	mvn.w	r0, #21
}
   15480:	4770      	bx	lr
   15482:	bf00      	nop
   15484:	40007000 	.word	0x40007000

00015488 <start_read>:
	return 0;
}

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
   15488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int error;
	uint32_t selected_channels = sequence->channels;
   1548a:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   1548c:	1e73      	subs	r3, r6, #1
   1548e:	2bfe      	cmp	r3, #254	; 0xfe
   15490:	d855      	bhi.n	1553e <start_read+0xb6>
   15492:	460d      	mov	r5, r1
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
   15494:	2300      	movs	r3, #0
	active_channels = 0U;
   15496:	461c      	mov	r4, r3
   15498:	e009      	b.n	154ae <start_read+0x26>
    p_reg->CH[channel].PSELP = pselp;
   1549a:	f103 0251 	add.w	r2, r3, #81	; 0x51
   1549e:	0112      	lsls	r2, r2, #4
   154a0:	492a      	ldr	r1, [pc, #168]	; (1554c <start_read+0xc4>)
   154a2:	2000      	movs	r0, #0
   154a4:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
   154a6:	3301      	adds	r3, #1
   154a8:	b2db      	uxtb	r3, r3
   154aa:	2b07      	cmp	r3, #7
   154ac:	d822      	bhi.n	154f4 <start_read+0x6c>
		if (selected_channels & BIT(channel_id)) {
   154ae:	461a      	mov	r2, r3
   154b0:	fa26 f103 	lsr.w	r1, r6, r3
   154b4:	f011 0f01 	tst.w	r1, #1
   154b8:	d0ef      	beq.n	1549a <start_read+0x12>
			if (m_data.positive_inputs[channel_id] == 0U) {
   154ba:	4925      	ldr	r1, [pc, #148]	; (15550 <start_read+0xc8>)
   154bc:	4419      	add	r1, r3
   154be:	f891 70a8 	ldrb.w	r7, [r1, #168]	; 0xa8
   154c2:	2f00      	cmp	r7, #0
   154c4:	d03e      	beq.n	15544 <start_read+0xbc>
				(sequence->oversampling != 0U ?
   154c6:	7c69      	ldrb	r1, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   154c8:	3900      	subs	r1, #0
   154ca:	bf18      	it	ne
   154cc:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   154ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 1554c <start_read+0xc4>
   154d2:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
   154d6:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
   154da:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   154de:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   154e2:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   154e6:	3251      	adds	r2, #81	; 0x51
   154e8:	0112      	lsls	r2, r2, #4
   154ea:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
   154ee:	3401      	adds	r4, #1
   154f0:	b2e4      	uxtb	r4, r4
   154f2:	e7d8      	b.n	154a6 <start_read+0x1e>

	error = set_resolution(sequence);
   154f4:	4628      	mov	r0, r5
   154f6:	f7ff ff8f 	bl	15418 <set_resolution>
	if (error) {
   154fa:	4603      	mov	r3, r0
   154fc:	b108      	cbz	r0, 15502 <start_read+0x7a>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   154fe:	4618      	mov	r0, r3
   15500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
   15502:	4621      	mov	r1, r4
   15504:	4628      	mov	r0, r5
   15506:	f7ff ffa3 	bl	15450 <set_oversampling>
	if (error) {
   1550a:	4603      	mov	r3, r0
   1550c:	2800      	cmp	r0, #0
   1550e:	d1f6      	bne.n	154fe <start_read+0x76>
	error = check_buffer_size(sequence, active_channels);
   15510:	4621      	mov	r1, r4
   15512:	4628      	mov	r0, r5
   15514:	f00d f851 	bl	225ba <check_buffer_size>
	if (error) {
   15518:	4603      	mov	r3, r0
   1551a:	2800      	cmp	r0, #0
   1551c:	d1ef      	bne.n	154fe <start_read+0x76>
			      (nrf_saadc_value_t *)sequence->buffer,
   1551e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   15520:	4b0a      	ldr	r3, [pc, #40]	; (1554c <start_read+0xc4>)
   15522:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
   15526:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
	adc_context_start_read(&m_data.ctx, sequence);
   1552a:	4c09      	ldr	r4, [pc, #36]	; (15550 <start_read+0xc8>)
   1552c:	4629      	mov	r1, r5
   1552e:	4620      	mov	r0, r4
   15530:	f00d f8a3 	bl	2267a <adc_context_start_read>
	error = adc_context_wait_for_completion(&m_data.ctx);
   15534:	4620      	mov	r0, r4
   15536:	f00d f876 	bl	22626 <adc_context_wait_for_completion>
   1553a:	4603      	mov	r3, r0
	return error;
   1553c:	e7df      	b.n	154fe <start_read+0x76>
		return -EINVAL;
   1553e:	f06f 0315 	mvn.w	r3, #21
   15542:	e7dc      	b.n	154fe <start_read+0x76>
				return -EINVAL;
   15544:	f06f 0315 	mvn.w	r3, #21
   15548:	e7d9      	b.n	154fe <start_read+0x76>
   1554a:	bf00      	nop
   1554c:	40007000 	.word	0x40007000
   15550:	20000378 	.word	0x20000378

00015554 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   15554:	b570      	push	{r4, r5, r6, lr}
   15556:	4604      	mov	r4, r0
   15558:	460d      	mov	r5, r1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
   1555a:	4e08      	ldr	r6, [pc, #32]	; (1557c <adc_nrfx_read_async+0x28>)
   1555c:	2101      	movs	r1, #1
   1555e:	4630      	mov	r0, r6
   15560:	f00d f852 	bl	22608 <adc_context_lock>
	error = start_read(dev, sequence);
   15564:	4629      	mov	r1, r5
   15566:	4620      	mov	r0, r4
   15568:	f7ff ff8e 	bl	15488 <start_read>
   1556c:	4604      	mov	r4, r0
	adc_context_release(&m_data.ctx, error);
   1556e:	4601      	mov	r1, r0
   15570:	4630      	mov	r0, r6
   15572:	f00d f8b1 	bl	226d8 <adc_context_release>

	return error;
}
   15576:	4620      	mov	r0, r4
   15578:	bd70      	pop	{r4, r5, r6, pc}
   1557a:	bf00      	nop
   1557c:	20000378 	.word	0x20000378

00015580 <adc_nrfx_read>:
{
   15580:	b570      	push	{r4, r5, r6, lr}
   15582:	4604      	mov	r4, r0
   15584:	460d      	mov	r5, r1
	adc_context_lock(&m_data.ctx, false, NULL);
   15586:	4e08      	ldr	r6, [pc, #32]	; (155a8 <adc_nrfx_read+0x28>)
   15588:	2200      	movs	r2, #0
   1558a:	4611      	mov	r1, r2
   1558c:	4630      	mov	r0, r6
   1558e:	f00d f83b 	bl	22608 <adc_context_lock>
	error = start_read(dev, sequence);
   15592:	4629      	mov	r1, r5
   15594:	4620      	mov	r0, r4
   15596:	f7ff ff77 	bl	15488 <start_read>
   1559a:	4604      	mov	r4, r0
	adc_context_release(&m_data.ctx, error);
   1559c:	4601      	mov	r1, r0
   1559e:	4630      	mov	r0, r6
   155a0:	f00d f89a 	bl	226d8 <adc_context_release>
}
   155a4:	4620      	mov	r0, r4
   155a6:	bd70      	pop	{r4, r5, r6, pc}
   155a8:	20000378 	.word	0x20000378

000155ac <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   155ac:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   155ae:	4b0d      	ldr	r3, [pc, #52]	; (155e4 <init_saadc+0x38>)
   155b0:	2400      	movs	r4, #0
   155b2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   155b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   155ba:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   155be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   155c2:	2212      	movs	r2, #18
   155c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   155c8:	2007      	movs	r0, #7
   155ca:	f00c fb00 	bl	21bce <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   155ce:	4622      	mov	r2, r4
   155d0:	2101      	movs	r1, #1
   155d2:	2007      	movs	r0, #7
   155d4:	f00c fb05 	bl	21be2 <z_arm_irq_priority_set>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);
   155d8:	4803      	ldr	r0, [pc, #12]	; (155e8 <init_saadc+0x3c>)
   155da:	f00d f886 	bl	226ea <adc_context_unlock_unconditionally>

	return 0;
}
   155de:	4620      	mov	r0, r4
   155e0:	bd10      	pop	{r4, pc}
   155e2:	bf00      	nop
   155e4:	40007000 	.word	0x40007000
   155e8:	20000378 	.word	0x20000378

000155ec <saadc_irq_handler>:
{
   155ec:	b508      	push	{r3, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   155ee:	4b11      	ldr	r3, [pc, #68]	; (15634 <saadc_irq_handler+0x48>)
   155f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   155f4:	b973      	cbnz	r3, 15614 <saadc_irq_handler+0x28>
   155f6:	4b0f      	ldr	r3, [pc, #60]	; (15634 <saadc_irq_handler+0x48>)
   155f8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   155fc:	b14b      	cbz	r3, 15612 <saadc_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   155fe:	4b0d      	ldr	r3, [pc, #52]	; (15634 <saadc_irq_handler+0x48>)
   15600:	2200      	movs	r2, #0
   15602:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   15606:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1560a:	2201      	movs	r2, #1
   1560c:	609a      	str	r2, [r3, #8]
   1560e:	601a      	str	r2, [r3, #0]
   15610:	605a      	str	r2, [r3, #4]
}
   15612:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15614:	4b07      	ldr	r3, [pc, #28]	; (15634 <saadc_irq_handler+0x48>)
   15616:	2200      	movs	r2, #0
   15618:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1561c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15620:	2101      	movs	r1, #1
   15622:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   15624:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		adc_context_on_sampling_done(&m_data.ctx, dev);
   15628:	4601      	mov	r1, r0
   1562a:	4803      	ldr	r0, [pc, #12]	; (15638 <saadc_irq_handler+0x4c>)
   1562c:	f00d f87a 	bl	22724 <adc_context_on_sampling_done>
   15630:	e7ef      	b.n	15612 <saadc_irq_handler+0x26>
   15632:	bf00      	nop
   15634:	40007000 	.word	0x40007000
   15638:	20000378 	.word	0x20000378

0001563c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1563c:	4800      	ldr	r0, [pc, #0]	; (15640 <get_hf_flags+0x4>)
   1563e:	4770      	bx	lr
   15640:	20003784 	.word	0x20003784

00015644 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   15644:	4b03      	ldr	r3, [pc, #12]	; (15654 <get_subsys+0x10>)
   15646:	1ac0      	subs	r0, r0, r3
   15648:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1564a:	4b03      	ldr	r3, [pc, #12]	; (15658 <get_subsys+0x14>)
   1564c:	fb03 f000 	mul.w	r0, r3, r0
   15650:	4770      	bx	lr
   15652:	bf00      	nop
   15654:	20003744 	.word	0x20003744
   15658:	b6db6db7 	.word	0xb6db6db7

0001565c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1565c:	b538      	push	{r3, r4, r5, lr}
   1565e:	4605      	mov	r5, r0
   15660:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   15662:	f7ff ffef 	bl	15644 <get_subsys>
   15666:	4601      	mov	r1, r0
   15668:	2240      	movs	r2, #64	; 0x40
   1566a:	4803      	ldr	r0, [pc, #12]	; (15678 <onoff_stop+0x1c>)
   1566c:	f00d f940 	bl	228f0 <stop>
   15670:	4601      	mov	r1, r0
	notify(mgr, res);
   15672:	4628      	mov	r0, r5
   15674:	47a0      	blx	r4
}
   15676:	bd38      	pop	{r3, r4, r5, pc}
   15678:	00025bcc 	.word	0x00025bcc

0001567c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1567c:	b530      	push	{r4, r5, lr}
   1567e:	b083      	sub	sp, #12
   15680:	4605      	mov	r5, r0
   15682:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15684:	f7ff ffde 	bl	15644 <get_subsys>
   15688:	4601      	mov	r1, r0
   1568a:	2340      	movs	r3, #64	; 0x40
   1568c:	9300      	str	r3, [sp, #0]
   1568e:	4623      	mov	r3, r4
   15690:	4a05      	ldr	r2, [pc, #20]	; (156a8 <onoff_start+0x2c>)
   15692:	4806      	ldr	r0, [pc, #24]	; (156ac <onoff_start+0x30>)
   15694:	f00d f946 	bl	22924 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   15698:	1e01      	subs	r1, r0, #0
   1569a:	db01      	blt.n	156a0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1569c:	b003      	add	sp, #12
   1569e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   156a0:	4628      	mov	r0, r5
   156a2:	47a0      	blx	r4
}
   156a4:	e7fa      	b.n	1569c <onoff_start+0x20>
   156a6:	bf00      	nop
   156a8:	0002296d 	.word	0x0002296d
   156ac:	00025bcc 	.word	0x00025bcc

000156b0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   156b0:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   156b2:	b110      	cbz	r0, 156ba <clock_event_handler+0xa>
   156b4:	2801      	cmp	r0, #1
   156b6:	d00d      	beq.n	156d4 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   156b8:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   156ba:	2100      	movs	r1, #0
   156bc:	4808      	ldr	r0, [pc, #32]	; (156e0 <clock_event_handler+0x30>)
   156be:	f00d f8a2 	bl	22806 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   156c2:	6883      	ldr	r3, [r0, #8]
   156c4:	f013 0f07 	tst.w	r3, #7
   156c8:	d1f6      	bne.n	156b8 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   156ca:	2100      	movs	r1, #0
   156cc:	4804      	ldr	r0, [pc, #16]	; (156e0 <clock_event_handler+0x30>)
   156ce:	f00d f8fd 	bl	228cc <clkstarted_handle>
   156d2:	e7f1      	b.n	156b8 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   156d4:	2101      	movs	r1, #1
   156d6:	4802      	ldr	r0, [pc, #8]	; (156e0 <clock_event_handler+0x30>)
   156d8:	f00d f8f8 	bl	228cc <clkstarted_handle>
}
   156dc:	e7ec      	b.n	156b8 <clock_event_handler+0x8>
   156de:	bf00      	nop
   156e0:	00025bcc 	.word	0x00025bcc

000156e4 <generic_hfclk_start>:
{
   156e4:	b510      	push	{r4, lr}
   156e6:	b082      	sub	sp, #8
	__asm__ volatile(
   156e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   156ec:	f3ef 8411 	mrs	r4, BASEPRI
   156f0:	f383 8812 	msr	BASEPRI_MAX, r3
   156f4:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   156f8:	4a14      	ldr	r2, [pc, #80]	; (1574c <generic_hfclk_start+0x68>)
   156fa:	6813      	ldr	r3, [r2, #0]
   156fc:	f043 0102 	orr.w	r1, r3, #2
   15700:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   15702:	f013 0f01 	tst.w	r3, #1
   15706:	d109      	bne.n	1571c <generic_hfclk_start+0x38>
	bool already_started = false;
   15708:	2300      	movs	r3, #0
	__asm__ volatile(
   1570a:	f384 8811 	msr	BASEPRI, r4
   1570e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   15712:	b9b3      	cbnz	r3, 15742 <generic_hfclk_start+0x5e>
	hfclk_start();
   15714:	f00d f932 	bl	2297c <hfclk_start>
}
   15718:	b002      	add	sp, #8
   1571a:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1571c:	f10d 0207 	add.w	r2, sp, #7
   15720:	2101      	movs	r1, #1
   15722:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   15726:	f00d f84b 	bl	227c0 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1572a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1572e:	2b01      	cmp	r3, #1
   15730:	d001      	beq.n	15736 <generic_hfclk_start+0x52>
	bool already_started = false;
   15732:	2300      	movs	r3, #0
   15734:	e7e9      	b.n	1570a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   15736:	f7ff ff81 	bl	1563c <get_hf_flags>
   1573a:	f00d f8b4 	bl	228a6 <set_on_state>
			already_started = true;
   1573e:	2301      	movs	r3, #1
   15740:	e7e3      	b.n	1570a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   15742:	2100      	movs	r1, #0
   15744:	4802      	ldr	r0, [pc, #8]	; (15750 <generic_hfclk_start+0x6c>)
   15746:	f00d f8c1 	bl	228cc <clkstarted_handle>
		return;
   1574a:	e7e5      	b.n	15718 <generic_hfclk_start+0x34>
   1574c:	20003794 	.word	0x20003794
   15750:	00025bcc 	.word	0x00025bcc

00015754 <generic_hfclk_stop>:
{
   15754:	b510      	push	{r4, lr}
	__asm__ volatile(
   15756:	f04f 0340 	mov.w	r3, #64	; 0x40
   1575a:	f3ef 8411 	mrs	r4, BASEPRI
   1575e:	f383 8812 	msr	BASEPRI_MAX, r3
   15762:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   15766:	4a08      	ldr	r2, [pc, #32]	; (15788 <generic_hfclk_stop+0x34>)
   15768:	6813      	ldr	r3, [r2, #0]
   1576a:	f023 0102 	bic.w	r1, r3, #2
   1576e:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   15770:	f013 0f01 	tst.w	r3, #1
   15774:	d004      	beq.n	15780 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   15776:	f384 8811 	msr	BASEPRI, r4
   1577a:	f3bf 8f6f 	isb	sy
}
   1577e:	bd10      	pop	{r4, pc}
		hfclk_stop();
   15780:	f00d f906 	bl	22990 <hfclk_stop>
   15784:	e7f7      	b.n	15776 <generic_hfclk_stop+0x22>
   15786:	bf00      	nop
   15788:	20003794 	.word	0x20003794

0001578c <lfclk_spinwait>:
{
   1578c:	b570      	push	{r4, r5, r6, lr}
   1578e:	b082      	sub	sp, #8
   15790:	4606      	mov	r6, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15792:	f00e fe4e 	bl	24432 <k_is_in_isr>
   15796:	b918      	cbnz	r0, 157a0 <lfclk_spinwait+0x14>
   15798:	4604      	mov	r4, r0
	return !z_sys_post_kernel;
   1579a:	4b1b      	ldr	r3, [pc, #108]	; (15808 <lfclk_spinwait+0x7c>)
   1579c:	781b      	ldrb	r3, [r3, #0]
   1579e:	b97b      	cbnz	r3, 157c0 <lfclk_spinwait+0x34>
	__asm__ volatile(
   157a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   157a4:	f3ef 8511 	mrs	r5, BASEPRI
   157a8:	f383 8812 	msr	BASEPRI_MAX, r3
   157ac:	f3bf 8f6f 	isb	sy
   157b0:	2401      	movs	r4, #1
	if (!isr_mode) {
   157b2:	b95c      	cbnz	r4, 157cc <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   157b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   157b8:	2202      	movs	r2, #2
   157ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   157be:	e005      	b.n	157cc <lfclk_spinwait+0x40>
	int key = isr_mode ? irq_lock() : 0;
   157c0:	2500      	movs	r5, #0
   157c2:	e7f6      	b.n	157b2 <lfclk_spinwait+0x26>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   157c4:	b1ac      	cbz	r4, 157f2 <lfclk_spinwait+0x66>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   157c6:	4628      	mov	r0, r5
   157c8:	f7fd fb64 	bl	12e94 <arch_cpu_atomic_idle>
   157cc:	aa01      	add	r2, sp, #4
   157ce:	2100      	movs	r1, #0
   157d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   157d4:	f00c fff4 	bl	227c0 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   157d8:	2800      	cmp	r0, #0
   157da:	d0f3      	beq.n	157c4 <lfclk_spinwait+0x38>
		 && ((type == target_type)
   157dc:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   157de:	b10b      	cbz	r3, 157e4 <lfclk_spinwait+0x58>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   157e0:	2e01      	cmp	r6, #1
   157e2:	d1ef      	bne.n	157c4 <lfclk_spinwait+0x38>
	if (isr_mode) {
   157e4:	b14c      	cbz	r4, 157fa <lfclk_spinwait+0x6e>
	__asm__ volatile(
   157e6:	f385 8811 	msr	BASEPRI, r5
   157ea:	f3bf 8f6f 	isb	sy
}
   157ee:	b002      	add	sp, #8
   157f0:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   157f2:	2001      	movs	r0, #1
   157f4:	f00d f8d6 	bl	229a4 <k_msleep>
   157f8:	e7e8      	b.n	157cc <lfclk_spinwait+0x40>
    p_reg->INTENSET = mask;
   157fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   157fe:	2202      	movs	r2, #2
   15800:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   15804:	e7f3      	b.n	157ee <lfclk_spinwait+0x62>
   15806:	bf00      	nop
   15808:	20004bb6 	.word	0x20004bb6

0001580c <api_blocking_start>:
{
   1580c:	b500      	push	{lr}
   1580e:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15810:	f8cd d000 	str.w	sp, [sp]
   15814:	f8cd d004 	str.w	sp, [sp, #4]
   15818:	2300      	movs	r3, #0
   1581a:	9302      	str	r3, [sp, #8]
   1581c:	2301      	movs	r3, #1
   1581e:	9303      	str	r3, [sp, #12]
   15820:	ab04      	add	r3, sp, #16
   15822:	9304      	str	r3, [sp, #16]
   15824:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15826:	466b      	mov	r3, sp
   15828:	4a06      	ldr	r2, [pc, #24]	; (15844 <api_blocking_start+0x38>)
   1582a:	f00d f897 	bl	2295c <api_start>
	if (err < 0) {
   1582e:	2800      	cmp	r0, #0
   15830:	db05      	blt.n	1583e <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   15832:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   15836:	2300      	movs	r3, #0
   15838:	4668      	mov	r0, sp
   1583a:	f003 ffa5 	bl	19788 <z_impl_k_sem_take>
}
   1583e:	b007      	add	sp, #28
   15840:	f85d fb04 	ldr.w	pc, [sp], #4
   15844:	000229b3 	.word	0x000229b3

00015848 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   15848:	b570      	push	{r4, r5, r6, lr}
   1584a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1584c:	2200      	movs	r2, #0
   1584e:	2101      	movs	r1, #1
   15850:	4610      	mov	r0, r2
   15852:	f00c f9c6 	bl	21be2 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   15856:	4811      	ldr	r0, [pc, #68]	; (1589c <clk_init+0x54>)
   15858:	f001 faf2 	bl	16e40 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1585c:	4b10      	ldr	r3, [pc, #64]	; (158a0 <clk_init+0x58>)
   1585e:	4298      	cmp	r0, r3
   15860:	d119      	bne.n	15896 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   15862:	f00e f9dd 	bl	23c20 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   15866:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   15868:	2c01      	cmp	r4, #1
   1586a:	d812      	bhi.n	15892 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1586c:	4621      	mov	r1, r4
   1586e:	4630      	mov	r0, r6
   15870:	f00c ffc9 	bl	22806 <get_sub_data>
   15874:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   15876:	4621      	mov	r1, r4
   15878:	4630      	mov	r0, r6
   1587a:	f00c ffcf 	bl	2281c <get_onoff_manager>
   1587e:	4909      	ldr	r1, [pc, #36]	; (158a4 <clk_init+0x5c>)
   15880:	f00a fd57 	bl	20332 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   15884:	2800      	cmp	r0, #0
   15886:	db05      	blt.n	15894 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15888:	2301      	movs	r3, #1
   1588a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1588c:	441c      	add	r4, r3
   1588e:	b2e4      	uxtb	r4, r4
   15890:	e7ea      	b.n	15868 <clk_init+0x20>
	}

	return 0;
   15892:	2000      	movs	r0, #0
}
   15894:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   15896:	f06f 0004 	mvn.w	r0, #4
   1589a:	e7fb      	b.n	15894 <clk_init+0x4c>
   1589c:	000156b1 	.word	0x000156b1
   158a0:	0bad0000 	.word	0x0bad0000
   158a4:	000267d0 	.word	0x000267d0

000158a8 <z_nrf_clock_control_get_onoff>:
{
   158a8:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
   158aa:	b2c1      	uxtb	r1, r0
   158ac:	4801      	ldr	r0, [pc, #4]	; (158b4 <z_nrf_clock_control_get_onoff+0xc>)
   158ae:	f00c ffb5 	bl	2281c <get_onoff_manager>
}
   158b2:	bd08      	pop	{r3, pc}
   158b4:	00025bcc 	.word	0x00025bcc

000158b8 <z_nrf_clock_control_lf_on>:
{
   158b8:	b510      	push	{r4, lr}
   158ba:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   158bc:	4b10      	ldr	r3, [pc, #64]	; (15900 <z_nrf_clock_control_lf_on+0x48>)
   158be:	2101      	movs	r1, #1
   158c0:	f3bf 8f5b 	dmb	ish
   158c4:	e853 2f00 	ldrex	r2, [r3]
   158c8:	e843 1000 	strex	r0, r1, [r3]
   158cc:	2800      	cmp	r0, #0
   158ce:	d1f9      	bne.n	158c4 <z_nrf_clock_control_lf_on+0xc>
   158d0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   158d4:	b11a      	cbz	r2, 158de <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   158d6:	1e63      	subs	r3, r4, #1
   158d8:	2b01      	cmp	r3, #1
   158da:	d90d      	bls.n	158f8 <z_nrf_clock_control_lf_on+0x40>
}
   158dc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   158de:	4809      	ldr	r0, [pc, #36]	; (15904 <z_nrf_clock_control_lf_on+0x4c>)
   158e0:	f00c ff9c 	bl	2281c <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   158e4:	4908      	ldr	r1, [pc, #32]	; (15908 <z_nrf_clock_control_lf_on+0x50>)
   158e6:	2300      	movs	r3, #0
   158e8:	604b      	str	r3, [r1, #4]
   158ea:	608b      	str	r3, [r1, #8]
   158ec:	60cb      	str	r3, [r1, #12]
   158ee:	2301      	movs	r3, #1
   158f0:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   158f2:	f00a fd3b 	bl	2036c <onoff_request>
   158f6:	e7ee      	b.n	158d6 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   158f8:	4620      	mov	r0, r4
   158fa:	f7ff ff47 	bl	1578c <lfclk_spinwait>
		break;
   158fe:	e7ed      	b.n	158dc <z_nrf_clock_control_lf_on+0x24>
   15900:	20003740 	.word	0x20003740
   15904:	00025bcc 	.word	0x00025bcc
   15908:	20003730 	.word	0x20003730

0001590c <random_byte_get>:
	__asm__ volatile(
   1590c:	f04f 0240 	mov.w	r2, #64	; 0x40
   15910:	f3ef 8311 	mrs	r3, BASEPRI
   15914:	f382 8812 	msr	BASEPRI_MAX, r2
   15918:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1591c:	4a0a      	ldr	r2, [pc, #40]	; (15948 <random_byte_get+0x3c>)
   1591e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   15922:	b16a      	cbz	r2, 15940 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   15924:	4a08      	ldr	r2, [pc, #32]	; (15948 <random_byte_get+0x3c>)
   15926:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1592a:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1592c:	2100      	movs	r1, #0
   1592e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   15932:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	__asm__ volatile(
   15936:	f383 8811 	msr	BASEPRI, r3
   1593a:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1593e:	4770      	bx	lr
	int retval = -EAGAIN;
   15940:	f06f 000a 	mvn.w	r0, #10
   15944:	e7f7      	b.n	15936 <random_byte_get+0x2a>
   15946:	bf00      	nop
   15948:	4000d000 	.word	0x4000d000

0001594c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1594c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1594e:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   15950:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   15952:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   15954:	f04f 0340 	mov.w	r3, #64	; 0x40
   15958:	f3ef 8011 	mrs	r0, BASEPRI
   1595c:	f383 8812 	msr	BASEPRI_MAX, r3
   15960:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   15964:	f89e 6000 	ldrb.w	r6, [lr]
   15968:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1596a:	f89e 7001 	ldrb.w	r7, [lr, #1]

	available = (last - first) & mask;
   1596e:	1bad      	subs	r5, r5, r6
   15970:	4025      	ands	r5, r4
	if (available < len) {
   15972:	42aa      	cmp	r2, r5
   15974:	d900      	bls.n	15978 <rng_pool_get+0x2c>
		len = available;
   15976:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   15978:	eb06 0c02 	add.w	ip, r6, r2
   1597c:	ea0c 0c04 	and.w	ip, ip, r4
   15980:	f88e c000 	strb.w	ip, [lr]
	__asm__ volatile(
   15984:	f380 8811 	msr	BASEPRI, r0
   15988:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1598c:	4608      	mov	r0, r1
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1598e:	e007      	b.n	159a0 <rng_pool_get+0x54>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   15990:	eb0e 0203 	add.w	r2, lr, r3
   15994:	7952      	ldrb	r2, [r2, #5]
   15996:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   1599a:	3301      	adds	r3, #1
   1599c:	4023      	ands	r3, r4
	while (likely(len--)) {
   1599e:	4662      	mov	r2, ip
   159a0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   159a4:	fa1f fc8c 	uxth.w	ip, ip
   159a8:	2a00      	cmp	r2, #0
   159aa:	d1f1      	bne.n	15990 <rng_pool_get+0x44>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   159ac:	42be      	cmp	r6, r7
   159ae:	d10f      	bne.n	159d0 <rng_pool_get+0x84>
	__asm__ volatile(
   159b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   159b4:	f3ef 8311 	mrs	r3, BASEPRI
   159b8:	f382 8812 	msr	BASEPRI_MAX, r2
   159bc:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   159c0:	f89e 2000 	ldrb.w	r2, [lr]
   159c4:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   159c8:	f383 8811 	msr	BASEPRI, r3
   159cc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   159d0:	1a40      	subs	r0, r0, r1
   159d2:	b280      	uxth	r0, r0
	available = available - len;
   159d4:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   159d6:	f89e 3004 	ldrb.w	r3, [lr, #4]
   159da:	42ab      	cmp	r3, r5
   159dc:	d302      	bcc.n	159e4 <rng_pool_get+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   159de:	4b02      	ldr	r3, [pc, #8]	; (159e8 <rng_pool_get+0x9c>)
   159e0:	2201      	movs	r2, #1
   159e2:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   159e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159e6:	bf00      	nop
   159e8:	4000d000 	.word	0x4000d000

000159ec <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   159ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   159ee:	460d      	mov	r5, r1
   159f0:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   159f2:	f013 0f01 	tst.w	r3, #1
   159f6:	d103      	bne.n	15a00 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   159f8:	4826      	ldr	r0, [pc, #152]	; (15a94 <entropy_nrf5_get_entropy_isr+0xa8>)
   159fa:	f7ff ffa7 	bl	1594c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   159fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   15a00:	b90a      	cbnz	r2, 15a06 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   15a02:	4620      	mov	r0, r4
   15a04:	e7fb      	b.n	159fe <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   15a06:	f04f 0340 	mov.w	r3, #64	; 0x40
   15a0a:	f3ef 8611 	mrs	r6, BASEPRI
   15a0e:	f383 8812 	msr	BASEPRI_MAX, r3
   15a12:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   15a16:	200d      	movs	r0, #13
   15a18:	f7fd fa7c 	bl	12f14 <arch_irq_is_enabled>
   15a1c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   15a1e:	200d      	movs	r0, #13
   15a20:	f00c f8da 	bl	21bd8 <arch_irq_disable>
	__asm__ volatile(
   15a24:	f386 8811 	msr	BASEPRI, r6
   15a28:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15a2c:	4b1a      	ldr	r3, [pc, #104]	; (15a98 <entropy_nrf5_get_entropy_isr+0xac>)
   15a2e:	2200      	movs	r2, #0
   15a30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15a34:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15a38:	2201      	movs	r2, #1
   15a3a:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a3c:	4b17      	ldr	r3, [pc, #92]	; (15a9c <entropy_nrf5_get_entropy_isr+0xb0>)
   15a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15a42:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15a46:	4626      	mov	r6, r4
   15a48:	e00b      	b.n	15a62 <entropy_nrf5_get_entropy_isr+0x76>
	__asm__ volatile(
   15a4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15a4e:	f3ef 8011 	mrs	r0, BASEPRI
   15a52:	f383 8812 	msr	BASEPRI_MAX, r3
   15a56:	f3bf 8f6f 	isb	sy
   15a5a:	f7fd fa1b 	bl	12e94 <arch_cpu_atomic_idle>
}
   15a5e:	e000      	b.n	15a62 <entropy_nrf5_get_entropy_isr+0x76>
		} while (len);
   15a60:	b18e      	cbz	r6, 15a86 <entropy_nrf5_get_entropy_isr+0x9a>
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   15a62:	4b0d      	ldr	r3, [pc, #52]	; (15a98 <entropy_nrf5_get_entropy_isr+0xac>)
   15a64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   15a68:	2b00      	cmp	r3, #0
   15a6a:	d0ee      	beq.n	15a4a <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   15a6c:	f7ff ff4e 	bl	1590c <random_byte_get>
   15a70:	4b0a      	ldr	r3, [pc, #40]	; (15a9c <entropy_nrf5_get_entropy_isr+0xb0>)
   15a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15a76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   15a7a:	2800      	cmp	r0, #0
   15a7c:	dbf0      	blt.n	15a60 <entropy_nrf5_get_entropy_isr+0x74>
			buf[--len] = byte;
   15a7e:	3e01      	subs	r6, #1
   15a80:	b2b6      	uxth	r6, r6
   15a82:	55a8      	strb	r0, [r5, r6]
   15a84:	e7ec      	b.n	15a60 <entropy_nrf5_get_entropy_isr+0x74>
		if (irq_enabled) {
   15a86:	2f00      	cmp	r7, #0
   15a88:	d0bb      	beq.n	15a02 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   15a8a:	200d      	movs	r0, #13
   15a8c:	f00c f89f 	bl	21bce <arch_irq_enable>
   15a90:	e7b7      	b.n	15a02 <entropy_nrf5_get_entropy_isr+0x16>
   15a92:	bf00      	nop
   15a94:	200037c8 	.word	0x200037c8
   15a98:	4000d000 	.word	0x4000d000
   15a9c:	e000e100 	.word	0xe000e100

00015aa0 <isr>:
{
   15aa0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   15aa2:	f7ff ff33 	bl	1590c <random_byte_get>
	if (byte < 0) {
   15aa6:	2800      	cmp	r0, #0
   15aa8:	db06      	blt.n	15ab8 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   15aaa:	b2c4      	uxtb	r4, r0
   15aac:	4621      	mov	r1, r4
   15aae:	480a      	ldr	r0, [pc, #40]	; (15ad8 <isr+0x38>)
   15ab0:	f00c ff84 	bl	229bc <rng_pool_put>
	if (ret < 0) {
   15ab4:	2800      	cmp	r0, #0
   15ab6:	db00      	blt.n	15aba <isr+0x1a>
}
   15ab8:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   15aba:	4621      	mov	r1, r4
   15abc:	4807      	ldr	r0, [pc, #28]	; (15adc <isr+0x3c>)
   15abe:	f00c ff7d 	bl	229bc <rng_pool_put>
		if (ret < 0) {
   15ac2:	2800      	cmp	r0, #0
   15ac4:	db03      	blt.n	15ace <isr+0x2e>
	z_impl_k_sem_give(sem);
   15ac6:	4806      	ldr	r0, [pc, #24]	; (15ae0 <isr+0x40>)
   15ac8:	f003 fe36 	bl	19738 <z_impl_k_sem_give>
}
   15acc:	e7f4      	b.n	15ab8 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15ace:	4b05      	ldr	r3, [pc, #20]	; (15ae4 <isr+0x44>)
   15ad0:	2201      	movs	r2, #1
   15ad2:	605a      	str	r2, [r3, #4]
}
   15ad4:	e7f7      	b.n	15ac6 <isr+0x26>
   15ad6:	bf00      	nop
   15ad8:	200037c8 	.word	0x200037c8
   15adc:	200037dd 	.word	0x200037dd
   15ae0:	200037b0 	.word	0x200037b0
   15ae4:	4000d000 	.word	0x4000d000

00015ae8 <entropy_nrf5_get_entropy>:
{
   15ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15aea:	460f      	mov	r7, r1
   15aec:	4614      	mov	r4, r2
	while (len) {
   15aee:	e007      	b.n	15b00 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   15af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15af8:	f106 0018 	add.w	r0, r6, #24
   15afc:	f003 fe44 	bl	19788 <z_impl_k_sem_take>
   15b00:	b1bc      	cbz	r4, 15b32 <entropy_nrf5_get_entropy+0x4a>
   15b02:	4e0d      	ldr	r6, [pc, #52]	; (15b38 <entropy_nrf5_get_entropy+0x50>)
   15b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b0c:	4630      	mov	r0, r6
   15b0e:	f003 fe3b 	bl	19788 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   15b12:	4622      	mov	r2, r4
   15b14:	4639      	mov	r1, r7
   15b16:	f106 0045 	add.w	r0, r6, #69	; 0x45
   15b1a:	f7ff ff17 	bl	1594c <rng_pool_get>
   15b1e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   15b20:	4630      	mov	r0, r6
   15b22:	f003 fe09 	bl	19738 <z_impl_k_sem_give>
		if (bytes == 0U) {
   15b26:	2d00      	cmp	r5, #0
   15b28:	d0e2      	beq.n	15af0 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   15b2a:	1b64      	subs	r4, r4, r5
   15b2c:	b2a4      	uxth	r4, r4
		buf += bytes;
   15b2e:	442f      	add	r7, r5
   15b30:	e7e6      	b.n	15b00 <entropy_nrf5_get_entropy+0x18>
}
   15b32:	2000      	movs	r0, #0
   15b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b36:	bf00      	nop
   15b38:	20003798 	.word	0x20003798

00015b3c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   15b3c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   15b3e:	4c18      	ldr	r4, [pc, #96]	; (15ba0 <entropy_nrf5_init+0x64>)
   15b40:	2201      	movs	r2, #1
   15b42:	4611      	mov	r1, r2
   15b44:	4620      	mov	r0, r4
   15b46:	f00e fd79 	bl	2463c <z_impl_k_sem_init>
   15b4a:	2201      	movs	r2, #1
   15b4c:	2100      	movs	r1, #0
   15b4e:	f104 0018 	add.w	r0, r4, #24
   15b52:	f00e fd73 	bl	2463c <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   15b56:	2204      	movs	r2, #4
   15b58:	2108      	movs	r1, #8
   15b5a:	f104 0045 	add.w	r0, r4, #69	; 0x45
   15b5e:	f00c ff40 	bl	229e2 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   15b62:	220c      	movs	r2, #12
   15b64:	2110      	movs	r1, #16
   15b66:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15b6a:	f00c ff3a 	bl	229e2 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   15b6e:	4b0d      	ldr	r3, [pc, #52]	; (15ba4 <entropy_nrf5_init+0x68>)
   15b70:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   15b74:	f022 0201 	bic.w	r2, r2, #1
   15b78:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15b7c:	2400      	movs	r4, #0
   15b7e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   15b82:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15b86:	2101      	movs	r1, #1
   15b88:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15b8c:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   15b8e:	4622      	mov	r2, r4
   15b90:	200d      	movs	r0, #13
   15b92:	f00c f826 	bl	21be2 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   15b96:	200d      	movs	r0, #13
   15b98:	f00c f819 	bl	21bce <arch_irq_enable>

	return 0;
}
   15b9c:	4620      	mov	r0, r4
   15b9e:	bd10      	pop	{r4, pc}
   15ba0:	20003798 	.word	0x20003798
   15ba4:	4000d000 	.word	0x4000d000

00015ba8 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   15ba8:	4b03      	ldr	r3, [pc, #12]	; (15bb8 <nvmc_wait_ready+0x10>)
   15baa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   15bae:	f013 0f01 	tst.w	r3, #1
   15bb2:	d0f9      	beq.n	15ba8 <nvmc_wait_ready>
	}
}
   15bb4:	4770      	bx	lr
   15bb6:	bf00      	nop
   15bb8:	4001e000 	.word	0x4001e000

00015bbc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   15bbc:	4b02      	ldr	r3, [pc, #8]	; (15bc8 <flash_nrf_pages_layout+0xc>)
   15bbe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   15bc0:	2301      	movs	r3, #1
   15bc2:	6013      	str	r3, [r2, #0]
}
   15bc4:	4770      	bx	lr
   15bc6:	bf00      	nop
   15bc8:	200037ec 	.word	0x200037ec

00015bcc <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   15bcc:	4800      	ldr	r0, [pc, #0]	; (15bd0 <flash_nrf_get_parameters+0x4>)
   15bce:	4770      	bx	lr
   15bd0:	000268ac 	.word	0x000268ac

00015bd4 <suspend_pofwarn>:
 * Do not attempt to write or erase if EVENTS_POFWARN is already asserted.
 */
static bool pofcon_enabled;

static int suspend_pofwarn(void)
{
   15bd4:	b508      	push	{r3, lr}
	if (!nrf52_errata_242()) {
   15bd6:	f00c ff4e 	bl	22a76 <nrf52_errata_242>
   15bda:	b348      	cbz	r0, 15c30 <suspend_pofwarn+0x5c>
    uint32_t pofcon = p_reg->POFCON;
   15bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15be0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
   15be4:	f013 0201 	ands.w	r2, r3, #1
   15be8:	b2d2      	uxtb	r2, r2
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   15bea:	f3c3 0343 	ubfx	r3, r3, #1, #4
	bool enabled;
	nrf_power_pof_thr_t pof_thr;

	pof_thr = nrf_power_pofcon_get(NRF_POWER, &enabled);

	if (enabled) {
   15bee:	d021      	beq.n	15c34 <suspend_pofwarn+0x60>
    uint32_t pofcon = p_reg->POFCON;
   15bf0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   15bf4:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   15bf8:	f021 011f 	bic.w	r1, r1, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   15bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    pofcon |=
   15c00:	ea41 0343 	orr.w	r3, r1, r3, lsl #1
    p_reg->POFCON = pofcon;
   15c04:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c08:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);

		/* This check need to be reworked once POFWARN event will be
		 * served by zephyr.
		 */
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   15c0c:	b91b      	cbnz	r3, 15c16 <suspend_pofwarn+0x42>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
			return -ECANCELED;
		}

		pofcon_enabled = enabled;
   15c0e:	4b0a      	ldr	r3, [pc, #40]	; (15c38 <suspend_pofwarn+0x64>)
   15c10:	701a      	strb	r2, [r3, #0]
	}

	return 0;
   15c12:	2000      	movs	r0, #0
   15c14:	e00d      	b.n	15c32 <suspend_pofwarn+0x5e>
    uint32_t pofcon = p_reg->POFCON;
   15c16:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   15c1a:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   15c1e:	f04c 0c01 	orr.w	ip, ip, #1
    pofcon |=
   15c22:	ea43 030c 	orr.w	r3, r3, ip
    p_reg->POFCON = pofcon;
   15c26:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
			return -ECANCELED;
   15c2a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   15c2e:	e000      	b.n	15c32 <suspend_pofwarn+0x5e>
		return 0;
   15c30:	2000      	movs	r0, #0
}
   15c32:	bd08      	pop	{r3, pc}
	return 0;
   15c34:	2000      	movs	r0, #0
   15c36:	e7fc      	b.n	15c32 <suspend_pofwarn+0x5e>
   15c38:	20004bad 	.word	0x20004bad

00015c3c <restore_pofwarn>:

static void restore_pofwarn(void)
{
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
   15c3c:	4b0a      	ldr	r3, [pc, #40]	; (15c68 <restore_pofwarn+0x2c>)
   15c3e:	781b      	ldrb	r3, [r3, #0]
   15c40:	b18b      	cbz	r3, 15c66 <restore_pofwarn+0x2a>
    uint32_t pofcon = p_reg->POFCON;
   15c42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15c46:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   15c4a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   15c4e:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   15c52:	f002 021e 	and.w	r2, r2, #30
   15c56:	f042 0201 	orr.w	r2, r2, #1
    pofcon |=
   15c5a:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
   15c5c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   15c60:	4b01      	ldr	r3, [pc, #4]	; (15c68 <restore_pofwarn+0x2c>)
   15c62:	2200      	movs	r2, #0
   15c64:	701a      	strb	r2, [r3, #0]
	}
}
   15c66:	4770      	bx	lr
   15c68:	20004bad 	.word	0x20004bad

00015c6c <erase_synchronously>:
{
   15c6c:	b500      	push	{lr}
   15c6e:	b087      	sub	sp, #28
	struct flash_context context = {
   15c70:	ab02      	add	r3, sp, #8
   15c72:	2200      	movs	r2, #0
   15c74:	9202      	str	r2, [sp, #8]
   15c76:	9203      	str	r2, [sp, #12]
   15c78:	9204      	str	r2, [sp, #16]
   15c7a:	9205      	str	r2, [sp, #20]
   15c7c:	9003      	str	r0, [sp, #12]
   15c7e:	9104      	str	r1, [sp, #16]
   15c80:	2201      	movs	r2, #1
   15c82:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   15c86:	4a06      	ldr	r2, [pc, #24]	; (15ca0 <erase_synchronously+0x34>)
   15c88:	9200      	str	r2, [sp, #0]
   15c8a:	9301      	str	r3, [sp, #4]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   15c8c:	4805      	ldr	r0, [pc, #20]	; (15ca4 <erase_synchronously+0x38>)
   15c8e:	f001 f943 	bl	16f18 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   15c92:	4668      	mov	r0, sp
   15c94:	f001 f946 	bl	16f24 <nrf_flash_sync_exe>
}
   15c98:	b007      	add	sp, #28
   15c9a:	f85d fb04 	ldr.w	pc, [sp], #4
   15c9e:	bf00      	nop
   15ca0:	00022ac7 	.word	0x00022ac7
   15ca4:	00015e64 	.word	0x00015e64

00015ca8 <write_synchronously>:
{
   15ca8:	b500      	push	{lr}
   15caa:	b087      	sub	sp, #28
	struct flash_context context = {
   15cac:	9102      	str	r1, [sp, #8]
   15cae:	9003      	str	r0, [sp, #12]
   15cb0:	9204      	str	r2, [sp, #16]
   15cb2:	2301      	movs	r3, #1
   15cb4:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   15cb8:	4b06      	ldr	r3, [pc, #24]	; (15cd4 <write_synchronously+0x2c>)
   15cba:	9300      	str	r3, [sp, #0]
   15cbc:	ab02      	add	r3, sp, #8
   15cbe:	9301      	str	r3, [sp, #4]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   15cc0:	f641 504c 	movw	r0, #7500	; 0x1d4c
   15cc4:	f001 f928 	bl	16f18 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   15cc8:	4668      	mov	r0, sp
   15cca:	f001 f92b 	bl	16f24 <nrf_flash_sync_exe>
}
   15cce:	b007      	add	sp, #28
   15cd0:	f85d fb04 	ldr.w	pc, [sp], #4
   15cd4:	00022b3f 	.word	0x00022b3f

00015cd8 <flash_nrf_erase>:
{
   15cd8:	b570      	push	{r4, r5, r6, lr}
   15cda:	460e      	mov	r6, r1
   15cdc:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   15cde:	f00e f8ea 	bl	23eb6 <nrfx_nvmc_flash_page_size_get>
   15ce2:	4604      	mov	r4, r0
	if (is_regular_addr_valid(addr, size)) {
   15ce4:	4629      	mov	r1, r5
   15ce6:	4630      	mov	r0, r6
   15ce8:	f00c fed9 	bl	22a9e <is_regular_addr_valid>
   15cec:	b338      	cbz	r0, 15d3e <flash_nrf_erase+0x66>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   15cee:	fbb6 f3f4 	udiv	r3, r6, r4
   15cf2:	fb04 6313 	mls	r3, r4, r3, r6
   15cf6:	bb2b      	cbnz	r3, 15d44 <flash_nrf_erase+0x6c>
   15cf8:	fbb5 f3f4 	udiv	r3, r5, r4
   15cfc:	fb04 5313 	mls	r3, r4, r3, r5
   15d00:	bb1b      	cbnz	r3, 15d4a <flash_nrf_erase+0x72>
		if (!n_pages) {
   15d02:	42a5      	cmp	r5, r4
   15d04:	d202      	bcs.n	15d0c <flash_nrf_erase+0x34>
			return 0;
   15d06:	2400      	movs	r4, #0
}
   15d08:	4620      	mov	r0, r4
   15d0a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   15d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15d14:	480e      	ldr	r0, [pc, #56]	; (15d50 <flash_nrf_erase+0x78>)
   15d16:	f003 fd37 	bl	19788 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   15d1a:	f00d ff86 	bl	23c2a <nrf_flash_sync_is_required>
   15d1e:	b140      	cbz	r0, 15d32 <flash_nrf_erase+0x5a>
		ret = erase_synchronously(addr, size);
   15d20:	4629      	mov	r1, r5
   15d22:	4630      	mov	r0, r6
   15d24:	f7ff ffa2 	bl	15c6c <erase_synchronously>
   15d28:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   15d2a:	4809      	ldr	r0, [pc, #36]	; (15d50 <flash_nrf_erase+0x78>)
   15d2c:	f003 fd04 	bl	19738 <z_impl_k_sem_give>
	return ret;
   15d30:	e7ea      	b.n	15d08 <flash_nrf_erase+0x30>
		ret = erase(addr, size);
   15d32:	4629      	mov	r1, r5
   15d34:	4630      	mov	r0, r6
   15d36:	f00c fef3 	bl	22b20 <erase>
   15d3a:	4604      	mov	r4, r0
   15d3c:	e7f5      	b.n	15d2a <flash_nrf_erase+0x52>
		return -EINVAL;
   15d3e:	f06f 0415 	mvn.w	r4, #21
   15d42:	e7e1      	b.n	15d08 <flash_nrf_erase+0x30>
			return -EINVAL;
   15d44:	f06f 0415 	mvn.w	r4, #21
   15d48:	e7de      	b.n	15d08 <flash_nrf_erase+0x30>
   15d4a:	f06f 0415 	mvn.w	r4, #21
   15d4e:	e7db      	b.n	15d08 <flash_nrf_erase+0x30>
   15d50:	200037f4 	.word	0x200037f4

00015d54 <flash_nrf_write>:
{
   15d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d56:	460c      	mov	r4, r1
   15d58:	4616      	mov	r6, r2
   15d5a:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
   15d5c:	4619      	mov	r1, r3
   15d5e:	4620      	mov	r0, r4
   15d60:	f00c fe9d 	bl	22a9e <is_regular_addr_valid>
   15d64:	b318      	cbz	r0, 15dae <flash_nrf_write+0x5a>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   15d66:	f014 0703 	ands.w	r7, r4, #3
   15d6a:	d123      	bne.n	15db4 <flash_nrf_write+0x60>
   15d6c:	f015 0f03 	tst.w	r5, #3
   15d70:	d123      	bne.n	15dba <flash_nrf_write+0x66>
	if (!len) {
   15d72:	b90d      	cbnz	r5, 15d78 <flash_nrf_write+0x24>
}
   15d74:	4638      	mov	r0, r7
   15d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   15d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15d80:	480f      	ldr	r0, [pc, #60]	; (15dc0 <flash_nrf_write+0x6c>)
   15d82:	f003 fd01 	bl	19788 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   15d86:	f00d ff50 	bl	23c2a <nrf_flash_sync_is_required>
   15d8a:	b148      	cbz	r0, 15da0 <flash_nrf_write+0x4c>
		ret = write_synchronously(addr, data, len);
   15d8c:	462a      	mov	r2, r5
   15d8e:	4631      	mov	r1, r6
   15d90:	4620      	mov	r0, r4
   15d92:	f7ff ff89 	bl	15ca8 <write_synchronously>
   15d96:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   15d98:	4809      	ldr	r0, [pc, #36]	; (15dc0 <flash_nrf_write+0x6c>)
   15d9a:	f003 fccd 	bl	19738 <z_impl_k_sem_give>
	return ret;
   15d9e:	e7e9      	b.n	15d74 <flash_nrf_write+0x20>
		ret = write(addr, data, len);
   15da0:	462a      	mov	r2, r5
   15da2:	4631      	mov	r1, r6
   15da4:	4620      	mov	r0, r4
   15da6:	f00c fef7 	bl	22b98 <write>
   15daa:	4607      	mov	r7, r0
   15dac:	e7f4      	b.n	15d98 <flash_nrf_write+0x44>
		return -EINVAL;
   15dae:	f06f 0715 	mvn.w	r7, #21
   15db2:	e7df      	b.n	15d74 <flash_nrf_write+0x20>
		return -EINVAL;
   15db4:	f06f 0715 	mvn.w	r7, #21
   15db8:	e7dc      	b.n	15d74 <flash_nrf_write+0x20>
   15dba:	f06f 0715 	mvn.w	r7, #21
   15dbe:	e7d9      	b.n	15d74 <flash_nrf_write+0x20>
   15dc0:	200037f4 	.word	0x200037f4

00015dc4 <nrf_flash_init>:
{
   15dc4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   15dc6:	2201      	movs	r2, #1
   15dc8:	4611      	mov	r1, r2
   15dca:	4807      	ldr	r0, [pc, #28]	; (15de8 <nrf_flash_init+0x24>)
   15dcc:	f00e fc36 	bl	2463c <z_impl_k_sem_init>
	nrf_flash_sync_init();
   15dd0:	f001 f898 	bl	16f04 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   15dd4:	f00e f873 	bl	23ebe <nrfx_nvmc_flash_page_count_get>
   15dd8:	4c04      	ldr	r4, [pc, #16]	; (15dec <nrf_flash_init+0x28>)
   15dda:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   15ddc:	f00e f86b 	bl	23eb6 <nrfx_nvmc_flash_page_size_get>
   15de0:	6060      	str	r0, [r4, #4]
}
   15de2:	2000      	movs	r0, #0
   15de4:	bd10      	pop	{r4, pc}
   15de6:	bf00      	nop
   15de8:	200037f4 	.word	0x200037f4
   15dec:	200037ec 	.word	0x200037ec

00015df0 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15df0:	b128      	cbz	r0, 15dfe <get_dev+0xe>
   15df2:	2801      	cmp	r0, #1
   15df4:	d101      	bne.n	15dfa <get_dev+0xa>
   15df6:	4803      	ldr	r0, [pc, #12]	; (15e04 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   15df8:	4770      	bx	lr
	const struct device *dev = NULL;
   15dfa:	2000      	movs	r0, #0
   15dfc:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15dfe:	4802      	ldr	r0, [pc, #8]	; (15e08 <get_dev+0x18>)
   15e00:	4770      	bx	lr
   15e02:	bf00      	nop
   15e04:	00025be4 	.word	0x00025be4
   15e08:	00025bfc 	.word	0x00025bfc

00015e0c <gpio_nrfx_pin_interrupt_configure>:
{
   15e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e0e:	b085      	sub	sp, #20
   15e10:	460e      	mov	r6, r1
   15e12:	4619      	mov	r1, r3
	return port->config;
   15e14:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15e16:	7b1b      	ldrb	r3, [r3, #12]
   15e18:	f006 051f 	and.w	r5, r6, #31
   15e1c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   15e20:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   15e24:	d022      	beq.n	15e6c <gpio_nrfx_pin_interrupt_configure+0x60>
   15e26:	4607      	mov	r7, r0
   15e28:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   15e2a:	2300      	movs	r3, #0
   15e2c:	9301      	str	r3, [sp, #4]
   15e2e:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   15e30:	4610      	mov	r0, r2
   15e32:	f00c ffed 	bl	22e10 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   15e36:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   15e3a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   15e3c:	6899      	ldr	r1, [r3, #8]
   15e3e:	40f1      	lsrs	r1, r6
   15e40:	f011 0f01 	tst.w	r1, #1
   15e44:	d102      	bne.n	15e4c <gpio_nrfx_pin_interrupt_configure+0x40>
   15e46:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   15e4a:	d014      	beq.n	15e76 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15e4c:	2300      	movs	r3, #0
   15e4e:	aa01      	add	r2, sp, #4
   15e50:	4619      	mov	r1, r3
   15e52:	4628      	mov	r0, r5
   15e54:	f001 fc94 	bl	17780 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15e58:	4b1b      	ldr	r3, [pc, #108]	; (15ec8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   15e5a:	4298      	cmp	r0, r3
   15e5c:	d131      	bne.n	15ec2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   15e5e:	2101      	movs	r1, #1
   15e60:	4628      	mov	r0, r5
   15e62:	f001 fded 	bl	17a40 <nrfx_gpiote_trigger_enable>
	return 0;
   15e66:	2000      	movs	r0, #0
}
   15e68:	b005      	add	sp, #20
   15e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   15e6c:	4628      	mov	r0, r5
   15e6e:	f001 fe19 	bl	17aa4 <nrfx_gpiote_trigger_disable>
		return 0;
   15e72:	2000      	movs	r0, #0
   15e74:	e7f8      	b.n	15e68 <gpio_nrfx_pin_interrupt_configure+0x5c>
    *p_pin = pin_number & 0x1F;
   15e76:	f005 031f 	and.w	r3, r5, #31
    return pin_number >> 5;
   15e7a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15e7c:	2a01      	cmp	r2, #1
   15e7e:	d014      	beq.n	15eaa <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   15e80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15e84:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   15e8c:	f013 0f01 	tst.w	r3, #1
   15e90:	d1dc      	bne.n	15e4c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15e92:	f10d 010f 	add.w	r1, sp, #15
   15e96:	4628      	mov	r0, r5
   15e98:	f001 fd76 	bl	17988 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   15e9c:	4b0b      	ldr	r3, [pc, #44]	; (15ecc <gpio_nrfx_pin_interrupt_configure+0xc0>)
   15e9e:	4298      	cmp	r0, r3
   15ea0:	d005      	beq.n	15eae <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   15ea2:	f10d 030f 	add.w	r3, sp, #15
   15ea6:	9302      	str	r3, [sp, #8]
   15ea8:	e7d0      	b.n	15e4c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   15eaa:	4a09      	ldr	r2, [pc, #36]	; (15ed0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   15eac:	e7ea      	b.n	15e84 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   15eae:	f10d 000f 	add.w	r0, sp, #15
   15eb2:	f001 fdbd 	bl	17a30 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   15eb6:	4b04      	ldr	r3, [pc, #16]	; (15ec8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   15eb8:	4298      	cmp	r0, r3
   15eba:	d0f2      	beq.n	15ea2 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   15ebc:	f06f 000b 	mvn.w	r0, #11
   15ec0:	e7d2      	b.n	15e68 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   15ec2:	f06f 0015 	mvn.w	r0, #21
   15ec6:	e7cf      	b.n	15e68 <gpio_nrfx_pin_interrupt_configure+0x5c>
   15ec8:	0bad0000 	.word	0x0bad0000
   15ecc:	0bad0004 	.word	0x0bad0004
   15ed0:	50000300 	.word	0x50000300

00015ed4 <gpio_nrfx_pin_configure>:
{
   15ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ed8:	b086      	sub	sp, #24
   15eda:	460e      	mov	r6, r1
   15edc:	4614      	mov	r4, r2
	return port->config;
   15ede:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15ee2:	f898 300c 	ldrb.w	r3, [r8, #12]
   15ee6:	f001 051f 	and.w	r5, r1, #31
   15eea:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15eee:	f10d 0117 	add.w	r1, sp, #23
   15ef2:	4628      	mov	r0, r5
   15ef4:	f001 fd48 	bl	17988 <nrfx_gpiote_channel_get>
   15ef8:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   15efa:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   15efe:	d03a      	beq.n	15f76 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   15f00:	2100      	movs	r1, #0
   15f02:	9103      	str	r1, [sp, #12]
   15f04:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15f06:	460b      	mov	r3, r1
   15f08:	aa03      	add	r2, sp, #12
   15f0a:	4628      	mov	r0, r5
   15f0c:	f001 fc38 	bl	17780 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15f10:	4b33      	ldr	r3, [pc, #204]	; (15fe0 <gpio_nrfx_pin_configure+0x10c>)
   15f12:	4298      	cmp	r0, r3
   15f14:	d161      	bne.n	15fda <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
   15f16:	429f      	cmp	r7, r3
   15f18:	d03d      	beq.n	15f96 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
   15f1a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   15f1e:	d049      	beq.n	15fb4 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
   15f20:	f10d 0103 	add.w	r1, sp, #3
   15f24:	4620      	mov	r0, r4
   15f26:	f00c fef8 	bl	22d1a <get_drive>
		if (rv != 0) {
   15f2a:	4607      	mov	r7, r0
   15f2c:	bb50      	cbnz	r0, 15f84 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
   15f2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15f32:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   15f36:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   15f3a:	bf0c      	ite	eq
   15f3c:	2301      	moveq	r3, #1
   15f3e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   15f40:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   15f44:	4620      	mov	r0, r4
   15f46:	f00c ff2b 	bl	22da0 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   15f4a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   15f4e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   15f52:	d025      	beq.n	15fa0 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   15f54:	f8d8 2004 	ldr.w	r2, [r8, #4]
   15f58:	2301      	movs	r3, #1
   15f5a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   15f5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   15f60:	2200      	movs	r2, #0
   15f62:	a901      	add	r1, sp, #4
   15f64:	4628      	mov	r0, r5
   15f66:	f001 fc9f 	bl	178a8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   15f6a:	4b1d      	ldr	r3, [pc, #116]	; (15fe0 <gpio_nrfx_pin_configure+0x10c>)
   15f6c:	4298      	cmp	r0, r3
   15f6e:	d009      	beq.n	15f84 <gpio_nrfx_pin_configure+0xb0>
   15f70:	f06f 0715 	mvn.w	r7, #21
   15f74:	e006      	b.n	15f84 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   15f76:	4628      	mov	r0, r5
   15f78:	f001 fdb6 	bl	17ae8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   15f7c:	4b18      	ldr	r3, [pc, #96]	; (15fe0 <gpio_nrfx_pin_configure+0x10c>)
   15f7e:	429f      	cmp	r7, r3
   15f80:	d004      	beq.n	15f8c <gpio_nrfx_pin_configure+0xb8>
		return 0;
   15f82:	2700      	movs	r7, #0
}
   15f84:	4638      	mov	r0, r7
   15f86:	b006      	add	sp, #24
   15f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   15f8c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15f90:	f001 fd46 	bl	17a20 <nrfx_gpiote_channel_free>
   15f94:	e7f5      	b.n	15f82 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
   15f96:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15f9a:	f001 fd41 	bl	17a20 <nrfx_gpiote_channel_free>
   15f9e:	e7bc      	b.n	15f1a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   15fa0:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   15fa4:	d0dc      	beq.n	15f60 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   15fa6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   15faa:	2301      	movs	r3, #1
   15fac:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   15fae:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   15fb2:	e7d5      	b.n	15f60 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   15fb4:	4620      	mov	r0, r4
   15fb6:	f00c fef3 	bl	22da0 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   15fba:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   15fbe:	2300      	movs	r3, #0
   15fc0:	461a      	mov	r2, r3
   15fc2:	a902      	add	r1, sp, #8
   15fc4:	4628      	mov	r0, r5
   15fc6:	f001 fbdb 	bl	17780 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   15fca:	4b05      	ldr	r3, [pc, #20]	; (15fe0 <gpio_nrfx_pin_configure+0x10c>)
   15fcc:	4298      	cmp	r0, r3
   15fce:	d101      	bne.n	15fd4 <gpio_nrfx_pin_configure+0x100>
   15fd0:	2700      	movs	r7, #0
   15fd2:	e7d7      	b.n	15f84 <gpio_nrfx_pin_configure+0xb0>
   15fd4:	f06f 0715 	mvn.w	r7, #21
   15fd8:	e7d4      	b.n	15f84 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
   15fda:	f06f 0715 	mvn.w	r7, #21
   15fde:	e7d1      	b.n	15f84 <gpio_nrfx_pin_configure+0xb0>
   15fe0:	0bad0000 	.word	0x0bad0000

00015fe4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15fe4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   15fe6:	f001 fd11 	bl	17a0c <nrfx_gpiote_is_init>
   15fea:	b108      	cbz	r0, 15ff0 <gpio_nrfx_init+0xc>
		return 0;
   15fec:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   15fee:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   15ff0:	f001 fce2 	bl	179b8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   15ff4:	4b08      	ldr	r3, [pc, #32]	; (16018 <gpio_nrfx_init+0x34>)
   15ff6:	4298      	cmp	r0, r3
   15ff8:	d10a      	bne.n	16010 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   15ffa:	2100      	movs	r1, #0
   15ffc:	4807      	ldr	r0, [pc, #28]	; (1601c <gpio_nrfx_init+0x38>)
   15ffe:	f001 fcbd 	bl	1797c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16002:	2200      	movs	r2, #0
   16004:	2105      	movs	r1, #5
   16006:	2006      	movs	r0, #6
   16008:	f00b fdeb 	bl	21be2 <z_arm_irq_priority_set>
	return 0;
   1600c:	2000      	movs	r0, #0
   1600e:	e7ee      	b.n	15fee <gpio_nrfx_init+0xa>
		return -EIO;
   16010:	f06f 0004 	mvn.w	r0, #4
   16014:	e7eb      	b.n	15fee <gpio_nrfx_init+0xa>
   16016:	bf00      	nop
   16018:	0bad0000 	.word	0x0bad0000
   1601c:	00022e49 	.word	0x00022e49

00016020 <nrf_gpio_pin_write>:
    if (value == 0)
   16020:	b969      	cbnz	r1, 1603e <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
   16022:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   16026:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16028:	2801      	cmp	r0, #1
   1602a:	d006      	beq.n	1603a <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
   1602c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   16030:	2301      	movs	r3, #1
   16032:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   16034:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   16038:	4770      	bx	lr
        case 1: return NRF_P1;
   1603a:	4a08      	ldr	r2, [pc, #32]	; (1605c <nrf_gpio_pin_write+0x3c>)
   1603c:	e7f8      	b.n	16030 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
   1603e:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   16042:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16044:	2801      	cmp	r0, #1
   16046:	d006      	beq.n	16056 <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
   16048:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1604c:	2301      	movs	r3, #1
   1604e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   16050:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   16054:	4770      	bx	lr
        case 1: return NRF_P1;
   16056:	4a01      	ldr	r2, [pc, #4]	; (1605c <nrf_gpio_pin_write+0x3c>)
   16058:	e7f8      	b.n	1604c <nrf_gpio_pin_write+0x2c>
   1605a:	bf00      	nop
   1605c:	50000300 	.word	0x50000300

00016060 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   16060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16064:	b083      	sub	sp, #12
   16066:	4607      	mov	r7, r0
   16068:	468a      	mov	sl, r1
   1606a:	4693      	mov	fp, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1606c:	2500      	movs	r5, #0
   1606e:	e02c      	b.n	160ca <pinctrl_configure_pins+0x6a>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   16070:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16074:	e036      	b.n	160e4 <pinctrl_configure_pins+0x84>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   16076:	f8cb 450c 	str.w	r4, [fp, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1607a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1607c:	9601      	str	r6, [sp, #4]
			write = 1U;
   1607e:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   16080:	2c7f      	cmp	r4, #127	; 0x7f
   16082:	d020      	beq.n	160c6 <pinctrl_configure_pins+0x66>
			if (write != NO_WRITE) {
   16084:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   16088:	f040 80d8 	bne.w	1623c <pinctrl_configure_pins+0x1dc>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1608c:	f857 2009 	ldr.w	r2, [r7, r9]
   16090:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   16094:	d002      	beq.n	1609c <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16096:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   16098:	2300      	movs	r3, #0
   1609a:	9301      	str	r3, [sp, #4]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1609c:	f3c2 12c1 	ubfx	r2, r2, #7, #2
    *p_pin = pin_number & 0x1F;
   160a0:	f004 011f 	and.w	r1, r4, #31
    return pin_number >> 5;
   160a4:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   160a6:	2c01      	cmp	r4, #1
   160a8:	f000 80cc 	beq.w	16244 <pinctrl_configure_pins+0x1e4>
        case 0: return NRF_P0;
   160ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   160b0:	9b01      	ldr	r3, [sp, #4]
   160b2:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   160b6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   160ba:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   160be:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   160c2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   160c6:	3501      	adds	r5, #1
   160c8:	b2ed      	uxtb	r5, r5
   160ca:	4555      	cmp	r5, sl
   160cc:	f080 80bc 	bcs.w	16248 <pinctrl_configure_pins+0x1e8>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   160d0:	ea4f 0985 	mov.w	r9, r5, lsl #2
   160d4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   160d8:	f3c3 2843 	ubfx	r8, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   160dc:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   160e0:	2c7f      	cmp	r4, #127	; 0x7f
   160e2:	d0c5      	beq.n	16070 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   160e4:	0c1b      	lsrs	r3, r3, #16
   160e6:	2b19      	cmp	r3, #25
   160e8:	f200 80b0 	bhi.w	1624c <pinctrl_configure_pins+0x1ec>
   160ec:	a201      	add	r2, pc, #4	; (adr r2, 160f4 <pinctrl_configure_pins+0x94>)
   160ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   160f2:	bf00      	nop
   160f4:	00016077 	.word	0x00016077
   160f8:	0001615d 	.word	0x0001615d
   160fc:	0001616b 	.word	0x0001616b
   16100:	00016177 	.word	0x00016177
   16104:	00016185 	.word	0x00016185
   16108:	00016193 	.word	0x00016193
   1610c:	0001619f 	.word	0x0001619f
   16110:	0001624d 	.word	0x0001624d
   16114:	0001624d 	.word	0x0001624d
   16118:	0001624d 	.word	0x0001624d
   1611c:	0001624d 	.word	0x0001624d
   16120:	000161ad 	.word	0x000161ad
   16124:	000161c1 	.word	0x000161c1
   16128:	0001624d 	.word	0x0001624d
   1612c:	0001624d 	.word	0x0001624d
   16130:	0001624d 	.word	0x0001624d
   16134:	0001624d 	.word	0x0001624d
   16138:	0001624d 	.word	0x0001624d
   1613c:	0001624d 	.word	0x0001624d
   16140:	0001624d 	.word	0x0001624d
   16144:	0001624d 	.word	0x0001624d
   16148:	0001624d 	.word	0x0001624d
   1614c:	000161d5 	.word	0x000161d5
   16150:	000161e7 	.word	0x000161e7
   16154:	000161f9 	.word	0x000161f9
   16158:	0001620b 	.word	0x0001620b
			NRF_PSEL_UART(reg, RXD) = pin;
   1615c:	f8cb 4514 	str.w	r4, [fp, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   16160:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   16162:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
   16164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   16168:	e78a      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
   1616a:	f8cb 4508 	str.w	r4, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1616e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   16170:	9601      	str	r6, [sp, #4]
			write = 1U;
   16172:	4631      	mov	r1, r6
			break;
   16174:	e784      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
   16176:	f8cb 4510 	str.w	r4, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1617a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1617c:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
   1617e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   16182:	e77d      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   16184:	f8cb 4508 	str.w	r4, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   16188:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1618a:	2301      	movs	r3, #1
   1618c:	9301      	str	r3, [sp, #4]
			write = 0U;
   1618e:	4631      	mov	r1, r6
			break;
   16190:	e776      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   16192:	f8cb 450c 	str.w	r4, [fp, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16196:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   16198:	9601      	str	r6, [sp, #4]
			write = 0U;
   1619a:	2100      	movs	r1, #0
			break;
   1619c:	e770      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1619e:	f8cb 4510 	str.w	r4, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   161a2:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   161a4:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
   161a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   161aa:	e769      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   161ac:	f8cb 4508 	str.w	r4, [fp, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   161b0:	f1b8 0f00 	cmp.w	r8, #0
   161b4:	d032      	beq.n	1621c <pinctrl_configure_pins+0x1bc>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   161b6:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   161b8:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
   161ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   161be:	e75f      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   161c0:	f8cb 450c 	str.w	r4, [fp, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   161c4:	f1b8 0f00 	cmp.w	r8, #0
   161c8:	d030      	beq.n	1622c <pinctrl_configure_pins+0x1cc>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   161ca:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   161cc:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
   161ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   161d2:	e755      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   161d4:	f8cb 4560 	str.w	r4, [fp, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   161d8:	f857 1009 	ldr.w	r1, [r7, r9]
   161dc:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   161e0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   161e2:	9601      	str	r6, [sp, #4]
			break;
   161e4:	e74c      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   161e6:	f8cb 4564 	str.w	r4, [fp, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   161ea:	f857 1009 	ldr.w	r1, [r7, r9]
   161ee:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   161f2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   161f4:	9601      	str	r6, [sp, #4]
			break;
   161f6:	e743      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   161f8:	f8cb 4568 	str.w	r4, [fp, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   161fc:	f857 1009 	ldr.w	r1, [r7, r9]
   16200:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16204:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   16206:	9601      	str	r6, [sp, #4]
			break;
   16208:	e73a      	b.n	16080 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1620a:	f8cb 456c 	str.w	r4, [fp, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   1620e:	f857 1009 	ldr.w	r1, [r7, r9]
   16212:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   16216:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   16218:	9601      	str	r6, [sp, #4]
			break;
   1621a:	e731      	b.n	16080 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1621c:	4646      	mov	r6, r8
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1621e:	f8cd 8004 	str.w	r8, [sp, #4]
		uint32_t write = NO_WRITE;
   16222:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
   16226:	f04f 0806 	mov.w	r8, #6
   1622a:	e729      	b.n	16080 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1622c:	4646      	mov	r6, r8
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1622e:	f8cd 8004 	str.w	r8, [sp, #4]
		uint32_t write = NO_WRITE;
   16232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
   16236:	f04f 0806 	mov.w	r8, #6
   1623a:	e721      	b.n	16080 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
   1623c:	4620      	mov	r0, r4
   1623e:	f7ff feef 	bl	16020 <nrf_gpio_pin_write>
   16242:	e723      	b.n	1608c <pinctrl_configure_pins+0x2c>
        case 1: return NRF_P1;
   16244:	4804      	ldr	r0, [pc, #16]	; (16258 <pinctrl_configure_pins+0x1f8>)
   16246:	e733      	b.n	160b0 <pinctrl_configure_pins+0x50>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   16248:	2000      	movs	r0, #0
   1624a:	e001      	b.n	16250 <pinctrl_configure_pins+0x1f0>
		switch (NRF_GET_FUN(pins[i])) {
   1624c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   16250:	b003      	add	sp, #12
   16252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16256:	bf00      	nop
   16258:	50000300 	.word	0x50000300

0001625c <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   1625c:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   1625e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   16260:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   16264:	d06f      	beq.n	16346 <baudrate_set+0xea>
   16266:	d83a      	bhi.n	162de <baudrate_set+0x82>
   16268:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1626c:	d06e      	beq.n	1634c <baudrate_set+0xf0>
   1626e:	d90a      	bls.n	16286 <baudrate_set+0x2a>
   16270:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   16274:	d075      	beq.n	16362 <baudrate_set+0x106>
   16276:	d924      	bls.n	162c2 <baudrate_set+0x66>
   16278:	f647 2312 	movw	r3, #31250	; 0x7a12
   1627c:	4299      	cmp	r1, r3
   1627e:	d12b      	bne.n	162d8 <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16280:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16284:	e013      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   16286:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1628a:	d061      	beq.n	16350 <baudrate_set+0xf4>
   1628c:	d907      	bls.n	1629e <baudrate_set+0x42>
   1628e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   16292:	d063      	beq.n	1635c <baudrate_set+0x100>
   16294:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   16298:	d110      	bne.n	162bc <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1629a:	4b3c      	ldr	r3, [pc, #240]	; (1638c <baudrate_set+0x130>)
   1629c:	e007      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   1629e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   162a2:	d058      	beq.n	16356 <baudrate_set+0xfa>
   162a4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   162a8:	d105      	bne.n	162b6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   162aa:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   162ae:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   162b2:	2000      	movs	r0, #0
   162b4:	4770      	bx	lr
	switch (baudrate) {
   162b6:	f06f 0015 	mvn.w	r0, #21
   162ba:	4770      	bx	lr
   162bc:	f06f 0015 	mvn.w	r0, #21
   162c0:	4770      	bx	lr
   162c2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   162c6:	d04e      	beq.n	16366 <baudrate_set+0x10a>
   162c8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   162cc:	d101      	bne.n	162d2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   162ce:	4b30      	ldr	r3, [pc, #192]	; (16390 <baudrate_set+0x134>)
   162d0:	e7ed      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   162d2:	f06f 0015 	mvn.w	r0, #21
   162d6:	4770      	bx	lr
   162d8:	f06f 0015 	mvn.w	r0, #21
   162dc:	4770      	bx	lr
   162de:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   162e2:	d042      	beq.n	1636a <baudrate_set+0x10e>
   162e4:	d909      	bls.n	162fa <baudrate_set+0x9e>
   162e6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   162ea:	d046      	beq.n	1637a <baudrate_set+0x11e>
   162ec:	d91f      	bls.n	1632e <baudrate_set+0xd2>
   162ee:	4b29      	ldr	r3, [pc, #164]	; (16394 <baudrate_set+0x138>)
   162f0:	4299      	cmp	r1, r3
   162f2:	d148      	bne.n	16386 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   162f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   162f8:	e7d9      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   162fa:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   162fe:	d037      	beq.n	16370 <baudrate_set+0x114>
   16300:	d905      	bls.n	1630e <baudrate_set+0xb2>
   16302:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   16306:	d10f      	bne.n	16328 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16308:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1630c:	e7cf      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   1630e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   16312:	4299      	cmp	r1, r3
   16314:	d02e      	beq.n	16374 <baudrate_set+0x118>
   16316:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1631a:	d102      	bne.n	16322 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1631c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16320:	e7c5      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   16322:	f06f 0015 	mvn.w	r0, #21
   16326:	4770      	bx	lr
   16328:	f06f 0015 	mvn.w	r0, #21
   1632c:	4770      	bx	lr
   1632e:	4b1a      	ldr	r3, [pc, #104]	; (16398 <baudrate_set+0x13c>)
   16330:	4299      	cmp	r1, r3
   16332:	d025      	beq.n	16380 <baudrate_set+0x124>
   16334:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   16338:	d102      	bne.n	16340 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1633a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1633e:	e7b6      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   16340:	f06f 0015 	mvn.w	r0, #21
   16344:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16346:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1634a:	e7b0      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1634c:	4b13      	ldr	r3, [pc, #76]	; (1639c <baudrate_set+0x140>)
   1634e:	e7ae      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16350:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16354:	e7ab      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   16356:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1635a:	e7a8      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1635c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16360:	e7a5      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16362:	4b0f      	ldr	r3, [pc, #60]	; (163a0 <baudrate_set+0x144>)
   16364:	e7a3      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16366:	4b0f      	ldr	r3, [pc, #60]	; (163a4 <baudrate_set+0x148>)
   16368:	e7a1      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1636a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1636e:	e79e      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16370:	4b0d      	ldr	r3, [pc, #52]	; (163a8 <baudrate_set+0x14c>)
   16372:	e79c      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16374:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16378:	e799      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1637a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1637e:	e796      	b.n	162ae <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16380:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16384:	e793      	b.n	162ae <baudrate_set+0x52>
	switch (baudrate) {
   16386:	f06f 0015 	mvn.w	r0, #21
}
   1638a:	4770      	bx	lr
   1638c:	0013b000 	.word	0x0013b000
   16390:	004ea000 	.word	0x004ea000
   16394:	000f4240 	.word	0x000f4240
   16398:	0003d090 	.word	0x0003d090
   1639c:	00275000 	.word	0x00275000
   163a0:	0075c000 	.word	0x0075c000
   163a4:	003af000 	.word	0x003af000
   163a8:	013a9000 	.word	0x013a9000

000163ac <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   163ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163ae:	4605      	mov	r5, r0
   163b0:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   163b2:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   163b4:	f00e f83d 	bl	24432 <k_is_in_isr>
   163b8:	b910      	cbnz	r0, 163c0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   163ba:	4b12      	ldr	r3, [pc, #72]	; (16404 <uarte_nrfx_poll_out+0x58>)
   163bc:	781b      	ldrb	r3, [r3, #0]
   163be:	b983      	cbnz	r3, 163e2 <uarte_nrfx_poll_out+0x36>
   163c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   163c4:	f3ef 8411 	mrs	r4, BASEPRI
   163c8:	f383 8812 	msr	BASEPRI_MAX, r3
   163cc:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   163d0:	4628      	mov	r0, r5
   163d2:	f00c fe5a 	bl	2308a <is_tx_ready>
   163d6:	b940      	cbnz	r0, 163ea <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   163d8:	f384 8811 	msr	BASEPRI, r4
   163dc:	f3bf 8f6f 	isb	sy
}
   163e0:	e7ee      	b.n	163c0 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   163e2:	4628      	mov	r0, r5
   163e4:	f00c ff74 	bl	232d0 <wait_tx_ready>
   163e8:	4604      	mov	r4, r0
	}

	*data->char_out = c;
   163ea:	697b      	ldr	r3, [r7, #20]
   163ec:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   163ee:	2201      	movs	r2, #1
   163f0:	6979      	ldr	r1, [r7, #20]
   163f2:	4628      	mov	r0, r5
   163f4:	f00c fe63 	bl	230be <tx_start>
	__asm__ volatile(
   163f8:	f384 8811 	msr	BASEPRI, r4
   163fc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   16400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16402:	bf00      	nop
   16404:	20004bb6 	.word	0x20004bb6

00016408 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   16408:	b538      	push	{r3, r4, r5, lr}
   1640a:	4604      	mov	r4, r0
   1640c:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1640e:	f101 001c 	add.w	r0, r1, #28
   16412:	f001 fcb3 	bl	17d7c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   16416:	4b0c      	ldr	r3, [pc, #48]	; (16448 <endtx_stoptx_ppi_init+0x40>)
   16418:	4298      	cmp	r0, r3
   1641a:	d111      	bne.n	16440 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1641c:	7f2b      	ldrb	r3, [r5, #28]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1641e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   16422:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16424:	4a09      	ldr	r2, [pc, #36]	; (1644c <endtx_stoptx_ppi_init+0x44>)
   16426:	33a2      	adds	r3, #162	; 0xa2
   16428:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1642c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16430:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   16432:	7f29      	ldrb	r1, [r5, #28]
   16434:	2301      	movs	r3, #1
   16436:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   16438:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1643c:	2000      	movs	r0, #0
}
   1643e:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   16440:	f06f 0004 	mvn.w	r0, #4
   16444:	e7fb      	b.n	1643e <endtx_stoptx_ppi_init+0x36>
   16446:	bf00      	nop
   16448:	0bad0000 	.word	0x0bad0000
   1644c:	4001f000 	.word	0x4001f000

00016450 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   16450:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   16454:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   16458:	4b01      	ldr	r3, [pc, #4]	; (16460 <set_comparator+0x10>)
   1645a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1645e:	4770      	bx	lr
   16460:	40011000 	.word	0x40011000

00016464 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   16468:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1646a:	4a02      	ldr	r2, [pc, #8]	; (16474 <event_enable+0x10>)
   1646c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   16470:	4770      	bx	lr
   16472:	bf00      	nop
   16474:	40011000 	.word	0x40011000

00016478 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1647c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1647e:	4a02      	ldr	r2, [pc, #8]	; (16488 <event_disable+0x10>)
   16480:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   16484:	4770      	bx	lr
   16486:	bf00      	nop
   16488:	40011000 	.word	0x40011000

0001648c <counter>:
     return p_reg->COUNTER;
   1648c:	4b01      	ldr	r3, [pc, #4]	; (16494 <counter+0x8>)
   1648e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   16492:	4770      	bx	lr
   16494:	40011000 	.word	0x40011000

00016498 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   16498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1649c:	4606      	mov	r6, r0
   1649e:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   164a0:	f7ff ffea 	bl	16478 <event_disable>
	event_clear(chan);
   164a4:	4630      	mov	r0, r6
   164a6:	f00c ffbc 	bl	23422 <event_clear>
	uint32_t cc_val = req_cc;
   164aa:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   164ac:	2703      	movs	r7, #3
   164ae:	e001      	b.n	164b4 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   164b0:	193d      	adds	r5, r7, r4
			cc_inc++;
   164b2:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   164b4:	4629      	mov	r1, r5
   164b6:	4630      	mov	r0, r6
   164b8:	f7ff ffca 	bl	16450 <set_comparator>
		event_enable(chan);
   164bc:	4630      	mov	r0, r6
   164be:	f7ff ffd1 	bl	16464 <event_enable>
		now = counter();
   164c2:	f7ff ffe3 	bl	1648c <counter>
   164c6:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   164c8:	1cc1      	adds	r1, r0, #3
   164ca:	4628      	mov	r0, r5
   164cc:	f00c ff98 	bl	23400 <counter_sub>
   164d0:	4b0b      	ldr	r3, [pc, #44]	; (16500 <set_alarm+0x68>)
   164d2:	4298      	cmp	r0, r3
   164d4:	d911      	bls.n	164fa <set_alarm+0x62>
			if (event_check(chan)) {
   164d6:	4630      	mov	r0, r6
   164d8:	f00c ff96 	bl	23408 <event_check>
   164dc:	2800      	cmp	r0, #0
   164de:	d0e7      	beq.n	164b0 <set_alarm+0x18>
				now = counter();
   164e0:	f7ff ffd4 	bl	1648c <counter>
   164e4:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   164e6:	4641      	mov	r1, r8
   164e8:	f00c ff8a 	bl	23400 <counter_sub>
   164ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   164f0:	d903      	bls.n	164fa <set_alarm+0x62>
					event_clear(chan);
   164f2:	4630      	mov	r0, r6
   164f4:	f00c ff95 	bl	23422 <event_clear>
   164f8:	e7da      	b.n	164b0 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   164fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   164fe:	bf00      	nop
   16500:	007ffffd 	.word	0x007ffffd

00016504 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
   16504:	4b03      	ldr	r3, [pc, #12]	; (16514 <int_event_disable_rtc+0x10>)
   16506:	4a04      	ldr	r2, [pc, #16]	; (16518 <int_event_disable_rtc+0x14>)
   16508:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1650c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
   16510:	4770      	bx	lr
   16512:	bf00      	nop
   16514:	40011000 	.word	0x40011000
   16518:	000f0003 	.word	0x000f0003

0001651c <compare_int_lock>:
{
   1651c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1651e:	2301      	movs	r3, #1
   16520:	4083      	lsls	r3, r0
   16522:	ea6f 0c03 	mvn.w	ip, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16526:	4a0e      	ldr	r2, [pc, #56]	; (16560 <compare_int_lock+0x44>)
   16528:	f3bf 8f5b 	dmb	ish
   1652c:	e852 1f00 	ldrex	r1, [r2]
   16530:	ea01 0e0c 	and.w	lr, r1, ip
   16534:	e842 e400 	strex	r4, lr, [r2]
   16538:	2c00      	cmp	r4, #0
   1653a:	d1f7      	bne.n	1652c <compare_int_lock+0x10>
   1653c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   16540:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16544:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   16546:	4807      	ldr	r0, [pc, #28]	; (16564 <compare_int_lock+0x48>)
   16548:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1654c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16550:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   16554:	420b      	tst	r3, r1
}
   16556:	bf14      	ite	ne
   16558:	2001      	movne	r0, #1
   1655a:	2000      	moveq	r0, #0
   1655c:	bd10      	pop	{r4, pc}
   1655e:	bf00      	nop
   16560:	20003848 	.word	0x20003848
   16564:	40011000 	.word	0x40011000

00016568 <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   16568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1656c:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   1656e:	4a14      	ldr	r2, [pc, #80]	; (165c0 <channel_processing_check_and_clear+0x58>)
   16570:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   16574:	4213      	tst	r3, r2
   16576:	d101      	bne.n	1657c <channel_processing_check_and_clear+0x14>
	return false;
   16578:	2000      	movs	r0, #0
}
   1657a:	4770      	bx	lr
{
   1657c:	b510      	push	{r4, lr}
   1657e:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   16580:	2301      	movs	r3, #1
   16582:	4083      	lsls	r3, r0
   16584:	43db      	mvns	r3, r3
   16586:	490f      	ldr	r1, [pc, #60]	; (165c4 <channel_processing_check_and_clear+0x5c>)
   16588:	f3bf 8f5b 	dmb	ish
   1658c:	e851 2f00 	ldrex	r2, [r1]
   16590:	ea02 0003 	and.w	r0, r2, r3
   16594:	e841 0c00 	strex	ip, r0, [r1]
   16598:	f1bc 0f00 	cmp.w	ip, #0
   1659c:	d1f6      	bne.n	1658c <channel_processing_check_and_clear+0x24>
   1659e:	f3bf 8f5b 	dmb	ish
   165a2:	fa22 f304 	lsr.w	r3, r2, r4
   165a6:	f013 0f01 	tst.w	r3, #1
   165aa:	d103      	bne.n	165b4 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
   165ac:	4620      	mov	r0, r4
   165ae:	f00c ff2b 	bl	23408 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   165b2:	b118      	cbz	r0, 165bc <channel_processing_check_and_clear+0x54>
			event_clear(chan);
   165b4:	4620      	mov	r0, r4
   165b6:	f00c ff34 	bl	23422 <event_clear>
			return true;
   165ba:	2001      	movs	r0, #1
}
   165bc:	bd10      	pop	{r4, pc}
   165be:	bf00      	nop
   165c0:	40011000 	.word	0x40011000
   165c4:	20003844 	.word	0x20003844

000165c8 <compare_int_unlock>:
	if (key) {
   165c8:	b901      	cbnz	r1, 165cc <compare_int_unlock+0x4>
}
   165ca:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   165cc:	2301      	movs	r3, #1
   165ce:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   165d0:	4a11      	ldr	r2, [pc, #68]	; (16618 <compare_int_unlock+0x50>)
   165d2:	f3bf 8f5b 	dmb	ish
   165d6:	e852 cf00 	ldrex	ip, [r2]
   165da:	ea4c 0c03 	orr.w	ip, ip, r3
   165de:	e842 c100 	strex	r1, ip, [r2]
   165e2:	2900      	cmp	r1, #0
   165e4:	d1f7      	bne.n	165d6 <compare_int_unlock+0xe>
   165e6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   165ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   165ee:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   165f0:	4a0a      	ldr	r2, [pc, #40]	; (1661c <compare_int_unlock+0x54>)
   165f2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   165f6:	f3bf 8f5b 	dmb	ish
   165fa:	4b09      	ldr	r3, [pc, #36]	; (16620 <compare_int_unlock+0x58>)
   165fc:	681b      	ldr	r3, [r3, #0]
   165fe:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   16602:	40c3      	lsrs	r3, r0
   16604:	f013 0f01 	tst.w	r3, #1
   16608:	d0df      	beq.n	165ca <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1660a:	4b06      	ldr	r3, [pc, #24]	; (16624 <compare_int_unlock+0x5c>)
   1660c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   16610:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16614:	e7d9      	b.n	165ca <compare_int_unlock+0x2>
   16616:	bf00      	nop
   16618:	20003848 	.word	0x20003848
   1661c:	40011000 	.word	0x40011000
   16620:	20003844 	.word	0x20003844
   16624:	e000e100 	.word	0xe000e100

00016628 <sys_clock_timeout_handler>:
{
   16628:	b538      	push	{r3, r4, r5, lr}
   1662a:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1662c:	4610      	mov	r0, r2
   1662e:	4619      	mov	r1, r3
   16630:	f00c ff03 	bl	2343a <absolute_time_to_cc>
   16634:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   16636:	490f      	ldr	r1, [pc, #60]	; (16674 <sys_clock_timeout_handler+0x4c>)
   16638:	680b      	ldr	r3, [r1, #0]
   1663a:	1ae4      	subs	r4, r4, r3
   1663c:	0960      	lsrs	r0, r4, #5
	last_count += dticks * CYC_PER_TICK;
   1663e:	f024 041f 	bic.w	r4, r4, #31
   16642:	191b      	adds	r3, r3, r4
   16644:	684c      	ldr	r4, [r1, #4]
   16646:	f144 0400 	adc.w	r4, r4, #0
   1664a:	600b      	str	r3, [r1, #0]
   1664c:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1664e:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   16652:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   16656:	d209      	bcs.n	1666c <sys_clock_timeout_handler+0x44>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   16658:	4b07      	ldr	r3, [pc, #28]	; (16678 <sys_clock_timeout_handler+0x50>)
   1665a:	681b      	ldr	r3, [r3, #0]
   1665c:	0a19      	lsrs	r1, r3, #8
   1665e:	061b      	lsls	r3, r3, #24
   16660:	18d4      	adds	r4, r2, r3
   16662:	f141 0500 	adc.w	r5, r1, #0
   16666:	4b05      	ldr	r3, [pc, #20]	; (1667c <sys_clock_timeout_handler+0x54>)
   16668:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   1666c:	f003 fe5c 	bl	1a328 <sys_clock_announce>
}
   16670:	bd38      	pop	{r3, r4, r5, pc}
   16672:	bf00      	nop
   16674:	20001be0 	.word	0x20001be0
   16678:	2000384c 	.word	0x2000384c
   1667c:	20001be8 	.word	0x20001be8

00016680 <z_nrf_rtc_timer_read>:
{
   16680:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   16682:	4b0d      	ldr	r3, [pc, #52]	; (166b8 <z_nrf_rtc_timer_read+0x38>)
   16684:	681c      	ldr	r4, [r3, #0]
   16686:	0a25      	lsrs	r5, r4, #8
   16688:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1668a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1668e:	f7ff fefd 	bl	1648c <counter>
   16692:	4603      	mov	r3, r0
	val += cntr;
   16694:	1900      	adds	r0, r0, r4
   16696:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1669a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1669e:	d20a      	bcs.n	166b6 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   166a0:	4b06      	ldr	r3, [pc, #24]	; (166bc <z_nrf_rtc_timer_read+0x3c>)
   166a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   166a6:	4290      	cmp	r0, r2
   166a8:	eb71 0303 	sbcs.w	r3, r1, r3
   166ac:	d203      	bcs.n	166b6 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   166ae:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   166b2:	f141 0100 	adc.w	r1, r1, #0
}
   166b6:	bd38      	pop	{r3, r4, r5, pc}
   166b8:	2000384c 	.word	0x2000384c
   166bc:	20001be8 	.word	0x20001be8

000166c0 <compare_set_nolocks>:
{
   166c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   166c2:	4606      	mov	r6, r0
   166c4:	4614      	mov	r4, r2
   166c6:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   166c8:	4610      	mov	r0, r2
   166ca:	4619      	mov	r1, r3
   166cc:	f00c feb5 	bl	2343a <absolute_time_to_cc>
   166d0:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   166d2:	f7ff ffd5 	bl	16680 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   166d6:	42a0      	cmp	r0, r4
   166d8:	eb71 0305 	sbcs.w	r3, r1, r5
   166dc:	d215      	bcs.n	1670a <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   166de:	1a20      	subs	r0, r4, r0
   166e0:	eb65 0101 	sbc.w	r1, r5, r1
   166e4:	4b17      	ldr	r3, [pc, #92]	; (16744 <compare_set_nolocks+0x84>)
   166e6:	4298      	cmp	r0, r3
   166e8:	f171 0100 	sbcs.w	r1, r1, #0
   166ec:	d227      	bcs.n	1673e <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
   166ee:	4b16      	ldr	r3, [pc, #88]	; (16748 <compare_set_nolocks+0x88>)
   166f0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   166f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   166f8:	42ab      	cmp	r3, r5
   166fa:	bf08      	it	eq
   166fc:	42a2      	cmpeq	r2, r4
   166fe:	d012      	beq.n	16726 <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
   16700:	4639      	mov	r1, r7
   16702:	4630      	mov	r0, r6
   16704:	f7ff fec8 	bl	16498 <set_alarm>
   16708:	e00d      	b.n	16726 <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
   1670a:	2301      	movs	r3, #1
   1670c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1670e:	4a0f      	ldr	r2, [pc, #60]	; (1674c <compare_set_nolocks+0x8c>)
   16710:	f3bf 8f5b 	dmb	ish
   16714:	e852 0f00 	ldrex	r0, [r2]
   16718:	4318      	orrs	r0, r3
   1671a:	e842 0100 	strex	r1, r0, [r2]
   1671e:	2900      	cmp	r1, #0
   16720:	d1f8      	bne.n	16714 <compare_set_nolocks+0x54>
   16722:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   16726:	4b08      	ldr	r3, [pc, #32]	; (16748 <compare_set_nolocks+0x88>)
   16728:	0132      	lsls	r2, r6, #4
   1672a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1672e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   16732:	9906      	ldr	r1, [sp, #24]
   16734:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   16736:	9b07      	ldr	r3, [sp, #28]
   16738:	6073      	str	r3, [r6, #4]
	return ret;
   1673a:	2000      	movs	r0, #0
}
   1673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   1673e:	f06f 0015 	mvn.w	r0, #21
   16742:	e7fb      	b.n	1673c <compare_set_nolocks+0x7c>
   16744:	00800001 	.word	0x00800001
   16748:	20001bd0 	.word	0x20001bd0
   1674c:	20003844 	.word	0x20003844

00016750 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   16750:	b530      	push	{r4, r5, lr}
   16752:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
   16754:	f7ff fed6 	bl	16504 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
   16758:	2300      	movs	r3, #0
   1675a:	4a1d      	ldr	r2, [pc, #116]	; (167d0 <sys_clock_driver_init+0x80>)
   1675c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16760:	2b00      	cmp	r3, #0
   16762:	dd24      	ble.n	167ae <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
   16764:	4c1a      	ldr	r4, [pc, #104]	; (167d0 <sys_clock_driver_init+0x80>)
   16766:	2502      	movs	r5, #2
   16768:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1676c:	4b19      	ldr	r3, [pc, #100]	; (167d4 <sys_clock_driver_init+0x84>)
   1676e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   16772:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   16776:	2200      	movs	r2, #0
   16778:	2101      	movs	r1, #1
   1677a:	2011      	movs	r0, #17
   1677c:	f00b fa31 	bl	21be2 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   16780:	2011      	movs	r0, #17
   16782:	f00b fa24 	bl	21bce <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   16786:	2301      	movs	r3, #1
   16788:	60a3      	str	r3, [r4, #8]
   1678a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1678c:	4a12      	ldr	r2, [pc, #72]	; (167d8 <sys_clock_driver_init+0x88>)
   1678e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   16790:	2400      	movs	r4, #0
   16792:	9401      	str	r4, [sp, #4]
   16794:	4b11      	ldr	r3, [pc, #68]	; (167dc <sys_clock_driver_init+0x8c>)
   16796:	9300      	str	r3, [sp, #0]
   16798:	4a11      	ldr	r2, [pc, #68]	; (167e0 <sys_clock_driver_init+0x90>)
   1679a:	2300      	movs	r3, #0
   1679c:	4620      	mov	r0, r4
   1679e:	f00c fe56 	bl	2344e <compare_set>

	z_nrf_clock_control_lf_on(mode);
   167a2:	4628      	mov	r0, r5
   167a4:	f7ff f888 	bl	158b8 <z_nrf_clock_control_lf_on>

	return 0;
}
   167a8:	4620      	mov	r0, r4
   167aa:	b003      	add	sp, #12
   167ac:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   167ae:	4a0d      	ldr	r2, [pc, #52]	; (167e4 <sys_clock_driver_init+0x94>)
   167b0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   167b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   167b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   167bc:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   167c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   167c4:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   167c6:	4902      	ldr	r1, [pc, #8]	; (167d0 <sys_clock_driver_init+0x80>)
   167c8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   167cc:	3301      	adds	r3, #1
   167ce:	e7c7      	b.n	16760 <sys_clock_driver_init+0x10>
   167d0:	40011000 	.word	0x40011000
   167d4:	e000e100 	.word	0xe000e100
   167d8:	20003848 	.word	0x20003848
   167dc:	00016629 	.word	0x00016629
   167e0:	007fffe0 	.word	0x007fffe0
   167e4:	20001bd0 	.word	0x20001bd0

000167e8 <process_channel>:
{
   167e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167ec:	b082      	sub	sp, #8
   167ee:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   167f0:	f7ff feba 	bl	16568 <channel_processing_check_and_clear>
   167f4:	b910      	cbnz	r0, 167fc <process_channel+0x14>
}
   167f6:	b002      	add	sp, #8
   167f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   167fc:	f7ff ff40 	bl	16680 <z_nrf_rtc_timer_read>
   16800:	4682      	mov	sl, r0
   16802:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   16804:	f00c fe1c 	bl	23440 <full_int_lock>
   16808:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   1680a:	4b15      	ldr	r3, [pc, #84]	; (16860 <process_channel+0x78>)
   1680c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   16810:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   16814:	45c2      	cmp	sl, r8
   16816:	eb75 0509 	sbcs.w	r5, r5, r9
   1681a:	d20b      	bcs.n	16834 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1681c:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   1681e:	4630      	mov	r0, r6
   16820:	f00c fe12 	bl	23448 <full_int_unlock>
		if (handler) {
   16824:	2d00      	cmp	r5, #0
   16826:	d0e6      	beq.n	167f6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   16828:	9700      	str	r7, [sp, #0]
   1682a:	4642      	mov	r2, r8
   1682c:	464b      	mov	r3, r9
   1682e:	4620      	mov	r0, r4
   16830:	47a8      	blx	r5
}
   16832:	e7e0      	b.n	167f6 <process_channel+0xe>
			handler = cc_data[chan].callback;
   16834:	4a0a      	ldr	r2, [pc, #40]	; (16860 <process_channel+0x78>)
   16836:	0123      	lsls	r3, r4, #4
   16838:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1683c:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   1683e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   16840:	2000      	movs	r0, #0
   16842:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   16844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1684c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   16850:	4620      	mov	r0, r4
   16852:	f7ff fe11 	bl	16478 <event_disable>
			event_clear(chan);
   16856:	4620      	mov	r0, r4
   16858:	f00c fde3 	bl	23422 <event_clear>
   1685c:	e7df      	b.n	1681e <process_channel+0x36>
   1685e:	bf00      	nop
   16860:	20001bd0 	.word	0x20001bd0

00016864 <rtc_nrf_isr>:
{
   16864:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   16866:	4b0e      	ldr	r3, [pc, #56]	; (168a0 <rtc_nrf_isr+0x3c>)
   16868:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1686c:	f013 0f02 	tst.w	r3, #2
   16870:	d00d      	beq.n	1688e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16872:	4b0b      	ldr	r3, [pc, #44]	; (168a0 <rtc_nrf_isr+0x3c>)
   16874:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   16878:	b14b      	cbz	r3, 1688e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1687a:	4b09      	ldr	r3, [pc, #36]	; (168a0 <rtc_nrf_isr+0x3c>)
   1687c:	2200      	movs	r2, #0
   1687e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16882:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   16886:	4a07      	ldr	r2, [pc, #28]	; (168a4 <rtc_nrf_isr+0x40>)
   16888:	6813      	ldr	r3, [r2, #0]
   1688a:	3301      	adds	r3, #1
   1688c:	6013      	str	r3, [r2, #0]
{
   1688e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   16890:	2c00      	cmp	r4, #0
   16892:	dd00      	ble.n	16896 <rtc_nrf_isr+0x32>
}
   16894:	bd10      	pop	{r4, pc}
		process_channel(chan);
   16896:	4620      	mov	r0, r4
   16898:	f7ff ffa6 	bl	167e8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1689c:	3401      	adds	r4, #1
   1689e:	e7f7      	b.n	16890 <rtc_nrf_isr+0x2c>
   168a0:	40011000 	.word	0x40011000
   168a4:	2000384c 	.word	0x2000384c

000168a8 <sys_clock_set_timeout>:
{
   168a8:	b510      	push	{r4, lr}
   168aa:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   168ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   168b0:	d006      	beq.n	168c0 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   168b2:	2801      	cmp	r0, #1
   168b4:	dd09      	ble.n	168ca <sys_clock_set_timeout+0x22>
   168b6:	4b16      	ldr	r3, [pc, #88]	; (16910 <sys_clock_set_timeout+0x68>)
   168b8:	4298      	cmp	r0, r3
   168ba:	dd07      	ble.n	168cc <sys_clock_set_timeout+0x24>
   168bc:	4815      	ldr	r0, [pc, #84]	; (16914 <sys_clock_set_timeout+0x6c>)
   168be:	e005      	b.n	168cc <sys_clock_set_timeout+0x24>
		sys_busy = false;
   168c0:	4b15      	ldr	r3, [pc, #84]	; (16918 <sys_clock_set_timeout+0x70>)
   168c2:	2200      	movs	r2, #0
   168c4:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   168c6:	4c15      	ldr	r4, [pc, #84]	; (1691c <sys_clock_set_timeout+0x74>)
   168c8:	e004      	b.n	168d4 <sys_clock_set_timeout+0x2c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   168ca:	2001      	movs	r0, #1
		cyc *= CYC_PER_TICK;
   168cc:	0144      	lsls	r4, r0, #5
		sys_busy = true;
   168ce:	4b12      	ldr	r3, [pc, #72]	; (16918 <sys_clock_set_timeout+0x70>)
   168d0:	2201      	movs	r2, #1
   168d2:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   168d4:	f7ff fed4 	bl	16680 <z_nrf_rtc_timer_read>
   168d8:	4b11      	ldr	r3, [pc, #68]	; (16920 <sys_clock_set_timeout+0x78>)
   168da:	681a      	ldr	r2, [r3, #0]
   168dc:	685b      	ldr	r3, [r3, #4]
   168de:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   168e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   168e4:	d300      	bcc.n	168e8 <sys_clock_set_timeout+0x40>
		cyc = 0;
   168e6:	2400      	movs	r4, #0
	cyc += unannounced;
   168e8:	1821      	adds	r1, r4, r0
	cyc = DIV_ROUND_UP(cyc, CYC_PER_TICK) * CYC_PER_TICK;
   168ea:	311f      	adds	r1, #31
   168ec:	f021 011f 	bic.w	r1, r1, #31
	if (cyc > MAX_CYCLES) {
   168f0:	480a      	ldr	r0, [pc, #40]	; (1691c <sys_clock_set_timeout+0x74>)
   168f2:	4281      	cmp	r1, r0
   168f4:	d900      	bls.n	168f8 <sys_clock_set_timeout+0x50>
		cyc = MAX_CYCLES;
   168f6:	4601      	mov	r1, r0
	uint64_t target_time = cyc + last_count;
   168f8:	2000      	movs	r0, #0
   168fa:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   168fc:	9001      	str	r0, [sp, #4]
   168fe:	4909      	ldr	r1, [pc, #36]	; (16924 <sys_clock_set_timeout+0x7c>)
   16900:	9100      	str	r1, [sp, #0]
   16902:	f143 0300 	adc.w	r3, r3, #0
   16906:	f00c fda2 	bl	2344e <compare_set>
}
   1690a:	b002      	add	sp, #8
   1690c:	bd10      	pop	{r4, pc}
   1690e:	bf00      	nop
   16910:	0003fffe 	.word	0x0003fffe
   16914:	0003ffff 	.word	0x0003ffff
   16918:	20004bb0 	.word	0x20004bb0
   1691c:	007fffe0 	.word	0x007fffe0
   16920:	20001be0 	.word	0x20001be0
   16924:	00016629 	.word	0x00016629

00016928 <sys_clock_elapsed>:
{
   16928:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1692a:	f7ff fea9 	bl	16680 <z_nrf_rtc_timer_read>
   1692e:	4a05      	ldr	r2, [pc, #20]	; (16944 <sys_clock_elapsed+0x1c>)
   16930:	6813      	ldr	r3, [r2, #0]
   16932:	6852      	ldr	r2, [r2, #4]
   16934:	1ac0      	subs	r0, r0, r3
   16936:	eb61 0102 	sbc.w	r1, r1, r2
   1693a:	0940      	lsrs	r0, r0, #5
}
   1693c:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
   16940:	bd08      	pop	{r3, pc}
   16942:	bf00      	nop
   16944:	20001be0 	.word	0x20001be0

00016948 <sys_clock_disable>:
{
   16948:	b508      	push	{r3, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1694a:	4b07      	ldr	r3, [pc, #28]	; (16968 <sys_clock_disable+0x20>)
   1694c:	2201      	movs	r2, #1
   1694e:	605a      	str	r2, [r3, #4]
	irq_disable(RTC_IRQn);
   16950:	2011      	movs	r0, #17
   16952:	f00b f941 	bl	21bd8 <arch_irq_disable>
	int_event_disable_rtc();
   16956:	f7ff fdd5 	bl	16504 <int_event_disable_rtc>
   1695a:	4b04      	ldr	r3, [pc, #16]	; (1696c <sys_clock_disable+0x24>)
   1695c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   16960:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16964:	bd08      	pop	{r3, pc}
   16966:	bf00      	nop
   16968:	40011000 	.word	0x40011000
   1696c:	e000e100 	.word	0xe000e100

00016970 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   16970:	b508      	push	{r3, lr}
   16972:	4602      	mov	r2, r0
   16974:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   16976:	4802      	ldr	r0, [pc, #8]	; (16980 <multithreading_lock_acquire+0x10>)
   16978:	f002 fdde 	bl	19538 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1697c:	bd08      	pop	{r3, pc}
   1697e:	bf00      	nop
   16980:	20000874 	.word	0x20000874

00016984 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   16984:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   16986:	4802      	ldr	r0, [pc, #8]	; (16990 <multithreading_lock_release+0xc>)
   16988:	f002 fe5a 	bl	19640 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1698c:	bd08      	pop	{r3, pc}
   1698e:	bf00      	nop
   16990:	20000874 	.word	0x20000874

00016994 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   16994:	b510      	push	{r4, lr}
   16996:	4603      	mov	r3, r0
   16998:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1699a:	4803      	ldr	r0, [pc, #12]	; (169a8 <rand_prio_low_vector_get_blocking+0x14>)
   1699c:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1699e:	680c      	ldr	r4, [r1, #0]
   169a0:	4619      	mov	r1, r3
   169a2:	47a0      	blx	r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   169a4:	bd10      	pop	{r4, pc}
   169a6:	bf00      	nop
   169a8:	00025c14 	.word	0x00025c14

000169ac <receive_signal_raise>:
{
   169ac:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   169ae:	4902      	ldr	r1, [pc, #8]	; (169b8 <receive_signal_raise+0xc>)
   169b0:	4802      	ldr	r0, [pc, #8]	; (169bc <receive_signal_raise+0x10>)
   169b2:	f00d feef 	bl	24794 <k_work_submit_to_queue>
}
   169b6:	bd08      	pop	{r3, pc}
   169b8:	20003898 	.word	0x20003898
   169bc:	20001e50 	.word	0x20001e50

000169c0 <cmd_handle>:
{
   169c0:	b538      	push	{r3, r4, r5, lr}
   169c2:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   169c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   169c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   169cc:	f7ff ffd0 	bl	16970 <multithreading_lock_acquire>
	if (!errcode) {
   169d0:	4604      	mov	r4, r0
   169d2:	b108      	cbz	r0, 169d8 <cmd_handle+0x18>
}
   169d4:	4620      	mov	r0, r4
   169d6:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   169d8:	68e8      	ldr	r0, [r5, #12]
   169da:	f000 f969 	bl	16cb0 <hci_internal_cmd_put>
   169de:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   169e0:	f7ff ffd0 	bl	16984 <multithreading_lock_release>
	if (errcode) {
   169e4:	2c00      	cmp	r4, #0
   169e6:	d1f5      	bne.n	169d4 <cmd_handle+0x14>
   169e8:	4902      	ldr	r1, [pc, #8]	; (169f4 <cmd_handle+0x34>)
   169ea:	4803      	ldr	r0, [pc, #12]	; (169f8 <cmd_handle+0x38>)
   169ec:	f00d fed2 	bl	24794 <k_work_submit_to_queue>
	return 0;
   169f0:	e7f0      	b.n	169d4 <cmd_handle+0x14>
   169f2:	bf00      	nop
   169f4:	20003898 	.word	0x20003898
   169f8:	20001e50 	.word	0x20001e50

000169fc <rand_prio_high_vector_get>:
{
   169fc:	b510      	push	{r4, lr}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   169fe:	4b08      	ldr	r3, [pc, #32]	; (16a20 <rand_prio_high_vector_get+0x24>)
   16a00:	689b      	ldr	r3, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   16a02:	685c      	ldr	r4, [r3, #4]
   16a04:	b144      	cbz	r4, 16a18 <rand_prio_high_vector_get+0x1c>
   16a06:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   16a08:	2300      	movs	r3, #0
   16a0a:	4601      	mov	r1, r0
   16a0c:	4804      	ldr	r0, [pc, #16]	; (16a20 <rand_prio_high_vector_get+0x24>)
   16a0e:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   16a10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   16a14:	b2c0      	uxtb	r0, r0
   16a16:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   16a18:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16a1c:	e7f8      	b.n	16a10 <rand_prio_high_vector_get+0x14>
   16a1e:	bf00      	nop
   16a20:	00025c14 	.word	0x00025c14

00016a24 <rand_prio_low_vector_get>:
{
   16a24:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
   16a26:	4b08      	ldr	r3, [pc, #32]	; (16a48 <rand_prio_low_vector_get+0x24>)
   16a28:	689b      	ldr	r3, [r3, #8]
	if (unlikely(!api->get_entropy_isr)) {
   16a2a:	685c      	ldr	r4, [r3, #4]
   16a2c:	b144      	cbz	r4, 16a40 <rand_prio_low_vector_get+0x1c>
   16a2e:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   16a30:	2300      	movs	r3, #0
   16a32:	4601      	mov	r1, r0
   16a34:	4804      	ldr	r0, [pc, #16]	; (16a48 <rand_prio_low_vector_get+0x24>)
   16a36:	47a0      	blx	r4
	return ret >= 0 ? ret : 0;
   16a38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   16a3c:	b2c0      	uxtb	r0, r0
   16a3e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   16a40:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16a44:	e7f8      	b.n	16a38 <rand_prio_low_vector_get+0x14>
   16a46:	bf00      	nop
   16a48:	00025c14 	.word	0x00025c14

00016a4c <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   16a4c:	b510      	push	{r4, lr}
   16a4e:	b088      	sub	sp, #32
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   16a50:	4918      	ldr	r1, [pc, #96]	; (16ab4 <hci_driver_open+0x68>)
   16a52:	4819      	ldr	r0, [pc, #100]	; (16ab8 <hci_driver_open+0x6c>)
   16a54:	f00d fe82 	bl	2475c <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   16a58:	a803      	add	r0, sp, #12
   16a5a:	f7eb fa19 	bl	1e90 <sdc_build_revision_get>
   16a5e:	4817      	ldr	r0, [pc, #92]	; (16abc <hci_driver_open+0x70>)
   16a60:	f00d fbd2 	bl	24208 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   16a64:	b1f8      	cbz	r0, 16aa6 <hci_driver_open+0x5a>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   16a66:	4a16      	ldr	r2, [pc, #88]	; (16ac0 <hci_driver_open+0x74>)
   16a68:	466b      	mov	r3, sp
   16a6a:	ca07      	ldmia	r2, {r0, r1, r2}
   16a6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   16a70:	4618      	mov	r0, r3
   16a72:	f7eb fb77 	bl	2164 <sdc_rand_source_register>
	if (err) {
   16a76:	b9c8      	cbnz	r0, 16aac <hci_driver_open+0x60>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   16a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16a80:	f7ff ff76 	bl	16970 <multithreading_lock_acquire>
	if (err) {
   16a84:	4604      	mov	r4, r0
   16a86:	b110      	cbz	r0, 16a8e <hci_driver_open+0x42>
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   16a88:	4620      	mov	r0, r4
   16a8a:	b008      	add	sp, #32
   16a8c:	bd10      	pop	{r4, pc}
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   16a8e:	490d      	ldr	r1, [pc, #52]	; (16ac4 <hci_driver_open+0x78>)
   16a90:	480d      	ldr	r0, [pc, #52]	; (16ac8 <hci_driver_open+0x7c>)
   16a92:	f7eb fa6b 	bl	1f6c <sdc_enable>
	if (err) {
   16a96:	4604      	mov	r4, r0
   16a98:	b910      	cbnz	r0, 16aa0 <hci_driver_open+0x54>
	MULTITHREADING_LOCK_RELEASE();
   16a9a:	f7ff ff73 	bl	16984 <multithreading_lock_release>
	return 0;
   16a9e:	e7f3      	b.n	16a88 <hci_driver_open+0x3c>
		MULTITHREADING_LOCK_RELEASE();
   16aa0:	f7ff ff70 	bl	16984 <multithreading_lock_release>
		return err;
   16aa4:	e7f0      	b.n	16a88 <hci_driver_open+0x3c>
		return -ENODEV;
   16aa6:	f06f 0412 	mvn.w	r4, #18
   16aaa:	e7ed      	b.n	16a88 <hci_driver_open+0x3c>
		return -EINVAL;
   16aac:	f06f 0415 	mvn.w	r4, #21
   16ab0:	e7ea      	b.n	16a88 <hci_driver_open+0x3c>
   16ab2:	bf00      	nop
   16ab4:	0002368d 	.word	0x0002368d
   16ab8:	20003898 	.word	0x20003898
   16abc:	00025c14 	.word	0x00025c14
   16ac0:	00026008 	.word	0x00026008
   16ac4:	20001bf0 	.word	0x20001bf0
   16ac8:	000169ad 	.word	0x000169ad

00016acc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   16acc:	b508      	push	{r3, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
   16ace:	4806      	ldr	r0, [pc, #24]	; (16ae8 <hci_driver_init+0x1c>)
   16ad0:	f7fd fbcc 	bl	1426c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   16ad4:	4805      	ldr	r0, [pc, #20]	; (16aec <hci_driver_init+0x20>)
   16ad6:	f7eb fa73 	bl	1fc0 <sdc_init>

	err = configure_supported_features();
   16ada:	f00c fd7b 	bl	235d4 <configure_supported_features>
	if (err) {
   16ade:	b100      	cbz	r0, 16ae2 <hci_driver_init+0x16>
	if (err) {
		return err;
	}

	return err;
}
   16ae0:	bd08      	pop	{r3, pc}
	err = configure_memory_usage();
   16ae2:	f00c fd7f 	bl	235e4 <configure_memory_usage>
	if (err) {
   16ae6:	e7fb      	b.n	16ae0 <hci_driver_init+0x14>
   16ae8:	000269f0 	.word	0x000269f0
   16aec:	00023491 	.word	0x00023491

00016af0 <hci_driver_receive_process>:
{
   16af0:	b508      	push	{r3, lr}
	if (fetch_and_process_hci_msg(&hci_buf[0])) {
   16af2:	4805      	ldr	r0, [pc, #20]	; (16b08 <hci_driver_receive_process+0x18>)
   16af4:	f00c fd1a 	bl	2352c <fetch_and_process_hci_msg>
   16af8:	b900      	cbnz	r0, 16afc <hci_driver_receive_process+0xc>
}
   16afa:	bd08      	pop	{r3, pc}
   16afc:	4903      	ldr	r1, [pc, #12]	; (16b0c <hci_driver_receive_process+0x1c>)
   16afe:	4804      	ldr	r0, [pc, #16]	; (16b10 <hci_driver_receive_process+0x20>)
   16b00:	f00d fe48 	bl	24794 <k_work_submit_to_queue>
   16b04:	e7f9      	b.n	16afa <hci_driver_receive_process+0xa>
   16b06:	bf00      	nop
   16b08:	20003850 	.word	0x20003850
   16b0c:	20003898 	.word	0x20003898
   16b10:	20001e50 	.word	0x20001e50

00016b14 <command_generates_command_complete_event>:

static hci_internal_user_cmd_handler_t user_cmd_handler;

static bool command_generates_command_complete_event(uint16_t hci_opcode)
{
	switch (hci_opcode) {
   16b14:	f242 0332 	movw	r3, #8242	; 0x2032
   16b18:	4298      	cmp	r0, r3
   16b1a:	d04a      	beq.n	16bb2 <command_generates_command_complete_event+0x9e>
   16b1c:	d82d      	bhi.n	16b7a <command_generates_command_complete_event+0x66>
   16b1e:	f242 0326 	movw	r3, #8230	; 0x2026
   16b22:	4298      	cmp	r0, r3
   16b24:	d847      	bhi.n	16bb6 <command_generates_command_complete_event+0xa2>
   16b26:	f242 030d 	movw	r3, #8205	; 0x200d
   16b2a:	4298      	cmp	r0, r3
   16b2c:	d218      	bcs.n	16b60 <command_generates_command_complete_event+0x4c>
   16b2e:	f240 4306 	movw	r3, #1030	; 0x406
   16b32:	4298      	cmp	r0, r3
   16b34:	d041      	beq.n	16bba <command_generates_command_complete_event+0xa6>
   16b36:	f240 431d 	movw	r3, #1053	; 0x41d
   16b3a:	4298      	cmp	r0, r3
   16b3c:	d001      	beq.n	16b42 <command_generates_command_complete_event+0x2e>
	case SDC_HCI_OPCODE_CMD_VS_WRITE_REMOTE_TX_POWER:
	case BT_HCI_OP_LE_P256_PUBLIC_KEY:
	case BT_HCI_OP_LE_GENERATE_DHKEY:
		return false;
	default:
		return true;
   16b3e:	2001      	movs	r0, #1
   16b40:	4770      	bx	lr
	switch (hci_opcode) {
   16b42:	2000      	movs	r0, #0
   16b44:	4770      	bx	lr
   16b46:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   16b4a:	382d      	subs	r0, #45	; 0x2d
   16b4c:	b280      	uxth	r0, r0
   16b4e:	4b1e      	ldr	r3, [pc, #120]	; (16bc8 <command_generates_command_complete_event+0xb4>)
   16b50:	40c3      	lsrs	r3, r0
   16b52:	f013 0f01 	tst.w	r3, #1
   16b56:	d101      	bne.n	16b5c <command_generates_command_complete_event+0x48>
		return true;
   16b58:	2001      	movs	r0, #1
   16b5a:	4770      	bx	lr
	switch (hci_opcode) {
   16b5c:	2000      	movs	r0, #0
   16b5e:	4770      	bx	lr
   16b60:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   16b64:	380d      	subs	r0, #13
   16b66:	b280      	uxth	r0, r0
   16b68:	4b18      	ldr	r3, [pc, #96]	; (16bcc <command_generates_command_complete_event+0xb8>)
   16b6a:	40c3      	lsrs	r3, r0
   16b6c:	f013 0f01 	tst.w	r3, #1
   16b70:	d101      	bne.n	16b76 <command_generates_command_complete_event+0x62>
		return true;
   16b72:	2001      	movs	r0, #1
   16b74:	4770      	bx	lr
	switch (hci_opcode) {
   16b76:	2000      	movs	r0, #0
   16b78:	4770      	bx	lr
   16b7a:	f242 0385 	movw	r3, #8325	; 0x2085
   16b7e:	4298      	cmp	r0, r3
   16b80:	d80b      	bhi.n	16b9a <command_generates_command_complete_event+0x86>
   16b82:	f242 036d 	movw	r3, #8301	; 0x206d
   16b86:	4298      	cmp	r0, r3
   16b88:	d2dd      	bcs.n	16b46 <command_generates_command_complete_event+0x32>
   16b8a:	f5a0 5001 	sub.w	r0, r0, #8256	; 0x2040
   16b8e:	3803      	subs	r0, #3
   16b90:	b280      	uxth	r0, r0
   16b92:	2801      	cmp	r0, #1
   16b94:	d913      	bls.n	16bbe <command_generates_command_complete_event+0xaa>
		return true;
   16b96:	2001      	movs	r0, #1
   16b98:	4770      	bx	lr
	switch (hci_opcode) {
   16b9a:	f64f 5302 	movw	r3, #64770	; 0xfd02
   16b9e:	4298      	cmp	r0, r3
   16ba0:	d00f      	beq.n	16bc2 <command_generates_command_complete_event+0xae>
   16ba2:	f64f 530a 	movw	r3, #64778	; 0xfd0a
   16ba6:	4298      	cmp	r0, r3
   16ba8:	d001      	beq.n	16bae <command_generates_command_complete_event+0x9a>
		return true;
   16baa:	2001      	movs	r0, #1
	}
}
   16bac:	4770      	bx	lr
	switch (hci_opcode) {
   16bae:	2000      	movs	r0, #0
   16bb0:	4770      	bx	lr
   16bb2:	2000      	movs	r0, #0
   16bb4:	4770      	bx	lr
		return true;
   16bb6:	2001      	movs	r0, #1
   16bb8:	4770      	bx	lr
	switch (hci_opcode) {
   16bba:	2000      	movs	r0, #0
   16bbc:	4770      	bx	lr
   16bbe:	2000      	movs	r0, #0
   16bc0:	4770      	bx	lr
   16bc2:	2000      	movs	r0, #0
   16bc4:	4770      	bx	lr
   16bc6:	bf00      	nop
   16bc8:	01000401 	.word	0x01000401
   16bcc:	03001241 	.word	0x03001241

00016bd0 <cmd_put>:
	}
}
#endif /* CONFIG_BT_HCI_VS */

static void cmd_put(uint8_t *cmd_in, uint8_t * const raw_event_out)
{
   16bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bd2:	b083      	sub	sp, #12
   16bd4:	4607      	mov	r7, r0
   16bd6:	460e      	mov	r6, r1
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   16bd8:	7843      	ldrb	r3, [r0, #1]
   16bda:	7805      	ldrb	r5, [r0, #0]
   16bdc:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	uint8_t status = BT_HCI_ERR_UNKNOWN_CMD;
	uint16_t opcode = sys_get_le16(cmd_in);
	bool generate_command_status_event;

	/* Assume command complete */
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   16be0:	2304      	movs	r3, #4
   16be2:	f88d 3006 	strb.w	r3, [sp, #6]
				      + sizeof(struct bt_hci_evt_cc_status);

	if (user_cmd_handler) {
   16be6:	4b31      	ldr	r3, [pc, #196]	; (16cac <cmd_put+0xdc>)
   16be8:	681c      	ldr	r4, [r3, #0]
   16bea:	b13c      	cbz	r4, 16bfc <cmd_put+0x2c>
		status = user_cmd_handler(cmd_in,
   16bec:	f10d 0307 	add.w	r3, sp, #7
   16bf0:	f10d 0206 	add.w	r2, sp, #6
   16bf4:	47a0      	blx	r4
   16bf6:	4604      	mov	r4, r0
					  raw_event_out,
					  &return_param_length,
					  &generate_command_status_event);
	}

	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   16bf8:	2801      	cmp	r0, #1
   16bfa:	d11f      	bne.n	16c3c <cmd_put+0x6c>

		switch (BT_OGF(opcode)) {
   16bfc:	0aab      	lsrs	r3, r5, #10
   16bfe:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   16c02:	d209      	bcs.n	16c18 <cmd_put+0x48>
   16c04:	2b03      	cmp	r3, #3
   16c06:	d345      	bcc.n	16c94 <cmd_put+0xc4>
   16c08:	3b03      	subs	r3, #3
   16c0a:	2b05      	cmp	r3, #5
   16c0c:	d844      	bhi.n	16c98 <cmd_put+0xc8>
   16c0e:	e8df f003 	tbb	[pc, r3]
   16c12:	2921      	.short	0x2921
   16c14:	39434331 	.word	0x39434331
   16c18:	2b3f      	cmp	r3, #63	; 0x3f
   16c1a:	d107      	bne.n	16c2c <cmd_put+0x5c>
						       raw_event_out,
						       &return_param_length);
			break;
#if defined(CONFIG_BT_HCI_VS)
		case BT_OGF_VS:
			status = vs_cmd_put(cmd_in,
   16c1c:	f10d 0206 	add.w	r2, sp, #6
   16c20:	4631      	mov	r1, r6
   16c22:	4638      	mov	r0, r7
   16c24:	f00c ff1b 	bl	23a5e <vs_cmd_put>
   16c28:	4604      	mov	r4, r0
					    raw_event_out,
					    &return_param_length);
			break;
   16c2a:	e000      	b.n	16c2e <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
   16c2c:	2401      	movs	r4, #1
		default:
			status = BT_HCI_ERR_UNKNOWN_CMD;
			break;
		}

		generate_command_status_event = !command_generates_command_complete_event(opcode);
   16c2e:	4628      	mov	r0, r5
   16c30:	f7ff ff70 	bl	16b14 <command_generates_command_complete_event>
   16c34:	f080 0001 	eor.w	r0, r0, #1
   16c38:	f88d 0007 	strb.w	r0, [sp, #7]
	}

	if (generate_command_status_event ||
   16c3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16c40:	b90b      	cbnz	r3, 16c46 <cmd_put+0x76>
   16c42:	2c01      	cmp	r4, #1
   16c44:	d12a      	bne.n	16c9c <cmd_put+0xcc>
	    (status == BT_HCI_ERR_UNKNOWN_CMD))	{
		encode_command_status(raw_event_out, opcode, status);
   16c46:	4622      	mov	r2, r4
   16c48:	4629      	mov	r1, r5
   16c4a:	4630      	mov	r0, r6
   16c4c:	f00c fd22 	bl	23694 <encode_command_status>
	} else {
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}
   16c50:	b003      	add	sp, #12
   16c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = controller_and_baseband_cmd_put(cmd_in,
   16c54:	f10d 0206 	add.w	r2, sp, #6
   16c58:	4631      	mov	r1, r6
   16c5a:	4638      	mov	r0, r7
   16c5c:	f00c fd35 	bl	236ca <controller_and_baseband_cmd_put>
   16c60:	4604      	mov	r4, r0
			break;
   16c62:	e7e4      	b.n	16c2e <cmd_put+0x5e>
			status = info_param_cmd_put(cmd_in,
   16c64:	f10d 0206 	add.w	r2, sp, #6
   16c68:	4631      	mov	r1, r6
   16c6a:	4638      	mov	r0, r7
   16c6c:	f00c fdcf 	bl	2380e <info_param_cmd_put>
   16c70:	4604      	mov	r4, r0
			break;
   16c72:	e7dc      	b.n	16c2e <cmd_put+0x5e>
			status = status_param_cmd_put(cmd_in,
   16c74:	f10d 0206 	add.w	r2, sp, #6
   16c78:	4631      	mov	r1, r6
   16c7a:	4638      	mov	r0, r7
   16c7c:	f00c fd23 	bl	236c6 <status_param_cmd_put>
   16c80:	4604      	mov	r4, r0
			break;
   16c82:	e7d4      	b.n	16c2e <cmd_put+0x5e>
			status = le_controller_cmd_put(cmd_in,
   16c84:	f10d 0206 	add.w	r2, sp, #6
   16c88:	4631      	mov	r1, r6
   16c8a:	4638      	mov	r0, r7
   16c8c:	f00c fe3e 	bl	2390c <le_controller_cmd_put>
   16c90:	4604      	mov	r4, r0
			break;
   16c92:	e7cc      	b.n	16c2e <cmd_put+0x5e>
		switch (BT_OGF(opcode)) {
   16c94:	2401      	movs	r4, #1
   16c96:	e7ca      	b.n	16c2e <cmd_put+0x5e>
   16c98:	2401      	movs	r4, #1
   16c9a:	e7c8      	b.n	16c2e <cmd_put+0x5e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   16c9c:	4623      	mov	r3, r4
   16c9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16ca2:	4629      	mov	r1, r5
   16ca4:	4630      	mov	r0, r6
   16ca6:	f00c fcfe 	bl	236a6 <encode_command_complete_header>
}
   16caa:	e7d1      	b.n	16c50 <cmd_put+0x80>
   16cac:	200038a8 	.word	0x200038a8

00016cb0 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   16cb0:	b538      	push	{r3, r4, r5, lr}
   16cb2:	7842      	ldrb	r2, [r0, #1]
   16cb4:	7803      	ldrb	r3, [r0, #0]
   16cb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16cba:	b21c      	sxth	r4, r3
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   16cbc:	4b0e      	ldr	r3, [pc, #56]	; (16cf8 <hci_internal_cmd_put+0x48>)
   16cbe:	781b      	ldrb	r3, [r3, #0]
   16cc0:	b9b3      	cbnz	r3, 16cf0 <hci_internal_cmd_put+0x40>
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   16cc2:	4d0e      	ldr	r5, [pc, #56]	; (16cfc <hci_internal_cmd_put+0x4c>)
   16cc4:	4629      	mov	r1, r5
   16cc6:	f7ff ff83 	bl	16bd0 <cmd_put>
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
   16cca:	2301      	movs	r3, #1
   16ccc:	f805 3c01 	strb.w	r3, [r5, #-1]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   16cd0:	f242 0383 	movw	r3, #8323	; 0x2083
   16cd4:	429c      	cmp	r4, r3
   16cd6:	d001      	beq.n	16cdc <hci_internal_cmd_put+0x2c>
		 */

		cmd_complete_or_status.occurred = false;
	}

	return 0;
   16cd8:	2000      	movs	r0, #0
}
   16cda:	bd38      	pop	{r3, r4, r5, pc}
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
   16cdc:	1e6b      	subs	r3, r5, #1
   16cde:	785b      	ldrb	r3, [r3, #1]
		&&
   16ce0:	2b0e      	cmp	r3, #14
   16ce2:	d001      	beq.n	16ce8 <hci_internal_cmd_put+0x38>
	return 0;
   16ce4:	2000      	movs	r0, #0
   16ce6:	e7f8      	b.n	16cda <hci_internal_cmd_put+0x2a>
		cmd_complete_or_status.occurred = false;
   16ce8:	2000      	movs	r0, #0
   16cea:	1e6b      	subs	r3, r5, #1
   16cec:	7018      	strb	r0, [r3, #0]
   16cee:	e7f4      	b.n	16cda <hci_internal_cmd_put+0x2a>
		return -NRF_EPERM;
   16cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16cf4:	e7f1      	b.n	16cda <hci_internal_cmd_put+0x2a>
   16cf6:	bf00      	nop
   16cf8:	200038ac 	.word	0x200038ac
   16cfc:	200038ad 	.word	0x200038ad

00016d00 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   16d00:	b538      	push	{r3, r4, r5, lr}
   16d02:	460c      	mov	r4, r1
	if (cmd_complete_or_status.occurred) {
   16d04:	4b08      	ldr	r3, [pc, #32]	; (16d28 <hci_internal_msg_get+0x28>)
   16d06:	781b      	ldrb	r3, [r3, #0]
   16d08:	b153      	cbz	r3, 16d20 <hci_internal_msg_get+0x20>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(msg_out,
   16d0a:	4d07      	ldr	r5, [pc, #28]	; (16d28 <hci_internal_msg_get+0x28>)
   16d0c:	78aa      	ldrb	r2, [r5, #2]
   16d0e:	3202      	adds	r2, #2
   16d10:	1c69      	adds	r1, r5, #1
   16d12:	f00e f87a 	bl	24e0a <memcpy>
					 &cmd_complete_or_status.raw_event[0],
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   16d16:	2000      	movs	r0, #0
   16d18:	7028      	strb	r0, [r5, #0]

		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   16d1a:	2304      	movs	r3, #4
   16d1c:	7023      	strb	r3, [r4, #0]

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   16d1e:	bd38      	pop	{r3, r4, r5, pc}
	return sdc_hci_get(msg_out, msg_type_out);
   16d20:	f7f3 fa17 	bl	a152 <sdc_hci_get>
   16d24:	e7fb      	b.n	16d1e <hci_internal_msg_get+0x1e>
   16d26:	bf00      	nop
   16d28:	200038ac 	.word	0x200038ac

00016d2c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   16d2c:	b538      	push	{r3, r4, r5, lr}
   16d2e:	4605      	mov	r5, r0
   16d30:	460c      	mov	r4, r1
   16d32:	4809      	ldr	r0, [pc, #36]	; (16d58 <bt_rand+0x2c>)
   16d34:	f00d fa68 	bl	24208 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   16d38:	f080 0301 	eor.w	r3, r0, #1
   16d3c:	f013 0fff 	tst.w	r3, #255	; 0xff
   16d40:	d106      	bne.n	16d50 <bt_rand+0x24>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   16d42:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   16d44:	4804      	ldr	r0, [pc, #16]	; (16d58 <bt_rand+0x2c>)
   16d46:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   16d48:	681b      	ldr	r3, [r3, #0]
   16d4a:	4629      	mov	r1, r5
   16d4c:	4798      	blx	r3
}
   16d4e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   16d50:	f06f 0012 	mvn.w	r0, #18
   16d54:	e7fb      	b.n	16d4e <bt_rand+0x22>
   16d56:	bf00      	nop
   16d58:	00025c14 	.word	0x00025c14

00016d5c <mpsl_lib_init_internal>:
	return 0;
#endif
}

static int32_t mpsl_lib_init_internal(void)
{
   16d5c:	b500      	push	{lr}
   16d5e:	b083      	sub	sp, #12
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   16d60:	f00c ff02 	bl	23b68 <m_config_clock_source_get>
   16d64:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   16d68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   16d6c:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   16d70:	2300      	movs	r3, #0
   16d72:	f88d 3006 	strb.w	r3, [sp, #6]
	BUILD_ASSERT(IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION),
		    "MPSL requires clock calibration to be enabled when RC is used as LFCLK");

	/* clock_cfg.rc_ctiv is given in 1/4 seconds units.
	 * CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD is given in ms. */
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
   16d76:	2310      	movs	r3, #16
   16d78:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   16d7c:	2302      	movs	r3, #2
   16d7e:	f88d 3002 	strb.w	r3, [sp, #2]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   16d82:	4a07      	ldr	r2, [pc, #28]	; (16da0 <mpsl_lib_init_internal+0x44>)
   16d84:	2119      	movs	r1, #25
   16d86:	4668      	mov	r0, sp
   16d88:	f7f2 fbce 	bl	9528 <mpsl_init>
	if (err) {
   16d8c:	b110      	cbz	r0, 16d94 <mpsl_lib_init_internal+0x38>
		return err;
	}
#endif

	return 0;
}
   16d8e:	b003      	add	sp, #12
   16d90:	f85d fb04 	ldr.w	pc, [sp], #4
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   16d94:	2101      	movs	r1, #1
   16d96:	4803      	ldr	r0, [pc, #12]	; (16da4 <mpsl_lib_init_internal+0x48>)
   16d98:	f7f5 f8f3 	bl	bf82 <mpsl_timeslot_session_count_set>
	if (err) {
   16d9c:	e7f7      	b.n	16d8e <mpsl_lib_init_internal+0x32>
   16d9e:	bf00      	nop
   16da0:	00023b5b 	.word	0x00023b5b
   16da4:	200038f4 	.word	0x200038f4

00016da8 <mpsl_low_prio_init>:

	return 0;
}

static int mpsl_low_prio_init(void)
{
   16da8:	b530      	push	{r4, r5, lr}
   16daa:	b083      	sub	sp, #12

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   16dac:	4d0d      	ldr	r5, [pc, #52]	; (16de4 <mpsl_low_prio_init+0x3c>)
   16dae:	2400      	movs	r4, #0
   16db0:	9400      	str	r4, [sp, #0]
   16db2:	f06f 0309 	mvn.w	r3, #9
   16db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16dba:	490b      	ldr	r1, [pc, #44]	; (16de8 <mpsl_low_prio_init+0x40>)
   16dbc:	4628      	mov	r0, r5
   16dbe:	f7f6 fbf3 	bl	d5a8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   16dc2:	490a      	ldr	r1, [pc, #40]	; (16dec <mpsl_low_prio_init+0x44>)
   16dc4:	4628      	mov	r0, r5
   16dc6:	f002 fadd 	bl	19384 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   16dca:	4909      	ldr	r1, [pc, #36]	; (16df0 <mpsl_low_prio_init+0x48>)
   16dcc:	4809      	ldr	r0, [pc, #36]	; (16df4 <mpsl_low_prio_init+0x4c>)
   16dce:	f00d fcc5 	bl	2475c <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   16dd2:	4622      	mov	r2, r4
   16dd4:	2104      	movs	r1, #4
   16dd6:	2019      	movs	r0, #25
   16dd8:	f00a ff03 	bl	21be2 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   16ddc:	4620      	mov	r0, r4
   16dde:	b003      	add	sp, #12
   16de0:	bd30      	pop	{r4, r5, pc}
   16de2:	bf00      	nop
   16de4:	20001e50 	.word	0x20001e50
   16de8:	20006e00 	.word	0x20006e00
   16dec:	00026a18 	.word	0x00026a18
   16df0:	00023bf1 	.word	0x00023bf1
   16df4:	20003924 	.word	0x20003924

00016df8 <mpsl_low_prio_irq_handler>:
{
   16df8:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   16dfa:	4902      	ldr	r1, [pc, #8]	; (16e04 <mpsl_low_prio_irq_handler+0xc>)
   16dfc:	4802      	ldr	r0, [pc, #8]	; (16e08 <mpsl_low_prio_irq_handler+0x10>)
   16dfe:	f00d fcc9 	bl	24794 <k_work_submit_to_queue>
}
   16e02:	bd08      	pop	{r3, pc}
   16e04:	20003924 	.word	0x20003924
   16e08:	20001e50 	.word	0x20001e50

00016e0c <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   16e0c:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16e0e:	4b02      	ldr	r3, [pc, #8]	; (16e18 <mpsl_hfclk_callback+0xc>)
   16e10:	681b      	ldr	r3, [r3, #0]
   16e12:	2000      	movs	r0, #0
   16e14:	4798      	blx	r3
}
   16e16:	bd08      	pop	{r3, pc}
   16e18:	20003934 	.word	0x20003934

00016e1c <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   16e1c:	b508      	push	{r3, lr}
	switch (domain) {
   16e1e:	b128      	cbz	r0, 16e2c <nrfx_clock_start+0x10>
   16e20:	2801      	cmp	r0, #1
   16e22:	d102      	bne.n	16e2a <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   16e24:	4804      	ldr	r0, [pc, #16]	; (16e38 <nrfx_clock_start+0x1c>)
   16e26:	f7f2 f9ff 	bl	9228 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   16e2a:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16e2c:	4b03      	ldr	r3, [pc, #12]	; (16e3c <nrfx_clock_start+0x20>)
   16e2e:	681b      	ldr	r3, [r3, #0]
   16e30:	2001      	movs	r0, #1
   16e32:	4798      	blx	r3
}
   16e34:	e7f9      	b.n	16e2a <nrfx_clock_start+0xe>
   16e36:	bf00      	nop
   16e38:	00016e0d 	.word	0x00016e0d
   16e3c:	20003934 	.word	0x20003934

00016e40 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   16e40:	4b01      	ldr	r3, [pc, #4]	; (16e48 <nrfx_clock_init+0x8>)
   16e42:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   16e44:	4801      	ldr	r0, [pc, #4]	; (16e4c <nrfx_clock_init+0xc>)
   16e46:	4770      	bx	lr
   16e48:	20003934 	.word	0x20003934
   16e4c:	0bad0000 	.word	0x0bad0000

00016e50 <get_timeslot_time_us>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e50:	4b02      	ldr	r3, [pc, #8]	; (16e5c <get_timeslot_time_us+0xc>)
   16e52:	2201      	movs	r2, #1
   16e54:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   16e56:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
 */
static uint32_t get_timeslot_time_us(void)
{
	nrf_timer_task_trigger(NRF_TIMER0, NRF_TIMER_TASK_CAPTURE0);
	return nrf_timer_cc_get(NRF_TIMER0, NRF_TIMER_CC_CHANNEL0);
}
   16e5a:	4770      	bx	lr
   16e5c:	40008000 	.word	0x40008000

00016e60 <reschedule_next_timeslot>:

static void reschedule_next_timeslot(void)
{
   16e60:	b508      	push	{r3, lr}
	_context.timeslot_request.params.earliest.priority =
   16e62:	4b06      	ldr	r3, [pc, #24]	; (16e7c <reschedule_next_timeslot+0x1c>)
   16e64:	2200      	movs	r2, #0
   16e66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		MPSL_TIMESLOT_PRIORITY_HIGH;
	_context.timeslot_request.params.earliest.timeout_us =
   16e6a:	4a05      	ldr	r2, [pc, #20]	; (16e80 <reschedule_next_timeslot+0x20>)
   16e6c:	631a      	str	r2, [r3, #48]	; 0x30
		MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   16e6e:	f103 0124 	add.w	r1, r3, #36	; 0x24
   16e72:	7e18      	ldrb	r0, [r3, #24]
   16e74:	f7f5 f829 	bl	beca <mpsl_timeslot_request>
					    &_context.timeslot_request);

	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
}
   16e78:	bd08      	pop	{r3, pc}
   16e7a:	bf00      	nop
   16e7c:	20003938 	.word	0x20003938
   16e80:	0f423fff 	.word	0x0f423fff

00016e84 <timeslot_callback>:

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   16e84:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e86:	f3bf 8f5b 	dmb	ish
   16e8a:	4b1c      	ldr	r3, [pc, #112]	; (16efc <timeslot_callback+0x78>)
   16e8c:	681b      	ldr	r3, [r3, #0]
   16e8e:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   16e92:	bb83      	cbnz	r3, 16ef6 <timeslot_callback+0x72>
		return NULL;
	}

	switch (signal) {
   16e94:	2906      	cmp	r1, #6
   16e96:	d812      	bhi.n	16ebe <timeslot_callback+0x3a>
   16e98:	2905      	cmp	r1, #5
   16e9a:	d228      	bcs.n	16eee <timeslot_callback+0x6a>
   16e9c:	b969      	cbnz	r1, 16eba <timeslot_callback+0x36>
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   16e9e:	4b18      	ldr	r3, [pc, #96]	; (16f00 <timeslot_callback+0x7c>)
   16ea0:	6a1b      	ldr	r3, [r3, #32]
   16ea2:	681a      	ldr	r2, [r3, #0]
   16ea4:	6858      	ldr	r0, [r3, #4]
   16ea6:	4790      	blx	r2
   16ea8:	4603      	mov	r3, r0
		if (rc != FLASH_OP_ONGOING) {
   16eaa:	2801      	cmp	r0, #1
   16eac:	d010      	beq.n	16ed0 <timeslot_callback+0x4c>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   16eae:	4814      	ldr	r0, [pc, #80]	; (16f00 <timeslot_callback+0x7c>)
   16eb0:	63c3      	str	r3, [r0, #60]	; 0x3c
			_context.return_param.callback_action =
   16eb2:	2302      	movs	r3, #2
   16eb4:	f800 3f34 	strb.w	r3, [r0, #52]!
   16eb8:	e000      	b.n	16ebc <timeslot_callback+0x38>
	switch (signal) {
   16eba:	2000      	movs	r0, #0
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   16ebc:	bd08      	pop	{r3, pc}
	switch (signal) {
   16ebe:	2907      	cmp	r1, #7
   16ec0:	d104      	bne.n	16ecc <timeslot_callback+0x48>
	z_impl_k_sem_give(sem);
   16ec2:	480f      	ldr	r0, [pc, #60]	; (16f00 <timeslot_callback+0x7c>)
   16ec4:	f002 fc38 	bl	19738 <z_impl_k_sem_give>
		return NULL;
   16ec8:	2000      	movs	r0, #0
   16eca:	e7f7      	b.n	16ebc <timeslot_callback+0x38>
	switch (signal) {
   16ecc:	2000      	movs	r0, #0
   16ece:	e7f5      	b.n	16ebc <timeslot_callback+0x38>
			_context.timeslot_request.params.earliest.priority =
   16ed0:	480b      	ldr	r0, [pc, #44]	; (16f00 <timeslot_callback+0x7c>)
   16ed2:	2301      	movs	r3, #1
   16ed4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
			_context.timeslot_request.params.earliest.timeout_us =
   16ed8:	f247 5330 	movw	r3, #30000	; 0x7530
   16edc:	6303      	str	r3, [r0, #48]	; 0x30
			_context.return_param.callback_action =
   16ede:	2303      	movs	r3, #3
   16ee0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			_context.return_param.params.request.p_next =
   16ee4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   16ee8:	6383      	str	r3, [r0, #56]	; 0x38
	return &_context.return_param;
   16eea:	3034      	adds	r0, #52	; 0x34
   16eec:	e7e6      	b.n	16ebc <timeslot_callback+0x38>
		reschedule_next_timeslot();
   16eee:	f7ff ffb7 	bl	16e60 <reschedule_next_timeslot>
		return NULL;
   16ef2:	2000      	movs	r0, #0
   16ef4:	e7e2      	b.n	16ebc <timeslot_callback+0x38>
		return NULL;
   16ef6:	2000      	movs	r0, #0
   16ef8:	e7e0      	b.n	16ebc <timeslot_callback+0x38>
   16efa:	bf00      	nop
   16efc:	20003978 	.word	0x20003978
   16f00:	20003938 	.word	0x20003938

00016f04 <nrf_flash_sync_init>:

int nrf_flash_sync_init(void)
{
   16f04:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   16f06:	2201      	movs	r2, #1
   16f08:	2100      	movs	r1, #0
   16f0a:	4802      	ldr	r0, [pc, #8]	; (16f14 <nrf_flash_sync_init+0x10>)
   16f0c:	f00d fb96 	bl	2463c <z_impl_k_sem_init>
	LOG_DBG("");
	return k_sem_init(&_context.timeout_sem, 0, 1);
}
   16f10:	bd08      	pop	{r3, pc}
   16f12:	bf00      	nop
   16f14:	20003938 	.word	0x20003938

00016f18 <nrf_flash_sync_set_context>:

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   16f18:	4b01      	ldr	r3, [pc, #4]	; (16f20 <nrf_flash_sync_set_context+0x8>)
   16f1a:	61d8      	str	r0, [r3, #28]
}
   16f1c:	4770      	bx	lr
   16f1e:	bf00      	nop
   16f20:	20003938 	.word	0x20003938

00016f24 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   16f24:	b538      	push	{r3, r4, r5, lr}
   16f26:	4605      	mov	r5, r0
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   16f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16f30:	f7ff fd1e 	bl	16970 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   16f34:	4933      	ldr	r1, [pc, #204]	; (17004 <nrf_flash_sync_exe+0xe0>)
   16f36:	4834      	ldr	r0, [pc, #208]	; (17008 <nrf_flash_sync_exe+0xe4>)
   16f38:	f7ee ff72 	bl	5e20 <mpsl_timeslot_session_open>
   16f3c:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   16f3e:	f7ff fd21 	bl	16984 <multithreading_lock_release>

	if (ret < 0) {
   16f42:	2c00      	cmp	r4, #0
   16f44:	db5a      	blt.n	16ffc <nrf_flash_sync_exe+0xd8>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   16f46:	4c31      	ldr	r4, [pc, #196]	; (1700c <nrf_flash_sync_exe+0xe8>)
   16f48:	2200      	movs	r2, #0
   16f4a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   16f4e:	2301      	movs	r3, #1
   16f50:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
   16f54:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   16f58:	69e3      	ldr	r3, [r4, #28]
   16f5a:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   16f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   16f5e:	f247 5330 	movw	r3, #30000	; 0x7530
   16f62:	6323      	str	r3, [r4, #48]	; 0x30

	_context.op_desc = op_desc;
   16f64:	6225      	str	r5, [r4, #32]
	_context.status = -ETIMEDOUT;
   16f66:	f06f 0373 	mvn.w	r3, #115	; 0x73
   16f6a:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16f6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   16f70:	f3bf 8f5b 	dmb	ish
   16f74:	e853 1f00 	ldrex	r1, [r3]
   16f78:	e843 2000 	strex	r0, r2, [r3]
   16f7c:	2800      	cmp	r0, #0
   16f7e:	d1f9      	bne.n	16f74 <nrf_flash_sync_exe+0x50>
   16f80:	f3bf 8f5b 	dmb	ish
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   16f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16f8c:	f7ff fcf0 	bl	16970 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	ret = mpsl_timeslot_request(_context.session_id, req);
   16f90:	f104 0124 	add.w	r1, r4, #36	; 0x24
   16f94:	7e20      	ldrb	r0, [r4, #24]
   16f96:	f7f4 ff98 	bl	beca <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   16f9a:	f7ff fcf3 	bl	16984 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   16f9e:	f645 12b3 	movw	r2, #22963	; 0x59b3
   16fa2:	2300      	movs	r3, #0
   16fa4:	4620      	mov	r0, r4
   16fa6:	f002 fbef 	bl	19788 <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   16faa:	2800      	cmp	r0, #0
   16fac:	db14      	blt.n	16fd8 <nrf_flash_sync_exe+0xb4>
		LOG_ERR("timeout");
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   16fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16fb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16fb6:	f7ff fcdb 	bl	16970 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	mpsl_timeslot_session_close(_context.session_id);
   16fba:	4c14      	ldr	r4, [pc, #80]	; (1700c <nrf_flash_sync_exe+0xe8>)
   16fbc:	7e20      	ldrb	r0, [r4, #24]
   16fbe:	f7f4 ffbf 	bl	bf40 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   16fc2:	f7ff fcdf 	bl	16984 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16fc6:	f3bf 8f5b 	dmb	ish
   16fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16fcc:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   16fd0:	b983      	cbnz	r3, 16ff4 <nrf_flash_sync_exe+0xd0>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   16fd2:	4b0e      	ldr	r3, [pc, #56]	; (1700c <nrf_flash_sync_exe+0xe8>)
   16fd4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}
   16fd6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16fd8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   16fdc:	2201      	movs	r2, #1
   16fde:	f3bf 8f5b 	dmb	ish
   16fe2:	e853 1f00 	ldrex	r1, [r3]
   16fe6:	e843 2000 	strex	r0, r2, [r3]
   16fea:	2800      	cmp	r0, #0
   16fec:	d1f9      	bne.n	16fe2 <nrf_flash_sync_exe+0xbe>
   16fee:	f3bf 8f5b 	dmb	ish
   16ff2:	e7dc      	b.n	16fae <nrf_flash_sync_exe+0x8a>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
   16ff4:	4620      	mov	r0, r4
   16ff6:	f002 fbef 	bl	197d8 <z_impl_k_sem_reset>
}
   16ffa:	e7ea      	b.n	16fd2 <nrf_flash_sync_exe+0xae>
		return -ENOMEM;
   16ffc:	f06f 000b 	mvn.w	r0, #11
   17000:	e7e9      	b.n	16fd6 <nrf_flash_sync_exe+0xb2>
   17002:	bf00      	nop
   17004:	20003950 	.word	0x20003950
   17008:	00016e85 	.word	0x00016e85
   1700c:	20003938 	.word	0x20003938

00017010 <nrf_flash_sync_check_time_limit>:
{
	/* Not needed for this driver. */
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   17010:	b510      	push	{r4, lr}
   17012:	4604      	mov	r4, r0
	uint32_t now_us = get_timeslot_time_us();
   17014:	f7ff ff1c 	bl	16e50 <get_timeslot_time_us>
	uint32_t time_per_iteration_us = now_us / iteration;
   17018:	fbb0 f4f4 	udiv	r4, r0, r4
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1701c:	4420      	add	r0, r4
   1701e:	4b03      	ldr	r3, [pc, #12]	; (1702c <nrf_flash_sync_check_time_limit+0x1c>)
   17020:	69db      	ldr	r3, [r3, #28]
}
   17022:	4298      	cmp	r0, r3
   17024:	bf34      	ite	cc
   17026:	2000      	movcc	r0, #0
   17028:	2001      	movcs	r0, #1
   1702a:	bd10      	pop	{r4, pc}
   1702c:	20003938 	.word	0x20003938

00017030 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   17030:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17034:	4905      	ldr	r1, [pc, #20]	; (1704c <__NVIC_SystemReset+0x1c>)
   17036:	68ca      	ldr	r2, [r1, #12]
   17038:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1703c:	4b04      	ldr	r3, [pc, #16]	; (17050 <__NVIC_SystemReset+0x20>)
   1703e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17040:	60cb      	str	r3, [r1, #12]
   17042:	f3bf 8f4f 	dsb	sy
    __NOP();
   17046:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17048:	e7fd      	b.n	17046 <__NVIC_SystemReset+0x16>
   1704a:	bf00      	nop
   1704c:	e000ed00 	.word	0xe000ed00
   17050:	05fa0004 	.word	0x05fa0004

00017054 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   17054:	4b02      	ldr	r3, [pc, #8]	; (17060 <nvmc_wait+0xc>)
   17056:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1705a:	2b00      	cmp	r3, #0
   1705c:	d0fa      	beq.n	17054 <nvmc_wait>
}
   1705e:	4770      	bx	lr
   17060:	4001e000 	.word	0x4001e000

00017064 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   17064:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   17066:	4b03      	ldr	r3, [pc, #12]	; (17074 <nvmc_config+0x10>)
   17068:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   1706c:	f7ff fff2 	bl	17054 <nvmc_wait>
}
   17070:	bd08      	pop	{r3, pc}
   17072:	bf00      	nop
   17074:	4001e000 	.word	0x4001e000

00017078 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   17078:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1707a:	f00c fde7 	bl	23c4c <nrf52_errata_36>
   1707e:	b140      	cbz	r0, 17092 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   17080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17084:	2200      	movs	r2, #0
   17086:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1708a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1708e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   17092:	f00c fde5 	bl	23c60 <nrf52_errata_66>
   17096:	2800      	cmp	r0, #0
   17098:	d046      	beq.n	17128 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1709a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1709e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   170a2:	4b60      	ldr	r3, [pc, #384]	; (17224 <SystemInit+0x1ac>)
   170a4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   170a8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   170ac:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   170b0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   170b4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   170b8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   170bc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   170c0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   170c4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   170c8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   170cc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   170d0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   170d4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   170d8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   170dc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   170e0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   170e4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   170e8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   170ec:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   170f0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   170f4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   170f8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   170fc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   17100:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   17104:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   17108:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1710c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   17110:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   17114:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   17118:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1711c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   17120:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   17124:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   17128:	f00c fda4 	bl	23c74 <nrf52_errata_98>
   1712c:	b118      	cbz	r0, 17136 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1712e:	4b3e      	ldr	r3, [pc, #248]	; (17228 <SystemInit+0x1b0>)
   17130:	4a3e      	ldr	r2, [pc, #248]	; (1722c <SystemInit+0x1b4>)
   17132:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   17136:	f00c fdb0 	bl	23c9a <nrf52_errata_103>
   1713a:	b118      	cbz	r0, 17144 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1713c:	4b3c      	ldr	r3, [pc, #240]	; (17230 <SystemInit+0x1b8>)
   1713e:	22fb      	movs	r2, #251	; 0xfb
   17140:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   17144:	f00c fdbc 	bl	23cc0 <nrf52_errata_115>
   17148:	b170      	cbz	r0, 17168 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1714a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1714e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
   17152:	f023 030f 	bic.w	r3, r3, #15
   17156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1715a:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
   1715e:	f002 020f 	and.w	r2, r2, #15
   17162:	4313      	orrs	r3, r2
   17164:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   17168:	f00c fdbd 	bl	23ce6 <nrf52_errata_120>
   1716c:	b120      	cbz	r0, 17178 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1716e:	4b31      	ldr	r3, [pc, #196]	; (17234 <SystemInit+0x1bc>)
   17170:	f44f 7200 	mov.w	r2, #512	; 0x200
   17174:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   17178:	f00c fdc8 	bl	23d0c <nrf52_errata_136>
   1717c:	b160      	cbz	r0, 17198 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1717e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17182:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   17186:	f013 0f01 	tst.w	r3, #1
   1718a:	d005      	beq.n	17198 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1718c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17190:	f06f 0201 	mvn.w	r2, #1
   17194:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   17198:	4a27      	ldr	r2, [pc, #156]	; (17238 <SystemInit+0x1c0>)
   1719a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1719e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   171a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   171a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   171aa:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
   171ae:	f00c fdc7 	bl	23d40 <nrf52_handle_approtect>

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   171b2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   171b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
   171ba:	f013 0f01 	tst.w	r3, #1
   171be:	d10c      	bne.n	171da <SystemInit+0x162>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   171c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   171c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   171c8:	2b00      	cmp	r3, #0
   171ca:	db18      	blt.n	171fe <SystemInit+0x186>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   171cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   171d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   171d4:	2b00      	cmp	r3, #0
   171d6:	db12      	blt.n	171fe <SystemInit+0x186>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   171d8:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   171da:	2001      	movs	r0, #1
   171dc:	f7ff ff42 	bl	17064 <nvmc_config>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   171e0:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   171e4:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   171e8:	f023 0301 	bic.w	r3, r3, #1
   171ec:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            nvmc_wait();
   171f0:	f7ff ff30 	bl	17054 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   171f4:	2000      	movs	r0, #0
   171f6:	f7ff ff35 	bl	17064 <nvmc_config>
            NVIC_SystemReset();
   171fa:	f7ff ff19 	bl	17030 <__NVIC_SystemReset>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   171fe:	2001      	movs	r0, #1
   17200:	f7ff ff30 	bl	17064 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   17204:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   17208:	2512      	movs	r5, #18
   1720a:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1720e:	f7ff ff21 	bl	17054 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   17212:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   17216:	f7ff ff1d 	bl	17054 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1721a:	2000      	movs	r0, #0
   1721c:	f7ff ff22 	bl	17064 <nvmc_config>
            NVIC_SystemReset();
   17220:	f7ff ff06 	bl	17030 <__NVIC_SystemReset>
   17224:	4000c000 	.word	0x4000c000
   17228:	40005000 	.word	0x40005000
   1722c:	00038148 	.word	0x00038148
   17230:	4000f000 	.word	0x4000f000
   17234:	40029000 	.word	0x40029000
   17238:	e000ed00 	.word	0xe000ed00

0001723c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1723c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1723e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   17240:	fab4 f384 	clz	r3, r4
   17244:	f1c3 031f 	rsb	r3, r3, #31
   17248:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   1724c:	2b00      	cmp	r3, #0
   1724e:	db16      	blt.n	1727e <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   17250:	2201      	movs	r2, #1
   17252:	fa02 f303 	lsl.w	r3, r2, r3
   17256:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1725a:	f3bf 8f5b 	dmb	ish
   1725e:	e850 2f00 	ldrex	r2, [r0]
   17262:	42a2      	cmp	r2, r4
   17264:	d104      	bne.n	17270 <nrfx_flag32_alloc+0x34>
   17266:	e840 3e00 	strex	lr, r3, [r0]
   1726a:	f1be 0f00 	cmp.w	lr, #0
   1726e:	d1f6      	bne.n	1725e <nrfx_flag32_alloc+0x22>
   17270:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   17274:	d1e3      	bne.n	1723e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   17276:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   1727a:	4802      	ldr	r0, [pc, #8]	; (17284 <nrfx_flag32_alloc+0x48>)
}
   1727c:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   1727e:	4802      	ldr	r0, [pc, #8]	; (17288 <nrfx_flag32_alloc+0x4c>)
   17280:	e7fc      	b.n	1727c <nrfx_flag32_alloc+0x40>
   17282:	bf00      	nop
   17284:	0bad0000 	.word	0x0bad0000
   17288:	0bad0002 	.word	0x0bad0002

0001728c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1728c:	6803      	ldr	r3, [r0, #0]
   1728e:	40cb      	lsrs	r3, r1
   17290:	f013 0f01 	tst.w	r3, #1
   17294:	d115      	bne.n	172c2 <nrfx_flag32_free+0x36>
{
   17296:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   17298:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1729a:	2301      	movs	r3, #1
   1729c:	408b      	lsls	r3, r1
   1729e:	4313      	orrs	r3, r2
   172a0:	f3bf 8f5b 	dmb	ish
   172a4:	e850 cf00 	ldrex	ip, [r0]
   172a8:	4594      	cmp	ip, r2
   172aa:	d104      	bne.n	172b6 <nrfx_flag32_free+0x2a>
   172ac:	e840 3e00 	strex	lr, r3, [r0]
   172b0:	f1be 0f00 	cmp.w	lr, #0
   172b4:	d1f6      	bne.n	172a4 <nrfx_flag32_free+0x18>
   172b6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   172ba:	d1ed      	bne.n	17298 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   172bc:	4802      	ldr	r0, [pc, #8]	; (172c8 <nrfx_flag32_free+0x3c>)
}
   172be:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   172c2:	4802      	ldr	r0, [pc, #8]	; (172cc <nrfx_flag32_free+0x40>)
}
   172c4:	4770      	bx	lr
   172c6:	bf00      	nop
   172c8:	0bad0000 	.word	0x0bad0000
   172cc:	0bad0004 	.word	0x0bad0004

000172d0 <nrf_gpio_reconfigure>:
{
   172d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   172d2:	461c      	mov	r4, r3
   172d4:	9f05      	ldr	r7, [sp, #20]
   172d6:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
   172d8:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
   172dc:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   172de:	2801      	cmp	r0, #1
   172e0:	d035      	beq.n	1734e <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
   172e2:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   172e6:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
   172ea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   172ee:	b381      	cbz	r1, 17352 <nrf_gpio_reconfigure+0x82>
   172f0:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   172f2:	b382      	cbz	r2, 17356 <nrf_gpio_reconfigure+0x86>
   172f4:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   172f8:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   172fc:	b374      	cbz	r4, 1735c <nrf_gpio_reconfigure+0x8c>
   172fe:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   17302:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   17306:	b367      	cbz	r7, 17362 <nrf_gpio_reconfigure+0x92>
   17308:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1730c:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   17310:	b356      	cbz	r6, 17368 <nrf_gpio_reconfigure+0x98>
   17312:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   17316:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
   1731a:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1731e:	b331      	cbz	r1, 1736e <nrf_gpio_reconfigure+0x9e>
   17320:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   17322:	b332      	cbz	r2, 17372 <nrf_gpio_reconfigure+0xa2>
   17324:	7812      	ldrb	r2, [r2, #0]
   17326:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   17328:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1732a:	b324      	cbz	r4, 17376 <nrf_gpio_reconfigure+0xa6>
   1732c:	7822      	ldrb	r2, [r4, #0]
   1732e:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   17330:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   17332:	b317      	cbz	r7, 1737a <nrf_gpio_reconfigure+0xaa>
   17334:	783a      	ldrb	r2, [r7, #0]
   17336:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   17338:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1733a:	b306      	cbz	r6, 1737e <nrf_gpio_reconfigure+0xae>
   1733c:	7832      	ldrb	r2, [r6, #0]
   1733e:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   17340:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   17342:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   17344:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   17348:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
   1734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   1734e:	4d0d      	ldr	r5, [pc, #52]	; (17384 <nrf_gpio_reconfigure+0xb4>)
   17350:	e7c9      	b.n	172e6 <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   17352:	2000      	movs	r0, #0
   17354:	e7cd      	b.n	172f2 <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   17356:	f04f 0e00 	mov.w	lr, #0
   1735a:	e7cd      	b.n	172f8 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1735c:	f04f 0e00 	mov.w	lr, #0
   17360:	e7cf      	b.n	17302 <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   17362:	f04f 0e00 	mov.w	lr, #0
   17366:	e7d1      	b.n	1730c <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   17368:	f04f 0e00 	mov.w	lr, #0
   1736c:	e7d3      	b.n	17316 <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1736e:	2300      	movs	r3, #0
   17370:	e7d7      	b.n	17322 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   17372:	2200      	movs	r2, #0
   17374:	e7d8      	b.n	17328 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   17376:	2200      	movs	r2, #0
   17378:	e7da      	b.n	17330 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1737a:	2200      	movs	r2, #0
   1737c:	e7dc      	b.n	17338 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1737e:	2200      	movs	r2, #0
   17380:	e7de      	b.n	17340 <nrf_gpio_reconfigure+0x70>
   17382:	bf00      	nop
   17384:	50000300 	.word	0x50000300

00017388 <nrf_gpio_latches_read_and_clear>:
{
   17388:	b500      	push	{lr}
   1738a:	b083      	sub	sp, #12
   1738c:	4684      	mov	ip, r0
   1738e:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   17390:	4b0d      	ldr	r3, [pc, #52]	; (173c8 <nrf_gpio_latches_read_and_clear+0x40>)
   17392:	e893 0003 	ldmia.w	r3, {r0, r1}
   17396:	ab02      	add	r3, sp, #8
   17398:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1739c:	4663      	mov	r3, ip
   1739e:	e00b      	b.n	173b8 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   173a0:	a902      	add	r1, sp, #8
   173a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   173a6:	f851 1c08 	ldr.w	r1, [r1, #-8]
   173aa:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
   173ae:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   173b2:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   173b6:	3301      	adds	r3, #1
   173b8:	eb0c 000e 	add.w	r0, ip, lr
   173bc:	4298      	cmp	r0, r3
   173be:	d8ef      	bhi.n	173a0 <nrf_gpio_latches_read_and_clear+0x18>
}
   173c0:	b003      	add	sp, #12
   173c2:	f85d fb04 	ldr.w	pc, [sp], #4
   173c6:	bf00      	nop
   173c8:	00026014 	.word	0x00026014

000173cc <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   173cc:	3008      	adds	r0, #8
   173ce:	4b03      	ldr	r3, [pc, #12]	; (173dc <pin_in_use+0x10>)
   173d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   173d4:	f000 0001 	and.w	r0, r0, #1
   173d8:	4770      	bx	lr
   173da:	bf00      	nop
   173dc:	20000528 	.word	0x20000528

000173e0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   173e0:	3008      	adds	r0, #8
   173e2:	4b03      	ldr	r3, [pc, #12]	; (173f0 <pin_in_use_by_te+0x10>)
   173e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   173e8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   173ec:	4770      	bx	lr
   173ee:	bf00      	nop
   173f0:	20000528 	.word	0x20000528

000173f4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   173f4:	3008      	adds	r0, #8
   173f6:	4b04      	ldr	r3, [pc, #16]	; (17408 <pin_has_trigger+0x14>)
   173f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   173fc:	f010 001c 	ands.w	r0, r0, #28
   17400:	bf18      	it	ne
   17402:	2001      	movne	r0, #1
   17404:	4770      	bx	lr
   17406:	bf00      	nop
   17408:	20000528 	.word	0x20000528

0001740c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1740c:	3008      	adds	r0, #8
   1740e:	4b03      	ldr	r3, [pc, #12]	; (1741c <pin_is_output+0x10>)
   17410:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   17414:	f3c0 0040 	ubfx	r0, r0, #1, #1
   17418:	4770      	bx	lr
   1741a:	bf00      	nop
   1741c:	20000528 	.word	0x20000528

00017420 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17420:	3008      	adds	r0, #8
   17422:	4b02      	ldr	r3, [pc, #8]	; (1742c <pin_te_get+0xc>)
   17424:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   17428:	0b40      	lsrs	r0, r0, #13
   1742a:	4770      	bx	lr
   1742c:	20000528 	.word	0x20000528

00017430 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   17430:	2200      	movs	r2, #0
   17432:	e004      	b.n	1743e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   17434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17438:	4283      	cmp	r3, r0
   1743a:	d00f      	beq.n	1745c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1743c:	3201      	adds	r2, #1
   1743e:	2a2f      	cmp	r2, #47	; 0x2f
   17440:	d80a      	bhi.n	17458 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   17442:	f102 0308 	add.w	r3, r2, #8
   17446:	4906      	ldr	r1, [pc, #24]	; (17460 <handler_in_use+0x30>)
   17448:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1744c:	f413 7f80 	tst.w	r3, #256	; 0x100
   17450:	d0f0      	beq.n	17434 <handler_in_use+0x4>
   17452:	f3c3 2343 	ubfx	r3, r3, #9, #4
   17456:	e7ef      	b.n	17438 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   17458:	2000      	movs	r0, #0
   1745a:	4770      	bx	lr
            return true;
   1745c:	2001      	movs	r0, #1
}
   1745e:	4770      	bx	lr
   17460:	20000528 	.word	0x20000528

00017464 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   17464:	2300      	movs	r3, #0
   17466:	b113      	cbz	r3, 1746e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   17468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1746c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1746e:	4a07      	ldr	r2, [pc, #28]	; (1748c <find_handler+0x28>)
   17470:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   17474:	4282      	cmp	r2, r0
   17476:	d001      	beq.n	1747c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   17478:	3301      	adds	r3, #1
   1747a:	e7f4      	b.n	17466 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1747c:	4a03      	ldr	r2, [pc, #12]	; (1748c <find_handler+0x28>)
   1747e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   17482:	6852      	ldr	r2, [r2, #4]
   17484:	428a      	cmp	r2, r1
   17486:	d1f7      	bne.n	17478 <find_handler+0x14>
            return i;
   17488:	4618      	mov	r0, r3
   1748a:	4770      	bx	lr
   1748c:	20000528 	.word	0x20000528

00017490 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17490:	f100 0208 	add.w	r2, r0, #8
   17494:	4b0f      	ldr	r3, [pc, #60]	; (174d4 <get_initial_sense+0x44>)
   17496:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1749a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1749e:	2b04      	cmp	r3, #4
   174a0:	d012      	beq.n	174c8 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   174a2:	2b05      	cmp	r3, #5
   174a4:	d012      	beq.n	174cc <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
   174a6:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   174aa:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   174ac:	2801      	cmp	r0, #1
   174ae:	d009      	beq.n	174c4 <get_initial_sense+0x34>
        case 0: return NRF_P0;
   174b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   174b4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   174b8:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   174ba:	f013 0f01 	tst.w	r3, #1
   174be:	d007      	beq.n	174d0 <get_initial_sense+0x40>
   174c0:	2003      	movs	r0, #3
   174c2:	4770      	bx	lr
        case 1: return NRF_P1;
   174c4:	4b04      	ldr	r3, [pc, #16]	; (174d8 <get_initial_sense+0x48>)
   174c6:	e7f5      	b.n	174b4 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   174c8:	2003      	movs	r0, #3
   174ca:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   174cc:	2002      	movs	r0, #2
   174ce:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   174d0:	2002      	movs	r0, #2
    }

    return sense;
}
   174d2:	4770      	bx	lr
   174d4:	20000528 	.word	0x20000528
   174d8:	50000300 	.word	0x50000300

000174dc <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   174dc:	3008      	adds	r0, #8
   174de:	4b06      	ldr	r3, [pc, #24]	; (174f8 <channel_handler_get+0x1c>)
   174e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   174e4:	f410 7f80 	tst.w	r0, #256	; 0x100
   174e8:	d004      	beq.n	174f4 <channel_handler_get+0x18>
   174ea:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   174ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   174f2:	4770      	bx	lr
        return NULL;
   174f4:	2000      	movs	r0, #0
}
   174f6:	4770      	bx	lr
   174f8:	20000528 	.word	0x20000528

000174fc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   174fc:	b570      	push	{r4, r5, r6, lr}
   174fe:	4604      	mov	r4, r0
   17500:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   17502:	f7ff ffeb 	bl	174dc <channel_handler_get>

    if (handler)
   17506:	b120      	cbz	r0, 17512 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   17508:	6806      	ldr	r6, [r0, #0]
   1750a:	6842      	ldr	r2, [r0, #4]
   1750c:	4629      	mov	r1, r5
   1750e:	4620      	mov	r0, r4
   17510:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   17512:	4b04      	ldr	r3, [pc, #16]	; (17524 <call_handler+0x28>)
   17514:	689b      	ldr	r3, [r3, #8]
   17516:	b123      	cbz	r3, 17522 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   17518:	4a02      	ldr	r2, [pc, #8]	; (17524 <call_handler+0x28>)
   1751a:	68d2      	ldr	r2, [r2, #12]
   1751c:	4629      	mov	r1, r5
   1751e:	4620      	mov	r0, r4
   17520:	4798      	blx	r3
    }
}
   17522:	bd70      	pop	{r4, r5, r6, pc}
   17524:	20000528 	.word	0x20000528

00017528 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   17528:	b570      	push	{r4, r5, r6, lr}
   1752a:	4606      	mov	r6, r0
   1752c:	460c      	mov	r4, r1
   1752e:	4615      	mov	r5, r2
    if (is_level(trigger))
   17530:	4608      	mov	r0, r1
   17532:	f00c fc7b 	bl	23e2c <is_level>
   17536:	b960      	cbnz	r0, 17552 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   17538:	2d02      	cmp	r5, #2
   1753a:	d028      	beq.n	1758e <next_sense_cond_call_handler+0x66>
   1753c:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
   1753e:	4630      	mov	r0, r6
   17540:	f00c fc4c 	bl	23ddc <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   17544:	2c03      	cmp	r4, #3
   17546:	d026      	beq.n	17596 <next_sense_cond_call_handler+0x6e>
   17548:	2d02      	cmp	r5, #2
   1754a:	d022      	beq.n	17592 <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1754c:	2d03      	cmp	r5, #3
   1754e:	d027      	beq.n	175a0 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   17550:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   17552:	4621      	mov	r1, r4
   17554:	4630      	mov	r0, r6
   17556:	f7ff ffd1 	bl	174fc <call_handler>
    *p_pin = pin_number & 0x1F;
   1755a:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   1755e:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17560:	2a01      	cmp	r2, #1
   17562:	d012      	beq.n	1758a <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
   17564:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17568:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1756c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17570:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   17574:	429d      	cmp	r5, r3
   17576:	d1eb      	bne.n	17550 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17578:	2100      	movs	r1, #0
   1757a:	4630      	mov	r0, r6
   1757c:	f00c fc2e 	bl	23ddc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   17580:	4629      	mov	r1, r5
   17582:	4630      	mov	r0, r6
   17584:	f00c fc2a 	bl	23ddc <nrf_gpio_cfg_sense_set>
   17588:	e7e2      	b.n	17550 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
   1758a:	4a07      	ldr	r2, [pc, #28]	; (175a8 <next_sense_cond_call_handler+0x80>)
   1758c:	e7ec      	b.n	17568 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1758e:	2103      	movs	r1, #3
   17590:	e7d5      	b.n	1753e <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   17592:	2c01      	cmp	r4, #1
   17594:	d1da      	bne.n	1754c <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   17596:	4621      	mov	r1, r4
   17598:	4630      	mov	r0, r6
   1759a:	f7ff ffaf 	bl	174fc <call_handler>
}
   1759e:	e7d7      	b.n	17550 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   175a0:	2c02      	cmp	r4, #2
   175a2:	d1d5      	bne.n	17550 <next_sense_cond_call_handler+0x28>
   175a4:	e7f7      	b.n	17596 <next_sense_cond_call_handler+0x6e>
   175a6:	bf00      	nop
   175a8:	50000300 	.word	0x50000300

000175ac <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   175ac:	f100 0208 	add.w	r2, r0, #8
   175b0:	4b0e      	ldr	r3, [pc, #56]	; (175ec <release_handler+0x40>)
   175b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   175b6:	f413 7f80 	tst.w	r3, #256	; 0x100
   175ba:	d016      	beq.n	175ea <release_handler+0x3e>
{
   175bc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   175be:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   175c2:	4610      	mov	r0, r2
   175c4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   175c8:	4a08      	ldr	r2, [pc, #32]	; (175ec <release_handler+0x40>)
   175ca:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   175ce:	4620      	mov	r0, r4
   175d0:	f7ff ff2e 	bl	17430 <handler_in_use>
   175d4:	b100      	cbz	r0, 175d8 <release_handler+0x2c>
}
   175d6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   175d8:	4804      	ldr	r0, [pc, #16]	; (175ec <release_handler+0x40>)
   175da:	2300      	movs	r3, #0
   175dc:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   175e0:	4621      	mov	r1, r4
   175e2:	3074      	adds	r0, #116	; 0x74
   175e4:	f7ff fe52 	bl	1728c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   175e8:	e7f5      	b.n	175d6 <release_handler+0x2a>
   175ea:	4770      	bx	lr
   175ec:	20000528 	.word	0x20000528

000175f0 <pin_handler_trigger_uninit>:
{
   175f0:	b510      	push	{r4, lr}
   175f2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   175f4:	f7ff fef4 	bl	173e0 <pin_in_use_by_te>
   175f8:	b140      	cbz	r0, 1760c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   175fa:	4620      	mov	r0, r4
   175fc:	f7ff ff10 	bl	17420 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   17600:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   17604:	4b06      	ldr	r3, [pc, #24]	; (17620 <pin_handler_trigger_uninit+0x30>)
   17606:	2200      	movs	r2, #0
   17608:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1760c:	4620      	mov	r0, r4
   1760e:	f7ff ffcd 	bl	175ac <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   17612:	3408      	adds	r4, #8
   17614:	4b03      	ldr	r3, [pc, #12]	; (17624 <pin_handler_trigger_uninit+0x34>)
   17616:	2200      	movs	r2, #0
   17618:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   1761c:	bd10      	pop	{r4, pc}
   1761e:	bf00      	nop
   17620:	40006000 	.word	0x40006000
   17624:	20000528 	.word	0x20000528

00017628 <pin_handler_set>:
{
   17628:	b570      	push	{r4, r5, r6, lr}
   1762a:	b082      	sub	sp, #8
   1762c:	4605      	mov	r5, r0
   1762e:	460e      	mov	r6, r1
   17630:	4614      	mov	r4, r2
    release_handler(pin);
   17632:	f7ff ffbb 	bl	175ac <release_handler>
    if (!handler)
   17636:	b326      	cbz	r6, 17682 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   17638:	4621      	mov	r1, r4
   1763a:	4630      	mov	r0, r6
   1763c:	f7ff ff12 	bl	17464 <find_handler>
    if (handler_id < 0)
   17640:	1e03      	subs	r3, r0, #0
   17642:	db13      	blt.n	1766c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   17644:	4910      	ldr	r1, [pc, #64]	; (17688 <pin_handler_set+0x60>)
   17646:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1764a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   1764e:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   17650:	f105 0008 	add.w	r0, r5, #8
   17654:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   17658:	025b      	lsls	r3, r3, #9
   1765a:	b29b      	uxth	r3, r3
   1765c:	4313      	orrs	r3, r2
   1765e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17662:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   17666:	4809      	ldr	r0, [pc, #36]	; (1768c <pin_handler_set+0x64>)
}
   17668:	b002      	add	sp, #8
   1766a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1766c:	f10d 0107 	add.w	r1, sp, #7
   17670:	4807      	ldr	r0, [pc, #28]	; (17690 <pin_handler_set+0x68>)
   17672:	f7ff fde3 	bl	1723c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   17676:	4b05      	ldr	r3, [pc, #20]	; (1768c <pin_handler_set+0x64>)
   17678:	4298      	cmp	r0, r3
   1767a:	d1f5      	bne.n	17668 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1767c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17680:	e7e0      	b.n	17644 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   17682:	4802      	ldr	r0, [pc, #8]	; (1768c <pin_handler_set+0x64>)
   17684:	e7f0      	b.n	17668 <pin_handler_set+0x40>
   17686:	bf00      	nop
   17688:	20000528 	.word	0x20000528
   1768c:	0bad0000 	.word	0x0bad0000
   17690:	2000059c 	.word	0x2000059c

00017694 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   17694:	b570      	push	{r4, r5, r6, lr}
   17696:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   17698:	466a      	mov	r2, sp
   1769a:	2102      	movs	r1, #2
   1769c:	2000      	movs	r0, #0
   1769e:	f7ff fe73 	bl	17388 <nrf_gpio_latches_read_and_clear>
   176a2:	e040      	b.n	17726 <port_event_handle+0x92>
   176a4:	4e22      	ldr	r6, [pc, #136]	; (17730 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   176a6:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   176aa:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   176ae:	f3c2 4201 	ubfx	r2, r2, #16, #2
   176b2:	f7ff ff39 	bl	17528 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   176b6:	2301      	movs	r3, #1
   176b8:	40ab      	lsls	r3, r5
   176ba:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   176be:	ab02      	add	r3, sp, #8
   176c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   176c4:	f853 0c08 	ldr.w	r0, [r3, #-8]
   176c8:	b300      	cbz	r0, 1770c <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
   176ca:	fa90 f0a0 	rbit	r0, r0
   176ce:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   176d2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   176d6:	f100 0208 	add.w	r2, r0, #8
   176da:	4b16      	ldr	r3, [pc, #88]	; (17734 <port_event_handle+0xa0>)
   176dc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   176e0:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   176e4:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   176e6:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   176ea:	f81d 2005 	ldrb.w	r2, [sp, r5]
   176ee:	2301      	movs	r3, #1
   176f0:	40b3      	lsls	r3, r6
   176f2:	43db      	mvns	r3, r3
   176f4:	b25b      	sxtb	r3, r3
   176f6:	4013      	ands	r3, r2
   176f8:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
   176fc:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   17700:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17702:	2b01      	cmp	r3, #1
   17704:	d0ce      	beq.n	176a4 <port_event_handle+0x10>
        case 0: return NRF_P0;
   17706:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1770a:	e7cc      	b.n	176a6 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1770c:	3401      	adds	r4, #1
   1770e:	2c01      	cmp	r4, #1
   17710:	d9d5      	bls.n	176be <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17712:	4b09      	ldr	r3, [pc, #36]	; (17738 <port_event_handle+0xa4>)
   17714:	2200      	movs	r2, #0
   17716:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1771a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   1771e:	4668      	mov	r0, sp
   17720:	f00c fb89 	bl	23e36 <latch_pending_read_and_check>
   17724:	b108      	cbz	r0, 1772a <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   17726:	2400      	movs	r4, #0
   17728:	e7f1      	b.n	1770e <port_event_handle+0x7a>
}
   1772a:	b002      	add	sp, #8
   1772c:	bd70      	pop	{r4, r5, r6, pc}
   1772e:	bf00      	nop
   17730:	50000300 	.word	0x50000300
   17734:	20000528 	.word	0x20000528
   17738:	40006000 	.word	0x40006000

0001773c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   1773c:	b538      	push	{r3, r4, r5, lr}
   1773e:	4604      	mov	r4, r0
    while (mask)
   17740:	e018      	b.n	17774 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   17742:	fa94 f3a4 	rbit	r3, r4
   17746:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1774a:	2201      	movs	r2, #1
   1774c:	409a      	lsls	r2, r3
   1774e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17752:	4a0a      	ldr	r2, [pc, #40]	; (1777c <gpiote_evt_handle+0x40>)
   17754:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   17758:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1775c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   17760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   17764:	f3c0 4001 	ubfx	r0, r0, #16, #2
   17768:	f00c fb5e 	bl	23e28 <gpiote_polarity_to_trigger>
   1776c:	4601      	mov	r1, r0
   1776e:	4628      	mov	r0, r5
   17770:	f7ff fec4 	bl	174fc <call_handler>
    while (mask)
   17774:	2c00      	cmp	r4, #0
   17776:	d1e4      	bne.n	17742 <gpiote_evt_handle+0x6>
    }
}
   17778:	bd38      	pop	{r3, r4, r5, pc}
   1777a:	bf00      	nop
   1777c:	40006000 	.word	0x40006000

00017780 <nrfx_gpiote_input_configure>:
{
   17780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17784:	b084      	sub	sp, #16
   17786:	4604      	mov	r4, r0
   17788:	4615      	mov	r5, r2
   1778a:	461e      	mov	r6, r3
    if (p_input_config)
   1778c:	b309      	cbz	r1, 177d2 <nrfx_gpiote_input_configure+0x52>
   1778e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   17790:	f00c fb34 	bl	23dfc <pin_is_task_output>
   17794:	2800      	cmp	r0, #0
   17796:	d13f      	bne.n	17818 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   17798:	2300      	movs	r3, #0
   1779a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1779e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   177a2:	9301      	str	r3, [sp, #4]
   177a4:	9300      	str	r3, [sp, #0]
   177a6:	463b      	mov	r3, r7
   177a8:	f10d 020f 	add.w	r2, sp, #15
   177ac:	f10d 010e 	add.w	r1, sp, #14
   177b0:	4620      	mov	r0, r4
   177b2:	f7ff fd8d 	bl	172d0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   177b6:	4a38      	ldr	r2, [pc, #224]	; (17898 <nrfx_gpiote_input_configure+0x118>)
   177b8:	f104 0108 	add.w	r1, r4, #8
   177bc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   177c0:	f023 0302 	bic.w	r3, r3, #2
   177c4:	b29b      	uxth	r3, r3
   177c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   177ca:	f043 0301 	orr.w	r3, r3, #1
   177ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   177d2:	b1bd      	cbz	r5, 17804 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   177d4:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   177d6:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   177da:	4620      	mov	r0, r4
   177dc:	f7ff fe16 	bl	1740c <pin_is_output>
   177e0:	b1e0      	cbz	r0, 1781c <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   177e2:	f1b8 0f00 	cmp.w	r8, #0
   177e6:	d151      	bne.n	1788c <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   177e8:	4a2b      	ldr	r2, [pc, #172]	; (17898 <nrfx_gpiote_input_configure+0x118>)
   177ea:	f104 0108 	add.w	r1, r4, #8
   177ee:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   177f2:	f023 031c 	bic.w	r3, r3, #28
   177f6:	b29b      	uxth	r3, r3
   177f8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   177fc:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   17800:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   17804:	2e00      	cmp	r6, #0
   17806:	d045      	beq.n	17894 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   17808:	6872      	ldr	r2, [r6, #4]
   1780a:	6831      	ldr	r1, [r6, #0]
   1780c:	4620      	mov	r0, r4
   1780e:	f7ff ff0b 	bl	17628 <pin_handler_set>
}
   17812:	b004      	add	sp, #16
   17814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   17818:	4820      	ldr	r0, [pc, #128]	; (1789c <nrfx_gpiote_input_configure+0x11c>)
   1781a:	e7fa      	b.n	17812 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1781c:	4a1e      	ldr	r2, [pc, #120]	; (17898 <nrfx_gpiote_input_configure+0x118>)
   1781e:	f104 0108 	add.w	r1, r4, #8
   17822:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   17826:	f023 0320 	bic.w	r3, r3, #32
   1782a:	04db      	lsls	r3, r3, #19
   1782c:	0cdb      	lsrs	r3, r3, #19
   1782e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   17832:	f1b8 0f00 	cmp.w	r8, #0
   17836:	d0d7      	beq.n	177e8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   17838:	2f03      	cmp	r7, #3
   1783a:	d829      	bhi.n	17890 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1783c:	686b      	ldr	r3, [r5, #4]
   1783e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   17840:	b937      	cbnz	r7, 17850 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
   17842:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   17846:	4b16      	ldr	r3, [pc, #88]	; (178a0 <nrfx_gpiote_input_configure+0x120>)
   17848:	2200      	movs	r2, #0
   1784a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1784e:	e7cb      	b.n	177e8 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   17850:	4638      	mov	r0, r7
   17852:	f00c faea 	bl	23e2a <gpiote_trigger_to_polarity>
   17856:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   17858:	4811      	ldr	r0, [pc, #68]	; (178a0 <nrfx_gpiote_input_configure+0x120>)
   1785a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1785e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   17862:	f022 0203 	bic.w	r2, r2, #3
   17866:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   1786a:	4622      	mov	r2, r4
   1786c:	4629      	mov	r1, r5
   1786e:	f00c fa7b 	bl	23d68 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   17872:	4a09      	ldr	r2, [pc, #36]	; (17898 <nrfx_gpiote_input_configure+0x118>)
   17874:	f104 0108 	add.w	r1, r4, #8
   17878:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1787c:	036d      	lsls	r5, r5, #13
   1787e:	b2ad      	uxth	r5, r5
   17880:	432b      	orrs	r3, r5
   17882:	f043 0320 	orr.w	r3, r3, #32
   17886:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   1788a:	e7ad      	b.n	177e8 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   1788c:	4803      	ldr	r0, [pc, #12]	; (1789c <nrfx_gpiote_input_configure+0x11c>)
   1788e:	e7c0      	b.n	17812 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   17890:	4802      	ldr	r0, [pc, #8]	; (1789c <nrfx_gpiote_input_configure+0x11c>)
   17892:	e7be      	b.n	17812 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   17894:	4803      	ldr	r0, [pc, #12]	; (178a4 <nrfx_gpiote_input_configure+0x124>)
   17896:	e7bc      	b.n	17812 <nrfx_gpiote_input_configure+0x92>
   17898:	20000528 	.word	0x20000528
   1789c:	0bad0004 	.word	0x0bad0004
   178a0:	40006000 	.word	0x40006000
   178a4:	0bad0000 	.word	0x0bad0000

000178a8 <nrfx_gpiote_output_configure>:
{
   178a8:	b570      	push	{r4, r5, r6, lr}
   178aa:	b084      	sub	sp, #16
   178ac:	4604      	mov	r4, r0
   178ae:	4615      	mov	r5, r2
    if (p_config)
   178b0:	b329      	cbz	r1, 178fe <nrfx_gpiote_output_configure+0x56>
   178b2:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   178b4:	f00c fab1 	bl	23e1a <pin_is_input>
   178b8:	b120      	cbz	r0, 178c4 <nrfx_gpiote_output_configure+0x1c>
   178ba:	4620      	mov	r0, r4
   178bc:	f7ff fd90 	bl	173e0 <pin_in_use_by_te>
   178c0:	2800      	cmp	r0, #0
   178c2:	d138      	bne.n	17936 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   178c4:	4620      	mov	r0, r4
   178c6:	f7ff fd95 	bl	173f4 <pin_has_trigger>
   178ca:	b110      	cbz	r0, 178d2 <nrfx_gpiote_output_configure+0x2a>
   178cc:	7873      	ldrb	r3, [r6, #1]
   178ce:	2b01      	cmp	r3, #1
   178d0:	d031      	beq.n	17936 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   178d2:	2301      	movs	r3, #1
   178d4:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   178d8:	2300      	movs	r3, #0
   178da:	9301      	str	r3, [sp, #4]
   178dc:	9600      	str	r6, [sp, #0]
   178de:	1cb3      	adds	r3, r6, #2
   178e0:	1c72      	adds	r2, r6, #1
   178e2:	f10d 010f 	add.w	r1, sp, #15
   178e6:	4620      	mov	r0, r4
   178e8:	f7ff fcf2 	bl	172d0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   178ec:	4a1f      	ldr	r2, [pc, #124]	; (1796c <nrfx_gpiote_output_configure+0xc4>)
   178ee:	f104 0108 	add.w	r1, r4, #8
   178f2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   178f6:	f043 0303 	orr.w	r3, r3, #3
   178fa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   178fe:	b385      	cbz	r5, 17962 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
   17900:	4620      	mov	r0, r4
   17902:	f00c fa8a 	bl	23e1a <pin_is_input>
   17906:	bb70      	cbnz	r0, 17966 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
   17908:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   1790a:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   1790e:	4b18      	ldr	r3, [pc, #96]	; (17970 <nrfx_gpiote_output_configure+0xc8>)
   17910:	2100      	movs	r1, #0
   17912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   17916:	4a15      	ldr	r2, [pc, #84]	; (1796c <nrfx_gpiote_output_configure+0xc4>)
   17918:	f104 0108 	add.w	r1, r4, #8
   1791c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   17920:	f023 0320 	bic.w	r3, r3, #32
   17924:	04db      	lsls	r3, r3, #19
   17926:	0cdb      	lsrs	r3, r3, #19
   17928:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1792c:	786b      	ldrb	r3, [r5, #1]
   1792e:	b923      	cbnz	r3, 1793a <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
   17930:	4810      	ldr	r0, [pc, #64]	; (17974 <nrfx_gpiote_output_configure+0xcc>)
}
   17932:	b004      	add	sp, #16
   17934:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   17936:	4810      	ldr	r0, [pc, #64]	; (17978 <nrfx_gpiote_output_configure+0xd0>)
   17938:	e7fb      	b.n	17932 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
   1793a:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1793c:	9200      	str	r2, [sp, #0]
   1793e:	4622      	mov	r2, r4
   17940:	4631      	mov	r1, r6
   17942:	480b      	ldr	r0, [pc, #44]	; (17970 <nrfx_gpiote_output_configure+0xc8>)
   17944:	f00c fa2a 	bl	23d9c <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   17948:	4a08      	ldr	r2, [pc, #32]	; (1796c <nrfx_gpiote_output_configure+0xc4>)
   1794a:	3408      	adds	r4, #8
   1794c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   17950:	0376      	lsls	r6, r6, #13
   17952:	b2b6      	uxth	r6, r6
   17954:	4333      	orrs	r3, r6
   17956:	f043 0320 	orr.w	r3, r3, #32
   1795a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   1795e:	4805      	ldr	r0, [pc, #20]	; (17974 <nrfx_gpiote_output_configure+0xcc>)
   17960:	e7e7      	b.n	17932 <nrfx_gpiote_output_configure+0x8a>
   17962:	4804      	ldr	r0, [pc, #16]	; (17974 <nrfx_gpiote_output_configure+0xcc>)
   17964:	e7e5      	b.n	17932 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
   17966:	4804      	ldr	r0, [pc, #16]	; (17978 <nrfx_gpiote_output_configure+0xd0>)
   17968:	e7e3      	b.n	17932 <nrfx_gpiote_output_configure+0x8a>
   1796a:	bf00      	nop
   1796c:	20000528 	.word	0x20000528
   17970:	40006000 	.word	0x40006000
   17974:	0bad0000 	.word	0x0bad0000
   17978:	0bad0004 	.word	0x0bad0004

0001797c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1797c:	4b01      	ldr	r3, [pc, #4]	; (17984 <nrfx_gpiote_global_callback_set+0x8>)
   1797e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   17980:	60d9      	str	r1, [r3, #12]
}
   17982:	4770      	bx	lr
   17984:	20000528 	.word	0x20000528

00017988 <nrfx_gpiote_channel_get>:
{
   17988:	b538      	push	{r3, r4, r5, lr}
   1798a:	4604      	mov	r4, r0
   1798c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   1798e:	f7ff fd27 	bl	173e0 <pin_in_use_by_te>
   17992:	b140      	cbz	r0, 179a6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17994:	f104 0008 	add.w	r0, r4, #8
   17998:	4b04      	ldr	r3, [pc, #16]	; (179ac <nrfx_gpiote_channel_get+0x24>)
   1799a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   1799e:	0b5b      	lsrs	r3, r3, #13
   179a0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   179a2:	4803      	ldr	r0, [pc, #12]	; (179b0 <nrfx_gpiote_channel_get+0x28>)
}
   179a4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   179a6:	4803      	ldr	r0, [pc, #12]	; (179b4 <nrfx_gpiote_channel_get+0x2c>)
   179a8:	e7fc      	b.n	179a4 <nrfx_gpiote_channel_get+0x1c>
   179aa:	bf00      	nop
   179ac:	20000528 	.word	0x20000528
   179b0:	0bad0000 	.word	0x0bad0000
   179b4:	0bad0004 	.word	0x0bad0004

000179b8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   179b8:	4b0f      	ldr	r3, [pc, #60]	; (179f8 <nrfx_gpiote_init+0x40>)
   179ba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   179be:	b10b      	cbz	r3, 179c4 <nrfx_gpiote_init+0xc>
        return err_code;
   179c0:	480e      	ldr	r0, [pc, #56]	; (179fc <nrfx_gpiote_init+0x44>)
}
   179c2:	4770      	bx	lr
{
   179c4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   179c6:	4c0e      	ldr	r4, [pc, #56]	; (17a00 <nrfx_gpiote_init+0x48>)
   179c8:	2260      	movs	r2, #96	; 0x60
   179ca:	2100      	movs	r1, #0
   179cc:	4620      	mov	r0, r4
   179ce:	f00d fa3d 	bl	24e4c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   179d2:	2006      	movs	r0, #6
   179d4:	f00a f8fb 	bl	21bce <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   179d8:	4b0a      	ldr	r3, [pc, #40]	; (17a04 <nrfx_gpiote_init+0x4c>)
   179da:	2200      	movs	r2, #0
   179dc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   179e0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   179e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   179e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   179ec:	2301      	movs	r3, #1
   179ee:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   179f2:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
   179f4:	4804      	ldr	r0, [pc, #16]	; (17a08 <nrfx_gpiote_init+0x50>)
}
   179f6:	bd10      	pop	{r4, pc}
   179f8:	20000528 	.word	0x20000528
   179fc:	0bad0005 	.word	0x0bad0005
   17a00:	20000538 	.word	0x20000538
   17a04:	40006000 	.word	0x40006000
   17a08:	0bad0000 	.word	0x0bad0000

00017a0c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   17a0c:	4b03      	ldr	r3, [pc, #12]	; (17a1c <nrfx_gpiote_is_init+0x10>)
   17a0e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   17a12:	3800      	subs	r0, #0
   17a14:	bf18      	it	ne
   17a16:	2001      	movne	r0, #1
   17a18:	4770      	bx	lr
   17a1a:	bf00      	nop
   17a1c:	20000528 	.word	0x20000528

00017a20 <nrfx_gpiote_channel_free>:
{
   17a20:	b508      	push	{r3, lr}
   17a22:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   17a24:	4801      	ldr	r0, [pc, #4]	; (17a2c <nrfx_gpiote_channel_free+0xc>)
   17a26:	f7ff fc31 	bl	1728c <nrfx_flag32_free>
}
   17a2a:	bd08      	pop	{r3, pc}
   17a2c:	20000598 	.word	0x20000598

00017a30 <nrfx_gpiote_channel_alloc>:
{
   17a30:	b508      	push	{r3, lr}
   17a32:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   17a34:	4801      	ldr	r0, [pc, #4]	; (17a3c <nrfx_gpiote_channel_alloc+0xc>)
   17a36:	f7ff fc01 	bl	1723c <nrfx_flag32_alloc>
}
   17a3a:	bd08      	pop	{r3, pc}
   17a3c:	20000598 	.word	0x20000598

00017a40 <nrfx_gpiote_trigger_enable>:
{
   17a40:	b538      	push	{r3, r4, r5, lr}
   17a42:	4604      	mov	r4, r0
   17a44:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17a46:	f7ff fccb 	bl	173e0 <pin_in_use_by_te>
   17a4a:	b300      	cbz	r0, 17a8e <nrfx_gpiote_trigger_enable+0x4e>
   17a4c:	4620      	mov	r0, r4
   17a4e:	f00c f9e4 	bl	23e1a <pin_is_input>
   17a52:	b1e0      	cbz	r0, 17a8e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   17a54:	4620      	mov	r0, r4
   17a56:	f7ff fce3 	bl	17420 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   17a5a:	0083      	lsls	r3, r0, #2
   17a5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   17a60:	b29b      	uxth	r3, r3
   17a62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17a66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17a6a:	2200      	movs	r2, #0
   17a6c:	601a      	str	r2, [r3, #0]
   17a6e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   17a70:	4a0b      	ldr	r2, [pc, #44]	; (17aa0 <nrfx_gpiote_trigger_enable+0x60>)
   17a72:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   17a76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   17a7a:	f043 0301 	orr.w	r3, r3, #1
   17a7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   17a82:	b15d      	cbz	r5, 17a9c <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   17a84:	2301      	movs	r3, #1
   17a86:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   17a88:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   17a8c:	e006      	b.n	17a9c <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   17a8e:	4620      	mov	r0, r4
   17a90:	f7ff fcfe 	bl	17490 <get_initial_sense>
   17a94:	4601      	mov	r1, r0
   17a96:	4620      	mov	r0, r4
   17a98:	f00c f9a0 	bl	23ddc <nrf_gpio_cfg_sense_set>
}
   17a9c:	bd38      	pop	{r3, r4, r5, pc}
   17a9e:	bf00      	nop
   17aa0:	40006000 	.word	0x40006000

00017aa4 <nrfx_gpiote_trigger_disable>:
{
   17aa4:	b510      	push	{r4, lr}
   17aa6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17aa8:	f7ff fc9a 	bl	173e0 <pin_in_use_by_te>
   17aac:	b1a0      	cbz	r0, 17ad8 <nrfx_gpiote_trigger_disable+0x34>
   17aae:	4620      	mov	r0, r4
   17ab0:	f00c f9b3 	bl	23e1a <pin_is_input>
   17ab4:	b180      	cbz	r0, 17ad8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   17ab6:	4620      	mov	r0, r4
   17ab8:	f7ff fcb2 	bl	17420 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   17abc:	2201      	movs	r2, #1
   17abe:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   17ac0:	4b08      	ldr	r3, [pc, #32]	; (17ae4 <nrfx_gpiote_trigger_disable+0x40>)
   17ac2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   17ac6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   17aca:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   17ace:	f022 0203 	bic.w	r2, r2, #3
   17ad2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   17ad6:	e003      	b.n	17ae0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17ad8:	2100      	movs	r1, #0
   17ada:	4620      	mov	r0, r4
   17adc:	f00c f97e 	bl	23ddc <nrf_gpio_cfg_sense_set>
}
   17ae0:	bd10      	pop	{r4, pc}
   17ae2:	bf00      	nop
   17ae4:	40006000 	.word	0x40006000

00017ae8 <nrfx_gpiote_pin_uninit>:
{
   17ae8:	b510      	push	{r4, lr}
   17aea:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   17aec:	f7ff fc6e 	bl	173cc <pin_in_use>
   17af0:	b908      	cbnz	r0, 17af6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   17af2:	480c      	ldr	r0, [pc, #48]	; (17b24 <nrfx_gpiote_pin_uninit+0x3c>)
}
   17af4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   17af6:	4620      	mov	r0, r4
   17af8:	f7ff ffd4 	bl	17aa4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   17afc:	4620      	mov	r0, r4
   17afe:	f7ff fd77 	bl	175f0 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   17b02:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   17b06:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17b08:	2c01      	cmp	r4, #1
   17b0a:	d008      	beq.n	17b1e <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   17b0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   17b10:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17b14:	2102      	movs	r1, #2
   17b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   17b1a:	4803      	ldr	r0, [pc, #12]	; (17b28 <nrfx_gpiote_pin_uninit+0x40>)
   17b1c:	e7ea      	b.n	17af4 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   17b1e:	4a03      	ldr	r2, [pc, #12]	; (17b2c <nrfx_gpiote_pin_uninit+0x44>)
   17b20:	e7f6      	b.n	17b10 <nrfx_gpiote_pin_uninit+0x28>
   17b22:	bf00      	nop
   17b24:	0bad0004 	.word	0x0bad0004
   17b28:	0bad0000 	.word	0x0bad0000
   17b2c:	50000300 	.word	0x50000300

00017b30 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   17b30:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   17b32:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   17b34:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17b38:	2100      	movs	r1, #0
    uint32_t status = 0;
   17b3a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17b3c:	e003      	b.n	17b46 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   17b3e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   17b40:	3304      	adds	r3, #4
   17b42:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   17b44:	3101      	adds	r1, #1
   17b46:	2907      	cmp	r1, #7
   17b48:	d814      	bhi.n	17b74 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17b4a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   17b4e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   17b52:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   17b54:	2a00      	cmp	r2, #0
   17b56:	d0f2      	beq.n	17b3e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   17b58:	4a0c      	ldr	r2, [pc, #48]	; (17b8c <nrfx_gpiote_irq_handler+0x5c>)
   17b5a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   17b5e:	4210      	tst	r0, r2
   17b60:	d0ed      	beq.n	17b3e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   17b62:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   17b66:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17b6a:	2500      	movs	r5, #0
   17b6c:	6015      	str	r5, [r2, #0]
   17b6e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   17b70:	4304      	orrs	r4, r0
   17b72:	e7e4      	b.n	17b3e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17b74:	4b05      	ldr	r3, [pc, #20]	; (17b8c <nrfx_gpiote_irq_handler+0x5c>)
   17b76:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   17b7a:	b91b      	cbnz	r3, 17b84 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   17b7c:	4620      	mov	r0, r4
   17b7e:	f7ff fddd 	bl	1773c <gpiote_evt_handle>
}
   17b82:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   17b84:	f7ff fd86 	bl	17694 <port_event_handle>
   17b88:	e7f8      	b.n	17b7c <nrfx_gpiote_irq_handler+0x4c>
   17b8a:	bf00      	nop
   17b8c:	40006000 	.word	0x40006000

00017b90 <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   17b90:	4b02      	ldr	r3, [pc, #8]	; (17b9c <nvmc_readonly_mode_set+0xc>)
   17b92:	2200      	movs	r2, #0
   17b94:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   17b98:	4770      	bx	lr
   17b9a:	bf00      	nop
   17b9c:	4001e000 	.word	0x4001e000

00017ba0 <nvmc_write_mode_set>:
   17ba0:	4b02      	ldr	r3, [pc, #8]	; (17bac <nvmc_write_mode_set+0xc>)
   17ba2:	2201      	movs	r2, #1
   17ba4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   17ba8:	4770      	bx	lr
   17baa:	bf00      	nop
   17bac:	4001e000 	.word	0x4001e000

00017bb0 <nvmc_erase_mode_set>:
   17bb0:	4b02      	ldr	r3, [pc, #8]	; (17bbc <nvmc_erase_mode_set+0xc>)
   17bb2:	2202      	movs	r2, #2
   17bb4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   17bb8:	4770      	bx	lr
   17bba:	bf00      	nop
   17bbc:	4001e000 	.word	0x4001e000

00017bc0 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   17bc0:	4b04      	ldr	r3, [pc, #16]	; (17bd4 <nvmc_word_write+0x14>)
   17bc2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   17bc6:	f013 0f01 	tst.w	r3, #1
   17bca:	d0f9      	beq.n	17bc0 <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   17bcc:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   17bce:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   17bd2:	4770      	bx	lr
   17bd4:	4001e000 	.word	0x4001e000

00017bd8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   17bd8:	b510      	push	{r4, lr}
   17bda:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   17bdc:	f00c f94f 	bl	23e7e <is_page_aligned_check>
   17be0:	b908      	cbnz	r0, 17be6 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
   17be2:	4808      	ldr	r0, [pc, #32]	; (17c04 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   17be4:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
   17be6:	f7ff ffe3 	bl	17bb0 <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   17bea:	4b07      	ldr	r3, [pc, #28]	; (17c08 <nrfx_nvmc_page_erase+0x30>)
   17bec:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   17bf0:	4b05      	ldr	r3, [pc, #20]	; (17c08 <nrfx_nvmc_page_erase+0x30>)
   17bf2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   17bf6:	f013 0f01 	tst.w	r3, #1
   17bfa:	d0f9      	beq.n	17bf0 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
   17bfc:	f7ff ffc8 	bl	17b90 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   17c00:	4802      	ldr	r0, [pc, #8]	; (17c0c <nrfx_nvmc_page_erase+0x34>)
   17c02:	e7ef      	b.n	17be4 <nrfx_nvmc_page_erase+0xc>
   17c04:	0bad000a 	.word	0x0bad000a
   17c08:	4001e000 	.word	0x4001e000
   17c0c:	0bad0000 	.word	0x0bad0000

00017c10 <nrfx_power_init>:
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    NRFX_ASSERT(p_config);
    if (m_initialized)
   17c10:	4b0f      	ldr	r3, [pc, #60]	; (17c50 <nrfx_power_init+0x40>)
   17c12:	781b      	ldrb	r3, [r3, #0]
   17c14:	b10b      	cbz	r3, 17c1a <nrfx_power_init+0xa>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   17c16:	480f      	ldr	r0, [pc, #60]	; (17c54 <nrfx_power_init+0x44>)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    return NRFX_SUCCESS;
}
   17c18:	4770      	bx	lr
{
   17c1a:	b510      	push	{r4, lr}
   17c1c:	4604      	mov	r4, r0
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   17c1e:	7801      	ldrb	r1, [r0, #0]
   17c20:	f3c1 0140 	ubfx	r1, r1, #1, #1
   17c24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   17c28:	f00c f95d 	bl	23ee6 <nrf_power_dcdcen_vddh_set>
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   17c2c:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   17c2e:	f013 0f01 	tst.w	r3, #1
   17c32:	d00b      	beq.n	17c4c <nrfx_power_init+0x3c>
   17c34:	2201      	movs	r2, #1
   17c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17c3a:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    nrfx_power_clock_irq_init();
   17c3e:	f00c f964 	bl	23f0a <nrfx_power_clock_irq_init>
    m_initialized = true;
   17c42:	4b03      	ldr	r3, [pc, #12]	; (17c50 <nrfx_power_init+0x40>)
   17c44:	2201      	movs	r2, #1
   17c46:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
   17c48:	4803      	ldr	r0, [pc, #12]	; (17c58 <nrfx_power_init+0x48>)
}
   17c4a:	bd10      	pop	{r4, pc}
   17c4c:	2200      	movs	r2, #0
   17c4e:	e7f2      	b.n	17c36 <nrfx_power_init+0x26>
   17c50:	20004bb1 	.word	0x20004bb1
   17c54:	0bad000c 	.word	0x0bad000c
   17c58:	0bad0000 	.word	0x0bad0000

00017c5c <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
   17c5c:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
   17c5e:	f00c f964 	bl	23f2a <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
   17c62:	4b02      	ldr	r3, [pc, #8]	; (17c6c <nrfx_power_usbevt_uninit+0x10>)
   17c64:	2200      	movs	r2, #0
   17c66:	601a      	str	r2, [r3, #0]
}
   17c68:	bd08      	pop	{r3, pc}
   17c6a:	bf00      	nop
   17c6c:	2000397c 	.word	0x2000397c

00017c70 <nrfx_power_usbevt_init>:
{
   17c70:	b510      	push	{r4, lr}
   17c72:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
   17c74:	f7ff fff2 	bl	17c5c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   17c78:	6823      	ldr	r3, [r4, #0]
   17c7a:	b10b      	cbz	r3, 17c80 <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
   17c7c:	4a01      	ldr	r2, [pc, #4]	; (17c84 <nrfx_power_usbevt_init+0x14>)
   17c7e:	6013      	str	r3, [r2, #0]
}
   17c80:	bd10      	pop	{r4, pc}
   17c82:	bf00      	nop
   17c84:	2000397c 	.word	0x2000397c

00017c88 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   17c88:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   17c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17c8e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   17c92:	f014 0f04 	tst.w	r4, #4
   17c96:	d00c      	beq.n	17cb2 <nrfx_power_irq_handler+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17c98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    if (ret)
   17c9c:	b14b      	cbz	r3, 17cb2 <nrfx_power_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17ca2:	2200      	movs	r2, #0
   17ca4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   17ca8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   17cac:	4b30      	ldr	r3, [pc, #192]	; (17d70 <nrfx_power_irq_handler+0xe8>)
   17cae:	681b      	ldr	r3, [r3, #0]
   17cb0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   17cb2:	f014 0f20 	tst.w	r4, #32
   17cb6:	d00e      	beq.n	17cd6 <nrfx_power_irq_handler+0x4e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17cbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    if (ret)
   17cc0:	b14b      	cbz	r3, 17cd6 <nrfx_power_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17cc6:	2000      	movs	r0, #0
   17cc8:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
   17ccc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   17cd0:	4b28      	ldr	r3, [pc, #160]	; (17d74 <nrfx_power_irq_handler+0xec>)
   17cd2:	681b      	ldr	r3, [r3, #0]
   17cd4:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   17cd6:	f014 0f40 	tst.w	r4, #64	; 0x40
   17cda:	d00f      	beq.n	17cfc <nrfx_power_irq_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17ce0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    if (ret)
   17ce4:	b153      	cbz	r3, 17cfc <nrfx_power_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17cea:	2200      	movs	r2, #0
   17cec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   17cf0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   17cf4:	4b1f      	ldr	r3, [pc, #124]	; (17d74 <nrfx_power_irq_handler+0xec>)
   17cf6:	681b      	ldr	r3, [r3, #0]
   17cf8:	2001      	movs	r0, #1
   17cfa:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   17cfc:	f014 0f80 	tst.w	r4, #128	; 0x80
   17d00:	d00e      	beq.n	17d20 <nrfx_power_irq_handler+0x98>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17d06:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    if (ret)
   17d0a:	b14b      	cbz	r3, 17d20 <nrfx_power_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17d10:	2000      	movs	r0, #0
   17d12:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
   17d16:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   17d1a:	4b17      	ldr	r3, [pc, #92]	; (17d78 <nrfx_power_irq_handler+0xf0>)
   17d1c:	681b      	ldr	r3, [r3, #0]
   17d1e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   17d20:	f414 7f80 	tst.w	r4, #256	; 0x100
   17d24:	d00f      	beq.n	17d46 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17d2a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    if (ret)
   17d2e:	b153      	cbz	r3, 17d46 <nrfx_power_irq_handler+0xbe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17d34:	2200      	movs	r2, #0
   17d36:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   17d3a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   17d3e:	4b0e      	ldr	r3, [pc, #56]	; (17d78 <nrfx_power_irq_handler+0xf0>)
   17d40:	681b      	ldr	r3, [r3, #0]
   17d42:	2001      	movs	r0, #1
   17d44:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   17d46:	f414 7f00 	tst.w	r4, #512	; 0x200
   17d4a:	d00f      	beq.n	17d6c <nrfx_power_irq_handler+0xe4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17d50:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    if (ret)
   17d54:	b153      	cbz	r3, 17d6c <nrfx_power_irq_handler+0xe4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17d56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17d5a:	2200      	movs	r2, #0
   17d5c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   17d60:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   17d64:	4b04      	ldr	r3, [pc, #16]	; (17d78 <nrfx_power_irq_handler+0xf0>)
   17d66:	681b      	ldr	r3, [r3, #0]
   17d68:	2002      	movs	r0, #2
   17d6a:	4798      	blx	r3
    }
#endif
}
   17d6c:	bd10      	pop	{r4, pc}
   17d6e:	bf00      	nop
   17d70:	20003984 	.word	0x20003984
   17d74:	20003980 	.word	0x20003980
   17d78:	2000397c 	.word	0x2000397c

00017d7c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   17d7c:	b508      	push	{r3, lr}
   17d7e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   17d80:	4801      	ldr	r0, [pc, #4]	; (17d88 <nrfx_ppi_channel_alloc+0xc>)
   17d82:	f7ff fa5b 	bl	1723c <nrfx_flag32_alloc>
}
   17d86:	bd08      	pop	{r3, pc}
   17d88:	200005a4 	.word	0x200005a4

00017d8c <usbd_dma_pending_set>:
 *
 * Internal function to set the flag informing about EasyDMA transfer pending.
 * This function is called always just after the EasyDMA transfer is started.
 */
static inline void usbd_dma_pending_set(void)
{
   17d8c:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   17d8e:	f00c f942 	bl	24016 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   17d92:	b118      	cbz	r0, 17d9c <usbd_dma_pending_set+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   17d94:	4b03      	ldr	r3, [pc, #12]	; (17da4 <usbd_dma_pending_set+0x18>)
   17d96:	2282      	movs	r2, #130	; 0x82
   17d98:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = true;
   17d9c:	4b02      	ldr	r3, [pc, #8]	; (17da8 <usbd_dma_pending_set+0x1c>)
   17d9e:	2201      	movs	r2, #1
   17da0:	701a      	strb	r2, [r3, #0]
}
   17da2:	bd08      	pop	{r3, pc}
   17da4:	40027000 	.word	0x40027000
   17da8:	20004bb2 	.word	0x20004bb2

00017dac <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   17dac:	b508      	push	{r3, lr}
   17dae:	f00c f932 	bl	24016 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   17db2:	b118      	cbz	r0, 17dbc <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   17db4:	4b03      	ldr	r3, [pc, #12]	; (17dc4 <usbd_dma_pending_clear+0x18>)
   17db6:	2200      	movs	r2, #0
   17db8:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   17dbc:	4b02      	ldr	r3, [pc, #8]	; (17dc8 <usbd_dma_pending_clear+0x1c>)
   17dbe:	2200      	movs	r2, #0
   17dc0:	701a      	strb	r2, [r3, #0]
}
   17dc2:	bd08      	pop	{r3, pc}
   17dc4:	40027000 	.word	0x40027000
   17dc8:	20004bb2 	.word	0x20004bb2

00017dcc <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   17dcc:	b500      	push	{lr}
   17dce:	b083      	sub	sp, #12
    m_bus_suspend = false;
   17dd0:	2300      	movs	r3, #0
   17dd2:	4a07      	ldr	r2, [pc, #28]	; (17df0 <ev_usbreset_handler+0x24>)
   17dd4:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   17dd6:	4a07      	ldr	r2, [pc, #28]	; (17df4 <ev_usbreset_handler+0x28>)
   17dd8:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   17dda:	9301      	str	r3, [sp, #4]
   17ddc:	2301      	movs	r3, #1
   17dde:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   17de2:	4b05      	ldr	r3, [pc, #20]	; (17df8 <ev_usbreset_handler+0x2c>)
   17de4:	681b      	ldr	r3, [r3, #0]
   17de6:	a801      	add	r0, sp, #4
   17de8:	4798      	blx	r3
}
   17dea:	b003      	add	sp, #12
   17dec:	f85d fb04 	ldr.w	pc, [sp], #4
   17df0:	20004bb4 	.word	0x20004bb4
   17df4:	20004bb3 	.word	0x20004bb3
   17df8:	20003bc8 	.word	0x20003bc8

00017dfc <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
   17dfc:	b500      	push	{lr}
   17dfe:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
   17e00:	2300      	movs	r3, #0
   17e02:	f88d 3004 	strb.w	r3, [sp, #4]
        (((p_reg->ISOSPLIT) & USBD_ISOSPLIT_SPLIT_Msk) >> USBD_ISOSPLIT_SPLIT_Pos);
}

NRF_STATIC_INLINE uint32_t nrf_usbd_framecntr_get(NRF_USBD_Type const * p_reg)
{
    return p_reg->FRAMECNTR;
   17e06:	4b0c      	ldr	r3, [pc, #48]	; (17e38 <ev_sof_handler+0x3c>)
   17e08:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   17e0c:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   17e10:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
   17e14:	b163      	cbz	r3, 17e30 <ev_sof_handler+0x34>

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   17e16:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    }
    m_ep_ready |= iso_ready_mask;
   17e1a:	4a08      	ldr	r2, [pc, #32]	; (17e3c <ev_sof_handler+0x40>)
   17e1c:	6813      	ldr	r3, [r2, #0]
   17e1e:	430b      	orrs	r3, r1
   17e20:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
   17e22:	4b07      	ldr	r3, [pc, #28]	; (17e40 <ev_sof_handler+0x44>)
   17e24:	681b      	ldr	r3, [r3, #0]
   17e26:	a801      	add	r0, sp, #4
   17e28:	4798      	blx	r3
}
   17e2a:	b003      	add	sp, #12
   17e2c:	f85d fb04 	ldr.w	pc, [sp], #4
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   17e30:	f44f 7180 	mov.w	r1, #256	; 0x100
   17e34:	e7f1      	b.n	17e1a <ev_sof_handler+0x1e>
   17e36:	bf00      	nop
   17e38:	40027000 	.word	0x40027000
   17e3c:	20003bc4 	.word	0x20003bc4
   17e40:	20003bc8 	.word	0x20003bc8

00017e44 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   17e44:	b510      	push	{r4, lr}
   17e46:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
   17e48:	4b1e      	ldr	r3, [pc, #120]	; (17ec4 <ev_usbevent_handler+0x80>)
   17e4a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   17e4e:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   17e52:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   17e56:	f414 7f80 	tst.w	r4, #256	; 0x100
   17e5a:	d00b      	beq.n	17e74 <ev_usbevent_handler+0x30>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   17e5c:	4b1a      	ldr	r3, [pc, #104]	; (17ec8 <ev_usbevent_handler+0x84>)
   17e5e:	2201      	movs	r2, #1
   17e60:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   17e62:	2300      	movs	r3, #0
   17e64:	9301      	str	r3, [sp, #4]
   17e66:	2302      	movs	r3, #2
   17e68:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   17e6c:	4b17      	ldr	r3, [pc, #92]	; (17ecc <ev_usbevent_handler+0x88>)
   17e6e:	681b      	ldr	r3, [r3, #0]
   17e70:	a801      	add	r0, sp, #4
   17e72:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   17e74:	f414 7f00 	tst.w	r4, #512	; 0x200
   17e78:	d00a      	beq.n	17e90 <ev_usbevent_handler+0x4c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   17e7a:	2300      	movs	r3, #0
   17e7c:	4a12      	ldr	r2, [pc, #72]	; (17ec8 <ev_usbevent_handler+0x84>)
   17e7e:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   17e80:	9301      	str	r3, [sp, #4]
   17e82:	2303      	movs	r3, #3
   17e84:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   17e88:	4b10      	ldr	r3, [pc, #64]	; (17ecc <ev_usbevent_handler+0x88>)
   17e8a:	681b      	ldr	r3, [r3, #0]
   17e8c:	a801      	add	r0, sp, #4
   17e8e:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   17e90:	f414 6f80 	tst.w	r4, #1024	; 0x400
   17e94:	d013      	beq.n	17ebe <ev_usbevent_handler+0x7a>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   17e96:	4b0c      	ldr	r3, [pc, #48]	; (17ec8 <ev_usbevent_handler+0x84>)
   17e98:	781b      	ldrb	r3, [r3, #0]
   17e9a:	b183      	cbz	r3, 17ebe <ev_usbevent_handler+0x7a>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   17e9c:	2200      	movs	r2, #0
   17e9e:	4b0a      	ldr	r3, [pc, #40]	; (17ec8 <ev_usbevent_handler+0x84>)
   17ea0:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   17ea2:	4b08      	ldr	r3, [pc, #32]	; (17ec4 <ev_usbevent_handler+0x80>)
   17ea4:	2101      	movs	r1, #1
   17ea6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   17eaa:	6599      	str	r1, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   17eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   17eae:	9201      	str	r2, [sp, #4]
   17eb0:	2304      	movs	r3, #4
   17eb2:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   17eb6:	4b05      	ldr	r3, [pc, #20]	; (17ecc <ev_usbevent_handler+0x88>)
   17eb8:	681b      	ldr	r3, [r3, #0]
   17eba:	a801      	add	r0, sp, #4
   17ebc:	4798      	blx	r3
        }
    }
}
   17ebe:	b002      	add	sp, #8
   17ec0:	bd10      	pop	{r4, pc}
   17ec2:	bf00      	nop
   17ec4:	40027000 	.word	0x40027000
   17ec8:	20004bb4 	.word	0x20004bb4
   17ecc:	20003bc8 	.word	0x20003bc8

00017ed0 <usbd_errata_171_begin>:
	__asm__ volatile(
   17ed0:	f04f 0240 	mov.w	r2, #64	; 0x40
   17ed4:	f3ef 8311 	mrs	r3, BASEPRI
   17ed8:	f382 8812 	msr	BASEPRI_MAX, r2
   17edc:	f3bf 8f6f 	isb	sy
 * @brief Begin errata 171.
 */
static inline void usbd_errata_171_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   17ee0:	4a0b      	ldr	r2, [pc, #44]	; (17f10 <usbd_errata_171_begin+0x40>)
   17ee2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
   17ee6:	b972      	cbnz	r2, 17f06 <usbd_errata_171_begin+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   17ee8:	4a09      	ldr	r2, [pc, #36]	; (17f10 <usbd_errata_171_begin+0x40>)
   17eea:	f249 3175 	movw	r1, #37749	; 0x9375
   17eee:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   17ef2:	20c0      	movs	r0, #192	; 0xc0
   17ef4:	f8c2 0c14 	str.w	r0, [r2, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   17ef8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
   17efc:	f383 8811 	msr	BASEPRI, r3
   17f00:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   17f04:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   17f06:	4a02      	ldr	r2, [pc, #8]	; (17f10 <usbd_errata_171_begin+0x40>)
   17f08:	21c0      	movs	r1, #192	; 0xc0
   17f0a:	f8c2 1c14 	str.w	r1, [r2, #3092]	; 0xc14
   17f0e:	e7f5      	b.n	17efc <usbd_errata_171_begin+0x2c>
   17f10:	4006e000 	.word	0x4006e000

00017f14 <usbd_errata_171_end>:
	__asm__ volatile(
   17f14:	f04f 0240 	mov.w	r2, #64	; 0x40
   17f18:	f3ef 8311 	mrs	r3, BASEPRI
   17f1c:	f382 8812 	msr	BASEPRI_MAX, r2
   17f20:	f3bf 8f6f 	isb	sy
 * @brief End errata 171.
 */
static inline void usbd_errata_171_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   17f24:	4a0b      	ldr	r2, [pc, #44]	; (17f54 <usbd_errata_171_end+0x40>)
   17f26:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
   17f2a:	b972      	cbnz	r2, 17f4a <usbd_errata_171_end+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   17f2c:	4a09      	ldr	r2, [pc, #36]	; (17f54 <usbd_errata_171_end+0x40>)
   17f2e:	f249 3175 	movw	r1, #37749	; 0x9375
   17f32:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   17f36:	2000      	movs	r0, #0
   17f38:	f8c2 0c14 	str.w	r0, [r2, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   17f3c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
   17f40:	f383 8811 	msr	BASEPRI, r3
   17f44:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   17f48:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   17f4a:	4a02      	ldr	r2, [pc, #8]	; (17f54 <usbd_errata_171_end+0x40>)
   17f4c:	2100      	movs	r1, #0
   17f4e:	f8c2 1c14 	str.w	r1, [r2, #3092]	; 0xc14
   17f52:	e7f5      	b.n	17f40 <usbd_errata_171_end+0x2c>
   17f54:	4006e000 	.word	0x4006e000

00017f58 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   17f58:	f04f 0240 	mov.w	r2, #64	; 0x40
   17f5c:	f3ef 8311 	mrs	r3, BASEPRI
   17f60:	f382 8812 	msr	BASEPRI_MAX, r2
   17f64:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   17f68:	4a0b      	ldr	r2, [pc, #44]	; (17f98 <usbd_errata_187_211_begin+0x40>)
   17f6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
   17f6e:	b972      	cbnz	r2, 17f8e <usbd_errata_187_211_begin+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   17f70:	4a09      	ldr	r2, [pc, #36]	; (17f98 <usbd_errata_187_211_begin+0x40>)
   17f72:	f249 3175 	movw	r1, #37749	; 0x9375
   17f76:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   17f7a:	2003      	movs	r0, #3
   17f7c:	f8c2 0d14 	str.w	r0, [r2, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   17f80:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
   17f84:	f383 8811 	msr	BASEPRI, r3
   17f88:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   17f8c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   17f8e:	4a02      	ldr	r2, [pc, #8]	; (17f98 <usbd_errata_187_211_begin+0x40>)
   17f90:	2103      	movs	r1, #3
   17f92:	f8c2 1d14 	str.w	r1, [r2, #3348]	; 0xd14
   17f96:	e7f5      	b.n	17f84 <usbd_errata_187_211_begin+0x2c>
   17f98:	4006e000 	.word	0x4006e000

00017f9c <usbd_errata_187_211_end>:
	__asm__ volatile(
   17f9c:	f04f 0240 	mov.w	r2, #64	; 0x40
   17fa0:	f3ef 8311 	mrs	r3, BASEPRI
   17fa4:	f382 8812 	msr	BASEPRI_MAX, r2
   17fa8:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   17fac:	4a0b      	ldr	r2, [pc, #44]	; (17fdc <usbd_errata_187_211_end+0x40>)
   17fae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
   17fb2:	b972      	cbnz	r2, 17fd2 <usbd_errata_187_211_end+0x36>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   17fb4:	4a09      	ldr	r2, [pc, #36]	; (17fdc <usbd_errata_187_211_end+0x40>)
   17fb6:	f249 3175 	movw	r1, #37749	; 0x9375
   17fba:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   17fbe:	2000      	movs	r0, #0
   17fc0:	f8c2 0d14 	str.w	r0, [r2, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   17fc4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	__asm__ volatile(
   17fc8:	f383 8811 	msr	BASEPRI, r3
   17fcc:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   17fd0:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   17fd2:	4a02      	ldr	r2, [pc, #8]	; (17fdc <usbd_errata_187_211_end+0x40>)
   17fd4:	2100      	movs	r1, #0
   17fd6:	f8c2 1d14 	str.w	r1, [r2, #3348]	; 0xd14
   17fda:	e7f5      	b.n	17fc8 <usbd_errata_187_211_end+0x2c>
   17fdc:	4006e000 	.word	0x4006e000

00017fe0 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
   17fe0:	b508      	push	{r3, lr}
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   17fe2:	f00c f805 	bl	23ff0 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   17fe6:	b9e0      	cbnz	r0, 18022 <usbd_enable+0x42>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   17fe8:	f00b fff8 	bl	23fdc <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
   17fec:	b9e0      	cbnz	r0, 18028 <usbd_enable+0x48>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   17fee:	4b13      	ldr	r3, [pc, #76]	; (1803c <usbd_enable+0x5c>)
   17ff0:	2201      	movs	r2, #1
   17ff2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   17ff6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   17ffa:	4b10      	ldr	r3, [pc, #64]	; (1803c <usbd_enable+0x5c>)
   17ffc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   18000:	f413 6f00 	tst.w	r3, #2048	; 0x800
   18004:	d0f9      	beq.n	17ffa <usbd_enable+0x1a>
    p_reg->EVENTCAUSE = flags;
   18006:	4b0d      	ldr	r3, [pc, #52]	; (1803c <usbd_enable+0x5c>)
   18008:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1800c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   18010:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   18014:	f00b ffe2 	bl	23fdc <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
   18018:	b948      	cbnz	r0, 1802e <usbd_enable+0x4e>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1801a:	f00b ffe9 	bl	23ff0 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
   1801e:	b948      	cbnz	r0, 18034 <usbd_enable+0x54>
    {
        usbd_errata_187_211_end();
    }
}
   18020:	bd08      	pop	{r3, pc}
        usbd_errata_187_211_begin();
   18022:	f7ff ff99 	bl	17f58 <usbd_errata_187_211_begin>
   18026:	e7df      	b.n	17fe8 <usbd_enable+0x8>
        usbd_errata_171_begin();
   18028:	f7ff ff52 	bl	17ed0 <usbd_errata_171_begin>
   1802c:	e7df      	b.n	17fee <usbd_enable+0xe>
        usbd_errata_171_end();
   1802e:	f7ff ff71 	bl	17f14 <usbd_errata_171_end>
   18032:	e7f2      	b.n	1801a <usbd_enable+0x3a>
        usbd_errata_187_211_end();
   18034:	f7ff ffb2 	bl	17f9c <usbd_errata_187_211_end>
}
   18038:	e7f2      	b.n	18020 <usbd_enable+0x40>
   1803a:	bf00      	nop
   1803c:	40027000 	.word	0x40027000

00018040 <nrf_usbd_epin_dma_handler>:
{
   18040:	b510      	push	{r4, lr}
   18042:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   18044:	f7ff feb2 	bl	17dac <usbd_dma_pending_clear>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18048:	b262      	sxtb	r2, r4
   1804a:	2a00      	cmp	r2, #0
   1804c:	db1e      	blt.n	1808c <nrf_usbd_epin_dma_handler+0x4c>
   1804e:	4b1c      	ldr	r3, [pc, #112]	; (180c0 <nrf_usbd_epin_dma_handler+0x80>)
   18050:	f004 000f 	and.w	r0, r4, #15
   18054:	0104      	lsls	r4, r0, #4
   18056:	eb03 1100 	add.w	r1, r3, r0, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1805a:	7b89      	ldrb	r1, [r1, #14]
   1805c:	2903      	cmp	r1, #3
   1805e:	d017      	beq.n	18090 <nrf_usbd_epin_dma_handler+0x50>
    else if (p_state->handler.feeder == NULL)
   18060:	591b      	ldr	r3, [r3, r4]
   18062:	bb43      	cbnz	r3, 180b6 <nrf_usbd_epin_dma_handler+0x76>
    return NRFX_USBD_EP_BITPOS(ep);
   18064:	2a00      	cmp	r2, #0
   18066:	db29      	blt.n	180bc <nrf_usbd_epin_dma_handler+0x7c>
   18068:	2210      	movs	r2, #16
   1806a:	4402      	add	r2, r0
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1806c:	2301      	movs	r3, #1
   1806e:	4093      	lsls	r3, r2
   18070:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18072:	4a14      	ldr	r2, [pc, #80]	; (180c4 <nrf_usbd_epin_dma_handler+0x84>)
   18074:	f3bf 8f5b 	dmb	ish
   18078:	e852 0f00 	ldrex	r0, [r2]
   1807c:	4018      	ands	r0, r3
   1807e:	e842 0100 	strex	r1, r0, [r2]
   18082:	2900      	cmp	r1, #0
   18084:	d1f8      	bne.n	18078 <nrf_usbd_epin_dma_handler+0x38>
   18086:	f3bf 8f5b 	dmb	ish
}
   1808a:	e014      	b.n	180b6 <nrf_usbd_epin_dma_handler+0x76>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1808c:	4b0e      	ldr	r3, [pc, #56]	; (180c8 <nrf_usbd_epin_dma_handler+0x88>)
   1808e:	e7df      	b.n	18050 <nrf_usbd_epin_dma_handler+0x10>
    return NRFX_USBD_EP_BITPOS(ep);
   18090:	2a00      	cmp	r2, #0
   18092:	db11      	blt.n	180b8 <nrf_usbd_epin_dma_handler+0x78>
   18094:	2210      	movs	r2, #16
   18096:	4402      	add	r2, r0
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   18098:	2301      	movs	r3, #1
   1809a:	4093      	lsls	r3, r2
   1809c:	43db      	mvns	r3, r3
   1809e:	4a09      	ldr	r2, [pc, #36]	; (180c4 <nrf_usbd_epin_dma_handler+0x84>)
   180a0:	f3bf 8f5b 	dmb	ish
   180a4:	e852 0f00 	ldrex	r0, [r2]
   180a8:	4018      	ands	r0, r3
   180aa:	e842 0100 	strex	r1, r0, [r2]
   180ae:	2900      	cmp	r1, #0
   180b0:	d1f8      	bne.n	180a4 <nrf_usbd_epin_dma_handler+0x64>
   180b2:	f3bf 8f5b 	dmb	ish
}
   180b6:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   180b8:	2200      	movs	r2, #0
   180ba:	e7ec      	b.n	18096 <nrf_usbd_epin_dma_handler+0x56>
   180bc:	2200      	movs	r2, #0
   180be:	e7d4      	b.n	1806a <nrf_usbd_epin_dma_handler+0x2a>
   180c0:	20003aa0 	.word	0x20003aa0
   180c4:	20003bc0 	.word	0x20003bc0
   180c8:	20003b30 	.word	0x20003b30

000180cc <nrf_usbd_ep0in_dma_handler>:
{
   180cc:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   180ce:	f7ff fe6d 	bl	17dac <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   180d2:	4b13      	ldr	r3, [pc, #76]	; (18120 <nrf_usbd_ep0in_dma_handler+0x54>)
   180d4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   180d8:	2b03      	cmp	r3, #3
   180da:	d004      	beq.n	180e6 <nrf_usbd_ep0in_dma_handler+0x1a>
    else if (p_state->handler.feeder == NULL)
   180dc:	4b10      	ldr	r3, [pc, #64]	; (18120 <nrf_usbd_ep0in_dma_handler+0x54>)
   180de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   180e2:	b173      	cbz	r3, 18102 <nrf_usbd_ep0in_dma_handler+0x36>
}
   180e4:	bd08      	pop	{r3, pc}
   180e6:	4b0f      	ldr	r3, [pc, #60]	; (18124 <nrf_usbd_ep0in_dma_handler+0x58>)
   180e8:	f3bf 8f5b 	dmb	ish
   180ec:	e853 1f00 	ldrex	r1, [r3]
   180f0:	f021 0101 	bic.w	r1, r1, #1
   180f4:	e843 1200 	strex	r2, r1, [r3]
   180f8:	2a00      	cmp	r2, #0
   180fa:	d1f7      	bne.n	180ec <nrf_usbd_ep0in_dma_handler+0x20>
   180fc:	f3bf 8f5b 	dmb	ish
   18100:	e7f0      	b.n	180e4 <nrf_usbd_ep0in_dma_handler+0x18>
   18102:	4b08      	ldr	r3, [pc, #32]	; (18124 <nrf_usbd_ep0in_dma_handler+0x58>)
   18104:	f3bf 8f5b 	dmb	ish
   18108:	e853 1f00 	ldrex	r1, [r3]
   1810c:	f021 0101 	bic.w	r1, r1, #1
   18110:	e843 1200 	strex	r2, r1, [r3]
   18114:	2a00      	cmp	r2, #0
   18116:	d1f7      	bne.n	18108 <nrf_usbd_ep0in_dma_handler+0x3c>
   18118:	f3bf 8f5b 	dmb	ish
   1811c:	e7e2      	b.n	180e4 <nrf_usbd_ep0in_dma_handler+0x18>
   1811e:	bf00      	nop
   18120:	20003aa0 	.word	0x20003aa0
   18124:	20003bc0 	.word	0x20003bc0

00018128 <usbd_ep_data_handler>:
{
   18128:	b530      	push	{r4, r5, lr}
   1812a:	b083      	sub	sp, #12
   1812c:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   1812e:	2501      	movs	r5, #1
   18130:	408d      	lsls	r5, r1
   18132:	4a1f      	ldr	r2, [pc, #124]	; (181b0 <usbd_ep_data_handler+0x88>)
   18134:	6813      	ldr	r3, [r2, #0]
   18136:	432b      	orrs	r3, r5
   18138:	6013      	str	r3, [r2, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   1813a:	f010 0f80 	tst.w	r0, #128	; 0x80
   1813e:	d111      	bne.n	18164 <usbd_ep_data_handler+0x3c>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   18140:	4b1c      	ldr	r3, [pc, #112]	; (181b4 <usbd_ep_data_handler+0x8c>)
   18142:	681b      	ldr	r3, [r3, #0]
   18144:	421d      	tst	r5, r3
   18146:	d10b      	bne.n	18160 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   18148:	2306      	movs	r3, #6
   1814a:	f88d 3004 	strb.w	r3, [sp, #4]
   1814e:	f88d 0006 	strb.w	r0, [sp, #6]
   18152:	2301      	movs	r3, #1
   18154:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   18158:	4b17      	ldr	r3, [pc, #92]	; (181b8 <usbd_ep_data_handler+0x90>)
   1815a:	681b      	ldr	r3, [r3, #0]
   1815c:	a801      	add	r0, sp, #4
   1815e:	4798      	blx	r3
}
   18160:	b003      	add	sp, #12
   18162:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   18164:	f000 030f 	and.w	r3, r0, #15
   18168:	4a14      	ldr	r2, [pc, #80]	; (181bc <usbd_ep_data_handler+0x94>)
   1816a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1816e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18172:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   18176:	681a      	ldr	r2, [r3, #0]
    if (ret)
   18178:	b132      	cbz	r2, 18188 <usbd_ep_data_handler+0x60>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1817a:	2200      	movs	r2, #0
   1817c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1817e:	681b      	ldr	r3, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   18180:	2880      	cmp	r0, #128	; 0x80
   18182:	d012      	beq.n	181aa <usbd_ep_data_handler+0x82>
                nrf_usbd_epin_dma_handler(ep);
   18184:	f7ff ff5c 	bl	18040 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   18188:	4b0a      	ldr	r3, [pc, #40]	; (181b4 <usbd_ep_data_handler+0x8c>)
   1818a:	681b      	ldr	r3, [r3, #0]
   1818c:	421d      	tst	r5, r3
   1818e:	d1e7      	bne.n	18160 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   18190:	2306      	movs	r3, #6
   18192:	f88d 3004 	strb.w	r3, [sp, #4]
   18196:	f88d 4006 	strb.w	r4, [sp, #6]
   1819a:	2300      	movs	r3, #0
   1819c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   181a0:	4b05      	ldr	r3, [pc, #20]	; (181b8 <usbd_ep_data_handler+0x90>)
   181a2:	681b      	ldr	r3, [r3, #0]
   181a4:	a801      	add	r0, sp, #4
   181a6:	4798      	blx	r3
   181a8:	e7da      	b.n	18160 <usbd_ep_data_handler+0x38>
                nrf_usbd_ep0in_dma_handler();
   181aa:	f7ff ff8f 	bl	180cc <nrf_usbd_ep0in_dma_handler>
   181ae:	e7eb      	b.n	18188 <usbd_ep_data_handler+0x60>
   181b0:	20003bc4 	.word	0x20003bc4
   181b4:	20003bc0 	.word	0x20003bc0
   181b8:	20003bc8 	.word	0x20003bc8
   181bc:	00026a84 	.word	0x00026a84

000181c0 <ev_setup_data_handler>:
{
   181c0:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   181c2:	4b07      	ldr	r3, [pc, #28]	; (181e0 <ev_setup_data_handler+0x20>)
   181c4:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   181c6:	f993 3000 	ldrsb.w	r3, [r3]
   181ca:	2b00      	cmp	r3, #0
   181cc:	db06      	blt.n	181dc <ev_setup_data_handler+0x1c>
   181ce:	2310      	movs	r3, #16
   181d0:	f000 010f 	and.w	r1, r0, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   181d4:	4419      	add	r1, r3
   181d6:	f7ff ffa7 	bl	18128 <usbd_ep_data_handler>
}
   181da:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   181dc:	2300      	movs	r3, #0
   181de:	e7f7      	b.n	181d0 <ev_setup_data_handler+0x10>
   181e0:	20004bb3 	.word	0x20004bb3

000181e4 <nrf_usbd_epoutiso_dma_handler>:
{
   181e4:	b510      	push	{r4, lr}
   181e6:	b082      	sub	sp, #8
   181e8:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   181ea:	f7ff fddf 	bl	17dac <usbd_dma_pending_clear>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   181ee:	b261      	sxtb	r1, r4
   181f0:	2900      	cmp	r1, #0
   181f2:	db2d      	blt.n	18250 <nrf_usbd_epoutiso_dma_handler+0x6c>
   181f4:	4a17      	ldr	r2, [pc, #92]	; (18254 <nrf_usbd_epoutiso_dma_handler+0x70>)
   181f6:	f004 030f 	and.w	r3, r4, #15
   181fa:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   181fe:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   18202:	7b80      	ldrb	r0, [r0, #14]
   18204:	2803      	cmp	r0, #3
   18206:	d021      	beq.n	1824c <nrf_usbd_epoutiso_dma_handler+0x68>
    else if (p_state->handler.consumer == NULL)
   18208:	f852 200c 	ldr.w	r2, [r2, ip]
   1820c:	b9f2      	cbnz	r2, 1824c <nrf_usbd_epoutiso_dma_handler+0x68>
    return NRFX_USBD_EP_BITPOS(ep);
   1820e:	2900      	cmp	r1, #0
   18210:	db00      	blt.n	18214 <nrf_usbd_epoutiso_dma_handler+0x30>
   18212:	2210      	movs	r2, #16
   18214:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   18216:	2301      	movs	r3, #1
   18218:	4093      	lsls	r3, r2
   1821a:	43db      	mvns	r3, r3
   1821c:	4a0e      	ldr	r2, [pc, #56]	; (18258 <nrf_usbd_epoutiso_dma_handler+0x74>)
   1821e:	f3bf 8f5b 	dmb	ish
   18222:	e852 0f00 	ldrex	r0, [r2]
   18226:	4018      	ands	r0, r3
   18228:	e842 0100 	strex	r1, r0, [r2]
   1822c:	2900      	cmp	r1, #0
   1822e:	d1f8      	bne.n	18222 <nrf_usbd_epoutiso_dma_handler+0x3e>
   18230:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   18234:	2306      	movs	r3, #6
   18236:	f88d 3004 	strb.w	r3, [sp, #4]
   1823a:	f88d 4006 	strb.w	r4, [sp, #6]
   1823e:	2300      	movs	r3, #0
   18240:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   18244:	4b05      	ldr	r3, [pc, #20]	; (1825c <nrf_usbd_epoutiso_dma_handler+0x78>)
   18246:	681b      	ldr	r3, [r3, #0]
   18248:	a801      	add	r0, sp, #4
   1824a:	4798      	blx	r3
}
   1824c:	b002      	add	sp, #8
   1824e:	bd10      	pop	{r4, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18250:	4a03      	ldr	r2, [pc, #12]	; (18260 <nrf_usbd_epoutiso_dma_handler+0x7c>)
   18252:	e7d0      	b.n	181f6 <nrf_usbd_epoutiso_dma_handler+0x12>
   18254:	20003aa0 	.word	0x20003aa0
   18258:	20003bc0 	.word	0x20003bc0
   1825c:	20003bc8 	.word	0x20003bc8
   18260:	20003b30 	.word	0x20003b30

00018264 <nrf_usbd_epiniso_dma_handler>:
{
   18264:	b510      	push	{r4, lr}
   18266:	b082      	sub	sp, #8
   18268:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   1826a:	f7ff fd9f 	bl	17dac <usbd_dma_pending_clear>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1826e:	b261      	sxtb	r1, r4
   18270:	2900      	cmp	r1, #0
   18272:	db2c      	blt.n	182ce <nrf_usbd_epiniso_dma_handler+0x6a>
   18274:	4a22      	ldr	r2, [pc, #136]	; (18300 <nrf_usbd_epiniso_dma_handler+0x9c>)
   18276:	f004 030f 	and.w	r3, r4, #15
   1827a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   1827e:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   18282:	7b80      	ldrb	r0, [r0, #14]
   18284:	2803      	cmp	r0, #3
   18286:	d024      	beq.n	182d2 <nrf_usbd_epiniso_dma_handler+0x6e>
    else if (p_state->handler.feeder == NULL)
   18288:	f852 200c 	ldr.w	r2, [r2, ip]
   1828c:	bba2      	cbnz	r2, 182f8 <nrf_usbd_epiniso_dma_handler+0x94>
    return NRFX_USBD_EP_BITPOS(ep);
   1828e:	2900      	cmp	r1, #0
   18290:	db00      	blt.n	18294 <nrf_usbd_epiniso_dma_handler+0x30>
   18292:	2210      	movs	r2, #16
   18294:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   18296:	2301      	movs	r3, #1
   18298:	4093      	lsls	r3, r2
   1829a:	43db      	mvns	r3, r3
   1829c:	4a19      	ldr	r2, [pc, #100]	; (18304 <nrf_usbd_epiniso_dma_handler+0xa0>)
   1829e:	f3bf 8f5b 	dmb	ish
   182a2:	e852 0f00 	ldrex	r0, [r2]
   182a6:	4018      	ands	r0, r3
   182a8:	e842 0100 	strex	r1, r0, [r2]
   182ac:	2900      	cmp	r1, #0
   182ae:	d1f8      	bne.n	182a2 <nrf_usbd_epiniso_dma_handler+0x3e>
   182b0:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   182b4:	2306      	movs	r3, #6
   182b6:	f88d 3004 	strb.w	r3, [sp, #4]
   182ba:	f88d 4006 	strb.w	r4, [sp, #6]
   182be:	2300      	movs	r3, #0
   182c0:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   182c4:	4b10      	ldr	r3, [pc, #64]	; (18308 <nrf_usbd_epiniso_dma_handler+0xa4>)
   182c6:	681b      	ldr	r3, [r3, #0]
   182c8:	a801      	add	r0, sp, #4
   182ca:	4798      	blx	r3
}
   182cc:	e014      	b.n	182f8 <nrf_usbd_epiniso_dma_handler+0x94>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   182ce:	4a0f      	ldr	r2, [pc, #60]	; (1830c <nrf_usbd_epiniso_dma_handler+0xa8>)
   182d0:	e7d1      	b.n	18276 <nrf_usbd_epiniso_dma_handler+0x12>
    return NRFX_USBD_EP_BITPOS(ep);
   182d2:	2900      	cmp	r1, #0
   182d4:	db12      	blt.n	182fc <nrf_usbd_epiniso_dma_handler+0x98>
   182d6:	2210      	movs	r2, #16
   182d8:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   182da:	2301      	movs	r3, #1
   182dc:	4093      	lsls	r3, r2
   182de:	43db      	mvns	r3, r3
   182e0:	4a08      	ldr	r2, [pc, #32]	; (18304 <nrf_usbd_epiniso_dma_handler+0xa0>)
   182e2:	f3bf 8f5b 	dmb	ish
   182e6:	e852 0f00 	ldrex	r0, [r2]
   182ea:	4018      	ands	r0, r3
   182ec:	e842 0100 	strex	r1, r0, [r2]
   182f0:	2900      	cmp	r1, #0
   182f2:	d1f8      	bne.n	182e6 <nrf_usbd_epiniso_dma_handler+0x82>
   182f4:	f3bf 8f5b 	dmb	ish
}
   182f8:	b002      	add	sp, #8
   182fa:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   182fc:	2200      	movs	r2, #0
   182fe:	e7eb      	b.n	182d8 <nrf_usbd_epiniso_dma_handler+0x74>
   18300:	20003aa0 	.word	0x20003aa0
   18304:	20003bc0 	.word	0x20003bc0
   18308:	20003bc8 	.word	0x20003bc8
   1830c:	20003b30 	.word	0x20003b30

00018310 <nrfx_usbd_isoinconfig_set>:
}

NRF_STATIC_INLINE void nrf_usbd_isoinconfig_set(NRF_USBD_Type *        p_reg,
                                                nrf_usbd_isoinconfig_t config)
{
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   18310:	4b01      	ldr	r3, [pc, #4]	; (18318 <nrfx_usbd_isoinconfig_set+0x8>)
   18312:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
   18316:	4770      	bx	lr
   18318:	40027000 	.word	0x40027000

0001831c <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   1831c:	2300      	movs	r3, #0
   1831e:	4a02      	ldr	r2, [pc, #8]	; (18328 <nrfx_usbd_uninit+0xc>)
   18320:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   18322:	4a02      	ldr	r2, [pc, #8]	; (1832c <nrfx_usbd_uninit+0x10>)
   18324:	7013      	strb	r3, [r2, #0]
    return;
}
   18326:	4770      	bx	lr
   18328:	20003bc8 	.word	0x20003bc8
   1832c:	20004bb5 	.word	0x20004bb5

00018330 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   18330:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
   18332:	4b25      	ldr	r3, [pc, #148]	; (183c8 <nrfx_usbd_enable+0x98>)
   18334:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18338:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1833c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
   18340:	f7ff fe4e 	bl	17fe0 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
   18344:	f00b fe71 	bl	2402a <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
   18348:	b110      	cbz	r0, 18350 <nrfx_usbd_enable+0x20>
   1834a:	4b20      	ldr	r3, [pc, #128]	; (183cc <nrfx_usbd_enable+0x9c>)
   1834c:	781b      	ldrb	r3, [r3, #0]
   1834e:	bb53      	cbnz	r3, 183a6 <nrfx_usbd_enable+0x76>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   18350:	f00b fe4e 	bl	23ff0 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   18354:	bb90      	cbnz	r0, 183bc <nrfx_usbd_enable+0x8c>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   18356:	f00b fe37 	bl	23fc8 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
   1835a:	b158      	cbz	r0, 18374 <nrfx_usbd_enable+0x44>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   1835c:	4b1a      	ldr	r3, [pc, #104]	; (183c8 <nrfx_usbd_enable+0x98>)
   1835e:	f240 72e3 	movw	r2, #2019	; 0x7e3
   18362:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   18366:	2240      	movs	r2, #64	; 0x40
   18368:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   1836c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   18370:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   18374:	4b14      	ldr	r3, [pc, #80]	; (183c8 <nrfx_usbd_enable+0x98>)
   18376:	2280      	movs	r2, #128	; 0x80
   18378:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
   1837c:	2000      	movs	r0, #0
   1837e:	f7ff ffc7 	bl	18310 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   18382:	4b13      	ldr	r3, [pc, #76]	; (183d0 <nrfx_usbd_enable+0xa0>)
   18384:	f240 12ff 	movw	r2, #511	; 0x1ff
   18388:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   1838a:	2400      	movs	r4, #0
   1838c:	4b11      	ldr	r3, [pc, #68]	; (183d4 <nrfx_usbd_enable+0xa4>)
   1838e:	601c      	str	r4, [r3, #0]
    usbd_dma_pending_clear();
   18390:	f7ff fd0c 	bl	17dac <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   18394:	4b10      	ldr	r3, [pc, #64]	; (183d8 <nrfx_usbd_enable+0xa8>)
   18396:	701c      	strb	r4, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   18398:	4b10      	ldr	r3, [pc, #64]	; (183dc <nrfx_usbd_enable+0xac>)
   1839a:	2202      	movs	r2, #2
   1839c:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1839e:	f00b fe27 	bl	23ff0 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   183a2:	b970      	cbnz	r0, 183c2 <nrfx_usbd_enable+0x92>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   183a4:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   183a6:	4b08      	ldr	r3, [pc, #32]	; (183c8 <nrfx_usbd_enable+0x98>)
   183a8:	2400      	movs	r4, #0
   183aa:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   183ae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
   183b2:	f7ff fe15 	bl	17fe0 <usbd_enable>
         m_first_enable = false;
   183b6:	4b05      	ldr	r3, [pc, #20]	; (183cc <nrfx_usbd_enable+0x9c>)
   183b8:	701c      	strb	r4, [r3, #0]
   183ba:	e7c9      	b.n	18350 <nrfx_usbd_enable+0x20>
        usbd_errata_187_211_begin();
   183bc:	f7ff fdcc 	bl	17f58 <usbd_errata_187_211_begin>
   183c0:	e7c9      	b.n	18356 <nrfx_usbd_enable+0x26>
        usbd_errata_187_211_end();
   183c2:	f7ff fdeb 	bl	17f9c <usbd_errata_187_211_end>
}
   183c6:	e7ed      	b.n	183a4 <nrfx_usbd_enable+0x74>
   183c8:	40027000 	.word	0x40027000
   183cc:	200007f0 	.word	0x200007f0
   183d0:	20003bc4 	.word	0x20003bc4
   183d4:	20003bc0 	.word	0x20003bc0
   183d8:	20004bb3 	.word	0x20004bb3
   183dc:	20004bb5 	.word	0x20004bb5

000183e0 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
   183e0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   183e2:	4b09      	ldr	r3, [pc, #36]	; (18408 <nrfx_usbd_start+0x28>)
   183e4:	2200      	movs	r2, #0
   183e6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   183e8:	b960      	cbnz	r0, 18404 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
   183ea:	4b08      	ldr	r3, [pc, #32]	; (1840c <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
   183ec:	4c08      	ldr	r4, [pc, #32]	; (18410 <nrfx_usbd_start+0x30>)
   183ee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   183f2:	2027      	movs	r0, #39	; 0x27
   183f4:	f009 fbeb 	bl	21bce <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   183f8:	2301      	movs	r3, #1
   183fa:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   183fe:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   18402:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   18404:	4b03      	ldr	r3, [pc, #12]	; (18414 <nrfx_usbd_start+0x34>)
   18406:	e7f1      	b.n	183ec <nrfx_usbd_start+0xc>
   18408:	20004bb4 	.word	0x20004bb4
   1840c:	01c01407 	.word	0x01c01407
   18410:	40027000 	.word	0x40027000
   18414:	01e01407 	.word	0x01e01407

00018418 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   18418:	4b03      	ldr	r3, [pc, #12]	; (18428 <nrfx_usbd_is_enabled+0x10>)
   1841a:	7818      	ldrb	r0, [r3, #0]
}
   1841c:	2801      	cmp	r0, #1
   1841e:	bf94      	ite	ls
   18420:	2000      	movls	r0, #0
   18422:	2001      	movhi	r0, #1
   18424:	4770      	bx	lr
   18426:	bf00      	nop
   18428:	20004bb5 	.word	0x20004bb5

0001842c <nrfx_usbd_suspend>:
	__asm__ volatile(
   1842c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18430:	f3ef 8311 	mrs	r3, BASEPRI
   18434:	f382 8812 	msr	BASEPRI_MAX, r2
   18438:	f3bf 8f6f 	isb	sy
bool nrfx_usbd_suspend(void)
{
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
   1843c:	4a11      	ldr	r2, [pc, #68]	; (18484 <nrfx_usbd_suspend+0x58>)
   1843e:	7812      	ldrb	r2, [r2, #0]
   18440:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   18444:	b1c2      	cbz	r2, 18478 <nrfx_usbd_suspend+0x4c>
    return p_reg->EVENTCAUSE;
   18446:	4a10      	ldr	r2, [pc, #64]	; (18488 <nrfx_usbd_suspend+0x5c>)
   18448:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   1844c:	f412 7f00 	tst.w	r2, #512	; 0x200
   18450:	d111      	bne.n	18476 <nrfx_usbd_suspend+0x4a>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   18452:	4a0d      	ldr	r2, [pc, #52]	; (18488 <nrfx_usbd_suspend+0x5c>)
   18454:	2101      	movs	r1, #1
   18456:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1845a:	f8d2 152c 	ldr.w	r1, [r2, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   1845e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   18462:	f412 7f00 	tst.w	r2, #512	; 0x200
   18466:	d007      	beq.n	18478 <nrfx_usbd_suspend+0x4c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   18468:	4a07      	ldr	r2, [pc, #28]	; (18488 <nrfx_usbd_suspend+0x5c>)
   1846a:	2000      	movs	r0, #0
   1846c:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   18470:	f8d2 252c 	ldr.w	r2, [r2, #1324]	; 0x52c
}
   18474:	e000      	b.n	18478 <nrfx_usbd_suspend+0x4c>
    bool suspended = false;
   18476:	2000      	movs	r0, #0
	__asm__ volatile(
   18478:	f383 8811 	msr	BASEPRI, r3
   1847c:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
   18480:	4770      	bx	lr
   18482:	bf00      	nop
   18484:	20004bb4 	.word	0x20004bb4
   18488:	40027000 	.word	0x40027000

0001848c <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1848c:	f010 0f80 	tst.w	r0, #128	; 0x80
   18490:	d106      	bne.n	184a0 <nrfx_usbd_ep_max_packet_size_set+0x14>
   18492:	4b04      	ldr	r3, [pc, #16]	; (184a4 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
   18494:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18498:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
   1849c:	8199      	strh	r1, [r3, #12]
}
   1849e:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   184a0:	4b01      	ldr	r3, [pc, #4]	; (184a8 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
   184a2:	e7f7      	b.n	18494 <nrfx_usbd_ep_max_packet_size_set+0x8>
   184a4:	20003aa0 	.word	0x20003aa0
   184a8:	20003b30 	.word	0x20003b30

000184ac <nrfx_usbd_init>:
{
   184ac:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   184ae:	4b25      	ldr	r3, [pc, #148]	; (18544 <nrfx_usbd_init+0x98>)
   184b0:	781c      	ldrb	r4, [r3, #0]
   184b2:	2c00      	cmp	r4, #0
   184b4:	d144      	bne.n	18540 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
   184b6:	4b24      	ldr	r3, [pc, #144]	; (18548 <nrfx_usbd_init+0x9c>)
   184b8:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   184ba:	4b22      	ldr	r3, [pc, #136]	; (18544 <nrfx_usbd_init+0x98>)
   184bc:	2201      	movs	r2, #1
   184be:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   184c0:	4625      	mov	r5, r4
   184c2:	e012      	b.n	184ea <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   184c4:	2140      	movs	r1, #64	; 0x40
   184c6:	4630      	mov	r0, r6
   184c8:	f7ff ffe0 	bl	1848c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   184cc:	f016 0f80 	tst.w	r6, #128	; 0x80
   184d0:	d115      	bne.n	184fe <nrfx_usbd_init+0x52>
   184d2:	491e      	ldr	r1, [pc, #120]	; (1854c <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
   184d4:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   184d8:	0118      	lsls	r0, r3, #4
   184da:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
   184de:	2200      	movs	r2, #0
   184e0:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
   184e2:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
   184e4:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   184e6:	3501      	adds	r5, #1
   184e8:	b2ed      	uxtb	r5, r5
   184ea:	2d08      	cmp	r5, #8
   184ec:	d81c      	bhi.n	18528 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   184ee:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   184f2:	f015 0f08 	tst.w	r5, #8
   184f6:	d0e5      	beq.n	184c4 <nrfx_usbd_init+0x18>
   184f8:	f240 11ff 	movw	r1, #511	; 0x1ff
   184fc:	e7e3      	b.n	184c6 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   184fe:	4914      	ldr	r1, [pc, #80]	; (18550 <nrfx_usbd_init+0xa4>)
   18500:	e7e8      	b.n	184d4 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   18502:	2140      	movs	r1, #64	; 0x40
   18504:	4620      	mov	r0, r4
   18506:	f7ff ffc1 	bl	1848c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1850a:	f014 0f80 	tst.w	r4, #128	; 0x80
   1850e:	d113      	bne.n	18538 <nrfx_usbd_init+0x8c>
   18510:	490e      	ldr	r1, [pc, #56]	; (1854c <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
   18512:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18516:	0118      	lsls	r0, r3, #4
   18518:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
   1851c:	2200      	movs	r2, #0
   1851e:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
   18520:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
   18522:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   18524:	3401      	adds	r4, #1
   18526:	b2e4      	uxtb	r4, r4
   18528:	2c08      	cmp	r4, #8
   1852a:	d807      	bhi.n	1853c <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1852c:	f014 0f08 	tst.w	r4, #8
   18530:	d0e7      	beq.n	18502 <nrfx_usbd_init+0x56>
   18532:	f240 11ff 	movw	r1, #511	; 0x1ff
   18536:	e7e5      	b.n	18504 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18538:	4905      	ldr	r1, [pc, #20]	; (18550 <nrfx_usbd_init+0xa4>)
   1853a:	e7ea      	b.n	18512 <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
   1853c:	4805      	ldr	r0, [pc, #20]	; (18554 <nrfx_usbd_init+0xa8>)
}
   1853e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
   18540:	4805      	ldr	r0, [pc, #20]	; (18558 <nrfx_usbd_init+0xac>)
   18542:	e7fc      	b.n	1853e <nrfx_usbd_init+0x92>
   18544:	20004bb5 	.word	0x20004bb5
   18548:	20003bc8 	.word	0x20003bc8
   1854c:	20003aa0 	.word	0x20003aa0
   18550:	20003b30 	.word	0x20003b30
   18554:	0bad0000 	.word	0x0bad0000
   18558:	0bad0005 	.word	0x0bad0005

0001855c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   1855c:	b570      	push	{r4, r5, r6, lr}
    return NRFX_USBD_EP_BITPOS(ep);
   1855e:	b245      	sxtb	r5, r0
   18560:	2d00      	cmp	r5, #0
   18562:	db12      	blt.n	1858a <nrfx_usbd_ep_transfer+0x2e>
   18564:	2310      	movs	r3, #16
   18566:	f000 020f 	and.w	r2, r0, #15
   1856a:	18d4      	adds	r4, r2, r3
	__asm__ volatile(
   1856c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18570:	f3ef 8c11 	mrs	ip, BASEPRI
   18574:	f383 8812 	msr	BASEPRI_MAX, r3
   18578:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   1857c:	b93a      	cbnz	r2, 1858e <nrfx_usbd_ep_transfer+0x32>
   1857e:	4b2f      	ldr	r3, [pc, #188]	; (1863c <nrfx_usbd_ep_transfer+0xe0>)
   18580:	781b      	ldrb	r3, [r3, #0]
   18582:	4283      	cmp	r3, r0
   18584:	d003      	beq.n	1858e <nrfx_usbd_ep_transfer+0x32>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
   18586:	482e      	ldr	r0, [pc, #184]	; (18640 <nrfx_usbd_ep_transfer+0xe4>)
   18588:	e052      	b.n	18630 <nrfx_usbd_ep_transfer+0xd4>
    return NRFX_USBD_EP_BITPOS(ep);
   1858a:	2300      	movs	r3, #0
   1858c:	e7eb      	b.n	18566 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1858e:	4b2d      	ldr	r3, [pc, #180]	; (18644 <nrfx_usbd_ep_transfer+0xe8>)
   18590:	681b      	ldr	r3, [r3, #0]
   18592:	43db      	mvns	r3, r3
   18594:	b29b      	uxth	r3, r3
   18596:	482c      	ldr	r0, [pc, #176]	; (18648 <nrfx_usbd_ep_transfer+0xec>)
   18598:	6800      	ldr	r0, [r0, #0]
   1859a:	4303      	orrs	r3, r0
   1859c:	f04f 0e01 	mov.w	lr, #1
   185a0:	fa0e fe04 	lsl.w	lr, lr, r4
   185a4:	ea13 0f0e 	tst.w	r3, lr
   185a8:	d141      	bne.n	1862e <nrfx_usbd_ep_transfer+0xd2>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   185aa:	2d00      	cmp	r5, #0
   185ac:	db1e      	blt.n	185ec <nrfx_usbd_ep_transfer+0x90>
   185ae:	4827      	ldr	r0, [pc, #156]	; (1864c <nrfx_usbd_ep_transfer+0xf0>)
   185b0:	0116      	lsls	r6, r2, #4
   185b2:	eb00 1402 	add.w	r4, r0, r2, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
   185b6:	2d00      	cmp	r5, #0
   185b8:	db1a      	blt.n	185f0 <nrfx_usbd_ep_transfer+0x94>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   185ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   185be:	4b24      	ldr	r3, [pc, #144]	; (18650 <nrfx_usbd_ep_transfer+0xf4>)
   185c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   185c4:	4a23      	ldr	r2, [pc, #140]	; (18654 <nrfx_usbd_ep_transfer+0xf8>)
   185c6:	5182      	str	r2, [r0, r6]
        }
        *p_context = *p_transfer;
   185c8:	c907      	ldmia	r1, {r0, r1, r2}
   185ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   185ce:	6063      	str	r3, [r4, #4]

        p_state->transfer_cnt = 0;
   185d0:	2300      	movs	r3, #0
   185d2:	60a3      	str	r3, [r4, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   185d4:	73a3      	strb	r3, [r4, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   185d6:	4a1c      	ldr	r2, [pc, #112]	; (18648 <nrfx_usbd_ep_transfer+0xec>)
   185d8:	6813      	ldr	r3, [r2, #0]
   185da:	ea43 030e 	orr.w	r3, r3, lr
   185de:	6013      	str	r3, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   185e0:	4b1d      	ldr	r3, [pc, #116]	; (18658 <nrfx_usbd_ep_transfer+0xfc>)
   185e2:	2280      	movs	r2, #128	; 0x80
   185e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
   185e8:	481c      	ldr	r0, [pc, #112]	; (1865c <nrfx_usbd_ep_transfer+0x100>)
}
   185ea:	e021      	b.n	18630 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   185ec:	481c      	ldr	r0, [pc, #112]	; (18660 <nrfx_usbd_ep_transfer+0x104>)
   185ee:	e7df      	b.n	185b0 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   185f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   185f4:	4b1b      	ldr	r3, [pc, #108]	; (18664 <nrfx_usbd_ep_transfer+0x108>)
   185f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   185fa:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   185fc:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   18600:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   18604:	d006      	beq.n	18614 <nrfx_usbd_ep_transfer+0xb8>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   18606:	688a      	ldr	r2, [r1, #8]
   18608:	f012 0f01 	tst.w	r2, #1
   1860c:	d10c      	bne.n	18628 <nrfx_usbd_ep_transfer+0xcc>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   1860e:	4a16      	ldr	r2, [pc, #88]	; (18668 <nrfx_usbd_ep_transfer+0x10c>)
   18610:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
   18612:	e7d9      	b.n	185c8 <nrfx_usbd_ep_transfer+0x6c>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   18614:	688a      	ldr	r2, [r1, #8]
   18616:	f012 0f01 	tst.w	r2, #1
   1861a:	d102      	bne.n	18622 <nrfx_usbd_ep_transfer+0xc6>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   1861c:	4a13      	ldr	r2, [pc, #76]	; (1866c <nrfx_usbd_ep_transfer+0x110>)
   1861e:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
   18620:	e7d2      	b.n	185c8 <nrfx_usbd_ep_transfer+0x6c>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   18622:	4a13      	ldr	r2, [pc, #76]	; (18670 <nrfx_usbd_ep_transfer+0x114>)
   18624:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
   18626:	e7cf      	b.n	185c8 <nrfx_usbd_ep_transfer+0x6c>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   18628:	4a12      	ldr	r2, [pc, #72]	; (18674 <nrfx_usbd_ep_transfer+0x118>)
   1862a:	6022      	str	r2, [r4, #0]
                        NRFX_LOG_DEBUG(
   1862c:	e7cc      	b.n	185c8 <nrfx_usbd_ep_transfer+0x6c>
        ret = NRFX_ERROR_BUSY;
   1862e:	4812      	ldr	r0, [pc, #72]	; (18678 <nrfx_usbd_ep_transfer+0x11c>)
	__asm__ volatile(
   18630:	f38c 8811 	msr	BASEPRI, ip
   18634:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   18638:	bd70      	pop	{r4, r5, r6, pc}
   1863a:	bf00      	nop
   1863c:	20004bb3 	.word	0x20004bb3
   18640:	0bad000a 	.word	0x0bad000a
   18644:	20003bc4 	.word	0x20003bc4
   18648:	20003bc0 	.word	0x20003bc0
   1864c:	20003aa0 	.word	0x20003aa0
   18650:	200039c8 	.word	0x200039c8
   18654:	0002402f 	.word	0x0002402f
   18658:	e000e100 	.word	0xe000e100
   1865c:	0bad0000 	.word	0x0bad0000
   18660:	20003b30 	.word	0x20003b30
   18664:	20003a34 	.word	0x20003a34
   18668:	0002411d 	.word	0x0002411d
   1866c:	00024065 	.word	0x00024065
   18670:	00024087 	.word	0x00024087
   18674:	0002415b 	.word	0x0002415b
   18678:	0bad000b 	.word	0x0bad000b

0001867c <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
   1867c:	4800      	ldr	r0, [pc, #0]	; (18680 <nrfx_usbd_feeder_buffer_get+0x4>)
   1867e:	4770      	bx	lr
   18680:	20003988 	.word	0x20003988

00018684 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
   18684:	b510      	push	{r4, lr}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18686:	f010 0f80 	tst.w	r0, #128	; 0x80
   1868a:	d119      	bne.n	186c0 <nrfx_usbd_ep_status_get+0x3c>
   1868c:	4a0e      	ldr	r2, [pc, #56]	; (186c8 <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
   1868e:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18692:	ea4f 1c00 	mov.w	ip, r0, lsl #4
   18696:	eb02 1000 	add.w	r0, r2, r0, lsl #4
	__asm__ volatile(
   1869a:	f04f 0e40 	mov.w	lr, #64	; 0x40
   1869e:	f3ef 8311 	mrs	r3, BASEPRI
   186a2:	f38e 8812 	msr	BASEPRI_MAX, lr
   186a6:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
   186aa:	6884      	ldr	r4, [r0, #8]
   186ac:	600c      	str	r4, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   186ae:	f852 200c 	ldr.w	r2, [r2, ip]
   186b2:	b13a      	cbz	r2, 186c4 <nrfx_usbd_ep_status_get+0x40>
   186b4:	2004      	movs	r0, #4
	__asm__ volatile(
   186b6:	f383 8811 	msr	BASEPRI, r3
   186ba:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   186be:	bd10      	pop	{r4, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   186c0:	4a02      	ldr	r2, [pc, #8]	; (186cc <nrfx_usbd_ep_status_get+0x48>)
   186c2:	e7e4      	b.n	1868e <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   186c4:	7b80      	ldrb	r0, [r0, #14]
   186c6:	e7f6      	b.n	186b6 <nrfx_usbd_ep_status_get+0x32>
   186c8:	20003aa0 	.word	0x20003aa0
   186cc:	20003b30 	.word	0x20003b30

000186d0 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   186d0:	f010 0f08 	tst.w	r0, #8
   186d4:	d107      	bne.n	186e6 <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   186d6:	f000 000f 	and.w	r0, r0, #15
   186da:	f500 7094 	add.w	r0, r0, #296	; 0x128
   186de:	4b06      	ldr	r3, [pc, #24]	; (186f8 <nrfx_usbd_epout_size_get+0x28>)
   186e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   186e4:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   186e6:	4b04      	ldr	r3, [pc, #16]	; (186f8 <nrfx_usbd_epout_size_get+0x28>)
   186e8:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
   186ec:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   186f0:	d100      	bne.n	186f4 <nrfx_usbd_epout_size_get+0x24>
   186f2:	4770      	bx	lr
            size_isoout = 0;
   186f4:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   186f6:	4770      	bx	lr
   186f8:	40027000 	.word	0x40027000

000186fc <usbd_dmareq_process>:
    if (!m_dma_pending)
   186fc:	4b57      	ldr	r3, [pc, #348]	; (1885c <usbd_dmareq_process+0x160>)
   186fe:	781b      	ldrb	r3, [r3, #0]
   18700:	2b00      	cmp	r3, #0
   18702:	f040 80aa 	bne.w	1885a <usbd_dmareq_process+0x15e>
{
   18706:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1870a:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   1870c:	4b54      	ldr	r3, [pc, #336]	; (18860 <usbd_dmareq_process+0x164>)
   1870e:	681b      	ldr	r3, [r3, #0]
   18710:	4a54      	ldr	r2, [pc, #336]	; (18864 <usbd_dmareq_process+0x168>)
   18712:	6812      	ldr	r2, [r2, #0]
   18714:	4013      	ands	r3, r2
   18716:	f000 809d 	beq.w	18854 <usbd_dmareq_process+0x158>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   1871a:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
   1871e:	d00d      	beq.n	1873c <usbd_dmareq_process+0x40>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
   18720:	f00b fcc6 	bl	240b0 <usbd_dma_scheduler_algorithm>
   18724:	4606      	mov	r6, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   18726:	2e0f      	cmp	r6, #15
   18728:	d910      	bls.n	1874c <usbd_dmareq_process+0x50>
   1872a:	f1a6 0310 	sub.w	r3, r6, #16
   1872e:	b2df      	uxtb	r7, r3
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18730:	f013 0f80 	tst.w	r3, #128	; 0x80
   18734:	d107      	bne.n	18746 <usbd_dmareq_process+0x4a>
   18736:	f8df a140 	ldr.w	sl, [pc, #320]	; 18878 <usbd_dmareq_process+0x17c>
   1873a:	e00c      	b.n	18756 <usbd_dmareq_process+0x5a>
                pos = usbd_dma_scheduler_algorithm(req);
   1873c:	4618      	mov	r0, r3
   1873e:	f00b fcb7 	bl	240b0 <usbd_dma_scheduler_algorithm>
   18742:	4606      	mov	r6, r0
   18744:	e7ef      	b.n	18726 <usbd_dmareq_process+0x2a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18746:	f8df a134 	ldr.w	sl, [pc, #308]	; 1887c <usbd_dmareq_process+0x180>
   1874a:	e004      	b.n	18756 <usbd_dmareq_process+0x5a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1874c:	f066 077f 	orn	r7, r6, #127	; 0x7f
   18750:	b2ff      	uxtb	r7, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18752:	f8df a128 	ldr.w	sl, [pc, #296]	; 1887c <usbd_dmareq_process+0x180>
   18756:	f007 040f 	and.w	r4, r7, #15
   1875a:	ea4f 1b04 	mov.w	fp, r4, lsl #4
   1875e:	eb0a 1804 	add.w	r8, sl, r4, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
   18762:	b27d      	sxtb	r5, r7
   18764:	2d00      	cmp	r5, #0
   18766:	db36      	blt.n	187d6 <usbd_dmareq_process+0xda>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   18768:	4638      	mov	r0, r7
   1876a:	f7ff ffb1 	bl	186d0 <nrfx_usbd_epout_size_get>
   1876e:	4681      	mov	r9, r0
                continue_transfer = p_state->handler.consumer(
   18770:	f85a a00b 	ldr.w	sl, [sl, fp]
   18774:	4603      	mov	r3, r0
   18776:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   1877a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1877e:	a802      	add	r0, sp, #8
   18780:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
   18782:	9b02      	ldr	r3, [sp, #8]
   18784:	b113      	cbz	r3, 1878c <usbd_dmareq_process+0x90>
                else if (transfer.size < rx_size)
   18786:	9b03      	ldr	r3, [sp, #12]
   18788:	454b      	cmp	r3, r9
   1878a:	d332      	bcc.n	187f2 <usbd_dmareq_process+0xf6>
                if (!continue_transfer)
   1878c:	b910      	cbnz	r0, 18794 <usbd_dmareq_process+0x98>
                    p_state->handler.consumer = NULL;
   1878e:	2300      	movs	r3, #0
   18790:	f8c8 3000 	str.w	r3, [r8]
            usbd_dma_pending_set();
   18794:	f7ff fafa 	bl	17d8c <usbd_dma_pending_set>
            m_ep_ready &= ~(1U << pos);
   18798:	2201      	movs	r2, #1
   1879a:	40b2      	lsls	r2, r6
   1879c:	4931      	ldr	r1, [pc, #196]	; (18864 <usbd_dmareq_process+0x168>)
   1879e:	680b      	ldr	r3, [r1, #0]
   187a0:	ea23 0302 	bic.w	r3, r3, r2
   187a4:	600b      	str	r3, [r1, #0]
            p_state->transfer_cnt += transfer.size;
   187a6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   187aa:	9b03      	ldr	r3, [sp, #12]
   187ac:	441a      	add	r2, r3
   187ae:	f8c8 2008 	str.w	r2, [r8, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   187b2:	9a02      	ldr	r2, [sp, #8]
   187b4:	4639      	mov	r1, r7
   187b6:	482c      	ldr	r0, [pc, #176]	; (18868 <usbd_dmareq_process+0x16c>)
   187b8:	f00b fbdd 	bl	23f76 <nrf_usbd_ep_easydma_set>
    return (nrf_usbd_task_t)(
   187bc:	2d00      	cmp	r5, #0
   187be:	db36      	blt.n	1882e <usbd_dmareq_process+0x132>
   187c0:	2328      	movs	r3, #40	; 0x28
   187c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   187c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   187ca:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   187ce:	2201      	movs	r2, #1
   187d0:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   187d2:	681b      	ldr	r3, [r3, #0]
}
   187d4:	e03a      	b.n	1884c <usbd_dmareq_process+0x150>
                continue_transfer = p_state->handler.feeder(
   187d6:	f85a 300b 	ldr.w	r3, [sl, fp]
   187da:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   187de:	f8d8 1004 	ldr.w	r1, [r8, #4]
   187e2:	a802      	add	r0, sp, #8
   187e4:	4798      	blx	r3
                if (!continue_transfer)
   187e6:	2800      	cmp	r0, #0
   187e8:	d1d4      	bne.n	18794 <usbd_dmareq_process+0x98>
                    p_state->handler.feeder = NULL;
   187ea:	2300      	movs	r3, #0
   187ec:	f8c8 3000 	str.w	r3, [r8]
   187f0:	e7d0      	b.n	18794 <usbd_dmareq_process+0x98>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   187f2:	2202      	movs	r2, #2
   187f4:	f888 200e 	strb.w	r2, [r8, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   187f8:	2301      	movs	r3, #1
   187fa:	40b3      	lsls	r3, r6
   187fc:	43db      	mvns	r3, r3
   187fe:	4918      	ldr	r1, [pc, #96]	; (18860 <usbd_dmareq_process+0x164>)
   18800:	f3bf 8f5b 	dmb	ish
   18804:	e851 4f00 	ldrex	r4, [r1]
   18808:	401c      	ands	r4, r3
   1880a:	e841 4000 	strex	r0, r4, [r1]
   1880e:	2800      	cmp	r0, #0
   18810:	d1f8      	bne.n	18804 <usbd_dmareq_process+0x108>
   18812:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   18816:	2306      	movs	r3, #6
   18818:	f88d 3004 	strb.w	r3, [sp, #4]
   1881c:	f88d 7006 	strb.w	r7, [sp, #6]
   18820:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
   18824:	4b11      	ldr	r3, [pc, #68]	; (1886c <usbd_dmareq_process+0x170>)
   18826:	681b      	ldr	r3, [r3, #0]
   18828:	a801      	add	r0, sp, #4
   1882a:	4798      	blx	r3
                    continue;
   1882c:	e76e      	b.n	1870c <usbd_dmareq_process+0x10>
    return (nrf_usbd_task_t)(
   1882e:	2304      	movs	r3, #4
   18830:	e7c7      	b.n	187c2 <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   18832:	4b0f      	ldr	r3, [pc, #60]	; (18870 <usbd_dmareq_process+0x174>)
   18834:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   18838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1883c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   18840:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   18842:	b93b      	cbnz	r3, 18854 <usbd_dmareq_process+0x158>
   18844:	4b08      	ldr	r3, [pc, #32]	; (18868 <usbd_dmareq_process+0x16c>)
   18846:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1884a:	b91b      	cbnz	r3, 18854 <usbd_dmareq_process+0x158>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1884c:	2d00      	cmp	r5, #0
   1884e:	dbf0      	blt.n	18832 <usbd_dmareq_process+0x136>
   18850:	4b08      	ldr	r3, [pc, #32]	; (18874 <usbd_dmareq_process+0x178>)
   18852:	e7ef      	b.n	18834 <usbd_dmareq_process+0x138>
}
   18854:	b005      	add	sp, #20
   18856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1885a:	4770      	bx	lr
   1885c:	20004bb2 	.word	0x20004bb2
   18860:	20003bc0 	.word	0x20003bc0
   18864:	20003bc4 	.word	0x20003bc4
   18868:	40027000 	.word	0x40027000
   1886c:	20003bc8 	.word	0x20003bc8
   18870:	00026a84 	.word	0x00026a84
   18874:	00026a70 	.word	0x00026a70
   18878:	20003aa0 	.word	0x20003aa0
   1887c:	20003b30 	.word	0x20003b30

00018880 <ev_epdata_handler>:
{
   18880:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
   18882:	4b0f      	ldr	r3, [pc, #60]	; (188c0 <ev_epdata_handler+0x40>)
   18884:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   18888:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
   1888c:	e008      	b.n	188a0 <ev_epdata_handler+0x20>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1888e:	f042 0080 	orr.w	r0, r2, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
   18892:	b2d2      	uxtb	r2, r2
   18894:	2301      	movs	r3, #1
   18896:	4093      	lsls	r3, r2
   18898:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   1889c:	f7ff fc44 	bl	18128 <usbd_ep_data_handler>
    while (dataepstatus)
   188a0:	b154      	cbz	r4, 188b8 <ev_epdata_handler+0x38>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   188a2:	fa94 f2a4 	rbit	r2, r4
   188a6:	fab2 f282 	clz	r2, r2
   188aa:	4611      	mov	r1, r2
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   188ac:	2a0f      	cmp	r2, #15
   188ae:	d9ee      	bls.n	1888e <ev_epdata_handler+0xe>
   188b0:	f1a2 0010 	sub.w	r0, r2, #16
   188b4:	b2c0      	uxtb	r0, r0
   188b6:	e7ec      	b.n	18892 <ev_epdata_handler+0x12>
        usbd_dmareq_process();
   188b8:	f7ff ff20 	bl	186fc <usbd_dmareq_process>
}
   188bc:	bd10      	pop	{r4, pc}
   188be:	bf00      	nop
   188c0:	40027000 	.word	0x40027000

000188c4 <nrf_usbd_epout_dma_handler>:
{
   188c4:	b510      	push	{r4, lr}
   188c6:	b082      	sub	sp, #8
   188c8:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   188ca:	f7ff fa6f 	bl	17dac <usbd_dma_pending_clear>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   188ce:	b261      	sxtb	r1, r4
   188d0:	2900      	cmp	r1, #0
   188d2:	db2c      	blt.n	1892e <nrf_usbd_epout_dma_handler+0x6a>
   188d4:	4a23      	ldr	r2, [pc, #140]	; (18964 <nrf_usbd_epout_dma_handler+0xa0>)
   188d6:	f004 030f 	and.w	r3, r4, #15
   188da:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   188de:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   188e2:	7b80      	ldrb	r0, [r0, #14]
   188e4:	2803      	cmp	r0, #3
   188e6:	d024      	beq.n	18932 <nrf_usbd_epout_dma_handler+0x6e>
    else if (p_state->handler.consumer == NULL)
   188e8:	f852 200c 	ldr.w	r2, [r2, ip]
   188ec:	bba2      	cbnz	r2, 18958 <nrf_usbd_epout_dma_handler+0x94>
    return NRFX_USBD_EP_BITPOS(ep);
   188ee:	2900      	cmp	r1, #0
   188f0:	db00      	blt.n	188f4 <nrf_usbd_epout_dma_handler+0x30>
   188f2:	2210      	movs	r2, #16
   188f4:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   188f6:	2301      	movs	r3, #1
   188f8:	4093      	lsls	r3, r2
   188fa:	43db      	mvns	r3, r3
   188fc:	4a1a      	ldr	r2, [pc, #104]	; (18968 <nrf_usbd_epout_dma_handler+0xa4>)
   188fe:	f3bf 8f5b 	dmb	ish
   18902:	e852 0f00 	ldrex	r0, [r2]
   18906:	4018      	ands	r0, r3
   18908:	e842 0100 	strex	r1, r0, [r2]
   1890c:	2900      	cmp	r1, #0
   1890e:	d1f8      	bne.n	18902 <nrf_usbd_epout_dma_handler+0x3e>
   18910:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   18914:	2306      	movs	r3, #6
   18916:	f88d 3004 	strb.w	r3, [sp, #4]
   1891a:	f88d 4006 	strb.w	r4, [sp, #6]
   1891e:	2300      	movs	r3, #0
   18920:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   18924:	4b11      	ldr	r3, [pc, #68]	; (1896c <nrf_usbd_epout_dma_handler+0xa8>)
   18926:	681b      	ldr	r3, [r3, #0]
   18928:	a801      	add	r0, sp, #4
   1892a:	4798      	blx	r3
   1892c:	e014      	b.n	18958 <nrf_usbd_epout_dma_handler+0x94>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1892e:	4a10      	ldr	r2, [pc, #64]	; (18970 <nrf_usbd_epout_dma_handler+0xac>)
   18930:	e7d1      	b.n	188d6 <nrf_usbd_epout_dma_handler+0x12>
    return NRFX_USBD_EP_BITPOS(ep);
   18932:	2900      	cmp	r1, #0
   18934:	db14      	blt.n	18960 <nrf_usbd_epout_dma_handler+0x9c>
   18936:	2210      	movs	r2, #16
   18938:	441a      	add	r2, r3
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1893a:	2301      	movs	r3, #1
   1893c:	4093      	lsls	r3, r2
   1893e:	43db      	mvns	r3, r3
   18940:	4a09      	ldr	r2, [pc, #36]	; (18968 <nrf_usbd_epout_dma_handler+0xa4>)
   18942:	f3bf 8f5b 	dmb	ish
   18946:	e852 0f00 	ldrex	r0, [r2]
   1894a:	4018      	ands	r0, r3
   1894c:	e842 0100 	strex	r1, r0, [r2]
   18950:	2900      	cmp	r1, #0
   18952:	d1f8      	bne.n	18946 <nrf_usbd_epout_dma_handler+0x82>
   18954:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   18958:	f7ff fed0 	bl	186fc <usbd_dmareq_process>
}
   1895c:	b002      	add	sp, #8
   1895e:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   18960:	2200      	movs	r2, #0
   18962:	e7e9      	b.n	18938 <nrf_usbd_epout_dma_handler+0x74>
   18964:	20003aa0 	.word	0x20003aa0
   18968:	20003bc0 	.word	0x20003bc0
   1896c:	20003bc8 	.word	0x20003bc8
   18970:	20003b30 	.word	0x20003b30

00018974 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   18974:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   18978:	4b01      	ldr	r3, [pc, #4]	; (18980 <nrfx_usbd_ep_stall+0xc>)
   1897a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   1897e:	4770      	bx	lr
   18980:	40027000 	.word	0x40027000

00018984 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   18984:	f010 0f08 	tst.w	r0, #8
   18988:	d117      	bne.n	189ba <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1898a:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   1898e:	f010 0f80 	tst.w	r0, #128	; 0x80
   18992:	d10c      	bne.n	189ae <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
   18994:	f503 7388 	add.w	r3, r3, #272	; 0x110
   18998:	009b      	lsls	r3, r3, #2
   1899a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1899e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   189a2:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   189a4:	2801      	cmp	r0, #1
   189a6:	bf14      	ite	ne
   189a8:	2000      	movne	r0, #0
   189aa:	2001      	moveq	r0, #1
   189ac:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
   189ae:	f503 7384 	add.w	r3, r3, #264	; 0x108
   189b2:	4a03      	ldr	r2, [pc, #12]	; (189c0 <nrfx_usbd_ep_stall_check+0x3c>)
   189b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   189b8:	e7f4      	b.n	189a4 <nrfx_usbd_ep_stall_check+0x20>
        return false;
   189ba:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   189bc:	4770      	bx	lr
   189be:	bf00      	nop
   189c0:	40027000 	.word	0x40027000

000189c4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   189c4:	4b04      	ldr	r3, [pc, #16]	; (189d8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   189c6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   189ca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   189ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   189d2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   189d6:	4770      	bx	lr
   189d8:	40027000 	.word	0x40027000

000189dc <nrfx_usbd_setup_get>:
__ssp_bos_icheck3(memset, void *, int)
   189dc:	2300      	movs	r3, #0
   189de:	6003      	str	r3, [r0, #0]
   189e0:	6043      	str	r3, [r0, #4]
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   189e2:	4b11      	ldr	r3, [pc, #68]	; (18a28 <nrfx_usbd_setup_get+0x4c>)
   189e4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
   189e8:	7002      	strb	r2, [r0, #0]
    return (uint8_t)(p_reg->BREQUEST);
   189ea:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
   189ee:	7042      	strb	r2, [r0, #1]
    const uint16_t val = p_reg->WVALUEL;
   189f0:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
   189f4:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   189f6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   189fa:	0209      	lsls	r1, r1, #8
   189fc:	b289      	uxth	r1, r1
   189fe:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   18a00:	8042      	strh	r2, [r0, #2]
    const uint16_t val = p_reg->WINDEXL;
   18a02:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
   18a06:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   18a08:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   18a0c:	0209      	lsls	r1, r1, #8
   18a0e:	b289      	uxth	r1, r1
   18a10:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   18a12:	8082      	strh	r2, [r0, #4]
    const uint16_t val = p_reg->WLENGTHL;
   18a14:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
   18a18:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   18a1a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   18a1e:	021b      	lsls	r3, r3, #8
   18a20:	b29b      	uxth	r3, r3
   18a22:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   18a24:	80c3      	strh	r3, [r0, #6]
}
   18a26:	4770      	bx	lr
   18a28:	40027000 	.word	0x40027000

00018a2c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   18a2c:	4b02      	ldr	r3, [pc, #8]	; (18a38 <nrfx_usbd_setup_data_clear+0xc>)
   18a2e:	2201      	movs	r2, #1
   18a30:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   18a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   18a34:	4770      	bx	lr
   18a36:	bf00      	nop
   18a38:	40027000 	.word	0x40027000

00018a3c <nrf_usbd_ep0out_dma_handler>:
{
   18a3c:	b500      	push	{lr}
   18a3e:	b083      	sub	sp, #12
    usbd_dma_pending_clear();
   18a40:	f7ff f9b4 	bl	17dac <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   18a44:	4b19      	ldr	r3, [pc, #100]	; (18aac <nrf_usbd_ep0out_dma_handler+0x70>)
   18a46:	7b9b      	ldrb	r3, [r3, #14]
   18a48:	2b03      	cmp	r3, #3
   18a4a:	d005      	beq.n	18a58 <nrf_usbd_ep0out_dma_handler+0x1c>
    else if (p_state->handler.consumer == NULL)
   18a4c:	4b17      	ldr	r3, [pc, #92]	; (18aac <nrf_usbd_ep0out_dma_handler+0x70>)
   18a4e:	681b      	ldr	r3, [r3, #0]
   18a50:	b183      	cbz	r3, 18a74 <nrf_usbd_ep0out_dma_handler+0x38>
        nrfx_usbd_setup_data_clear();
   18a52:	f7ff ffeb 	bl	18a2c <nrfx_usbd_setup_data_clear>
}
   18a56:	e026      	b.n	18aa6 <nrf_usbd_ep0out_dma_handler+0x6a>
   18a58:	4b15      	ldr	r3, [pc, #84]	; (18ab0 <nrf_usbd_ep0out_dma_handler+0x74>)
   18a5a:	f3bf 8f5b 	dmb	ish
   18a5e:	e853 1f00 	ldrex	r1, [r3]
   18a62:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   18a66:	e843 1200 	strex	r2, r1, [r3]
   18a6a:	2a00      	cmp	r2, #0
   18a6c:	d1f7      	bne.n	18a5e <nrf_usbd_ep0out_dma_handler+0x22>
   18a6e:	f3bf 8f5b 	dmb	ish
   18a72:	e018      	b.n	18aa6 <nrf_usbd_ep0out_dma_handler+0x6a>
   18a74:	4b0e      	ldr	r3, [pc, #56]	; (18ab0 <nrf_usbd_ep0out_dma_handler+0x74>)
   18a76:	f3bf 8f5b 	dmb	ish
   18a7a:	e853 1f00 	ldrex	r1, [r3]
   18a7e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   18a82:	e843 1200 	strex	r2, r1, [r3]
   18a86:	2a00      	cmp	r2, #0
   18a88:	d1f7      	bne.n	18a7a <nrf_usbd_ep0out_dma_handler+0x3e>
   18a8a:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   18a8e:	2306      	movs	r3, #6
   18a90:	f88d 3004 	strb.w	r3, [sp, #4]
   18a94:	2300      	movs	r3, #0
   18a96:	f88d 3006 	strb.w	r3, [sp, #6]
   18a9a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   18a9e:	4b05      	ldr	r3, [pc, #20]	; (18ab4 <nrf_usbd_ep0out_dma_handler+0x78>)
   18aa0:	681b      	ldr	r3, [r3, #0]
   18aa2:	a801      	add	r0, sp, #4
   18aa4:	4798      	blx	r3
}
   18aa6:	b003      	add	sp, #12
   18aa8:	f85d fb04 	ldr.w	pc, [sp], #4
   18aac:	20003aa0 	.word	0x20003aa0
   18ab0:	20003bc0 	.word	0x20003bc0
   18ab4:	20003bc8 	.word	0x20003bc8

00018ab8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   18ab8:	4b02      	ldr	r3, [pc, #8]	; (18ac4 <nrfx_usbd_setup_clear+0xc>)
   18aba:	2201      	movs	r2, #1
   18abc:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   18abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   18ac0:	4770      	bx	lr
   18ac2:	bf00      	nop
   18ac4:	40027000 	.word	0x40027000

00018ac8 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   18ac8:	4b02      	ldr	r3, [pc, #8]	; (18ad4 <nrfx_usbd_setup_stall+0xc>)
   18aca:	2201      	movs	r2, #1
   18acc:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   18ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   18ad0:	4770      	bx	lr
   18ad2:	bf00      	nop
   18ad4:	40027000 	.word	0x40027000

00018ad8 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   18ad8:	4b01      	ldr	r3, [pc, #4]	; (18ae0 <nrfx_usbd_last_setup_dir_get+0x8>)
   18ada:	7818      	ldrb	r0, [r3, #0]
   18adc:	4770      	bx	lr
   18ade:	bf00      	nop
   18ae0:	20004bb3 	.word	0x20004bb3

00018ae4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   18ae4:	b410      	push	{r4}
	__asm__ volatile(
   18ae6:	f04f 0240 	mov.w	r2, #64	; 0x40
   18aea:	f3ef 8311 	mrs	r3, BASEPRI
   18aee:	f382 8812 	msr	BASEPRI_MAX, r2
   18af2:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
   18af6:	f010 0f80 	tst.w	r0, #128	; 0x80
   18afa:	d11e      	bne.n	18b3a <nrfx_usbd_transfer_out_drop+0x56>
   18afc:	2110      	movs	r1, #16
   18afe:	f000 020f 	and.w	r2, r0, #15
   18b02:	4411      	add	r1, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   18b04:	f04f 0c01 	mov.w	ip, #1
   18b08:	fa0c fc01 	lsl.w	ip, ip, r1
   18b0c:	4c0c      	ldr	r4, [pc, #48]	; (18b40 <nrfx_usbd_transfer_out_drop+0x5c>)
   18b0e:	6821      	ldr	r1, [r4, #0]
   18b10:	ea21 010c 	bic.w	r1, r1, ip
   18b14:	6021      	str	r1, [r4, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   18b16:	f010 0f08 	tst.w	r0, #8
   18b1a:	d107      	bne.n	18b2c <nrfx_usbd_transfer_out_drop+0x48>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   18b1c:	4909      	ldr	r1, [pc, #36]	; (18b44 <nrfx_usbd_transfer_out_drop+0x60>)
   18b1e:	f502 7294 	add.w	r2, r2, #296	; 0x128
   18b22:	2000      	movs	r0, #0
   18b24:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   18b28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	__asm__ volatile(
   18b2c:	f383 8811 	msr	BASEPRI, r3
   18b30:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   18b34:	f85d 4b04 	ldr.w	r4, [sp], #4
   18b38:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
   18b3a:	2100      	movs	r1, #0
   18b3c:	e7df      	b.n	18afe <nrfx_usbd_transfer_out_drop+0x1a>
   18b3e:	bf00      	nop
   18b40:	20003bc4 	.word	0x20003bc4
   18b44:	40027000 	.word	0x40027000

00018b48 <usbd_ep_abort>:
{
   18b48:	b570      	push	{r4, r5, r6, lr}
   18b4a:	b082      	sub	sp, #8
	__asm__ volatile(
   18b4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b50:	f3ef 8511 	mrs	r5, BASEPRI
   18b54:	f383 8812 	msr	BASEPRI_MAX, r3
   18b58:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18b5c:	b242      	sxtb	r2, r0
   18b5e:	2a00      	cmp	r2, #0
   18b60:	db23      	blt.n	18baa <usbd_ep_abort+0x62>
   18b62:	4c3a      	ldr	r4, [pc, #232]	; (18c4c <usbd_ep_abort+0x104>)
   18b64:	f000 030f 	and.w	r3, r0, #15
   18b68:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   18b6c:	2a00      	cmp	r2, #0
   18b6e:	db21      	blt.n	18bb4 <usbd_ep_abort+0x6c>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   18b70:	4a37      	ldr	r2, [pc, #220]	; (18c50 <usbd_ep_abort+0x108>)
   18b72:	6812      	ldr	r2, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   18b74:	f103 0110 	add.w	r1, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   18b78:	2301      	movs	r3, #1
   18b7a:	408b      	lsls	r3, r1
   18b7c:	ea33 0202 	bics.w	r2, r3, r2
   18b80:	d115      	bne.n	18bae <usbd_ep_abort+0x66>
            p_state->handler.consumer = NULL;
   18b82:	2200      	movs	r2, #0
   18b84:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   18b86:	4932      	ldr	r1, [pc, #200]	; (18c50 <usbd_ep_abort+0x108>)
   18b88:	680a      	ldr	r2, [r1, #0]
   18b8a:	ea22 0203 	bic.w	r2, r2, r3
   18b8e:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   18b90:	4930      	ldr	r1, [pc, #192]	; (18c54 <usbd_ep_abort+0x10c>)
   18b92:	680a      	ldr	r2, [r1, #0]
   18b94:	ea22 0203 	bic.w	r2, r2, r3
   18b98:	600a      	str	r2, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
   18b9a:	2303      	movs	r3, #3
   18b9c:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
   18b9e:	f385 8811 	msr	BASEPRI, r5
   18ba2:	f3bf 8f6f 	isb	sy
}
   18ba6:	b002      	add	sp, #8
   18ba8:	bd70      	pop	{r4, r5, r6, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   18baa:	4c2b      	ldr	r4, [pc, #172]	; (18c58 <usbd_ep_abort+0x110>)
   18bac:	e7da      	b.n	18b64 <usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
   18bae:	f7ff ff99 	bl	18ae4 <nrfx_usbd_transfer_out_drop>
   18bb2:	e7f2      	b.n	18b9a <usbd_ep_abort+0x52>
        if(!NRF_USBD_EPISO_CHECK(ep))
   18bb4:	f010 0f08 	tst.w	r0, #8
   18bb8:	d113      	bne.n	18be2 <usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
   18bba:	2880      	cmp	r0, #128	; 0x80
   18bbc:	d034      	beq.n	18c28 <usbd_ep_abort+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   18bbe:	f203 32da 	addw	r2, r3, #986	; 0x3da
   18bc2:	0052      	lsls	r2, r2, #1
   18bc4:	4925      	ldr	r1, [pc, #148]	; (18c5c <usbd_ep_abort+0x114>)
   18bc6:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   18bca:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   18bce:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   18bd0:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   18bd4:	f8d1 6804 	ldr.w	r6, [r1, #2052]	; 0x804
   18bd8:	4332      	orrs	r2, r6
   18bda:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   18bde:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   18be2:	4a1c      	ldr	r2, [pc, #112]	; (18c54 <usbd_ep_abort+0x10c>)
   18be4:	6811      	ldr	r1, [r2, #0]
   18be6:	4a1a      	ldr	r2, [pc, #104]	; (18c50 <usbd_ep_abort+0x108>)
   18be8:	6816      	ldr	r6, [r2, #0]
   18bea:	ea66 0c01 	orn	ip, r6, r1
   18bee:	2201      	movs	r2, #1
   18bf0:	fa02 f303 	lsl.w	r3, r2, r3
   18bf4:	ea1c 0f03 	tst.w	ip, r3
   18bf8:	d0d1      	beq.n	18b9e <usbd_ep_abort+0x56>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   18bfa:	ea26 0603 	bic.w	r6, r6, r3
   18bfe:	4a14      	ldr	r2, [pc, #80]	; (18c50 <usbd_ep_abort+0x108>)
   18c00:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   18c02:	4319      	orrs	r1, r3
   18c04:	4b13      	ldr	r3, [pc, #76]	; (18c54 <usbd_ep_abort+0x10c>)
   18c06:	6019      	str	r1, [r3, #0]
            p_state->handler.feeder = NULL;
   18c08:	2300      	movs	r3, #0
   18c0a:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   18c0c:	2303      	movs	r3, #3
   18c0e:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   18c10:	2206      	movs	r2, #6
   18c12:	f88d 2004 	strb.w	r2, [sp, #4]
   18c16:	f88d 0006 	strb.w	r0, [sp, #6]
   18c1a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   18c1e:	4b10      	ldr	r3, [pc, #64]	; (18c60 <usbd_ep_abort+0x118>)
   18c20:	681b      	ldr	r3, [r3, #0]
   18c22:	a801      	add	r0, sp, #4
   18c24:	4798      	blx	r3
   18c26:	e7ba      	b.n	18b9e <usbd_ep_abort+0x56>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   18c28:	490c      	ldr	r1, [pc, #48]	; (18c5c <usbd_ep_abort+0x114>)
   18c2a:	f240 72b4 	movw	r2, #1972	; 0x7b4
   18c2e:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   18c32:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   18c36:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   18c38:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   18c3c:	f8d1 6804 	ldr.w	r6, [r1, #2052]	; 0x804
   18c40:	4332      	orrs	r2, r6
   18c42:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   18c46:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   18c4a:	e7ca      	b.n	18be2 <usbd_ep_abort+0x9a>
   18c4c:	20003aa0 	.word	0x20003aa0
   18c50:	20003bc0 	.word	0x20003bc0
   18c54:	20003bc4 	.word	0x20003bc4
   18c58:	20003b30 	.word	0x20003b30
   18c5c:	40027000 	.word	0x40027000
   18c60:	20003bc8 	.word	0x20003bc8

00018c64 <ev_setup_handler>:
{
   18c64:	b510      	push	{r4, lr}
   18c66:	b082      	sub	sp, #8
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   18c68:	4b20      	ldr	r3, [pc, #128]	; (18cec <ev_setup_handler+0x88>)
   18c6a:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   18c6e:	4b20      	ldr	r3, [pc, #128]	; (18cf0 <ev_setup_handler+0x8c>)
   18c70:	681b      	ldr	r3, [r3, #0]
   18c72:	43db      	mvns	r3, r3
   18c74:	b29b      	uxth	r3, r3
   18c76:	4a1f      	ldr	r2, [pc, #124]	; (18cf4 <ev_setup_handler+0x90>)
   18c78:	6812      	ldr	r2, [r2, #0]
   18c7a:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   18c7c:	4a1e      	ldr	r2, [pc, #120]	; (18cf8 <ev_setup_handler+0x94>)
   18c7e:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   18c80:	f992 2000 	ldrsb.w	r2, [r2]
   18c84:	2a00      	cmp	r2, #0
   18c86:	db2a      	blt.n	18cde <ev_setup_handler+0x7a>
   18c88:	2210      	movs	r2, #16
   18c8a:	f000 010f 	and.w	r1, r0, #15
   18c8e:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   18c90:	2201      	movs	r2, #1
   18c92:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   18c94:	4213      	tst	r3, r2
   18c96:	d124      	bne.n	18ce2 <ev_setup_handler+0x7e>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   18c98:	f014 0f80 	tst.w	r4, #128	; 0x80
   18c9c:	d124      	bne.n	18ce8 <ev_setup_handler+0x84>
   18c9e:	2200      	movs	r2, #0
    m_last_setup_dir =
   18ca0:	4b15      	ldr	r3, [pc, #84]	; (18cf8 <ev_setup_handler+0x94>)
   18ca2:	701a      	strb	r2, [r3, #0]
   18ca4:	4b13      	ldr	r3, [pc, #76]	; (18cf4 <ev_setup_handler+0x90>)
   18ca6:	f3bf 8f5b 	dmb	ish
   18caa:	e853 1f00 	ldrex	r1, [r3]
   18cae:	f021 1101 	bic.w	r1, r1, #65537	; 0x10001
   18cb2:	e843 1200 	strex	r2, r1, [r3]
   18cb6:	2a00      	cmp	r2, #0
   18cb8:	d1f7      	bne.n	18caa <ev_setup_handler+0x46>
   18cba:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   18cbe:	4a0c      	ldr	r2, [pc, #48]	; (18cf0 <ev_setup_handler+0x8c>)
   18cc0:	6813      	ldr	r3, [r2, #0]
   18cc2:	f043 0301 	orr.w	r3, r3, #1
   18cc6:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   18cc8:	2300      	movs	r3, #0
   18cca:	9301      	str	r3, [sp, #4]
   18ccc:	2305      	movs	r3, #5
   18cce:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   18cd2:	4b0a      	ldr	r3, [pc, #40]	; (18cfc <ev_setup_handler+0x98>)
   18cd4:	681b      	ldr	r3, [r3, #0]
   18cd6:	a801      	add	r0, sp, #4
   18cd8:	4798      	blx	r3
}
   18cda:	b002      	add	sp, #8
   18cdc:	bd10      	pop	{r4, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   18cde:	2200      	movs	r2, #0
   18ce0:	e7d3      	b.n	18c8a <ev_setup_handler+0x26>
        usbd_ep_abort(m_last_setup_dir);
   18ce2:	f7ff ff31 	bl	18b48 <usbd_ep_abort>
   18ce6:	e7d7      	b.n	18c98 <ev_setup_handler+0x34>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   18ce8:	2280      	movs	r2, #128	; 0x80
   18cea:	e7d9      	b.n	18ca0 <ev_setup_handler+0x3c>
   18cec:	40027000 	.word	0x40027000
   18cf0:	20003bc4 	.word	0x20003bc4
   18cf4:	20003bc0 	.word	0x20003bc0
   18cf8:	20004bb3 	.word	0x20004bb3
   18cfc:	20003bc8 	.word	0x20003bc8

00018d00 <nrfx_usbd_irq_handler>:
{
   18d00:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
   18d02:	4b1c      	ldr	r3, [pc, #112]	; (18d74 <nrfx_usbd_irq_handler+0x74>)
   18d04:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    uint32_t active = 0;
   18d08:	2400      	movs	r4, #0
    while (to_process)
   18d0a:	e003      	b.n	18d14 <nrfx_usbd_irq_handler+0x14>
        to_process &= ~(1UL << event_nr);
   18d0c:	2301      	movs	r3, #1
   18d0e:	408b      	lsls	r3, r1
   18d10:	ea22 0203 	bic.w	r2, r2, r3
    while (to_process)
   18d14:	b1a2      	cbz	r2, 18d40 <nrfx_usbd_irq_handler+0x40>
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
   18d16:	fa92 f1a2 	rbit	r1, r2
   18d1a:	fab1 f181 	clz	r1, r1
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   18d1e:	f101 0340 	add.w	r3, r1, #64	; 0x40
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   18d22:	009b      	lsls	r3, r3, #2
   18d24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18d28:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   18d2c:	6818      	ldr	r0, [r3, #0]
    if (ret)
   18d2e:	2800      	cmp	r0, #0
   18d30:	d0ec      	beq.n	18d0c <nrfx_usbd_irq_handler+0xc>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   18d32:	2000      	movs	r0, #0
   18d34:	6018      	str	r0, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   18d36:	681b      	ldr	r3, [r3, #0]
            active |= 1UL << event_nr;
   18d38:	2301      	movs	r3, #1
   18d3a:	408b      	lsls	r3, r1
   18d3c:	431c      	orrs	r4, r3
   18d3e:	e7e5      	b.n	18d0c <nrfx_usbd_irq_handler+0xc>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   18d40:	f404 0600 	and.w	r6, r4, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   18d44:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
    while (active)
   18d48:	e00b      	b.n	18d62 <nrfx_usbd_irq_handler+0x62>
        m_isr[event_nr]();
   18d4a:	fa94 f5a4 	rbit	r5, r4
   18d4e:	fab5 f585 	clz	r5, r5
   18d52:	4b09      	ldr	r3, [pc, #36]	; (18d78 <nrfx_usbd_irq_handler+0x78>)
   18d54:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   18d58:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   18d5a:	2301      	movs	r3, #1
   18d5c:	40ab      	lsls	r3, r5
   18d5e:	ea24 0403 	bic.w	r4, r4, r3
    while (active)
   18d62:	2c00      	cmp	r4, #0
   18d64:	d1f1      	bne.n	18d4a <nrfx_usbd_irq_handler+0x4a>
    usbd_dmareq_process();
   18d66:	f7ff fcc9 	bl	186fc <usbd_dmareq_process>
    if (setup_active)
   18d6a:	b906      	cbnz	r6, 18d6e <nrfx_usbd_irq_handler+0x6e>
}
   18d6c:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   18d6e:	f7ff ff79 	bl	18c64 <ev_setup_handler>
}
   18d72:	e7fb      	b.n	18d6c <nrfx_usbd_irq_handler+0x6c>
   18d74:	40027000 	.word	0x40027000
   18d78:	00026a98 	.word	0x00026a98

00018d7c <usbd_ep_abort_all>:
{
   18d7c:	b538      	push	{r3, r4, r5, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   18d7e:	4b12      	ldr	r3, [pc, #72]	; (18dc8 <usbd_ep_abort_all+0x4c>)
   18d80:	885b      	ldrh	r3, [r3, #2]
   18d82:	4a12      	ldr	r2, [pc, #72]	; (18dcc <usbd_ep_abort_all+0x50>)
   18d84:	6814      	ldr	r4, [r2, #0]
   18d86:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    while (0 != ep_waiting)
   18d8a:	e009      	b.n	18da0 <usbd_ep_abort_all+0x24>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   18d8c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   18d90:	f010 0f08 	tst.w	r0, #8
   18d94:	d00f      	beq.n	18db6 <usbd_ep_abort_all+0x3a>
        ep_waiting &= ~(1U << bitpos);
   18d96:	b2ed      	uxtb	r5, r5
   18d98:	2301      	movs	r3, #1
   18d9a:	40ab      	lsls	r3, r5
   18d9c:	ea24 0403 	bic.w	r4, r4, r3
    while (0 != ep_waiting)
   18da0:	b164      	cbz	r4, 18dbc <usbd_ep_abort_all+0x40>
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   18da2:	fa94 f5a4 	rbit	r5, r4
   18da6:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   18daa:	2d0f      	cmp	r5, #15
   18dac:	d9ee      	bls.n	18d8c <usbd_ep_abort_all+0x10>
   18dae:	f1a5 0010 	sub.w	r0, r5, #16
   18db2:	b2c0      	uxtb	r0, r0
   18db4:	e7ec      	b.n	18d90 <usbd_ep_abort_all+0x14>
            usbd_ep_abort(bit2ep(bitpos));
   18db6:	f7ff fec7 	bl	18b48 <usbd_ep_abort>
   18dba:	e7ec      	b.n	18d96 <usbd_ep_abort_all+0x1a>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   18dbc:	4b02      	ldr	r3, [pc, #8]	; (18dc8 <usbd_ep_abort_all+0x4c>)
   18dbe:	f240 12ff 	movw	r2, #511	; 0x1ff
   18dc2:	601a      	str	r2, [r3, #0]
}
   18dc4:	bd38      	pop	{r3, r4, r5, pc}
   18dc6:	bf00      	nop
   18dc8:	20003bc4 	.word	0x20003bc4
   18dcc:	20003bc0 	.word	0x20003bc0

00018dd0 <nrfx_usbd_stop>:
{
   18dd0:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18dd2:	4b0c      	ldr	r3, [pc, #48]	; (18e04 <nrfx_usbd_stop+0x34>)
   18dd4:	2280      	movs	r2, #128	; 0x80
   18dd6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   18dda:	2027      	movs	r0, #39	; 0x27
   18ddc:	f7fa f89a 	bl	12f14 <arch_irq_is_enabled>
   18de0:	b900      	cbnz	r0, 18de4 <nrfx_usbd_stop+0x14>
}
   18de2:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
   18de4:	f7ff ffca 	bl	18d7c <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   18de8:	4c07      	ldr	r4, [pc, #28]	; (18e08 <nrfx_usbd_stop+0x38>)
   18dea:	2300      	movs	r3, #0
   18dec:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   18df0:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   18df4:	2027      	movs	r0, #39	; 0x27
   18df6:	f008 feef 	bl	21bd8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   18dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18dfe:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   18e02:	e7ee      	b.n	18de2 <nrfx_usbd_stop+0x12>
   18e04:	e000e100 	.word	0xe000e100
   18e08:	40027000 	.word	0x40027000

00018e0c <nrfx_usbd_disable>:
{
   18e0c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   18e0e:	f7ff ffdf 	bl	18dd0 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   18e12:	4b08      	ldr	r3, [pc, #32]	; (18e34 <nrfx_usbd_disable+0x28>)
   18e14:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   18e18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   18e1c:	2200      	movs	r2, #0
   18e1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   18e22:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   18e26:	f7fe ffc1 	bl	17dac <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   18e2a:	4b03      	ldr	r3, [pc, #12]	; (18e38 <nrfx_usbd_disable+0x2c>)
   18e2c:	2201      	movs	r2, #1
   18e2e:	701a      	strb	r2, [r3, #0]
}
   18e30:	bd08      	pop	{r3, pc}
   18e32:	bf00      	nop
   18e34:	40027000 	.word	0x40027000
   18e38:	20004bb5 	.word	0x20004bb5

00018e3c <nrfx_usbd_ep_disable>:
{
   18e3c:	b510      	push	{r4, lr}
   18e3e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   18e40:	f7ff fe82 	bl	18b48 <usbd_ep_abort>
    nrf_usbd_ep_disable(NRF_USBD, ep_to_hal(ep));
   18e44:	4621      	mov	r1, r4
   18e46:	4809      	ldr	r0, [pc, #36]	; (18e6c <nrfx_usbd_ep_disable+0x30>)
   18e48:	f00b f87c 	bl	23f44 <nrf_usbd_ep_disable>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   18e4c:	f014 0f80 	tst.w	r4, #128	; 0x80
   18e50:	d109      	bne.n	18e66 <nrfx_usbd_ep_disable+0x2a>
   18e52:	4b07      	ldr	r3, [pc, #28]	; (18e70 <nrfx_usbd_ep_disable+0x34>)
   18e54:	f004 040f 	and.w	r4, r4, #15
   18e58:	5d1a      	ldrb	r2, [r3, r4]
   18e5a:	2301      	movs	r3, #1
   18e5c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   18e5e:	4a03      	ldr	r2, [pc, #12]	; (18e6c <nrfx_usbd_ep_disable+0x30>)
   18e60:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   18e64:	bd10      	pop	{r4, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   18e66:	4b03      	ldr	r3, [pc, #12]	; (18e74 <nrfx_usbd_ep_disable+0x38>)
   18e68:	e7f4      	b.n	18e54 <nrfx_usbd_ep_disable+0x18>
   18e6a:	bf00      	nop
   18e6c:	40027000 	.word	0x40027000
   18e70:	00026a58 	.word	0x00026a58
   18e74:	00026a64 	.word	0x00026a64

00018e78 <nrfx_usbd_ep_enable>:
{
   18e78:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   18e7a:	b241      	sxtb	r1, r0
   18e7c:	2900      	cmp	r1, #0
   18e7e:	db22      	blt.n	18ec6 <nrfx_usbd_ep_enable+0x4e>
   18e80:	4b25      	ldr	r3, [pc, #148]	; (18f18 <nrfx_usbd_ep_enable+0xa0>)
   18e82:	f000 040f 	and.w	r4, r0, #15
   18e86:	5d1a      	ldrb	r2, [r3, r4]
   18e88:	2301      	movs	r3, #1
   18e8a:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   18e8c:	4a23      	ldr	r2, [pc, #140]	; (18f1c <nrfx_usbd_ep_enable+0xa4>)
   18e8e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   18e92:	2900      	cmp	r1, #0
   18e94:	db19      	blt.n	18eca <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   18e96:	4b21      	ldr	r3, [pc, #132]	; (18f1c <nrfx_usbd_ep_enable+0xa4>)
   18e98:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
   18e9c:	40e3      	lsrs	r3, r4
   18e9e:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   18ea2:	b97b      	cbnz	r3, 18ec4 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
   18ea4:	2900      	cmp	r1, #0
   18ea6:	db16      	blt.n	18ed6 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
   18ea8:	4d1c      	ldr	r5, [pc, #112]	; (18f1c <nrfx_usbd_ep_enable+0xa4>)
   18eaa:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
   18eae:	2201      	movs	r2, #1
   18eb0:	40a2      	lsls	r2, r4
   18eb2:	4313      	orrs	r3, r2
   18eb4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   18eb8:	b124      	cbz	r4, 18ec4 <nrfx_usbd_ep_enable+0x4c>
   18eba:	2900      	cmp	r1, #0
   18ebc:	db02      	blt.n	18ec4 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
   18ebe:	f010 0f08 	tst.w	r0, #8
   18ec2:	d011      	beq.n	18ee8 <nrfx_usbd_ep_enable+0x70>
}
   18ec4:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   18ec6:	4b16      	ldr	r3, [pc, #88]	; (18f20 <nrfx_usbd_ep_enable+0xa8>)
   18ec8:	e7db      	b.n	18e82 <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   18eca:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   18ece:	40e3      	lsrs	r3, r4
   18ed0:	f003 0301 	and.w	r3, r3, #1
   18ed4:	e7e5      	b.n	18ea2 <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
   18ed6:	4d11      	ldr	r5, [pc, #68]	; (18f1c <nrfx_usbd_ep_enable+0xa4>)
   18ed8:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
   18edc:	2201      	movs	r2, #1
   18ede:	40a2      	lsls	r2, r4
   18ee0:	4313      	orrs	r3, r2
   18ee2:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
   18ee6:	e7e7      	b.n	18eb8 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
   18ee8:	f04f 0340 	mov.w	r3, #64	; 0x40
   18eec:	f3ef 8511 	mrs	r5, BASEPRI
   18ef0:	f383 8812 	msr	BASEPRI_MAX, r3
   18ef4:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   18ef8:	f7ff fdf4 	bl	18ae4 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
   18efc:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   18efe:	2201      	movs	r2, #1
   18f00:	40a2      	lsls	r2, r4
   18f02:	4908      	ldr	r1, [pc, #32]	; (18f24 <nrfx_usbd_ep_enable+0xac>)
   18f04:	680b      	ldr	r3, [r1, #0]
   18f06:	ea23 0302 	bic.w	r3, r3, r2
   18f0a:	600b      	str	r3, [r1, #0]
	__asm__ volatile(
   18f0c:	f385 8811 	msr	BASEPRI, r5
   18f10:	f3bf 8f6f 	isb	sy
}
   18f14:	e7d6      	b.n	18ec4 <nrfx_usbd_ep_enable+0x4c>
   18f16:	bf00      	nop
   18f18:	00026a58 	.word	0x00026a58
   18f1c:	40027000 	.word	0x40027000
   18f20:	00026a64 	.word	0x00026a64
   18f24:	20003bc0 	.word	0x20003bc0

00018f28 <nrfx_usbd_ep_stall_clear>:
{
   18f28:	b510      	push	{r4, lr}
   18f2a:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   18f2c:	f010 0f80 	tst.w	r0, #128	; 0x80
   18f30:	d003      	beq.n	18f3a <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   18f32:	4b06      	ldr	r3, [pc, #24]	; (18f4c <nrfx_usbd_ep_stall_clear+0x24>)
   18f34:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   18f38:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   18f3a:	f7ff fd23 	bl	18984 <nrfx_usbd_ep_stall_check>
   18f3e:	2800      	cmp	r0, #0
   18f40:	d0f7      	beq.n	18f32 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
   18f42:	4620      	mov	r0, r4
   18f44:	f7ff fdce 	bl	18ae4 <nrfx_usbd_transfer_out_drop>
   18f48:	e7f3      	b.n	18f32 <nrfx_usbd_ep_stall_clear+0xa>
   18f4a:	bf00      	nop
   18f4c:	40027000 	.word	0x40027000

00018f50 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18f50:	4b15      	ldr	r3, [pc, #84]	; (18fa8 <_DoInit+0x58>)
   18f52:	2203      	movs	r2, #3
   18f54:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   18f56:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   18f58:	4914      	ldr	r1, [pc, #80]	; (18fac <_DoInit+0x5c>)
   18f5a:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18f5c:	4a14      	ldr	r2, [pc, #80]	; (18fb0 <_DoInit+0x60>)
   18f5e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   18f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18f64:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   18f66:	2200      	movs	r2, #0
   18f68:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   18f6a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   18f6e:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   18f70:	4910      	ldr	r1, [pc, #64]	; (18fb4 <_DoInit+0x64>)
   18f72:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   18f74:	2110      	movs	r1, #16
   18f76:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   18f78:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   18f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18f7c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   18f7e:	4a0e      	ldr	r2, [pc, #56]	; (18fb8 <_DoInit+0x68>)
   18f80:	6810      	ldr	r0, [r2, #0]
   18f82:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18f86:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   18f8a:	4a0c      	ldr	r2, [pc, #48]	; (18fbc <_DoInit+0x6c>)
   18f8c:	e892 0003 	ldmia.w	r2, {r0, r1}
   18f90:	6018      	str	r0, [r3, #0]
   18f92:	8099      	strh	r1, [r3, #4]
   18f94:	0c09      	lsrs	r1, r1, #16
   18f96:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18f98:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   18f9c:	2220      	movs	r2, #32
   18f9e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18fa0:	f3bf 8f5f 	dmb	sy
}
   18fa4:	4770      	bx	lr
   18fa6:	bf00      	nop
   18fa8:	20003fdc 	.word	0x20003fdc
   18fac:	00026b08 	.word	0x00026b08
   18fb0:	20003bdc 	.word	0x20003bdc
   18fb4:	20003bcc 	.word	0x20003bcc
   18fb8:	00026b14 	.word	0x00026b14
   18fbc:	00026b18 	.word	0x00026b18

00018fc0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   18fc0:	4b03      	ldr	r3, [pc, #12]	; (18fd0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   18fc2:	e000      	b.n	18fc6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   18fc4:	3318      	adds	r3, #24
	while (dev < __device_end) {
   18fc6:	4a03      	ldr	r2, [pc, #12]	; (18fd4 <z_device_state_init+0x14>)
   18fc8:	4293      	cmp	r3, r2
   18fca:	d3fb      	bcc.n	18fc4 <z_device_state_init+0x4>
	}
}
   18fcc:	4770      	bx	lr
   18fce:	bf00      	nop
   18fd0:	00025bcc 	.word	0x00025bcc
   18fd4:	00025cbc 	.word	0x00025cbc

00018fd8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   18fd8:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   18fda:	4605      	mov	r5, r0
   18fdc:	b328      	cbz	r0, 1902a <z_impl_device_get_binding+0x52>
   18fde:	7803      	ldrb	r3, [r0, #0]
   18fe0:	b32b      	cbz	r3, 1902e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   18fe2:	4c14      	ldr	r4, [pc, #80]	; (19034 <z_impl_device_get_binding+0x5c>)
   18fe4:	e000      	b.n	18fe8 <z_impl_device_get_binding+0x10>
   18fe6:	3418      	adds	r4, #24
   18fe8:	4b13      	ldr	r3, [pc, #76]	; (19038 <z_impl_device_get_binding+0x60>)
   18fea:	429c      	cmp	r4, r3
   18fec:	d008      	beq.n	19000 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   18fee:	4620      	mov	r0, r4
   18ff0:	f00b f90a 	bl	24208 <z_device_is_ready>
   18ff4:	2800      	cmp	r0, #0
   18ff6:	d0f6      	beq.n	18fe6 <z_impl_device_get_binding+0xe>
   18ff8:	6823      	ldr	r3, [r4, #0]
   18ffa:	42ab      	cmp	r3, r5
   18ffc:	d1f3      	bne.n	18fe6 <z_impl_device_get_binding+0xe>
   18ffe:	e012      	b.n	19026 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   19000:	4c0c      	ldr	r4, [pc, #48]	; (19034 <z_impl_device_get_binding+0x5c>)
   19002:	e000      	b.n	19006 <z_impl_device_get_binding+0x2e>
   19004:	3418      	adds	r4, #24
   19006:	4b0c      	ldr	r3, [pc, #48]	; (19038 <z_impl_device_get_binding+0x60>)
   19008:	429c      	cmp	r4, r3
   1900a:	d00b      	beq.n	19024 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1900c:	4620      	mov	r0, r4
   1900e:	f00b f8fb 	bl	24208 <z_device_is_ready>
   19012:	2800      	cmp	r0, #0
   19014:	d0f6      	beq.n	19004 <z_impl_device_get_binding+0x2c>
   19016:	6821      	ldr	r1, [r4, #0]
   19018:	4628      	mov	r0, r5
   1901a:	f7f0 fd96 	bl	9b4a <strcmp>
   1901e:	2800      	cmp	r0, #0
   19020:	d1f0      	bne.n	19004 <z_impl_device_get_binding+0x2c>
   19022:	e000      	b.n	19026 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   19024:	2400      	movs	r4, #0
}
   19026:	4620      	mov	r0, r4
   19028:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1902a:	4604      	mov	r4, r0
   1902c:	e7fb      	b.n	19026 <z_impl_device_get_binding+0x4e>
   1902e:	2400      	movs	r4, #0
   19030:	e7f9      	b.n	19026 <z_impl_device_get_binding+0x4e>
   19032:	bf00      	nop
   19034:	00025bcc 	.word	0x00025bcc
   19038:	00025cbc 	.word	0x00025cbc

0001903c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1903c:	4b01      	ldr	r3, [pc, #4]	; (19044 <z_impl_z_errno+0x8>)
   1903e:	6898      	ldr	r0, [r3, #8]
}
   19040:	3098      	adds	r0, #152	; 0x98
   19042:	4770      	bx	lr
   19044:	20004084 	.word	0x20004084

00019048 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   19048:	b570      	push	{r4, r5, r6, lr}
   1904a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1904c:	4b12      	ldr	r3, [pc, #72]	; (19098 <z_sys_init_run_level+0x50>)
   1904e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19052:	e009      	b.n	19068 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   19054:	4243      	negs	r3, r0
   19056:	e017      	b.n	19088 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   19058:	68ea      	ldr	r2, [r5, #12]
   1905a:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
   1905c:	68ea      	ldr	r2, [r5, #12]
   1905e:	7853      	ldrb	r3, [r2, #1]
   19060:	f043 0301 	orr.w	r3, r3, #1
   19064:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19066:	3408      	adds	r4, #8
   19068:	1c73      	adds	r3, r6, #1
   1906a:	4a0b      	ldr	r2, [pc, #44]	; (19098 <z_sys_init_run_level+0x50>)
   1906c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19070:	42a3      	cmp	r3, r4
   19072:	d910      	bls.n	19096 <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
   19074:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
   19076:	b15d      	cbz	r5, 19090 <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
   19078:	6823      	ldr	r3, [r4, #0]
   1907a:	4628      	mov	r0, r5
   1907c:	4798      	blx	r3
			if (rc != 0) {
   1907e:	4603      	mov	r3, r0
   19080:	2800      	cmp	r0, #0
   19082:	d0eb      	beq.n	1905c <z_sys_init_run_level+0x14>
				if (rc < 0) {
   19084:	2800      	cmp	r0, #0
   19086:	dbe5      	blt.n	19054 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   19088:	2bff      	cmp	r3, #255	; 0xff
   1908a:	dde5      	ble.n	19058 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1908c:	23ff      	movs	r3, #255	; 0xff
   1908e:	e7e3      	b.n	19058 <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
   19090:	6823      	ldr	r3, [r4, #0]
   19092:	4798      	blx	r3
   19094:	e7e7      	b.n	19066 <z_sys_init_run_level+0x1e>
		}
	}
}
   19096:	bd70      	pop	{r4, r5, r6, pc}
   19098:	00026b34 	.word	0x00026b34

0001909c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1909c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1909e:	b087      	sub	sp, #28
	struct k_thread *thread = &z_idle_threads[i];
   190a0:	ebc0 1640 	rsb	r6, r0, r0, lsl #5
   190a4:	4d10      	ldr	r5, [pc, #64]	; (190e8 <init_idle_thread+0x4c>)
   190a6:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
	k_thread_stack_t *stack = z_idle_stacks[i];
   190aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   190ae:	4b0f      	ldr	r3, [pc, #60]	; (190ec <init_idle_thread+0x50>)
   190b0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
   190b4:	4a0e      	ldr	r2, [pc, #56]	; (190f0 <init_idle_thread+0x54>)
   190b6:	9205      	str	r2, [sp, #20]
   190b8:	2201      	movs	r2, #1
   190ba:	9204      	str	r2, [sp, #16]
   190bc:	220f      	movs	r2, #15
   190be:	9203      	str	r2, [sp, #12]
   190c0:	2200      	movs	r2, #0
   190c2:	9202      	str	r2, [sp, #8]
   190c4:	9201      	str	r2, [sp, #4]
   190c6:	9300      	str	r3, [sp, #0]
   190c8:	4b0a      	ldr	r3, [pc, #40]	; (190f4 <init_idle_thread+0x58>)
   190ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
   190ce:	490a      	ldr	r1, [pc, #40]	; (190f8 <init_idle_thread+0x5c>)
   190d0:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   190d4:	4630      	mov	r0, r6
   190d6:	f000 f975 	bl	193c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   190da:	7b73      	ldrb	r3, [r6, #13]
   190dc:	f023 0304 	bic.w	r3, r3, #4
   190e0:	7373      	strb	r3, [r6, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   190e2:	b007      	add	sp, #28
   190e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   190e6:	bf00      	nop
   190e8:	20001f68 	.word	0x20001f68
   190ec:	20004084 	.word	0x20004084
   190f0:	00026b24 	.word	0x00026b24
   190f4:	000194fd 	.word	0x000194fd
   190f8:	20007b00 	.word	0x20007b00

000190fc <bg_thread_main>:
{
   190fc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   190fe:	4b0a      	ldr	r3, [pc, #40]	; (19128 <bg_thread_main+0x2c>)
   19100:	2201      	movs	r2, #1
   19102:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   19104:	2003      	movs	r0, #3
   19106:	f7ff ff9f 	bl	19048 <z_sys_init_run_level>
	boot_banner();
   1910a:	f001 fa7f 	bl	1a60c <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1910e:	2004      	movs	r0, #4
   19110:	f7ff ff9a 	bl	19048 <z_sys_init_run_level>
	z_init_static_threads();
   19114:	f000 f9ba 	bl	1948c <z_init_static_threads>
	(void)main();
   19118:	f7f3 fbca 	bl	c8b0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1911c:	4a03      	ldr	r2, [pc, #12]	; (1912c <bg_thread_main+0x30>)
   1911e:	7b13      	ldrb	r3, [r2, #12]
   19120:	f023 0301 	bic.w	r3, r3, #1
   19124:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19126:	bd08      	pop	{r3, pc}
   19128:	20004bb6 	.word	0x20004bb6
   1912c:	20002060 	.word	0x20002060

00019130 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   19130:	b508      	push	{r3, lr}
   19132:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19134:	4a01      	ldr	r2, [pc, #4]	; (1913c <switch_to_main_thread+0xc>)
   19136:	4802      	ldr	r0, [pc, #8]	; (19140 <switch_to_main_thread+0x10>)
   19138:	f7fa f86c 	bl	13214 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1913c:	000190fd 	.word	0x000190fd
   19140:	20002060 	.word	0x20002060

00019144 <z_bss_zero>:
{
   19144:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   19146:	4803      	ldr	r0, [pc, #12]	; (19154 <z_bss_zero+0x10>)
   19148:	4a03      	ldr	r2, [pc, #12]	; (19158 <z_bss_zero+0x14>)
   1914a:	1a12      	subs	r2, r2, r0
   1914c:	2100      	movs	r1, #0
   1914e:	f00b f885 	bl	2425c <z_early_memset>
}
   19152:	bd08      	pop	{r3, pc}
   19154:	20000a40 	.word	0x20000a40
   19158:	20004bb8 	.word	0x20004bb8

0001915c <z_init_cpu>:
{
   1915c:	b510      	push	{r4, lr}
   1915e:	4604      	mov	r4, r0
	init_idle_thread(id);
   19160:	f7ff ff9c 	bl	1909c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   19164:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
   19168:	490b      	ldr	r1, [pc, #44]	; (19198 <z_init_cpu+0x3c>)
   1916a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1916e:	4a0b      	ldr	r2, [pc, #44]	; (1919c <z_init_cpu+0x40>)
   19170:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19174:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19178:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   1917a:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1917c:	eb04 1104 	add.w	r1, r4, r4, lsl #4
   19180:	4b07      	ldr	r3, [pc, #28]	; (191a0 <z_init_cpu+0x44>)
   19182:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   19186:	f503 6308 	add.w	r3, r3, #2176	; 0x880
	_kernel.cpus[id].irq_stack =
   1918a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1918e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   19192:	6053      	str	r3, [r2, #4]
}
   19194:	bd10      	pop	{r4, pc}
   19196:	bf00      	nop
   19198:	20001f68 	.word	0x20001f68
   1919c:	20004084 	.word	0x20004084
   191a0:	20007280 	.word	0x20007280

000191a4 <prepare_multithreading>:
{
   191a4:	b570      	push	{r4, r5, r6, lr}
   191a6:	b086      	sub	sp, #24
	z_sched_init();
   191a8:	f000 ff04 	bl	19fb4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   191ac:	4d10      	ldr	r5, [pc, #64]	; (191f0 <prepare_multithreading+0x4c>)
   191ae:	4b11      	ldr	r3, [pc, #68]	; (191f4 <prepare_multithreading+0x50>)
   191b0:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   191b2:	4b11      	ldr	r3, [pc, #68]	; (191f8 <prepare_multithreading+0x54>)
   191b4:	9305      	str	r3, [sp, #20]
   191b6:	2301      	movs	r3, #1
   191b8:	9304      	str	r3, [sp, #16]
   191ba:	2400      	movs	r4, #0
   191bc:	9403      	str	r4, [sp, #12]
   191be:	9402      	str	r4, [sp, #8]
   191c0:	9401      	str	r4, [sp, #4]
   191c2:	9400      	str	r4, [sp, #0]
   191c4:	4b0d      	ldr	r3, [pc, #52]	; (191fc <prepare_multithreading+0x58>)
   191c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   191ca:	490d      	ldr	r1, [pc, #52]	; (19200 <prepare_multithreading+0x5c>)
   191cc:	4628      	mov	r0, r5
   191ce:	f000 f8f9 	bl	193c4 <z_setup_new_thread>
   191d2:	4606      	mov	r6, r0
   191d4:	7b6b      	ldrb	r3, [r5, #13]
   191d6:	f023 0304 	bic.w	r3, r3, #4
   191da:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   191dc:	4628      	mov	r0, r5
   191de:	f00b fb86 	bl	248ee <z_ready_thread>
	z_init_cpu(0);
   191e2:	4620      	mov	r0, r4
   191e4:	f7ff ffba 	bl	1915c <z_init_cpu>
}
   191e8:	4630      	mov	r0, r6
   191ea:	b006      	add	sp, #24
   191ec:	bd70      	pop	{r4, r5, r6, pc}
   191ee:	bf00      	nop
   191f0:	20002060 	.word	0x20002060
   191f4:	20004084 	.word	0x20004084
   191f8:	00026b2c 	.word	0x00026b2c
   191fc:	000190fd 	.word	0x000190fd
   19200:	20007c80 	.word	0x20007c80

00019204 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   19204:	b500      	push	{lr}
   19206:	b0bf      	sub	sp, #252	; 0xfc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   19208:	2000      	movs	r0, #0
   1920a:	f7ff ff1d 	bl	19048 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1920e:	4b1e      	ldr	r3, [pc, #120]	; (19288 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19210:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   19214:	4c1d      	ldr	r4, [pc, #116]	; (1928c <z_cstart+0x88>)
   19216:	6963      	ldr	r3, [r4, #20]
   19218:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1921c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1921e:	23e0      	movs	r3, #224	; 0xe0
   19220:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   19224:	2320      	movs	r3, #32
   19226:	77e3      	strb	r3, [r4, #31]
   19228:	2500      	movs	r5, #0
   1922a:	7625      	strb	r5, [r4, #24]
   1922c:	7665      	strb	r5, [r4, #25]
   1922e:	76a5      	strb	r5, [r4, #26]
   19230:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19234:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19236:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1923a:	6263      	str	r3, [r4, #36]	; 0x24
   1923c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19240:	f7fa f9b6 	bl	135b0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19244:	f7f9 fe12 	bl	12e6c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1924c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1924e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   19250:	f7fa fad4 	bl	137fc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   19254:	f7fa fa60 	bl	13718 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   19258:	2401      	movs	r4, #1
   1925a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1925e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   19262:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   19264:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   19266:	952a      	str	r5, [sp, #168]	; 0xa8

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   19268:	4b09      	ldr	r3, [pc, #36]	; (19290 <z_cstart+0x8c>)
   1926a:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1926e:	f7ff fea7 	bl	18fc0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   19272:	4620      	mov	r0, r4
   19274:	f7ff fee8 	bl	19048 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   19278:	2002      	movs	r0, #2
   1927a:	f7ff fee5 	bl	19048 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1927e:	f7ff ff91 	bl	191a4 <prepare_multithreading>
   19282:	f7ff ff55 	bl	19130 <switch_to_main_thread>
   19286:	bf00      	nop
   19288:	20007b00 	.word	0x20007b00
   1928c:	e000ed00 	.word	0xe000ed00
   19290:	20004084 	.word	0x20004084

00019294 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   19294:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   19296:	4c06      	ldr	r4, [pc, #24]	; (192b0 <statics_init+0x1c>)
   19298:	e005      	b.n	192a6 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1929a:	68a2      	ldr	r2, [r4, #8]
   1929c:	6861      	ldr	r1, [r4, #4]
   1929e:	4620      	mov	r0, r4
   192a0:	f00a ffe4 	bl	2426c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   192a4:	3414      	adds	r4, #20
   192a6:	4b03      	ldr	r3, [pc, #12]	; (192b4 <statics_init+0x20>)
   192a8:	429c      	cmp	r4, r3
   192aa:	d3f6      	bcc.n	1929a <statics_init+0x6>
		}
	}
	return 0;
}
   192ac:	2000      	movs	r0, #0
   192ae:	bd10      	pop	{r4, pc}
   192b0:	20000824 	.word	0x20000824
   192b4:	20000824 	.word	0x20000824

000192b8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   192b8:	b510      	push	{r4, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   192ba:	4c06      	ldr	r4, [pc, #24]	; (192d4 <init_mem_slab_module+0x1c>)
	int rc = 0;
   192bc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   192be:	e000      	b.n	192c2 <init_mem_slab_module+0xa>
   192c0:	341c      	adds	r4, #28
   192c2:	4b05      	ldr	r3, [pc, #20]	; (192d8 <init_mem_slab_module+0x20>)
   192c4:	429c      	cmp	r4, r3
   192c6:	d204      	bcs.n	192d2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   192c8:	4620      	mov	r0, r4
   192ca:	f00b f84a 	bl	24362 <create_free_list>
		if (rc < 0) {
   192ce:	2800      	cmp	r0, #0
   192d0:	daf6      	bge.n	192c0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   192d2:	bd10      	pop	{r4, pc}
   192d4:	20000808 	.word	0x20000808
   192d8:	20000824 	.word	0x20000824

000192dc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   192dc:	b530      	push	{r4, r5, lr}
   192de:	b083      	sub	sp, #12
   192e0:	460d      	mov	r5, r1
	__asm__ volatile(
   192e2:	f04f 0140 	mov.w	r1, #64	; 0x40
   192e6:	f3ef 8c11 	mrs	ip, BASEPRI
   192ea:	f381 8812 	msr	BASEPRI_MAX, r1
   192ee:	f3bf 8f6f 	isb	sy
   192f2:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   192f4:	6944      	ldr	r4, [r0, #20]
   192f6:	b164      	cbz	r4, 19312 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   192f8:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   192fa:	6823      	ldr	r3, [r4, #0]
   192fc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   192fe:	6983      	ldr	r3, [r0, #24]
   19300:	3301      	adds	r3, #1
   19302:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   19304:	2000      	movs	r0, #0
	__asm__ volatile(
   19306:	f381 8811 	msr	BASEPRI, r1
   1930a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1930e:	b003      	add	sp, #12
   19310:	bd30      	pop	{r4, r5, pc}
   19312:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   19316:	ea53 0402 	orrs.w	r4, r3, r2
   1931a:	d104      	bne.n	19326 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   1931c:	2300      	movs	r3, #0
   1931e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   19320:	f06f 000b 	mvn.w	r0, #11
   19324:	e7ef      	b.n	19306 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   19326:	9200      	str	r2, [sp, #0]
   19328:	9301      	str	r3, [sp, #4]
   1932a:	4602      	mov	r2, r0
   1932c:	4670      	mov	r0, lr
   1932e:	f000 fd3b 	bl	19da8 <z_pend_curr>
		if (result == 0) {
   19332:	2800      	cmp	r0, #0
   19334:	d1eb      	bne.n	1930e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   19336:	4b02      	ldr	r3, [pc, #8]	; (19340 <k_mem_slab_alloc+0x64>)
   19338:	689b      	ldr	r3, [r3, #8]
   1933a:	695b      	ldr	r3, [r3, #20]
   1933c:	602b      	str	r3, [r5, #0]
		return result;
   1933e:	e7e6      	b.n	1930e <k_mem_slab_alloc+0x32>
   19340:	20004084 	.word	0x20004084

00019344 <z_thread_monitor_exit>:
	__asm__ volatile(
   19344:	f04f 0340 	mov.w	r3, #64	; 0x40
   19348:	f3ef 8111 	mrs	r1, BASEPRI
   1934c:	f383 8812 	msr	BASEPRI_MAX, r3
   19350:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   19354:	4b0a      	ldr	r3, [pc, #40]	; (19380 <z_thread_monitor_exit+0x3c>)
   19356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19358:	4283      	cmp	r3, r0
   1935a:	d104      	bne.n	19366 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1935c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1935e:	4b08      	ldr	r3, [pc, #32]	; (19380 <z_thread_monitor_exit+0x3c>)
   19360:	62da      	str	r2, [r3, #44]	; 0x2c
   19362:	e007      	b.n	19374 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   19364:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   19366:	b113      	cbz	r3, 1936e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   19368:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1936a:	4282      	cmp	r2, r0
   1936c:	d1fa      	bne.n	19364 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1936e:	b10b      	cbz	r3, 19374 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   19370:	6f42      	ldr	r2, [r0, #116]	; 0x74
   19372:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   19374:	f381 8811 	msr	BASEPRI, r1
   19378:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1937c:	4770      	bx	lr
   1937e:	bf00      	nop
   19380:	20004084 	.word	0x20004084

00019384 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   19384:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   19386:	4604      	mov	r4, r0
   19388:	b140      	cbz	r0, 1939c <z_impl_k_thread_name_set+0x18>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1938a:	221f      	movs	r2, #31
   1938c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   19390:	f00b fe7d 	bl	2508e <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   19394:	2000      	movs	r0, #0
   19396:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1939a:	bd10      	pop	{r4, pc}
		thread = _current;
   1939c:	4b01      	ldr	r3, [pc, #4]	; (193a4 <z_impl_k_thread_name_set+0x20>)
   1939e:	689c      	ldr	r4, [r3, #8]
   193a0:	e7f3      	b.n	1938a <z_impl_k_thread_name_set+0x6>
   193a2:	bf00      	nop
   193a4:	20004084 	.word	0x20004084

000193a8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   193a8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   193aa:	ea53 0102 	orrs.w	r1, r3, r2
   193ae:	d102      	bne.n	193b6 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   193b0:	f00b f845 	bl	2443e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   193b4:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   193b6:	4902      	ldr	r1, [pc, #8]	; (193c0 <schedule_new_thread+0x18>)
   193b8:	3018      	adds	r0, #24
   193ba:	f000 ff35 	bl	1a228 <z_add_timeout>
   193be:	e7f9      	b.n	193b4 <schedule_new_thread+0xc>
   193c0:	0002497b 	.word	0x0002497b

000193c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   193c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193c8:	b085      	sub	sp, #20
   193ca:	4604      	mov	r4, r0
   193cc:	460f      	mov	r7, r1
   193ce:	4615      	mov	r5, r2
   193d0:	461e      	mov	r6, r3
   193d2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   193d6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   193da:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   193de:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   193e2:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
   193e6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   193e8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   193ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   193ec:	2204      	movs	r2, #4
   193ee:	9911      	ldr	r1, [sp, #68]	; 0x44
   193f0:	f00b f829 	bl	24446 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   193f4:	462a      	mov	r2, r5
   193f6:	4639      	mov	r1, r7
   193f8:	4620      	mov	r0, r4
   193fa:	f00b f806 	bl	2440a <setup_thread_stack>
   193fe:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19400:	f8cd 8008 	str.w	r8, [sp, #8]
   19404:	f8cd 9004 	str.w	r9, [sp, #4]
   19408:	f8cd a000 	str.w	sl, [sp]
   1940c:	4633      	mov	r3, r6
   1940e:	4602      	mov	r2, r0
   19410:	4639      	mov	r1, r7
   19412:	4620      	mov	r0, r4
   19414:	f7f9 fe4a 	bl	130ac <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   19418:	2300      	movs	r3, #0
   1941a:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1941c:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1941e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   19422:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   19426:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1942a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1942e:	f3ef 8211 	mrs	r2, BASEPRI
   19432:	f383 8812 	msr	BASEPRI_MAX, r3
   19436:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1943a:	4b13      	ldr	r3, [pc, #76]	; (19488 <z_setup_new_thread+0xc4>)
   1943c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1943e:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   19440:	62dc      	str	r4, [r3, #44]	; 0x2c
	__asm__ volatile(
   19442:	f382 8811 	msr	BASEPRI, r2
   19446:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1944a:	f1bb 0f00 	cmp.w	fp, #0
   1944e:	d013      	beq.n	19478 <z_setup_new_thread+0xb4>
   19450:	221f      	movs	r2, #31
   19452:	4659      	mov	r1, fp
   19454:	f104 0078 	add.w	r0, r4, #120	; 0x78
   19458:	f00b fe19 	bl	2508e <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1945c:	2300      	movs	r3, #0
   1945e:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   19462:	4b09      	ldr	r3, [pc, #36]	; (19488 <z_setup_new_thread+0xc4>)
   19464:	689b      	ldr	r3, [r3, #8]
   19466:	b15b      	cbz	r3, 19480 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   19468:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1946c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   19470:	4628      	mov	r0, r5
   19472:	b005      	add	sp, #20
   19474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   19478:	2300      	movs	r3, #0
   1947a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1947e:	e7f0      	b.n	19462 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   19480:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   19484:	e7f4      	b.n	19470 <z_setup_new_thread+0xac>
   19486:	bf00      	nop
   19488:	20004084 	.word	0x20004084

0001948c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1948c:	b510      	push	{r4, lr}
   1948e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   19490:	4c18      	ldr	r4, [pc, #96]	; (194f4 <z_init_static_threads+0x68>)
   19492:	e014      	b.n	194be <z_init_static_threads+0x32>
		z_setup_new_thread(
   19494:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19496:	9305      	str	r3, [sp, #20]
   19498:	6a23      	ldr	r3, [r4, #32]
   1949a:	9304      	str	r3, [sp, #16]
   1949c:	69e3      	ldr	r3, [r4, #28]
   1949e:	9303      	str	r3, [sp, #12]
   194a0:	69a3      	ldr	r3, [r4, #24]
   194a2:	9302      	str	r3, [sp, #8]
   194a4:	6963      	ldr	r3, [r4, #20]
   194a6:	9301      	str	r3, [sp, #4]
   194a8:	6923      	ldr	r3, [r4, #16]
   194aa:	9300      	str	r3, [sp, #0]
   194ac:	68e3      	ldr	r3, [r4, #12]
   194ae:	68a2      	ldr	r2, [r4, #8]
   194b0:	6861      	ldr	r1, [r4, #4]
   194b2:	6820      	ldr	r0, [r4, #0]
   194b4:	f7ff ff86 	bl	193c4 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   194b8:	6823      	ldr	r3, [r4, #0]
   194ba:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   194bc:	342c      	adds	r4, #44	; 0x2c
   194be:	4b0e      	ldr	r3, [pc, #56]	; (194f8 <z_init_static_threads+0x6c>)
   194c0:	429c      	cmp	r4, r3
   194c2:	d3e7      	bcc.n	19494 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   194c4:	f000 fb38 	bl	19b38 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   194c8:	4c0a      	ldr	r4, [pc, #40]	; (194f4 <z_init_static_threads+0x68>)
   194ca:	e000      	b.n	194ce <z_init_static_threads+0x42>
   194cc:	342c      	adds	r4, #44	; 0x2c
   194ce:	4b0a      	ldr	r3, [pc, #40]	; (194f8 <z_init_static_threads+0x6c>)
   194d0:	429c      	cmp	r4, r3
   194d2:	d20a      	bcs.n	194ea <z_init_static_threads+0x5e>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   194d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   194d6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   194da:	d0f7      	beq.n	194cc <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
   194dc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
   194e0:	17d3      	asrs	r3, r2, #31
   194e2:	6820      	ldr	r0, [r4, #0]
   194e4:	f7ff ff60 	bl	193a8 <schedule_new_thread>
   194e8:	e7f0      	b.n	194cc <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   194ea:	f000 fd11 	bl	19f10 <k_sched_unlock>
}
   194ee:	b006      	add	sp, #24
   194f0:	bd10      	pop	{r4, pc}
   194f2:	bf00      	nop
   194f4:	00025e3c 	.word	0x00025e3c
   194f8:	00025e94 	.word	0x00025e94

000194fc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   194fc:	b508      	push	{r3, lr}
   194fe:	e001      	b.n	19504 <idle+0x8>
	arch_cpu_idle();
   19500:	f7f9 fcba 	bl	12e78 <arch_cpu_idle>
	__asm__ volatile(
   19504:	f04f 0240 	mov.w	r2, #64	; 0x40
   19508:	f3ef 8311 	mrs	r3, BASEPRI
   1950c:	f382 8812 	msr	BASEPRI_MAX, r2
   19510:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   19514:	f00b fb6d 	bl	24bf2 <z_get_next_timeout_expiry>
   19518:	4b05      	ldr	r3, [pc, #20]	; (19530 <idle+0x34>)
   1951a:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   1951c:	4b05      	ldr	r3, [pc, #20]	; (19534 <idle+0x38>)
   1951e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   19520:	2b00      	cmp	r3, #0
   19522:	d0ed      	beq.n	19500 <idle+0x4>
   19524:	f7f8 f94e 	bl	117c4 <pm_system_suspend>
   19528:	2800      	cmp	r0, #0
   1952a:	d1eb      	bne.n	19504 <idle+0x8>
   1952c:	e7e8      	b.n	19500 <idle+0x4>
   1952e:	bf00      	nop
   19530:	20004084 	.word	0x20004084
   19534:	20004bb6 	.word	0x20004bb6

00019538 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   19538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1953c:	b082      	sub	sp, #8
   1953e:	4604      	mov	r4, r0
   19540:	461e      	mov	r6, r3
   19542:	f04f 0340 	mov.w	r3, #64	; 0x40
   19546:	f3ef 8511 	mrs	r5, BASEPRI
   1954a:	f383 8812 	msr	BASEPRI_MAX, r3
   1954e:	f3bf 8f6f 	isb	sy
   19552:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   19554:	68c1      	ldr	r1, [r0, #12]
   19556:	b999      	cbnz	r1, 19580 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   19558:	2900      	cmp	r1, #0
   1955a:	d151      	bne.n	19600 <z_impl_k_mutex_lock+0xc8>
   1955c:	4a36      	ldr	r2, [pc, #216]	; (19638 <z_impl_k_mutex_lock+0x100>)
   1955e:	6892      	ldr	r2, [r2, #8]
   19560:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19564:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   19566:	3101      	adds	r1, #1
   19568:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1956a:	4a33      	ldr	r2, [pc, #204]	; (19638 <z_impl_k_mutex_lock+0x100>)
   1956c:	6892      	ldr	r2, [r2, #8]
   1956e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
   19570:	f383 8811 	msr	BASEPRI, r3
   19574:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   19578:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1957a:	b002      	add	sp, #8
   1957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19580:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   19582:	6880      	ldr	r0, [r0, #8]
   19584:	4a2c      	ldr	r2, [pc, #176]	; (19638 <z_impl_k_mutex_lock+0x100>)
   19586:	6892      	ldr	r2, [r2, #8]
   19588:	4290      	cmp	r0, r2
   1958a:	d0e5      	beq.n	19558 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1958c:	ea56 0107 	orrs.w	r1, r6, r7
   19590:	d038      	beq.n	19604 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
   19592:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   19596:	4641      	mov	r1, r8
   19598:	f992 000e 	ldrsb.w	r0, [r2, #14]
   1959c:	f00a ff87 	bl	244ae <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   195a0:	4580      	cmp	r8, r0
   195a2:	dc36      	bgt.n	19612 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
   195a4:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   195a8:	9700      	str	r7, [sp, #0]
   195aa:	9601      	str	r6, [sp, #4]
   195ac:	4622      	mov	r2, r4
   195ae:	4629      	mov	r1, r5
   195b0:	4822      	ldr	r0, [pc, #136]	; (1963c <z_impl_k_mutex_lock+0x104>)
   195b2:	f000 fbf9 	bl	19da8 <z_pend_curr>
	if (got_mutex == 0) {
   195b6:	2800      	cmp	r0, #0
   195b8:	d0df      	beq.n	1957a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
   195ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   195be:	f3ef 8511 	mrs	r5, BASEPRI
   195c2:	f383 8812 	msr	BASEPRI_MAX, r3
   195c6:	f3bf 8f6f 	isb	sy
   195ca:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
   195cc:	68a3      	ldr	r3, [r4, #8]
   195ce:	b343      	cbz	r3, 19622 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   195d0:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   195d2:	429c      	cmp	r4, r3
   195d4:	d023      	beq.n	1961e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   195d6:	b313      	cbz	r3, 1961e <z_impl_k_mutex_lock+0xe6>
   195d8:	6921      	ldr	r1, [r4, #16]
   195da:	f993 000e 	ldrsb.w	r0, [r3, #14]
   195de:	f00a ff66 	bl	244ae <new_prio_for_inheritance>
   195e2:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   195e4:	4620      	mov	r0, r4
   195e6:	f00a ff6d 	bl	244c4 <adjust_owner_prio>
   195ea:	b9e8      	cbnz	r0, 19628 <z_impl_k_mutex_lock+0xf0>
   195ec:	f1b8 0f00 	cmp.w	r8, #0
   195f0:	d11a      	bne.n	19628 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
   195f2:	f386 8811 	msr	BASEPRI, r6
   195f6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   195fa:	f06f 000a 	mvn.w	r0, #10
   195fe:	e7bc      	b.n	1957a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
   19600:	6922      	ldr	r2, [r4, #16]
   19602:	e7af      	b.n	19564 <z_impl_k_mutex_lock+0x2c>
   19604:	f385 8811 	msr	BASEPRI, r5
   19608:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1960c:	f06f 000f 	mvn.w	r0, #15
   19610:	e7b3      	b.n	1957a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
   19612:	4601      	mov	r1, r0
   19614:	4620      	mov	r0, r4
   19616:	f00a ff55 	bl	244c4 <adjust_owner_prio>
   1961a:	4680      	mov	r8, r0
   1961c:	e7c4      	b.n	195a8 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1961e:	6921      	ldr	r1, [r4, #16]
   19620:	e7e0      	b.n	195e4 <z_impl_k_mutex_lock+0xac>
	if (resched) {
   19622:	f1b8 0f00 	cmp.w	r8, #0
   19626:	d0e4      	beq.n	195f2 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
   19628:	4629      	mov	r1, r5
   1962a:	4804      	ldr	r0, [pc, #16]	; (1963c <z_impl_k_mutex_lock+0x104>)
   1962c:	f000 fa6e 	bl	19b0c <z_reschedule>
	return -EAGAIN;
   19630:	f06f 000a 	mvn.w	r0, #10
   19634:	e7a1      	b.n	1957a <z_impl_k_mutex_lock+0x42>
   19636:	bf00      	nop
   19638:	20004084 	.word	0x20004084
   1963c:	200040b4 	.word	0x200040b4

00019640 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   19640:	6883      	ldr	r3, [r0, #8]
   19642:	b38b      	cbz	r3, 196a8 <z_impl_k_mutex_unlock+0x68>
{
   19644:	b570      	push	{r4, r5, r6, lr}
   19646:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   19648:	4a1a      	ldr	r2, [pc, #104]	; (196b4 <z_impl_k_mutex_unlock+0x74>)
   1964a:	6892      	ldr	r2, [r2, #8]
   1964c:	4293      	cmp	r3, r2
   1964e:	d12e      	bne.n	196ae <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   19650:	68c3      	ldr	r3, [r0, #12]
   19652:	2b01      	cmp	r3, #1
   19654:	d903      	bls.n	1965e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   19656:	3b01      	subs	r3, #1
   19658:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1965a:	2000      	movs	r0, #0
}
   1965c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1965e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19662:	f3ef 8511 	mrs	r5, BASEPRI
   19666:	f383 8812 	msr	BASEPRI_MAX, r3
   1966a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1966e:	6901      	ldr	r1, [r0, #16]
   19670:	f00a ff28 	bl	244c4 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   19674:	4620      	mov	r0, r4
   19676:	f00b f9f0 	bl	24a5a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1967a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1967c:	b168      	cbz	r0, 1969a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   1967e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19682:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   19684:	2400      	movs	r4, #0
   19686:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1968a:	f00b f930 	bl	248ee <z_ready_thread>
		z_reschedule(&lock, key);
   1968e:	4629      	mov	r1, r5
   19690:	4809      	ldr	r0, [pc, #36]	; (196b8 <z_impl_k_mutex_unlock+0x78>)
   19692:	f000 fa3b 	bl	19b0c <z_reschedule>
	return 0;
   19696:	4620      	mov	r0, r4
   19698:	e7e0      	b.n	1965c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   1969a:	2000      	movs	r0, #0
   1969c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1969e:	f385 8811 	msr	BASEPRI, r5
   196a2:	f3bf 8f6f 	isb	sy
   196a6:	e7d9      	b.n	1965c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   196a8:	f06f 0015 	mvn.w	r0, #21
}
   196ac:	4770      	bx	lr
		return -EPERM;
   196ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196b2:	e7d3      	b.n	1965c <z_impl_k_mutex_unlock+0x1c>
   196b4:	20004084 	.word	0x20004084
   196b8:	200040b4 	.word	0x200040b4

000196bc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   196bc:	b510      	push	{r4, lr}
   196be:	b082      	sub	sp, #8
   196c0:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   196c2:	4686      	mov	lr, r0
	__asm__ volatile(
   196c4:	f04f 0040 	mov.w	r0, #64	; 0x40
   196c8:	f3ef 8111 	mrs	r1, BASEPRI
   196cc:	f380 8812 	msr	BASEPRI_MAX, r0
   196d0:	f3bf 8f6f 	isb	sy
   196d4:	460c      	mov	r4, r1
   196d6:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   196da:	b1a0      	cbz	r0, 19706 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   196dc:	6803      	ldr	r3, [r0, #0]
   196de:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   196e2:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   196e6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   196ea:	4290      	cmp	r0, r2
   196ec:	d008      	beq.n	19700 <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   196ee:	2101      	movs	r1, #1
   196f0:	f00a ff7e 	bl	245f0 <z_queue_node_peek>
	__asm__ volatile(
   196f4:	f384 8811 	msr	BASEPRI, r4
   196f8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   196fc:	b002      	add	sp, #8
   196fe:	bd10      	pop	{r4, pc}
	list->tail = node;
   19700:	f8cc 3004 	str.w	r3, [ip, #4]
}
   19704:	e7f3      	b.n	196ee <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19706:	ea53 0002 	orrs.w	r0, r3, r2
   1970a:	d00a      	beq.n	19722 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1970c:	9200      	str	r2, [sp, #0]
   1970e:	9301      	str	r3, [sp, #4]
   19710:	4672      	mov	r2, lr
   19712:	4670      	mov	r0, lr
   19714:	f000 fb48 	bl	19da8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   19718:	b948      	cbnz	r0, 1972e <z_impl_k_queue_get+0x72>
   1971a:	4b06      	ldr	r3, [pc, #24]	; (19734 <z_impl_k_queue_get+0x78>)
   1971c:	689b      	ldr	r3, [r3, #8]
   1971e:	6958      	ldr	r0, [r3, #20]
   19720:	e7ec      	b.n	196fc <z_impl_k_queue_get+0x40>
   19722:	f381 8811 	msr	BASEPRI, r1
   19726:	f3bf 8f6f 	isb	sy
		return NULL;
   1972a:	2000      	movs	r0, #0
   1972c:	e7e6      	b.n	196fc <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1972e:	2000      	movs	r0, #0
   19730:	e7e4      	b.n	196fc <z_impl_k_queue_get+0x40>
   19732:	bf00      	nop
   19734:	20004084 	.word	0x20004084

00019738 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19738:	b538      	push	{r3, r4, r5, lr}
   1973a:	4604      	mov	r4, r0
	__asm__ volatile(
   1973c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19740:	f3ef 8511 	mrs	r5, BASEPRI
   19744:	f383 8812 	msr	BASEPRI_MAX, r3
   19748:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1974c:	f00b f985 	bl	24a5a <z_unpend_first_thread>

	if (thread != NULL) {
   19750:	b148      	cbz	r0, 19766 <z_impl_k_sem_give+0x2e>
   19752:	2200      	movs	r2, #0
   19754:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   19758:	f00b f8c9 	bl	248ee <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1975c:	4629      	mov	r1, r5
   1975e:	4809      	ldr	r0, [pc, #36]	; (19784 <z_impl_k_sem_give+0x4c>)
   19760:	f000 f9d4 	bl	19b0c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   19764:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19766:	68a3      	ldr	r3, [r4, #8]
   19768:	68e2      	ldr	r2, [r4, #12]
   1976a:	4293      	cmp	r3, r2
   1976c:	d008      	beq.n	19780 <z_impl_k_sem_give+0x48>
   1976e:	2201      	movs	r2, #1
   19770:	4413      	add	r3, r2
   19772:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19774:	2102      	movs	r1, #2
   19776:	f104 0010 	add.w	r0, r4, #16
   1977a:	f00b fb1a 	bl	24db2 <z_handle_obj_poll_events>
}
   1977e:	e7ed      	b.n	1975c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19780:	2200      	movs	r2, #0
   19782:	e7f5      	b.n	19770 <z_impl_k_sem_give+0x38>
   19784:	200040b4 	.word	0x200040b4

00019788 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   19788:	b510      	push	{r4, lr}
   1978a:	b082      	sub	sp, #8
   1978c:	f04f 0440 	mov.w	r4, #64	; 0x40
   19790:	f3ef 8111 	mrs	r1, BASEPRI
   19794:	f384 8812 	msr	BASEPRI_MAX, r4
   19798:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1979c:	6884      	ldr	r4, [r0, #8]
   1979e:	b144      	cbz	r4, 197b2 <z_impl_k_sem_take+0x2a>
		sem->count--;
   197a0:	3c01      	subs	r4, #1
   197a2:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   197a4:	f381 8811 	msr	BASEPRI, r1
   197a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   197ac:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   197ae:	b002      	add	sp, #8
   197b0:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   197b2:	ea53 0402 	orrs.w	r4, r3, r2
   197b6:	d006      	beq.n	197c6 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   197b8:	9200      	str	r2, [sp, #0]
   197ba:	9301      	str	r3, [sp, #4]
   197bc:	4602      	mov	r2, r0
   197be:	4805      	ldr	r0, [pc, #20]	; (197d4 <z_impl_k_sem_take+0x4c>)
   197c0:	f000 faf2 	bl	19da8 <z_pend_curr>
	return ret;
   197c4:	e7f3      	b.n	197ae <z_impl_k_sem_take+0x26>
   197c6:	f381 8811 	msr	BASEPRI, r1
   197ca:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   197ce:	f06f 000f 	mvn.w	r0, #15
   197d2:	e7ec      	b.n	197ae <z_impl_k_sem_take+0x26>
   197d4:	200040b4 	.word	0x200040b4

000197d8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   197d8:	b538      	push	{r3, r4, r5, lr}
   197da:	4604      	mov	r4, r0
	__asm__ volatile(
   197dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   197e0:	f3ef 8511 	mrs	r5, BASEPRI
   197e4:	f383 8812 	msr	BASEPRI_MAX, r3
   197e8:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
   197ec:	e005      	b.n	197fa <z_impl_k_sem_reset+0x22>
   197ee:	f06f 020a 	mvn.w	r2, #10
   197f2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   197f6:	f00b f87a 	bl	248ee <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   197fa:	4620      	mov	r0, r4
   197fc:	f00b f92d 	bl	24a5a <z_unpend_first_thread>
		if (thread == NULL) {
   19800:	2800      	cmp	r0, #0
   19802:	d1f4      	bne.n	197ee <z_impl_k_sem_reset+0x16>
	}
	sem->count = 0;
   19804:	2300      	movs	r3, #0
   19806:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19808:	2102      	movs	r1, #2
   1980a:	f104 0010 	add.w	r0, r4, #16
   1980e:	f00b fad0 	bl	24db2 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   19812:	4629      	mov	r1, r5
   19814:	4801      	ldr	r0, [pc, #4]	; (1981c <z_impl_k_sem_reset+0x44>)
   19816:	f000 f979 	bl	19b0c <z_reschedule>
}
   1981a:	bd38      	pop	{r3, r4, r5, pc}
   1981c:	200040b4 	.word	0x200040b4

00019820 <queue_submit_locked>:
	if (queue == NULL) {
   19820:	b370      	cbz	r0, 19880 <queue_submit_locked+0x60>
{
   19822:	b538      	push	{r3, r4, r5, lr}
   19824:	460d      	mov	r5, r1
   19826:	4604      	mov	r4, r0
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19828:	4b1b      	ldr	r3, [pc, #108]	; (19898 <queue_submit_locked+0x78>)
   1982a:	689b      	ldr	r3, [r3, #8]
   1982c:	4283      	cmp	r3, r0
   1982e:	d01b      	beq.n	19868 <queue_submit_locked+0x48>
   19830:	2300      	movs	r3, #0
   19832:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   19834:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   19838:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1983c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   19840:	f013 0f01 	tst.w	r3, #1
   19844:	d01f      	beq.n	19886 <queue_submit_locked+0x66>
	} else if (draining && !chained) {
   19846:	b101      	cbz	r1, 1984a <queue_submit_locked+0x2a>
   19848:	b302      	cbz	r2, 1988c <queue_submit_locked+0x6c>
	} else if (plugged && !draining) {
   1984a:	b100      	cbz	r0, 1984e <queue_submit_locked+0x2e>
   1984c:	b309      	cbz	r1, 19892 <queue_submit_locked+0x72>
	parent->next = child;
   1984e:	2300      	movs	r3, #0
   19850:	602b      	str	r3, [r5, #0]
	return list->tail;
   19852:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
   19856:	b173      	cbz	r3, 19876 <queue_submit_locked+0x56>
	parent->next = child;
   19858:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1985a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
		(void)notify_queue_locked(queue);
   1985e:	4620      	mov	r0, r4
   19860:	f00a ff12 	bl	24688 <notify_queue_locked>
		ret = 1;
   19864:	2001      	movs	r0, #1
}
   19866:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19868:	f00a fde3 	bl	24432 <k_is_in_isr>
   1986c:	b908      	cbnz	r0, 19872 <queue_submit_locked+0x52>
   1986e:	2301      	movs	r3, #1
   19870:	e7df      	b.n	19832 <queue_submit_locked+0x12>
   19872:	2300      	movs	r3, #0
   19874:	e7dd      	b.n	19832 <queue_submit_locked+0x12>
   19876:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
	list->head = node;
   1987a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
   1987e:	e7ee      	b.n	1985e <queue_submit_locked+0x3e>
		return -EINVAL;
   19880:	f06f 0015 	mvn.w	r0, #21
}
   19884:	4770      	bx	lr
		ret = -ENODEV;
   19886:	f06f 0012 	mvn.w	r0, #18
   1988a:	e7ec      	b.n	19866 <queue_submit_locked+0x46>
		ret = -EBUSY;
   1988c:	f06f 000f 	mvn.w	r0, #15
   19890:	e7e9      	b.n	19866 <queue_submit_locked+0x46>
		ret = -EBUSY;
   19892:	f06f 000f 	mvn.w	r0, #15
   19896:	e7e6      	b.n	19866 <queue_submit_locked+0x46>
   19898:	20004084 	.word	0x20004084

0001989c <finalize_cancel_locked>:
{
   1989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1989e:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   198a0:	68c3      	ldr	r3, [r0, #12]
   198a2:	f023 0302 	bic.w	r3, r3, #2
   198a6:	60c3      	str	r3, [r0, #12]
	return list->head;
   198a8:	4b13      	ldr	r3, [pc, #76]	; (198f8 <finalize_cancel_locked+0x5c>)
   198aa:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   198ac:	b185      	cbz	r5, 198d0 <finalize_cancel_locked+0x34>
	return node->next;
   198ae:	682c      	ldr	r4, [r5, #0]
   198b0:	b104      	cbz	r4, 198b4 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   198b2:	b10d      	cbz	r5, 198b8 <finalize_cancel_locked+0x1c>
   198b4:	2700      	movs	r7, #0
   198b6:	e010      	b.n	198da <finalize_cancel_locked+0x3e>
   198b8:	462c      	mov	r4, r5
   198ba:	e7fb      	b.n	198b4 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   198bc:	462a      	mov	r2, r5
   198be:	4639      	mov	r1, r7
   198c0:	480d      	ldr	r0, [pc, #52]	; (198f8 <finalize_cancel_locked+0x5c>)
   198c2:	f00a fece 	bl	24662 <sys_slist_remove>
			k_sem_give(&wc->sem);
   198c6:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   198ca:	f7ff ff35 	bl	19738 <z_impl_k_sem_give>
}
   198ce:	e009      	b.n	198e4 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   198d0:	462c      	mov	r4, r5
   198d2:	e7ef      	b.n	198b4 <finalize_cancel_locked+0x18>
   198d4:	4623      	mov	r3, r4
   198d6:	4625      	mov	r5, r4
   198d8:	461c      	mov	r4, r3
   198da:	b165      	cbz	r5, 198f6 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   198dc:	686b      	ldr	r3, [r5, #4]
   198de:	42b3      	cmp	r3, r6
   198e0:	d0ec      	beq.n	198bc <finalize_cancel_locked+0x20>
			prev = &wc->node;
   198e2:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   198e4:	2c00      	cmp	r4, #0
   198e6:	d0f5      	beq.n	198d4 <finalize_cancel_locked+0x38>
	return node->next;
   198e8:	6823      	ldr	r3, [r4, #0]
   198ea:	2b00      	cmp	r3, #0
   198ec:	d0f3      	beq.n	198d6 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   198ee:	2c00      	cmp	r4, #0
   198f0:	d1f1      	bne.n	198d6 <finalize_cancel_locked+0x3a>
   198f2:	4623      	mov	r3, r4
   198f4:	e7ef      	b.n	198d6 <finalize_cancel_locked+0x3a>
}
   198f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198f8:	200040b4 	.word	0x200040b4

000198fc <work_queue_main>:
{
   198fc:	b570      	push	{r4, r5, r6, lr}
   198fe:	b084      	sub	sp, #16
   19900:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   19902:	e016      	b.n	19932 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   19904:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	*flagp &= ~BIT(bit);
   19908:	f023 0204 	bic.w	r2, r3, #4
   1990c:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
		} else if (flag_test_and_clear(&queue->flags,
   19910:	f013 0f04 	tst.w	r3, #4
   19914:	d15a      	bne.n	199cc <work_queue_main+0xd0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   19916:	2300      	movs	r3, #0
   19918:	9302      	str	r3, [sp, #8]
   1991a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1991e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19922:	e9cd 2300 	strd	r2, r3, [sp]
   19926:	f505 7280 	add.w	r2, r5, #256	; 0x100
   1992a:	4631      	mov	r1, r6
   1992c:	482e      	ldr	r0, [pc, #184]	; (199e8 <work_queue_main+0xec>)
   1992e:	f000 fc2d 	bl	1a18c <z_sched_wait>
   19932:	f04f 0340 	mov.w	r3, #64	; 0x40
   19936:	f3ef 8611 	mrs	r6, BASEPRI
   1993a:	f383 8812 	msr	BASEPRI_MAX, r3
   1993e:	f3bf 8f6f 	isb	sy
   19942:	4632      	mov	r2, r6
	return list->head;
   19944:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   19948:	2c00      	cmp	r4, #0
   1994a:	d0db      	beq.n	19904 <work_queue_main+0x8>
	return node->next;
   1994c:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1994e:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	return list->tail;
   19952:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19956:	428c      	cmp	r4, r1
   19958:	d035      	beq.n	199c6 <work_queue_main+0xca>
	*flagp |= BIT(bit);
   1995a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   1995e:	f043 0302 	orr.w	r3, r3, #2
   19962:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   19966:	68e3      	ldr	r3, [r4, #12]
   19968:	f043 0101 	orr.w	r1, r3, #1
   1996c:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
   1996e:	f023 0304 	bic.w	r3, r3, #4
   19972:	f043 0301 	orr.w	r3, r3, #1
   19976:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   19978:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   1997a:	f382 8811 	msr	BASEPRI, r2
   1997e:	f3bf 8f6f 	isb	sy
		handler(work);
   19982:	4620      	mov	r0, r4
   19984:	4798      	blx	r3
	__asm__ volatile(
   19986:	f04f 0340 	mov.w	r3, #64	; 0x40
   1998a:	f3ef 8611 	mrs	r6, BASEPRI
   1998e:	f383 8812 	msr	BASEPRI_MAX, r3
   19992:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   19996:	68e3      	ldr	r3, [r4, #12]
   19998:	f023 0301 	bic.w	r3, r3, #1
   1999c:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1999e:	f013 0f02 	tst.w	r3, #2
   199a2:	d11d      	bne.n	199e0 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   199a4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   199a8:	f023 0302 	bic.w	r3, r3, #2
   199ac:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
	return (*flagp & BIT(bit)) != 0U;
   199b0:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   199b4:	f386 8811 	msr	BASEPRI, r6
   199b8:	f3bf 8f6f 	isb	sy
		if (yield) {
   199bc:	2b00      	cmp	r3, #0
   199be:	d1b8      	bne.n	19932 <work_queue_main+0x36>
	z_impl_k_yield();
   199c0:	f000 fb00 	bl	19fc4 <z_impl_k_yield>
}
   199c4:	e7b5      	b.n	19932 <work_queue_main+0x36>
	list->tail = node;
   199c6:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
		if (node != NULL) {
   199ca:	e7c6      	b.n	1995a <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   199cc:	f505 7484 	add.w	r4, r5, #264	; 0x108
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   199d0:	2200      	movs	r2, #0
   199d2:	2101      	movs	r1, #1
   199d4:	4620      	mov	r0, r4
   199d6:	f00b f88c 	bl	24af2 <z_sched_wake>
   199da:	2800      	cmp	r0, #0
   199dc:	d1f8      	bne.n	199d0 <work_queue_main+0xd4>
   199de:	e79a      	b.n	19916 <work_queue_main+0x1a>
			finalize_cancel_locked(work);
   199e0:	4620      	mov	r0, r4
   199e2:	f7ff ff5b 	bl	1989c <finalize_cancel_locked>
   199e6:	e7dd      	b.n	199a4 <work_queue_main+0xa8>
   199e8:	200040bc 	.word	0x200040bc

000199ec <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   199ec:	b508      	push	{r3, lr}
   199ee:	4684      	mov	ip, r0
   199f0:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   199f2:	ea53 0102 	orrs.w	r1, r3, r2
   199f6:	d00c      	beq.n	19a12 <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   199f8:	68c1      	ldr	r1, [r0, #12]
   199fa:	f041 0108 	orr.w	r1, r1, #8
   199fe:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   19a00:	f8dc 1000 	ldr.w	r1, [ip]
   19a04:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19a06:	4905      	ldr	r1, [pc, #20]	; (19a1c <schedule_for_queue_locked+0x30>)
   19a08:	3010      	adds	r0, #16
   19a0a:	f000 fc0d 	bl	1a228 <z_add_timeout>

	return ret;
   19a0e:	2001      	movs	r0, #1
}
   19a10:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   19a12:	4661      	mov	r1, ip
   19a14:	f00a fe43 	bl	2469e <submit_to_queue_locked>
   19a18:	e7fa      	b.n	19a10 <schedule_for_queue_locked+0x24>
   19a1a:	bf00      	nop
   19a1c:	000246ff 	.word	0x000246ff

00019a20 <k_work_submit>:
{
   19a20:	b508      	push	{r3, lr}
   19a22:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   19a24:	4801      	ldr	r0, [pc, #4]	; (19a2c <k_work_submit+0xc>)
   19a26:	f00a feb5 	bl	24794 <k_work_submit_to_queue>
}
   19a2a:	bd08      	pop	{r3, pc}
   19a2c:	20002178 	.word	0x20002178

00019a30 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   19a30:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   19a32:	2b7f      	cmp	r3, #127	; 0x7f
   19a34:	d811      	bhi.n	19a5a <sliceable+0x2a>
	int ret = slice_ticks;
   19a36:	4b0e      	ldr	r3, [pc, #56]	; (19a70 <sliceable+0x40>)
   19a38:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   19a3a:	b17b      	cbz	r3, 19a5c <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   19a3c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   19a40:	4b0c      	ldr	r3, [pc, #48]	; (19a74 <sliceable+0x44>)
   19a42:	681b      	ldr	r3, [r3, #0]
   19a44:	429a      	cmp	r2, r3
   19a46:	db0c      	blt.n	19a62 <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
   19a48:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   19a4a:	f013 0f1f 	tst.w	r3, #31
   19a4e:	d10a      	bne.n	19a66 <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
   19a50:	4b09      	ldr	r3, [pc, #36]	; (19a78 <sliceable+0x48>)
   19a52:	4298      	cmp	r0, r3
   19a54:	d009      	beq.n	19a6a <sliceable+0x3a>
   19a56:	2301      	movs	r3, #1
   19a58:	e000      	b.n	19a5c <sliceable+0x2c>
   19a5a:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   19a5c:	f003 0001 	and.w	r0, r3, #1
   19a60:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   19a62:	2300      	movs	r3, #0
   19a64:	e7fa      	b.n	19a5c <sliceable+0x2c>
   19a66:	2300      	movs	r3, #0
   19a68:	e7f8      	b.n	19a5c <sliceable+0x2c>
   19a6a:	2300      	movs	r3, #0
   19a6c:	e7f6      	b.n	19a5c <sliceable+0x2c>
   19a6e:	bf00      	nop
   19a70:	200040c8 	.word	0x200040c8
   19a74:	200040c4 	.word	0x200040c4
   19a78:	20001f68 	.word	0x20001f68

00019a7c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   19a7c:	4b04      	ldr	r3, [pc, #16]	; (19a90 <slice_timeout+0x14>)
   19a7e:	1ac0      	subs	r0, r0, r3
   19a80:	10c0      	asrs	r0, r0, #3
   19a82:	4b04      	ldr	r3, [pc, #16]	; (19a94 <slice_timeout+0x18>)
   19a84:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
   19a88:	4b03      	ldr	r3, [pc, #12]	; (19a98 <slice_timeout+0x1c>)
   19a8a:	2201      	movs	r2, #1
   19a8c:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   19a8e:	4770      	bx	lr
   19a90:	20002158 	.word	0x20002158
   19a94:	aaaaaaab 	.word	0xaaaaaaab
   19a98:	200040c0 	.word	0x200040c0

00019a9c <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   19aa0:	bf08      	it	eq
   19aa2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   19aa6:	d100      	bne.n	19aaa <add_thread_timeout+0xe>
   19aa8:	4770      	bx	lr
{
   19aaa:	b508      	push	{r3, lr}
   19aac:	4902      	ldr	r1, [pc, #8]	; (19ab8 <add_thread_timeout+0x1c>)
   19aae:	3018      	adds	r0, #24
   19ab0:	f000 fbba 	bl	1a228 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   19ab4:	bd08      	pop	{r3, pc}
   19ab6:	bf00      	nop
   19ab8:	0002497b 	.word	0x0002497b

00019abc <z_reset_time_slice>:
{
   19abc:	b570      	push	{r4, r5, r6, lr}
   19abe:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
   19ac0:	4b0d      	ldr	r3, [pc, #52]	; (19af8 <z_reset_time_slice+0x3c>)
   19ac2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   19ac4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   19ac8:	4c0c      	ldr	r4, [pc, #48]	; (19afc <z_reset_time_slice+0x40>)
   19aca:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   19ace:	4620      	mov	r0, r4
   19ad0:	f00b f871 	bl	24bb6 <z_abort_timeout>
	slice_expired[cpu] = false;
   19ad4:	4b0a      	ldr	r3, [pc, #40]	; (19b00 <z_reset_time_slice+0x44>)
   19ad6:	2200      	movs	r2, #0
   19ad8:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   19ada:	4628      	mov	r0, r5
   19adc:	f7ff ffa8 	bl	19a30 <sliceable>
   19ae0:	b900      	cbnz	r0, 19ae4 <z_reset_time_slice+0x28>
}
   19ae2:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
   19ae4:	4b07      	ldr	r3, [pc, #28]	; (19b04 <z_reset_time_slice+0x48>)
   19ae6:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
   19ae8:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   19aea:	17d3      	asrs	r3, r2, #31
   19aec:	4906      	ldr	r1, [pc, #24]	; (19b08 <z_reset_time_slice+0x4c>)
   19aee:	4620      	mov	r0, r4
   19af0:	f000 fb9a 	bl	1a228 <z_add_timeout>
}
   19af4:	e7f5      	b.n	19ae2 <z_reset_time_slice+0x26>
   19af6:	bf00      	nop
   19af8:	20004084 	.word	0x20004084
   19afc:	20002158 	.word	0x20002158
   19b00:	200040c0 	.word	0x200040c0
   19b04:	200040c8 	.word	0x200040c8
   19b08:	00019a7d 	.word	0x00019a7d

00019b0c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   19b0c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   19b0e:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   19b10:	b959      	cbnz	r1, 19b2a <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19b12:	f3ef 8205 	mrs	r2, IPSR
   19b16:	b942      	cbnz	r2, 19b2a <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
   19b18:	4a06      	ldr	r2, [pc, #24]	; (19b34 <z_reschedule+0x28>)
   19b1a:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
   19b1c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
   19b1e:	4290      	cmp	r0, r2
   19b20:	d003      	beq.n	19b2a <z_reschedule+0x1e>
	ret = arch_swap(key);
   19b22:	4608      	mov	r0, r1
   19b24:	f7f9 fa4c 	bl	12fc0 <arch_swap>
		z_swap(lock, key);
   19b28:	e003      	b.n	19b32 <z_reschedule+0x26>
   19b2a:	f383 8811 	msr	BASEPRI, r3
   19b2e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   19b32:	bd08      	pop	{r3, pc}
   19b34:	20004084 	.word	0x20004084

00019b38 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   19b38:	2300      	movs	r3, #0
	__asm__ volatile(
   19b3a:	f04f 0240 	mov.w	r2, #64	; 0x40
   19b3e:	f3ef 8111 	mrs	r1, BASEPRI
   19b42:	f382 8812 	msr	BASEPRI_MAX, r2
   19b46:	f3bf 8f6f 	isb	sy
   19b4a:	e009      	b.n	19b60 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   19b4c:	4b06      	ldr	r3, [pc, #24]	; (19b68 <k_sched_lock+0x30>)
   19b4e:	689a      	ldr	r2, [r3, #8]
   19b50:	7bd3      	ldrb	r3, [r2, #15]
   19b52:	3b01      	subs	r3, #1
   19b54:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   19b56:	f381 8811 	msr	BASEPRI, r1
   19b5a:	f3bf 8f6f 	isb	sy
   19b5e:	2301      	movs	r3, #1
   19b60:	2b00      	cmp	r3, #0
   19b62:	d0f3      	beq.n	19b4c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   19b64:	4770      	bx	lr
   19b66:	bf00      	nop
   19b68:	20004084 	.word	0x20004084

00019b6c <update_cache>:
{
   19b6c:	b538      	push	{r3, r4, r5, lr}
   19b6e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   19b70:	4810      	ldr	r0, [pc, #64]	; (19bb4 <update_cache+0x48>)
   19b72:	f00a feb5 	bl	248e0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19b76:	4605      	mov	r5, r0
   19b78:	b170      	cbz	r0, 19b98 <update_cache+0x2c>
	if (preempt_ok != 0) {
   19b7a:	b984      	cbnz	r4, 19b9e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   19b7c:	4b0e      	ldr	r3, [pc, #56]	; (19bb8 <update_cache+0x4c>)
   19b7e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   19b80:	7b5a      	ldrb	r2, [r3, #13]
   19b82:	f012 0f1f 	tst.w	r2, #31
   19b86:	d10a      	bne.n	19b9e <update_cache+0x32>
	return node->next != NULL;
   19b88:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19b8a:	b942      	cbnz	r2, 19b9e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   19b8c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   19b8e:	2a7f      	cmp	r2, #127	; 0x7f
   19b90:	d905      	bls.n	19b9e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   19b92:	4a09      	ldr	r2, [pc, #36]	; (19bb8 <update_cache+0x4c>)
   19b94:	61d3      	str	r3, [r2, #28]
   19b96:	e00b      	b.n	19bb0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19b98:	4b07      	ldr	r3, [pc, #28]	; (19bb8 <update_cache+0x4c>)
   19b9a:	68dd      	ldr	r5, [r3, #12]
   19b9c:	e7ed      	b.n	19b7a <update_cache+0xe>
		if (thread != _current) {
   19b9e:	4b06      	ldr	r3, [pc, #24]	; (19bb8 <update_cache+0x4c>)
   19ba0:	689b      	ldr	r3, [r3, #8]
   19ba2:	42ab      	cmp	r3, r5
   19ba4:	d002      	beq.n	19bac <update_cache+0x40>
			z_reset_time_slice(thread);
   19ba6:	4628      	mov	r0, r5
   19ba8:	f7ff ff88 	bl	19abc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   19bac:	4b02      	ldr	r3, [pc, #8]	; (19bb8 <update_cache+0x4c>)
   19bae:	61dd      	str	r5, [r3, #28]
}
   19bb0:	bd38      	pop	{r3, r4, r5, pc}
   19bb2:	bf00      	nop
   19bb4:	200040a4 	.word	0x200040a4
   19bb8:	20004084 	.word	0x20004084

00019bbc <move_thread_to_end_of_prio_q>:
{
   19bbc:	b538      	push	{r3, r4, r5, lr}
   19bbe:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   19bc0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   19bc2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   19bc6:	2b00      	cmp	r3, #0
   19bc8:	db0a      	blt.n	19be0 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
   19bca:	7b6b      	ldrb	r3, [r5, #13]
   19bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19bd0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   19bd2:	4b1b      	ldr	r3, [pc, #108]	; (19c40 <move_thread_to_end_of_prio_q+0x84>)
   19bd4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19bd8:	429c      	cmp	r4, r3
   19bda:	d110      	bne.n	19bfe <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19bdc:	2400      	movs	r4, #0
   19bde:	e00e      	b.n	19bfe <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19be0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   19be4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19be6:	4601      	mov	r1, r0
   19be8:	4816      	ldr	r0, [pc, #88]	; (19c44 <move_thread_to_end_of_prio_q+0x88>)
   19bea:	f00a fe45 	bl	24878 <z_priq_dumb_remove>
}
   19bee:	e7ec      	b.n	19bca <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   19bf0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   19bf2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   19bf4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   19bf6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   19bf8:	6065      	str	r5, [r4, #4]
}
   19bfa:	e017      	b.n	19c2c <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19bfc:	2400      	movs	r4, #0
   19bfe:	b16c      	cbz	r4, 19c1c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19c00:	4621      	mov	r1, r4
   19c02:	4628      	mov	r0, r5
   19c04:	f00a fdfa 	bl	247fc <z_sched_prio_cmp>
   19c08:	2800      	cmp	r0, #0
   19c0a:	dcf1      	bgt.n	19bf0 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19c0c:	2c00      	cmp	r4, #0
   19c0e:	d0f6      	beq.n	19bfe <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
   19c10:	4b0b      	ldr	r3, [pc, #44]	; (19c40 <move_thread_to_end_of_prio_q+0x84>)
   19c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19c14:	429c      	cmp	r4, r3
   19c16:	d0f1      	beq.n	19bfc <move_thread_to_end_of_prio_q+0x40>
   19c18:	6824      	ldr	r4, [r4, #0]
   19c1a:	e7f0      	b.n	19bfe <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
   19c1c:	4b08      	ldr	r3, [pc, #32]	; (19c40 <move_thread_to_end_of_prio_q+0x84>)
   19c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   19c20:	f103 0120 	add.w	r1, r3, #32
   19c24:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   19c26:	606a      	str	r2, [r5, #4]
	tail->next = node;
   19c28:	6015      	str	r5, [r2, #0]
	list->tail = node;
   19c2a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   19c2c:	4b04      	ldr	r3, [pc, #16]	; (19c40 <move_thread_to_end_of_prio_q+0x84>)
   19c2e:	6898      	ldr	r0, [r3, #8]
   19c30:	42a8      	cmp	r0, r5
   19c32:	bf14      	ite	ne
   19c34:	2000      	movne	r0, #0
   19c36:	2001      	moveq	r0, #1
   19c38:	f7ff ff98 	bl	19b6c <update_cache>
}
   19c3c:	bd38      	pop	{r3, r4, r5, pc}
   19c3e:	bf00      	nop
   19c40:	20004084 	.word	0x20004084
   19c44:	200040a4 	.word	0x200040a4

00019c48 <z_time_slice>:
{
   19c48:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19c4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   19c4e:	f3ef 8311 	mrs	r3, BASEPRI
   19c52:	f382 8812 	msr	BASEPRI_MAX, r2
   19c56:	f3bf 8f6f 	isb	sy
   19c5a:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
   19c5c:	4b14      	ldr	r3, [pc, #80]	; (19cb0 <z_time_slice+0x68>)
   19c5e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   19c60:	4b14      	ldr	r3, [pc, #80]	; (19cb4 <z_time_slice+0x6c>)
   19c62:	681b      	ldr	r3, [r3, #0]
   19c64:	42a3      	cmp	r3, r4
   19c66:	d017      	beq.n	19c98 <z_time_slice+0x50>
	pending_current = NULL;
   19c68:	4b12      	ldr	r3, [pc, #72]	; (19cb4 <z_time_slice+0x6c>)
   19c6a:	2200      	movs	r2, #0
   19c6c:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   19c6e:	4b10      	ldr	r3, [pc, #64]	; (19cb0 <z_time_slice+0x68>)
   19c70:	7c1b      	ldrb	r3, [r3, #16]
   19c72:	4a11      	ldr	r2, [pc, #68]	; (19cb8 <z_time_slice+0x70>)
   19c74:	5cd3      	ldrb	r3, [r2, r3]
   19c76:	b153      	cbz	r3, 19c8e <z_time_slice+0x46>
   19c78:	4620      	mov	r0, r4
   19c7a:	f7ff fed9 	bl	19a30 <sliceable>
   19c7e:	b130      	cbz	r0, 19c8e <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
   19c80:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
   19c82:	f013 0f1f 	tst.w	r3, #31
   19c86:	d00f      	beq.n	19ca8 <z_time_slice+0x60>
		z_reset_time_slice(curr);
   19c88:	4620      	mov	r0, r4
   19c8a:	f7ff ff17 	bl	19abc <z_reset_time_slice>
	__asm__ volatile(
   19c8e:	f385 8811 	msr	BASEPRI, r5
   19c92:	f3bf 8f6f 	isb	sy
}
   19c96:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
   19c98:	4620      	mov	r0, r4
   19c9a:	f7ff ff0f 	bl	19abc <z_reset_time_slice>
   19c9e:	f385 8811 	msr	BASEPRI, r5
   19ca2:	f3bf 8f6f 	isb	sy
		return;
   19ca6:	e7f6      	b.n	19c96 <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
   19ca8:	4620      	mov	r0, r4
   19caa:	f7ff ff87 	bl	19bbc <move_thread_to_end_of_prio_q>
   19cae:	e7eb      	b.n	19c88 <z_time_slice+0x40>
   19cb0:	20004084 	.word	0x20004084
   19cb4:	200040bc 	.word	0x200040bc
   19cb8:	200040c0 	.word	0x200040c0

00019cbc <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   19cbc:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   19cbe:	f990 300d 	ldrsb.w	r3, [r0, #13]
   19cc2:	2b00      	cmp	r3, #0
   19cc4:	db33      	blt.n	19d2e <ready_thread+0x72>
{
   19cc6:	b570      	push	{r4, r5, r6, lr}
   19cc8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19cca:	f012 0f1f 	tst.w	r2, #31
   19cce:	d101      	bne.n	19cd4 <ready_thread+0x18>
	return node->next != NULL;
   19cd0:	6986      	ldr	r6, [r0, #24]
   19cd2:	b106      	cbz	r6, 19cd6 <ready_thread+0x1a>
}
   19cd4:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   19cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   19cda:	7342      	strb	r2, [r0, #13]
	return list->head == list;
   19cdc:	4b14      	ldr	r3, [pc, #80]	; (19d30 <ready_thread+0x74>)
   19cde:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19ce2:	429d      	cmp	r5, r3
   19ce4:	d108      	bne.n	19cf8 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19ce6:	4635      	mov	r5, r6
   19ce8:	e006      	b.n	19cf8 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
   19cea:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   19cec:	6063      	str	r3, [r4, #4]
	node->next = successor;
   19cee:	6025      	str	r5, [r4, #0]
	prev->next = node;
   19cf0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   19cf2:	606c      	str	r4, [r5, #4]
}
   19cf4:	e017      	b.n	19d26 <ready_thread+0x6a>
   19cf6:	4635      	mov	r5, r6
   19cf8:	b16d      	cbz	r5, 19d16 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19cfa:	4629      	mov	r1, r5
   19cfc:	4620      	mov	r0, r4
   19cfe:	f00a fd7d 	bl	247fc <z_sched_prio_cmp>
   19d02:	2800      	cmp	r0, #0
   19d04:	dcf1      	bgt.n	19cea <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19d06:	2d00      	cmp	r5, #0
   19d08:	d0f6      	beq.n	19cf8 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
   19d0a:	4b09      	ldr	r3, [pc, #36]	; (19d30 <ready_thread+0x74>)
   19d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19d0e:	429d      	cmp	r5, r3
   19d10:	d0f1      	beq.n	19cf6 <ready_thread+0x3a>
   19d12:	682d      	ldr	r5, [r5, #0]
   19d14:	e7f0      	b.n	19cf8 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
   19d16:	4b06      	ldr	r3, [pc, #24]	; (19d30 <ready_thread+0x74>)
   19d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   19d1a:	f103 0120 	add.w	r1, r3, #32
   19d1e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   19d20:	6062      	str	r2, [r4, #4]
	tail->next = node;
   19d22:	6014      	str	r4, [r2, #0]
	list->tail = node;
   19d24:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   19d26:	2000      	movs	r0, #0
   19d28:	f7ff ff20 	bl	19b6c <update_cache>
}
   19d2c:	e7d2      	b.n	19cd4 <ready_thread+0x18>
   19d2e:	4770      	bx	lr
   19d30:	20004084 	.word	0x20004084

00019d34 <z_sched_start>:
{
   19d34:	b510      	push	{r4, lr}
	__asm__ volatile(
   19d36:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d3a:	f3ef 8411 	mrs	r4, BASEPRI
   19d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   19d42:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   19d46:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   19d48:	f013 0f04 	tst.w	r3, #4
   19d4c:	d104      	bne.n	19d58 <z_sched_start+0x24>
	__asm__ volatile(
   19d4e:	f384 8811 	msr	BASEPRI, r4
   19d52:	f3bf 8f6f 	isb	sy
}
   19d56:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19d58:	f023 0304 	bic.w	r3, r3, #4
   19d5c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   19d5e:	f7ff ffad 	bl	19cbc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19d62:	4621      	mov	r1, r4
   19d64:	4801      	ldr	r0, [pc, #4]	; (19d6c <z_sched_start+0x38>)
   19d66:	f7ff fed1 	bl	19b0c <z_reschedule>
   19d6a:	e7f4      	b.n	19d56 <z_sched_start+0x22>
   19d6c:	200040cc 	.word	0x200040cc

00019d70 <unready_thread>:
{
   19d70:	b510      	push	{r4, lr}
   19d72:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   19d74:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   19d76:	f990 300d 	ldrsb.w	r3, [r0, #13]
   19d7a:	2b00      	cmp	r3, #0
   19d7c:	db08      	blt.n	19d90 <unready_thread+0x20>
	update_cache(thread == _current);
   19d7e:	4b08      	ldr	r3, [pc, #32]	; (19da0 <unready_thread+0x30>)
   19d80:	6898      	ldr	r0, [r3, #8]
   19d82:	42a0      	cmp	r0, r4
   19d84:	bf14      	ite	ne
   19d86:	2000      	movne	r0, #0
   19d88:	2001      	moveq	r0, #1
   19d8a:	f7ff feef 	bl	19b6c <update_cache>
}
   19d8e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19d90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   19d94:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19d96:	4601      	mov	r1, r0
   19d98:	4802      	ldr	r0, [pc, #8]	; (19da4 <unready_thread+0x34>)
   19d9a:	f00a fd6d 	bl	24878 <z_priq_dumb_remove>
}
   19d9e:	e7ee      	b.n	19d7e <unready_thread+0xe>
   19da0:	20004084 	.word	0x20004084
   19da4:	200040a4 	.word	0x200040a4

00019da8 <z_pend_curr>:
{
   19da8:	b510      	push	{r4, lr}
   19daa:	460c      	mov	r4, r1
   19dac:	4611      	mov	r1, r2
	pending_current = _current;
   19dae:	480a      	ldr	r0, [pc, #40]	; (19dd8 <z_pend_curr+0x30>)
   19db0:	6882      	ldr	r2, [r0, #8]
   19db2:	4b0a      	ldr	r3, [pc, #40]	; (19ddc <z_pend_curr+0x34>)
   19db4:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
   19db6:	f04f 0240 	mov.w	r2, #64	; 0x40
   19dba:	f3ef 8311 	mrs	r3, BASEPRI
   19dbe:	f382 8812 	msr	BASEPRI_MAX, r2
   19dc2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   19dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19dca:	6880      	ldr	r0, [r0, #8]
   19dcc:	f00a fe1b 	bl	24a06 <pend_locked>
   19dd0:	4620      	mov	r0, r4
   19dd2:	f7f9 f8f5 	bl	12fc0 <arch_swap>
}
   19dd6:	bd10      	pop	{r4, pc}
   19dd8:	20004084 	.word	0x20004084
   19ddc:	200040bc 	.word	0x200040bc

00019de0 <z_set_prio>:
{
   19de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19de4:	4605      	mov	r5, r0
   19de6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   19de8:	2300      	movs	r3, #0
   19dea:	f04f 0240 	mov.w	r2, #64	; 0x40
   19dee:	f3ef 8611 	mrs	r6, BASEPRI
   19df2:	f382 8812 	msr	BASEPRI_MAX, r2
   19df6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   19dfa:	4618      	mov	r0, r3
   19dfc:	e029      	b.n	19e52 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
   19dfe:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   19e00:	606b      	str	r3, [r5, #4]
	node->next = successor;
   19e02:	602c      	str	r4, [r5, #0]
	prev->next = node;
   19e04:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   19e06:	6065      	str	r5, [r4, #4]
}
   19e08:	e017      	b.n	19e3a <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19e0a:	4644      	mov	r4, r8
   19e0c:	b16c      	cbz	r4, 19e2a <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   19e0e:	4621      	mov	r1, r4
   19e10:	4628      	mov	r0, r5
   19e12:	f00a fcf3 	bl	247fc <z_sched_prio_cmp>
   19e16:	2800      	cmp	r0, #0
   19e18:	dcf1      	bgt.n	19dfe <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19e1a:	2c00      	cmp	r4, #0
   19e1c:	d0f6      	beq.n	19e0c <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
   19e1e:	4b1d      	ldr	r3, [pc, #116]	; (19e94 <z_set_prio+0xb4>)
   19e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19e22:	429c      	cmp	r4, r3
   19e24:	d0f1      	beq.n	19e0a <z_set_prio+0x2a>
   19e26:	6824      	ldr	r4, [r4, #0]
   19e28:	e7f0      	b.n	19e0c <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
   19e2a:	4b1a      	ldr	r3, [pc, #104]	; (19e94 <z_set_prio+0xb4>)
   19e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   19e2e:	f103 0120 	add.w	r1, r3, #32
   19e32:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   19e34:	606a      	str	r2, [r5, #4]
	tail->next = node;
   19e36:	6015      	str	r5, [r2, #0]
	list->tail = node;
   19e38:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   19e3a:	2001      	movs	r0, #1
   19e3c:	f7ff fe96 	bl	19b6c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19e40:	2001      	movs	r0, #1
   19e42:	e001      	b.n	19e48 <z_set_prio+0x68>
			thread->base.prio = prio;
   19e44:	73af      	strb	r7, [r5, #14]
   19e46:	2000      	movs	r0, #0
	__asm__ volatile(
   19e48:	f386 8811 	msr	BASEPRI, r6
   19e4c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19e50:	2301      	movs	r3, #1
   19e52:	b9e3      	cbnz	r3, 19e8e <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
   19e54:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19e56:	f013 0f1f 	tst.w	r3, #31
   19e5a:	d1f3      	bne.n	19e44 <z_set_prio+0x64>
	return node->next != NULL;
   19e5c:	f8d5 8018 	ldr.w	r8, [r5, #24]
   19e60:	f1b8 0f00 	cmp.w	r8, #0
   19e64:	d1ee      	bne.n	19e44 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19e6a:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19e6c:	f8df 9028 	ldr.w	r9, [pc, #40]	; 19e98 <z_set_prio+0xb8>
   19e70:	4629      	mov	r1, r5
   19e72:	4648      	mov	r0, r9
   19e74:	f00a fd00 	bl	24878 <z_priq_dumb_remove>
				thread->base.prio = prio;
   19e78:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   19e7a:	7b6b      	ldrb	r3, [r5, #13]
   19e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19e80:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   19e82:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19e86:	454c      	cmp	r4, r9
   19e88:	d1c0      	bne.n	19e0c <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19e8a:	4644      	mov	r4, r8
   19e8c:	e7be      	b.n	19e0c <z_set_prio+0x2c>
}
   19e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19e92:	bf00      	nop
   19e94:	20004084 	.word	0x20004084
   19e98:	200040a4 	.word	0x200040a4

00019e9c <z_impl_k_thread_suspend>:
{
   19e9c:	b538      	push	{r3, r4, r5, lr}
   19e9e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   19ea0:	3018      	adds	r0, #24
   19ea2:	f00a fe88 	bl	24bb6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   19ea6:	2300      	movs	r3, #0
	__asm__ volatile(
   19ea8:	f04f 0240 	mov.w	r2, #64	; 0x40
   19eac:	f3ef 8511 	mrs	r5, BASEPRI
   19eb0:	f382 8812 	msr	BASEPRI_MAX, r2
   19eb4:	f3bf 8f6f 	isb	sy
   19eb8:	e010      	b.n	19edc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19eba:	7b63      	ldrb	r3, [r4, #13]
   19ebc:	f043 0310 	orr.w	r3, r3, #16
   19ec0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   19ec2:	4b11      	ldr	r3, [pc, #68]	; (19f08 <z_impl_k_thread_suspend+0x6c>)
   19ec4:	6898      	ldr	r0, [r3, #8]
   19ec6:	42a0      	cmp	r0, r4
   19ec8:	bf14      	ite	ne
   19eca:	2000      	movne	r0, #0
   19ecc:	2001      	moveq	r0, #1
   19ece:	f7ff fe4d 	bl	19b6c <update_cache>
	__asm__ volatile(
   19ed2:	f385 8811 	msr	BASEPRI, r5
   19ed6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19eda:	2301      	movs	r3, #1
   19edc:	b963      	cbnz	r3, 19ef8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   19ede:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   19ee0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   19ee4:	2b00      	cmp	r3, #0
   19ee6:	dae8      	bge.n	19eba <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19ee8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   19eec:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19eee:	4621      	mov	r1, r4
   19ef0:	4806      	ldr	r0, [pc, #24]	; (19f0c <z_impl_k_thread_suspend+0x70>)
   19ef2:	f00a fcc1 	bl	24878 <z_priq_dumb_remove>
}
   19ef6:	e7e0      	b.n	19eba <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   19ef8:	4b03      	ldr	r3, [pc, #12]	; (19f08 <z_impl_k_thread_suspend+0x6c>)
   19efa:	689b      	ldr	r3, [r3, #8]
   19efc:	42a3      	cmp	r3, r4
   19efe:	d000      	beq.n	19f02 <z_impl_k_thread_suspend+0x66>
}
   19f00:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
   19f02:	f00a fcad 	bl	24860 <z_reschedule_unlocked>
}
   19f06:	e7fb      	b.n	19f00 <z_impl_k_thread_suspend+0x64>
   19f08:	20004084 	.word	0x20004084
   19f0c:	200040a4 	.word	0x200040a4

00019f10 <k_sched_unlock>:

void k_sched_unlock(void)
{
   19f10:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   19f12:	2300      	movs	r3, #0
	__asm__ volatile(
   19f14:	f04f 0240 	mov.w	r2, #64	; 0x40
   19f18:	f3ef 8411 	mrs	r4, BASEPRI
   19f1c:	f382 8812 	msr	BASEPRI_MAX, r2
   19f20:	f3bf 8f6f 	isb	sy
   19f24:	e00c      	b.n	19f40 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   19f26:	4b09      	ldr	r3, [pc, #36]	; (19f4c <k_sched_unlock+0x3c>)
   19f28:	689a      	ldr	r2, [r3, #8]
   19f2a:	7bd3      	ldrb	r3, [r2, #15]
   19f2c:	3301      	adds	r3, #1
   19f2e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   19f30:	2000      	movs	r0, #0
   19f32:	f7ff fe1b 	bl	19b6c <update_cache>
	__asm__ volatile(
   19f36:	f384 8811 	msr	BASEPRI, r4
   19f3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19f3e:	2301      	movs	r3, #1
   19f40:	2b00      	cmp	r3, #0
   19f42:	d0f0      	beq.n	19f26 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
   19f44:	f00a fc8c 	bl	24860 <z_reschedule_unlocked>
}
   19f48:	bd10      	pop	{r4, pc}
   19f4a:	bf00      	nop
   19f4c:	20004084 	.word	0x20004084

00019f50 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   19f50:	7b43      	ldrb	r3, [r0, #13]
   19f52:	f013 0f08 	tst.w	r3, #8
   19f56:	d12a      	bne.n	19fae <end_thread+0x5e>
{
   19f58:	b510      	push	{r4, lr}
   19f5a:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   19f5c:	f043 0208 	orr.w	r2, r3, #8
   19f60:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   19f62:	f023 0220 	bic.w	r2, r3, #32
   19f66:	f042 0208 	orr.w	r2, r2, #8
   19f6a:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   19f6c:	f012 0f80 	tst.w	r2, #128	; 0x80
   19f70:	d113      	bne.n	19f9a <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   19f72:	68a3      	ldr	r3, [r4, #8]
   19f74:	b113      	cbz	r3, 19f7c <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   19f76:	4620      	mov	r0, r4
   19f78:	f00a fc86 	bl	24888 <unpend_thread_no_timeout>
   19f7c:	f104 0018 	add.w	r0, r4, #24
   19f80:	f00a fe19 	bl	24bb6 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   19f84:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19f88:	f00a fcfd 	bl	24986 <unpend_all>
		update_cache(1);
   19f8c:	2001      	movs	r0, #1
   19f8e:	f7ff fded 	bl	19b6c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   19f92:	4620      	mov	r0, r4
   19f94:	f7ff f9d6 	bl	19344 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   19f98:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19f9a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   19f9e:	f043 0308 	orr.w	r3, r3, #8
   19fa2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19fa4:	4601      	mov	r1, r0
   19fa6:	4802      	ldr	r0, [pc, #8]	; (19fb0 <end_thread+0x60>)
   19fa8:	f00a fc66 	bl	24878 <z_priq_dumb_remove>
}
   19fac:	e7e1      	b.n	19f72 <end_thread+0x22>
   19fae:	4770      	bx	lr
   19fb0:	200040a4 	.word	0x200040a4

00019fb4 <z_sched_init>:
{
   19fb4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   19fb6:	4802      	ldr	r0, [pc, #8]	; (19fc0 <z_sched_init+0xc>)
   19fb8:	f00a fd81 	bl	24abe <init_ready_q>
}
   19fbc:	bd08      	pop	{r3, pc}
   19fbe:	bf00      	nop
   19fc0:	200040a0 	.word	0x200040a0

00019fc4 <z_impl_k_yield>:
{
   19fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   19fc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   19fca:	f3ef 8611 	mrs	r6, BASEPRI
   19fce:	f383 8812 	msr	BASEPRI_MAX, r3
   19fd2:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   19fd6:	4c1d      	ldr	r4, [pc, #116]	; (1a04c <z_impl_k_yield+0x88>)
   19fd8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19fda:	7b4b      	ldrb	r3, [r1, #13]
   19fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19fe0:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   19fe2:	f104 0720 	add.w	r7, r4, #32
   19fe6:	4638      	mov	r0, r7
   19fe8:	f00a fc46 	bl	24878 <z_priq_dumb_remove>
	queue_thread(_current);
   19fec:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   19fee:	7b6b      	ldrb	r3, [r5, #13]
   19ff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19ff4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   19ff6:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19ff8:	42bc      	cmp	r4, r7
   19ffa:	d108      	bne.n	1a00e <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19ffc:	2400      	movs	r4, #0
   19ffe:	e006      	b.n	1a00e <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
   1a000:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1a002:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1a004:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1a006:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1a008:	6065      	str	r5, [r4, #4]
}
   1a00a:	e017      	b.n	1a03c <z_impl_k_yield+0x78>
   1a00c:	2400      	movs	r4, #0
   1a00e:	b16c      	cbz	r4, 1a02c <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a010:	4621      	mov	r1, r4
   1a012:	4628      	mov	r0, r5
   1a014:	f00a fbf2 	bl	247fc <z_sched_prio_cmp>
   1a018:	2800      	cmp	r0, #0
   1a01a:	dcf1      	bgt.n	1a000 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a01c:	2c00      	cmp	r4, #0
   1a01e:	d0f6      	beq.n	1a00e <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
   1a020:	4b0a      	ldr	r3, [pc, #40]	; (1a04c <z_impl_k_yield+0x88>)
   1a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a024:	429c      	cmp	r4, r3
   1a026:	d0f1      	beq.n	1a00c <z_impl_k_yield+0x48>
   1a028:	6824      	ldr	r4, [r4, #0]
   1a02a:	e7f0      	b.n	1a00e <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
   1a02c:	4b07      	ldr	r3, [pc, #28]	; (1a04c <z_impl_k_yield+0x88>)
   1a02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1a030:	f103 0120 	add.w	r1, r3, #32
   1a034:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1a036:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1a038:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1a03a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1a03c:	2001      	movs	r0, #1
   1a03e:	f7ff fd95 	bl	19b6c <update_cache>
   1a042:	4630      	mov	r0, r6
   1a044:	f7f8 ffbc 	bl	12fc0 <arch_swap>
}
   1a048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a04a:	bf00      	nop
   1a04c:	20004084 	.word	0x20004084

0001a050 <z_tick_sleep>:
{
   1a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   1a054:	ea50 0301 	orrs.w	r3, r0, r1
   1a058:	d038      	beq.n	1a0cc <z_tick_sleep+0x7c>
   1a05a:	4604      	mov	r4, r0
   1a05c:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   1a05e:	f06f 0301 	mvn.w	r3, #1
   1a062:	1a1b      	subs	r3, r3, r0
   1a064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a068:	eb62 0201 	sbc.w	r2, r2, r1
   1a06c:	2b01      	cmp	r3, #1
   1a06e:	f172 0200 	sbcs.w	r2, r2, #0
   1a072:	db2f      	blt.n	1a0d4 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1a074:	f06f 0501 	mvn.w	r5, #1
   1a078:	1a2d      	subs	r5, r5, r0
   1a07a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a07e:	f3ef 8811 	mrs	r8, BASEPRI
   1a082:	f383 8812 	msr	BASEPRI_MAX, r3
   1a086:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1a08a:	4f14      	ldr	r7, [pc, #80]	; (1a0dc <z_tick_sleep+0x8c>)
   1a08c:	68b8      	ldr	r0, [r7, #8]
   1a08e:	4b14      	ldr	r3, [pc, #80]	; (1a0e0 <z_tick_sleep+0x90>)
   1a090:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1a092:	f7ff fe6d 	bl	19d70 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1a096:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a098:	4622      	mov	r2, r4
   1a09a:	4633      	mov	r3, r6
   1a09c:	4911      	ldr	r1, [pc, #68]	; (1a0e4 <z_tick_sleep+0x94>)
   1a09e:	3018      	adds	r0, #24
   1a0a0:	f000 f8c2 	bl	1a228 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1a0a4:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a0a6:	7b53      	ldrb	r3, [r2, #13]
   1a0a8:	f043 0310 	orr.w	r3, r3, #16
   1a0ac:	7353      	strb	r3, [r2, #13]
   1a0ae:	4640      	mov	r0, r8
   1a0b0:	f7f8 ff86 	bl	12fc0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1a0b4:	f00a fdb4 	bl	24c20 <sys_clock_tick_get_32>
   1a0b8:	1a28      	subs	r0, r5, r0
   1a0ba:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1a0be:	2801      	cmp	r0, #1
   1a0c0:	f173 0300 	sbcs.w	r3, r3, #0
   1a0c4:	da00      	bge.n	1a0c8 <z_tick_sleep+0x78>
	return 0;
   1a0c6:	2000      	movs	r0, #0
}
   1a0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1a0cc:	f7ff ff7a 	bl	19fc4 <z_impl_k_yield>
		return 0;
   1a0d0:	2000      	movs	r0, #0
   1a0d2:	e7f9      	b.n	1a0c8 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1a0d4:	f00a fda4 	bl	24c20 <sys_clock_tick_get_32>
   1a0d8:	1905      	adds	r5, r0, r4
   1a0da:	e7ce      	b.n	1a07a <z_tick_sleep+0x2a>
   1a0dc:	20004084 	.word	0x20004084
   1a0e0:	200040bc 	.word	0x200040bc
   1a0e4:	0002497b 	.word	0x0002497b

0001a0e8 <z_impl_k_sleep>:
{
   1a0e8:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a0ea:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1a0ee:	bf08      	it	eq
   1a0f0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1a0f4:	d002      	beq.n	1a0fc <z_impl_k_sleep+0x14>
	ticks = z_tick_sleep(ticks);
   1a0f6:	f7ff ffab 	bl	1a050 <z_tick_sleep>
}
   1a0fa:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   1a0fc:	4b03      	ldr	r3, [pc, #12]	; (1a10c <z_impl_k_sleep+0x24>)
   1a0fe:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1a100:	f7ff fecc 	bl	19e9c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1a104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a108:	e7f7      	b.n	1a0fa <z_impl_k_sleep+0x12>
   1a10a:	bf00      	nop
   1a10c:	20004084 	.word	0x20004084

0001a110 <z_impl_z_current_get>:
}
   1a110:	4b01      	ldr	r3, [pc, #4]	; (1a118 <z_impl_z_current_get+0x8>)
   1a112:	6898      	ldr	r0, [r3, #8]
   1a114:	4770      	bx	lr
   1a116:	bf00      	nop
   1a118:	20004084 	.word	0x20004084

0001a11c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1a11c:	b570      	push	{r4, r5, r6, lr}
   1a11e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a122:	f3ef 8511 	mrs	r5, BASEPRI
   1a126:	f383 8812 	msr	BASEPRI_MAX, r3
   1a12a:	f3bf 8f6f 	isb	sy
   1a12e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1a130:	7b03      	ldrb	r3, [r0, #12]
   1a132:	f013 0f01 	tst.w	r3, #1
   1a136:	d109      	bne.n	1a14c <z_thread_abort+0x30>
   1a138:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1a13a:	7b43      	ldrb	r3, [r0, #13]
   1a13c:	f013 0f08 	tst.w	r3, #8
   1a140:	d00f      	beq.n	1a162 <z_thread_abort+0x46>
	__asm__ volatile(
   1a142:	f385 8811 	msr	BASEPRI, r5
   1a146:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   1a14a:	e009      	b.n	1a160 <z_thread_abort+0x44>
   1a14c:	f385 8811 	msr	BASEPRI, r5
   1a150:	f3bf 8f6f 	isb	sy
		k_panic();
   1a154:	4040      	eors	r0, r0
   1a156:	f380 8811 	msr	BASEPRI, r0
   1a15a:	f04f 0004 	mov.w	r0, #4
   1a15e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1a160:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
   1a162:	f7ff fef5 	bl	19f50 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1a166:	4b08      	ldr	r3, [pc, #32]	; (1a188 <z_thread_abort+0x6c>)
   1a168:	689b      	ldr	r3, [r3, #8]
   1a16a:	42a3      	cmp	r3, r4
   1a16c:	d004      	beq.n	1a178 <z_thread_abort+0x5c>
   1a16e:	f386 8811 	msr	BASEPRI, r6
   1a172:	f3bf 8f6f 	isb	sy
   1a176:	e7f3      	b.n	1a160 <z_thread_abort+0x44>
   1a178:	f3ef 8305 	mrs	r3, IPSR
   1a17c:	2b00      	cmp	r3, #0
   1a17e:	d1f6      	bne.n	1a16e <z_thread_abort+0x52>
   1a180:	4628      	mov	r0, r5
   1a182:	f7f8 ff1d 	bl	12fc0 <arch_swap>
	return ret;
   1a186:	e7f2      	b.n	1a16e <z_thread_abort+0x52>
   1a188:	20004084 	.word	0x20004084

0001a18c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1a18c:	b510      	push	{r4, lr}
   1a18e:	b082      	sub	sp, #8
   1a190:	9c06      	ldr	r4, [sp, #24]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a192:	ed9d 7b04 	vldr	d7, [sp, #16]
   1a196:	ed8d 7b00 	vstr	d7, [sp]
   1a19a:	f7ff fe05 	bl	19da8 <z_pend_curr>

	if (data != NULL) {
   1a19e:	b11c      	cbz	r4, 1a1a8 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1a1a0:	4b02      	ldr	r3, [pc, #8]	; (1a1ac <z_sched_wait+0x20>)
   1a1a2:	689b      	ldr	r3, [r3, #8]
   1a1a4:	695b      	ldr	r3, [r3, #20]
   1a1a6:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1a1a8:	b002      	add	sp, #8
   1a1aa:	bd10      	pop	{r4, pc}
   1a1ac:	20004084 	.word	0x20004084

0001a1b0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1a1b0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1a1b2:	4806      	ldr	r0, [pc, #24]	; (1a1cc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1a1b4:	4a06      	ldr	r2, [pc, #24]	; (1a1d0 <z_data_copy+0x20>)
   1a1b6:	1a12      	subs	r2, r2, r0
   1a1b8:	4906      	ldr	r1, [pc, #24]	; (1a1d4 <z_data_copy+0x24>)
   1a1ba:	f00a f853 	bl	24264 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1a1be:	4a06      	ldr	r2, [pc, #24]	; (1a1d8 <z_data_copy+0x28>)
   1a1c0:	4906      	ldr	r1, [pc, #24]	; (1a1dc <z_data_copy+0x2c>)
   1a1c2:	4807      	ldr	r0, [pc, #28]	; (1a1e0 <z_data_copy+0x30>)
   1a1c4:	f00a f84e 	bl	24264 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1a1c8:	bd08      	pop	{r3, pc}
   1a1ca:	bf00      	nop
   1a1cc:	20000000 	.word	0x20000000
   1a1d0:	20000a3c 	.word	0x20000a3c
   1a1d4:	00027098 	.word	0x00027098
   1a1d8:	00000000 	.word	0x00000000
   1a1dc:	00027098 	.word	0x00027098
   1a1e0:	20000000 	.word	0x20000000

0001a1e4 <first>:
	return list->head == list;
   1a1e4:	4b03      	ldr	r3, [pc, #12]	; (1a1f4 <first+0x10>)
   1a1e6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a1e8:	4298      	cmp	r0, r3
   1a1ea:	d000      	beq.n	1a1ee <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1a1ec:	4770      	bx	lr
   1a1ee:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1a1f0:	e7fc      	b.n	1a1ec <first+0x8>
   1a1f2:	bf00      	nop
   1a1f4:	200005a8 	.word	0x200005a8

0001a1f8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a1f8:	b130      	cbz	r0, 1a208 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1a1fa:	4a04      	ldr	r2, [pc, #16]	; (1a20c <next+0x14>)
   1a1fc:	6852      	ldr	r2, [r2, #4]
   1a1fe:	4290      	cmp	r0, r2
   1a200:	d001      	beq.n	1a206 <next+0xe>
   1a202:	6800      	ldr	r0, [r0, #0]
   1a204:	4770      	bx	lr
   1a206:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1a208:	4770      	bx	lr
   1a20a:	bf00      	nop
   1a20c:	200005a8 	.word	0x200005a8

0001a210 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1a210:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1a212:	4b04      	ldr	r3, [pc, #16]	; (1a224 <elapsed+0x14>)
   1a214:	681b      	ldr	r3, [r3, #0]
   1a216:	b10b      	cbz	r3, 1a21c <elapsed+0xc>
   1a218:	2000      	movs	r0, #0
}
   1a21a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1a21c:	f7fc fb84 	bl	16928 <sys_clock_elapsed>
   1a220:	e7fb      	b.n	1a21a <elapsed+0xa>
   1a222:	bf00      	nop
   1a224:	200040cc 	.word	0x200040cc

0001a228 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a22c:	bf08      	it	eq
   1a22e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1a232:	d074      	beq.n	1a31e <z_add_timeout+0xf6>
{
   1a234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a238:	4604      	mov	r4, r0
   1a23a:	4692      	mov	sl, r2
   1a23c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1a23e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1a240:	2300      	movs	r3, #0
	__asm__ volatile(
   1a242:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a246:	f3ef 8711 	mrs	r7, BASEPRI
   1a24a:	f382 8812 	msr	BASEPRI_MAX, r2
   1a24e:	f3bf 8f6f 	isb	sy
   1a252:	e026      	b.n	1a2a2 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1a254:	f11a 0801 	adds.w	r8, sl, #1
   1a258:	f145 0900 	adc.w	r9, r5, #0
   1a25c:	f7ff ffd8 	bl	1a210 <elapsed>
   1a260:	eb18 0300 	adds.w	r3, r8, r0
   1a264:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   1a268:	6123      	str	r3, [r4, #16]
   1a26a:	6160      	str	r0, [r4, #20]
   1a26c:	e03b      	b.n	1a2e6 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1a26e:	1a52      	subs	r2, r2, r1
   1a270:	eb66 0303 	sbc.w	r3, r6, r3
   1a274:	6102      	str	r2, [r0, #16]
   1a276:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   1a278:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   1a27a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1a27c:	6020      	str	r0, [r4, #0]
	prev->next = node;
   1a27e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1a280:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1a282:	e005      	b.n	1a290 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
   1a284:	4b26      	ldr	r3, [pc, #152]	; (1a320 <z_add_timeout+0xf8>)
   1a286:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1a288:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   1a28a:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1a28c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1a28e:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1a290:	f7ff ffa8 	bl	1a1e4 <first>
   1a294:	4284      	cmp	r4, r0
   1a296:	d03a      	beq.n	1a30e <z_add_timeout+0xe6>
	__asm__ volatile(
   1a298:	f387 8811 	msr	BASEPRI, r7
   1a29c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1a2a0:	2301      	movs	r3, #1
   1a2a2:	2b00      	cmp	r3, #0
   1a2a4:	d139      	bne.n	1a31a <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1a2a6:	4653      	mov	r3, sl
   1a2a8:	f06f 0101 	mvn.w	r1, #1
   1a2ac:	ebb1 010a 	subs.w	r1, r1, sl
   1a2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a2b4:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1a2b8:	2a00      	cmp	r2, #0
   1a2ba:	dbcb      	blt.n	1a254 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1a2bc:	4a19      	ldr	r2, [pc, #100]	; (1a324 <z_add_timeout+0xfc>)
   1a2be:	6811      	ldr	r1, [r2, #0]
   1a2c0:	6852      	ldr	r2, [r2, #4]
   1a2c2:	185b      	adds	r3, r3, r1
   1a2c4:	eb42 0205 	adc.w	r2, r2, r5
   1a2c8:	f06f 0101 	mvn.w	r1, #1
   1a2cc:	1ac9      	subs	r1, r1, r3
   1a2ce:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   1a2d2:	4608      	mov	r0, r1
   1a2d4:	461a      	mov	r2, r3
   1a2d6:	2901      	cmp	r1, #1
   1a2d8:	f173 0300 	sbcs.w	r3, r3, #0
   1a2dc:	da01      	bge.n	1a2e2 <z_add_timeout+0xba>
   1a2de:	2001      	movs	r0, #1
   1a2e0:	2200      	movs	r2, #0
   1a2e2:	6120      	str	r0, [r4, #16]
   1a2e4:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1a2e6:	f7ff ff7d 	bl	1a1e4 <first>
   1a2ea:	2800      	cmp	r0, #0
   1a2ec:	d0ca      	beq.n	1a284 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
   1a2ee:	6902      	ldr	r2, [r0, #16]
   1a2f0:	6946      	ldr	r6, [r0, #20]
   1a2f2:	6921      	ldr	r1, [r4, #16]
   1a2f4:	6963      	ldr	r3, [r4, #20]
   1a2f6:	4291      	cmp	r1, r2
   1a2f8:	eb73 0e06 	sbcs.w	lr, r3, r6
   1a2fc:	dbb7      	blt.n	1a26e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   1a2fe:	1a89      	subs	r1, r1, r2
   1a300:	eb63 0306 	sbc.w	r3, r3, r6
   1a304:	6121      	str	r1, [r4, #16]
   1a306:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1a308:	f7ff ff76 	bl	1a1f8 <next>
   1a30c:	e7ed      	b.n	1a2ea <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
   1a30e:	f00a fc35 	bl	24b7c <next_timeout>
   1a312:	2100      	movs	r1, #0
   1a314:	f7fc fac8 	bl	168a8 <sys_clock_set_timeout>
   1a318:	e7be      	b.n	1a298 <z_add_timeout+0x70>
		}
	}
}
   1a31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a31e:	4770      	bx	lr
   1a320:	200005a8 	.word	0x200005a8
   1a324:	20002170 	.word	0x20002170

0001a328 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   1a328:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1a32a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a32e:	f3ef 8611 	mrs	r6, BASEPRI
   1a332:	f383 8812 	msr	BASEPRI_MAX, r3
   1a336:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1a33a:	4b2b      	ldr	r3, [pc, #172]	; (1a3e8 <sys_clock_announce+0xc0>)
   1a33c:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
   1a33e:	f7ff ff51 	bl	1a1e4 <first>
   1a342:	4604      	mov	r4, r0

	for (t = first();
   1a344:	e024      	b.n	1a390 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   1a346:	4a29      	ldr	r2, [pc, #164]	; (1a3ec <sys_clock_announce+0xc4>)
   1a348:	6813      	ldr	r3, [r2, #0]
   1a34a:	6851      	ldr	r1, [r2, #4]
   1a34c:	195b      	adds	r3, r3, r5
   1a34e:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   1a352:	6013      	str	r3, [r2, #0]
   1a354:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   1a356:	2200      	movs	r2, #0
   1a358:	2300      	movs	r3, #0
   1a35a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1a35e:	4620      	mov	r0, r4
   1a360:	f00a fbf5 	bl	24b4e <remove_timeout>
	__asm__ volatile(
   1a364:	f386 8811 	msr	BASEPRI, r6
   1a368:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1a36c:	68a3      	ldr	r3, [r4, #8]
   1a36e:	4620      	mov	r0, r4
   1a370:	4798      	blx	r3
	__asm__ volatile(
   1a372:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a376:	f3ef 8611 	mrs	r6, BASEPRI
   1a37a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a37e:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   1a382:	4a19      	ldr	r2, [pc, #100]	; (1a3e8 <sys_clock_announce+0xc0>)
   1a384:	6813      	ldr	r3, [r2, #0]
   1a386:	1b5b      	subs	r3, r3, r5
   1a388:	6013      	str	r3, [r2, #0]
	     t = first()) {
   1a38a:	f7ff ff2b 	bl	1a1e4 <first>
   1a38e:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
   1a390:	b13c      	cbz	r4, 1a3a2 <sys_clock_announce+0x7a>
   1a392:	6925      	ldr	r5, [r4, #16]
   1a394:	6961      	ldr	r1, [r4, #20]
   1a396:	4b14      	ldr	r3, [pc, #80]	; (1a3e8 <sys_clock_announce+0xc0>)
   1a398:	681a      	ldr	r2, [r3, #0]
   1a39a:	17d3      	asrs	r3, r2, #31
   1a39c:	42aa      	cmp	r2, r5
   1a39e:	418b      	sbcs	r3, r1
   1a3a0:	dad1      	bge.n	1a346 <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
   1a3a2:	b144      	cbz	r4, 1a3b6 <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
   1a3a4:	6923      	ldr	r3, [r4, #16]
   1a3a6:	6962      	ldr	r2, [r4, #20]
   1a3a8:	490f      	ldr	r1, [pc, #60]	; (1a3e8 <sys_clock_announce+0xc0>)
   1a3aa:	6809      	ldr	r1, [r1, #0]
   1a3ac:	1a5b      	subs	r3, r3, r1
   1a3ae:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   1a3b2:	6123      	str	r3, [r4, #16]
   1a3b4:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   1a3b6:	4a0d      	ldr	r2, [pc, #52]	; (1a3ec <sys_clock_announce+0xc4>)
   1a3b8:	4d0b      	ldr	r5, [pc, #44]	; (1a3e8 <sys_clock_announce+0xc0>)
   1a3ba:	6828      	ldr	r0, [r5, #0]
   1a3bc:	6813      	ldr	r3, [r2, #0]
   1a3be:	6851      	ldr	r1, [r2, #4]
   1a3c0:	181b      	adds	r3, r3, r0
   1a3c2:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   1a3c6:	6013      	str	r3, [r2, #0]
   1a3c8:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   1a3ca:	2400      	movs	r4, #0
   1a3cc:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1a3ce:	f00a fbd5 	bl	24b7c <next_timeout>
   1a3d2:	4621      	mov	r1, r4
   1a3d4:	f7fc fa68 	bl	168a8 <sys_clock_set_timeout>
	__asm__ volatile(
   1a3d8:	f386 8811 	msr	BASEPRI, r6
   1a3dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
   1a3e0:	f7ff fc32 	bl	19c48 <z_time_slice>
#endif
}
   1a3e4:	bd70      	pop	{r4, r5, r6, pc}
   1a3e6:	bf00      	nop
   1a3e8:	200040cc 	.word	0x200040cc
   1a3ec:	20002170 	.word	0x20002170

0001a3f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1a3f0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1a3f2:	2200      	movs	r2, #0
	__asm__ volatile(
   1a3f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a3f8:	f3ef 8411 	mrs	r4, BASEPRI
   1a3fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a400:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1a404:	4613      	mov	r3, r2
   1a406:	4611      	mov	r1, r2
   1a408:	e00c      	b.n	1a424 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   1a40a:	f7ff ff01 	bl	1a210 <elapsed>
   1a40e:	4a07      	ldr	r2, [pc, #28]	; (1a42c <sys_clock_tick_get+0x3c>)
   1a410:	6813      	ldr	r3, [r2, #0]
   1a412:	6851      	ldr	r1, [r2, #4]
   1a414:	18c3      	adds	r3, r0, r3
   1a416:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   1a41a:	f384 8811 	msr	BASEPRI, r4
   1a41e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1a422:	2201      	movs	r2, #1
   1a424:	2a00      	cmp	r2, #0
   1a426:	d0f0      	beq.n	1a40a <sys_clock_tick_get+0x1a>
	}
	return t;
}
   1a428:	4618      	mov	r0, r3
   1a42a:	bd10      	pop	{r4, pc}
   1a42c:	20002170 	.word	0x20002170

0001a430 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1a432:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a436:	f3ef 8311 	mrs	r3, BASEPRI
   1a43a:	f382 8812 	msr	BASEPRI_MAX, r2
   1a43e:	f3bf 8f6f 	isb	sy
   1a442:	461a      	mov	r2, r3
   1a444:	461d      	mov	r5, r3
	return node->next != NULL;
   1a446:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   1a448:	b123      	cbz	r3, 1a454 <z_timer_expiration_handler+0x24>
	__asm__ volatile(
   1a44a:	f382 8811 	msr	BASEPRI, r2
   1a44e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1a452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a454:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1a456:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1a458:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1a45a:	ea52 0103 	orrs.w	r1, r2, r3
   1a45e:	d005      	beq.n	1a46c <z_timer_expiration_handler+0x3c>
   1a460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a464:	bf08      	it	eq
   1a466:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1a46a:	d129      	bne.n	1a4c0 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
   1a46c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a46e:	3301      	adds	r3, #1
   1a470:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   1a472:	6a23      	ldr	r3, [r4, #32]
   1a474:	b17b      	cbz	r3, 1a496 <z_timer_expiration_handler+0x66>
   1a476:	f385 8811 	msr	BASEPRI, r5
   1a47a:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   1a47e:	6a23      	ldr	r3, [r4, #32]
   1a480:	4620      	mov	r0, r4
   1a482:	4798      	blx	r3
	__asm__ volatile(
   1a484:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a488:	f3ef 8311 	mrs	r3, BASEPRI
   1a48c:	f382 8812 	msr	BASEPRI_MAX, r2
   1a490:	f3bf 8f6f 	isb	sy
   1a494:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1a496:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1a49a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a49c:	42a3      	cmp	r3, r4
   1a49e:	d03f      	beq.n	1a520 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
   1a4a0:	2c00      	cmp	r4, #0
   1a4a2:	d03d      	beq.n	1a520 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
   1a4a4:	4620      	mov	r0, r4
   1a4a6:	f00a f9b3 	bl	24810 <z_unpend_thread_no_timeout>
   1a4aa:	2300      	movs	r3, #0
   1a4ac:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   1a4b0:	f385 8811 	msr	BASEPRI, r5
   1a4b4:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1a4b8:	4620      	mov	r0, r4
   1a4ba:	f00a fa18 	bl	248ee <z_ready_thread>
   1a4be:	e7c8      	b.n	1a452 <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
   1a4c0:	4616      	mov	r6, r2
   1a4c2:	461f      	mov	r7, r3
   1a4c4:	2a01      	cmp	r2, #1
   1a4c6:	f173 0300 	sbcs.w	r3, r3, #0
   1a4ca:	da01      	bge.n	1a4d0 <z_timer_expiration_handler+0xa0>
   1a4cc:	2601      	movs	r6, #1
   1a4ce:	2700      	movs	r7, #0
   1a4d0:	3e01      	subs	r6, #1
   1a4d2:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
   1a4d6:	f00a fba7 	bl	24c28 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   1a4da:	3001      	adds	r0, #1
   1a4dc:	f141 0100 	adc.w	r1, r1, #0
   1a4e0:	1980      	adds	r0, r0, r6
   1a4e2:	eb47 0101 	adc.w	r1, r7, r1
   1a4e6:	2801      	cmp	r0, #1
   1a4e8:	f171 0100 	sbcs.w	r1, r1, #0
   1a4ec:	da08      	bge.n	1a500 <z_timer_expiration_handler+0xd0>
   1a4ee:	f06f 0201 	mvn.w	r2, #1
   1a4f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a4f6:	490d      	ldr	r1, [pc, #52]	; (1a52c <z_timer_expiration_handler+0xfc>)
   1a4f8:	4620      	mov	r0, r4
   1a4fa:	f7ff fe95 	bl	1a228 <z_add_timeout>
   1a4fe:	e7b5      	b.n	1a46c <z_timer_expiration_handler+0x3c>
   1a500:	f00a fb92 	bl	24c28 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   1a504:	3001      	adds	r0, #1
   1a506:	f141 0100 	adc.w	r1, r1, #0
   1a50a:	1980      	adds	r0, r0, r6
   1a50c:	eb47 0301 	adc.w	r3, r7, r1
   1a510:	f06f 0201 	mvn.w	r2, #1
   1a514:	1a12      	subs	r2, r2, r0
   1a516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a51a:	eb61 0303 	sbc.w	r3, r1, r3
   1a51e:	e7ea      	b.n	1a4f6 <z_timer_expiration_handler+0xc6>
   1a520:	f385 8811 	msr	BASEPRI, r5
   1a524:	f3bf 8f6f 	isb	sy
		return;
   1a528:	e793      	b.n	1a452 <z_timer_expiration_handler+0x22>
   1a52a:	bf00      	nop
   1a52c:	0001a431 	.word	0x0001a431

0001a530 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1a530:	b570      	push	{r4, r5, r6, lr}
   1a532:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1a534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a538:	bf08      	it	eq
   1a53a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1a53e:	d01a      	beq.n	1a576 <z_impl_k_timer_start+0x46>
   1a540:	4606      	mov	r6, r0
   1a542:	4614      	mov	r4, r2
   1a544:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1a546:	f06f 0201 	mvn.w	r2, #1
   1a54a:	1b12      	subs	r2, r2, r4
   1a54c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a550:	eb62 0203 	sbc.w	r2, r2, r3
   1a554:	2a00      	cmp	r2, #0
   1a556:	db0f      	blt.n	1a578 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1a558:	4630      	mov	r0, r6
   1a55a:	f00a fb2c 	bl	24bb6 <z_abort_timeout>
	timer->period = period;
   1a55e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a562:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
   1a566:	2300      	movs	r3, #0
   1a568:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1a56a:	4622      	mov	r2, r4
   1a56c:	462b      	mov	r3, r5
   1a56e:	4907      	ldr	r1, [pc, #28]	; (1a58c <z_impl_k_timer_start+0x5c>)
   1a570:	4630      	mov	r0, r6
   1a572:	f7ff fe59 	bl	1a228 <z_add_timeout>
		     duration);
}
   1a576:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
   1a578:	2c01      	cmp	r4, #1
   1a57a:	f171 0100 	sbcs.w	r1, r1, #0
   1a57e:	da01      	bge.n	1a584 <z_impl_k_timer_start+0x54>
   1a580:	2401      	movs	r4, #1
   1a582:	2500      	movs	r5, #0
   1a584:	3c01      	subs	r4, #1
   1a586:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1a58a:	e7e5      	b.n	1a558 <z_impl_k_timer_start+0x28>
   1a58c:	0001a431 	.word	0x0001a431

0001a590 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1a590:	b538      	push	{r3, r4, r5, lr}
   1a592:	4603      	mov	r3, r0
	__asm__ volatile(
   1a594:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a598:	f3ef 8511 	mrs	r5, BASEPRI
   1a59c:	f382 8812 	msr	BASEPRI_MAX, r2
   1a5a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1a5a4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1a5a6:	2201      	movs	r2, #1
   1a5a8:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1a5aa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a5ac:	4283      	cmp	r3, r0
   1a5ae:	d010      	beq.n	1a5d2 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const prev = node->prev;
   1a5b0:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1a5b2:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1a5b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a5b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a5b8:	2300      	movs	r3, #0
   1a5ba:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1a5bc:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a5be:	2101      	movs	r1, #1
   1a5c0:	f00a fbd5 	bl	24d6e <signal_poll_event>
   1a5c4:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1a5c6:	4629      	mov	r1, r5
   1a5c8:	4805      	ldr	r0, [pc, #20]	; (1a5e0 <z_impl_k_poll_signal_raise+0x50>)
   1a5ca:	f7ff fa9f 	bl	19b0c <z_reschedule>
	return rc;
}
   1a5ce:	4620      	mov	r0, r4
   1a5d0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a5d2:	f385 8811 	msr	BASEPRI, r5
   1a5d6:	f3bf 8f6f 	isb	sy
		return 0;
   1a5da:	2400      	movs	r4, #0
   1a5dc:	e7f7      	b.n	1a5ce <z_impl_k_poll_signal_raise+0x3e>
   1a5de:	bf00      	nop
   1a5e0:	200040d0 	.word	0x200040d0

0001a5e4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1a5e4:	b538      	push	{r3, r4, r5, lr}
   1a5e6:	4604      	mov	r4, r0
   1a5e8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1a5ea:	f009 ff22 	bl	24432 <k_is_in_isr>
   1a5ee:	b948      	cbnz	r0, 1a604 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1a5f0:	4b05      	ldr	r3, [pc, #20]	; (1a608 <z_thread_aligned_alloc+0x24>)
   1a5f2:	689b      	ldr	r3, [r3, #8]
   1a5f4:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1a5f8:	b118      	cbz	r0, 1a602 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1a5fa:	462a      	mov	r2, r5
   1a5fc:	4621      	mov	r1, r4
   1a5fe:	f7f3 f817 	bl	d630 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1a602:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   1a604:	2000      	movs	r0, #0
	return ret;
   1a606:	e7fc      	b.n	1a602 <z_thread_aligned_alloc+0x1e>
   1a608:	20004084 	.word	0x20004084

0001a60c <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   1a60c:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1a60e:	4802      	ldr	r0, [pc, #8]	; (1a618 <boot_banner+0xc>)
   1a610:	f005 fb6e 	bl	1fcf0 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   1a614:	bd08      	pop	{r3, pc}
   1a616:	bf00      	nop
   1a618:	00026b50 	.word	0x00026b50

0001a61c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   1a61c:	b510      	push	{r4, lr}
   1a61e:	b084      	sub	sp, #16
	struct k_work_queue_config cfg = {
   1a620:	4b08      	ldr	r3, [pc, #32]	; (1a644 <k_sys_work_q_init+0x28>)
   1a622:	9302      	str	r3, [sp, #8]
   1a624:	2400      	movs	r4, #0
   1a626:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1a62a:	ab02      	add	r3, sp, #8
   1a62c:	9300      	str	r3, [sp, #0]
   1a62e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a632:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a636:	4904      	ldr	r1, [pc, #16]	; (1a648 <k_sys_work_q_init+0x2c>)
   1a638:	4804      	ldr	r0, [pc, #16]	; (1a64c <k_sys_work_q_init+0x30>)
   1a63a:	f7f2 ffb5 	bl	d5a8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1a63e:	4620      	mov	r0, r4
   1a640:	b004      	add	sp, #16
   1a642:	bd10      	pop	{r4, pc}
   1a644:	00026b80 	.word	0x00026b80
   1a648:	20008500 	.word	0x20008500
   1a64c:	20002178 	.word	0x20002178

0001a650 <sqrtf>:
   1a650:	b508      	push	{r3, lr}
   1a652:	ed2d 8b02 	vpush	{d8}
   1a656:	eeb0 8a40 	vmov.f32	s16, s0
   1a65a:	f00a fbc3 	bl	24de4 <__ieee754_sqrtf>
   1a65e:	4b0d      	ldr	r3, [pc, #52]	; (1a694 <sqrtf+0x44>)
   1a660:	f993 3000 	ldrsb.w	r3, [r3]
   1a664:	3301      	adds	r3, #1
   1a666:	d011      	beq.n	1a68c <sqrtf+0x3c>
   1a668:	eeb4 8a48 	vcmp.f32	s16, s16
   1a66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a670:	d60c      	bvs.n	1a68c <sqrtf+0x3c>
   1a672:	eddf 8a09 	vldr	s17, [pc, #36]	; 1a698 <sqrtf+0x48>
   1a676:	eeb4 8ae8 	vcmpe.f32	s16, s17
   1a67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a67e:	d505      	bpl.n	1a68c <sqrtf+0x3c>
   1a680:	f007 fba2 	bl	21dc8 <__errno>
   1a684:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   1a688:	2321      	movs	r3, #33	; 0x21
   1a68a:	6003      	str	r3, [r0, #0]
   1a68c:	ecbd 8b02 	vpop	{d8}
   1a690:	bd08      	pop	{r3, pc}
   1a692:	bf00      	nop
   1a694:	200007f1 	.word	0x200007f1
   1a698:	00000000 	.word	0x00000000

0001a69c <nanf>:
   1a69c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1a6a4 <nanf+0x8>
   1a6a0:	4770      	bx	lr
   1a6a2:	bf00      	nop
   1a6a4:	7fc00000 	.word	0x7fc00000

0001a6a8 <malloc>:
   1a6a8:	4b02      	ldr	r3, [pc, #8]	; (1a6b4 <malloc+0xc>)
   1a6aa:	4601      	mov	r1, r0
   1a6ac:	6818      	ldr	r0, [r3, #0]
   1a6ae:	f000 b84d 	b.w	1a74c <_malloc_r>
   1a6b2:	bf00      	nop
   1a6b4:	200005b0 	.word	0x200005b0

0001a6b8 <_free_r>:
   1a6b8:	b538      	push	{r3, r4, r5, lr}
   1a6ba:	4605      	mov	r5, r0
   1a6bc:	2900      	cmp	r1, #0
   1a6be:	d041      	beq.n	1a744 <_free_r+0x8c>
   1a6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1a6c4:	1f0c      	subs	r4, r1, #4
   1a6c6:	2b00      	cmp	r3, #0
   1a6c8:	bfb8      	it	lt
   1a6ca:	18e4      	addlt	r4, r4, r3
   1a6cc:	f001 f8ee 	bl	1b8ac <__malloc_lock>
   1a6d0:	4a1d      	ldr	r2, [pc, #116]	; (1a748 <_free_r+0x90>)
   1a6d2:	6813      	ldr	r3, [r2, #0]
   1a6d4:	b933      	cbnz	r3, 1a6e4 <_free_r+0x2c>
   1a6d6:	6063      	str	r3, [r4, #4]
   1a6d8:	6014      	str	r4, [r2, #0]
   1a6da:	4628      	mov	r0, r5
   1a6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a6e0:	f001 b8ea 	b.w	1b8b8 <__malloc_unlock>
   1a6e4:	42a3      	cmp	r3, r4
   1a6e6:	d908      	bls.n	1a6fa <_free_r+0x42>
   1a6e8:	6820      	ldr	r0, [r4, #0]
   1a6ea:	1821      	adds	r1, r4, r0
   1a6ec:	428b      	cmp	r3, r1
   1a6ee:	bf01      	itttt	eq
   1a6f0:	6819      	ldreq	r1, [r3, #0]
   1a6f2:	685b      	ldreq	r3, [r3, #4]
   1a6f4:	1809      	addeq	r1, r1, r0
   1a6f6:	6021      	streq	r1, [r4, #0]
   1a6f8:	e7ed      	b.n	1a6d6 <_free_r+0x1e>
   1a6fa:	461a      	mov	r2, r3
   1a6fc:	685b      	ldr	r3, [r3, #4]
   1a6fe:	b10b      	cbz	r3, 1a704 <_free_r+0x4c>
   1a700:	42a3      	cmp	r3, r4
   1a702:	d9fa      	bls.n	1a6fa <_free_r+0x42>
   1a704:	6811      	ldr	r1, [r2, #0]
   1a706:	1850      	adds	r0, r2, r1
   1a708:	42a0      	cmp	r0, r4
   1a70a:	d10b      	bne.n	1a724 <_free_r+0x6c>
   1a70c:	6820      	ldr	r0, [r4, #0]
   1a70e:	4401      	add	r1, r0
   1a710:	1850      	adds	r0, r2, r1
   1a712:	4283      	cmp	r3, r0
   1a714:	6011      	str	r1, [r2, #0]
   1a716:	d1e0      	bne.n	1a6da <_free_r+0x22>
   1a718:	6818      	ldr	r0, [r3, #0]
   1a71a:	685b      	ldr	r3, [r3, #4]
   1a71c:	6053      	str	r3, [r2, #4]
   1a71e:	4408      	add	r0, r1
   1a720:	6010      	str	r0, [r2, #0]
   1a722:	e7da      	b.n	1a6da <_free_r+0x22>
   1a724:	d902      	bls.n	1a72c <_free_r+0x74>
   1a726:	230c      	movs	r3, #12
   1a728:	602b      	str	r3, [r5, #0]
   1a72a:	e7d6      	b.n	1a6da <_free_r+0x22>
   1a72c:	6820      	ldr	r0, [r4, #0]
   1a72e:	1821      	adds	r1, r4, r0
   1a730:	428b      	cmp	r3, r1
   1a732:	bf04      	itt	eq
   1a734:	6819      	ldreq	r1, [r3, #0]
   1a736:	685b      	ldreq	r3, [r3, #4]
   1a738:	6063      	str	r3, [r4, #4]
   1a73a:	bf04      	itt	eq
   1a73c:	1809      	addeq	r1, r1, r0
   1a73e:	6021      	streq	r1, [r4, #0]
   1a740:	6054      	str	r4, [r2, #4]
   1a742:	e7ca      	b.n	1a6da <_free_r+0x22>
   1a744:	bd38      	pop	{r3, r4, r5, pc}
   1a746:	bf00      	nop
   1a748:	200040d4 	.word	0x200040d4

0001a74c <_malloc_r>:
   1a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a74e:	1ccd      	adds	r5, r1, #3
   1a750:	f025 0503 	bic.w	r5, r5, #3
   1a754:	3508      	adds	r5, #8
   1a756:	2d0c      	cmp	r5, #12
   1a758:	bf38      	it	cc
   1a75a:	250c      	movcc	r5, #12
   1a75c:	2d00      	cmp	r5, #0
   1a75e:	4606      	mov	r6, r0
   1a760:	db01      	blt.n	1a766 <_malloc_r+0x1a>
   1a762:	42a9      	cmp	r1, r5
   1a764:	d903      	bls.n	1a76e <_malloc_r+0x22>
   1a766:	230c      	movs	r3, #12
   1a768:	6033      	str	r3, [r6, #0]
   1a76a:	2000      	movs	r0, #0
   1a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a76e:	f001 f89d 	bl	1b8ac <__malloc_lock>
   1a772:	4921      	ldr	r1, [pc, #132]	; (1a7f8 <_malloc_r+0xac>)
   1a774:	680a      	ldr	r2, [r1, #0]
   1a776:	4614      	mov	r4, r2
   1a778:	b99c      	cbnz	r4, 1a7a2 <_malloc_r+0x56>
   1a77a:	4f20      	ldr	r7, [pc, #128]	; (1a7fc <_malloc_r+0xb0>)
   1a77c:	683b      	ldr	r3, [r7, #0]
   1a77e:	b923      	cbnz	r3, 1a78a <_malloc_r+0x3e>
   1a780:	4621      	mov	r1, r4
   1a782:	4630      	mov	r0, r6
   1a784:	f000 fdaa 	bl	1b2dc <_sbrk_r>
   1a788:	6038      	str	r0, [r7, #0]
   1a78a:	4629      	mov	r1, r5
   1a78c:	4630      	mov	r0, r6
   1a78e:	f000 fda5 	bl	1b2dc <_sbrk_r>
   1a792:	1c43      	adds	r3, r0, #1
   1a794:	d123      	bne.n	1a7de <_malloc_r+0x92>
   1a796:	230c      	movs	r3, #12
   1a798:	6033      	str	r3, [r6, #0]
   1a79a:	4630      	mov	r0, r6
   1a79c:	f001 f88c 	bl	1b8b8 <__malloc_unlock>
   1a7a0:	e7e3      	b.n	1a76a <_malloc_r+0x1e>
   1a7a2:	6823      	ldr	r3, [r4, #0]
   1a7a4:	1b5b      	subs	r3, r3, r5
   1a7a6:	d417      	bmi.n	1a7d8 <_malloc_r+0x8c>
   1a7a8:	2b0b      	cmp	r3, #11
   1a7aa:	d903      	bls.n	1a7b4 <_malloc_r+0x68>
   1a7ac:	6023      	str	r3, [r4, #0]
   1a7ae:	441c      	add	r4, r3
   1a7b0:	6025      	str	r5, [r4, #0]
   1a7b2:	e004      	b.n	1a7be <_malloc_r+0x72>
   1a7b4:	6863      	ldr	r3, [r4, #4]
   1a7b6:	42a2      	cmp	r2, r4
   1a7b8:	bf0c      	ite	eq
   1a7ba:	600b      	streq	r3, [r1, #0]
   1a7bc:	6053      	strne	r3, [r2, #4]
   1a7be:	4630      	mov	r0, r6
   1a7c0:	f001 f87a 	bl	1b8b8 <__malloc_unlock>
   1a7c4:	f104 000b 	add.w	r0, r4, #11
   1a7c8:	1d23      	adds	r3, r4, #4
   1a7ca:	f020 0007 	bic.w	r0, r0, #7
   1a7ce:	1ac2      	subs	r2, r0, r3
   1a7d0:	bf1c      	itt	ne
   1a7d2:	1a1b      	subne	r3, r3, r0
   1a7d4:	50a3      	strne	r3, [r4, r2]
   1a7d6:	e7c9      	b.n	1a76c <_malloc_r+0x20>
   1a7d8:	4622      	mov	r2, r4
   1a7da:	6864      	ldr	r4, [r4, #4]
   1a7dc:	e7cc      	b.n	1a778 <_malloc_r+0x2c>
   1a7de:	1cc4      	adds	r4, r0, #3
   1a7e0:	f024 0403 	bic.w	r4, r4, #3
   1a7e4:	42a0      	cmp	r0, r4
   1a7e6:	d0e3      	beq.n	1a7b0 <_malloc_r+0x64>
   1a7e8:	1a21      	subs	r1, r4, r0
   1a7ea:	4630      	mov	r0, r6
   1a7ec:	f000 fd76 	bl	1b2dc <_sbrk_r>
   1a7f0:	3001      	adds	r0, #1
   1a7f2:	d1dd      	bne.n	1a7b0 <_malloc_r+0x64>
   1a7f4:	e7cf      	b.n	1a796 <_malloc_r+0x4a>
   1a7f6:	bf00      	nop
   1a7f8:	200040d4 	.word	0x200040d4
   1a7fc:	200040d0 	.word	0x200040d0

0001a800 <_printf_float>:
   1a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a804:	b08d      	sub	sp, #52	; 0x34
   1a806:	460c      	mov	r4, r1
   1a808:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1a80c:	4616      	mov	r6, r2
   1a80e:	461f      	mov	r7, r3
   1a810:	4605      	mov	r5, r0
   1a812:	f001 f847 	bl	1b8a4 <_localeconv_r>
   1a816:	6803      	ldr	r3, [r0, #0]
   1a818:	9304      	str	r3, [sp, #16]
   1a81a:	4618      	mov	r0, r3
   1a81c:	f7ef f99f 	bl	9b5e <strlen>
   1a820:	2300      	movs	r3, #0
   1a822:	930a      	str	r3, [sp, #40]	; 0x28
   1a824:	f8d8 3000 	ldr.w	r3, [r8]
   1a828:	9005      	str	r0, [sp, #20]
   1a82a:	3307      	adds	r3, #7
   1a82c:	f023 0307 	bic.w	r3, r3, #7
   1a830:	f103 0208 	add.w	r2, r3, #8
   1a834:	f894 a018 	ldrb.w	sl, [r4, #24]
   1a838:	f8d4 b000 	ldr.w	fp, [r4]
   1a83c:	f8c8 2000 	str.w	r2, [r8]
   1a840:	e9d3 8900 	ldrd	r8, r9, [r3]
   1a844:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   1a848:	9307      	str	r3, [sp, #28]
   1a84a:	f8cd 8018 	str.w	r8, [sp, #24]
   1a84e:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   1a852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1a856:	4ba0      	ldr	r3, [pc, #640]	; (1aad8 <_printf_float+0x2d8>)
   1a858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a85c:	f7e7 faac 	bl	1db8 <__aeabi_dcmpun>
   1a860:	bb70      	cbnz	r0, 1a8c0 <_printf_float+0xc0>
   1a862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1a866:	4b9c      	ldr	r3, [pc, #624]	; (1aad8 <_printf_float+0x2d8>)
   1a868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a86c:	f7e7 f8d0 	bl	1a10 <__aeabi_dcmple>
   1a870:	bb30      	cbnz	r0, 1a8c0 <_printf_float+0xc0>
   1a872:	2200      	movs	r2, #0
   1a874:	2300      	movs	r3, #0
   1a876:	4640      	mov	r0, r8
   1a878:	4649      	mov	r1, r9
   1a87a:	f7e7 f8bf 	bl	19fc <__aeabi_dcmplt>
   1a87e:	b110      	cbz	r0, 1a886 <_printf_float+0x86>
   1a880:	232d      	movs	r3, #45	; 0x2d
   1a882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1a886:	4a95      	ldr	r2, [pc, #596]	; (1aadc <_printf_float+0x2dc>)
   1a888:	4b95      	ldr	r3, [pc, #596]	; (1aae0 <_printf_float+0x2e0>)
   1a88a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1a88e:	bf94      	ite	ls
   1a890:	4690      	movls	r8, r2
   1a892:	4698      	movhi	r8, r3
   1a894:	2303      	movs	r3, #3
   1a896:	6123      	str	r3, [r4, #16]
   1a898:	f02b 0304 	bic.w	r3, fp, #4
   1a89c:	6023      	str	r3, [r4, #0]
   1a89e:	f04f 0900 	mov.w	r9, #0
   1a8a2:	9700      	str	r7, [sp, #0]
   1a8a4:	4633      	mov	r3, r6
   1a8a6:	aa0b      	add	r2, sp, #44	; 0x2c
   1a8a8:	4621      	mov	r1, r4
   1a8aa:	4628      	mov	r0, r5
   1a8ac:	f00a fb82 	bl	24fb4 <_printf_common>
   1a8b0:	3001      	adds	r0, #1
   1a8b2:	f040 8096 	bne.w	1a9e2 <_printf_float+0x1e2>
   1a8b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a8ba:	b00d      	add	sp, #52	; 0x34
   1a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8c0:	4642      	mov	r2, r8
   1a8c2:	464b      	mov	r3, r9
   1a8c4:	4640      	mov	r0, r8
   1a8c6:	4649      	mov	r1, r9
   1a8c8:	f7e7 fa76 	bl	1db8 <__aeabi_dcmpun>
   1a8cc:	b140      	cbz	r0, 1a8e0 <_printf_float+0xe0>
   1a8ce:	464b      	mov	r3, r9
   1a8d0:	2b00      	cmp	r3, #0
   1a8d2:	bfbc      	itt	lt
   1a8d4:	232d      	movlt	r3, #45	; 0x2d
   1a8d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1a8da:	4a82      	ldr	r2, [pc, #520]	; (1aae4 <_printf_float+0x2e4>)
   1a8dc:	4b82      	ldr	r3, [pc, #520]	; (1aae8 <_printf_float+0x2e8>)
   1a8de:	e7d4      	b.n	1a88a <_printf_float+0x8a>
   1a8e0:	6863      	ldr	r3, [r4, #4]
   1a8e2:	1c5a      	adds	r2, r3, #1
   1a8e4:	d126      	bne.n	1a934 <_printf_float+0x134>
   1a8e6:	2306      	movs	r3, #6
   1a8e8:	6063      	str	r3, [r4, #4]
   1a8ea:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   1a8ee:	2300      	movs	r3, #0
   1a8f0:	6022      	str	r2, [r4, #0]
   1a8f2:	9303      	str	r3, [sp, #12]
   1a8f4:	ab0a      	add	r3, sp, #40	; 0x28
   1a8f6:	e9cd a301 	strd	sl, r3, [sp, #4]
   1a8fa:	ab09      	add	r3, sp, #36	; 0x24
   1a8fc:	9300      	str	r3, [sp, #0]
   1a8fe:	6861      	ldr	r1, [r4, #4]
   1a900:	ec49 8b10 	vmov	d0, r8, r9
   1a904:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1a908:	4628      	mov	r0, r5
   1a90a:	f00a fab0 	bl	24e6e <__cvt>
   1a90e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   1a912:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a914:	4680      	mov	r8, r0
   1a916:	d115      	bne.n	1a944 <_printf_float+0x144>
   1a918:	1ccb      	adds	r3, r1, #3
   1a91a:	db3b      	blt.n	1a994 <_printf_float+0x194>
   1a91c:	6863      	ldr	r3, [r4, #4]
   1a91e:	4299      	cmp	r1, r3
   1a920:	dc38      	bgt.n	1a994 <_printf_float+0x194>
   1a922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a924:	4299      	cmp	r1, r3
   1a926:	db55      	blt.n	1a9d4 <_printf_float+0x1d4>
   1a928:	6823      	ldr	r3, [r4, #0]
   1a92a:	6121      	str	r1, [r4, #16]
   1a92c:	07d8      	lsls	r0, r3, #31
   1a92e:	d545      	bpl.n	1a9bc <_printf_float+0x1bc>
   1a930:	1c4b      	adds	r3, r1, #1
   1a932:	e042      	b.n	1a9ba <_printf_float+0x1ba>
   1a934:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   1a938:	2a47      	cmp	r2, #71	; 0x47
   1a93a:	d1d6      	bne.n	1a8ea <_printf_float+0xea>
   1a93c:	2b00      	cmp	r3, #0
   1a93e:	d1d4      	bne.n	1a8ea <_printf_float+0xea>
   1a940:	2301      	movs	r3, #1
   1a942:	e7d1      	b.n	1a8e8 <_printf_float+0xe8>
   1a944:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   1a948:	d107      	bne.n	1a95a <_printf_float+0x15a>
   1a94a:	1cc8      	adds	r0, r1, #3
   1a94c:	db25      	blt.n	1a99a <_printf_float+0x19a>
   1a94e:	6863      	ldr	r3, [r4, #4]
   1a950:	428b      	cmp	r3, r1
   1a952:	db22      	blt.n	1a99a <_printf_float+0x19a>
   1a954:	f04f 0a67 	mov.w	sl, #103	; 0x67
   1a958:	e7e3      	b.n	1a922 <_printf_float+0x122>
   1a95a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1a95e:	d81f      	bhi.n	1a9a0 <_printf_float+0x1a0>
   1a960:	3901      	subs	r1, #1
   1a962:	4652      	mov	r2, sl
   1a964:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1a968:	9109      	str	r1, [sp, #36]	; 0x24
   1a96a:	f00a fae9 	bl	24f40 <__exponent>
   1a96e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a970:	1813      	adds	r3, r2, r0
   1a972:	2a01      	cmp	r2, #1
   1a974:	4681      	mov	r9, r0
   1a976:	6123      	str	r3, [r4, #16]
   1a978:	dc02      	bgt.n	1a980 <_printf_float+0x180>
   1a97a:	6822      	ldr	r2, [r4, #0]
   1a97c:	07d2      	lsls	r2, r2, #31
   1a97e:	d501      	bpl.n	1a984 <_printf_float+0x184>
   1a980:	3301      	adds	r3, #1
   1a982:	6123      	str	r3, [r4, #16]
   1a984:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1a988:	2b00      	cmp	r3, #0
   1a98a:	d08a      	beq.n	1a8a2 <_printf_float+0xa2>
   1a98c:	232d      	movs	r3, #45	; 0x2d
   1a98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1a992:	e786      	b.n	1a8a2 <_printf_float+0xa2>
   1a994:	f04f 0a65 	mov.w	sl, #101	; 0x65
   1a998:	e7e2      	b.n	1a960 <_printf_float+0x160>
   1a99a:	f04f 0a45 	mov.w	sl, #69	; 0x45
   1a99e:	e7df      	b.n	1a960 <_printf_float+0x160>
   1a9a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   1a9a4:	d1bd      	bne.n	1a922 <_printf_float+0x122>
   1a9a6:	2900      	cmp	r1, #0
   1a9a8:	6863      	ldr	r3, [r4, #4]
   1a9aa:	dd0b      	ble.n	1a9c4 <_printf_float+0x1c4>
   1a9ac:	6121      	str	r1, [r4, #16]
   1a9ae:	b913      	cbnz	r3, 1a9b6 <_printf_float+0x1b6>
   1a9b0:	6822      	ldr	r2, [r4, #0]
   1a9b2:	07d0      	lsls	r0, r2, #31
   1a9b4:	d502      	bpl.n	1a9bc <_printf_float+0x1bc>
   1a9b6:	3301      	adds	r3, #1
   1a9b8:	440b      	add	r3, r1
   1a9ba:	6123      	str	r3, [r4, #16]
   1a9bc:	65a1      	str	r1, [r4, #88]	; 0x58
   1a9be:	f04f 0900 	mov.w	r9, #0
   1a9c2:	e7df      	b.n	1a984 <_printf_float+0x184>
   1a9c4:	b913      	cbnz	r3, 1a9cc <_printf_float+0x1cc>
   1a9c6:	6822      	ldr	r2, [r4, #0]
   1a9c8:	07d2      	lsls	r2, r2, #31
   1a9ca:	d501      	bpl.n	1a9d0 <_printf_float+0x1d0>
   1a9cc:	3302      	adds	r3, #2
   1a9ce:	e7f4      	b.n	1a9ba <_printf_float+0x1ba>
   1a9d0:	2301      	movs	r3, #1
   1a9d2:	e7f2      	b.n	1a9ba <_printf_float+0x1ba>
   1a9d4:	2900      	cmp	r1, #0
   1a9d6:	bfd4      	ite	le
   1a9d8:	f1c1 0202 	rsble	r2, r1, #2
   1a9dc:	2201      	movgt	r2, #1
   1a9de:	4413      	add	r3, r2
   1a9e0:	e7eb      	b.n	1a9ba <_printf_float+0x1ba>
   1a9e2:	6823      	ldr	r3, [r4, #0]
   1a9e4:	055a      	lsls	r2, r3, #21
   1a9e6:	d407      	bmi.n	1a9f8 <_printf_float+0x1f8>
   1a9e8:	6923      	ldr	r3, [r4, #16]
   1a9ea:	4642      	mov	r2, r8
   1a9ec:	4631      	mov	r1, r6
   1a9ee:	4628      	mov	r0, r5
   1a9f0:	47b8      	blx	r7
   1a9f2:	3001      	adds	r0, #1
   1a9f4:	d12b      	bne.n	1aa4e <_printf_float+0x24e>
   1a9f6:	e75e      	b.n	1a8b6 <_printf_float+0xb6>
   1a9f8:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   1a9fc:	f240 80dc 	bls.w	1abb8 <_printf_float+0x3b8>
   1aa00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1aa04:	2200      	movs	r2, #0
   1aa06:	2300      	movs	r3, #0
   1aa08:	f7e6 ffee 	bl	19e8 <__aeabi_dcmpeq>
   1aa0c:	2800      	cmp	r0, #0
   1aa0e:	d033      	beq.n	1aa78 <_printf_float+0x278>
   1aa10:	4a36      	ldr	r2, [pc, #216]	; (1aaec <_printf_float+0x2ec>)
   1aa12:	2301      	movs	r3, #1
   1aa14:	4631      	mov	r1, r6
   1aa16:	4628      	mov	r0, r5
   1aa18:	47b8      	blx	r7
   1aa1a:	3001      	adds	r0, #1
   1aa1c:	f43f af4b 	beq.w	1a8b6 <_printf_float+0xb6>
   1aa20:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	; 0x24
   1aa24:	4543      	cmp	r3, r8
   1aa26:	db02      	blt.n	1aa2e <_printf_float+0x22e>
   1aa28:	6823      	ldr	r3, [r4, #0]
   1aa2a:	07d8      	lsls	r0, r3, #31
   1aa2c:	d50f      	bpl.n	1aa4e <_printf_float+0x24e>
   1aa2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1aa32:	4631      	mov	r1, r6
   1aa34:	4628      	mov	r0, r5
   1aa36:	47b8      	blx	r7
   1aa38:	3001      	adds	r0, #1
   1aa3a:	f43f af3c 	beq.w	1a8b6 <_printf_float+0xb6>
   1aa3e:	f04f 0900 	mov.w	r9, #0
   1aa42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1aa46:	f104 0a1a 	add.w	sl, r4, #26
   1aa4a:	45c8      	cmp	r8, r9
   1aa4c:	dc09      	bgt.n	1aa62 <_printf_float+0x262>
   1aa4e:	6823      	ldr	r3, [r4, #0]
   1aa50:	079b      	lsls	r3, r3, #30
   1aa52:	f100 8102 	bmi.w	1ac5a <_printf_float+0x45a>
   1aa56:	68e0      	ldr	r0, [r4, #12]
   1aa58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aa5a:	4298      	cmp	r0, r3
   1aa5c:	bfb8      	it	lt
   1aa5e:	4618      	movlt	r0, r3
   1aa60:	e72b      	b.n	1a8ba <_printf_float+0xba>
   1aa62:	2301      	movs	r3, #1
   1aa64:	4652      	mov	r2, sl
   1aa66:	4631      	mov	r1, r6
   1aa68:	4628      	mov	r0, r5
   1aa6a:	47b8      	blx	r7
   1aa6c:	3001      	adds	r0, #1
   1aa6e:	f43f af22 	beq.w	1a8b6 <_printf_float+0xb6>
   1aa72:	f109 0901 	add.w	r9, r9, #1
   1aa76:	e7e8      	b.n	1aa4a <_printf_float+0x24a>
   1aa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aa7a:	2b00      	cmp	r3, #0
   1aa7c:	dc38      	bgt.n	1aaf0 <_printf_float+0x2f0>
   1aa7e:	4a1b      	ldr	r2, [pc, #108]	; (1aaec <_printf_float+0x2ec>)
   1aa80:	2301      	movs	r3, #1
   1aa82:	4631      	mov	r1, r6
   1aa84:	4628      	mov	r0, r5
   1aa86:	47b8      	blx	r7
   1aa88:	3001      	adds	r0, #1
   1aa8a:	f43f af14 	beq.w	1a8b6 <_printf_float+0xb6>
   1aa8e:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	; 0x24
   1aa92:	ea59 0303 	orrs.w	r3, r9, r3
   1aa96:	d102      	bne.n	1aa9e <_printf_float+0x29e>
   1aa98:	6823      	ldr	r3, [r4, #0]
   1aa9a:	07d9      	lsls	r1, r3, #31
   1aa9c:	d5d7      	bpl.n	1aa4e <_printf_float+0x24e>
   1aa9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1aaa2:	4631      	mov	r1, r6
   1aaa4:	4628      	mov	r0, r5
   1aaa6:	47b8      	blx	r7
   1aaa8:	3001      	adds	r0, #1
   1aaaa:	f43f af04 	beq.w	1a8b6 <_printf_float+0xb6>
   1aaae:	f04f 0a00 	mov.w	sl, #0
   1aab2:	f104 0b1a 	add.w	fp, r4, #26
   1aab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aab8:	425b      	negs	r3, r3
   1aaba:	4553      	cmp	r3, sl
   1aabc:	dc01      	bgt.n	1aac2 <_printf_float+0x2c2>
   1aabe:	464b      	mov	r3, r9
   1aac0:	e793      	b.n	1a9ea <_printf_float+0x1ea>
   1aac2:	2301      	movs	r3, #1
   1aac4:	465a      	mov	r2, fp
   1aac6:	4631      	mov	r1, r6
   1aac8:	4628      	mov	r0, r5
   1aaca:	47b8      	blx	r7
   1aacc:	3001      	adds	r0, #1
   1aace:	f43f aef2 	beq.w	1a8b6 <_printf_float+0xb6>
   1aad2:	f10a 0a01 	add.w	sl, sl, #1
   1aad6:	e7ee      	b.n	1aab6 <_printf_float+0x2b6>
   1aad8:	7fefffff 	.word	0x7fefffff
   1aadc:	00026eb9 	.word	0x00026eb9
   1aae0:	00026ebd 	.word	0x00026ebd
   1aae4:	00026ec1 	.word	0x00026ec1
   1aae8:	00026ec5 	.word	0x00026ec5
   1aaec:	00026ec9 	.word	0x00026ec9
   1aaf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1aaf2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1aaf6:	4553      	cmp	r3, sl
   1aaf8:	bfa8      	it	ge
   1aafa:	4653      	movge	r3, sl
   1aafc:	2b00      	cmp	r3, #0
   1aafe:	4699      	mov	r9, r3
   1ab00:	dc36      	bgt.n	1ab70 <_printf_float+0x370>
   1ab02:	f04f 0b00 	mov.w	fp, #0
   1ab06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1ab0a:	f104 021a 	add.w	r2, r4, #26
   1ab0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1ab10:	9306      	str	r3, [sp, #24]
   1ab12:	eba3 0309 	sub.w	r3, r3, r9
   1ab16:	455b      	cmp	r3, fp
   1ab18:	dc31      	bgt.n	1ab7e <_printf_float+0x37e>
   1ab1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ab1c:	459a      	cmp	sl, r3
   1ab1e:	dc3a      	bgt.n	1ab96 <_printf_float+0x396>
   1ab20:	6823      	ldr	r3, [r4, #0]
   1ab22:	07da      	lsls	r2, r3, #31
   1ab24:	d437      	bmi.n	1ab96 <_printf_float+0x396>
   1ab26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ab28:	ebaa 0903 	sub.w	r9, sl, r3
   1ab2c:	9b06      	ldr	r3, [sp, #24]
   1ab2e:	ebaa 0303 	sub.w	r3, sl, r3
   1ab32:	4599      	cmp	r9, r3
   1ab34:	bfa8      	it	ge
   1ab36:	4699      	movge	r9, r3
   1ab38:	f1b9 0f00 	cmp.w	r9, #0
   1ab3c:	dc33      	bgt.n	1aba6 <_printf_float+0x3a6>
   1ab3e:	f04f 0800 	mov.w	r8, #0
   1ab42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1ab46:	f104 0b1a 	add.w	fp, r4, #26
   1ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ab4c:	ebaa 0303 	sub.w	r3, sl, r3
   1ab50:	eba3 0309 	sub.w	r3, r3, r9
   1ab54:	4543      	cmp	r3, r8
   1ab56:	f77f af7a 	ble.w	1aa4e <_printf_float+0x24e>
   1ab5a:	2301      	movs	r3, #1
   1ab5c:	465a      	mov	r2, fp
   1ab5e:	4631      	mov	r1, r6
   1ab60:	4628      	mov	r0, r5
   1ab62:	47b8      	blx	r7
   1ab64:	3001      	adds	r0, #1
   1ab66:	f43f aea6 	beq.w	1a8b6 <_printf_float+0xb6>
   1ab6a:	f108 0801 	add.w	r8, r8, #1
   1ab6e:	e7ec      	b.n	1ab4a <_printf_float+0x34a>
   1ab70:	4642      	mov	r2, r8
   1ab72:	4631      	mov	r1, r6
   1ab74:	4628      	mov	r0, r5
   1ab76:	47b8      	blx	r7
   1ab78:	3001      	adds	r0, #1
   1ab7a:	d1c2      	bne.n	1ab02 <_printf_float+0x302>
   1ab7c:	e69b      	b.n	1a8b6 <_printf_float+0xb6>
   1ab7e:	2301      	movs	r3, #1
   1ab80:	4631      	mov	r1, r6
   1ab82:	4628      	mov	r0, r5
   1ab84:	9206      	str	r2, [sp, #24]
   1ab86:	47b8      	blx	r7
   1ab88:	3001      	adds	r0, #1
   1ab8a:	f43f ae94 	beq.w	1a8b6 <_printf_float+0xb6>
   1ab8e:	9a06      	ldr	r2, [sp, #24]
   1ab90:	f10b 0b01 	add.w	fp, fp, #1
   1ab94:	e7bb      	b.n	1ab0e <_printf_float+0x30e>
   1ab96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ab9a:	4631      	mov	r1, r6
   1ab9c:	4628      	mov	r0, r5
   1ab9e:	47b8      	blx	r7
   1aba0:	3001      	adds	r0, #1
   1aba2:	d1c0      	bne.n	1ab26 <_printf_float+0x326>
   1aba4:	e687      	b.n	1a8b6 <_printf_float+0xb6>
   1aba6:	9a06      	ldr	r2, [sp, #24]
   1aba8:	464b      	mov	r3, r9
   1abaa:	4442      	add	r2, r8
   1abac:	4631      	mov	r1, r6
   1abae:	4628      	mov	r0, r5
   1abb0:	47b8      	blx	r7
   1abb2:	3001      	adds	r0, #1
   1abb4:	d1c3      	bne.n	1ab3e <_printf_float+0x33e>
   1abb6:	e67e      	b.n	1a8b6 <_printf_float+0xb6>
   1abb8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1abbc:	f1ba 0f01 	cmp.w	sl, #1
   1abc0:	dc01      	bgt.n	1abc6 <_printf_float+0x3c6>
   1abc2:	07db      	lsls	r3, r3, #31
   1abc4:	d536      	bpl.n	1ac34 <_printf_float+0x434>
   1abc6:	2301      	movs	r3, #1
   1abc8:	4642      	mov	r2, r8
   1abca:	4631      	mov	r1, r6
   1abcc:	4628      	mov	r0, r5
   1abce:	47b8      	blx	r7
   1abd0:	3001      	adds	r0, #1
   1abd2:	f43f ae70 	beq.w	1a8b6 <_printf_float+0xb6>
   1abd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1abda:	4631      	mov	r1, r6
   1abdc:	4628      	mov	r0, r5
   1abde:	47b8      	blx	r7
   1abe0:	3001      	adds	r0, #1
   1abe2:	f43f ae68 	beq.w	1a8b6 <_printf_float+0xb6>
   1abe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1abea:	2200      	movs	r2, #0
   1abec:	2300      	movs	r3, #0
   1abee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1abf2:	f7e6 fef9 	bl	19e8 <__aeabi_dcmpeq>
   1abf6:	b9c0      	cbnz	r0, 1ac2a <_printf_float+0x42a>
   1abf8:	4653      	mov	r3, sl
   1abfa:	f108 0201 	add.w	r2, r8, #1
   1abfe:	4631      	mov	r1, r6
   1ac00:	4628      	mov	r0, r5
   1ac02:	47b8      	blx	r7
   1ac04:	3001      	adds	r0, #1
   1ac06:	d10c      	bne.n	1ac22 <_printf_float+0x422>
   1ac08:	e655      	b.n	1a8b6 <_printf_float+0xb6>
   1ac0a:	2301      	movs	r3, #1
   1ac0c:	465a      	mov	r2, fp
   1ac0e:	4631      	mov	r1, r6
   1ac10:	4628      	mov	r0, r5
   1ac12:	47b8      	blx	r7
   1ac14:	3001      	adds	r0, #1
   1ac16:	f43f ae4e 	beq.w	1a8b6 <_printf_float+0xb6>
   1ac1a:	f108 0801 	add.w	r8, r8, #1
   1ac1e:	45d0      	cmp	r8, sl
   1ac20:	dbf3      	blt.n	1ac0a <_printf_float+0x40a>
   1ac22:	464b      	mov	r3, r9
   1ac24:	f104 0250 	add.w	r2, r4, #80	; 0x50
   1ac28:	e6e0      	b.n	1a9ec <_printf_float+0x1ec>
   1ac2a:	f04f 0800 	mov.w	r8, #0
   1ac2e:	f104 0b1a 	add.w	fp, r4, #26
   1ac32:	e7f4      	b.n	1ac1e <_printf_float+0x41e>
   1ac34:	2301      	movs	r3, #1
   1ac36:	4642      	mov	r2, r8
   1ac38:	e7e1      	b.n	1abfe <_printf_float+0x3fe>
   1ac3a:	2301      	movs	r3, #1
   1ac3c:	464a      	mov	r2, r9
   1ac3e:	4631      	mov	r1, r6
   1ac40:	4628      	mov	r0, r5
   1ac42:	47b8      	blx	r7
   1ac44:	3001      	adds	r0, #1
   1ac46:	f43f ae36 	beq.w	1a8b6 <_printf_float+0xb6>
   1ac4a:	f108 0801 	add.w	r8, r8, #1
   1ac4e:	68e3      	ldr	r3, [r4, #12]
   1ac50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ac52:	1a5b      	subs	r3, r3, r1
   1ac54:	4543      	cmp	r3, r8
   1ac56:	dcf0      	bgt.n	1ac3a <_printf_float+0x43a>
   1ac58:	e6fd      	b.n	1aa56 <_printf_float+0x256>
   1ac5a:	f04f 0800 	mov.w	r8, #0
   1ac5e:	f104 0919 	add.w	r9, r4, #25
   1ac62:	e7f4      	b.n	1ac4e <_printf_float+0x44e>

0001ac64 <_printf_i>:
   1ac64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1ac68:	7e0f      	ldrb	r7, [r1, #24]
   1ac6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1ac6c:	2f78      	cmp	r7, #120	; 0x78
   1ac6e:	4691      	mov	r9, r2
   1ac70:	4680      	mov	r8, r0
   1ac72:	460c      	mov	r4, r1
   1ac74:	469a      	mov	sl, r3
   1ac76:	f101 0243 	add.w	r2, r1, #67	; 0x43
   1ac7a:	d807      	bhi.n	1ac8c <_printf_i+0x28>
   1ac7c:	2f62      	cmp	r7, #98	; 0x62
   1ac7e:	d80a      	bhi.n	1ac96 <_printf_i+0x32>
   1ac80:	2f00      	cmp	r7, #0
   1ac82:	f000 80e0 	beq.w	1ae46 <_printf_i+0x1e2>
   1ac86:	2f58      	cmp	r7, #88	; 0x58
   1ac88:	f000 80bb 	beq.w	1ae02 <_printf_i+0x19e>
   1ac8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1ac90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1ac94:	e03a      	b.n	1ad0c <_printf_i+0xa8>
   1ac96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1ac9a:	2b15      	cmp	r3, #21
   1ac9c:	d8f6      	bhi.n	1ac8c <_printf_i+0x28>
   1ac9e:	a101      	add	r1, pc, #4	; (adr r1, 1aca4 <_printf_i+0x40>)
   1aca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1aca4:	0001acfd 	.word	0x0001acfd
   1aca8:	0001ad11 	.word	0x0001ad11
   1acac:	0001ac8d 	.word	0x0001ac8d
   1acb0:	0001ac8d 	.word	0x0001ac8d
   1acb4:	0001ac8d 	.word	0x0001ac8d
   1acb8:	0001ac8d 	.word	0x0001ac8d
   1acbc:	0001ad11 	.word	0x0001ad11
   1acc0:	0001ac8d 	.word	0x0001ac8d
   1acc4:	0001ac8d 	.word	0x0001ac8d
   1acc8:	0001ac8d 	.word	0x0001ac8d
   1accc:	0001ac8d 	.word	0x0001ac8d
   1acd0:	0001ae2d 	.word	0x0001ae2d
   1acd4:	0001ada1 	.word	0x0001ada1
   1acd8:	0001ade3 	.word	0x0001ade3
   1acdc:	0001ac8d 	.word	0x0001ac8d
   1ace0:	0001ac8d 	.word	0x0001ac8d
   1ace4:	0001ae4f 	.word	0x0001ae4f
   1ace8:	0001ac8d 	.word	0x0001ac8d
   1acec:	0001ada1 	.word	0x0001ada1
   1acf0:	0001ac8d 	.word	0x0001ac8d
   1acf4:	0001ac8d 	.word	0x0001ac8d
   1acf8:	0001adeb 	.word	0x0001adeb
   1acfc:	682b      	ldr	r3, [r5, #0]
   1acfe:	1d1a      	adds	r2, r3, #4
   1ad00:	681b      	ldr	r3, [r3, #0]
   1ad02:	602a      	str	r2, [r5, #0]
   1ad04:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1ad08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1ad0c:	2301      	movs	r3, #1
   1ad0e:	e0ab      	b.n	1ae68 <_printf_i+0x204>
   1ad10:	6823      	ldr	r3, [r4, #0]
   1ad12:	6829      	ldr	r1, [r5, #0]
   1ad14:	061f      	lsls	r7, r3, #24
   1ad16:	f101 0004 	add.w	r0, r1, #4
   1ad1a:	6028      	str	r0, [r5, #0]
   1ad1c:	d501      	bpl.n	1ad22 <_printf_i+0xbe>
   1ad1e:	680d      	ldr	r5, [r1, #0]
   1ad20:	e003      	b.n	1ad2a <_printf_i+0xc6>
   1ad22:	065e      	lsls	r6, r3, #25
   1ad24:	d5fb      	bpl.n	1ad1e <_printf_i+0xba>
   1ad26:	f9b1 5000 	ldrsh.w	r5, [r1]
   1ad2a:	6861      	ldr	r1, [r4, #4]
   1ad2c:	2d00      	cmp	r5, #0
   1ad2e:	da7a      	bge.n	1ae26 <_printf_i+0x1c2>
   1ad30:	202d      	movs	r0, #45	; 0x2d
   1ad32:	2900      	cmp	r1, #0
   1ad34:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   1ad38:	60a1      	str	r1, [r4, #8]
   1ad3a:	da2d      	bge.n	1ad98 <_printf_i+0x134>
   1ad3c:	485e      	ldr	r0, [pc, #376]	; (1aeb8 <_printf_i+0x254>)
   1ad3e:	426d      	negs	r5, r5
   1ad40:	230a      	movs	r3, #10
   1ad42:	4616      	mov	r6, r2
   1ad44:	fbb5 f1f3 	udiv	r1, r5, r3
   1ad48:	fb03 5711 	mls	r7, r3, r1, r5
   1ad4c:	5dc7      	ldrb	r7, [r0, r7]
   1ad4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1ad52:	462f      	mov	r7, r5
   1ad54:	42bb      	cmp	r3, r7
   1ad56:	460d      	mov	r5, r1
   1ad58:	d9f4      	bls.n	1ad44 <_printf_i+0xe0>
   1ad5a:	2b08      	cmp	r3, #8
   1ad5c:	d10b      	bne.n	1ad76 <_printf_i+0x112>
   1ad5e:	6823      	ldr	r3, [r4, #0]
   1ad60:	07df      	lsls	r7, r3, #31
   1ad62:	d508      	bpl.n	1ad76 <_printf_i+0x112>
   1ad64:	6923      	ldr	r3, [r4, #16]
   1ad66:	6861      	ldr	r1, [r4, #4]
   1ad68:	4299      	cmp	r1, r3
   1ad6a:	bfde      	ittt	le
   1ad6c:	2330      	movle	r3, #48	; 0x30
   1ad6e:	f806 3c01 	strble.w	r3, [r6, #-1]
   1ad72:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   1ad76:	1b92      	subs	r2, r2, r6
   1ad78:	6122      	str	r2, [r4, #16]
   1ad7a:	f8cd a000 	str.w	sl, [sp]
   1ad7e:	464b      	mov	r3, r9
   1ad80:	aa03      	add	r2, sp, #12
   1ad82:	4621      	mov	r1, r4
   1ad84:	4640      	mov	r0, r8
   1ad86:	f00a f915 	bl	24fb4 <_printf_common>
   1ad8a:	3001      	adds	r0, #1
   1ad8c:	d171      	bne.n	1ae72 <_printf_i+0x20e>
   1ad8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ad92:	b004      	add	sp, #16
   1ad94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ad98:	f023 0304 	bic.w	r3, r3, #4
   1ad9c:	6023      	str	r3, [r4, #0]
   1ad9e:	e7cd      	b.n	1ad3c <_printf_i+0xd8>
   1ada0:	682b      	ldr	r3, [r5, #0]
   1ada2:	6820      	ldr	r0, [r4, #0]
   1ada4:	1d19      	adds	r1, r3, #4
   1ada6:	6029      	str	r1, [r5, #0]
   1ada8:	0605      	lsls	r5, r0, #24
   1adaa:	d501      	bpl.n	1adb0 <_printf_i+0x14c>
   1adac:	681d      	ldr	r5, [r3, #0]
   1adae:	e002      	b.n	1adb6 <_printf_i+0x152>
   1adb0:	0641      	lsls	r1, r0, #25
   1adb2:	d5fb      	bpl.n	1adac <_printf_i+0x148>
   1adb4:	881d      	ldrh	r5, [r3, #0]
   1adb6:	4840      	ldr	r0, [pc, #256]	; (1aeb8 <_printf_i+0x254>)
   1adb8:	2f6f      	cmp	r7, #111	; 0x6f
   1adba:	bf14      	ite	ne
   1adbc:	230a      	movne	r3, #10
   1adbe:	2308      	moveq	r3, #8
   1adc0:	2100      	movs	r1, #0
   1adc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1adc6:	6866      	ldr	r6, [r4, #4]
   1adc8:	60a6      	str	r6, [r4, #8]
   1adca:	2e00      	cmp	r6, #0
   1adcc:	dbb9      	blt.n	1ad42 <_printf_i+0xde>
   1adce:	6821      	ldr	r1, [r4, #0]
   1add0:	f021 0104 	bic.w	r1, r1, #4
   1add4:	6021      	str	r1, [r4, #0]
   1add6:	2d00      	cmp	r5, #0
   1add8:	d1b3      	bne.n	1ad42 <_printf_i+0xde>
   1adda:	2e00      	cmp	r6, #0
   1addc:	d1b1      	bne.n	1ad42 <_printf_i+0xde>
   1adde:	4616      	mov	r6, r2
   1ade0:	e7bb      	b.n	1ad5a <_printf_i+0xf6>
   1ade2:	6823      	ldr	r3, [r4, #0]
   1ade4:	f043 0320 	orr.w	r3, r3, #32
   1ade8:	6023      	str	r3, [r4, #0]
   1adea:	4834      	ldr	r0, [pc, #208]	; (1aebc <_printf_i+0x258>)
   1adec:	2778      	movs	r7, #120	; 0x78
   1adee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1adf2:	6829      	ldr	r1, [r5, #0]
   1adf4:	6823      	ldr	r3, [r4, #0]
   1adf6:	1d0e      	adds	r6, r1, #4
   1adf8:	602e      	str	r6, [r5, #0]
   1adfa:	061e      	lsls	r6, r3, #24
   1adfc:	d503      	bpl.n	1ae06 <_printf_i+0x1a2>
   1adfe:	680d      	ldr	r5, [r1, #0]
   1ae00:	e004      	b.n	1ae0c <_printf_i+0x1a8>
   1ae02:	482d      	ldr	r0, [pc, #180]	; (1aeb8 <_printf_i+0x254>)
   1ae04:	e7f3      	b.n	1adee <_printf_i+0x18a>
   1ae06:	065d      	lsls	r5, r3, #25
   1ae08:	d5f9      	bpl.n	1adfe <_printf_i+0x19a>
   1ae0a:	880d      	ldrh	r5, [r1, #0]
   1ae0c:	07d9      	lsls	r1, r3, #31
   1ae0e:	bf44      	itt	mi
   1ae10:	f043 0320 	orrmi.w	r3, r3, #32
   1ae14:	6023      	strmi	r3, [r4, #0]
   1ae16:	b10d      	cbz	r5, 1ae1c <_printf_i+0x1b8>
   1ae18:	2310      	movs	r3, #16
   1ae1a:	e7d1      	b.n	1adc0 <_printf_i+0x15c>
   1ae1c:	6823      	ldr	r3, [r4, #0]
   1ae1e:	f023 0320 	bic.w	r3, r3, #32
   1ae22:	6023      	str	r3, [r4, #0]
   1ae24:	e7f8      	b.n	1ae18 <_printf_i+0x1b4>
   1ae26:	4824      	ldr	r0, [pc, #144]	; (1aeb8 <_printf_i+0x254>)
   1ae28:	230a      	movs	r3, #10
   1ae2a:	e7cc      	b.n	1adc6 <_printf_i+0x162>
   1ae2c:	682b      	ldr	r3, [r5, #0]
   1ae2e:	6826      	ldr	r6, [r4, #0]
   1ae30:	6961      	ldr	r1, [r4, #20]
   1ae32:	1d18      	adds	r0, r3, #4
   1ae34:	6028      	str	r0, [r5, #0]
   1ae36:	0635      	lsls	r5, r6, #24
   1ae38:	681b      	ldr	r3, [r3, #0]
   1ae3a:	d501      	bpl.n	1ae40 <_printf_i+0x1dc>
   1ae3c:	6019      	str	r1, [r3, #0]
   1ae3e:	e002      	b.n	1ae46 <_printf_i+0x1e2>
   1ae40:	0670      	lsls	r0, r6, #25
   1ae42:	d5fb      	bpl.n	1ae3c <_printf_i+0x1d8>
   1ae44:	8019      	strh	r1, [r3, #0]
   1ae46:	2300      	movs	r3, #0
   1ae48:	6123      	str	r3, [r4, #16]
   1ae4a:	4616      	mov	r6, r2
   1ae4c:	e795      	b.n	1ad7a <_printf_i+0x116>
   1ae4e:	682b      	ldr	r3, [r5, #0]
   1ae50:	1d1a      	adds	r2, r3, #4
   1ae52:	602a      	str	r2, [r5, #0]
   1ae54:	681e      	ldr	r6, [r3, #0]
   1ae56:	6862      	ldr	r2, [r4, #4]
   1ae58:	2100      	movs	r1, #0
   1ae5a:	4630      	mov	r0, r6
   1ae5c:	f7e6 f950 	bl	1100 <memchr>
   1ae60:	b108      	cbz	r0, 1ae66 <_printf_i+0x202>
   1ae62:	1b80      	subs	r0, r0, r6
   1ae64:	6060      	str	r0, [r4, #4]
   1ae66:	6863      	ldr	r3, [r4, #4]
   1ae68:	6123      	str	r3, [r4, #16]
   1ae6a:	2300      	movs	r3, #0
   1ae6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1ae70:	e783      	b.n	1ad7a <_printf_i+0x116>
   1ae72:	6923      	ldr	r3, [r4, #16]
   1ae74:	4632      	mov	r2, r6
   1ae76:	4649      	mov	r1, r9
   1ae78:	4640      	mov	r0, r8
   1ae7a:	47d0      	blx	sl
   1ae7c:	3001      	adds	r0, #1
   1ae7e:	d086      	beq.n	1ad8e <_printf_i+0x12a>
   1ae80:	6823      	ldr	r3, [r4, #0]
   1ae82:	079b      	lsls	r3, r3, #30
   1ae84:	d414      	bmi.n	1aeb0 <_printf_i+0x24c>
   1ae86:	68e0      	ldr	r0, [r4, #12]
   1ae88:	9b03      	ldr	r3, [sp, #12]
   1ae8a:	4298      	cmp	r0, r3
   1ae8c:	bfb8      	it	lt
   1ae8e:	4618      	movlt	r0, r3
   1ae90:	e77f      	b.n	1ad92 <_printf_i+0x12e>
   1ae92:	2301      	movs	r3, #1
   1ae94:	4632      	mov	r2, r6
   1ae96:	4649      	mov	r1, r9
   1ae98:	4640      	mov	r0, r8
   1ae9a:	47d0      	blx	sl
   1ae9c:	3001      	adds	r0, #1
   1ae9e:	f43f af76 	beq.w	1ad8e <_printf_i+0x12a>
   1aea2:	3501      	adds	r5, #1
   1aea4:	68e3      	ldr	r3, [r4, #12]
   1aea6:	9903      	ldr	r1, [sp, #12]
   1aea8:	1a5b      	subs	r3, r3, r1
   1aeaa:	42ab      	cmp	r3, r5
   1aeac:	dcf1      	bgt.n	1ae92 <_printf_i+0x22e>
   1aeae:	e7ea      	b.n	1ae86 <_printf_i+0x222>
   1aeb0:	2500      	movs	r5, #0
   1aeb2:	f104 0619 	add.w	r6, r4, #25
   1aeb6:	e7f5      	b.n	1aea4 <_printf_i+0x240>
   1aeb8:	00026ecb 	.word	0x00026ecb
   1aebc:	00026edc 	.word	0x00026edc

0001aec0 <_scanf_float>:
   1aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aec4:	b087      	sub	sp, #28
   1aec6:	4691      	mov	r9, r2
   1aec8:	9303      	str	r3, [sp, #12]
   1aeca:	688b      	ldr	r3, [r1, #8]
   1aecc:	1e5a      	subs	r2, r3, #1
   1aece:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   1aed2:	bf81      	itttt	hi
   1aed4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   1aed8:	eb03 0b05 	addhi.w	fp, r3, r5
   1aedc:	f240 135d 	movwhi	r3, #349	; 0x15d
   1aee0:	608b      	strhi	r3, [r1, #8]
   1aee2:	680b      	ldr	r3, [r1, #0]
   1aee4:	460a      	mov	r2, r1
   1aee6:	f04f 0500 	mov.w	r5, #0
   1aeea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
   1aeee:	f842 3b1c 	str.w	r3, [r2], #28
   1aef2:	e9cd 5504 	strd	r5, r5, [sp, #16]
   1aef6:	4680      	mov	r8, r0
   1aef8:	460c      	mov	r4, r1
   1aefa:	bf98      	it	ls
   1aefc:	f04f 0b00 	movls.w	fp, #0
   1af00:	9201      	str	r2, [sp, #4]
   1af02:	4616      	mov	r6, r2
   1af04:	46aa      	mov	sl, r5
   1af06:	462f      	mov	r7, r5
   1af08:	9502      	str	r5, [sp, #8]
   1af0a:	68a2      	ldr	r2, [r4, #8]
   1af0c:	b15a      	cbz	r2, 1af26 <_scanf_float+0x66>
   1af0e:	f8d9 3000 	ldr.w	r3, [r9]
   1af12:	781b      	ldrb	r3, [r3, #0]
   1af14:	2b4e      	cmp	r3, #78	; 0x4e
   1af16:	d863      	bhi.n	1afe0 <_scanf_float+0x120>
   1af18:	2b40      	cmp	r3, #64	; 0x40
   1af1a:	d83b      	bhi.n	1af94 <_scanf_float+0xd4>
   1af1c:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
   1af20:	b2c8      	uxtb	r0, r1
   1af22:	280e      	cmp	r0, #14
   1af24:	d939      	bls.n	1af9a <_scanf_float+0xda>
   1af26:	b11f      	cbz	r7, 1af30 <_scanf_float+0x70>
   1af28:	6823      	ldr	r3, [r4, #0]
   1af2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1af2e:	6023      	str	r3, [r4, #0]
   1af30:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1af34:	f1ba 0f01 	cmp.w	sl, #1
   1af38:	f200 8114 	bhi.w	1b164 <_scanf_float+0x2a4>
   1af3c:	9b01      	ldr	r3, [sp, #4]
   1af3e:	429e      	cmp	r6, r3
   1af40:	f200 8105 	bhi.w	1b14e <_scanf_float+0x28e>
   1af44:	2001      	movs	r0, #1
   1af46:	b007      	add	sp, #28
   1af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af4c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1af50:	2a0d      	cmp	r2, #13
   1af52:	d8e8      	bhi.n	1af26 <_scanf_float+0x66>
   1af54:	a101      	add	r1, pc, #4	; (adr r1, 1af5c <_scanf_float+0x9c>)
   1af56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1af5a:	bf00      	nop
   1af5c:	0001b0a5 	.word	0x0001b0a5
   1af60:	0001af27 	.word	0x0001af27
   1af64:	0001af27 	.word	0x0001af27
   1af68:	0001af27 	.word	0x0001af27
   1af6c:	0001b101 	.word	0x0001b101
   1af70:	0001b0db 	.word	0x0001b0db
   1af74:	0001af27 	.word	0x0001af27
   1af78:	0001af27 	.word	0x0001af27
   1af7c:	0001b0b3 	.word	0x0001b0b3
   1af80:	0001af27 	.word	0x0001af27
   1af84:	0001af27 	.word	0x0001af27
   1af88:	0001af27 	.word	0x0001af27
   1af8c:	0001af27 	.word	0x0001af27
   1af90:	0001b06f 	.word	0x0001b06f
   1af94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   1af98:	e7da      	b.n	1af50 <_scanf_float+0x90>
   1af9a:	290e      	cmp	r1, #14
   1af9c:	d8c3      	bhi.n	1af26 <_scanf_float+0x66>
   1af9e:	a001      	add	r0, pc, #4	; (adr r0, 1afa4 <_scanf_float+0xe4>)
   1afa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1afa4:	0001b05f 	.word	0x0001b05f
   1afa8:	0001af27 	.word	0x0001af27
   1afac:	0001b05f 	.word	0x0001b05f
   1afb0:	0001b0ef 	.word	0x0001b0ef
   1afb4:	0001af27 	.word	0x0001af27
   1afb8:	0001b001 	.word	0x0001b001
   1afbc:	0001b045 	.word	0x0001b045
   1afc0:	0001b045 	.word	0x0001b045
   1afc4:	0001b045 	.word	0x0001b045
   1afc8:	0001b045 	.word	0x0001b045
   1afcc:	0001b045 	.word	0x0001b045
   1afd0:	0001b045 	.word	0x0001b045
   1afd4:	0001b045 	.word	0x0001b045
   1afd8:	0001b045 	.word	0x0001b045
   1afdc:	0001b045 	.word	0x0001b045
   1afe0:	2b6e      	cmp	r3, #110	; 0x6e
   1afe2:	d809      	bhi.n	1aff8 <_scanf_float+0x138>
   1afe4:	2b60      	cmp	r3, #96	; 0x60
   1afe6:	d8b1      	bhi.n	1af4c <_scanf_float+0x8c>
   1afe8:	2b54      	cmp	r3, #84	; 0x54
   1afea:	d07b      	beq.n	1b0e4 <_scanf_float+0x224>
   1afec:	2b59      	cmp	r3, #89	; 0x59
   1afee:	d19a      	bne.n	1af26 <_scanf_float+0x66>
   1aff0:	2d07      	cmp	r5, #7
   1aff2:	d198      	bne.n	1af26 <_scanf_float+0x66>
   1aff4:	2508      	movs	r5, #8
   1aff6:	e02f      	b.n	1b058 <_scanf_float+0x198>
   1aff8:	2b74      	cmp	r3, #116	; 0x74
   1affa:	d073      	beq.n	1b0e4 <_scanf_float+0x224>
   1affc:	2b79      	cmp	r3, #121	; 0x79
   1affe:	e7f6      	b.n	1afee <_scanf_float+0x12e>
   1b000:	6821      	ldr	r1, [r4, #0]
   1b002:	05c8      	lsls	r0, r1, #23
   1b004:	d51e      	bpl.n	1b044 <_scanf_float+0x184>
   1b006:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   1b00a:	6021      	str	r1, [r4, #0]
   1b00c:	3701      	adds	r7, #1
   1b00e:	f1bb 0f00 	cmp.w	fp, #0
   1b012:	d003      	beq.n	1b01c <_scanf_float+0x15c>
   1b014:	3201      	adds	r2, #1
   1b016:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1b01a:	60a2      	str	r2, [r4, #8]
   1b01c:	68a3      	ldr	r3, [r4, #8]
   1b01e:	3b01      	subs	r3, #1
   1b020:	60a3      	str	r3, [r4, #8]
   1b022:	6923      	ldr	r3, [r4, #16]
   1b024:	3301      	adds	r3, #1
   1b026:	6123      	str	r3, [r4, #16]
   1b028:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b02c:	3b01      	subs	r3, #1
   1b02e:	2b00      	cmp	r3, #0
   1b030:	f8c9 3004 	str.w	r3, [r9, #4]
   1b034:	f340 8082 	ble.w	1b13c <_scanf_float+0x27c>
   1b038:	f8d9 3000 	ldr.w	r3, [r9]
   1b03c:	3301      	adds	r3, #1
   1b03e:	f8c9 3000 	str.w	r3, [r9]
   1b042:	e762      	b.n	1af0a <_scanf_float+0x4a>
   1b044:	eb1a 0105 	adds.w	r1, sl, r5
   1b048:	f47f af6d 	bne.w	1af26 <_scanf_float+0x66>
   1b04c:	6822      	ldr	r2, [r4, #0]
   1b04e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
   1b052:	6022      	str	r2, [r4, #0]
   1b054:	460d      	mov	r5, r1
   1b056:	468a      	mov	sl, r1
   1b058:	f806 3b01 	strb.w	r3, [r6], #1
   1b05c:	e7de      	b.n	1b01c <_scanf_float+0x15c>
   1b05e:	6822      	ldr	r2, [r4, #0]
   1b060:	0610      	lsls	r0, r2, #24
   1b062:	f57f af60 	bpl.w	1af26 <_scanf_float+0x66>
   1b066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1b06a:	6022      	str	r2, [r4, #0]
   1b06c:	e7f4      	b.n	1b058 <_scanf_float+0x198>
   1b06e:	f1ba 0f00 	cmp.w	sl, #0
   1b072:	d10c      	bne.n	1b08e <_scanf_float+0x1ce>
   1b074:	b977      	cbnz	r7, 1b094 <_scanf_float+0x1d4>
   1b076:	6822      	ldr	r2, [r4, #0]
   1b078:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
   1b07c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
   1b080:	d108      	bne.n	1b094 <_scanf_float+0x1d4>
   1b082:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
   1b086:	6022      	str	r2, [r4, #0]
   1b088:	f04f 0a01 	mov.w	sl, #1
   1b08c:	e7e4      	b.n	1b058 <_scanf_float+0x198>
   1b08e:	f1ba 0f02 	cmp.w	sl, #2
   1b092:	d050      	beq.n	1b136 <_scanf_float+0x276>
   1b094:	2d01      	cmp	r5, #1
   1b096:	d002      	beq.n	1b09e <_scanf_float+0x1de>
   1b098:	2d04      	cmp	r5, #4
   1b09a:	f47f af44 	bne.w	1af26 <_scanf_float+0x66>
   1b09e:	3501      	adds	r5, #1
   1b0a0:	b2ed      	uxtb	r5, r5
   1b0a2:	e7d9      	b.n	1b058 <_scanf_float+0x198>
   1b0a4:	f1ba 0f01 	cmp.w	sl, #1
   1b0a8:	f47f af3d 	bne.w	1af26 <_scanf_float+0x66>
   1b0ac:	f04f 0a02 	mov.w	sl, #2
   1b0b0:	e7d2      	b.n	1b058 <_scanf_float+0x198>
   1b0b2:	b975      	cbnz	r5, 1b0d2 <_scanf_float+0x212>
   1b0b4:	2f00      	cmp	r7, #0
   1b0b6:	f47f af37 	bne.w	1af28 <_scanf_float+0x68>
   1b0ba:	6822      	ldr	r2, [r4, #0]
   1b0bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
   1b0c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
   1b0c4:	f040 8103 	bne.w	1b2ce <_scanf_float+0x40e>
   1b0c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
   1b0cc:	6022      	str	r2, [r4, #0]
   1b0ce:	2501      	movs	r5, #1
   1b0d0:	e7c2      	b.n	1b058 <_scanf_float+0x198>
   1b0d2:	2d03      	cmp	r5, #3
   1b0d4:	d0e3      	beq.n	1b09e <_scanf_float+0x1de>
   1b0d6:	2d05      	cmp	r5, #5
   1b0d8:	e7df      	b.n	1b09a <_scanf_float+0x1da>
   1b0da:	2d02      	cmp	r5, #2
   1b0dc:	f47f af23 	bne.w	1af26 <_scanf_float+0x66>
   1b0e0:	2503      	movs	r5, #3
   1b0e2:	e7b9      	b.n	1b058 <_scanf_float+0x198>
   1b0e4:	2d06      	cmp	r5, #6
   1b0e6:	f47f af1e 	bne.w	1af26 <_scanf_float+0x66>
   1b0ea:	2507      	movs	r5, #7
   1b0ec:	e7b4      	b.n	1b058 <_scanf_float+0x198>
   1b0ee:	6822      	ldr	r2, [r4, #0]
   1b0f0:	0591      	lsls	r1, r2, #22
   1b0f2:	f57f af18 	bpl.w	1af26 <_scanf_float+0x66>
   1b0f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
   1b0fa:	6022      	str	r2, [r4, #0]
   1b0fc:	9702      	str	r7, [sp, #8]
   1b0fe:	e7ab      	b.n	1b058 <_scanf_float+0x198>
   1b100:	6822      	ldr	r2, [r4, #0]
   1b102:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
   1b106:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1b10a:	d005      	beq.n	1b118 <_scanf_float+0x258>
   1b10c:	0550      	lsls	r0, r2, #21
   1b10e:	f57f af0a 	bpl.w	1af26 <_scanf_float+0x66>
   1b112:	2f00      	cmp	r7, #0
   1b114:	f000 80db 	beq.w	1b2ce <_scanf_float+0x40e>
   1b118:	0591      	lsls	r1, r2, #22
   1b11a:	bf58      	it	pl
   1b11c:	9902      	ldrpl	r1, [sp, #8]
   1b11e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
   1b122:	bf58      	it	pl
   1b124:	1a79      	subpl	r1, r7, r1
   1b126:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
   1b12a:	bf58      	it	pl
   1b12c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
   1b130:	6022      	str	r2, [r4, #0]
   1b132:	2700      	movs	r7, #0
   1b134:	e790      	b.n	1b058 <_scanf_float+0x198>
   1b136:	f04f 0a03 	mov.w	sl, #3
   1b13a:	e78d      	b.n	1b058 <_scanf_float+0x198>
   1b13c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1b140:	4649      	mov	r1, r9
   1b142:	4640      	mov	r0, r8
   1b144:	4798      	blx	r3
   1b146:	2800      	cmp	r0, #0
   1b148:	f43f aedf 	beq.w	1af0a <_scanf_float+0x4a>
   1b14c:	e6eb      	b.n	1af26 <_scanf_float+0x66>
   1b14e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1b152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
   1b156:	464a      	mov	r2, r9
   1b158:	4640      	mov	r0, r8
   1b15a:	4798      	blx	r3
   1b15c:	6923      	ldr	r3, [r4, #16]
   1b15e:	3b01      	subs	r3, #1
   1b160:	6123      	str	r3, [r4, #16]
   1b162:	e6eb      	b.n	1af3c <_scanf_float+0x7c>
   1b164:	1e6b      	subs	r3, r5, #1
   1b166:	2b06      	cmp	r3, #6
   1b168:	d824      	bhi.n	1b1b4 <_scanf_float+0x2f4>
   1b16a:	2d02      	cmp	r5, #2
   1b16c:	d836      	bhi.n	1b1dc <_scanf_float+0x31c>
   1b16e:	9b01      	ldr	r3, [sp, #4]
   1b170:	429e      	cmp	r6, r3
   1b172:	f67f aee7 	bls.w	1af44 <_scanf_float+0x84>
   1b176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1b17a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
   1b17e:	464a      	mov	r2, r9
   1b180:	4640      	mov	r0, r8
   1b182:	4798      	blx	r3
   1b184:	6923      	ldr	r3, [r4, #16]
   1b186:	3b01      	subs	r3, #1
   1b188:	6123      	str	r3, [r4, #16]
   1b18a:	e7f0      	b.n	1b16e <_scanf_float+0x2ae>
   1b18c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1b190:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
   1b194:	464a      	mov	r2, r9
   1b196:	4640      	mov	r0, r8
   1b198:	4798      	blx	r3
   1b19a:	6923      	ldr	r3, [r4, #16]
   1b19c:	3b01      	subs	r3, #1
   1b19e:	6123      	str	r3, [r4, #16]
   1b1a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1b1a4:	fa5f fa8a 	uxtb.w	sl, sl
   1b1a8:	f1ba 0f02 	cmp.w	sl, #2
   1b1ac:	d1ee      	bne.n	1b18c <_scanf_float+0x2cc>
   1b1ae:	3d03      	subs	r5, #3
   1b1b0:	b2ed      	uxtb	r5, r5
   1b1b2:	1b76      	subs	r6, r6, r5
   1b1b4:	6823      	ldr	r3, [r4, #0]
   1b1b6:	05da      	lsls	r2, r3, #23
   1b1b8:	d530      	bpl.n	1b21c <_scanf_float+0x35c>
   1b1ba:	055b      	lsls	r3, r3, #21
   1b1bc:	d511      	bpl.n	1b1e2 <_scanf_float+0x322>
   1b1be:	9b01      	ldr	r3, [sp, #4]
   1b1c0:	429e      	cmp	r6, r3
   1b1c2:	f67f aebf 	bls.w	1af44 <_scanf_float+0x84>
   1b1c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1b1ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
   1b1ce:	464a      	mov	r2, r9
   1b1d0:	4640      	mov	r0, r8
   1b1d2:	4798      	blx	r3
   1b1d4:	6923      	ldr	r3, [r4, #16]
   1b1d6:	3b01      	subs	r3, #1
   1b1d8:	6123      	str	r3, [r4, #16]
   1b1da:	e7f0      	b.n	1b1be <_scanf_float+0x2fe>
   1b1dc:	46aa      	mov	sl, r5
   1b1de:	46b3      	mov	fp, r6
   1b1e0:	e7de      	b.n	1b1a0 <_scanf_float+0x2e0>
   1b1e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   1b1e6:	6923      	ldr	r3, [r4, #16]
   1b1e8:	2965      	cmp	r1, #101	; 0x65
   1b1ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1b1ee:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
   1b1f2:	6123      	str	r3, [r4, #16]
   1b1f4:	d00c      	beq.n	1b210 <_scanf_float+0x350>
   1b1f6:	2945      	cmp	r1, #69	; 0x45
   1b1f8:	d00a      	beq.n	1b210 <_scanf_float+0x350>
   1b1fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1b1fe:	464a      	mov	r2, r9
   1b200:	4640      	mov	r0, r8
   1b202:	4798      	blx	r3
   1b204:	6923      	ldr	r3, [r4, #16]
   1b206:	f816 1c02 	ldrb.w	r1, [r6, #-2]
   1b20a:	3b01      	subs	r3, #1
   1b20c:	1eb5      	subs	r5, r6, #2
   1b20e:	6123      	str	r3, [r4, #16]
   1b210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1b214:	464a      	mov	r2, r9
   1b216:	4640      	mov	r0, r8
   1b218:	4798      	blx	r3
   1b21a:	462e      	mov	r6, r5
   1b21c:	6822      	ldr	r2, [r4, #0]
   1b21e:	f012 0210 	ands.w	r2, r2, #16
   1b222:	d001      	beq.n	1b228 <_scanf_float+0x368>
   1b224:	2000      	movs	r0, #0
   1b226:	e68e      	b.n	1af46 <_scanf_float+0x86>
   1b228:	7032      	strb	r2, [r6, #0]
   1b22a:	6823      	ldr	r3, [r4, #0]
   1b22c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   1b230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1b234:	d125      	bne.n	1b282 <_scanf_float+0x3c2>
   1b236:	9b02      	ldr	r3, [sp, #8]
   1b238:	429f      	cmp	r7, r3
   1b23a:	d00a      	beq.n	1b252 <_scanf_float+0x392>
   1b23c:	1bda      	subs	r2, r3, r7
   1b23e:	f204 136f 	addw	r3, r4, #367	; 0x16f
   1b242:	429e      	cmp	r6, r3
   1b244:	bf28      	it	cs
   1b246:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
   1b24a:	4922      	ldr	r1, [pc, #136]	; (1b2d4 <_scanf_float+0x414>)
   1b24c:	4630      	mov	r0, r6
   1b24e:	f000 f855 	bl	1b2fc <siprintf>
   1b252:	9901      	ldr	r1, [sp, #4]
   1b254:	2200      	movs	r2, #0
   1b256:	4640      	mov	r0, r8
   1b258:	f000 f870 	bl	1b33c <_strtod_r>
   1b25c:	9b03      	ldr	r3, [sp, #12]
   1b25e:	6821      	ldr	r1, [r4, #0]
   1b260:	681b      	ldr	r3, [r3, #0]
   1b262:	f011 0f02 	tst.w	r1, #2
   1b266:	ec57 6b10 	vmov	r6, r7, d0
   1b26a:	f103 0204 	add.w	r2, r3, #4
   1b26e:	d015      	beq.n	1b29c <_scanf_float+0x3dc>
   1b270:	9903      	ldr	r1, [sp, #12]
   1b272:	600a      	str	r2, [r1, #0]
   1b274:	681b      	ldr	r3, [r3, #0]
   1b276:	e9c3 6700 	strd	r6, r7, [r3]
   1b27a:	68e3      	ldr	r3, [r4, #12]
   1b27c:	3301      	adds	r3, #1
   1b27e:	60e3      	str	r3, [r4, #12]
   1b280:	e7d0      	b.n	1b224 <_scanf_float+0x364>
   1b282:	9b04      	ldr	r3, [sp, #16]
   1b284:	2b00      	cmp	r3, #0
   1b286:	d0e4      	beq.n	1b252 <_scanf_float+0x392>
   1b288:	9905      	ldr	r1, [sp, #20]
   1b28a:	230a      	movs	r3, #10
   1b28c:	3101      	adds	r1, #1
   1b28e:	4640      	mov	r0, r8
   1b290:	f009 ff3a 	bl	25108 <_strtol_r>
   1b294:	9b04      	ldr	r3, [sp, #16]
   1b296:	9e05      	ldr	r6, [sp, #20]
   1b298:	1ac2      	subs	r2, r0, r3
   1b29a:	e7d0      	b.n	1b23e <_scanf_float+0x37e>
   1b29c:	f011 0f04 	tst.w	r1, #4
   1b2a0:	9903      	ldr	r1, [sp, #12]
   1b2a2:	600a      	str	r2, [r1, #0]
   1b2a4:	d1e6      	bne.n	1b274 <_scanf_float+0x3b4>
   1b2a6:	681d      	ldr	r5, [r3, #0]
   1b2a8:	4632      	mov	r2, r6
   1b2aa:	463b      	mov	r3, r7
   1b2ac:	4630      	mov	r0, r6
   1b2ae:	4639      	mov	r1, r7
   1b2b0:	f7e6 fd82 	bl	1db8 <__aeabi_dcmpun>
   1b2b4:	b128      	cbz	r0, 1b2c2 <_scanf_float+0x402>
   1b2b6:	4808      	ldr	r0, [pc, #32]	; (1b2d8 <_scanf_float+0x418>)
   1b2b8:	f7ff f9f0 	bl	1a69c <nanf>
   1b2bc:	ed85 0a00 	vstr	s0, [r5]
   1b2c0:	e7db      	b.n	1b27a <_scanf_float+0x3ba>
   1b2c2:	4630      	mov	r0, r6
   1b2c4:	4639      	mov	r1, r7
   1b2c6:	f7e6 fbe1 	bl	1a8c <__aeabi_d2f>
   1b2ca:	6028      	str	r0, [r5, #0]
   1b2cc:	e7d5      	b.n	1b27a <_scanf_float+0x3ba>
   1b2ce:	2700      	movs	r7, #0
   1b2d0:	e62e      	b.n	1af30 <_scanf_float+0x70>
   1b2d2:	bf00      	nop
   1b2d4:	00026eed 	.word	0x00026eed
   1b2d8:	00027094 	.word	0x00027094

0001b2dc <_sbrk_r>:
   1b2dc:	b538      	push	{r3, r4, r5, lr}
   1b2de:	4d06      	ldr	r5, [pc, #24]	; (1b2f8 <_sbrk_r+0x1c>)
   1b2e0:	2300      	movs	r3, #0
   1b2e2:	4604      	mov	r4, r0
   1b2e4:	4608      	mov	r0, r1
   1b2e6:	602b      	str	r3, [r5, #0]
   1b2e8:	f7f8 fae4 	bl	138b4 <_sbrk>
   1b2ec:	1c43      	adds	r3, r0, #1
   1b2ee:	d102      	bne.n	1b2f6 <_sbrk_r+0x1a>
   1b2f0:	682b      	ldr	r3, [r5, #0]
   1b2f2:	b103      	cbz	r3, 1b2f6 <_sbrk_r+0x1a>
   1b2f4:	6023      	str	r3, [r4, #0]
   1b2f6:	bd38      	pop	{r3, r4, r5, pc}
   1b2f8:	200040d8 	.word	0x200040d8

0001b2fc <siprintf>:
   1b2fc:	b40e      	push	{r1, r2, r3}
   1b2fe:	b500      	push	{lr}
   1b300:	b09c      	sub	sp, #112	; 0x70
   1b302:	ab1d      	add	r3, sp, #116	; 0x74
   1b304:	9002      	str	r0, [sp, #8]
   1b306:	9006      	str	r0, [sp, #24]
   1b308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b30c:	4809      	ldr	r0, [pc, #36]	; (1b334 <siprintf+0x38>)
   1b30e:	9107      	str	r1, [sp, #28]
   1b310:	9104      	str	r1, [sp, #16]
   1b312:	4909      	ldr	r1, [pc, #36]	; (1b338 <siprintf+0x3c>)
   1b314:	f853 2b04 	ldr.w	r2, [r3], #4
   1b318:	9105      	str	r1, [sp, #20]
   1b31a:	6800      	ldr	r0, [r0, #0]
   1b31c:	9301      	str	r3, [sp, #4]
   1b31e:	a902      	add	r1, sp, #8
   1b320:	f000 fea4 	bl	1c06c <_svfiprintf_r>
   1b324:	9b02      	ldr	r3, [sp, #8]
   1b326:	2200      	movs	r2, #0
   1b328:	701a      	strb	r2, [r3, #0]
   1b32a:	b01c      	add	sp, #112	; 0x70
   1b32c:	f85d eb04 	ldr.w	lr, [sp], #4
   1b330:	b003      	add	sp, #12
   1b332:	4770      	bx	lr
   1b334:	200005b0 	.word	0x200005b0
   1b338:	ffff0208 	.word	0xffff0208

0001b33c <_strtod_r>:
   1b33c:	4b01      	ldr	r3, [pc, #4]	; (1b344 <_strtod_r+0x8>)
   1b33e:	f7f2 b997 	b.w	d670 <_strtod_l>
   1b342:	bf00      	nop
   1b344:	20000614 	.word	0x20000614

0001b348 <_strtol_l.constprop.0>:
   1b348:	2b24      	cmp	r3, #36	; 0x24
   1b34a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b34e:	4686      	mov	lr, r0
   1b350:	4690      	mov	r8, r2
   1b352:	d801      	bhi.n	1b358 <_strtol_l.constprop.0+0x10>
   1b354:	2b01      	cmp	r3, #1
   1b356:	d106      	bne.n	1b366 <_strtol_l.constprop.0+0x1e>
   1b358:	f006 fd36 	bl	21dc8 <__errno>
   1b35c:	2316      	movs	r3, #22
   1b35e:	6003      	str	r3, [r0, #0]
   1b360:	2000      	movs	r0, #0
   1b362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b366:	4836      	ldr	r0, [pc, #216]	; (1b440 <_strtol_l.constprop.0+0xf8>)
   1b368:	460d      	mov	r5, r1
   1b36a:	462a      	mov	r2, r5
   1b36c:	f815 4b01 	ldrb.w	r4, [r5], #1
   1b370:	5d06      	ldrb	r6, [r0, r4]
   1b372:	f016 0608 	ands.w	r6, r6, #8
   1b376:	d1f8      	bne.n	1b36a <_strtol_l.constprop.0+0x22>
   1b378:	2c2d      	cmp	r4, #45	; 0x2d
   1b37a:	d124      	bne.n	1b3c6 <_strtol_l.constprop.0+0x7e>
   1b37c:	782c      	ldrb	r4, [r5, #0]
   1b37e:	2601      	movs	r6, #1
   1b380:	1c95      	adds	r5, r2, #2
   1b382:	bb2b      	cbnz	r3, 1b3d0 <_strtol_l.constprop.0+0x88>
   1b384:	2c30      	cmp	r4, #48	; 0x30
   1b386:	d030      	beq.n	1b3ea <_strtol_l.constprop.0+0xa2>
   1b388:	230a      	movs	r3, #10
   1b38a:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   1b38e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1b392:	2200      	movs	r2, #0
   1b394:	fbbc f9f3 	udiv	r9, ip, r3
   1b398:	4610      	mov	r0, r2
   1b39a:	fb03 ca19 	mls	sl, r3, r9, ip
   1b39e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   1b3a2:	2f09      	cmp	r7, #9
   1b3a4:	d828      	bhi.n	1b3f8 <_strtol_l.constprop.0+0xb0>
   1b3a6:	463c      	mov	r4, r7
   1b3a8:	42a3      	cmp	r3, r4
   1b3aa:	dd34      	ble.n	1b416 <_strtol_l.constprop.0+0xce>
   1b3ac:	1c57      	adds	r7, r2, #1
   1b3ae:	d007      	beq.n	1b3c0 <_strtol_l.constprop.0+0x78>
   1b3b0:	4581      	cmp	r9, r0
   1b3b2:	d32d      	bcc.n	1b410 <_strtol_l.constprop.0+0xc8>
   1b3b4:	d101      	bne.n	1b3ba <_strtol_l.constprop.0+0x72>
   1b3b6:	45a2      	cmp	sl, r4
   1b3b8:	db2a      	blt.n	1b410 <_strtol_l.constprop.0+0xc8>
   1b3ba:	fb00 4003 	mla	r0, r0, r3, r4
   1b3be:	2201      	movs	r2, #1
   1b3c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   1b3c4:	e7eb      	b.n	1b39e <_strtol_l.constprop.0+0x56>
   1b3c6:	2c2b      	cmp	r4, #43	; 0x2b
   1b3c8:	bf04      	itt	eq
   1b3ca:	782c      	ldrbeq	r4, [r5, #0]
   1b3cc:	1c95      	addeq	r5, r2, #2
   1b3ce:	e7d8      	b.n	1b382 <_strtol_l.constprop.0+0x3a>
   1b3d0:	2b10      	cmp	r3, #16
   1b3d2:	d1da      	bne.n	1b38a <_strtol_l.constprop.0+0x42>
   1b3d4:	2c30      	cmp	r4, #48	; 0x30
   1b3d6:	d1d8      	bne.n	1b38a <_strtol_l.constprop.0+0x42>
   1b3d8:	782a      	ldrb	r2, [r5, #0]
   1b3da:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1b3de:	2a58      	cmp	r2, #88	; 0x58
   1b3e0:	d1d3      	bne.n	1b38a <_strtol_l.constprop.0+0x42>
   1b3e2:	786c      	ldrb	r4, [r5, #1]
   1b3e4:	2310      	movs	r3, #16
   1b3e6:	3502      	adds	r5, #2
   1b3e8:	e7cf      	b.n	1b38a <_strtol_l.constprop.0+0x42>
   1b3ea:	782b      	ldrb	r3, [r5, #0]
   1b3ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b3f0:	2b58      	cmp	r3, #88	; 0x58
   1b3f2:	d0f6      	beq.n	1b3e2 <_strtol_l.constprop.0+0x9a>
   1b3f4:	2308      	movs	r3, #8
   1b3f6:	e7c8      	b.n	1b38a <_strtol_l.constprop.0+0x42>
   1b3f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   1b3fc:	2f19      	cmp	r7, #25
   1b3fe:	d801      	bhi.n	1b404 <_strtol_l.constprop.0+0xbc>
   1b400:	3c37      	subs	r4, #55	; 0x37
   1b402:	e7d1      	b.n	1b3a8 <_strtol_l.constprop.0+0x60>
   1b404:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   1b408:	2f19      	cmp	r7, #25
   1b40a:	d804      	bhi.n	1b416 <_strtol_l.constprop.0+0xce>
   1b40c:	3c57      	subs	r4, #87	; 0x57
   1b40e:	e7cb      	b.n	1b3a8 <_strtol_l.constprop.0+0x60>
   1b410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b414:	e7d4      	b.n	1b3c0 <_strtol_l.constprop.0+0x78>
   1b416:	1c53      	adds	r3, r2, #1
   1b418:	d108      	bne.n	1b42c <_strtol_l.constprop.0+0xe4>
   1b41a:	2322      	movs	r3, #34	; 0x22
   1b41c:	f8ce 3000 	str.w	r3, [lr]
   1b420:	4660      	mov	r0, ip
   1b422:	f1b8 0f00 	cmp.w	r8, #0
   1b426:	d09c      	beq.n	1b362 <_strtol_l.constprop.0+0x1a>
   1b428:	1e69      	subs	r1, r5, #1
   1b42a:	e006      	b.n	1b43a <_strtol_l.constprop.0+0xf2>
   1b42c:	b106      	cbz	r6, 1b430 <_strtol_l.constprop.0+0xe8>
   1b42e:	4240      	negs	r0, r0
   1b430:	f1b8 0f00 	cmp.w	r8, #0
   1b434:	d095      	beq.n	1b362 <_strtol_l.constprop.0+0x1a>
   1b436:	2a00      	cmp	r2, #0
   1b438:	d1f6      	bne.n	1b428 <_strtol_l.constprop.0+0xe0>
   1b43a:	f8c8 1000 	str.w	r1, [r8]
   1b43e:	e790      	b.n	1b362 <_strtol_l.constprop.0+0x1a>
   1b440:	00026db9 	.word	0x00026db9

0001b444 <__gethex>:
   1b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b448:	b08b      	sub	sp, #44	; 0x2c
   1b44a:	468b      	mov	fp, r1
   1b44c:	9306      	str	r3, [sp, #24]
   1b44e:	4bad      	ldr	r3, [pc, #692]	; (1b704 <__gethex+0x2c0>)
   1b450:	9002      	str	r0, [sp, #8]
   1b452:	681b      	ldr	r3, [r3, #0]
   1b454:	9303      	str	r3, [sp, #12]
   1b456:	4618      	mov	r0, r3
   1b458:	4690      	mov	r8, r2
   1b45a:	f7ee fb80 	bl	9b5e <strlen>
   1b45e:	9b03      	ldr	r3, [sp, #12]
   1b460:	9001      	str	r0, [sp, #4]
   1b462:	4403      	add	r3, r0
   1b464:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   1b468:	9307      	str	r3, [sp, #28]
   1b46a:	f8db 3000 	ldr.w	r3, [fp]
   1b46e:	1c9a      	adds	r2, r3, #2
   1b470:	4617      	mov	r7, r2
   1b472:	f812 0b01 	ldrb.w	r0, [r2], #1
   1b476:	2830      	cmp	r0, #48	; 0x30
   1b478:	d0fa      	beq.n	1b470 <__gethex+0x2c>
   1b47a:	1afb      	subs	r3, r7, r3
   1b47c:	f1a3 0a02 	sub.w	sl, r3, #2
   1b480:	f009 ff1d 	bl	252be <__hexdig_fun>
   1b484:	4604      	mov	r4, r0
   1b486:	2800      	cmp	r0, #0
   1b488:	d139      	bne.n	1b4fe <__gethex+0xba>
   1b48a:	9a01      	ldr	r2, [sp, #4]
   1b48c:	9903      	ldr	r1, [sp, #12]
   1b48e:	4638      	mov	r0, r7
   1b490:	f00a f946 	bl	25720 <strncmp>
   1b494:	4605      	mov	r5, r0
   1b496:	2800      	cmp	r0, #0
   1b498:	d165      	bne.n	1b566 <__gethex+0x122>
   1b49a:	9b01      	ldr	r3, [sp, #4]
   1b49c:	5cf8      	ldrb	r0, [r7, r3]
   1b49e:	18fe      	adds	r6, r7, r3
   1b4a0:	f009 ff0d 	bl	252be <__hexdig_fun>
   1b4a4:	2800      	cmp	r0, #0
   1b4a6:	d060      	beq.n	1b56a <__gethex+0x126>
   1b4a8:	4633      	mov	r3, r6
   1b4aa:	7818      	ldrb	r0, [r3, #0]
   1b4ac:	2830      	cmp	r0, #48	; 0x30
   1b4ae:	461f      	mov	r7, r3
   1b4b0:	f103 0301 	add.w	r3, r3, #1
   1b4b4:	d0f9      	beq.n	1b4aa <__gethex+0x66>
   1b4b6:	f009 ff02 	bl	252be <__hexdig_fun>
   1b4ba:	fab0 f480 	clz	r4, r0
   1b4be:	0964      	lsrs	r4, r4, #5
   1b4c0:	4635      	mov	r5, r6
   1b4c2:	f04f 0a01 	mov.w	sl, #1
   1b4c6:	463a      	mov	r2, r7
   1b4c8:	4616      	mov	r6, r2
   1b4ca:	3201      	adds	r2, #1
   1b4cc:	7830      	ldrb	r0, [r6, #0]
   1b4ce:	f009 fef6 	bl	252be <__hexdig_fun>
   1b4d2:	2800      	cmp	r0, #0
   1b4d4:	d1f8      	bne.n	1b4c8 <__gethex+0x84>
   1b4d6:	9a01      	ldr	r2, [sp, #4]
   1b4d8:	9903      	ldr	r1, [sp, #12]
   1b4da:	4630      	mov	r0, r6
   1b4dc:	f00a f920 	bl	25720 <strncmp>
   1b4e0:	b980      	cbnz	r0, 1b504 <__gethex+0xc0>
   1b4e2:	b94d      	cbnz	r5, 1b4f8 <__gethex+0xb4>
   1b4e4:	9b01      	ldr	r3, [sp, #4]
   1b4e6:	18f5      	adds	r5, r6, r3
   1b4e8:	462a      	mov	r2, r5
   1b4ea:	4616      	mov	r6, r2
   1b4ec:	3201      	adds	r2, #1
   1b4ee:	7830      	ldrb	r0, [r6, #0]
   1b4f0:	f009 fee5 	bl	252be <__hexdig_fun>
   1b4f4:	2800      	cmp	r0, #0
   1b4f6:	d1f8      	bne.n	1b4ea <__gethex+0xa6>
   1b4f8:	1bad      	subs	r5, r5, r6
   1b4fa:	00ad      	lsls	r5, r5, #2
   1b4fc:	e004      	b.n	1b508 <__gethex+0xc4>
   1b4fe:	2400      	movs	r4, #0
   1b500:	4625      	mov	r5, r4
   1b502:	e7e0      	b.n	1b4c6 <__gethex+0x82>
   1b504:	2d00      	cmp	r5, #0
   1b506:	d1f7      	bne.n	1b4f8 <__gethex+0xb4>
   1b508:	7833      	ldrb	r3, [r6, #0]
   1b50a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b50e:	2b50      	cmp	r3, #80	; 0x50
   1b510:	d138      	bne.n	1b584 <__gethex+0x140>
   1b512:	7873      	ldrb	r3, [r6, #1]
   1b514:	2b2b      	cmp	r3, #43	; 0x2b
   1b516:	d02a      	beq.n	1b56e <__gethex+0x12a>
   1b518:	2b2d      	cmp	r3, #45	; 0x2d
   1b51a:	d02c      	beq.n	1b576 <__gethex+0x132>
   1b51c:	1c71      	adds	r1, r6, #1
   1b51e:	f04f 0900 	mov.w	r9, #0
   1b522:	7808      	ldrb	r0, [r1, #0]
   1b524:	f009 fecb 	bl	252be <__hexdig_fun>
   1b528:	1e43      	subs	r3, r0, #1
   1b52a:	b2db      	uxtb	r3, r3
   1b52c:	2b18      	cmp	r3, #24
   1b52e:	d829      	bhi.n	1b584 <__gethex+0x140>
   1b530:	f1a0 0210 	sub.w	r2, r0, #16
   1b534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1b538:	f009 fec1 	bl	252be <__hexdig_fun>
   1b53c:	1e43      	subs	r3, r0, #1
   1b53e:	b2db      	uxtb	r3, r3
   1b540:	2b18      	cmp	r3, #24
   1b542:	d91b      	bls.n	1b57c <__gethex+0x138>
   1b544:	f1b9 0f00 	cmp.w	r9, #0
   1b548:	d000      	beq.n	1b54c <__gethex+0x108>
   1b54a:	4252      	negs	r2, r2
   1b54c:	4415      	add	r5, r2
   1b54e:	f8cb 1000 	str.w	r1, [fp]
   1b552:	b1cc      	cbz	r4, 1b588 <__gethex+0x144>
   1b554:	f1ba 0f00 	cmp.w	sl, #0
   1b558:	bf0c      	ite	eq
   1b55a:	2606      	moveq	r6, #6
   1b55c:	2600      	movne	r6, #0
   1b55e:	4630      	mov	r0, r6
   1b560:	b00b      	add	sp, #44	; 0x2c
   1b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b566:	463e      	mov	r6, r7
   1b568:	4625      	mov	r5, r4
   1b56a:	2401      	movs	r4, #1
   1b56c:	e7cc      	b.n	1b508 <__gethex+0xc4>
   1b56e:	f04f 0900 	mov.w	r9, #0
   1b572:	1cb1      	adds	r1, r6, #2
   1b574:	e7d5      	b.n	1b522 <__gethex+0xde>
   1b576:	f04f 0901 	mov.w	r9, #1
   1b57a:	e7fa      	b.n	1b572 <__gethex+0x12e>
   1b57c:	230a      	movs	r3, #10
   1b57e:	fb03 0002 	mla	r0, r3, r2, r0
   1b582:	e7d5      	b.n	1b530 <__gethex+0xec>
   1b584:	4631      	mov	r1, r6
   1b586:	e7e2      	b.n	1b54e <__gethex+0x10a>
   1b588:	1bf3      	subs	r3, r6, r7
   1b58a:	3b01      	subs	r3, #1
   1b58c:	4621      	mov	r1, r4
   1b58e:	2b07      	cmp	r3, #7
   1b590:	dc0a      	bgt.n	1b5a8 <__gethex+0x164>
   1b592:	9802      	ldr	r0, [sp, #8]
   1b594:	f000 f996 	bl	1b8c4 <_Balloc>
   1b598:	4604      	mov	r4, r0
   1b59a:	b940      	cbnz	r0, 1b5ae <__gethex+0x16a>
   1b59c:	4b5a      	ldr	r3, [pc, #360]	; (1b708 <__gethex+0x2c4>)
   1b59e:	4602      	mov	r2, r0
   1b5a0:	21de      	movs	r1, #222	; 0xde
   1b5a2:	485a      	ldr	r0, [pc, #360]	; (1b70c <__gethex+0x2c8>)
   1b5a4:	f000 fe5e 	bl	1c264 <__assert_func>
   1b5a8:	3101      	adds	r1, #1
   1b5aa:	105b      	asrs	r3, r3, #1
   1b5ac:	e7ef      	b.n	1b58e <__gethex+0x14a>
   1b5ae:	9b01      	ldr	r3, [sp, #4]
   1b5b0:	f100 0914 	add.w	r9, r0, #20
   1b5b4:	f04f 0b00 	mov.w	fp, #0
   1b5b8:	f1c3 0301 	rsb	r3, r3, #1
   1b5bc:	f8cd 9010 	str.w	r9, [sp, #16]
   1b5c0:	46da      	mov	sl, fp
   1b5c2:	9308      	str	r3, [sp, #32]
   1b5c4:	42b7      	cmp	r7, r6
   1b5c6:	d338      	bcc.n	1b63a <__gethex+0x1f6>
   1b5c8:	9e04      	ldr	r6, [sp, #16]
   1b5ca:	f846 ab04 	str.w	sl, [r6], #4
   1b5ce:	eba6 0609 	sub.w	r6, r6, r9
   1b5d2:	10b6      	asrs	r6, r6, #2
   1b5d4:	6126      	str	r6, [r4, #16]
   1b5d6:	4650      	mov	r0, sl
   1b5d8:	f009 ff59 	bl	2548e <__hi0bits>
   1b5dc:	0176      	lsls	r6, r6, #5
   1b5de:	f8d8 7000 	ldr.w	r7, [r8]
   1b5e2:	1a36      	subs	r6, r6, r0
   1b5e4:	42be      	cmp	r6, r7
   1b5e6:	dd60      	ble.n	1b6aa <__gethex+0x266>
   1b5e8:	1bf6      	subs	r6, r6, r7
   1b5ea:	4631      	mov	r1, r6
   1b5ec:	4620      	mov	r0, r4
   1b5ee:	f00a f80d 	bl	2560c <__any_on>
   1b5f2:	4682      	mov	sl, r0
   1b5f4:	b178      	cbz	r0, 1b616 <__gethex+0x1d2>
   1b5f6:	1e73      	subs	r3, r6, #1
   1b5f8:	1159      	asrs	r1, r3, #5
   1b5fa:	f003 021f 	and.w	r2, r3, #31
   1b5fe:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   1b602:	f04f 0a01 	mov.w	sl, #1
   1b606:	fa0a f202 	lsl.w	r2, sl, r2
   1b60a:	420a      	tst	r2, r1
   1b60c:	d003      	beq.n	1b616 <__gethex+0x1d2>
   1b60e:	4553      	cmp	r3, sl
   1b610:	dc42      	bgt.n	1b698 <__gethex+0x254>
   1b612:	f04f 0a02 	mov.w	sl, #2
   1b616:	4631      	mov	r1, r6
   1b618:	4620      	mov	r0, r4
   1b61a:	f009 fdff 	bl	2521c <rshift>
   1b61e:	4435      	add	r5, r6
   1b620:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b624:	42ab      	cmp	r3, r5
   1b626:	da4e      	bge.n	1b6c6 <__gethex+0x282>
   1b628:	9802      	ldr	r0, [sp, #8]
   1b62a:	4621      	mov	r1, r4
   1b62c:	f000 f98a 	bl	1b944 <_Bfree>
   1b630:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b632:	2300      	movs	r3, #0
   1b634:	6013      	str	r3, [r2, #0]
   1b636:	26a3      	movs	r6, #163	; 0xa3
   1b638:	e791      	b.n	1b55e <__gethex+0x11a>
   1b63a:	1e73      	subs	r3, r6, #1
   1b63c:	9a07      	ldr	r2, [sp, #28]
   1b63e:	9305      	str	r3, [sp, #20]
   1b640:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1b644:	4293      	cmp	r3, r2
   1b646:	d017      	beq.n	1b678 <__gethex+0x234>
   1b648:	f1bb 0f20 	cmp.w	fp, #32
   1b64c:	d106      	bne.n	1b65c <__gethex+0x218>
   1b64e:	9b04      	ldr	r3, [sp, #16]
   1b650:	f843 ab04 	str.w	sl, [r3], #4
   1b654:	f04f 0a00 	mov.w	sl, #0
   1b658:	9304      	str	r3, [sp, #16]
   1b65a:	46d3      	mov	fp, sl
   1b65c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1b660:	f009 fe2d 	bl	252be <__hexdig_fun>
   1b664:	f000 000f 	and.w	r0, r0, #15
   1b668:	fa00 f00b 	lsl.w	r0, r0, fp
   1b66c:	9b05      	ldr	r3, [sp, #20]
   1b66e:	ea4a 0a00 	orr.w	sl, sl, r0
   1b672:	f10b 0b04 	add.w	fp, fp, #4
   1b676:	e00d      	b.n	1b694 <__gethex+0x250>
   1b678:	9b05      	ldr	r3, [sp, #20]
   1b67a:	9a08      	ldr	r2, [sp, #32]
   1b67c:	4413      	add	r3, r2
   1b67e:	42bb      	cmp	r3, r7
   1b680:	d3e2      	bcc.n	1b648 <__gethex+0x204>
   1b682:	4618      	mov	r0, r3
   1b684:	9a01      	ldr	r2, [sp, #4]
   1b686:	9903      	ldr	r1, [sp, #12]
   1b688:	9309      	str	r3, [sp, #36]	; 0x24
   1b68a:	f00a f849 	bl	25720 <strncmp>
   1b68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b690:	2800      	cmp	r0, #0
   1b692:	d1d9      	bne.n	1b648 <__gethex+0x204>
   1b694:	461e      	mov	r6, r3
   1b696:	e795      	b.n	1b5c4 <__gethex+0x180>
   1b698:	1eb1      	subs	r1, r6, #2
   1b69a:	4620      	mov	r0, r4
   1b69c:	f009 ffb6 	bl	2560c <__any_on>
   1b6a0:	2800      	cmp	r0, #0
   1b6a2:	d0b6      	beq.n	1b612 <__gethex+0x1ce>
   1b6a4:	f04f 0a03 	mov.w	sl, #3
   1b6a8:	e7b5      	b.n	1b616 <__gethex+0x1d2>
   1b6aa:	da09      	bge.n	1b6c0 <__gethex+0x27c>
   1b6ac:	1bbe      	subs	r6, r7, r6
   1b6ae:	4621      	mov	r1, r4
   1b6b0:	9802      	ldr	r0, [sp, #8]
   1b6b2:	4632      	mov	r2, r6
   1b6b4:	f000 fb12 	bl	1bcdc <__lshift>
   1b6b8:	1bad      	subs	r5, r5, r6
   1b6ba:	4604      	mov	r4, r0
   1b6bc:	f100 0914 	add.w	r9, r0, #20
   1b6c0:	f04f 0a00 	mov.w	sl, #0
   1b6c4:	e7ac      	b.n	1b620 <__gethex+0x1dc>
   1b6c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b6ca:	42ab      	cmp	r3, r5
   1b6cc:	dd6f      	ble.n	1b7ae <__gethex+0x36a>
   1b6ce:	1b5d      	subs	r5, r3, r5
   1b6d0:	42af      	cmp	r7, r5
   1b6d2:	dc34      	bgt.n	1b73e <__gethex+0x2fa>
   1b6d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1b6d8:	2b02      	cmp	r3, #2
   1b6da:	d028      	beq.n	1b72e <__gethex+0x2ea>
   1b6dc:	2b03      	cmp	r3, #3
   1b6de:	d02a      	beq.n	1b736 <__gethex+0x2f2>
   1b6e0:	2b01      	cmp	r3, #1
   1b6e2:	d11b      	bne.n	1b71c <__gethex+0x2d8>
   1b6e4:	42af      	cmp	r7, r5
   1b6e6:	d119      	bne.n	1b71c <__gethex+0x2d8>
   1b6e8:	2f01      	cmp	r7, #1
   1b6ea:	d111      	bne.n	1b710 <__gethex+0x2cc>
   1b6ec:	9a06      	ldr	r2, [sp, #24]
   1b6ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b6f2:	6013      	str	r3, [r2, #0]
   1b6f4:	2301      	movs	r3, #1
   1b6f6:	6123      	str	r3, [r4, #16]
   1b6f8:	f8c9 3000 	str.w	r3, [r9]
   1b6fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b6fe:	2662      	movs	r6, #98	; 0x62
   1b700:	601c      	str	r4, [r3, #0]
   1b702:	e72c      	b.n	1b55e <__gethex+0x11a>
   1b704:	00026bb8 	.word	0x00026bb8
   1b708:	00026f70 	.word	0x00026f70
   1b70c:	00026f81 	.word	0x00026f81
   1b710:	1e79      	subs	r1, r7, #1
   1b712:	4620      	mov	r0, r4
   1b714:	f009 ff7a 	bl	2560c <__any_on>
   1b718:	2800      	cmp	r0, #0
   1b71a:	d1e7      	bne.n	1b6ec <__gethex+0x2a8>
   1b71c:	9802      	ldr	r0, [sp, #8]
   1b71e:	4621      	mov	r1, r4
   1b720:	f000 f910 	bl	1b944 <_Bfree>
   1b724:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b726:	2300      	movs	r3, #0
   1b728:	6013      	str	r3, [r2, #0]
   1b72a:	2650      	movs	r6, #80	; 0x50
   1b72c:	e717      	b.n	1b55e <__gethex+0x11a>
   1b72e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b730:	2b00      	cmp	r3, #0
   1b732:	d1f3      	bne.n	1b71c <__gethex+0x2d8>
   1b734:	e7da      	b.n	1b6ec <__gethex+0x2a8>
   1b736:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b738:	2b00      	cmp	r3, #0
   1b73a:	d1d7      	bne.n	1b6ec <__gethex+0x2a8>
   1b73c:	e7ee      	b.n	1b71c <__gethex+0x2d8>
   1b73e:	1e6e      	subs	r6, r5, #1
   1b740:	f1ba 0f00 	cmp.w	sl, #0
   1b744:	d130      	bne.n	1b7a8 <__gethex+0x364>
   1b746:	b126      	cbz	r6, 1b752 <__gethex+0x30e>
   1b748:	4631      	mov	r1, r6
   1b74a:	4620      	mov	r0, r4
   1b74c:	f009 ff5e 	bl	2560c <__any_on>
   1b750:	4682      	mov	sl, r0
   1b752:	1172      	asrs	r2, r6, #5
   1b754:	2301      	movs	r3, #1
   1b756:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   1b75a:	f006 061f 	and.w	r6, r6, #31
   1b75e:	40b3      	lsls	r3, r6
   1b760:	4213      	tst	r3, r2
   1b762:	4629      	mov	r1, r5
   1b764:	4620      	mov	r0, r4
   1b766:	bf18      	it	ne
   1b768:	f04a 0a02 	orrne.w	sl, sl, #2
   1b76c:	1b7f      	subs	r7, r7, r5
   1b76e:	f009 fd55 	bl	2521c <rshift>
   1b772:	f8d8 5004 	ldr.w	r5, [r8, #4]
   1b776:	2602      	movs	r6, #2
   1b778:	f1ba 0f00 	cmp.w	sl, #0
   1b77c:	d047      	beq.n	1b80e <__gethex+0x3ca>
   1b77e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1b782:	2b02      	cmp	r3, #2
   1b784:	d015      	beq.n	1b7b2 <__gethex+0x36e>
   1b786:	2b03      	cmp	r3, #3
   1b788:	d017      	beq.n	1b7ba <__gethex+0x376>
   1b78a:	2b01      	cmp	r3, #1
   1b78c:	d109      	bne.n	1b7a2 <__gethex+0x35e>
   1b78e:	f01a 0f02 	tst.w	sl, #2
   1b792:	d006      	beq.n	1b7a2 <__gethex+0x35e>
   1b794:	f8d9 3000 	ldr.w	r3, [r9]
   1b798:	ea4a 0a03 	orr.w	sl, sl, r3
   1b79c:	f01a 0f01 	tst.w	sl, #1
   1b7a0:	d10e      	bne.n	1b7c0 <__gethex+0x37c>
   1b7a2:	f046 0610 	orr.w	r6, r6, #16
   1b7a6:	e032      	b.n	1b80e <__gethex+0x3ca>
   1b7a8:	f04f 0a01 	mov.w	sl, #1
   1b7ac:	e7d1      	b.n	1b752 <__gethex+0x30e>
   1b7ae:	2601      	movs	r6, #1
   1b7b0:	e7e2      	b.n	1b778 <__gethex+0x334>
   1b7b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b7b4:	f1c3 0301 	rsb	r3, r3, #1
   1b7b8:	9315      	str	r3, [sp, #84]	; 0x54
   1b7ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b7bc:	2b00      	cmp	r3, #0
   1b7be:	d0f0      	beq.n	1b7a2 <__gethex+0x35e>
   1b7c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
   1b7c4:	f104 0314 	add.w	r3, r4, #20
   1b7c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   1b7cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   1b7d0:	f04f 0c00 	mov.w	ip, #0
   1b7d4:	4618      	mov	r0, r3
   1b7d6:	f853 2b04 	ldr.w	r2, [r3], #4
   1b7da:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1b7de:	d01b      	beq.n	1b818 <__gethex+0x3d4>
   1b7e0:	3201      	adds	r2, #1
   1b7e2:	6002      	str	r2, [r0, #0]
   1b7e4:	2e02      	cmp	r6, #2
   1b7e6:	f104 0314 	add.w	r3, r4, #20
   1b7ea:	d13c      	bne.n	1b866 <__gethex+0x422>
   1b7ec:	f8d8 2000 	ldr.w	r2, [r8]
   1b7f0:	3a01      	subs	r2, #1
   1b7f2:	42ba      	cmp	r2, r7
   1b7f4:	d109      	bne.n	1b80a <__gethex+0x3c6>
   1b7f6:	1179      	asrs	r1, r7, #5
   1b7f8:	2201      	movs	r2, #1
   1b7fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1b7fe:	f007 071f 	and.w	r7, r7, #31
   1b802:	fa02 f707 	lsl.w	r7, r2, r7
   1b806:	421f      	tst	r7, r3
   1b808:	d13a      	bne.n	1b880 <__gethex+0x43c>
   1b80a:	f046 0620 	orr.w	r6, r6, #32
   1b80e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b810:	601c      	str	r4, [r3, #0]
   1b812:	9b06      	ldr	r3, [sp, #24]
   1b814:	601d      	str	r5, [r3, #0]
   1b816:	e6a2      	b.n	1b55e <__gethex+0x11a>
   1b818:	4299      	cmp	r1, r3
   1b81a:	f843 cc04 	str.w	ip, [r3, #-4]
   1b81e:	d8d9      	bhi.n	1b7d4 <__gethex+0x390>
   1b820:	68a3      	ldr	r3, [r4, #8]
   1b822:	459b      	cmp	fp, r3
   1b824:	db17      	blt.n	1b856 <__gethex+0x412>
   1b826:	6861      	ldr	r1, [r4, #4]
   1b828:	9802      	ldr	r0, [sp, #8]
   1b82a:	3101      	adds	r1, #1
   1b82c:	f000 f84a 	bl	1b8c4 <_Balloc>
   1b830:	4681      	mov	r9, r0
   1b832:	b918      	cbnz	r0, 1b83c <__gethex+0x3f8>
   1b834:	4b1a      	ldr	r3, [pc, #104]	; (1b8a0 <__gethex+0x45c>)
   1b836:	4602      	mov	r2, r0
   1b838:	2184      	movs	r1, #132	; 0x84
   1b83a:	e6b2      	b.n	1b5a2 <__gethex+0x15e>
   1b83c:	6922      	ldr	r2, [r4, #16]
   1b83e:	3202      	adds	r2, #2
   1b840:	f104 010c 	add.w	r1, r4, #12
   1b844:	0092      	lsls	r2, r2, #2
   1b846:	300c      	adds	r0, #12
   1b848:	f009 fadf 	bl	24e0a <memcpy>
   1b84c:	4621      	mov	r1, r4
   1b84e:	9802      	ldr	r0, [sp, #8]
   1b850:	f000 f878 	bl	1b944 <_Bfree>
   1b854:	464c      	mov	r4, r9
   1b856:	6923      	ldr	r3, [r4, #16]
   1b858:	1c5a      	adds	r2, r3, #1
   1b85a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1b85e:	6122      	str	r2, [r4, #16]
   1b860:	2201      	movs	r2, #1
   1b862:	615a      	str	r2, [r3, #20]
   1b864:	e7be      	b.n	1b7e4 <__gethex+0x3a0>
   1b866:	6922      	ldr	r2, [r4, #16]
   1b868:	455a      	cmp	r2, fp
   1b86a:	dd0b      	ble.n	1b884 <__gethex+0x440>
   1b86c:	2101      	movs	r1, #1
   1b86e:	4620      	mov	r0, r4
   1b870:	f009 fcd4 	bl	2521c <rshift>
   1b874:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b878:	3501      	adds	r5, #1
   1b87a:	42ab      	cmp	r3, r5
   1b87c:	f6ff aed4 	blt.w	1b628 <__gethex+0x1e4>
   1b880:	2601      	movs	r6, #1
   1b882:	e7c2      	b.n	1b80a <__gethex+0x3c6>
   1b884:	f017 071f 	ands.w	r7, r7, #31
   1b888:	d0fa      	beq.n	1b880 <__gethex+0x43c>
   1b88a:	4453      	add	r3, sl
   1b88c:	f1c7 0720 	rsb	r7, r7, #32
   1b890:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1b894:	f009 fdfb 	bl	2548e <__hi0bits>
   1b898:	42b8      	cmp	r0, r7
   1b89a:	dbe7      	blt.n	1b86c <__gethex+0x428>
   1b89c:	e7f0      	b.n	1b880 <__gethex+0x43c>
   1b89e:	bf00      	nop
   1b8a0:	00026f70 	.word	0x00026f70

0001b8a4 <_localeconv_r>:
   1b8a4:	4800      	ldr	r0, [pc, #0]	; (1b8a8 <_localeconv_r+0x4>)
   1b8a6:	4770      	bx	lr
   1b8a8:	20000704 	.word	0x20000704

0001b8ac <__malloc_lock>:
   1b8ac:	4801      	ldr	r0, [pc, #4]	; (1b8b4 <__malloc_lock+0x8>)
   1b8ae:	f006 ba7f 	b.w	21db0 <__retarget_lock_acquire_recursive>
   1b8b2:	bf00      	nop
   1b8b4:	20000824 	.word	0x20000824

0001b8b8 <__malloc_unlock>:
   1b8b8:	4801      	ldr	r0, [pc, #4]	; (1b8c0 <__malloc_unlock+0x8>)
   1b8ba:	f006 ba81 	b.w	21dc0 <__retarget_lock_release_recursive>
   1b8be:	bf00      	nop
   1b8c0:	20000824 	.word	0x20000824

0001b8c4 <_Balloc>:
   1b8c4:	b570      	push	{r4, r5, r6, lr}
   1b8c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1b8c8:	4604      	mov	r4, r0
   1b8ca:	460d      	mov	r5, r1
   1b8cc:	b976      	cbnz	r6, 1b8ec <_Balloc+0x28>
   1b8ce:	2010      	movs	r0, #16
   1b8d0:	f7fe feea 	bl	1a6a8 <malloc>
   1b8d4:	4602      	mov	r2, r0
   1b8d6:	6260      	str	r0, [r4, #36]	; 0x24
   1b8d8:	b920      	cbnz	r0, 1b8e4 <_Balloc+0x20>
   1b8da:	4b18      	ldr	r3, [pc, #96]	; (1b93c <_Balloc+0x78>)
   1b8dc:	4818      	ldr	r0, [pc, #96]	; (1b940 <_Balloc+0x7c>)
   1b8de:	2166      	movs	r1, #102	; 0x66
   1b8e0:	f000 fcc0 	bl	1c264 <__assert_func>
   1b8e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1b8e8:	6006      	str	r6, [r0, #0]
   1b8ea:	60c6      	str	r6, [r0, #12]
   1b8ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1b8ee:	68f3      	ldr	r3, [r6, #12]
   1b8f0:	b183      	cbz	r3, 1b914 <_Balloc+0x50>
   1b8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b8f4:	68db      	ldr	r3, [r3, #12]
   1b8f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1b8fa:	b9b8      	cbnz	r0, 1b92c <_Balloc+0x68>
   1b8fc:	2101      	movs	r1, #1
   1b8fe:	fa01 f605 	lsl.w	r6, r1, r5
   1b902:	1d72      	adds	r2, r6, #5
   1b904:	0092      	lsls	r2, r2, #2
   1b906:	4620      	mov	r0, r4
   1b908:	f009 fea1 	bl	2564e <_calloc_r>
   1b90c:	b160      	cbz	r0, 1b928 <_Balloc+0x64>
   1b90e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1b912:	e00e      	b.n	1b932 <_Balloc+0x6e>
   1b914:	2221      	movs	r2, #33	; 0x21
   1b916:	2104      	movs	r1, #4
   1b918:	4620      	mov	r0, r4
   1b91a:	f009 fe98 	bl	2564e <_calloc_r>
   1b91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b920:	60f0      	str	r0, [r6, #12]
   1b922:	68db      	ldr	r3, [r3, #12]
   1b924:	2b00      	cmp	r3, #0
   1b926:	d1e4      	bne.n	1b8f2 <_Balloc+0x2e>
   1b928:	2000      	movs	r0, #0
   1b92a:	bd70      	pop	{r4, r5, r6, pc}
   1b92c:	6802      	ldr	r2, [r0, #0]
   1b92e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   1b932:	2300      	movs	r3, #0
   1b934:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1b938:	e7f7      	b.n	1b92a <_Balloc+0x66>
   1b93a:	bf00      	nop
   1b93c:	00026eff 	.word	0x00026eff
   1b940:	00026fed 	.word	0x00026fed

0001b944 <_Bfree>:
   1b944:	b570      	push	{r4, r5, r6, lr}
   1b946:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1b948:	4605      	mov	r5, r0
   1b94a:	460c      	mov	r4, r1
   1b94c:	b976      	cbnz	r6, 1b96c <_Bfree+0x28>
   1b94e:	2010      	movs	r0, #16
   1b950:	f7fe feaa 	bl	1a6a8 <malloc>
   1b954:	4602      	mov	r2, r0
   1b956:	6268      	str	r0, [r5, #36]	; 0x24
   1b958:	b920      	cbnz	r0, 1b964 <_Bfree+0x20>
   1b95a:	4b09      	ldr	r3, [pc, #36]	; (1b980 <_Bfree+0x3c>)
   1b95c:	4809      	ldr	r0, [pc, #36]	; (1b984 <_Bfree+0x40>)
   1b95e:	218a      	movs	r1, #138	; 0x8a
   1b960:	f000 fc80 	bl	1c264 <__assert_func>
   1b964:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1b968:	6006      	str	r6, [r0, #0]
   1b96a:	60c6      	str	r6, [r0, #12]
   1b96c:	b13c      	cbz	r4, 1b97e <_Bfree+0x3a>
   1b96e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b970:	6862      	ldr	r2, [r4, #4]
   1b972:	68db      	ldr	r3, [r3, #12]
   1b974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1b978:	6021      	str	r1, [r4, #0]
   1b97a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1b97e:	bd70      	pop	{r4, r5, r6, pc}
   1b980:	00026eff 	.word	0x00026eff
   1b984:	00026fed 	.word	0x00026fed

0001b988 <__multadd>:
   1b988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b98c:	690d      	ldr	r5, [r1, #16]
   1b98e:	4607      	mov	r7, r0
   1b990:	460c      	mov	r4, r1
   1b992:	461e      	mov	r6, r3
   1b994:	f101 0c14 	add.w	ip, r1, #20
   1b998:	2000      	movs	r0, #0
   1b99a:	f8dc 3000 	ldr.w	r3, [ip]
   1b99e:	b299      	uxth	r1, r3
   1b9a0:	fb02 6101 	mla	r1, r2, r1, r6
   1b9a4:	0c1e      	lsrs	r6, r3, #16
   1b9a6:	0c0b      	lsrs	r3, r1, #16
   1b9a8:	fb02 3306 	mla	r3, r2, r6, r3
   1b9ac:	b289      	uxth	r1, r1
   1b9ae:	3001      	adds	r0, #1
   1b9b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   1b9b4:	4285      	cmp	r5, r0
   1b9b6:	f84c 1b04 	str.w	r1, [ip], #4
   1b9ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1b9be:	dcec      	bgt.n	1b99a <__multadd+0x12>
   1b9c0:	b30e      	cbz	r6, 1ba06 <__multadd+0x7e>
   1b9c2:	68a3      	ldr	r3, [r4, #8]
   1b9c4:	42ab      	cmp	r3, r5
   1b9c6:	dc19      	bgt.n	1b9fc <__multadd+0x74>
   1b9c8:	6861      	ldr	r1, [r4, #4]
   1b9ca:	4638      	mov	r0, r7
   1b9cc:	3101      	adds	r1, #1
   1b9ce:	f7ff ff79 	bl	1b8c4 <_Balloc>
   1b9d2:	4680      	mov	r8, r0
   1b9d4:	b928      	cbnz	r0, 1b9e2 <__multadd+0x5a>
   1b9d6:	4602      	mov	r2, r0
   1b9d8:	4b0c      	ldr	r3, [pc, #48]	; (1ba0c <__multadd+0x84>)
   1b9da:	480d      	ldr	r0, [pc, #52]	; (1ba10 <__multadd+0x88>)
   1b9dc:	21b5      	movs	r1, #181	; 0xb5
   1b9de:	f000 fc41 	bl	1c264 <__assert_func>
   1b9e2:	6922      	ldr	r2, [r4, #16]
   1b9e4:	3202      	adds	r2, #2
   1b9e6:	f104 010c 	add.w	r1, r4, #12
   1b9ea:	0092      	lsls	r2, r2, #2
   1b9ec:	300c      	adds	r0, #12
   1b9ee:	f009 fa0c 	bl	24e0a <memcpy>
   1b9f2:	4621      	mov	r1, r4
   1b9f4:	4638      	mov	r0, r7
   1b9f6:	f7ff ffa5 	bl	1b944 <_Bfree>
   1b9fa:	4644      	mov	r4, r8
   1b9fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   1ba00:	3501      	adds	r5, #1
   1ba02:	615e      	str	r6, [r3, #20]
   1ba04:	6125      	str	r5, [r4, #16]
   1ba06:	4620      	mov	r0, r4
   1ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba0c:	00026f70 	.word	0x00026f70
   1ba10:	00026fed 	.word	0x00026fed

0001ba14 <__s2b>:
   1ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ba18:	460c      	mov	r4, r1
   1ba1a:	4615      	mov	r5, r2
   1ba1c:	461f      	mov	r7, r3
   1ba1e:	2209      	movs	r2, #9
   1ba20:	3308      	adds	r3, #8
   1ba22:	4606      	mov	r6, r0
   1ba24:	fb93 f3f2 	sdiv	r3, r3, r2
   1ba28:	2100      	movs	r1, #0
   1ba2a:	2201      	movs	r2, #1
   1ba2c:	429a      	cmp	r2, r3
   1ba2e:	db09      	blt.n	1ba44 <__s2b+0x30>
   1ba30:	4630      	mov	r0, r6
   1ba32:	f7ff ff47 	bl	1b8c4 <_Balloc>
   1ba36:	b940      	cbnz	r0, 1ba4a <__s2b+0x36>
   1ba38:	4602      	mov	r2, r0
   1ba3a:	4b19      	ldr	r3, [pc, #100]	; (1baa0 <__s2b+0x8c>)
   1ba3c:	4819      	ldr	r0, [pc, #100]	; (1baa4 <__s2b+0x90>)
   1ba3e:	21ce      	movs	r1, #206	; 0xce
   1ba40:	f000 fc10 	bl	1c264 <__assert_func>
   1ba44:	0052      	lsls	r2, r2, #1
   1ba46:	3101      	adds	r1, #1
   1ba48:	e7f0      	b.n	1ba2c <__s2b+0x18>
   1ba4a:	9b08      	ldr	r3, [sp, #32]
   1ba4c:	6143      	str	r3, [r0, #20]
   1ba4e:	2d09      	cmp	r5, #9
   1ba50:	f04f 0301 	mov.w	r3, #1
   1ba54:	6103      	str	r3, [r0, #16]
   1ba56:	dd16      	ble.n	1ba86 <__s2b+0x72>
   1ba58:	f104 0909 	add.w	r9, r4, #9
   1ba5c:	46c8      	mov	r8, r9
   1ba5e:	442c      	add	r4, r5
   1ba60:	f818 3b01 	ldrb.w	r3, [r8], #1
   1ba64:	4601      	mov	r1, r0
   1ba66:	3b30      	subs	r3, #48	; 0x30
   1ba68:	220a      	movs	r2, #10
   1ba6a:	4630      	mov	r0, r6
   1ba6c:	f7ff ff8c 	bl	1b988 <__multadd>
   1ba70:	45a0      	cmp	r8, r4
   1ba72:	d1f5      	bne.n	1ba60 <__s2b+0x4c>
   1ba74:	f1a5 0408 	sub.w	r4, r5, #8
   1ba78:	444c      	add	r4, r9
   1ba7a:	1b2d      	subs	r5, r5, r4
   1ba7c:	1963      	adds	r3, r4, r5
   1ba7e:	42bb      	cmp	r3, r7
   1ba80:	db04      	blt.n	1ba8c <__s2b+0x78>
   1ba82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ba86:	340a      	adds	r4, #10
   1ba88:	2509      	movs	r5, #9
   1ba8a:	e7f6      	b.n	1ba7a <__s2b+0x66>
   1ba8c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1ba90:	4601      	mov	r1, r0
   1ba92:	3b30      	subs	r3, #48	; 0x30
   1ba94:	220a      	movs	r2, #10
   1ba96:	4630      	mov	r0, r6
   1ba98:	f7ff ff76 	bl	1b988 <__multadd>
   1ba9c:	e7ee      	b.n	1ba7c <__s2b+0x68>
   1ba9e:	bf00      	nop
   1baa0:	00026f70 	.word	0x00026f70
   1baa4:	00026fed 	.word	0x00026fed

0001baa8 <__i2b>:
   1baa8:	b510      	push	{r4, lr}
   1baaa:	460c      	mov	r4, r1
   1baac:	2101      	movs	r1, #1
   1baae:	f7ff ff09 	bl	1b8c4 <_Balloc>
   1bab2:	4602      	mov	r2, r0
   1bab4:	b928      	cbnz	r0, 1bac2 <__i2b+0x1a>
   1bab6:	4b05      	ldr	r3, [pc, #20]	; (1bacc <__i2b+0x24>)
   1bab8:	4805      	ldr	r0, [pc, #20]	; (1bad0 <__i2b+0x28>)
   1baba:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1babe:	f000 fbd1 	bl	1c264 <__assert_func>
   1bac2:	2301      	movs	r3, #1
   1bac4:	6144      	str	r4, [r0, #20]
   1bac6:	6103      	str	r3, [r0, #16]
   1bac8:	bd10      	pop	{r4, pc}
   1baca:	bf00      	nop
   1bacc:	00026f70 	.word	0x00026f70
   1bad0:	00026fed 	.word	0x00026fed

0001bad4 <__multiply>:
   1bad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bad8:	4614      	mov	r4, r2
   1bada:	690a      	ldr	r2, [r1, #16]
   1badc:	6923      	ldr	r3, [r4, #16]
   1bade:	429a      	cmp	r2, r3
   1bae0:	bfa8      	it	ge
   1bae2:	4623      	movge	r3, r4
   1bae4:	460f      	mov	r7, r1
   1bae6:	bfa4      	itt	ge
   1bae8:	460c      	movge	r4, r1
   1baea:	461f      	movge	r7, r3
   1baec:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1baf0:	f8d7 9010 	ldr.w	r9, [r7, #16]
   1baf4:	68a3      	ldr	r3, [r4, #8]
   1baf6:	6861      	ldr	r1, [r4, #4]
   1baf8:	eb0a 0609 	add.w	r6, sl, r9
   1bafc:	42b3      	cmp	r3, r6
   1bafe:	b085      	sub	sp, #20
   1bb00:	bfb8      	it	lt
   1bb02:	3101      	addlt	r1, #1
   1bb04:	f7ff fede 	bl	1b8c4 <_Balloc>
   1bb08:	b930      	cbnz	r0, 1bb18 <__multiply+0x44>
   1bb0a:	4602      	mov	r2, r0
   1bb0c:	4b44      	ldr	r3, [pc, #272]	; (1bc20 <__multiply+0x14c>)
   1bb0e:	4845      	ldr	r0, [pc, #276]	; (1bc24 <__multiply+0x150>)
   1bb10:	f240 115d 	movw	r1, #349	; 0x15d
   1bb14:	f000 fba6 	bl	1c264 <__assert_func>
   1bb18:	f100 0514 	add.w	r5, r0, #20
   1bb1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   1bb20:	462b      	mov	r3, r5
   1bb22:	2200      	movs	r2, #0
   1bb24:	4543      	cmp	r3, r8
   1bb26:	d321      	bcc.n	1bb6c <__multiply+0x98>
   1bb28:	f107 0114 	add.w	r1, r7, #20
   1bb2c:	f104 0214 	add.w	r2, r4, #20
   1bb30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   1bb34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   1bb38:	9302      	str	r3, [sp, #8]
   1bb3a:	1b13      	subs	r3, r2, r4
   1bb3c:	3b15      	subs	r3, #21
   1bb3e:	f023 0303 	bic.w	r3, r3, #3
   1bb42:	3304      	adds	r3, #4
   1bb44:	f104 0715 	add.w	r7, r4, #21
   1bb48:	42ba      	cmp	r2, r7
   1bb4a:	bf38      	it	cc
   1bb4c:	2304      	movcc	r3, #4
   1bb4e:	9301      	str	r3, [sp, #4]
   1bb50:	9b02      	ldr	r3, [sp, #8]
   1bb52:	9103      	str	r1, [sp, #12]
   1bb54:	428b      	cmp	r3, r1
   1bb56:	d80c      	bhi.n	1bb72 <__multiply+0x9e>
   1bb58:	2e00      	cmp	r6, #0
   1bb5a:	dd03      	ble.n	1bb64 <__multiply+0x90>
   1bb5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1bb60:	2b00      	cmp	r3, #0
   1bb62:	d05b      	beq.n	1bc1c <__multiply+0x148>
   1bb64:	6106      	str	r6, [r0, #16]
   1bb66:	b005      	add	sp, #20
   1bb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb6c:	f843 2b04 	str.w	r2, [r3], #4
   1bb70:	e7d8      	b.n	1bb24 <__multiply+0x50>
   1bb72:	f8b1 a000 	ldrh.w	sl, [r1]
   1bb76:	f1ba 0f00 	cmp.w	sl, #0
   1bb7a:	d024      	beq.n	1bbc6 <__multiply+0xf2>
   1bb7c:	f104 0e14 	add.w	lr, r4, #20
   1bb80:	46a9      	mov	r9, r5
   1bb82:	f04f 0c00 	mov.w	ip, #0
   1bb86:	f85e 7b04 	ldr.w	r7, [lr], #4
   1bb8a:	f8d9 3000 	ldr.w	r3, [r9]
   1bb8e:	fa1f fb87 	uxth.w	fp, r7
   1bb92:	b29b      	uxth	r3, r3
   1bb94:	fb0a 330b 	mla	r3, sl, fp, r3
   1bb98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   1bb9c:	f8d9 7000 	ldr.w	r7, [r9]
   1bba0:	4463      	add	r3, ip
   1bba2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1bba6:	fb0a c70b 	mla	r7, sl, fp, ip
   1bbaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   1bbae:	b29b      	uxth	r3, r3
   1bbb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1bbb4:	4572      	cmp	r2, lr
   1bbb6:	f849 3b04 	str.w	r3, [r9], #4
   1bbba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1bbbe:	d8e2      	bhi.n	1bb86 <__multiply+0xb2>
   1bbc0:	9b01      	ldr	r3, [sp, #4]
   1bbc2:	f845 c003 	str.w	ip, [r5, r3]
   1bbc6:	9b03      	ldr	r3, [sp, #12]
   1bbc8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   1bbcc:	3104      	adds	r1, #4
   1bbce:	f1b9 0f00 	cmp.w	r9, #0
   1bbd2:	d021      	beq.n	1bc18 <__multiply+0x144>
   1bbd4:	682b      	ldr	r3, [r5, #0]
   1bbd6:	f104 0c14 	add.w	ip, r4, #20
   1bbda:	46ae      	mov	lr, r5
   1bbdc:	f04f 0a00 	mov.w	sl, #0
   1bbe0:	f8bc b000 	ldrh.w	fp, [ip]
   1bbe4:	f8be 7002 	ldrh.w	r7, [lr, #2]
   1bbe8:	fb09 770b 	mla	r7, r9, fp, r7
   1bbec:	4457      	add	r7, sl
   1bbee:	b29b      	uxth	r3, r3
   1bbf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1bbf4:	f84e 3b04 	str.w	r3, [lr], #4
   1bbf8:	f85c 3b04 	ldr.w	r3, [ip], #4
   1bbfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1bc00:	f8be 3000 	ldrh.w	r3, [lr]
   1bc04:	fb09 330a 	mla	r3, r9, sl, r3
   1bc08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   1bc0c:	4562      	cmp	r2, ip
   1bc0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1bc12:	d8e5      	bhi.n	1bbe0 <__multiply+0x10c>
   1bc14:	9f01      	ldr	r7, [sp, #4]
   1bc16:	51eb      	str	r3, [r5, r7]
   1bc18:	3504      	adds	r5, #4
   1bc1a:	e799      	b.n	1bb50 <__multiply+0x7c>
   1bc1c:	3e01      	subs	r6, #1
   1bc1e:	e79b      	b.n	1bb58 <__multiply+0x84>
   1bc20:	00026f70 	.word	0x00026f70
   1bc24:	00026fed 	.word	0x00026fed

0001bc28 <__pow5mult>:
   1bc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bc2c:	4615      	mov	r5, r2
   1bc2e:	f012 0203 	ands.w	r2, r2, #3
   1bc32:	4607      	mov	r7, r0
   1bc34:	460e      	mov	r6, r1
   1bc36:	d007      	beq.n	1bc48 <__pow5mult+0x20>
   1bc38:	4c25      	ldr	r4, [pc, #148]	; (1bcd0 <__pow5mult+0xa8>)
   1bc3a:	3a01      	subs	r2, #1
   1bc3c:	2300      	movs	r3, #0
   1bc3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1bc42:	f7ff fea1 	bl	1b988 <__multadd>
   1bc46:	4606      	mov	r6, r0
   1bc48:	10ad      	asrs	r5, r5, #2
   1bc4a:	d03d      	beq.n	1bcc8 <__pow5mult+0xa0>
   1bc4c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1bc4e:	b97c      	cbnz	r4, 1bc70 <__pow5mult+0x48>
   1bc50:	2010      	movs	r0, #16
   1bc52:	f7fe fd29 	bl	1a6a8 <malloc>
   1bc56:	4602      	mov	r2, r0
   1bc58:	6278      	str	r0, [r7, #36]	; 0x24
   1bc5a:	b928      	cbnz	r0, 1bc68 <__pow5mult+0x40>
   1bc5c:	4b1d      	ldr	r3, [pc, #116]	; (1bcd4 <__pow5mult+0xac>)
   1bc5e:	481e      	ldr	r0, [pc, #120]	; (1bcd8 <__pow5mult+0xb0>)
   1bc60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   1bc64:	f000 fafe 	bl	1c264 <__assert_func>
   1bc68:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1bc6c:	6004      	str	r4, [r0, #0]
   1bc6e:	60c4      	str	r4, [r0, #12]
   1bc70:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   1bc74:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1bc78:	b94c      	cbnz	r4, 1bc8e <__pow5mult+0x66>
   1bc7a:	f240 2171 	movw	r1, #625	; 0x271
   1bc7e:	4638      	mov	r0, r7
   1bc80:	f7ff ff12 	bl	1baa8 <__i2b>
   1bc84:	2300      	movs	r3, #0
   1bc86:	f8c8 0008 	str.w	r0, [r8, #8]
   1bc8a:	4604      	mov	r4, r0
   1bc8c:	6003      	str	r3, [r0, #0]
   1bc8e:	f04f 0900 	mov.w	r9, #0
   1bc92:	07eb      	lsls	r3, r5, #31
   1bc94:	d50a      	bpl.n	1bcac <__pow5mult+0x84>
   1bc96:	4631      	mov	r1, r6
   1bc98:	4622      	mov	r2, r4
   1bc9a:	4638      	mov	r0, r7
   1bc9c:	f7ff ff1a 	bl	1bad4 <__multiply>
   1bca0:	4631      	mov	r1, r6
   1bca2:	4680      	mov	r8, r0
   1bca4:	4638      	mov	r0, r7
   1bca6:	f7ff fe4d 	bl	1b944 <_Bfree>
   1bcaa:	4646      	mov	r6, r8
   1bcac:	106d      	asrs	r5, r5, #1
   1bcae:	d00b      	beq.n	1bcc8 <__pow5mult+0xa0>
   1bcb0:	6820      	ldr	r0, [r4, #0]
   1bcb2:	b938      	cbnz	r0, 1bcc4 <__pow5mult+0x9c>
   1bcb4:	4622      	mov	r2, r4
   1bcb6:	4621      	mov	r1, r4
   1bcb8:	4638      	mov	r0, r7
   1bcba:	f7ff ff0b 	bl	1bad4 <__multiply>
   1bcbe:	6020      	str	r0, [r4, #0]
   1bcc0:	f8c0 9000 	str.w	r9, [r0]
   1bcc4:	4604      	mov	r4, r0
   1bcc6:	e7e4      	b.n	1bc92 <__pow5mult+0x6a>
   1bcc8:	4630      	mov	r0, r6
   1bcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bcce:	bf00      	nop
   1bcd0:	00026bc4 	.word	0x00026bc4
   1bcd4:	00026eff 	.word	0x00026eff
   1bcd8:	00026fed 	.word	0x00026fed

0001bcdc <__lshift>:
   1bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bce0:	460c      	mov	r4, r1
   1bce2:	6849      	ldr	r1, [r1, #4]
   1bce4:	6923      	ldr	r3, [r4, #16]
   1bce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1bcea:	68a3      	ldr	r3, [r4, #8]
   1bcec:	4607      	mov	r7, r0
   1bcee:	4691      	mov	r9, r2
   1bcf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1bcf4:	f108 0601 	add.w	r6, r8, #1
   1bcf8:	42b3      	cmp	r3, r6
   1bcfa:	db0b      	blt.n	1bd14 <__lshift+0x38>
   1bcfc:	4638      	mov	r0, r7
   1bcfe:	f7ff fde1 	bl	1b8c4 <_Balloc>
   1bd02:	4605      	mov	r5, r0
   1bd04:	b948      	cbnz	r0, 1bd1a <__lshift+0x3e>
   1bd06:	4602      	mov	r2, r0
   1bd08:	4b28      	ldr	r3, [pc, #160]	; (1bdac <__lshift+0xd0>)
   1bd0a:	4829      	ldr	r0, [pc, #164]	; (1bdb0 <__lshift+0xd4>)
   1bd0c:	f240 11d9 	movw	r1, #473	; 0x1d9
   1bd10:	f000 faa8 	bl	1c264 <__assert_func>
   1bd14:	3101      	adds	r1, #1
   1bd16:	005b      	lsls	r3, r3, #1
   1bd18:	e7ee      	b.n	1bcf8 <__lshift+0x1c>
   1bd1a:	2300      	movs	r3, #0
   1bd1c:	f100 0114 	add.w	r1, r0, #20
   1bd20:	f100 0210 	add.w	r2, r0, #16
   1bd24:	4618      	mov	r0, r3
   1bd26:	4553      	cmp	r3, sl
   1bd28:	db33      	blt.n	1bd92 <__lshift+0xb6>
   1bd2a:	6920      	ldr	r0, [r4, #16]
   1bd2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   1bd30:	f104 0314 	add.w	r3, r4, #20
   1bd34:	f019 091f 	ands.w	r9, r9, #31
   1bd38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1bd3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1bd40:	d02b      	beq.n	1bd9a <__lshift+0xbe>
   1bd42:	f1c9 0e20 	rsb	lr, r9, #32
   1bd46:	468a      	mov	sl, r1
   1bd48:	2200      	movs	r2, #0
   1bd4a:	6818      	ldr	r0, [r3, #0]
   1bd4c:	fa00 f009 	lsl.w	r0, r0, r9
   1bd50:	4310      	orrs	r0, r2
   1bd52:	f84a 0b04 	str.w	r0, [sl], #4
   1bd56:	f853 2b04 	ldr.w	r2, [r3], #4
   1bd5a:	459c      	cmp	ip, r3
   1bd5c:	fa22 f20e 	lsr.w	r2, r2, lr
   1bd60:	d8f3      	bhi.n	1bd4a <__lshift+0x6e>
   1bd62:	ebac 0304 	sub.w	r3, ip, r4
   1bd66:	3b15      	subs	r3, #21
   1bd68:	f023 0303 	bic.w	r3, r3, #3
   1bd6c:	3304      	adds	r3, #4
   1bd6e:	f104 0015 	add.w	r0, r4, #21
   1bd72:	4584      	cmp	ip, r0
   1bd74:	bf38      	it	cc
   1bd76:	2304      	movcc	r3, #4
   1bd78:	50ca      	str	r2, [r1, r3]
   1bd7a:	b10a      	cbz	r2, 1bd80 <__lshift+0xa4>
   1bd7c:	f108 0602 	add.w	r6, r8, #2
   1bd80:	3e01      	subs	r6, #1
   1bd82:	4638      	mov	r0, r7
   1bd84:	612e      	str	r6, [r5, #16]
   1bd86:	4621      	mov	r1, r4
   1bd88:	f7ff fddc 	bl	1b944 <_Bfree>
   1bd8c:	4628      	mov	r0, r5
   1bd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bd92:	f842 0f04 	str.w	r0, [r2, #4]!
   1bd96:	3301      	adds	r3, #1
   1bd98:	e7c5      	b.n	1bd26 <__lshift+0x4a>
   1bd9a:	3904      	subs	r1, #4
   1bd9c:	f853 2b04 	ldr.w	r2, [r3], #4
   1bda0:	f841 2f04 	str.w	r2, [r1, #4]!
   1bda4:	459c      	cmp	ip, r3
   1bda6:	d8f9      	bhi.n	1bd9c <__lshift+0xc0>
   1bda8:	e7ea      	b.n	1bd80 <__lshift+0xa4>
   1bdaa:	bf00      	nop
   1bdac:	00026f70 	.word	0x00026f70
   1bdb0:	00026fed 	.word	0x00026fed

0001bdb4 <__mdiff>:
   1bdb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdb8:	4689      	mov	r9, r1
   1bdba:	4606      	mov	r6, r0
   1bdbc:	4611      	mov	r1, r2
   1bdbe:	4648      	mov	r0, r9
   1bdc0:	4614      	mov	r4, r2
   1bdc2:	f009 fbb3 	bl	2552c <__mcmp>
   1bdc6:	1e05      	subs	r5, r0, #0
   1bdc8:	d112      	bne.n	1bdf0 <__mdiff+0x3c>
   1bdca:	4629      	mov	r1, r5
   1bdcc:	4630      	mov	r0, r6
   1bdce:	f7ff fd79 	bl	1b8c4 <_Balloc>
   1bdd2:	4602      	mov	r2, r0
   1bdd4:	b928      	cbnz	r0, 1bde2 <__mdiff+0x2e>
   1bdd6:	4b3f      	ldr	r3, [pc, #252]	; (1bed4 <__mdiff+0x120>)
   1bdd8:	f240 2132 	movw	r1, #562	; 0x232
   1bddc:	483e      	ldr	r0, [pc, #248]	; (1bed8 <__mdiff+0x124>)
   1bdde:	f000 fa41 	bl	1c264 <__assert_func>
   1bde2:	2301      	movs	r3, #1
   1bde4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1bde8:	4610      	mov	r0, r2
   1bdea:	b003      	add	sp, #12
   1bdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdf0:	bfbc      	itt	lt
   1bdf2:	464b      	movlt	r3, r9
   1bdf4:	46a1      	movlt	r9, r4
   1bdf6:	4630      	mov	r0, r6
   1bdf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1bdfc:	bfba      	itte	lt
   1bdfe:	461c      	movlt	r4, r3
   1be00:	2501      	movlt	r5, #1
   1be02:	2500      	movge	r5, #0
   1be04:	f7ff fd5e 	bl	1b8c4 <_Balloc>
   1be08:	4602      	mov	r2, r0
   1be0a:	b918      	cbnz	r0, 1be14 <__mdiff+0x60>
   1be0c:	4b31      	ldr	r3, [pc, #196]	; (1bed4 <__mdiff+0x120>)
   1be0e:	f44f 7110 	mov.w	r1, #576	; 0x240
   1be12:	e7e3      	b.n	1bddc <__mdiff+0x28>
   1be14:	f8d9 7010 	ldr.w	r7, [r9, #16]
   1be18:	6926      	ldr	r6, [r4, #16]
   1be1a:	60c5      	str	r5, [r0, #12]
   1be1c:	f109 0310 	add.w	r3, r9, #16
   1be20:	f109 0514 	add.w	r5, r9, #20
   1be24:	f104 0e14 	add.w	lr, r4, #20
   1be28:	f100 0b14 	add.w	fp, r0, #20
   1be2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   1be30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   1be34:	9301      	str	r3, [sp, #4]
   1be36:	46d9      	mov	r9, fp
   1be38:	f04f 0c00 	mov.w	ip, #0
   1be3c:	9b01      	ldr	r3, [sp, #4]
   1be3e:	f85e 0b04 	ldr.w	r0, [lr], #4
   1be42:	f853 af04 	ldr.w	sl, [r3, #4]!
   1be46:	9301      	str	r3, [sp, #4]
   1be48:	fa1f f38a 	uxth.w	r3, sl
   1be4c:	4619      	mov	r1, r3
   1be4e:	b283      	uxth	r3, r0
   1be50:	1acb      	subs	r3, r1, r3
   1be52:	0c00      	lsrs	r0, r0, #16
   1be54:	4463      	add	r3, ip
   1be56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   1be5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
   1be5e:	b29b      	uxth	r3, r3
   1be60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   1be64:	4576      	cmp	r6, lr
   1be66:	f849 3b04 	str.w	r3, [r9], #4
   1be6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   1be6e:	d8e5      	bhi.n	1be3c <__mdiff+0x88>
   1be70:	1b33      	subs	r3, r6, r4
   1be72:	3b15      	subs	r3, #21
   1be74:	f023 0303 	bic.w	r3, r3, #3
   1be78:	3415      	adds	r4, #21
   1be7a:	3304      	adds	r3, #4
   1be7c:	42a6      	cmp	r6, r4
   1be7e:	bf38      	it	cc
   1be80:	2304      	movcc	r3, #4
   1be82:	441d      	add	r5, r3
   1be84:	445b      	add	r3, fp
   1be86:	461e      	mov	r6, r3
   1be88:	462c      	mov	r4, r5
   1be8a:	4544      	cmp	r4, r8
   1be8c:	d30e      	bcc.n	1beac <__mdiff+0xf8>
   1be8e:	f108 0103 	add.w	r1, r8, #3
   1be92:	1b49      	subs	r1, r1, r5
   1be94:	f021 0103 	bic.w	r1, r1, #3
   1be98:	3d03      	subs	r5, #3
   1be9a:	45a8      	cmp	r8, r5
   1be9c:	bf38      	it	cc
   1be9e:	2100      	movcc	r1, #0
   1bea0:	440b      	add	r3, r1
   1bea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1bea6:	b191      	cbz	r1, 1bece <__mdiff+0x11a>
   1bea8:	6117      	str	r7, [r2, #16]
   1beaa:	e79d      	b.n	1bde8 <__mdiff+0x34>
   1beac:	f854 1b04 	ldr.w	r1, [r4], #4
   1beb0:	46e6      	mov	lr, ip
   1beb2:	0c08      	lsrs	r0, r1, #16
   1beb4:	fa1c fc81 	uxtah	ip, ip, r1
   1beb8:	4471      	add	r1, lr
   1beba:	eb00 402c 	add.w	r0, r0, ip, asr #16
   1bebe:	b289      	uxth	r1, r1
   1bec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1bec4:	f846 1b04 	str.w	r1, [r6], #4
   1bec8:	ea4f 4c20 	mov.w	ip, r0, asr #16
   1becc:	e7dd      	b.n	1be8a <__mdiff+0xd6>
   1bece:	3f01      	subs	r7, #1
   1bed0:	e7e7      	b.n	1bea2 <__mdiff+0xee>
   1bed2:	bf00      	nop
   1bed4:	00026f70 	.word	0x00026f70
   1bed8:	00026fed 	.word	0x00026fed

0001bedc <__ulp>:
   1bedc:	b082      	sub	sp, #8
   1bede:	ed8d 0b00 	vstr	d0, [sp]
   1bee2:	9a01      	ldr	r2, [sp, #4]
   1bee4:	4b0f      	ldr	r3, [pc, #60]	; (1bf24 <__ulp+0x48>)
   1bee6:	4013      	ands	r3, r2
   1bee8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   1beec:	2b00      	cmp	r3, #0
   1beee:	dc08      	bgt.n	1bf02 <__ulp+0x26>
   1bef0:	425b      	negs	r3, r3
   1bef2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   1bef6:	ea4f 5223 	mov.w	r2, r3, asr #20
   1befa:	da04      	bge.n	1bf06 <__ulp+0x2a>
   1befc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bf00:	4113      	asrs	r3, r2
   1bf02:	2200      	movs	r2, #0
   1bf04:	e008      	b.n	1bf18 <__ulp+0x3c>
   1bf06:	f1a2 0314 	sub.w	r3, r2, #20
   1bf0a:	2b1e      	cmp	r3, #30
   1bf0c:	bfda      	itte	le
   1bf0e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1bf12:	40da      	lsrle	r2, r3
   1bf14:	2201      	movgt	r2, #1
   1bf16:	2300      	movs	r3, #0
   1bf18:	4619      	mov	r1, r3
   1bf1a:	4610      	mov	r0, r2
   1bf1c:	ec41 0b10 	vmov	d0, r0, r1
   1bf20:	b002      	add	sp, #8
   1bf22:	4770      	bx	lr
   1bf24:	7ff00000 	.word	0x7ff00000

0001bf28 <__b2d>:
   1bf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf2c:	6906      	ldr	r6, [r0, #16]
   1bf2e:	f100 0814 	add.w	r8, r0, #20
   1bf32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   1bf36:	1f37      	subs	r7, r6, #4
   1bf38:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1bf3c:	4610      	mov	r0, r2
   1bf3e:	f009 faa6 	bl	2548e <__hi0bits>
   1bf42:	f1c0 0320 	rsb	r3, r0, #32
   1bf46:	280a      	cmp	r0, #10
   1bf48:	600b      	str	r3, [r1, #0]
   1bf4a:	491b      	ldr	r1, [pc, #108]	; (1bfb8 <__b2d+0x90>)
   1bf4c:	dc15      	bgt.n	1bf7a <__b2d+0x52>
   1bf4e:	f1c0 0c0b 	rsb	ip, r0, #11
   1bf52:	fa22 f30c 	lsr.w	r3, r2, ip
   1bf56:	45b8      	cmp	r8, r7
   1bf58:	ea43 0501 	orr.w	r5, r3, r1
   1bf5c:	bf34      	ite	cc
   1bf5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
   1bf62:	2300      	movcs	r3, #0
   1bf64:	3015      	adds	r0, #21
   1bf66:	fa02 f000 	lsl.w	r0, r2, r0
   1bf6a:	fa23 f30c 	lsr.w	r3, r3, ip
   1bf6e:	4303      	orrs	r3, r0
   1bf70:	461c      	mov	r4, r3
   1bf72:	ec45 4b10 	vmov	d0, r4, r5
   1bf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bf7a:	45b8      	cmp	r8, r7
   1bf7c:	bf3a      	itte	cc
   1bf7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
   1bf82:	f1a6 0708 	subcc.w	r7, r6, #8
   1bf86:	2300      	movcs	r3, #0
   1bf88:	380b      	subs	r0, #11
   1bf8a:	d012      	beq.n	1bfb2 <__b2d+0x8a>
   1bf8c:	f1c0 0120 	rsb	r1, r0, #32
   1bf90:	fa23 f401 	lsr.w	r4, r3, r1
   1bf94:	4082      	lsls	r2, r0
   1bf96:	4322      	orrs	r2, r4
   1bf98:	4547      	cmp	r7, r8
   1bf9a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   1bf9e:	bf8c      	ite	hi
   1bfa0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
   1bfa4:	2200      	movls	r2, #0
   1bfa6:	4083      	lsls	r3, r0
   1bfa8:	40ca      	lsrs	r2, r1
   1bfaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1bfae:	4313      	orrs	r3, r2
   1bfb0:	e7de      	b.n	1bf70 <__b2d+0x48>
   1bfb2:	ea42 0501 	orr.w	r5, r2, r1
   1bfb6:	e7db      	b.n	1bf70 <__b2d+0x48>
   1bfb8:	3ff00000 	.word	0x3ff00000

0001bfbc <__d2b>:
   1bfbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bfc0:	460f      	mov	r7, r1
   1bfc2:	2101      	movs	r1, #1
   1bfc4:	ec59 8b10 	vmov	r8, r9, d0
   1bfc8:	4616      	mov	r6, r2
   1bfca:	f7ff fc7b 	bl	1b8c4 <_Balloc>
   1bfce:	4604      	mov	r4, r0
   1bfd0:	b930      	cbnz	r0, 1bfe0 <__d2b+0x24>
   1bfd2:	4602      	mov	r2, r0
   1bfd4:	4b23      	ldr	r3, [pc, #140]	; (1c064 <__d2b+0xa8>)
   1bfd6:	4824      	ldr	r0, [pc, #144]	; (1c068 <__d2b+0xac>)
   1bfd8:	f240 310a 	movw	r1, #778	; 0x30a
   1bfdc:	f000 f942 	bl	1c264 <__assert_func>
   1bfe0:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1bfe4:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1bfe8:	b10d      	cbz	r5, 1bfee <__d2b+0x32>
   1bfea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1bfee:	9301      	str	r3, [sp, #4]
   1bff0:	f1b8 0300 	subs.w	r3, r8, #0
   1bff4:	d023      	beq.n	1c03e <__d2b+0x82>
   1bff6:	4668      	mov	r0, sp
   1bff8:	9300      	str	r3, [sp, #0]
   1bffa:	f009 fa6a 	bl	254d2 <__lo0bits>
   1bffe:	e9dd 1200 	ldrd	r1, r2, [sp]
   1c002:	b1d0      	cbz	r0, 1c03a <__d2b+0x7e>
   1c004:	f1c0 0320 	rsb	r3, r0, #32
   1c008:	fa02 f303 	lsl.w	r3, r2, r3
   1c00c:	430b      	orrs	r3, r1
   1c00e:	40c2      	lsrs	r2, r0
   1c010:	6163      	str	r3, [r4, #20]
   1c012:	9201      	str	r2, [sp, #4]
   1c014:	9b01      	ldr	r3, [sp, #4]
   1c016:	61a3      	str	r3, [r4, #24]
   1c018:	2b00      	cmp	r3, #0
   1c01a:	bf0c      	ite	eq
   1c01c:	2201      	moveq	r2, #1
   1c01e:	2202      	movne	r2, #2
   1c020:	6122      	str	r2, [r4, #16]
   1c022:	b1a5      	cbz	r5, 1c04e <__d2b+0x92>
   1c024:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   1c028:	4405      	add	r5, r0
   1c02a:	603d      	str	r5, [r7, #0]
   1c02c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1c030:	6030      	str	r0, [r6, #0]
   1c032:	4620      	mov	r0, r4
   1c034:	b003      	add	sp, #12
   1c036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c03a:	6161      	str	r1, [r4, #20]
   1c03c:	e7ea      	b.n	1c014 <__d2b+0x58>
   1c03e:	a801      	add	r0, sp, #4
   1c040:	f009 fa47 	bl	254d2 <__lo0bits>
   1c044:	9b01      	ldr	r3, [sp, #4]
   1c046:	6163      	str	r3, [r4, #20]
   1c048:	3020      	adds	r0, #32
   1c04a:	2201      	movs	r2, #1
   1c04c:	e7e8      	b.n	1c020 <__d2b+0x64>
   1c04e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1c052:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1c056:	6038      	str	r0, [r7, #0]
   1c058:	6918      	ldr	r0, [r3, #16]
   1c05a:	f009 fa18 	bl	2548e <__hi0bits>
   1c05e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   1c062:	e7e5      	b.n	1c030 <__d2b+0x74>
   1c064:	00026f70 	.word	0x00026f70
   1c068:	00026fed 	.word	0x00026fed

0001c06c <_svfiprintf_r>:
   1c06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c070:	4698      	mov	r8, r3
   1c072:	898b      	ldrh	r3, [r1, #12]
   1c074:	061b      	lsls	r3, r3, #24
   1c076:	b09d      	sub	sp, #116	; 0x74
   1c078:	4607      	mov	r7, r0
   1c07a:	460d      	mov	r5, r1
   1c07c:	4614      	mov	r4, r2
   1c07e:	d510      	bpl.n	1c0a2 <_svfiprintf_r+0x36>
   1c080:	690b      	ldr	r3, [r1, #16]
   1c082:	b973      	cbnz	r3, 1c0a2 <_svfiprintf_r+0x36>
   1c084:	2140      	movs	r1, #64	; 0x40
   1c086:	f7fe fb61 	bl	1a74c <_malloc_r>
   1c08a:	6028      	str	r0, [r5, #0]
   1c08c:	6128      	str	r0, [r5, #16]
   1c08e:	b930      	cbnz	r0, 1c09e <_svfiprintf_r+0x32>
   1c090:	230c      	movs	r3, #12
   1c092:	603b      	str	r3, [r7, #0]
   1c094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c098:	b01d      	add	sp, #116	; 0x74
   1c09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c09e:	2340      	movs	r3, #64	; 0x40
   1c0a0:	616b      	str	r3, [r5, #20]
   1c0a2:	2300      	movs	r3, #0
   1c0a4:	9309      	str	r3, [sp, #36]	; 0x24
   1c0a6:	2320      	movs	r3, #32
   1c0a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1c0ac:	f8cd 800c 	str.w	r8, [sp, #12]
   1c0b0:	2330      	movs	r3, #48	; 0x30
   1c0b2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 1c250 <_svfiprintf_r+0x1e4>
   1c0b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1c0ba:	f04f 0901 	mov.w	r9, #1
   1c0be:	4623      	mov	r3, r4
   1c0c0:	469a      	mov	sl, r3
   1c0c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   1c0c6:	b10a      	cbz	r2, 1c0cc <_svfiprintf_r+0x60>
   1c0c8:	2a25      	cmp	r2, #37	; 0x25
   1c0ca:	d1f9      	bne.n	1c0c0 <_svfiprintf_r+0x54>
   1c0cc:	ebba 0b04 	subs.w	fp, sl, r4
   1c0d0:	d00b      	beq.n	1c0ea <_svfiprintf_r+0x7e>
   1c0d2:	465b      	mov	r3, fp
   1c0d4:	4622      	mov	r2, r4
   1c0d6:	4629      	mov	r1, r5
   1c0d8:	4638      	mov	r0, r7
   1c0da:	f009 fac6 	bl	2566a <__ssputs_r>
   1c0de:	3001      	adds	r0, #1
   1c0e0:	f000 80a7 	beq.w	1c232 <_svfiprintf_r+0x1c6>
   1c0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c0e6:	445a      	add	r2, fp
   1c0e8:	9209      	str	r2, [sp, #36]	; 0x24
   1c0ea:	f89a 3000 	ldrb.w	r3, [sl]
   1c0ee:	2b00      	cmp	r3, #0
   1c0f0:	f000 809f 	beq.w	1c232 <_svfiprintf_r+0x1c6>
   1c0f4:	2300      	movs	r3, #0
   1c0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c0fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1c0fe:	f10a 0a01 	add.w	sl, sl, #1
   1c102:	9304      	str	r3, [sp, #16]
   1c104:	9307      	str	r3, [sp, #28]
   1c106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1c10a:	931a      	str	r3, [sp, #104]	; 0x68
   1c10c:	4654      	mov	r4, sl
   1c10e:	2205      	movs	r2, #5
   1c110:	f814 1b01 	ldrb.w	r1, [r4], #1
   1c114:	484e      	ldr	r0, [pc, #312]	; (1c250 <_svfiprintf_r+0x1e4>)
   1c116:	f7e4 fff3 	bl	1100 <memchr>
   1c11a:	9a04      	ldr	r2, [sp, #16]
   1c11c:	b9d8      	cbnz	r0, 1c156 <_svfiprintf_r+0xea>
   1c11e:	06d0      	lsls	r0, r2, #27
   1c120:	bf44      	itt	mi
   1c122:	2320      	movmi	r3, #32
   1c124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1c128:	0711      	lsls	r1, r2, #28
   1c12a:	bf44      	itt	mi
   1c12c:	232b      	movmi	r3, #43	; 0x2b
   1c12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1c132:	f89a 3000 	ldrb.w	r3, [sl]
   1c136:	2b2a      	cmp	r3, #42	; 0x2a
   1c138:	d015      	beq.n	1c166 <_svfiprintf_r+0xfa>
   1c13a:	9a07      	ldr	r2, [sp, #28]
   1c13c:	4654      	mov	r4, sl
   1c13e:	2000      	movs	r0, #0
   1c140:	f04f 0c0a 	mov.w	ip, #10
   1c144:	4621      	mov	r1, r4
   1c146:	f811 3b01 	ldrb.w	r3, [r1], #1
   1c14a:	3b30      	subs	r3, #48	; 0x30
   1c14c:	2b09      	cmp	r3, #9
   1c14e:	d94b      	bls.n	1c1e8 <_svfiprintf_r+0x17c>
   1c150:	b1b0      	cbz	r0, 1c180 <_svfiprintf_r+0x114>
   1c152:	9207      	str	r2, [sp, #28]
   1c154:	e014      	b.n	1c180 <_svfiprintf_r+0x114>
   1c156:	eba0 0308 	sub.w	r3, r0, r8
   1c15a:	fa09 f303 	lsl.w	r3, r9, r3
   1c15e:	4313      	orrs	r3, r2
   1c160:	9304      	str	r3, [sp, #16]
   1c162:	46a2      	mov	sl, r4
   1c164:	e7d2      	b.n	1c10c <_svfiprintf_r+0xa0>
   1c166:	9b03      	ldr	r3, [sp, #12]
   1c168:	1d19      	adds	r1, r3, #4
   1c16a:	681b      	ldr	r3, [r3, #0]
   1c16c:	9103      	str	r1, [sp, #12]
   1c16e:	2b00      	cmp	r3, #0
   1c170:	bfbb      	ittet	lt
   1c172:	425b      	neglt	r3, r3
   1c174:	f042 0202 	orrlt.w	r2, r2, #2
   1c178:	9307      	strge	r3, [sp, #28]
   1c17a:	9307      	strlt	r3, [sp, #28]
   1c17c:	bfb8      	it	lt
   1c17e:	9204      	strlt	r2, [sp, #16]
   1c180:	7823      	ldrb	r3, [r4, #0]
   1c182:	2b2e      	cmp	r3, #46	; 0x2e
   1c184:	d10a      	bne.n	1c19c <_svfiprintf_r+0x130>
   1c186:	7863      	ldrb	r3, [r4, #1]
   1c188:	2b2a      	cmp	r3, #42	; 0x2a
   1c18a:	d132      	bne.n	1c1f2 <_svfiprintf_r+0x186>
   1c18c:	9b03      	ldr	r3, [sp, #12]
   1c18e:	1d1a      	adds	r2, r3, #4
   1c190:	681b      	ldr	r3, [r3, #0]
   1c192:	9203      	str	r2, [sp, #12]
   1c194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1c198:	3402      	adds	r4, #2
   1c19a:	9305      	str	r3, [sp, #20]
   1c19c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 1c260 <_svfiprintf_r+0x1f4>
   1c1a0:	7821      	ldrb	r1, [r4, #0]
   1c1a2:	2203      	movs	r2, #3
   1c1a4:	4650      	mov	r0, sl
   1c1a6:	f7e4 ffab 	bl	1100 <memchr>
   1c1aa:	b138      	cbz	r0, 1c1bc <_svfiprintf_r+0x150>
   1c1ac:	9b04      	ldr	r3, [sp, #16]
   1c1ae:	eba0 000a 	sub.w	r0, r0, sl
   1c1b2:	2240      	movs	r2, #64	; 0x40
   1c1b4:	4082      	lsls	r2, r0
   1c1b6:	4313      	orrs	r3, r2
   1c1b8:	3401      	adds	r4, #1
   1c1ba:	9304      	str	r3, [sp, #16]
   1c1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
   1c1c0:	4824      	ldr	r0, [pc, #144]	; (1c254 <_svfiprintf_r+0x1e8>)
   1c1c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1c1c6:	2206      	movs	r2, #6
   1c1c8:	f7e4 ff9a 	bl	1100 <memchr>
   1c1cc:	2800      	cmp	r0, #0
   1c1ce:	d036      	beq.n	1c23e <_svfiprintf_r+0x1d2>
   1c1d0:	4b21      	ldr	r3, [pc, #132]	; (1c258 <_svfiprintf_r+0x1ec>)
   1c1d2:	bb1b      	cbnz	r3, 1c21c <_svfiprintf_r+0x1b0>
   1c1d4:	9b03      	ldr	r3, [sp, #12]
   1c1d6:	3307      	adds	r3, #7
   1c1d8:	f023 0307 	bic.w	r3, r3, #7
   1c1dc:	3308      	adds	r3, #8
   1c1de:	9303      	str	r3, [sp, #12]
   1c1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c1e2:	4433      	add	r3, r6
   1c1e4:	9309      	str	r3, [sp, #36]	; 0x24
   1c1e6:	e76a      	b.n	1c0be <_svfiprintf_r+0x52>
   1c1e8:	fb0c 3202 	mla	r2, ip, r2, r3
   1c1ec:	460c      	mov	r4, r1
   1c1ee:	2001      	movs	r0, #1
   1c1f0:	e7a8      	b.n	1c144 <_svfiprintf_r+0xd8>
   1c1f2:	2300      	movs	r3, #0
   1c1f4:	3401      	adds	r4, #1
   1c1f6:	9305      	str	r3, [sp, #20]
   1c1f8:	4619      	mov	r1, r3
   1c1fa:	f04f 0c0a 	mov.w	ip, #10
   1c1fe:	4620      	mov	r0, r4
   1c200:	f810 2b01 	ldrb.w	r2, [r0], #1
   1c204:	3a30      	subs	r2, #48	; 0x30
   1c206:	2a09      	cmp	r2, #9
   1c208:	d903      	bls.n	1c212 <_svfiprintf_r+0x1a6>
   1c20a:	2b00      	cmp	r3, #0
   1c20c:	d0c6      	beq.n	1c19c <_svfiprintf_r+0x130>
   1c20e:	9105      	str	r1, [sp, #20]
   1c210:	e7c4      	b.n	1c19c <_svfiprintf_r+0x130>
   1c212:	fb0c 2101 	mla	r1, ip, r1, r2
   1c216:	4604      	mov	r4, r0
   1c218:	2301      	movs	r3, #1
   1c21a:	e7f0      	b.n	1c1fe <_svfiprintf_r+0x192>
   1c21c:	ab03      	add	r3, sp, #12
   1c21e:	9300      	str	r3, [sp, #0]
   1c220:	462a      	mov	r2, r5
   1c222:	4b0e      	ldr	r3, [pc, #56]	; (1c25c <_svfiprintf_r+0x1f0>)
   1c224:	a904      	add	r1, sp, #16
   1c226:	4638      	mov	r0, r7
   1c228:	f7fe faea 	bl	1a800 <_printf_float>
   1c22c:	1c42      	adds	r2, r0, #1
   1c22e:	4606      	mov	r6, r0
   1c230:	d1d6      	bne.n	1c1e0 <_svfiprintf_r+0x174>
   1c232:	89ab      	ldrh	r3, [r5, #12]
   1c234:	065b      	lsls	r3, r3, #25
   1c236:	f53f af2d 	bmi.w	1c094 <_svfiprintf_r+0x28>
   1c23a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1c23c:	e72c      	b.n	1c098 <_svfiprintf_r+0x2c>
   1c23e:	ab03      	add	r3, sp, #12
   1c240:	9300      	str	r3, [sp, #0]
   1c242:	462a      	mov	r2, r5
   1c244:	4b05      	ldr	r3, [pc, #20]	; (1c25c <_svfiprintf_r+0x1f0>)
   1c246:	a904      	add	r1, sp, #16
   1c248:	4638      	mov	r0, r7
   1c24a:	f7fe fd0b 	bl	1ac64 <_printf_i>
   1c24e:	e7ed      	b.n	1c22c <_svfiprintf_r+0x1c0>
   1c250:	00027048 	.word	0x00027048
   1c254:	00027052 	.word	0x00027052
   1c258:	0001a801 	.word	0x0001a801
   1c25c:	0002566b 	.word	0x0002566b
   1c260:	0002704e 	.word	0x0002704e

0001c264 <__assert_func>:
   1c264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1c266:	4614      	mov	r4, r2
   1c268:	461a      	mov	r2, r3
   1c26a:	4b09      	ldr	r3, [pc, #36]	; (1c290 <__assert_func+0x2c>)
   1c26c:	681b      	ldr	r3, [r3, #0]
   1c26e:	4605      	mov	r5, r0
   1c270:	68d8      	ldr	r0, [r3, #12]
   1c272:	b954      	cbnz	r4, 1c28a <__assert_func+0x26>
   1c274:	4b07      	ldr	r3, [pc, #28]	; (1c294 <__assert_func+0x30>)
   1c276:	461c      	mov	r4, r3
   1c278:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1c27c:	9100      	str	r1, [sp, #0]
   1c27e:	462b      	mov	r3, r5
   1c280:	4905      	ldr	r1, [pc, #20]	; (1c298 <__assert_func+0x34>)
   1c282:	f000 f80d 	bl	1c2a0 <fiprintf>
   1c286:	f009 fad2 	bl	2582e <abort>
   1c28a:	4b04      	ldr	r3, [pc, #16]	; (1c29c <__assert_func+0x38>)
   1c28c:	e7f4      	b.n	1c278 <__assert_func+0x14>
   1c28e:	bf00      	nop
   1c290:	200005b0 	.word	0x200005b0
   1c294:	00027094 	.word	0x00027094
   1c298:	00027066 	.word	0x00027066
   1c29c:	00027059 	.word	0x00027059

0001c2a0 <fiprintf>:
   1c2a0:	b40e      	push	{r1, r2, r3}
   1c2a2:	b503      	push	{r0, r1, lr}
   1c2a4:	4601      	mov	r1, r0
   1c2a6:	ab03      	add	r3, sp, #12
   1c2a8:	4805      	ldr	r0, [pc, #20]	; (1c2c0 <fiprintf+0x20>)
   1c2aa:	f853 2b04 	ldr.w	r2, [r3], #4
   1c2ae:	6800      	ldr	r0, [r0, #0]
   1c2b0:	9301      	str	r3, [sp, #4]
   1c2b2:	f000 f807 	bl	1c2c4 <_vfiprintf_r>
   1c2b6:	b002      	add	sp, #8
   1c2b8:	f85d eb04 	ldr.w	lr, [sp], #4
   1c2bc:	b003      	add	sp, #12
   1c2be:	4770      	bx	lr
   1c2c0:	200005b0 	.word	0x200005b0

0001c2c4 <_vfiprintf_r>:
   1c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2c8:	460d      	mov	r5, r1
   1c2ca:	b09d      	sub	sp, #116	; 0x74
   1c2cc:	4614      	mov	r4, r2
   1c2ce:	4698      	mov	r8, r3
   1c2d0:	4606      	mov	r6, r0
   1c2d2:	b118      	cbz	r0, 1c2dc <_vfiprintf_r+0x18>
   1c2d4:	6983      	ldr	r3, [r0, #24]
   1c2d6:	b90b      	cbnz	r3, 1c2dc <_vfiprintf_r+0x18>
   1c2d8:	f000 fa5c 	bl	1c794 <__sinit>
   1c2dc:	4b87      	ldr	r3, [pc, #540]	; (1c4fc <_vfiprintf_r+0x238>)
   1c2de:	429d      	cmp	r5, r3
   1c2e0:	d11b      	bne.n	1c31a <_vfiprintf_r+0x56>
   1c2e2:	6875      	ldr	r5, [r6, #4]
   1c2e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1c2e6:	07d9      	lsls	r1, r3, #31
   1c2e8:	d405      	bmi.n	1c2f6 <_vfiprintf_r+0x32>
   1c2ea:	89ab      	ldrh	r3, [r5, #12]
   1c2ec:	059a      	lsls	r2, r3, #22
   1c2ee:	d402      	bmi.n	1c2f6 <_vfiprintf_r+0x32>
   1c2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1c2f2:	f005 fd5d 	bl	21db0 <__retarget_lock_acquire_recursive>
   1c2f6:	89ab      	ldrh	r3, [r5, #12]
   1c2f8:	071b      	lsls	r3, r3, #28
   1c2fa:	d501      	bpl.n	1c300 <_vfiprintf_r+0x3c>
   1c2fc:	692b      	ldr	r3, [r5, #16]
   1c2fe:	b9eb      	cbnz	r3, 1c33c <_vfiprintf_r+0x78>
   1c300:	4629      	mov	r1, r5
   1c302:	4630      	mov	r0, r6
   1c304:	f000 f95c 	bl	1c5c0 <__swsetup_r>
   1c308:	b1c0      	cbz	r0, 1c33c <_vfiprintf_r+0x78>
   1c30a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1c30c:	07dc      	lsls	r4, r3, #31
   1c30e:	d50e      	bpl.n	1c32e <_vfiprintf_r+0x6a>
   1c310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c314:	b01d      	add	sp, #116	; 0x74
   1c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c31a:	4b79      	ldr	r3, [pc, #484]	; (1c500 <_vfiprintf_r+0x23c>)
   1c31c:	429d      	cmp	r5, r3
   1c31e:	d101      	bne.n	1c324 <_vfiprintf_r+0x60>
   1c320:	68b5      	ldr	r5, [r6, #8]
   1c322:	e7df      	b.n	1c2e4 <_vfiprintf_r+0x20>
   1c324:	4b77      	ldr	r3, [pc, #476]	; (1c504 <_vfiprintf_r+0x240>)
   1c326:	429d      	cmp	r5, r3
   1c328:	bf08      	it	eq
   1c32a:	68f5      	ldreq	r5, [r6, #12]
   1c32c:	e7da      	b.n	1c2e4 <_vfiprintf_r+0x20>
   1c32e:	89ab      	ldrh	r3, [r5, #12]
   1c330:	0598      	lsls	r0, r3, #22
   1c332:	d4ed      	bmi.n	1c310 <_vfiprintf_r+0x4c>
   1c334:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1c336:	f005 fd43 	bl	21dc0 <__retarget_lock_release_recursive>
   1c33a:	e7e9      	b.n	1c310 <_vfiprintf_r+0x4c>
   1c33c:	2300      	movs	r3, #0
   1c33e:	9309      	str	r3, [sp, #36]	; 0x24
   1c340:	2320      	movs	r3, #32
   1c342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1c346:	f8cd 800c 	str.w	r8, [sp, #12]
   1c34a:	2330      	movs	r3, #48	; 0x30
   1c34c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 1c508 <_vfiprintf_r+0x244>
   1c350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1c354:	f04f 0901 	mov.w	r9, #1
   1c358:	4623      	mov	r3, r4
   1c35a:	469a      	mov	sl, r3
   1c35c:	f813 2b01 	ldrb.w	r2, [r3], #1
   1c360:	b10a      	cbz	r2, 1c366 <_vfiprintf_r+0xa2>
   1c362:	2a25      	cmp	r2, #37	; 0x25
   1c364:	d1f9      	bne.n	1c35a <_vfiprintf_r+0x96>
   1c366:	ebba 0b04 	subs.w	fp, sl, r4
   1c36a:	d00b      	beq.n	1c384 <_vfiprintf_r+0xc0>
   1c36c:	465b      	mov	r3, fp
   1c36e:	4622      	mov	r2, r4
   1c370:	4629      	mov	r1, r5
   1c372:	4630      	mov	r0, r6
   1c374:	f009 fa49 	bl	2580a <__sfputs_r>
   1c378:	3001      	adds	r0, #1
   1c37a:	f000 80a6 	beq.w	1c4ca <_vfiprintf_r+0x206>
   1c37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c380:	445a      	add	r2, fp
   1c382:	9209      	str	r2, [sp, #36]	; 0x24
   1c384:	f89a 3000 	ldrb.w	r3, [sl]
   1c388:	2b00      	cmp	r3, #0
   1c38a:	f000 809e 	beq.w	1c4ca <_vfiprintf_r+0x206>
   1c38e:	2300      	movs	r3, #0
   1c390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c394:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1c398:	f10a 0a01 	add.w	sl, sl, #1
   1c39c:	9304      	str	r3, [sp, #16]
   1c39e:	9307      	str	r3, [sp, #28]
   1c3a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1c3a4:	931a      	str	r3, [sp, #104]	; 0x68
   1c3a6:	4654      	mov	r4, sl
   1c3a8:	4857      	ldr	r0, [pc, #348]	; (1c508 <_vfiprintf_r+0x244>)
   1c3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   1c3ae:	2205      	movs	r2, #5
   1c3b0:	f7e4 fea6 	bl	1100 <memchr>
   1c3b4:	9b04      	ldr	r3, [sp, #16]
   1c3b6:	b9d0      	cbnz	r0, 1c3ee <_vfiprintf_r+0x12a>
   1c3b8:	06d9      	lsls	r1, r3, #27
   1c3ba:	bf44      	itt	mi
   1c3bc:	2220      	movmi	r2, #32
   1c3be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1c3c2:	071a      	lsls	r2, r3, #28
   1c3c4:	bf44      	itt	mi
   1c3c6:	222b      	movmi	r2, #43	; 0x2b
   1c3c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   1c3cc:	f89a 2000 	ldrb.w	r2, [sl]
   1c3d0:	2a2a      	cmp	r2, #42	; 0x2a
   1c3d2:	d014      	beq.n	1c3fe <_vfiprintf_r+0x13a>
   1c3d4:	9a07      	ldr	r2, [sp, #28]
   1c3d6:	4654      	mov	r4, sl
   1c3d8:	2000      	movs	r0, #0
   1c3da:	f04f 0c0a 	mov.w	ip, #10
   1c3de:	4621      	mov	r1, r4
   1c3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   1c3e4:	3b30      	subs	r3, #48	; 0x30
   1c3e6:	2b09      	cmp	r3, #9
   1c3e8:	d94a      	bls.n	1c480 <_vfiprintf_r+0x1bc>
   1c3ea:	b970      	cbnz	r0, 1c40a <_vfiprintf_r+0x146>
   1c3ec:	e014      	b.n	1c418 <_vfiprintf_r+0x154>
   1c3ee:	eba0 0008 	sub.w	r0, r0, r8
   1c3f2:	fa09 f000 	lsl.w	r0, r9, r0
   1c3f6:	4318      	orrs	r0, r3
   1c3f8:	9004      	str	r0, [sp, #16]
   1c3fa:	46a2      	mov	sl, r4
   1c3fc:	e7d3      	b.n	1c3a6 <_vfiprintf_r+0xe2>
   1c3fe:	9a03      	ldr	r2, [sp, #12]
   1c400:	1d11      	adds	r1, r2, #4
   1c402:	6812      	ldr	r2, [r2, #0]
   1c404:	9103      	str	r1, [sp, #12]
   1c406:	2a00      	cmp	r2, #0
   1c408:	db01      	blt.n	1c40e <_vfiprintf_r+0x14a>
   1c40a:	9207      	str	r2, [sp, #28]
   1c40c:	e004      	b.n	1c418 <_vfiprintf_r+0x154>
   1c40e:	4252      	negs	r2, r2
   1c410:	f043 0302 	orr.w	r3, r3, #2
   1c414:	9207      	str	r2, [sp, #28]
   1c416:	9304      	str	r3, [sp, #16]
   1c418:	7823      	ldrb	r3, [r4, #0]
   1c41a:	2b2e      	cmp	r3, #46	; 0x2e
   1c41c:	d10a      	bne.n	1c434 <_vfiprintf_r+0x170>
   1c41e:	7863      	ldrb	r3, [r4, #1]
   1c420:	2b2a      	cmp	r3, #42	; 0x2a
   1c422:	d132      	bne.n	1c48a <_vfiprintf_r+0x1c6>
   1c424:	9b03      	ldr	r3, [sp, #12]
   1c426:	1d1a      	adds	r2, r3, #4
   1c428:	681b      	ldr	r3, [r3, #0]
   1c42a:	9203      	str	r2, [sp, #12]
   1c42c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   1c430:	3402      	adds	r4, #2
   1c432:	9305      	str	r3, [sp, #20]
   1c434:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1c518 <_vfiprintf_r+0x254>
   1c438:	7821      	ldrb	r1, [r4, #0]
   1c43a:	2203      	movs	r2, #3
   1c43c:	4650      	mov	r0, sl
   1c43e:	f7e4 fe5f 	bl	1100 <memchr>
   1c442:	b138      	cbz	r0, 1c454 <_vfiprintf_r+0x190>
   1c444:	9b04      	ldr	r3, [sp, #16]
   1c446:	eba0 000a 	sub.w	r0, r0, sl
   1c44a:	2240      	movs	r2, #64	; 0x40
   1c44c:	4082      	lsls	r2, r0
   1c44e:	4313      	orrs	r3, r2
   1c450:	3401      	adds	r4, #1
   1c452:	9304      	str	r3, [sp, #16]
   1c454:	f814 1b01 	ldrb.w	r1, [r4], #1
   1c458:	482c      	ldr	r0, [pc, #176]	; (1c50c <_vfiprintf_r+0x248>)
   1c45a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1c45e:	2206      	movs	r2, #6
   1c460:	f7e4 fe4e 	bl	1100 <memchr>
   1c464:	2800      	cmp	r0, #0
   1c466:	d03f      	beq.n	1c4e8 <_vfiprintf_r+0x224>
   1c468:	4b29      	ldr	r3, [pc, #164]	; (1c510 <_vfiprintf_r+0x24c>)
   1c46a:	bb1b      	cbnz	r3, 1c4b4 <_vfiprintf_r+0x1f0>
   1c46c:	9b03      	ldr	r3, [sp, #12]
   1c46e:	3307      	adds	r3, #7
   1c470:	f023 0307 	bic.w	r3, r3, #7
   1c474:	3308      	adds	r3, #8
   1c476:	9303      	str	r3, [sp, #12]
   1c478:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c47a:	443b      	add	r3, r7
   1c47c:	9309      	str	r3, [sp, #36]	; 0x24
   1c47e:	e76b      	b.n	1c358 <_vfiprintf_r+0x94>
   1c480:	fb0c 3202 	mla	r2, ip, r2, r3
   1c484:	460c      	mov	r4, r1
   1c486:	2001      	movs	r0, #1
   1c488:	e7a9      	b.n	1c3de <_vfiprintf_r+0x11a>
   1c48a:	2300      	movs	r3, #0
   1c48c:	3401      	adds	r4, #1
   1c48e:	9305      	str	r3, [sp, #20]
   1c490:	4619      	mov	r1, r3
   1c492:	f04f 0c0a 	mov.w	ip, #10
   1c496:	4620      	mov	r0, r4
   1c498:	f810 2b01 	ldrb.w	r2, [r0], #1
   1c49c:	3a30      	subs	r2, #48	; 0x30
   1c49e:	2a09      	cmp	r2, #9
   1c4a0:	d903      	bls.n	1c4aa <_vfiprintf_r+0x1e6>
   1c4a2:	2b00      	cmp	r3, #0
   1c4a4:	d0c6      	beq.n	1c434 <_vfiprintf_r+0x170>
   1c4a6:	9105      	str	r1, [sp, #20]
   1c4a8:	e7c4      	b.n	1c434 <_vfiprintf_r+0x170>
   1c4aa:	fb0c 2101 	mla	r1, ip, r1, r2
   1c4ae:	4604      	mov	r4, r0
   1c4b0:	2301      	movs	r3, #1
   1c4b2:	e7f0      	b.n	1c496 <_vfiprintf_r+0x1d2>
   1c4b4:	ab03      	add	r3, sp, #12
   1c4b6:	9300      	str	r3, [sp, #0]
   1c4b8:	462a      	mov	r2, r5
   1c4ba:	4b16      	ldr	r3, [pc, #88]	; (1c514 <_vfiprintf_r+0x250>)
   1c4bc:	a904      	add	r1, sp, #16
   1c4be:	4630      	mov	r0, r6
   1c4c0:	f7fe f99e 	bl	1a800 <_printf_float>
   1c4c4:	4607      	mov	r7, r0
   1c4c6:	1c78      	adds	r0, r7, #1
   1c4c8:	d1d6      	bne.n	1c478 <_vfiprintf_r+0x1b4>
   1c4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1c4cc:	07d9      	lsls	r1, r3, #31
   1c4ce:	d405      	bmi.n	1c4dc <_vfiprintf_r+0x218>
   1c4d0:	89ab      	ldrh	r3, [r5, #12]
   1c4d2:	059a      	lsls	r2, r3, #22
   1c4d4:	d402      	bmi.n	1c4dc <_vfiprintf_r+0x218>
   1c4d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1c4d8:	f005 fc72 	bl	21dc0 <__retarget_lock_release_recursive>
   1c4dc:	89ab      	ldrh	r3, [r5, #12]
   1c4de:	065b      	lsls	r3, r3, #25
   1c4e0:	f53f af16 	bmi.w	1c310 <_vfiprintf_r+0x4c>
   1c4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1c4e6:	e715      	b.n	1c314 <_vfiprintf_r+0x50>
   1c4e8:	ab03      	add	r3, sp, #12
   1c4ea:	9300      	str	r3, [sp, #0]
   1c4ec:	462a      	mov	r2, r5
   1c4ee:	4b09      	ldr	r3, [pc, #36]	; (1c514 <_vfiprintf_r+0x250>)
   1c4f0:	a904      	add	r1, sp, #16
   1c4f2:	4630      	mov	r0, r6
   1c4f4:	f7fe fbb6 	bl	1ac64 <_printf_i>
   1c4f8:	e7e4      	b.n	1c4c4 <_vfiprintf_r+0x200>
   1c4fa:	bf00      	nop
   1c4fc:	00026c10 	.word	0x00026c10
   1c500:	00026bf0 	.word	0x00026bf0
   1c504:	00026bd0 	.word	0x00026bd0
   1c508:	00027048 	.word	0x00027048
   1c50c:	00027052 	.word	0x00027052
   1c510:	0001a801 	.word	0x0001a801
   1c514:	0002580b 	.word	0x0002580b
   1c518:	0002704e 	.word	0x0002704e

0001c51c <__swbuf_r>:
   1c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c51e:	460e      	mov	r6, r1
   1c520:	4614      	mov	r4, r2
   1c522:	4605      	mov	r5, r0
   1c524:	b118      	cbz	r0, 1c52e <__swbuf_r+0x12>
   1c526:	6983      	ldr	r3, [r0, #24]
   1c528:	b90b      	cbnz	r3, 1c52e <__swbuf_r+0x12>
   1c52a:	f000 f933 	bl	1c794 <__sinit>
   1c52e:	4b21      	ldr	r3, [pc, #132]	; (1c5b4 <__swbuf_r+0x98>)
   1c530:	429c      	cmp	r4, r3
   1c532:	d110      	bne.n	1c556 <__swbuf_r+0x3a>
   1c534:	686c      	ldr	r4, [r5, #4]
   1c536:	69a3      	ldr	r3, [r4, #24]
   1c538:	60a3      	str	r3, [r4, #8]
   1c53a:	89a3      	ldrh	r3, [r4, #12]
   1c53c:	071a      	lsls	r2, r3, #28
   1c53e:	d501      	bpl.n	1c544 <__swbuf_r+0x28>
   1c540:	6923      	ldr	r3, [r4, #16]
   1c542:	b993      	cbnz	r3, 1c56a <__swbuf_r+0x4e>
   1c544:	4621      	mov	r1, r4
   1c546:	4628      	mov	r0, r5
   1c548:	f000 f83a 	bl	1c5c0 <__swsetup_r>
   1c54c:	b168      	cbz	r0, 1c56a <__swbuf_r+0x4e>
   1c54e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c552:	4638      	mov	r0, r7
   1c554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c556:	4b18      	ldr	r3, [pc, #96]	; (1c5b8 <__swbuf_r+0x9c>)
   1c558:	429c      	cmp	r4, r3
   1c55a:	d101      	bne.n	1c560 <__swbuf_r+0x44>
   1c55c:	68ac      	ldr	r4, [r5, #8]
   1c55e:	e7ea      	b.n	1c536 <__swbuf_r+0x1a>
   1c560:	4b16      	ldr	r3, [pc, #88]	; (1c5bc <__swbuf_r+0xa0>)
   1c562:	429c      	cmp	r4, r3
   1c564:	bf08      	it	eq
   1c566:	68ec      	ldreq	r4, [r5, #12]
   1c568:	e7e5      	b.n	1c536 <__swbuf_r+0x1a>
   1c56a:	6923      	ldr	r3, [r4, #16]
   1c56c:	6820      	ldr	r0, [r4, #0]
   1c56e:	1ac0      	subs	r0, r0, r3
   1c570:	6963      	ldr	r3, [r4, #20]
   1c572:	b2f6      	uxtb	r6, r6
   1c574:	4283      	cmp	r3, r0
   1c576:	4637      	mov	r7, r6
   1c578:	dc05      	bgt.n	1c586 <__swbuf_r+0x6a>
   1c57a:	4621      	mov	r1, r4
   1c57c:	4628      	mov	r0, r5
   1c57e:	f000 f88b 	bl	1c698 <_fflush_r>
   1c582:	2800      	cmp	r0, #0
   1c584:	d1e3      	bne.n	1c54e <__swbuf_r+0x32>
   1c586:	68a3      	ldr	r3, [r4, #8]
   1c588:	3b01      	subs	r3, #1
   1c58a:	60a3      	str	r3, [r4, #8]
   1c58c:	6823      	ldr	r3, [r4, #0]
   1c58e:	1c5a      	adds	r2, r3, #1
   1c590:	6022      	str	r2, [r4, #0]
   1c592:	701e      	strb	r6, [r3, #0]
   1c594:	6963      	ldr	r3, [r4, #20]
   1c596:	3001      	adds	r0, #1
   1c598:	4283      	cmp	r3, r0
   1c59a:	d004      	beq.n	1c5a6 <__swbuf_r+0x8a>
   1c59c:	89a3      	ldrh	r3, [r4, #12]
   1c59e:	07db      	lsls	r3, r3, #31
   1c5a0:	d5d7      	bpl.n	1c552 <__swbuf_r+0x36>
   1c5a2:	2e0a      	cmp	r6, #10
   1c5a4:	d1d5      	bne.n	1c552 <__swbuf_r+0x36>
   1c5a6:	4621      	mov	r1, r4
   1c5a8:	4628      	mov	r0, r5
   1c5aa:	f000 f875 	bl	1c698 <_fflush_r>
   1c5ae:	2800      	cmp	r0, #0
   1c5b0:	d0cf      	beq.n	1c552 <__swbuf_r+0x36>
   1c5b2:	e7cc      	b.n	1c54e <__swbuf_r+0x32>
   1c5b4:	00026c10 	.word	0x00026c10
   1c5b8:	00026bf0 	.word	0x00026bf0
   1c5bc:	00026bd0 	.word	0x00026bd0

0001c5c0 <__swsetup_r>:
   1c5c0:	4b31      	ldr	r3, [pc, #196]	; (1c688 <__swsetup_r+0xc8>)
   1c5c2:	b570      	push	{r4, r5, r6, lr}
   1c5c4:	681d      	ldr	r5, [r3, #0]
   1c5c6:	4606      	mov	r6, r0
   1c5c8:	460c      	mov	r4, r1
   1c5ca:	b125      	cbz	r5, 1c5d6 <__swsetup_r+0x16>
   1c5cc:	69ab      	ldr	r3, [r5, #24]
   1c5ce:	b913      	cbnz	r3, 1c5d6 <__swsetup_r+0x16>
   1c5d0:	4628      	mov	r0, r5
   1c5d2:	f000 f8df 	bl	1c794 <__sinit>
   1c5d6:	4b2d      	ldr	r3, [pc, #180]	; (1c68c <__swsetup_r+0xcc>)
   1c5d8:	429c      	cmp	r4, r3
   1c5da:	d10e      	bne.n	1c5fa <__swsetup_r+0x3a>
   1c5dc:	686c      	ldr	r4, [r5, #4]
   1c5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c5e2:	071a      	lsls	r2, r3, #28
   1c5e4:	d42c      	bmi.n	1c640 <__swsetup_r+0x80>
   1c5e6:	06dd      	lsls	r5, r3, #27
   1c5e8:	d411      	bmi.n	1c60e <__swsetup_r+0x4e>
   1c5ea:	2209      	movs	r2, #9
   1c5ec:	6032      	str	r2, [r6, #0]
   1c5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c5f2:	81a3      	strh	r3, [r4, #12]
   1c5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c5f8:	e03d      	b.n	1c676 <__swsetup_r+0xb6>
   1c5fa:	4b25      	ldr	r3, [pc, #148]	; (1c690 <__swsetup_r+0xd0>)
   1c5fc:	429c      	cmp	r4, r3
   1c5fe:	d101      	bne.n	1c604 <__swsetup_r+0x44>
   1c600:	68ac      	ldr	r4, [r5, #8]
   1c602:	e7ec      	b.n	1c5de <__swsetup_r+0x1e>
   1c604:	4b23      	ldr	r3, [pc, #140]	; (1c694 <__swsetup_r+0xd4>)
   1c606:	429c      	cmp	r4, r3
   1c608:	bf08      	it	eq
   1c60a:	68ec      	ldreq	r4, [r5, #12]
   1c60c:	e7e7      	b.n	1c5de <__swsetup_r+0x1e>
   1c60e:	0758      	lsls	r0, r3, #29
   1c610:	d512      	bpl.n	1c638 <__swsetup_r+0x78>
   1c612:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1c614:	b141      	cbz	r1, 1c628 <__swsetup_r+0x68>
   1c616:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1c61a:	4299      	cmp	r1, r3
   1c61c:	d002      	beq.n	1c624 <__swsetup_r+0x64>
   1c61e:	4630      	mov	r0, r6
   1c620:	f7fe f84a 	bl	1a6b8 <_free_r>
   1c624:	2300      	movs	r3, #0
   1c626:	6363      	str	r3, [r4, #52]	; 0x34
   1c628:	89a3      	ldrh	r3, [r4, #12]
   1c62a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1c62e:	81a3      	strh	r3, [r4, #12]
   1c630:	2300      	movs	r3, #0
   1c632:	6063      	str	r3, [r4, #4]
   1c634:	6923      	ldr	r3, [r4, #16]
   1c636:	6023      	str	r3, [r4, #0]
   1c638:	89a3      	ldrh	r3, [r4, #12]
   1c63a:	f043 0308 	orr.w	r3, r3, #8
   1c63e:	81a3      	strh	r3, [r4, #12]
   1c640:	6923      	ldr	r3, [r4, #16]
   1c642:	b94b      	cbnz	r3, 1c658 <__swsetup_r+0x98>
   1c644:	89a3      	ldrh	r3, [r4, #12]
   1c646:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1c64a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c64e:	d003      	beq.n	1c658 <__swsetup_r+0x98>
   1c650:	4621      	mov	r1, r4
   1c652:	4630      	mov	r0, r6
   1c654:	f000 f91c 	bl	1c890 <__smakebuf_r>
   1c658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c65c:	f013 0201 	ands.w	r2, r3, #1
   1c660:	d00a      	beq.n	1c678 <__swsetup_r+0xb8>
   1c662:	2200      	movs	r2, #0
   1c664:	60a2      	str	r2, [r4, #8]
   1c666:	6962      	ldr	r2, [r4, #20]
   1c668:	4252      	negs	r2, r2
   1c66a:	61a2      	str	r2, [r4, #24]
   1c66c:	6922      	ldr	r2, [r4, #16]
   1c66e:	b942      	cbnz	r2, 1c682 <__swsetup_r+0xc2>
   1c670:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   1c674:	d1bb      	bne.n	1c5ee <__swsetup_r+0x2e>
   1c676:	bd70      	pop	{r4, r5, r6, pc}
   1c678:	0799      	lsls	r1, r3, #30
   1c67a:	bf58      	it	pl
   1c67c:	6962      	ldrpl	r2, [r4, #20]
   1c67e:	60a2      	str	r2, [r4, #8]
   1c680:	e7f4      	b.n	1c66c <__swsetup_r+0xac>
   1c682:	2000      	movs	r0, #0
   1c684:	e7f7      	b.n	1c676 <__swsetup_r+0xb6>
   1c686:	bf00      	nop
   1c688:	200005b0 	.word	0x200005b0
   1c68c:	00026c10 	.word	0x00026c10
   1c690:	00026bf0 	.word	0x00026bf0
   1c694:	00026bd0 	.word	0x00026bd0

0001c698 <_fflush_r>:
   1c698:	b538      	push	{r3, r4, r5, lr}
   1c69a:	690b      	ldr	r3, [r1, #16]
   1c69c:	4605      	mov	r5, r0
   1c69e:	460c      	mov	r4, r1
   1c6a0:	b913      	cbnz	r3, 1c6a8 <_fflush_r+0x10>
   1c6a2:	2500      	movs	r5, #0
   1c6a4:	4628      	mov	r0, r5
   1c6a6:	bd38      	pop	{r3, r4, r5, pc}
   1c6a8:	b118      	cbz	r0, 1c6b2 <_fflush_r+0x1a>
   1c6aa:	6983      	ldr	r3, [r0, #24]
   1c6ac:	b90b      	cbnz	r3, 1c6b2 <_fflush_r+0x1a>
   1c6ae:	f000 f871 	bl	1c794 <__sinit>
   1c6b2:	4b14      	ldr	r3, [pc, #80]	; (1c704 <_fflush_r+0x6c>)
   1c6b4:	429c      	cmp	r4, r3
   1c6b6:	d11b      	bne.n	1c6f0 <_fflush_r+0x58>
   1c6b8:	686c      	ldr	r4, [r5, #4]
   1c6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c6be:	2b00      	cmp	r3, #0
   1c6c0:	d0ef      	beq.n	1c6a2 <_fflush_r+0xa>
   1c6c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1c6c4:	07d0      	lsls	r0, r2, #31
   1c6c6:	d404      	bmi.n	1c6d2 <_fflush_r+0x3a>
   1c6c8:	0599      	lsls	r1, r3, #22
   1c6ca:	d402      	bmi.n	1c6d2 <_fflush_r+0x3a>
   1c6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c6ce:	f005 fb6f 	bl	21db0 <__retarget_lock_acquire_recursive>
   1c6d2:	4628      	mov	r0, r5
   1c6d4:	4621      	mov	r1, r4
   1c6d6:	f009 f8b1 	bl	2583c <__sflush_r>
   1c6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c6dc:	07da      	lsls	r2, r3, #31
   1c6de:	4605      	mov	r5, r0
   1c6e0:	d4e0      	bmi.n	1c6a4 <_fflush_r+0xc>
   1c6e2:	89a3      	ldrh	r3, [r4, #12]
   1c6e4:	059b      	lsls	r3, r3, #22
   1c6e6:	d4dd      	bmi.n	1c6a4 <_fflush_r+0xc>
   1c6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c6ea:	f005 fb69 	bl	21dc0 <__retarget_lock_release_recursive>
   1c6ee:	e7d9      	b.n	1c6a4 <_fflush_r+0xc>
   1c6f0:	4b05      	ldr	r3, [pc, #20]	; (1c708 <_fflush_r+0x70>)
   1c6f2:	429c      	cmp	r4, r3
   1c6f4:	d101      	bne.n	1c6fa <_fflush_r+0x62>
   1c6f6:	68ac      	ldr	r4, [r5, #8]
   1c6f8:	e7df      	b.n	1c6ba <_fflush_r+0x22>
   1c6fa:	4b04      	ldr	r3, [pc, #16]	; (1c70c <_fflush_r+0x74>)
   1c6fc:	429c      	cmp	r4, r3
   1c6fe:	bf08      	it	eq
   1c700:	68ec      	ldreq	r4, [r5, #12]
   1c702:	e7da      	b.n	1c6ba <_fflush_r+0x22>
   1c704:	00026c10 	.word	0x00026c10
   1c708:	00026bf0 	.word	0x00026bf0
   1c70c:	00026bd0 	.word	0x00026bd0

0001c710 <std>:
   1c710:	2300      	movs	r3, #0
   1c712:	b510      	push	{r4, lr}
   1c714:	4604      	mov	r4, r0
   1c716:	e9c0 3300 	strd	r3, r3, [r0]
   1c71a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1c71e:	6083      	str	r3, [r0, #8]
   1c720:	8181      	strh	r1, [r0, #12]
   1c722:	6643      	str	r3, [r0, #100]	; 0x64
   1c724:	81c2      	strh	r2, [r0, #14]
   1c726:	6183      	str	r3, [r0, #24]
   1c728:	4619      	mov	r1, r3
   1c72a:	2208      	movs	r2, #8
   1c72c:	305c      	adds	r0, #92	; 0x5c
   1c72e:	f008 fb8d 	bl	24e4c <memset>
   1c732:	4b05      	ldr	r3, [pc, #20]	; (1c748 <std+0x38>)
   1c734:	6263      	str	r3, [r4, #36]	; 0x24
   1c736:	4b05      	ldr	r3, [pc, #20]	; (1c74c <std+0x3c>)
   1c738:	62a3      	str	r3, [r4, #40]	; 0x28
   1c73a:	4b05      	ldr	r3, [pc, #20]	; (1c750 <std+0x40>)
   1c73c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c73e:	4b05      	ldr	r3, [pc, #20]	; (1c754 <std+0x44>)
   1c740:	6224      	str	r4, [r4, #32]
   1c742:	6323      	str	r3, [r4, #48]	; 0x30
   1c744:	bd10      	pop	{r4, pc}
   1c746:	bf00      	nop
   1c748:	00025a5f 	.word	0x00025a5f
   1c74c:	00025a81 	.word	0x00025a81
   1c750:	00025ab9 	.word	0x00025ab9
   1c754:	00025add 	.word	0x00025add

0001c758 <_cleanup_r>:
   1c758:	4901      	ldr	r1, [pc, #4]	; (1c760 <_cleanup_r+0x8>)
   1c75a:	f009 b909 	b.w	25970 <_fwalk_reent>
   1c75e:	bf00      	nop
   1c760:	0001c699 	.word	0x0001c699

0001c764 <__sfp_lock_acquire>:
   1c764:	4801      	ldr	r0, [pc, #4]	; (1c76c <__sfp_lock_acquire+0x8>)
   1c766:	f005 bb23 	b.w	21db0 <__retarget_lock_acquire_recursive>
   1c76a:	bf00      	nop
   1c76c:	20000838 	.word	0x20000838

0001c770 <__sfp_lock_release>:
   1c770:	4801      	ldr	r0, [pc, #4]	; (1c778 <__sfp_lock_release+0x8>)
   1c772:	f005 bb25 	b.w	21dc0 <__retarget_lock_release_recursive>
   1c776:	bf00      	nop
   1c778:	20000838 	.word	0x20000838

0001c77c <__sinit_lock_acquire>:
   1c77c:	4801      	ldr	r0, [pc, #4]	; (1c784 <__sinit_lock_acquire+0x8>)
   1c77e:	f005 bb17 	b.w	21db0 <__retarget_lock_acquire_recursive>
   1c782:	bf00      	nop
   1c784:	2000084c 	.word	0x2000084c

0001c788 <__sinit_lock_release>:
   1c788:	4801      	ldr	r0, [pc, #4]	; (1c790 <__sinit_lock_release+0x8>)
   1c78a:	f005 bb19 	b.w	21dc0 <__retarget_lock_release_recursive>
   1c78e:	bf00      	nop
   1c790:	2000084c 	.word	0x2000084c

0001c794 <__sinit>:
   1c794:	b510      	push	{r4, lr}
   1c796:	4604      	mov	r4, r0
   1c798:	f7ff fff0 	bl	1c77c <__sinit_lock_acquire>
   1c79c:	69a3      	ldr	r3, [r4, #24]
   1c79e:	b11b      	cbz	r3, 1c7a8 <__sinit+0x14>
   1c7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c7a4:	f7ff bff0 	b.w	1c788 <__sinit_lock_release>
   1c7a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   1c7ac:	6523      	str	r3, [r4, #80]	; 0x50
   1c7ae:	4b13      	ldr	r3, [pc, #76]	; (1c7fc <__sinit+0x68>)
   1c7b0:	4a13      	ldr	r2, [pc, #76]	; (1c800 <__sinit+0x6c>)
   1c7b2:	681b      	ldr	r3, [r3, #0]
   1c7b4:	62a2      	str	r2, [r4, #40]	; 0x28
   1c7b6:	42a3      	cmp	r3, r4
   1c7b8:	bf04      	itt	eq
   1c7ba:	2301      	moveq	r3, #1
   1c7bc:	61a3      	streq	r3, [r4, #24]
   1c7be:	4620      	mov	r0, r4
   1c7c0:	f000 f820 	bl	1c804 <__sfp>
   1c7c4:	6060      	str	r0, [r4, #4]
   1c7c6:	4620      	mov	r0, r4
   1c7c8:	f000 f81c 	bl	1c804 <__sfp>
   1c7cc:	60a0      	str	r0, [r4, #8]
   1c7ce:	4620      	mov	r0, r4
   1c7d0:	f000 f818 	bl	1c804 <__sfp>
   1c7d4:	2200      	movs	r2, #0
   1c7d6:	60e0      	str	r0, [r4, #12]
   1c7d8:	2104      	movs	r1, #4
   1c7da:	6860      	ldr	r0, [r4, #4]
   1c7dc:	f7ff ff98 	bl	1c710 <std>
   1c7e0:	68a0      	ldr	r0, [r4, #8]
   1c7e2:	2201      	movs	r2, #1
   1c7e4:	2109      	movs	r1, #9
   1c7e6:	f7ff ff93 	bl	1c710 <std>
   1c7ea:	68e0      	ldr	r0, [r4, #12]
   1c7ec:	2202      	movs	r2, #2
   1c7ee:	2112      	movs	r1, #18
   1c7f0:	f7ff ff8e 	bl	1c710 <std>
   1c7f4:	2301      	movs	r3, #1
   1c7f6:	61a3      	str	r3, [r4, #24]
   1c7f8:	e7d2      	b.n	1c7a0 <__sinit+0xc>
   1c7fa:	bf00      	nop
   1c7fc:	00026bb4 	.word	0x00026bb4
   1c800:	0001c759 	.word	0x0001c759

0001c804 <__sfp>:
   1c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c806:	4607      	mov	r7, r0
   1c808:	f7ff ffac 	bl	1c764 <__sfp_lock_acquire>
   1c80c:	4b1e      	ldr	r3, [pc, #120]	; (1c888 <__sfp+0x84>)
   1c80e:	681e      	ldr	r6, [r3, #0]
   1c810:	69b3      	ldr	r3, [r6, #24]
   1c812:	b913      	cbnz	r3, 1c81a <__sfp+0x16>
   1c814:	4630      	mov	r0, r6
   1c816:	f7ff ffbd 	bl	1c794 <__sinit>
   1c81a:	3648      	adds	r6, #72	; 0x48
   1c81c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   1c820:	3b01      	subs	r3, #1
   1c822:	d503      	bpl.n	1c82c <__sfp+0x28>
   1c824:	6833      	ldr	r3, [r6, #0]
   1c826:	b30b      	cbz	r3, 1c86c <__sfp+0x68>
   1c828:	6836      	ldr	r6, [r6, #0]
   1c82a:	e7f7      	b.n	1c81c <__sfp+0x18>
   1c82c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1c830:	b9d5      	cbnz	r5, 1c868 <__sfp+0x64>
   1c832:	4b16      	ldr	r3, [pc, #88]	; (1c88c <__sfp+0x88>)
   1c834:	60e3      	str	r3, [r4, #12]
   1c836:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1c83a:	6665      	str	r5, [r4, #100]	; 0x64
   1c83c:	f005 faaf 	bl	21d9e <__retarget_lock_init_recursive>
   1c840:	f7ff ff96 	bl	1c770 <__sfp_lock_release>
   1c844:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1c848:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1c84c:	6025      	str	r5, [r4, #0]
   1c84e:	61a5      	str	r5, [r4, #24]
   1c850:	2208      	movs	r2, #8
   1c852:	4629      	mov	r1, r5
   1c854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1c858:	f008 faf8 	bl	24e4c <memset>
   1c85c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   1c860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1c864:	4620      	mov	r0, r4
   1c866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c868:	3468      	adds	r4, #104	; 0x68
   1c86a:	e7d9      	b.n	1c820 <__sfp+0x1c>
   1c86c:	2104      	movs	r1, #4
   1c86e:	4638      	mov	r0, r7
   1c870:	f009 f868 	bl	25944 <__sfmoreglue>
   1c874:	4604      	mov	r4, r0
   1c876:	6030      	str	r0, [r6, #0]
   1c878:	2800      	cmp	r0, #0
   1c87a:	d1d5      	bne.n	1c828 <__sfp+0x24>
   1c87c:	f7ff ff78 	bl	1c770 <__sfp_lock_release>
   1c880:	230c      	movs	r3, #12
   1c882:	603b      	str	r3, [r7, #0]
   1c884:	e7ee      	b.n	1c864 <__sfp+0x60>
   1c886:	bf00      	nop
   1c888:	00026bb4 	.word	0x00026bb4
   1c88c:	ffff0001 	.word	0xffff0001

0001c890 <__smakebuf_r>:
   1c890:	898b      	ldrh	r3, [r1, #12]
   1c892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c894:	079d      	lsls	r5, r3, #30
   1c896:	4606      	mov	r6, r0
   1c898:	460c      	mov	r4, r1
   1c89a:	d507      	bpl.n	1c8ac <__smakebuf_r+0x1c>
   1c89c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1c8a0:	6023      	str	r3, [r4, #0]
   1c8a2:	6123      	str	r3, [r4, #16]
   1c8a4:	2301      	movs	r3, #1
   1c8a6:	6163      	str	r3, [r4, #20]
   1c8a8:	b003      	add	sp, #12
   1c8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c8ac:	ab01      	add	r3, sp, #4
   1c8ae:	466a      	mov	r2, sp
   1c8b0:	f009 f87d 	bl	259ae <__swhatbuf_r>
   1c8b4:	9f00      	ldr	r7, [sp, #0]
   1c8b6:	4605      	mov	r5, r0
   1c8b8:	4639      	mov	r1, r7
   1c8ba:	4630      	mov	r0, r6
   1c8bc:	f7fd ff46 	bl	1a74c <_malloc_r>
   1c8c0:	b948      	cbnz	r0, 1c8d6 <__smakebuf_r+0x46>
   1c8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c8c6:	059a      	lsls	r2, r3, #22
   1c8c8:	d4ee      	bmi.n	1c8a8 <__smakebuf_r+0x18>
   1c8ca:	f023 0303 	bic.w	r3, r3, #3
   1c8ce:	f043 0302 	orr.w	r3, r3, #2
   1c8d2:	81a3      	strh	r3, [r4, #12]
   1c8d4:	e7e2      	b.n	1c89c <__smakebuf_r+0xc>
   1c8d6:	4b0d      	ldr	r3, [pc, #52]	; (1c90c <__smakebuf_r+0x7c>)
   1c8d8:	62b3      	str	r3, [r6, #40]	; 0x28
   1c8da:	89a3      	ldrh	r3, [r4, #12]
   1c8dc:	6020      	str	r0, [r4, #0]
   1c8de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c8e2:	81a3      	strh	r3, [r4, #12]
   1c8e4:	9b01      	ldr	r3, [sp, #4]
   1c8e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
   1c8ea:	b15b      	cbz	r3, 1c904 <__smakebuf_r+0x74>
   1c8ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1c8f0:	4630      	mov	r0, r6
   1c8f2:	f000 f85b 	bl	1c9ac <_isatty_r>
   1c8f6:	b128      	cbz	r0, 1c904 <__smakebuf_r+0x74>
   1c8f8:	89a3      	ldrh	r3, [r4, #12]
   1c8fa:	f023 0303 	bic.w	r3, r3, #3
   1c8fe:	f043 0301 	orr.w	r3, r3, #1
   1c902:	81a3      	strh	r3, [r4, #12]
   1c904:	89a3      	ldrh	r3, [r4, #12]
   1c906:	431d      	orrs	r5, r3
   1c908:	81a5      	strh	r5, [r4, #12]
   1c90a:	e7cd      	b.n	1c8a8 <__smakebuf_r+0x18>
   1c90c:	0001c759 	.word	0x0001c759

0001c910 <raise>:
   1c910:	4b02      	ldr	r3, [pc, #8]	; (1c91c <raise+0xc>)
   1c912:	4601      	mov	r1, r0
   1c914:	6818      	ldr	r0, [r3, #0]
   1c916:	f009 b878 	b.w	25a0a <_raise_r>
   1c91a:	bf00      	nop
   1c91c:	200005b0 	.word	0x200005b0

0001c920 <_kill_r>:
   1c920:	b538      	push	{r3, r4, r5, lr}
   1c922:	4d07      	ldr	r5, [pc, #28]	; (1c940 <_kill_r+0x20>)
   1c924:	2300      	movs	r3, #0
   1c926:	4604      	mov	r4, r0
   1c928:	4608      	mov	r0, r1
   1c92a:	4611      	mov	r1, r2
   1c92c:	602b      	str	r3, [r5, #0]
   1c92e:	f005 fa2d 	bl	21d8c <_kill>
   1c932:	1c43      	adds	r3, r0, #1
   1c934:	d102      	bne.n	1c93c <_kill_r+0x1c>
   1c936:	682b      	ldr	r3, [r5, #0]
   1c938:	b103      	cbz	r3, 1c93c <_kill_r+0x1c>
   1c93a:	6023      	str	r3, [r4, #0]
   1c93c:	bd38      	pop	{r3, r4, r5, pc}
   1c93e:	bf00      	nop
   1c940:	200040d8 	.word	0x200040d8

0001c944 <_write_r>:
   1c944:	b538      	push	{r3, r4, r5, lr}
   1c946:	4d07      	ldr	r5, [pc, #28]	; (1c964 <_write_r+0x20>)
   1c948:	4604      	mov	r4, r0
   1c94a:	4608      	mov	r0, r1
   1c94c:	4611      	mov	r1, r2
   1c94e:	2200      	movs	r2, #0
   1c950:	602a      	str	r2, [r5, #0]
   1c952:	461a      	mov	r2, r3
   1c954:	f005 fa0a 	bl	21d6c <_write>
   1c958:	1c43      	adds	r3, r0, #1
   1c95a:	d102      	bne.n	1c962 <_write_r+0x1e>
   1c95c:	682b      	ldr	r3, [r5, #0]
   1c95e:	b103      	cbz	r3, 1c962 <_write_r+0x1e>
   1c960:	6023      	str	r3, [r4, #0]
   1c962:	bd38      	pop	{r3, r4, r5, pc}
   1c964:	200040d8 	.word	0x200040d8

0001c968 <_close_r>:
   1c968:	b538      	push	{r3, r4, r5, lr}
   1c96a:	4d06      	ldr	r5, [pc, #24]	; (1c984 <_close_r+0x1c>)
   1c96c:	2300      	movs	r3, #0
   1c96e:	4604      	mov	r4, r0
   1c970:	4608      	mov	r0, r1
   1c972:	602b      	str	r3, [r5, #0]
   1c974:	f005 fa00 	bl	21d78 <_close>
   1c978:	1c43      	adds	r3, r0, #1
   1c97a:	d102      	bne.n	1c982 <_close_r+0x1a>
   1c97c:	682b      	ldr	r3, [r5, #0]
   1c97e:	b103      	cbz	r3, 1c982 <_close_r+0x1a>
   1c980:	6023      	str	r3, [r4, #0]
   1c982:	bd38      	pop	{r3, r4, r5, pc}
   1c984:	200040d8 	.word	0x200040d8

0001c988 <_fstat_r>:
   1c988:	b538      	push	{r3, r4, r5, lr}
   1c98a:	4d07      	ldr	r5, [pc, #28]	; (1c9a8 <_fstat_r+0x20>)
   1c98c:	2300      	movs	r3, #0
   1c98e:	4604      	mov	r4, r0
   1c990:	4608      	mov	r0, r1
   1c992:	4611      	mov	r1, r2
   1c994:	602b      	str	r3, [r5, #0]
   1c996:	f005 f9fd 	bl	21d94 <_fstat>
   1c99a:	1c43      	adds	r3, r0, #1
   1c99c:	d102      	bne.n	1c9a4 <_fstat_r+0x1c>
   1c99e:	682b      	ldr	r3, [r5, #0]
   1c9a0:	b103      	cbz	r3, 1c9a4 <_fstat_r+0x1c>
   1c9a2:	6023      	str	r3, [r4, #0]
   1c9a4:	bd38      	pop	{r3, r4, r5, pc}
   1c9a6:	bf00      	nop
   1c9a8:	200040d8 	.word	0x200040d8

0001c9ac <_isatty_r>:
   1c9ac:	b538      	push	{r3, r4, r5, lr}
   1c9ae:	4d06      	ldr	r5, [pc, #24]	; (1c9c8 <_isatty_r+0x1c>)
   1c9b0:	2300      	movs	r3, #0
   1c9b2:	4604      	mov	r4, r0
   1c9b4:	4608      	mov	r0, r1
   1c9b6:	602b      	str	r3, [r5, #0]
   1c9b8:	f005 f9e3 	bl	21d82 <_isatty>
   1c9bc:	1c43      	adds	r3, r0, #1
   1c9be:	d102      	bne.n	1c9c6 <_isatty_r+0x1a>
   1c9c0:	682b      	ldr	r3, [r5, #0]
   1c9c2:	b103      	cbz	r3, 1c9c6 <_isatty_r+0x1a>
   1c9c4:	6023      	str	r3, [r4, #0]
   1c9c6:	bd38      	pop	{r3, r4, r5, pc}
   1c9c8:	200040d8 	.word	0x200040d8

0001c9cc <_lseek_r>:
   1c9cc:	b538      	push	{r3, r4, r5, lr}
   1c9ce:	4d07      	ldr	r5, [pc, #28]	; (1c9ec <_lseek_r+0x20>)
   1c9d0:	4604      	mov	r4, r0
   1c9d2:	4608      	mov	r0, r1
   1c9d4:	4611      	mov	r1, r2
   1c9d6:	2200      	movs	r2, #0
   1c9d8:	602a      	str	r2, [r5, #0]
   1c9da:	461a      	mov	r2, r3
   1c9dc:	f005 f9cf 	bl	21d7e <_lseek>
   1c9e0:	1c43      	adds	r3, r0, #1
   1c9e2:	d102      	bne.n	1c9ea <_lseek_r+0x1e>
   1c9e4:	682b      	ldr	r3, [r5, #0]
   1c9e6:	b103      	cbz	r3, 1c9ea <_lseek_r+0x1e>
   1c9e8:	6023      	str	r3, [r4, #0]
   1c9ea:	bd38      	pop	{r3, r4, r5, pc}
   1c9ec:	200040d8 	.word	0x200040d8

0001c9f0 <_read_r>:
   1c9f0:	b538      	push	{r3, r4, r5, lr}
   1c9f2:	4d07      	ldr	r5, [pc, #28]	; (1ca10 <_read_r+0x20>)
   1c9f4:	4604      	mov	r4, r0
   1c9f6:	4608      	mov	r0, r1
   1c9f8:	4611      	mov	r1, r2
   1c9fa:	2200      	movs	r2, #0
   1c9fc:	602a      	str	r2, [r5, #0]
   1c9fe:	461a      	mov	r2, r3
   1ca00:	f005 f9ae 	bl	21d60 <_read>
   1ca04:	1c43      	adds	r3, r0, #1
   1ca06:	d102      	bne.n	1ca0e <_read_r+0x1e>
   1ca08:	682b      	ldr	r3, [r5, #0]
   1ca0a:	b103      	cbz	r3, 1ca0e <_read_r+0x1e>
   1ca0c:	6023      	str	r3, [r4, #0]
   1ca0e:	bd38      	pop	{r3, r4, r5, pc}
   1ca10:	200040d8 	.word	0x200040d8

0001ca14 <nrf_cc3xx_platform_init>:
   1ca14:	b510      	push	{r4, lr}
   1ca16:	4c0c      	ldr	r4, [pc, #48]	; (1ca48 <nrf_cc3xx_platform_init+0x34>)
   1ca18:	6823      	ldr	r3, [r4, #0]
   1ca1a:	b113      	cbz	r3, 1ca22 <nrf_cc3xx_platform_init+0xe>
   1ca1c:	4b0b      	ldr	r3, [pc, #44]	; (1ca4c <nrf_cc3xx_platform_init+0x38>)
   1ca1e:	681b      	ldr	r3, [r3, #0]
   1ca20:	b92b      	cbnz	r3, 1ca2e <nrf_cc3xx_platform_init+0x1a>
   1ca22:	f000 fe27 	bl	1d674 <CC_LibInit>
   1ca26:	b930      	cbnz	r0, 1ca36 <nrf_cc3xx_platform_init+0x22>
   1ca28:	4b08      	ldr	r3, [pc, #32]	; (1ca4c <nrf_cc3xx_platform_init+0x38>)
   1ca2a:	2201      	movs	r2, #1
   1ca2c:	601a      	str	r2, [r3, #0]
   1ca2e:	2301      	movs	r3, #1
   1ca30:	6023      	str	r3, [r4, #0]
   1ca32:	2000      	movs	r0, #0
   1ca34:	bd10      	pop	{r4, pc}
   1ca36:	3801      	subs	r0, #1
   1ca38:	2806      	cmp	r0, #6
   1ca3a:	d901      	bls.n	1ca40 <nrf_cc3xx_platform_init+0x2c>
   1ca3c:	4804      	ldr	r0, [pc, #16]	; (1ca50 <nrf_cc3xx_platform_init+0x3c>)
   1ca3e:	bd10      	pop	{r4, pc}
   1ca40:	4b04      	ldr	r3, [pc, #16]	; (1ca54 <nrf_cc3xx_platform_init+0x40>)
   1ca42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1ca46:	bd10      	pop	{r4, pc}
   1ca48:	200040e0 	.word	0x200040e0
   1ca4c:	200040dc 	.word	0x200040dc
   1ca50:	ffff8ffe 	.word	0xffff8ffe
   1ca54:	00026c30 	.word	0x00026c30

0001ca58 <nrf_cc3xx_platform_abort>:
   1ca58:	f3bf 8f4f 	dsb	sy
   1ca5c:	4905      	ldr	r1, [pc, #20]	; (1ca74 <nrf_cc3xx_platform_abort+0x1c>)
   1ca5e:	4b06      	ldr	r3, [pc, #24]	; (1ca78 <nrf_cc3xx_platform_abort+0x20>)
   1ca60:	68ca      	ldr	r2, [r1, #12]
   1ca62:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ca66:	4313      	orrs	r3, r2
   1ca68:	60cb      	str	r3, [r1, #12]
   1ca6a:	f3bf 8f4f 	dsb	sy
   1ca6e:	bf00      	nop
   1ca70:	e7fd      	b.n	1ca6e <nrf_cc3xx_platform_abort+0x16>
   1ca72:	bf00      	nop
   1ca74:	e000ed00 	.word	0xe000ed00
   1ca78:	05fa0004 	.word	0x05fa0004

0001ca7c <CC_PalAbort>:
   1ca7c:	b410      	push	{r4}
   1ca7e:	4b0a      	ldr	r3, [pc, #40]	; (1caa8 <CC_PalAbort+0x2c>)
   1ca80:	490a      	ldr	r1, [pc, #40]	; (1caac <CC_PalAbort+0x30>)
   1ca82:	4c0b      	ldr	r4, [pc, #44]	; (1cab0 <CC_PalAbort+0x34>)
   1ca84:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1ca88:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1ca8c:	6849      	ldr	r1, [r1, #4]
   1ca8e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1ca92:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1ca96:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1ca9a:	2300      	movs	r3, #0
   1ca9c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1caa0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1caa4:	4708      	bx	r1
   1caa6:	bf00      	nop
   1caa8:	5002b000 	.word	0x5002b000
   1caac:	20000780 	.word	0x20000780
   1cab0:	5002a000 	.word	0x5002a000

0001cab4 <nrf_cc3xx_platform_set_abort>:
   1cab4:	e9d0 1200 	ldrd	r1, r2, [r0]
   1cab8:	4b01      	ldr	r3, [pc, #4]	; (1cac0 <nrf_cc3xx_platform_set_abort+0xc>)
   1caba:	e9c3 1200 	strd	r1, r2, [r3]
   1cabe:	4770      	bx	lr
   1cac0:	20000780 	.word	0x20000780

0001cac4 <nrf_cc3xx_platform_ctr_drbg_init>:
   1cac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cac8:	4b13      	ldr	r3, [pc, #76]	; (1cb18 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   1caca:	4e14      	ldr	r6, [pc, #80]	; (1cb1c <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   1cacc:	2800      	cmp	r0, #0
   1cace:	bf14      	ite	ne
   1cad0:	4604      	movne	r4, r0
   1cad2:	461c      	moveq	r4, r3
   1cad4:	b083      	sub	sp, #12
   1cad6:	6823      	ldr	r3, [r4, #0]
   1cad8:	42b3      	cmp	r3, r6
   1cada:	d019      	beq.n	1cb10 <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   1cadc:	460d      	mov	r5, r1
   1cade:	4620      	mov	r0, r4
   1cae0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1cae4:	f104 0904 	add.w	r9, r4, #4
   1cae8:	4617      	mov	r7, r2
   1caea:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1caee:	f000 f8e5 	bl	1ccbc <mbedtls_platform_zeroize>
   1caf2:	4648      	mov	r0, r9
   1caf4:	f000 fca8 	bl	1d448 <cc_mbedtls_entropy_init>
   1caf8:	4640      	mov	r0, r8
   1cafa:	f000 fad7 	bl	1d0ac <cc_mbedtls_ctr_drbg_init>
   1cafe:	4908      	ldr	r1, [pc, #32]	; (1cb20 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1cb00:	9700      	str	r7, [sp, #0]
   1cb02:	462b      	mov	r3, r5
   1cb04:	464a      	mov	r2, r9
   1cb06:	4640      	mov	r0, r8
   1cb08:	f000 fae6 	bl	1d0d8 <cc_mbedtls_ctr_drbg_seed>
   1cb0c:	b908      	cbnz	r0, 1cb12 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1cb0e:	6026      	str	r6, [r4, #0]
   1cb10:	2000      	movs	r0, #0
   1cb12:	b003      	add	sp, #12
   1cb14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cb18:	200040e4 	.word	0x200040e4
   1cb1c:	5ac9bca5 	.word	0x5ac9bca5
   1cb20:	0001d4d1 	.word	0x0001d4d1

0001cb24 <nrf_cc3xx_platform_ctr_drbg_get>:
   1cb24:	b570      	push	{r4, r5, r6, lr}
   1cb26:	461d      	mov	r5, r3
   1cb28:	4b0c      	ldr	r3, [pc, #48]	; (1cb5c <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1cb2a:	2800      	cmp	r0, #0
   1cb2c:	bf18      	it	ne
   1cb2e:	4603      	movne	r3, r0
   1cb30:	480b      	ldr	r0, [pc, #44]	; (1cb60 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1cb32:	681e      	ldr	r6, [r3, #0]
   1cb34:	4286      	cmp	r6, r0
   1cb36:	b082      	sub	sp, #8
   1cb38:	d10d      	bne.n	1cb56 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1cb3a:	2600      	movs	r6, #0
   1cb3c:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   1cb40:	9600      	str	r6, [sp, #0]
   1cb42:	4633      	mov	r3, r6
   1cb44:	4614      	mov	r4, r2
   1cb46:	f000 fb13 	bl	1d170 <cc_mbedtls_ctr_drbg_random_with_add>
   1cb4a:	2800      	cmp	r0, #0
   1cb4c:	bf18      	it	ne
   1cb4e:	4634      	movne	r4, r6
   1cb50:	602c      	str	r4, [r5, #0]
   1cb52:	b002      	add	sp, #8
   1cb54:	bd70      	pop	{r4, r5, r6, pc}
   1cb56:	4803      	ldr	r0, [pc, #12]	; (1cb64 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1cb58:	e7fb      	b.n	1cb52 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1cb5a:	bf00      	nop
   1cb5c:	200040e4 	.word	0x200040e4
   1cb60:	5ac9bca5 	.word	0x5ac9bca5
   1cb64:	ffff8fe8 	.word	0xffff8fe8

0001cb68 <mutex_free>:
   1cb68:	b510      	push	{r4, lr}
   1cb6a:	4604      	mov	r4, r0
   1cb6c:	b150      	cbz	r0, 1cb84 <mutex_free+0x1c>
   1cb6e:	6863      	ldr	r3, [r4, #4]
   1cb70:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1cb74:	d005      	beq.n	1cb82 <mutex_free+0x1a>
   1cb76:	4a06      	ldr	r2, [pc, #24]	; (1cb90 <mutex_free+0x28>)
   1cb78:	4293      	cmp	r3, r2
   1cb7a:	d002      	beq.n	1cb82 <mutex_free+0x1a>
   1cb7c:	2300      	movs	r3, #0
   1cb7e:	6023      	str	r3, [r4, #0]
   1cb80:	6062      	str	r2, [r4, #4]
   1cb82:	bd10      	pop	{r4, pc}
   1cb84:	4b03      	ldr	r3, [pc, #12]	; (1cb94 <mutex_free+0x2c>)
   1cb86:	4804      	ldr	r0, [pc, #16]	; (1cb98 <mutex_free+0x30>)
   1cb88:	685b      	ldr	r3, [r3, #4]
   1cb8a:	4798      	blx	r3
   1cb8c:	e7ef      	b.n	1cb6e <mutex_free+0x6>
   1cb8e:	bf00      	nop
   1cb90:	a95c5f2c 	.word	0xa95c5f2c
   1cb94:	20000780 	.word	0x20000780
   1cb98:	00026c4c 	.word	0x00026c4c

0001cb9c <mutex_lock>:
   1cb9c:	b1c8      	cbz	r0, 1cbd2 <mutex_lock+0x36>
   1cb9e:	6843      	ldr	r3, [r0, #4]
   1cba0:	4a0d      	ldr	r2, [pc, #52]	; (1cbd8 <mutex_lock+0x3c>)
   1cba2:	4293      	cmp	r3, r2
   1cba4:	d013      	beq.n	1cbce <mutex_lock+0x32>
   1cba6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1cbaa:	d00e      	beq.n	1cbca <mutex_lock+0x2e>
   1cbac:	2301      	movs	r3, #1
   1cbae:	e850 2f00 	ldrex	r2, [r0]
   1cbb2:	4619      	mov	r1, r3
   1cbb4:	e840 1c00 	strex	ip, r1, [r0]
   1cbb8:	f09c 0f00 	teq	ip, #0
   1cbbc:	d1f7      	bne.n	1cbae <mutex_lock+0x12>
   1cbbe:	2a01      	cmp	r2, #1
   1cbc0:	d0f5      	beq.n	1cbae <mutex_lock+0x12>
   1cbc2:	f3bf 8f5f 	dmb	sy
   1cbc6:	2000      	movs	r0, #0
   1cbc8:	4770      	bx	lr
   1cbca:	4804      	ldr	r0, [pc, #16]	; (1cbdc <mutex_lock+0x40>)
   1cbcc:	4770      	bx	lr
   1cbce:	4804      	ldr	r0, [pc, #16]	; (1cbe0 <mutex_lock+0x44>)
   1cbd0:	4770      	bx	lr
   1cbd2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1cbd6:	4770      	bx	lr
   1cbd8:	a95c5f2c 	.word	0xa95c5f2c
   1cbdc:	ffff8fe9 	.word	0xffff8fe9
   1cbe0:	ffff8fea 	.word	0xffff8fea

0001cbe4 <mutex_unlock>:
   1cbe4:	b180      	cbz	r0, 1cc08 <mutex_unlock+0x24>
   1cbe6:	6843      	ldr	r3, [r0, #4]
   1cbe8:	4a09      	ldr	r2, [pc, #36]	; (1cc10 <mutex_unlock+0x2c>)
   1cbea:	4293      	cmp	r3, r2
   1cbec:	d00a      	beq.n	1cc04 <mutex_unlock+0x20>
   1cbee:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1cbf2:	d005      	beq.n	1cc00 <mutex_unlock+0x1c>
   1cbf4:	f3bf 8f5f 	dmb	sy
   1cbf8:	2300      	movs	r3, #0
   1cbfa:	6003      	str	r3, [r0, #0]
   1cbfc:	4618      	mov	r0, r3
   1cbfe:	4770      	bx	lr
   1cc00:	4804      	ldr	r0, [pc, #16]	; (1cc14 <mutex_unlock+0x30>)
   1cc02:	4770      	bx	lr
   1cc04:	4804      	ldr	r0, [pc, #16]	; (1cc18 <mutex_unlock+0x34>)
   1cc06:	4770      	bx	lr
   1cc08:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1cc0c:	4770      	bx	lr
   1cc0e:	bf00      	nop
   1cc10:	a95c5f2c 	.word	0xa95c5f2c
   1cc14:	ffff8fe9 	.word	0xffff8fe9
   1cc18:	ffff8fea 	.word	0xffff8fea

0001cc1c <mutex_init>:
   1cc1c:	b510      	push	{r4, lr}
   1cc1e:	4604      	mov	r4, r0
   1cc20:	b120      	cbz	r0, 1cc2c <mutex_init+0x10>
   1cc22:	4b04      	ldr	r3, [pc, #16]	; (1cc34 <mutex_init+0x18>)
   1cc24:	6063      	str	r3, [r4, #4]
   1cc26:	2200      	movs	r2, #0
   1cc28:	6022      	str	r2, [r4, #0]
   1cc2a:	bd10      	pop	{r4, pc}
   1cc2c:	4802      	ldr	r0, [pc, #8]	; (1cc38 <mutex_init+0x1c>)
   1cc2e:	f7ff ff25 	bl	1ca7c <CC_PalAbort>
   1cc32:	e7f6      	b.n	1cc22 <mutex_init+0x6>
   1cc34:	3a00003a 	.word	0x3a00003a
   1cc38:	00026c74 	.word	0x00026c74

0001cc3c <nrf_cc3xx_platform_set_mutexes>:
   1cc3c:	b570      	push	{r4, r5, r6, lr}
   1cc3e:	e9d0 2300 	ldrd	r2, r3, [r0]
   1cc42:	4c15      	ldr	r4, [pc, #84]	; (1cc98 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1cc44:	4d15      	ldr	r5, [pc, #84]	; (1cc9c <nrf_cc3xx_platform_set_mutexes+0x60>)
   1cc46:	6063      	str	r3, [r4, #4]
   1cc48:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   1cc4c:	e9c4 3002 	strd	r3, r0, [r4, #8]
   1cc50:	6022      	str	r2, [r4, #0]
   1cc52:	6848      	ldr	r0, [r1, #4]
   1cc54:	680e      	ldr	r6, [r1, #0]
   1cc56:	4b12      	ldr	r3, [pc, #72]	; (1cca0 <nrf_cc3xx_platform_set_mutexes+0x64>)
   1cc58:	e9c3 6000 	strd	r6, r0, [r3]
   1cc5c:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   1cc60:	688e      	ldr	r6, [r1, #8]
   1cc62:	609e      	str	r6, [r3, #8]
   1cc64:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   1cc68:	68ce      	ldr	r6, [r1, #12]
   1cc6a:	6909      	ldr	r1, [r1, #16]
   1cc6c:	60de      	str	r6, [r3, #12]
   1cc6e:	6119      	str	r1, [r3, #16]
   1cc70:	d010      	beq.n	1cc94 <nrf_cc3xx_platform_set_mutexes+0x58>
   1cc72:	490c      	ldr	r1, [pc, #48]	; (1cca4 <nrf_cc3xx_platform_set_mutexes+0x68>)
   1cc74:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   1cc78:	2300      	movs	r3, #0
   1cc7a:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   1cc7e:	f505 708a 	add.w	r0, r5, #276	; 0x114
   1cc82:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   1cc86:	4790      	blx	r2
   1cc88:	6823      	ldr	r3, [r4, #0]
   1cc8a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1cc8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cc92:	4718      	bx	r3
   1cc94:	bd70      	pop	{r4, r5, r6, pc}
   1cc96:	bf00      	nop
   1cc98:	2000079c 	.word	0x2000079c
   1cc9c:	200040e4 	.word	0x200040e4
   1cca0:	20000788 	.word	0x20000788
   1cca4:	a95c5f2c 	.word	0xa95c5f2c

0001cca8 <mbedtls_zeroize_internal>:
   1cca8:	b138      	cbz	r0, 1ccba <mbedtls_zeroize_internal+0x12>
   1ccaa:	b131      	cbz	r1, 1ccba <mbedtls_zeroize_internal+0x12>
   1ccac:	4401      	add	r1, r0
   1ccae:	2200      	movs	r2, #0
   1ccb0:	4603      	mov	r3, r0
   1ccb2:	3001      	adds	r0, #1
   1ccb4:	4281      	cmp	r1, r0
   1ccb6:	701a      	strb	r2, [r3, #0]
   1ccb8:	d1fa      	bne.n	1ccb0 <mbedtls_zeroize_internal+0x8>
   1ccba:	4770      	bx	lr

0001ccbc <mbedtls_platform_zeroize>:
   1ccbc:	b138      	cbz	r0, 1ccce <mbedtls_platform_zeroize+0x12>
   1ccbe:	b131      	cbz	r1, 1ccce <mbedtls_platform_zeroize+0x12>
   1ccc0:	4401      	add	r1, r0
   1ccc2:	2200      	movs	r2, #0
   1ccc4:	4603      	mov	r3, r0
   1ccc6:	3001      	adds	r0, #1
   1ccc8:	4288      	cmp	r0, r1
   1ccca:	701a      	strb	r2, [r3, #0]
   1cccc:	d1fa      	bne.n	1ccc4 <mbedtls_platform_zeroize+0x8>
   1ccce:	4770      	bx	lr

0001ccd0 <block_cipher_df>:
   1ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccd4:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1ccd8:	b0b5      	sub	sp, #212	; 0xd4
   1ccda:	f200 80d7 	bhi.w	1ce8c <block_cipher_df+0x1bc>
   1ccde:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1ce98 <block_cipher_df+0x1c8>
   1cce2:	4614      	mov	r4, r2
   1cce4:	460d      	mov	r5, r1
   1cce6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1ccea:	2100      	movs	r1, #0
   1ccec:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   1ccf0:	4607      	mov	r7, r0
   1ccf2:	4648      	mov	r0, r9
   1ccf4:	f008 f8aa 	bl	24e4c <memset>
   1ccf8:	4640      	mov	r0, r8
   1ccfa:	f001 f951 	bl	1dfa0 <cc_mbedtls_aes_init>
   1ccfe:	2300      	movs	r3, #0
   1cd00:	f8a9 3010 	strh.w	r3, [r9, #16]
   1cd04:	ba63      	rev16	r3, r4
   1cd06:	f109 0618 	add.w	r6, r9, #24
   1cd0a:	f8a9 3012 	strh.w	r3, [r9, #18]
   1cd0e:	2320      	movs	r3, #32
   1cd10:	4629      	mov	r1, r5
   1cd12:	4622      	mov	r2, r4
   1cd14:	f889 3017 	strb.w	r3, [r9, #23]
   1cd18:	4630      	mov	r0, r6
   1cd1a:	f008 f876 	bl	24e0a <memcpy>
   1cd1e:	4b5d      	ldr	r3, [pc, #372]	; (1ce94 <block_cipher_df+0x1c4>)
   1cd20:	9307      	str	r3, [sp, #28]
   1cd22:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1cd26:	2280      	movs	r2, #128	; 0x80
   1cd28:	9308      	str	r3, [sp, #32]
   1cd2a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1cd2e:	9309      	str	r3, [sp, #36]	; 0x24
   1cd30:	5532      	strb	r2, [r6, r4]
   1cd32:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1cd36:	a907      	add	r1, sp, #28
   1cd38:	4640      	mov	r0, r8
   1cd3a:	930a      	str	r3, [sp, #40]	; 0x28
   1cd3c:	f001 f946 	bl	1dfcc <cc_mbedtls_aes_setkey_enc>
   1cd40:	4682      	mov	sl, r0
   1cd42:	2800      	cmp	r0, #0
   1cd44:	d17f      	bne.n	1ce46 <block_cipher_df+0x176>
   1cd46:	f104 0319 	add.w	r3, r4, #25
   1cd4a:	ae0b      	add	r6, sp, #44	; 0x2c
   1cd4c:	ac0f      	add	r4, sp, #60	; 0x3c
   1cd4e:	9302      	str	r3, [sp, #8]
   1cd50:	9703      	str	r7, [sp, #12]
   1cd52:	9601      	str	r6, [sp, #4]
   1cd54:	9404      	str	r4, [sp, #16]
   1cd56:	9801      	ldr	r0, [sp, #4]
   1cd58:	f8df b140 	ldr.w	fp, [pc, #320]	; 1ce9c <block_cipher_df+0x1cc>
   1cd5c:	2210      	movs	r2, #16
   1cd5e:	2100      	movs	r1, #0
   1cd60:	f008 f874 	bl	24e4c <memset>
   1cd64:	f8dd a008 	ldr.w	sl, [sp, #8]
   1cd68:	9405      	str	r4, [sp, #20]
   1cd6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cd6c:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   1cd70:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   1cd74:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1cd76:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   1cd7a:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   1cd7e:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   1cd82:	405c      	eors	r4, r3
   1cd84:	9b01      	ldr	r3, [sp, #4]
   1cd86:	407e      	eors	r6, r7
   1cd88:	4055      	eors	r5, r2
   1cd8a:	ea81 0700 	eor.w	r7, r1, r0
   1cd8e:	461a      	mov	r2, r3
   1cd90:	2101      	movs	r1, #1
   1cd92:	4640      	mov	r0, r8
   1cd94:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   1cd98:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   1cd9c:	f001 f930 	bl	1e000 <cc_mbedtls_aes_crypt_ecb>
   1cda0:	f1ba 0f10 	cmp.w	sl, #16
   1cda4:	bf94      	ite	ls
   1cda6:	ebaa 0a0a 	subls.w	sl, sl, sl
   1cdaa:	f1aa 0a10 	subhi.w	sl, sl, #16
   1cdae:	f10b 0b10 	add.w	fp, fp, #16
   1cdb2:	2800      	cmp	r0, #0
   1cdb4:	d165      	bne.n	1ce82 <block_cipher_df+0x1b2>
   1cdb6:	f1ba 0f00 	cmp.w	sl, #0
   1cdba:	d1d6      	bne.n	1cd6a <block_cipher_df+0x9a>
   1cdbc:	9c05      	ldr	r4, [sp, #20]
   1cdbe:	9901      	ldr	r1, [sp, #4]
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	2210      	movs	r2, #16
   1cdc4:	f008 f821 	bl	24e0a <memcpy>
   1cdc8:	f899 3003 	ldrb.w	r3, [r9, #3]
   1cdcc:	3410      	adds	r4, #16
   1cdce:	3301      	adds	r3, #1
   1cdd0:	45a0      	cmp	r8, r4
   1cdd2:	f889 3003 	strb.w	r3, [r9, #3]
   1cdd6:	d1be      	bne.n	1cd56 <block_cipher_df+0x86>
   1cdd8:	9c04      	ldr	r4, [sp, #16]
   1cdda:	9f03      	ldr	r7, [sp, #12]
   1cddc:	9e01      	ldr	r6, [sp, #4]
   1cdde:	2280      	movs	r2, #128	; 0x80
   1cde0:	4621      	mov	r1, r4
   1cde2:	4640      	mov	r0, r8
   1cde4:	f001 f8f2 	bl	1dfcc <cc_mbedtls_aes_setkey_enc>
   1cde8:	4682      	mov	sl, r0
   1cdea:	bb70      	cbnz	r0, 1ce4a <block_cipher_df+0x17a>
   1cdec:	f107 0920 	add.w	r9, r7, #32
   1cdf0:	463d      	mov	r5, r7
   1cdf2:	ab13      	add	r3, sp, #76	; 0x4c
   1cdf4:	461a      	mov	r2, r3
   1cdf6:	2101      	movs	r1, #1
   1cdf8:	4640      	mov	r0, r8
   1cdfa:	f001 f901 	bl	1e000 <cc_mbedtls_aes_crypt_ecb>
   1cdfe:	2210      	movs	r2, #16
   1ce00:	4682      	mov	sl, r0
   1ce02:	a913      	add	r1, sp, #76	; 0x4c
   1ce04:	4628      	mov	r0, r5
   1ce06:	4415      	add	r5, r2
   1ce08:	f1ba 0f00 	cmp.w	sl, #0
   1ce0c:	d11d      	bne.n	1ce4a <block_cipher_df+0x17a>
   1ce0e:	f007 fffc 	bl	24e0a <memcpy>
   1ce12:	454d      	cmp	r5, r9
   1ce14:	d1ed      	bne.n	1cdf2 <block_cipher_df+0x122>
   1ce16:	4640      	mov	r0, r8
   1ce18:	f001 f8d2 	bl	1dfc0 <cc_mbedtls_aes_free>
   1ce1c:	481e      	ldr	r0, [pc, #120]	; (1ce98 <block_cipher_df+0x1c8>)
   1ce1e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1ce22:	f7ff ff4b 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce26:	4620      	mov	r0, r4
   1ce28:	2120      	movs	r1, #32
   1ce2a:	f7ff ff47 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce2e:	a807      	add	r0, sp, #28
   1ce30:	2110      	movs	r1, #16
   1ce32:	f7ff ff43 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce36:	4630      	mov	r0, r6
   1ce38:	2110      	movs	r1, #16
   1ce3a:	f7ff ff3f 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce3e:	4650      	mov	r0, sl
   1ce40:	b035      	add	sp, #212	; 0xd4
   1ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce46:	ac0f      	add	r4, sp, #60	; 0x3c
   1ce48:	ae0b      	add	r6, sp, #44	; 0x2c
   1ce4a:	4640      	mov	r0, r8
   1ce4c:	f001 f8b8 	bl	1dfc0 <cc_mbedtls_aes_free>
   1ce50:	4811      	ldr	r0, [pc, #68]	; (1ce98 <block_cipher_df+0x1c8>)
   1ce52:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1ce56:	f7ff ff31 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce5a:	4620      	mov	r0, r4
   1ce5c:	2120      	movs	r1, #32
   1ce5e:	f7ff ff2d 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce62:	a807      	add	r0, sp, #28
   1ce64:	2110      	movs	r1, #16
   1ce66:	f7ff ff29 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce6a:	2110      	movs	r1, #16
   1ce6c:	4630      	mov	r0, r6
   1ce6e:	f7ff ff25 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce72:	2120      	movs	r1, #32
   1ce74:	4638      	mov	r0, r7
   1ce76:	f7ff ff21 	bl	1ccbc <mbedtls_platform_zeroize>
   1ce7a:	4650      	mov	r0, sl
   1ce7c:	b035      	add	sp, #212	; 0xd4
   1ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce82:	9f03      	ldr	r7, [sp, #12]
   1ce84:	9e01      	ldr	r6, [sp, #4]
   1ce86:	9c04      	ldr	r4, [sp, #16]
   1ce88:	4682      	mov	sl, r0
   1ce8a:	e7de      	b.n	1ce4a <block_cipher_df+0x17a>
   1ce8c:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   1ce90:	e7f3      	b.n	1ce7a <block_cipher_df+0x1aa>
   1ce92:	bf00      	nop
   1ce94:	03020100 	.word	0x03020100
   1ce98:	200042b4 	.word	0x200042b4
   1ce9c:	200042c4 	.word	0x200042c4

0001cea0 <ctr_drbg_update_internal>:
   1cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cea4:	b088      	sub	sp, #32
   1cea6:	4604      	mov	r4, r0
   1cea8:	460d      	mov	r5, r1
   1ceaa:	2220      	movs	r2, #32
   1ceac:	2100      	movs	r1, #0
   1ceae:	4668      	mov	r0, sp
   1ceb0:	f007 ffcc 	bl	24e4c <memset>
   1ceb4:	f104 0620 	add.w	r6, r4, #32
   1ceb8:	466f      	mov	r7, sp
   1ceba:	7be2      	ldrb	r2, [r4, #15]
   1cebc:	3201      	adds	r2, #1
   1cebe:	b2d2      	uxtb	r2, r2
   1cec0:	73e2      	strb	r2, [r4, #15]
   1cec2:	2a00      	cmp	r2, #0
   1cec4:	d14d      	bne.n	1cf62 <ctr_drbg_update_internal+0xc2>
   1cec6:	7ba2      	ldrb	r2, [r4, #14]
   1cec8:	3201      	adds	r2, #1
   1ceca:	b2d2      	uxtb	r2, r2
   1cecc:	73a2      	strb	r2, [r4, #14]
   1cece:	2a00      	cmp	r2, #0
   1ced0:	d147      	bne.n	1cf62 <ctr_drbg_update_internal+0xc2>
   1ced2:	7b63      	ldrb	r3, [r4, #13]
   1ced4:	3301      	adds	r3, #1
   1ced6:	b2db      	uxtb	r3, r3
   1ced8:	7363      	strb	r3, [r4, #13]
   1ceda:	2b00      	cmp	r3, #0
   1cedc:	d141      	bne.n	1cf62 <ctr_drbg_update_internal+0xc2>
   1cede:	7b23      	ldrb	r3, [r4, #12]
   1cee0:	3301      	adds	r3, #1
   1cee2:	b2db      	uxtb	r3, r3
   1cee4:	7323      	strb	r3, [r4, #12]
   1cee6:	2b00      	cmp	r3, #0
   1cee8:	d13b      	bne.n	1cf62 <ctr_drbg_update_internal+0xc2>
   1ceea:	7ae3      	ldrb	r3, [r4, #11]
   1ceec:	3301      	adds	r3, #1
   1ceee:	b2db      	uxtb	r3, r3
   1cef0:	72e3      	strb	r3, [r4, #11]
   1cef2:	2b00      	cmp	r3, #0
   1cef4:	d135      	bne.n	1cf62 <ctr_drbg_update_internal+0xc2>
   1cef6:	7aa3      	ldrb	r3, [r4, #10]
   1cef8:	3301      	adds	r3, #1
   1cefa:	b2db      	uxtb	r3, r3
   1cefc:	72a3      	strb	r3, [r4, #10]
   1cefe:	2b00      	cmp	r3, #0
   1cf00:	d12f      	bne.n	1cf62 <ctr_drbg_update_internal+0xc2>
   1cf02:	7a63      	ldrb	r3, [r4, #9]
   1cf04:	3301      	adds	r3, #1
   1cf06:	b2db      	uxtb	r3, r3
   1cf08:	7263      	strb	r3, [r4, #9]
   1cf0a:	bb53      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf0c:	7a23      	ldrb	r3, [r4, #8]
   1cf0e:	3301      	adds	r3, #1
   1cf10:	b2db      	uxtb	r3, r3
   1cf12:	7223      	strb	r3, [r4, #8]
   1cf14:	bb2b      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf16:	79e3      	ldrb	r3, [r4, #7]
   1cf18:	3301      	adds	r3, #1
   1cf1a:	b2db      	uxtb	r3, r3
   1cf1c:	71e3      	strb	r3, [r4, #7]
   1cf1e:	bb03      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf20:	79a3      	ldrb	r3, [r4, #6]
   1cf22:	3301      	adds	r3, #1
   1cf24:	b2db      	uxtb	r3, r3
   1cf26:	71a3      	strb	r3, [r4, #6]
   1cf28:	b9db      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf2a:	7963      	ldrb	r3, [r4, #5]
   1cf2c:	3301      	adds	r3, #1
   1cf2e:	b2db      	uxtb	r3, r3
   1cf30:	7163      	strb	r3, [r4, #5]
   1cf32:	b9b3      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf34:	7923      	ldrb	r3, [r4, #4]
   1cf36:	3301      	adds	r3, #1
   1cf38:	b2db      	uxtb	r3, r3
   1cf3a:	7123      	strb	r3, [r4, #4]
   1cf3c:	b98b      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf3e:	78e3      	ldrb	r3, [r4, #3]
   1cf40:	3301      	adds	r3, #1
   1cf42:	b2db      	uxtb	r3, r3
   1cf44:	70e3      	strb	r3, [r4, #3]
   1cf46:	b963      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf48:	78a3      	ldrb	r3, [r4, #2]
   1cf4a:	3301      	adds	r3, #1
   1cf4c:	b2db      	uxtb	r3, r3
   1cf4e:	70a3      	strb	r3, [r4, #2]
   1cf50:	b93b      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf52:	7863      	ldrb	r3, [r4, #1]
   1cf54:	3301      	adds	r3, #1
   1cf56:	b2db      	uxtb	r3, r3
   1cf58:	7063      	strb	r3, [r4, #1]
   1cf5a:	b913      	cbnz	r3, 1cf62 <ctr_drbg_update_internal+0xc2>
   1cf5c:	7823      	ldrb	r3, [r4, #0]
   1cf5e:	3301      	adds	r3, #1
   1cf60:	7023      	strb	r3, [r4, #0]
   1cf62:	463b      	mov	r3, r7
   1cf64:	4622      	mov	r2, r4
   1cf66:	2101      	movs	r1, #1
   1cf68:	4630      	mov	r0, r6
   1cf6a:	f001 f849 	bl	1e000 <cc_mbedtls_aes_crypt_ecb>
   1cf6e:	4680      	mov	r8, r0
   1cf70:	bb50      	cbnz	r0, 1cfc8 <ctr_drbg_update_internal+0x128>
   1cf72:	3710      	adds	r7, #16
   1cf74:	ab08      	add	r3, sp, #32
   1cf76:	429f      	cmp	r7, r3
   1cf78:	d19f      	bne.n	1ceba <ctr_drbg_update_internal+0x1a>
   1cf7a:	9a02      	ldr	r2, [sp, #8]
   1cf7c:	68ab      	ldr	r3, [r5, #8]
   1cf7e:	9f03      	ldr	r7, [sp, #12]
   1cf80:	9907      	ldr	r1, [sp, #28]
   1cf82:	4053      	eors	r3, r2
   1cf84:	9302      	str	r3, [sp, #8]
   1cf86:	4630      	mov	r0, r6
   1cf88:	68ee      	ldr	r6, [r5, #12]
   1cf8a:	9b00      	ldr	r3, [sp, #0]
   1cf8c:	407e      	eors	r6, r7
   1cf8e:	9603      	str	r6, [sp, #12]
   1cf90:	9f04      	ldr	r7, [sp, #16]
   1cf92:	692e      	ldr	r6, [r5, #16]
   1cf94:	407e      	eors	r6, r7
   1cf96:	9604      	str	r6, [sp, #16]
   1cf98:	696e      	ldr	r6, [r5, #20]
   1cf9a:	9f05      	ldr	r7, [sp, #20]
   1cf9c:	407e      	eors	r6, r7
   1cf9e:	9605      	str	r6, [sp, #20]
   1cfa0:	9f06      	ldr	r7, [sp, #24]
   1cfa2:	69ae      	ldr	r6, [r5, #24]
   1cfa4:	407e      	eors	r6, r7
   1cfa6:	9606      	str	r6, [sp, #24]
   1cfa8:	69ee      	ldr	r6, [r5, #28]
   1cfaa:	4071      	eors	r1, r6
   1cfac:	9107      	str	r1, [sp, #28]
   1cfae:	6829      	ldr	r1, [r5, #0]
   1cfb0:	404b      	eors	r3, r1
   1cfb2:	9300      	str	r3, [sp, #0]
   1cfb4:	9901      	ldr	r1, [sp, #4]
   1cfb6:	686b      	ldr	r3, [r5, #4]
   1cfb8:	2280      	movs	r2, #128	; 0x80
   1cfba:	404b      	eors	r3, r1
   1cfbc:	4669      	mov	r1, sp
   1cfbe:	9301      	str	r3, [sp, #4]
   1cfc0:	f001 f804 	bl	1dfcc <cc_mbedtls_aes_setkey_enc>
   1cfc4:	4680      	mov	r8, r0
   1cfc6:	b138      	cbz	r0, 1cfd8 <ctr_drbg_update_internal+0x138>
   1cfc8:	4668      	mov	r0, sp
   1cfca:	2120      	movs	r1, #32
   1cfcc:	f7ff fe76 	bl	1ccbc <mbedtls_platform_zeroize>
   1cfd0:	4640      	mov	r0, r8
   1cfd2:	b008      	add	sp, #32
   1cfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cfd8:	2210      	movs	r2, #16
   1cfda:	eb0d 0102 	add.w	r1, sp, r2
   1cfde:	4620      	mov	r0, r4
   1cfe0:	f007 ff13 	bl	24e0a <memcpy>
   1cfe4:	e7f0      	b.n	1cfc8 <ctr_drbg_update_internal+0x128>
   1cfe6:	bf00      	nop

0001cfe8 <mbedtls_ctr_drbg_reseed_internal>:
   1cfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cfec:	4604      	mov	r4, r0
   1cfee:	6980      	ldr	r0, [r0, #24]
   1cff0:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1cff4:	d852      	bhi.n	1d09c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1cff6:	461d      	mov	r5, r3
   1cff8:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1cffc:	42ab      	cmp	r3, r5
   1cffe:	d34d      	bcc.n	1d09c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d000:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1d004:	1a1b      	subs	r3, r3, r0
   1d006:	4293      	cmp	r3, r2
   1d008:	4616      	mov	r6, r2
   1d00a:	d347      	bcc.n	1d09c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d00c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1d0a8 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1d010:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1d014:	460f      	mov	r7, r1
   1d016:	4648      	mov	r0, r9
   1d018:	2100      	movs	r1, #0
   1d01a:	f007 ff17 	bl	24e4c <memset>
   1d01e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1d022:	69a2      	ldr	r2, [r4, #24]
   1d024:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1d028:	4649      	mov	r1, r9
   1d02a:	4798      	blx	r3
   1d02c:	2800      	cmp	r0, #0
   1d02e:	d138      	bne.n	1d0a2 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1d030:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1d034:	b13d      	cbz	r5, 1d046 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1d036:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1d03a:	462a      	mov	r2, r5
   1d03c:	eb09 0108 	add.w	r1, r9, r8
   1d040:	4798      	blx	r3
   1d042:	bb70      	cbnz	r0, 1d0a2 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1d044:	44a8      	add	r8, r5
   1d046:	b107      	cbz	r7, 1d04a <mbedtls_ctr_drbg_reseed_internal+0x62>
   1d048:	b9c6      	cbnz	r6, 1d07c <mbedtls_ctr_drbg_reseed_internal+0x94>
   1d04a:	4917      	ldr	r1, [pc, #92]	; (1d0a8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d04c:	4642      	mov	r2, r8
   1d04e:	4608      	mov	r0, r1
   1d050:	f7ff fe3e 	bl	1ccd0 <block_cipher_df>
   1d054:	4605      	mov	r5, r0
   1d056:	b138      	cbz	r0, 1d068 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1d058:	4813      	ldr	r0, [pc, #76]	; (1d0a8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d05a:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1d05e:	f7ff fe2d 	bl	1ccbc <mbedtls_platform_zeroize>
   1d062:	4628      	mov	r0, r5
   1d064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d068:	490f      	ldr	r1, [pc, #60]	; (1d0a8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d06a:	4620      	mov	r0, r4
   1d06c:	f7ff ff18 	bl	1cea0 <ctr_drbg_update_internal>
   1d070:	4605      	mov	r5, r0
   1d072:	2800      	cmp	r0, #0
   1d074:	d1f0      	bne.n	1d058 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d076:	2301      	movs	r3, #1
   1d078:	6123      	str	r3, [r4, #16]
   1d07a:	e7ed      	b.n	1d058 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d07c:	eb09 0008 	add.w	r0, r9, r8
   1d080:	4639      	mov	r1, r7
   1d082:	4632      	mov	r2, r6
   1d084:	f007 fec1 	bl	24e0a <memcpy>
   1d088:	4907      	ldr	r1, [pc, #28]	; (1d0a8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d08a:	44b0      	add	r8, r6
   1d08c:	4642      	mov	r2, r8
   1d08e:	4608      	mov	r0, r1
   1d090:	f7ff fe1e 	bl	1ccd0 <block_cipher_df>
   1d094:	4605      	mov	r5, r0
   1d096:	2800      	cmp	r0, #0
   1d098:	d1de      	bne.n	1d058 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d09a:	e7e5      	b.n	1d068 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1d09c:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1d0a0:	e7df      	b.n	1d062 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1d0a2:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1d0a6:	e7dc      	b.n	1d062 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1d0a8:	20004454 	.word	0x20004454

0001d0ac <cc_mbedtls_ctr_drbg_init>:
   1d0ac:	b510      	push	{r4, lr}
   1d0ae:	22a4      	movs	r2, #164	; 0xa4
   1d0b0:	4604      	mov	r4, r0
   1d0b2:	2100      	movs	r1, #0
   1d0b4:	f007 feca 	bl	24e4c <memset>
   1d0b8:	4b06      	ldr	r3, [pc, #24]	; (1d0d4 <cc_mbedtls_ctr_drbg_init+0x28>)
   1d0ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d0be:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1d0c2:	6121      	str	r1, [r4, #16]
   1d0c4:	61e2      	str	r2, [r4, #28]
   1d0c6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1d0ca:	681b      	ldr	r3, [r3, #0]
   1d0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d0d0:	4718      	bx	r3
   1d0d2:	bf00      	nop
   1d0d4:	200007ec 	.word	0x200007ec

0001d0d8 <cc_mbedtls_ctr_drbg_seed>:
   1d0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d0dc:	b085      	sub	sp, #20
   1d0de:	4605      	mov	r5, r0
   1d0e0:	460f      	mov	r7, r1
   1d0e2:	4616      	mov	r6, r2
   1d0e4:	2100      	movs	r1, #0
   1d0e6:	2210      	movs	r2, #16
   1d0e8:	4668      	mov	r0, sp
   1d0ea:	4699      	mov	r9, r3
   1d0ec:	f007 feae 	bl	24e4c <memset>
   1d0f0:	4b1d      	ldr	r3, [pc, #116]	; (1d168 <cc_mbedtls_ctr_drbg_seed+0x90>)
   1d0f2:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1d0f6:	681b      	ldr	r3, [r3, #0]
   1d0f8:	4640      	mov	r0, r8
   1d0fa:	4798      	blx	r3
   1d0fc:	b120      	cbz	r0, 1d108 <cc_mbedtls_ctr_drbg_seed+0x30>
   1d0fe:	4604      	mov	r4, r0
   1d100:	4620      	mov	r0, r4
   1d102:	b005      	add	sp, #20
   1d104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d108:	f105 0420 	add.w	r4, r5, #32
   1d10c:	4620      	mov	r0, r4
   1d10e:	f000 ff47 	bl	1dfa0 <cc_mbedtls_aes_init>
   1d112:	69aa      	ldr	r2, [r5, #24]
   1d114:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1d118:	692e      	ldr	r6, [r5, #16]
   1d11a:	b9e2      	cbnz	r2, 1d156 <cc_mbedtls_ctr_drbg_seed+0x7e>
   1d11c:	2220      	movs	r2, #32
   1d11e:	2e00      	cmp	r6, #0
   1d120:	61aa      	str	r2, [r5, #24]
   1d122:	db1f      	blt.n	1d164 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1d124:	4620      	mov	r0, r4
   1d126:	4669      	mov	r1, sp
   1d128:	2280      	movs	r2, #128	; 0x80
   1d12a:	f000 ff4f 	bl	1dfcc <cc_mbedtls_aes_setkey_enc>
   1d12e:	4604      	mov	r4, r0
   1d130:	b930      	cbnz	r0, 1d140 <cc_mbedtls_ctr_drbg_seed+0x68>
   1d132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d134:	4633      	mov	r3, r6
   1d136:	4649      	mov	r1, r9
   1d138:	4628      	mov	r0, r5
   1d13a:	f7ff ff55 	bl	1cfe8 <mbedtls_ctr_drbg_reseed_internal>
   1d13e:	4604      	mov	r4, r0
   1d140:	4b0a      	ldr	r3, [pc, #40]	; (1d16c <cc_mbedtls_ctr_drbg_seed+0x94>)
   1d142:	4640      	mov	r0, r8
   1d144:	681b      	ldr	r3, [r3, #0]
   1d146:	4798      	blx	r3
   1d148:	2800      	cmp	r0, #0
   1d14a:	bf18      	it	ne
   1d14c:	4604      	movne	r4, r0
   1d14e:	4620      	mov	r0, r4
   1d150:	b005      	add	sp, #20
   1d152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d156:	2e00      	cmp	r6, #0
   1d158:	dae4      	bge.n	1d124 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d15a:	2a17      	cmp	r2, #23
   1d15c:	d802      	bhi.n	1d164 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1d15e:	3201      	adds	r2, #1
   1d160:	0856      	lsrs	r6, r2, #1
   1d162:	e7df      	b.n	1d124 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d164:	2600      	movs	r6, #0
   1d166:	e7dd      	b.n	1d124 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d168:	200007e8 	.word	0x200007e8
   1d16c:	200007e4 	.word	0x200007e4

0001d170 <cc_mbedtls_ctr_drbg_random_with_add>:
   1d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d174:	b08d      	sub	sp, #52	; 0x34
   1d176:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1d17a:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1d17c:	f200 80e3 	bhi.w	1d346 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   1d180:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1d184:	f200 80dc 	bhi.w	1d340 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   1d188:	4604      	mov	r4, r0
   1d18a:	4615      	mov	r5, r2
   1d18c:	460e      	mov	r6, r1
   1d18e:	2220      	movs	r2, #32
   1d190:	2100      	movs	r1, #0
   1d192:	a804      	add	r0, sp, #16
   1d194:	4698      	mov	r8, r3
   1d196:	f007 fe59 	bl	24e4c <memset>
   1d19a:	4b6c      	ldr	r3, [pc, #432]	; (1d34c <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   1d19c:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1d1a0:	681b      	ldr	r3, [r3, #0]
   1d1a2:	4648      	mov	r0, r9
   1d1a4:	4798      	blx	r3
   1d1a6:	4683      	mov	fp, r0
   1d1a8:	2800      	cmp	r0, #0
   1d1aa:	f040 8092 	bne.w	1d2d2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d1ae:	6922      	ldr	r2, [r4, #16]
   1d1b0:	69e3      	ldr	r3, [r4, #28]
   1d1b2:	429a      	cmp	r2, r3
   1d1b4:	f300 8091 	bgt.w	1d2da <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1d1b8:	6963      	ldr	r3, [r4, #20]
   1d1ba:	2b00      	cmp	r3, #0
   1d1bc:	f040 808d 	bne.w	1d2da <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1d1c0:	2f00      	cmp	r7, #0
   1d1c2:	f040 80a9 	bne.w	1d318 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1d1c6:	f8df a188 	ldr.w	sl, [pc, #392]	; 1d350 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1d1ca:	466f      	mov	r7, sp
   1d1cc:	2d00      	cmp	r5, #0
   1d1ce:	f000 8098 	beq.w	1d302 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1d1d2:	f104 0820 	add.w	r8, r4, #32
   1d1d6:	466f      	mov	r7, sp
   1d1d8:	e00e      	b.n	1d1f8 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1d1da:	2d10      	cmp	r5, #16
   1d1dc:	46ab      	mov	fp, r5
   1d1de:	bf28      	it	cs
   1d1e0:	f04f 0b10 	movcs.w	fp, #16
   1d1e4:	4630      	mov	r0, r6
   1d1e6:	465a      	mov	r2, fp
   1d1e8:	4639      	mov	r1, r7
   1d1ea:	f007 fe0e 	bl	24e0a <memcpy>
   1d1ee:	ebb5 050b 	subs.w	r5, r5, fp
   1d1f2:	445e      	add	r6, fp
   1d1f4:	f000 8085 	beq.w	1d302 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1d1f8:	7be3      	ldrb	r3, [r4, #15]
   1d1fa:	3301      	adds	r3, #1
   1d1fc:	b2db      	uxtb	r3, r3
   1d1fe:	73e3      	strb	r3, [r4, #15]
   1d200:	2b00      	cmp	r3, #0
   1d202:	d14d      	bne.n	1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d204:	7ba3      	ldrb	r3, [r4, #14]
   1d206:	3301      	adds	r3, #1
   1d208:	b2db      	uxtb	r3, r3
   1d20a:	73a3      	strb	r3, [r4, #14]
   1d20c:	2b00      	cmp	r3, #0
   1d20e:	d147      	bne.n	1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d210:	7b63      	ldrb	r3, [r4, #13]
   1d212:	3301      	adds	r3, #1
   1d214:	b2db      	uxtb	r3, r3
   1d216:	7363      	strb	r3, [r4, #13]
   1d218:	2b00      	cmp	r3, #0
   1d21a:	d141      	bne.n	1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d21c:	7b23      	ldrb	r3, [r4, #12]
   1d21e:	3301      	adds	r3, #1
   1d220:	b2db      	uxtb	r3, r3
   1d222:	7323      	strb	r3, [r4, #12]
   1d224:	2b00      	cmp	r3, #0
   1d226:	d13b      	bne.n	1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d228:	7ae3      	ldrb	r3, [r4, #11]
   1d22a:	3301      	adds	r3, #1
   1d22c:	b2db      	uxtb	r3, r3
   1d22e:	72e3      	strb	r3, [r4, #11]
   1d230:	2b00      	cmp	r3, #0
   1d232:	d135      	bne.n	1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d234:	7aa3      	ldrb	r3, [r4, #10]
   1d236:	3301      	adds	r3, #1
   1d238:	b2db      	uxtb	r3, r3
   1d23a:	72a3      	strb	r3, [r4, #10]
   1d23c:	2b00      	cmp	r3, #0
   1d23e:	d12f      	bne.n	1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d240:	7a63      	ldrb	r3, [r4, #9]
   1d242:	3301      	adds	r3, #1
   1d244:	b2db      	uxtb	r3, r3
   1d246:	7263      	strb	r3, [r4, #9]
   1d248:	bb53      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d24a:	7a23      	ldrb	r3, [r4, #8]
   1d24c:	3301      	adds	r3, #1
   1d24e:	b2db      	uxtb	r3, r3
   1d250:	7223      	strb	r3, [r4, #8]
   1d252:	bb2b      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d254:	79e3      	ldrb	r3, [r4, #7]
   1d256:	3301      	adds	r3, #1
   1d258:	b2db      	uxtb	r3, r3
   1d25a:	71e3      	strb	r3, [r4, #7]
   1d25c:	bb03      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d25e:	79a3      	ldrb	r3, [r4, #6]
   1d260:	3301      	adds	r3, #1
   1d262:	b2db      	uxtb	r3, r3
   1d264:	71a3      	strb	r3, [r4, #6]
   1d266:	b9db      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d268:	7963      	ldrb	r3, [r4, #5]
   1d26a:	3301      	adds	r3, #1
   1d26c:	b2db      	uxtb	r3, r3
   1d26e:	7163      	strb	r3, [r4, #5]
   1d270:	b9b3      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d272:	7923      	ldrb	r3, [r4, #4]
   1d274:	3301      	adds	r3, #1
   1d276:	b2db      	uxtb	r3, r3
   1d278:	7123      	strb	r3, [r4, #4]
   1d27a:	b98b      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d27c:	78e3      	ldrb	r3, [r4, #3]
   1d27e:	3301      	adds	r3, #1
   1d280:	b2db      	uxtb	r3, r3
   1d282:	70e3      	strb	r3, [r4, #3]
   1d284:	b963      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d286:	78a3      	ldrb	r3, [r4, #2]
   1d288:	3301      	adds	r3, #1
   1d28a:	b2db      	uxtb	r3, r3
   1d28c:	70a3      	strb	r3, [r4, #2]
   1d28e:	b93b      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d290:	7863      	ldrb	r3, [r4, #1]
   1d292:	3301      	adds	r3, #1
   1d294:	b2db      	uxtb	r3, r3
   1d296:	7063      	strb	r3, [r4, #1]
   1d298:	b913      	cbnz	r3, 1d2a0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1d29a:	7823      	ldrb	r3, [r4, #0]
   1d29c:	3301      	adds	r3, #1
   1d29e:	7023      	strb	r3, [r4, #0]
   1d2a0:	463b      	mov	r3, r7
   1d2a2:	4622      	mov	r2, r4
   1d2a4:	2101      	movs	r1, #1
   1d2a6:	4640      	mov	r0, r8
   1d2a8:	f000 feaa 	bl	1e000 <cc_mbedtls_aes_crypt_ecb>
   1d2ac:	4683      	mov	fp, r0
   1d2ae:	2800      	cmp	r0, #0
   1d2b0:	d093      	beq.n	1d1da <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1d2b2:	f8da 3000 	ldr.w	r3, [sl]
   1d2b6:	4648      	mov	r0, r9
   1d2b8:	4798      	blx	r3
   1d2ba:	2120      	movs	r1, #32
   1d2bc:	4603      	mov	r3, r0
   1d2be:	a804      	add	r0, sp, #16
   1d2c0:	2b00      	cmp	r3, #0
   1d2c2:	bf18      	it	ne
   1d2c4:	469b      	movne	fp, r3
   1d2c6:	f7ff fcf9 	bl	1ccbc <mbedtls_platform_zeroize>
   1d2ca:	2110      	movs	r1, #16
   1d2cc:	4638      	mov	r0, r7
   1d2ce:	f7ff fcf5 	bl	1ccbc <mbedtls_platform_zeroize>
   1d2d2:	4658      	mov	r0, fp
   1d2d4:	b00d      	add	sp, #52	; 0x34
   1d2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2da:	463a      	mov	r2, r7
   1d2dc:	4641      	mov	r1, r8
   1d2de:	2300      	movs	r3, #0
   1d2e0:	4620      	mov	r0, r4
   1d2e2:	f7ff fe81 	bl	1cfe8 <mbedtls_ctr_drbg_reseed_internal>
   1d2e6:	f8df a068 	ldr.w	sl, [pc, #104]	; 1d350 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1d2ea:	2800      	cmp	r0, #0
   1d2ec:	f43f af6d 	beq.w	1d1ca <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1d2f0:	f8da 3000 	ldr.w	r3, [sl]
   1d2f4:	4648      	mov	r0, r9
   1d2f6:	4798      	blx	r3
   1d2f8:	4683      	mov	fp, r0
   1d2fa:	2800      	cmp	r0, #0
   1d2fc:	f43f af65 	beq.w	1d1ca <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1d300:	e7e7      	b.n	1d2d2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d302:	a904      	add	r1, sp, #16
   1d304:	4620      	mov	r0, r4
   1d306:	f7ff fdcb 	bl	1cea0 <ctr_drbg_update_internal>
   1d30a:	4683      	mov	fp, r0
   1d30c:	2800      	cmp	r0, #0
   1d30e:	d1d0      	bne.n	1d2b2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d310:	6923      	ldr	r3, [r4, #16]
   1d312:	3301      	adds	r3, #1
   1d314:	6123      	str	r3, [r4, #16]
   1d316:	e7cc      	b.n	1d2b2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d318:	463a      	mov	r2, r7
   1d31a:	4641      	mov	r1, r8
   1d31c:	a804      	add	r0, sp, #16
   1d31e:	f7ff fcd7 	bl	1ccd0 <block_cipher_df>
   1d322:	4683      	mov	fp, r0
   1d324:	b118      	cbz	r0, 1d32e <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1d326:	f8df a028 	ldr.w	sl, [pc, #40]	; 1d350 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1d32a:	466f      	mov	r7, sp
   1d32c:	e7c1      	b.n	1d2b2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1d32e:	a904      	add	r1, sp, #16
   1d330:	4620      	mov	r0, r4
   1d332:	f7ff fdb5 	bl	1cea0 <ctr_drbg_update_internal>
   1d336:	4683      	mov	fp, r0
   1d338:	2800      	cmp	r0, #0
   1d33a:	f43f af44 	beq.w	1d1c6 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1d33e:	e7f2      	b.n	1d326 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1d340:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1d344:	e7c5      	b.n	1d2d2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d346:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1d34a:	e7c2      	b.n	1d2d2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1d34c:	200007e8 	.word	0x200007e8
   1d350:	200007e4 	.word	0x200007e4

0001d354 <entropy_update>:
   1d354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d358:	2b20      	cmp	r3, #32
   1d35a:	b08b      	sub	sp, #44	; 0x2c
   1d35c:	461d      	mov	r5, r3
   1d35e:	4606      	mov	r6, r0
   1d360:	4688      	mov	r8, r1
   1d362:	4691      	mov	r9, r2
   1d364:	d826      	bhi.n	1d3b4 <entropy_update+0x60>
   1d366:	b2db      	uxtb	r3, r3
   1d368:	af02      	add	r7, sp, #8
   1d36a:	f88d 8004 	strb.w	r8, [sp, #4]
   1d36e:	46b0      	mov	r8, r6
   1d370:	f88d 3005 	strb.w	r3, [sp, #5]
   1d374:	f858 1b04 	ldr.w	r1, [r8], #4
   1d378:	b921      	cbnz	r1, 1d384 <entropy_update+0x30>
   1d37a:	4640      	mov	r0, r8
   1d37c:	f000 fe84 	bl	1e088 <cc_mbedtls_sha256_starts>
   1d380:	4604      	mov	r4, r0
   1d382:	b940      	cbnz	r0, 1d396 <entropy_update+0x42>
   1d384:	2301      	movs	r3, #1
   1d386:	6033      	str	r3, [r6, #0]
   1d388:	2202      	movs	r2, #2
   1d38a:	a901      	add	r1, sp, #4
   1d38c:	4640      	mov	r0, r8
   1d38e:	f000 fe8f 	bl	1e0b0 <cc_mbedtls_sha256_update>
   1d392:	4604      	mov	r4, r0
   1d394:	b138      	cbz	r0, 1d3a6 <entropy_update+0x52>
   1d396:	4638      	mov	r0, r7
   1d398:	2120      	movs	r1, #32
   1d39a:	f7ff fc8f 	bl	1ccbc <mbedtls_platform_zeroize>
   1d39e:	4620      	mov	r0, r4
   1d3a0:	b00b      	add	sp, #44	; 0x2c
   1d3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d3a6:	462a      	mov	r2, r5
   1d3a8:	4649      	mov	r1, r9
   1d3aa:	4640      	mov	r0, r8
   1d3ac:	f000 fe80 	bl	1e0b0 <cc_mbedtls_sha256_update>
   1d3b0:	4604      	mov	r4, r0
   1d3b2:	e7f0      	b.n	1d396 <entropy_update+0x42>
   1d3b4:	af02      	add	r7, sp, #8
   1d3b6:	4619      	mov	r1, r3
   1d3b8:	4610      	mov	r0, r2
   1d3ba:	2300      	movs	r3, #0
   1d3bc:	463a      	mov	r2, r7
   1d3be:	f000 fffd 	bl	1e3bc <cc_mbedtls_sha256>
   1d3c2:	4604      	mov	r4, r0
   1d3c4:	2800      	cmp	r0, #0
   1d3c6:	d1e6      	bne.n	1d396 <entropy_update+0x42>
   1d3c8:	2320      	movs	r3, #32
   1d3ca:	46b9      	mov	r9, r7
   1d3cc:	461d      	mov	r5, r3
   1d3ce:	e7cc      	b.n	1d36a <entropy_update+0x16>

0001d3d0 <entropy_gather_internal.part.0>:
   1d3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3d2:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1d3d6:	b0a7      	sub	sp, #156	; 0x9c
   1d3d8:	2b00      	cmp	r3, #0
   1d3da:	bfd8      	it	le
   1d3dc:	ae02      	addle	r6, sp, #8
   1d3de:	dd2c      	ble.n	1d43a <entropy_gather_internal.part.0+0x6a>
   1d3e0:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1d3e4:	4605      	mov	r5, r0
   1d3e6:	2300      	movs	r3, #0
   1d3e8:	ae02      	add	r6, sp, #8
   1d3ea:	9301      	str	r3, [sp, #4]
   1d3ec:	f1a4 0701 	sub.w	r7, r4, #1
   1d3f0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1d3f4:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1d3f8:	ab01      	add	r3, sp, #4
   1d3fa:	2290      	movs	r2, #144	; 0x90
   1d3fc:	4631      	mov	r1, r6
   1d3fe:	47a0      	blx	r4
   1d400:	fab7 f787 	clz	r7, r7
   1d404:	097f      	lsrs	r7, r7, #5
   1d406:	4604      	mov	r4, r0
   1d408:	b910      	cbnz	r0, 1d410 <entropy_gather_internal.part.0+0x40>
   1d40a:	9b01      	ldr	r3, [sp, #4]
   1d40c:	b93b      	cbnz	r3, 1d41e <entropy_gather_internal.part.0+0x4e>
   1d40e:	b1a7      	cbz	r7, 1d43a <entropy_gather_internal.part.0+0x6a>
   1d410:	4630      	mov	r0, r6
   1d412:	2190      	movs	r1, #144	; 0x90
   1d414:	f7ff fc52 	bl	1ccbc <mbedtls_platform_zeroize>
   1d418:	4620      	mov	r0, r4
   1d41a:	b027      	add	sp, #156	; 0x9c
   1d41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d41e:	4601      	mov	r1, r0
   1d420:	4632      	mov	r2, r6
   1d422:	4628      	mov	r0, r5
   1d424:	f7ff ff96 	bl	1d354 <entropy_update>
   1d428:	b950      	cbnz	r0, 1d440 <entropy_gather_internal.part.0+0x70>
   1d42a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1d42e:	9a01      	ldr	r2, [sp, #4]
   1d430:	4413      	add	r3, r2
   1d432:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1d436:	2f00      	cmp	r7, #0
   1d438:	d1ea      	bne.n	1d410 <entropy_gather_internal.part.0+0x40>
   1d43a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1d43e:	e7e7      	b.n	1d410 <entropy_gather_internal.part.0+0x40>
   1d440:	4604      	mov	r4, r0
   1d442:	4620      	mov	r0, r4
   1d444:	b027      	add	sp, #156	; 0x9c
   1d446:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d448 <cc_mbedtls_entropy_init>:
   1d448:	b570      	push	{r4, r5, r6, lr}
   1d44a:	2500      	movs	r5, #0
   1d44c:	4604      	mov	r4, r0
   1d44e:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1d452:	2214      	movs	r2, #20
   1d454:	4629      	mov	r1, r5
   1d456:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   1d45a:	30fc      	adds	r0, #252	; 0xfc
   1d45c:	f007 fcf6 	bl	24e4c <memset>
   1d460:	2208      	movs	r2, #8
   1d462:	4629      	mov	r1, r5
   1d464:	4630      	mov	r0, r6
   1d466:	f007 fcf1 	bl	24e4c <memset>
   1d46a:	4b15      	ldr	r3, [pc, #84]	; (1d4c0 <cc_mbedtls_entropy_init+0x78>)
   1d46c:	4630      	mov	r0, r6
   1d46e:	681b      	ldr	r3, [r3, #0]
   1d470:	4798      	blx	r3
   1d472:	4620      	mov	r0, r4
   1d474:	f840 5b04 	str.w	r5, [r0], #4
   1d478:	f000 fdec 	bl	1e054 <cc_mbedtls_sha256_init>
   1d47c:	4b11      	ldr	r3, [pc, #68]	; (1d4c4 <cc_mbedtls_entropy_init+0x7c>)
   1d47e:	4630      	mov	r0, r6
   1d480:	681b      	ldr	r3, [r3, #0]
   1d482:	4798      	blx	r3
   1d484:	b9d8      	cbnz	r0, 1d4be <cc_mbedtls_entropy_init+0x76>
   1d486:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d48a:	42ab      	cmp	r3, r5
   1d48c:	dc11      	bgt.n	1d4b2 <cc_mbedtls_entropy_init+0x6a>
   1d48e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1d492:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1d496:	2120      	movs	r1, #32
   1d498:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   1d49c:	2101      	movs	r1, #1
   1d49e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   1d4a2:	3301      	adds	r3, #1
   1d4a4:	4908      	ldr	r1, [pc, #32]	; (1d4c8 <cc_mbedtls_entropy_init+0x80>)
   1d4a6:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   1d4aa:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   1d4ae:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1d4b2:	4b06      	ldr	r3, [pc, #24]	; (1d4cc <cc_mbedtls_entropy_init+0x84>)
   1d4b4:	4630      	mov	r0, r6
   1d4b6:	681b      	ldr	r3, [r3, #0]
   1d4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d4bc:	4718      	bx	r3
   1d4be:	bd70      	pop	{r4, r5, r6, pc}
   1d4c0:	200007ec 	.word	0x200007ec
   1d4c4:	200007e8 	.word	0x200007e8
   1d4c8:	0001dea5 	.word	0x0001dea5
   1d4cc:	200007e4 	.word	0x200007e4

0001d4d0 <cc_mbedtls_entropy_func>:
   1d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d4d4:	2a20      	cmp	r2, #32
   1d4d6:	b088      	sub	sp, #32
   1d4d8:	d879      	bhi.n	1d5ce <cc_mbedtls_entropy_func+0xfe>
   1d4da:	4b3e      	ldr	r3, [pc, #248]	; (1d5d4 <cc_mbedtls_entropy_func+0x104>)
   1d4dc:	f500 7988 	add.w	r9, r0, #272	; 0x110
   1d4e0:	681b      	ldr	r3, [r3, #0]
   1d4e2:	4604      	mov	r4, r0
   1d4e4:	4648      	mov	r0, r9
   1d4e6:	4617      	mov	r7, r2
   1d4e8:	4688      	mov	r8, r1
   1d4ea:	4798      	blx	r3
   1d4ec:	4605      	mov	r5, r0
   1d4ee:	b9f8      	cbnz	r0, 1d530 <cc_mbedtls_entropy_func+0x60>
   1d4f0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d4f4:	f240 1601 	movw	r6, #257	; 0x101
   1d4f8:	2b00      	cmp	r3, #0
   1d4fa:	d064      	beq.n	1d5c6 <cc_mbedtls_entropy_func+0xf6>
   1d4fc:	4620      	mov	r0, r4
   1d4fe:	f7ff ff67 	bl	1d3d0 <entropy_gather_internal.part.0>
   1d502:	4605      	mov	r5, r0
   1d504:	b938      	cbnz	r0, 1d516 <cc_mbedtls_entropy_func+0x46>
   1d506:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d50a:	2b00      	cmp	r3, #0
   1d50c:	dc14      	bgt.n	1d538 <cc_mbedtls_entropy_func+0x68>
   1d50e:	3e01      	subs	r6, #1
   1d510:	d1f2      	bne.n	1d4f8 <cc_mbedtls_entropy_func+0x28>
   1d512:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d516:	466e      	mov	r6, sp
   1d518:	2120      	movs	r1, #32
   1d51a:	4630      	mov	r0, r6
   1d51c:	f7ff fbce 	bl	1ccbc <mbedtls_platform_zeroize>
   1d520:	4b2d      	ldr	r3, [pc, #180]	; (1d5d8 <cc_mbedtls_entropy_func+0x108>)
   1d522:	4648      	mov	r0, r9
   1d524:	681b      	ldr	r3, [r3, #0]
   1d526:	4798      	blx	r3
   1d528:	2800      	cmp	r0, #0
   1d52a:	bf18      	it	ne
   1d52c:	f06f 051d 	mvnne.w	r5, #29
   1d530:	4628      	mov	r0, r5
   1d532:	b008      	add	sp, #32
   1d534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d538:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   1d53c:	4293      	cmp	r3, r2
   1d53e:	d303      	bcc.n	1d548 <cc_mbedtls_entropy_func+0x78>
   1d540:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d544:	2a01      	cmp	r2, #1
   1d546:	d002      	beq.n	1d54e <cc_mbedtls_entropy_func+0x7e>
   1d548:	3e01      	subs	r6, #1
   1d54a:	d1d7      	bne.n	1d4fc <cc_mbedtls_entropy_func+0x2c>
   1d54c:	e7e1      	b.n	1d512 <cc_mbedtls_entropy_func+0x42>
   1d54e:	2b1f      	cmp	r3, #31
   1d550:	d9fa      	bls.n	1d548 <cc_mbedtls_entropy_func+0x78>
   1d552:	466e      	mov	r6, sp
   1d554:	4601      	mov	r1, r0
   1d556:	2220      	movs	r2, #32
   1d558:	4630      	mov	r0, r6
   1d55a:	f104 0a04 	add.w	sl, r4, #4
   1d55e:	f007 fc75 	bl	24e4c <memset>
   1d562:	4631      	mov	r1, r6
   1d564:	4650      	mov	r0, sl
   1d566:	f000 fdcd 	bl	1e104 <cc_mbedtls_sha256_finish>
   1d56a:	4605      	mov	r5, r0
   1d56c:	2800      	cmp	r0, #0
   1d56e:	d1d3      	bne.n	1d518 <cc_mbedtls_entropy_func+0x48>
   1d570:	4650      	mov	r0, sl
   1d572:	f000 fd83 	bl	1e07c <cc_mbedtls_sha256_free>
   1d576:	4650      	mov	r0, sl
   1d578:	f000 fd6c 	bl	1e054 <cc_mbedtls_sha256_init>
   1d57c:	4629      	mov	r1, r5
   1d57e:	4650      	mov	r0, sl
   1d580:	f000 fd82 	bl	1e088 <cc_mbedtls_sha256_starts>
   1d584:	4605      	mov	r5, r0
   1d586:	2800      	cmp	r0, #0
   1d588:	d1c6      	bne.n	1d518 <cc_mbedtls_entropy_func+0x48>
   1d58a:	4650      	mov	r0, sl
   1d58c:	2220      	movs	r2, #32
   1d58e:	4631      	mov	r1, r6
   1d590:	f000 fd8e 	bl	1e0b0 <cc_mbedtls_sha256_update>
   1d594:	4605      	mov	r5, r0
   1d596:	2800      	cmp	r0, #0
   1d598:	d1be      	bne.n	1d518 <cc_mbedtls_entropy_func+0x48>
   1d59a:	4603      	mov	r3, r0
   1d59c:	4632      	mov	r2, r6
   1d59e:	2120      	movs	r1, #32
   1d5a0:	4630      	mov	r0, r6
   1d5a2:	f000 ff0b 	bl	1e3bc <cc_mbedtls_sha256>
   1d5a6:	4605      	mov	r5, r0
   1d5a8:	2800      	cmp	r0, #0
   1d5aa:	d1b5      	bne.n	1d518 <cc_mbedtls_entropy_func+0x48>
   1d5ac:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d5b0:	2b00      	cmp	r3, #0
   1d5b2:	bfc4      	itt	gt
   1d5b4:	2300      	movgt	r3, #0
   1d5b6:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1d5ba:	463a      	mov	r2, r7
   1d5bc:	4640      	mov	r0, r8
   1d5be:	4631      	mov	r1, r6
   1d5c0:	f007 fc23 	bl	24e0a <memcpy>
   1d5c4:	e7a8      	b.n	1d518 <cc_mbedtls_entropy_func+0x48>
   1d5c6:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1d5ca:	466e      	mov	r6, sp
   1d5cc:	e7a4      	b.n	1d518 <cc_mbedtls_entropy_func+0x48>
   1d5ce:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d5d2:	e7ad      	b.n	1d530 <cc_mbedtls_entropy_func+0x60>
   1d5d4:	200007e8 	.word	0x200007e8
   1d5d8:	200007e4 	.word	0x200007e4

0001d5dc <RndStartupTest.constprop.0>:
   1d5dc:	b530      	push	{r4, r5, lr}
   1d5de:	b08d      	sub	sp, #52	; 0x34
   1d5e0:	2100      	movs	r1, #0
   1d5e2:	2228      	movs	r2, #40	; 0x28
   1d5e4:	a802      	add	r0, sp, #8
   1d5e6:	9101      	str	r1, [sp, #4]
   1d5e8:	f007 fc30 	bl	24e4c <memset>
   1d5ec:	a802      	add	r0, sp, #8
   1d5ee:	f000 ff0d 	bl	1e40c <RNG_PLAT_SetUserRngParameters>
   1d5f2:	4604      	mov	r4, r0
   1d5f4:	b110      	cbz	r0, 1d5fc <RndStartupTest.constprop.0+0x20>
   1d5f6:	4620      	mov	r0, r4
   1d5f8:	b00d      	add	sp, #52	; 0x34
   1d5fa:	bd30      	pop	{r4, r5, pc}
   1d5fc:	4d17      	ldr	r5, [pc, #92]	; (1d65c <RndStartupTest.constprop.0+0x80>)
   1d5fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d602:	6828      	ldr	r0, [r5, #0]
   1d604:	f000 f944 	bl	1d890 <CC_PalMutexLock>
   1d608:	4604      	mov	r4, r0
   1d60a:	b120      	cbz	r0, 1d616 <RndStartupTest.constprop.0+0x3a>
   1d60c:	4814      	ldr	r0, [pc, #80]	; (1d660 <RndStartupTest.constprop.0+0x84>)
   1d60e:	f7ff fa35 	bl	1ca7c <CC_PalAbort>
   1d612:	2c01      	cmp	r4, #1
   1d614:	d018      	beq.n	1d648 <RndStartupTest.constprop.0+0x6c>
   1d616:	2000      	movs	r0, #0
   1d618:	f000 f96a 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1d61c:	b9d0      	cbnz	r0, 1d654 <RndStartupTest.constprop.0+0x78>
   1d61e:	4a11      	ldr	r2, [pc, #68]	; (1d664 <RndStartupTest.constprop.0+0x88>)
   1d620:	a902      	add	r1, sp, #8
   1d622:	a801      	add	r0, sp, #4
   1d624:	f000 fc30 	bl	1de88 <LLF_RND_RunTrngStartupTest>
   1d628:	4604      	mov	r4, r0
   1d62a:	2001      	movs	r0, #1
   1d62c:	f000 f960 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1d630:	b960      	cbnz	r0, 1d64c <RndStartupTest.constprop.0+0x70>
   1d632:	6828      	ldr	r0, [r5, #0]
   1d634:	f000 f934 	bl	1d8a0 <CC_PalMutexUnlock>
   1d638:	2800      	cmp	r0, #0
   1d63a:	d0dc      	beq.n	1d5f6 <RndStartupTest.constprop.0+0x1a>
   1d63c:	480a      	ldr	r0, [pc, #40]	; (1d668 <RndStartupTest.constprop.0+0x8c>)
   1d63e:	f7ff fa1d 	bl	1ca7c <CC_PalAbort>
   1d642:	4620      	mov	r0, r4
   1d644:	b00d      	add	sp, #52	; 0x34
   1d646:	bd30      	pop	{r4, r5, pc}
   1d648:	2405      	movs	r4, #5
   1d64a:	e7f2      	b.n	1d632 <RndStartupTest.constprop.0+0x56>
   1d64c:	4807      	ldr	r0, [pc, #28]	; (1d66c <RndStartupTest.constprop.0+0x90>)
   1d64e:	f7ff fa15 	bl	1ca7c <CC_PalAbort>
   1d652:	e7ee      	b.n	1d632 <RndStartupTest.constprop.0+0x56>
   1d654:	4806      	ldr	r0, [pc, #24]	; (1d670 <RndStartupTest.constprop.0+0x94>)
   1d656:	f7ff fa11 	bl	1ca7c <CC_PalAbort>
   1d65a:	e7e0      	b.n	1d61e <RndStartupTest.constprop.0+0x42>
   1d65c:	200007d0 	.word	0x200007d0
   1d660:	00026c98 	.word	0x00026c98
   1d664:	200045d4 	.word	0x200045d4
   1d668:	00026cf0 	.word	0x00026cf0
   1d66c:	00026cd0 	.word	0x00026cd0
   1d670:	00026cb0 	.word	0x00026cb0

0001d674 <CC_LibInit>:
   1d674:	b530      	push	{r4, r5, lr}
   1d676:	b083      	sub	sp, #12
   1d678:	f000 f85c 	bl	1d734 <CC_HalInit>
   1d67c:	b128      	cbz	r0, 1d68a <CC_LibInit+0x16>
   1d67e:	f000 f8ab 	bl	1d7d8 <CC_PalTerminate>
   1d682:	2403      	movs	r4, #3
   1d684:	4620      	mov	r0, r4
   1d686:	b003      	add	sp, #12
   1d688:	bd30      	pop	{r4, r5, pc}
   1d68a:	f000 f877 	bl	1d77c <CC_PalInit>
   1d68e:	b9d8      	cbnz	r0, 1d6c8 <CC_LibInit+0x54>
   1d690:	f000 f92e 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1d694:	b9e0      	cbnz	r0, 1d6d0 <CC_LibInit+0x5c>
   1d696:	4c22      	ldr	r4, [pc, #136]	; (1d720 <CC_LibInit+0xac>)
   1d698:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   1d69c:	0e1b      	lsrs	r3, r3, #24
   1d69e:	2bf0      	cmp	r3, #240	; 0xf0
   1d6a0:	d10a      	bne.n	1d6b8 <CC_LibInit+0x44>
   1d6a2:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1d6a6:	4b1f      	ldr	r3, [pc, #124]	; (1d724 <CC_LibInit+0xb0>)
   1d6a8:	429a      	cmp	r2, r3
   1d6aa:	d031      	beq.n	1d710 <CC_LibInit+0x9c>
   1d6ac:	f000 f844 	bl	1d738 <CC_HalTerminate>
   1d6b0:	2407      	movs	r4, #7
   1d6b2:	f000 f891 	bl	1d7d8 <CC_PalTerminate>
   1d6b6:	e7e5      	b.n	1d684 <CC_LibInit+0x10>
   1d6b8:	f000 f83e 	bl	1d738 <CC_HalTerminate>
   1d6bc:	f000 f88c 	bl	1d7d8 <CC_PalTerminate>
   1d6c0:	2406      	movs	r4, #6
   1d6c2:	4620      	mov	r0, r4
   1d6c4:	b003      	add	sp, #12
   1d6c6:	bd30      	pop	{r4, r5, pc}
   1d6c8:	2404      	movs	r4, #4
   1d6ca:	4620      	mov	r0, r4
   1d6cc:	b003      	add	sp, #12
   1d6ce:	bd30      	pop	{r4, r5, pc}
   1d6d0:	f000 f832 	bl	1d738 <CC_HalTerminate>
   1d6d4:	f000 f880 	bl	1d7d8 <CC_PalTerminate>
   1d6d8:	f7ff ff80 	bl	1d5dc <RndStartupTest.constprop.0>
   1d6dc:	4604      	mov	r4, r0
   1d6de:	b998      	cbnz	r0, 1d708 <CC_LibInit+0x94>
   1d6e0:	4d11      	ldr	r5, [pc, #68]	; (1d728 <CC_LibInit+0xb4>)
   1d6e2:	682b      	ldr	r3, [r5, #0]
   1d6e4:	2b00      	cmp	r3, #0
   1d6e6:	d1cd      	bne.n	1d684 <CC_LibInit+0x10>
   1d6e8:	4602      	mov	r2, r0
   1d6ea:	4601      	mov	r1, r0
   1d6ec:	f7ff f9ea 	bl	1cac4 <nrf_cc3xx_platform_ctr_drbg_init>
   1d6f0:	b950      	cbnz	r0, 1d708 <CC_LibInit+0x94>
   1d6f2:	490e      	ldr	r1, [pc, #56]	; (1d72c <CC_LibInit+0xb8>)
   1d6f4:	ab01      	add	r3, sp, #4
   1d6f6:	2268      	movs	r2, #104	; 0x68
   1d6f8:	f7ff fa14 	bl	1cb24 <nrf_cc3xx_platform_ctr_drbg_get>
   1d6fc:	b920      	cbnz	r0, 1d708 <CC_LibInit+0x94>
   1d6fe:	4b0c      	ldr	r3, [pc, #48]	; (1d730 <CC_LibInit+0xbc>)
   1d700:	602b      	str	r3, [r5, #0]
   1d702:	4620      	mov	r0, r4
   1d704:	b003      	add	sp, #12
   1d706:	bd30      	pop	{r4, r5, pc}
   1d708:	2405      	movs	r4, #5
   1d70a:	4620      	mov	r0, r4
   1d70c:	b003      	add	sp, #12
   1d70e:	bd30      	pop	{r4, r5, pc}
   1d710:	2001      	movs	r0, #1
   1d712:	f000 f8ed 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1d716:	2800      	cmp	r0, #0
   1d718:	d1da      	bne.n	1d6d0 <CC_LibInit+0x5c>
   1d71a:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   1d71e:	e7db      	b.n	1d6d8 <CC_LibInit+0x64>
   1d720:	5002b000 	.word	0x5002b000
   1d724:	20e00000 	.word	0x20e00000
   1d728:	200047f4 	.word	0x200047f4
   1d72c:	200047f8 	.word	0x200047f8
   1d730:	5a5aea5a 	.word	0x5a5aea5a

0001d734 <CC_HalInit>:
   1d734:	2000      	movs	r0, #0
   1d736:	4770      	bx	lr

0001d738 <CC_HalTerminate>:
   1d738:	2000      	movs	r0, #0
   1d73a:	4770      	bx	lr

0001d73c <CC_HalClearInterruptBit>:
   1d73c:	0543      	lsls	r3, r0, #21
   1d73e:	d504      	bpl.n	1d74a <CC_HalClearInterruptBit+0xe>
   1d740:	4b04      	ldr	r3, [pc, #16]	; (1d754 <CC_HalClearInterruptBit+0x18>)
   1d742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d746:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d74a:	4b02      	ldr	r3, [pc, #8]	; (1d754 <CC_HalClearInterruptBit+0x18>)
   1d74c:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   1d750:	4770      	bx	lr
   1d752:	bf00      	nop
   1d754:	5002b000 	.word	0x5002b000

0001d758 <CC_HalMaskInterrupt>:
   1d758:	4b01      	ldr	r3, [pc, #4]	; (1d760 <CC_HalMaskInterrupt+0x8>)
   1d75a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1d75e:	4770      	bx	lr
   1d760:	5002b000 	.word	0x5002b000

0001d764 <CC_HalWaitInterrupt>:
   1d764:	b108      	cbz	r0, 1d76a <CC_HalWaitInterrupt+0x6>
   1d766:	f000 b86b 	b.w	1d840 <CC_PalWaitInterrupt>
   1d76a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d76e:	4770      	bx	lr

0001d770 <CC_HalWaitInterruptRND>:
   1d770:	b108      	cbz	r0, 1d776 <CC_HalWaitInterruptRND+0x6>
   1d772:	f000 b84f 	b.w	1d814 <CC_PalWaitInterruptRND>
   1d776:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d77a:	4770      	bx	lr

0001d77c <CC_PalInit>:
   1d77c:	b510      	push	{r4, lr}
   1d77e:	4811      	ldr	r0, [pc, #68]	; (1d7c4 <CC_PalInit+0x48>)
   1d780:	f000 f872 	bl	1d868 <CC_PalMutexCreate>
   1d784:	b100      	cbz	r0, 1d788 <CC_PalInit+0xc>
   1d786:	bd10      	pop	{r4, pc}
   1d788:	480f      	ldr	r0, [pc, #60]	; (1d7c8 <CC_PalInit+0x4c>)
   1d78a:	f000 f86d 	bl	1d868 <CC_PalMutexCreate>
   1d78e:	2800      	cmp	r0, #0
   1d790:	d1f9      	bne.n	1d786 <CC_PalInit+0xa>
   1d792:	4c0e      	ldr	r4, [pc, #56]	; (1d7cc <CC_PalInit+0x50>)
   1d794:	4620      	mov	r0, r4
   1d796:	f000 f867 	bl	1d868 <CC_PalMutexCreate>
   1d79a:	2800      	cmp	r0, #0
   1d79c:	d1f3      	bne.n	1d786 <CC_PalInit+0xa>
   1d79e:	4b0c      	ldr	r3, [pc, #48]	; (1d7d0 <CC_PalInit+0x54>)
   1d7a0:	480c      	ldr	r0, [pc, #48]	; (1d7d4 <CC_PalInit+0x58>)
   1d7a2:	601c      	str	r4, [r3, #0]
   1d7a4:	f000 f860 	bl	1d868 <CC_PalMutexCreate>
   1d7a8:	4601      	mov	r1, r0
   1d7aa:	2800      	cmp	r0, #0
   1d7ac:	d1eb      	bne.n	1d786 <CC_PalInit+0xa>
   1d7ae:	f000 f82d 	bl	1d80c <CC_PalDmaInit>
   1d7b2:	4604      	mov	r4, r0
   1d7b4:	b108      	cbz	r0, 1d7ba <CC_PalInit+0x3e>
   1d7b6:	4620      	mov	r0, r4
   1d7b8:	bd10      	pop	{r4, pc}
   1d7ba:	f000 f87b 	bl	1d8b4 <CC_PalPowerSaveModeInit>
   1d7be:	4620      	mov	r0, r4
   1d7c0:	e7fa      	b.n	1d7b8 <CC_PalInit+0x3c>
   1d7c2:	bf00      	nop
   1d7c4:	200007e0 	.word	0x200007e0
   1d7c8:	200007dc 	.word	0x200007dc
   1d7cc:	200007d8 	.word	0x200007d8
   1d7d0:	200007d0 	.word	0x200007d0
   1d7d4:	200007d4 	.word	0x200007d4

0001d7d8 <CC_PalTerminate>:
   1d7d8:	b508      	push	{r3, lr}
   1d7da:	4808      	ldr	r0, [pc, #32]	; (1d7fc <CC_PalTerminate+0x24>)
   1d7dc:	f000 f84e 	bl	1d87c <CC_PalMutexDestroy>
   1d7e0:	4807      	ldr	r0, [pc, #28]	; (1d800 <CC_PalTerminate+0x28>)
   1d7e2:	f000 f84b 	bl	1d87c <CC_PalMutexDestroy>
   1d7e6:	4807      	ldr	r0, [pc, #28]	; (1d804 <CC_PalTerminate+0x2c>)
   1d7e8:	f000 f848 	bl	1d87c <CC_PalMutexDestroy>
   1d7ec:	4806      	ldr	r0, [pc, #24]	; (1d808 <CC_PalTerminate+0x30>)
   1d7ee:	f000 f845 	bl	1d87c <CC_PalMutexDestroy>
   1d7f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d7f6:	f000 b80b 	b.w	1d810 <CC_PalDmaTerminate>
   1d7fa:	bf00      	nop
   1d7fc:	200007e0 	.word	0x200007e0
   1d800:	200007dc 	.word	0x200007dc
   1d804:	200007d8 	.word	0x200007d8
   1d808:	200007d4 	.word	0x200007d4

0001d80c <CC_PalDmaInit>:
   1d80c:	2000      	movs	r0, #0
   1d80e:	4770      	bx	lr

0001d810 <CC_PalDmaTerminate>:
   1d810:	4770      	bx	lr
   1d812:	bf00      	nop

0001d814 <CC_PalWaitInterruptRND>:
   1d814:	b410      	push	{r4}
   1d816:	4c09      	ldr	r4, [pc, #36]	; (1d83c <CC_PalWaitInterruptRND+0x28>)
   1d818:	4602      	mov	r2, r0
   1d81a:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   1d81e:	4213      	tst	r3, r2
   1d820:	d0fb      	beq.n	1d81a <CC_PalWaitInterruptRND+0x6>
   1d822:	b121      	cbz	r1, 1d82e <CC_PalWaitInterruptRND+0x1a>
   1d824:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d828:	600b      	str	r3, [r1, #0]
   1d82a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1d82e:	4b03      	ldr	r3, [pc, #12]	; (1d83c <CC_PalWaitInterruptRND+0x28>)
   1d830:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   1d834:	2000      	movs	r0, #0
   1d836:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d83a:	4770      	bx	lr
   1d83c:	5002b000 	.word	0x5002b000

0001d840 <CC_PalWaitInterrupt>:
   1d840:	4a04      	ldr	r2, [pc, #16]	; (1d854 <CC_PalWaitInterrupt+0x14>)
   1d842:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   1d846:	4218      	tst	r0, r3
   1d848:	d0fb      	beq.n	1d842 <CC_PalWaitInterrupt+0x2>
   1d84a:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   1d84e:	2000      	movs	r0, #0
   1d850:	4770      	bx	lr
   1d852:	bf00      	nop
   1d854:	5002b000 	.word	0x5002b000

0001d858 <CC_PalMemCopyPlat>:
   1d858:	f007 bf81 	b.w	2575e <memmove>

0001d85c <CC_PalMemSetPlat>:
   1d85c:	f007 baf6 	b.w	24e4c <memset>

0001d860 <CC_PalMemSetZeroPlat>:
   1d860:	460a      	mov	r2, r1
   1d862:	2100      	movs	r1, #0
   1d864:	f007 baf2 	b.w	24e4c <memset>

0001d868 <CC_PalMutexCreate>:
   1d868:	b508      	push	{r3, lr}
   1d86a:	4b03      	ldr	r3, [pc, #12]	; (1d878 <CC_PalMutexCreate+0x10>)
   1d86c:	6802      	ldr	r2, [r0, #0]
   1d86e:	681b      	ldr	r3, [r3, #0]
   1d870:	6810      	ldr	r0, [r2, #0]
   1d872:	4798      	blx	r3
   1d874:	2000      	movs	r0, #0
   1d876:	bd08      	pop	{r3, pc}
   1d878:	2000079c 	.word	0x2000079c

0001d87c <CC_PalMutexDestroy>:
   1d87c:	b508      	push	{r3, lr}
   1d87e:	4b03      	ldr	r3, [pc, #12]	; (1d88c <CC_PalMutexDestroy+0x10>)
   1d880:	6802      	ldr	r2, [r0, #0]
   1d882:	685b      	ldr	r3, [r3, #4]
   1d884:	6810      	ldr	r0, [r2, #0]
   1d886:	4798      	blx	r3
   1d888:	2000      	movs	r0, #0
   1d88a:	bd08      	pop	{r3, pc}
   1d88c:	2000079c 	.word	0x2000079c

0001d890 <CC_PalMutexLock>:
   1d890:	4b02      	ldr	r3, [pc, #8]	; (1d89c <CC_PalMutexLock+0xc>)
   1d892:	6802      	ldr	r2, [r0, #0]
   1d894:	689b      	ldr	r3, [r3, #8]
   1d896:	6810      	ldr	r0, [r2, #0]
   1d898:	4718      	bx	r3
   1d89a:	bf00      	nop
   1d89c:	2000079c 	.word	0x2000079c

0001d8a0 <CC_PalMutexUnlock>:
   1d8a0:	b508      	push	{r3, lr}
   1d8a2:	4b03      	ldr	r3, [pc, #12]	; (1d8b0 <CC_PalMutexUnlock+0x10>)
   1d8a4:	6802      	ldr	r2, [r0, #0]
   1d8a6:	68db      	ldr	r3, [r3, #12]
   1d8a8:	6810      	ldr	r0, [r2, #0]
   1d8aa:	4798      	blx	r3
   1d8ac:	2000      	movs	r0, #0
   1d8ae:	bd08      	pop	{r3, pc}
   1d8b0:	2000079c 	.word	0x2000079c

0001d8b4 <CC_PalPowerSaveModeInit>:
   1d8b4:	b570      	push	{r4, r5, r6, lr}
   1d8b6:	4c09      	ldr	r4, [pc, #36]	; (1d8dc <CC_PalPowerSaveModeInit+0x28>)
   1d8b8:	4d09      	ldr	r5, [pc, #36]	; (1d8e0 <CC_PalPowerSaveModeInit+0x2c>)
   1d8ba:	6920      	ldr	r0, [r4, #16]
   1d8bc:	68ab      	ldr	r3, [r5, #8]
   1d8be:	4798      	blx	r3
   1d8c0:	b118      	cbz	r0, 1d8ca <CC_PalPowerSaveModeInit+0x16>
   1d8c2:	4b08      	ldr	r3, [pc, #32]	; (1d8e4 <CC_PalPowerSaveModeInit+0x30>)
   1d8c4:	4808      	ldr	r0, [pc, #32]	; (1d8e8 <CC_PalPowerSaveModeInit+0x34>)
   1d8c6:	685b      	ldr	r3, [r3, #4]
   1d8c8:	4798      	blx	r3
   1d8ca:	4a08      	ldr	r2, [pc, #32]	; (1d8ec <CC_PalPowerSaveModeInit+0x38>)
   1d8cc:	68eb      	ldr	r3, [r5, #12]
   1d8ce:	6920      	ldr	r0, [r4, #16]
   1d8d0:	2100      	movs	r1, #0
   1d8d2:	6011      	str	r1, [r2, #0]
   1d8d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d8d8:	4718      	bx	r3
   1d8da:	bf00      	nop
   1d8dc:	20000788 	.word	0x20000788
   1d8e0:	2000079c 	.word	0x2000079c
   1d8e4:	20000780 	.word	0x20000780
   1d8e8:	00026d08 	.word	0x00026d08
   1d8ec:	20004860 	.word	0x20004860

0001d8f0 <CC_PalPowerSaveModeSelect>:
   1d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8f2:	4d1a      	ldr	r5, [pc, #104]	; (1d95c <CC_PalPowerSaveModeSelect+0x6c>)
   1d8f4:	4e1a      	ldr	r6, [pc, #104]	; (1d960 <CC_PalPowerSaveModeSelect+0x70>)
   1d8f6:	4604      	mov	r4, r0
   1d8f8:	68b2      	ldr	r2, [r6, #8]
   1d8fa:	6928      	ldr	r0, [r5, #16]
   1d8fc:	4790      	blx	r2
   1d8fe:	b9e8      	cbnz	r0, 1d93c <CC_PalPowerSaveModeSelect+0x4c>
   1d900:	4f18      	ldr	r7, [pc, #96]	; (1d964 <CC_PalPowerSaveModeSelect+0x74>)
   1d902:	683b      	ldr	r3, [r7, #0]
   1d904:	b14c      	cbz	r4, 1d91a <CC_PalPowerSaveModeSelect+0x2a>
   1d906:	b1a3      	cbz	r3, 1d932 <CC_PalPowerSaveModeSelect+0x42>
   1d908:	2b01      	cmp	r3, #1
   1d90a:	d019      	beq.n	1d940 <CC_PalPowerSaveModeSelect+0x50>
   1d90c:	3b01      	subs	r3, #1
   1d90e:	603b      	str	r3, [r7, #0]
   1d910:	6928      	ldr	r0, [r5, #16]
   1d912:	68f3      	ldr	r3, [r6, #12]
   1d914:	4798      	blx	r3
   1d916:	2000      	movs	r0, #0
   1d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d91a:	b943      	cbnz	r3, 1d92e <CC_PalPowerSaveModeSelect+0x3e>
   1d91c:	4a12      	ldr	r2, [pc, #72]	; (1d968 <CC_PalPowerSaveModeSelect+0x78>)
   1d91e:	2101      	movs	r1, #1
   1d920:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1d924:	4911      	ldr	r1, [pc, #68]	; (1d96c <CC_PalPowerSaveModeSelect+0x7c>)
   1d926:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   1d92a:	2a00      	cmp	r2, #0
   1d92c:	d1fb      	bne.n	1d926 <CC_PalPowerSaveModeSelect+0x36>
   1d92e:	3301      	adds	r3, #1
   1d930:	603b      	str	r3, [r7, #0]
   1d932:	68f3      	ldr	r3, [r6, #12]
   1d934:	6928      	ldr	r0, [r5, #16]
   1d936:	4798      	blx	r3
   1d938:	2000      	movs	r0, #0
   1d93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d93c:	480c      	ldr	r0, [pc, #48]	; (1d970 <CC_PalPowerSaveModeSelect+0x80>)
   1d93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d940:	4a0a      	ldr	r2, [pc, #40]	; (1d96c <CC_PalPowerSaveModeSelect+0x7c>)
   1d942:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1d946:	2b00      	cmp	r3, #0
   1d948:	d1fb      	bne.n	1d942 <CC_PalPowerSaveModeSelect+0x52>
   1d94a:	4a07      	ldr	r2, [pc, #28]	; (1d968 <CC_PalPowerSaveModeSelect+0x78>)
   1d94c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1d950:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1d954:	f7ff ff00 	bl	1d758 <CC_HalMaskInterrupt>
   1d958:	683b      	ldr	r3, [r7, #0]
   1d95a:	e7d7      	b.n	1d90c <CC_PalPowerSaveModeSelect+0x1c>
   1d95c:	20000788 	.word	0x20000788
   1d960:	2000079c 	.word	0x2000079c
   1d964:	20004860 	.word	0x20004860
   1d968:	5002a000 	.word	0x5002a000
   1d96c:	5002b000 	.word	0x5002b000
   1d970:	ffff8fe9 	.word	0xffff8fe9

0001d974 <mutex_init>:
   1d974:	4b01      	ldr	r3, [pc, #4]	; (1d97c <mutex_init+0x8>)
   1d976:	681b      	ldr	r3, [r3, #0]
   1d978:	4718      	bx	r3
   1d97a:	bf00      	nop
   1d97c:	2000079c 	.word	0x2000079c

0001d980 <mutex_lock>:
   1d980:	4b01      	ldr	r3, [pc, #4]	; (1d988 <mutex_lock+0x8>)
   1d982:	689b      	ldr	r3, [r3, #8]
   1d984:	4718      	bx	r3
   1d986:	bf00      	nop
   1d988:	2000079c 	.word	0x2000079c

0001d98c <mutex_unlock>:
   1d98c:	4b01      	ldr	r3, [pc, #4]	; (1d994 <mutex_unlock+0x8>)
   1d98e:	68db      	ldr	r3, [r3, #12]
   1d990:	4718      	bx	r3
   1d992:	bf00      	nop
   1d994:	2000079c 	.word	0x2000079c

0001d998 <startTrngHW>:
   1d998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d99c:	2800      	cmp	r0, #0
   1d99e:	d078      	beq.n	1da92 <startTrngHW+0xfa>
   1d9a0:	460c      	mov	r4, r1
   1d9a2:	2900      	cmp	r1, #0
   1d9a4:	d075      	beq.n	1da92 <startTrngHW+0xfa>
   1d9a6:	461d      	mov	r5, r3
   1d9a8:	2b00      	cmp	r3, #0
   1d9aa:	d072      	beq.n	1da92 <startTrngHW+0xfa>
   1d9ac:	4607      	mov	r7, r0
   1d9ae:	b11a      	cbz	r2, 1d9b8 <startTrngHW+0x20>
   1d9b0:	2201      	movs	r2, #1
   1d9b2:	2300      	movs	r3, #0
   1d9b4:	602a      	str	r2, [r5, #0]
   1d9b6:	6003      	str	r3, [r0, #0]
   1d9b8:	682b      	ldr	r3, [r5, #0]
   1d9ba:	2b00      	cmp	r3, #0
   1d9bc:	d064      	beq.n	1da88 <startTrngHW+0xf0>
   1d9be:	4629      	mov	r1, r5
   1d9c0:	4620      	mov	r0, r4
   1d9c2:	f000 fddb 	bl	1e57c <LLF_RND_GetFastestRosc>
   1d9c6:	4680      	mov	r8, r0
   1d9c8:	2800      	cmp	r0, #0
   1d9ca:	d15f      	bne.n	1da8c <startTrngHW+0xf4>
   1d9cc:	6828      	ldr	r0, [r5, #0]
   1d9ce:	4621      	mov	r1, r4
   1d9d0:	f000 fdba 	bl	1e548 <LLF_RND_GetRoscSampleCnt>
   1d9d4:	4680      	mov	r8, r0
   1d9d6:	2800      	cmp	r0, #0
   1d9d8:	d158      	bne.n	1da8c <startTrngHW+0xf4>
   1d9da:	682b      	ldr	r3, [r5, #0]
   1d9dc:	2b08      	cmp	r3, #8
   1d9de:	d06c      	beq.n	1daba <startTrngHW+0x122>
   1d9e0:	2b04      	cmp	r3, #4
   1d9e2:	d06d      	beq.n	1dac0 <startTrngHW+0x128>
   1d9e4:	f1a3 0902 	sub.w	r9, r3, #2
   1d9e8:	fab9 f989 	clz	r9, r9
   1d9ec:	ea4f 1959 	mov.w	r9, r9, lsr #5
   1d9f0:	4e35      	ldr	r6, [pc, #212]	; (1dac8 <startTrngHW+0x130>)
   1d9f2:	2101      	movs	r1, #1
   1d9f4:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   1d9f8:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   1d9fc:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   1da00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1da02:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   1da06:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   1da0a:	4293      	cmp	r3, r2
   1da0c:	d1f6      	bne.n	1d9fc <startTrngHW+0x64>
   1da0e:	f04f 0a00 	mov.w	sl, #0
   1da12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da16:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   1da1a:	f7ff fe8f 	bl	1d73c <CC_HalClearInterruptBit>
   1da1e:	f06f 031b 	mvn.w	r3, #27
   1da22:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   1da26:	4650      	mov	r0, sl
   1da28:	f7ff fe96 	bl	1d758 <CC_HalMaskInterrupt>
   1da2c:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   1da30:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   1da34:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1da38:	f7ff fe8e 	bl	1d758 <CC_HalMaskInterrupt>
   1da3c:	230a      	movs	r3, #10
   1da3e:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   1da42:	9b08      	ldr	r3, [sp, #32]
   1da44:	2b01      	cmp	r3, #1
   1da46:	d029      	beq.n	1da9c <startTrngHW+0x104>
   1da48:	6923      	ldr	r3, [r4, #16]
   1da4a:	4a20      	ldr	r2, [pc, #128]	; (1dacc <startTrngHW+0x134>)
   1da4c:	fba2 2303 	umull	r2, r3, r2, r3
   1da50:	091b      	lsrs	r3, r3, #4
   1da52:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1da54:	fb02 f303 	mul.w	r3, r2, r3
   1da58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1da5c:	4a1a      	ldr	r2, [pc, #104]	; (1dac8 <startTrngHW+0x130>)
   1da5e:	03db      	lsls	r3, r3, #15
   1da60:	099b      	lsrs	r3, r3, #6
   1da62:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   1da66:	2301      	movs	r3, #1
   1da68:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   1da6c:	683b      	ldr	r3, [r7, #0]
   1da6e:	682a      	ldr	r2, [r5, #0]
   1da70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1da74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1da78:	603b      	str	r3, [r7, #0]
   1da7a:	682a      	ldr	r2, [r5, #0]
   1da7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1da80:	603b      	str	r3, [r7, #0]
   1da82:	4640      	mov	r0, r8
   1da84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1da88:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1dad0 <startTrngHW+0x138>
   1da8c:	4640      	mov	r0, r8
   1da8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1da92:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1dad4 <startTrngHW+0x13c>
   1da96:	4640      	mov	r0, r8
   1da98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1da9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1daa0:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   1daa4:	3201      	adds	r2, #1
   1daa6:	d006      	beq.n	1dab6 <startTrngHW+0x11e>
   1daa8:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1daac:	4a07      	ldr	r2, [pc, #28]	; (1dacc <startTrngHW+0x134>)
   1daae:	fba2 2303 	umull	r2, r3, r2, r3
   1dab2:	091b      	lsrs	r3, r3, #4
   1dab4:	e7cd      	b.n	1da52 <startTrngHW+0xba>
   1dab6:	2316      	movs	r3, #22
   1dab8:	e7cb      	b.n	1da52 <startTrngHW+0xba>
   1daba:	f04f 0903 	mov.w	r9, #3
   1dabe:	e797      	b.n	1d9f0 <startTrngHW+0x58>
   1dac0:	f04f 0902 	mov.w	r9, #2
   1dac4:	e794      	b.n	1d9f0 <startTrngHW+0x58>
   1dac6:	bf00      	nop
   1dac8:	5002b000 	.word	0x5002b000
   1dacc:	aaaaaaab 	.word	0xaaaaaaab
   1dad0:	00f10c31 	.word	0x00f10c31
   1dad4:	00f10c35 	.word	0x00f10c35

0001dad8 <LLF_RND_RepetitionCounterTest>:
   1dad8:	b350      	cbz	r0, 1db30 <LLF_RND_RepetitionCounterTest+0x58>
   1dada:	1e4b      	subs	r3, r1, #1
   1dadc:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   1dae0:	d226      	bcs.n	1db30 <LLF_RND_RepetitionCounterTest+0x58>
   1dae2:	f04f 0c00 	mov.w	ip, #0
   1dae6:	b530      	push	{r4, r5, lr}
   1dae8:	00cd      	lsls	r5, r1, #3
   1daea:	46e6      	mov	lr, ip
   1daec:	4664      	mov	r4, ip
   1daee:	0963      	lsrs	r3, r4, #5
   1daf0:	f004 011f 	and.w	r1, r4, #31
   1daf4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1daf8:	291f      	cmp	r1, #31
   1dafa:	fa23 f301 	lsr.w	r3, r3, r1
   1dafe:	d006      	beq.n	1db0e <LLF_RND_RepetitionCounterTest+0x36>
   1db00:	f003 0301 	and.w	r3, r3, #1
   1db04:	b91c      	cbnz	r4, 1db0e <LLF_RND_RepetitionCounterTest+0x36>
   1db06:	2401      	movs	r4, #1
   1db08:	469e      	mov	lr, r3
   1db0a:	46a4      	mov	ip, r4
   1db0c:	e7ef      	b.n	1daee <LLF_RND_RepetitionCounterTest+0x16>
   1db0e:	459e      	cmp	lr, r3
   1db10:	f104 0401 	add.w	r4, r4, #1
   1db14:	d006      	beq.n	1db24 <LLF_RND_RepetitionCounterTest+0x4c>
   1db16:	469e      	mov	lr, r3
   1db18:	f04f 0c01 	mov.w	ip, #1
   1db1c:	42ac      	cmp	r4, r5
   1db1e:	d1e6      	bne.n	1daee <LLF_RND_RepetitionCounterTest+0x16>
   1db20:	2000      	movs	r0, #0
   1db22:	bd30      	pop	{r4, r5, pc}
   1db24:	f10c 0c01 	add.w	ip, ip, #1
   1db28:	4594      	cmp	ip, r2
   1db2a:	d1f7      	bne.n	1db1c <LLF_RND_RepetitionCounterTest+0x44>
   1db2c:	4801      	ldr	r0, [pc, #4]	; (1db34 <LLF_RND_RepetitionCounterTest+0x5c>)
   1db2e:	bd30      	pop	{r4, r5, pc}
   1db30:	4800      	ldr	r0, [pc, #0]	; (1db34 <LLF_RND_RepetitionCounterTest+0x5c>)
   1db32:	4770      	bx	lr
   1db34:	00f10c36 	.word	0x00f10c36

0001db38 <LLF_RND_AdaptiveProportionTest>:
   1db38:	b3c8      	cbz	r0, 1dbae <LLF_RND_AdaptiveProportionTest+0x76>
   1db3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db3e:	1e4c      	subs	r4, r1, #1
   1db40:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1db44:	d21c      	bcs.n	1db80 <LLF_RND_AdaptiveProportionTest+0x48>
   1db46:	b1db      	cbz	r3, 1db80 <LLF_RND_AdaptiveProportionTest+0x48>
   1db48:	b1d2      	cbz	r2, 1db80 <LLF_RND_AdaptiveProportionTest+0x48>
   1db4a:	f04f 0e00 	mov.w	lr, #0
   1db4e:	00cf      	lsls	r7, r1, #3
   1db50:	4676      	mov	r6, lr
   1db52:	46f0      	mov	r8, lr
   1db54:	4675      	mov	r5, lr
   1db56:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   1db5a:	096c      	lsrs	r4, r5, #5
   1db5c:	f005 011f 	and.w	r1, r5, #31
   1db60:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1db64:	291f      	cmp	r1, #31
   1db66:	fa24 fc01 	lsr.w	ip, r4, r1
   1db6a:	d00c      	beq.n	1db86 <LLF_RND_AdaptiveProportionTest+0x4e>
   1db6c:	f00c 0c01 	and.w	ip, ip, #1
   1db70:	b94d      	cbnz	r5, 1db86 <LLF_RND_AdaptiveProportionTest+0x4e>
   1db72:	2601      	movs	r6, #1
   1db74:	46e0      	mov	r8, ip
   1db76:	4635      	mov	r5, r6
   1db78:	46b6      	mov	lr, r6
   1db7a:	e7ee      	b.n	1db5a <LLF_RND_AdaptiveProportionTest+0x22>
   1db7c:	4296      	cmp	r6, r2
   1db7e:	d918      	bls.n	1dbb2 <LLF_RND_AdaptiveProportionTest+0x7a>
   1db80:	480d      	ldr	r0, [pc, #52]	; (1dbb8 <LLF_RND_AdaptiveProportionTest+0x80>)
   1db82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db86:	4573      	cmp	r3, lr
   1db88:	d00c      	beq.n	1dba4 <LLF_RND_AdaptiveProportionTest+0x6c>
   1db8a:	45c4      	cmp	ip, r8
   1db8c:	bf08      	it	eq
   1db8e:	3601      	addeq	r6, #1
   1db90:	45f1      	cmp	r9, lr
   1db92:	d0f3      	beq.n	1db7c <LLF_RND_AdaptiveProportionTest+0x44>
   1db94:	f10e 0e01 	add.w	lr, lr, #1
   1db98:	3501      	adds	r5, #1
   1db9a:	42bd      	cmp	r5, r7
   1db9c:	d1dd      	bne.n	1db5a <LLF_RND_AdaptiveProportionTest+0x22>
   1db9e:	2000      	movs	r0, #0
   1dba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dba4:	f04f 0e01 	mov.w	lr, #1
   1dba8:	46e0      	mov	r8, ip
   1dbaa:	4676      	mov	r6, lr
   1dbac:	e7f4      	b.n	1db98 <LLF_RND_AdaptiveProportionTest+0x60>
   1dbae:	4802      	ldr	r0, [pc, #8]	; (1dbb8 <LLF_RND_AdaptiveProportionTest+0x80>)
   1dbb0:	4770      	bx	lr
   1dbb2:	469e      	mov	lr, r3
   1dbb4:	e7f0      	b.n	1db98 <LLF_RND_AdaptiveProportionTest+0x60>
   1dbb6:	bf00      	nop
   1dbb8:	00f10c37 	.word	0x00f10c37

0001dbbc <getTrngSource>:
   1dbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbc0:	b091      	sub	sp, #68	; 0x44
   1dbc2:	460d      	mov	r5, r1
   1dbc4:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   1dbc8:	4682      	mov	sl, r0
   1dbca:	2900      	cmp	r1, #0
   1dbcc:	d16e      	bne.n	1dcac <getTrngSource+0xf0>
   1dbce:	6928      	ldr	r0, [r5, #16]
   1dbd0:	9006      	str	r0, [sp, #24]
   1dbd2:	981a      	ldr	r0, [sp, #104]	; 0x68
   1dbd4:	601c      	str	r4, [r3, #0]
   1dbd6:	2300      	movs	r3, #0
   1dbd8:	6003      	str	r3, [r0, #0]
   1dbda:	2a00      	cmp	r2, #0
   1dbdc:	f000 812e 	beq.w	1de3c <getTrngSource+0x280>
   1dbe0:	4b9c      	ldr	r3, [pc, #624]	; (1de54 <getTrngSource+0x298>)
   1dbe2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1dbe4:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1dbe8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1dbec:	429a      	cmp	r2, r3
   1dbee:	d169      	bne.n	1dcc4 <getTrngSource+0x108>
   1dbf0:	290a      	cmp	r1, #10
   1dbf2:	d167      	bne.n	1dcc4 <getTrngSource+0x108>
   1dbf4:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1dbf8:	9308      	str	r3, [sp, #32]
   1dbfa:	f104 0308 	add.w	r3, r4, #8
   1dbfe:	9906      	ldr	r1, [sp, #24]
   1dc00:	9307      	str	r3, [sp, #28]
   1dc02:	4b95      	ldr	r3, [pc, #596]	; (1de58 <getTrngSource+0x29c>)
   1dc04:	4c93      	ldr	r4, [pc, #588]	; (1de54 <getTrngSource+0x298>)
   1dc06:	fba3 2301 	umull	r2, r3, r3, r1
   1dc0a:	089b      	lsrs	r3, r3, #2
   1dc0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1dc10:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   1dc14:	9303      	str	r3, [sp, #12]
   1dc16:	2304      	movs	r3, #4
   1dc18:	9305      	str	r3, [sp, #20]
   1dc1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1dc1c:	9e06      	ldr	r6, [sp, #24]
   1dc1e:	601e      	str	r6, [r3, #0]
   1dc20:	2e00      	cmp	r6, #0
   1dc22:	f000 80e9 	beq.w	1ddf8 <getTrngSource+0x23c>
   1dc26:	2700      	movs	r7, #0
   1dc28:	f000 fcb8 	bl	1e59c <LLF_RND_TurnOffTrng>
   1dc2c:	9709      	str	r7, [sp, #36]	; 0x24
   1dc2e:	f1ba 0f00 	cmp.w	sl, #0
   1dc32:	f000 80d5 	beq.w	1dde0 <getTrngSource+0x224>
   1dc36:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1dc3a:	f04f 0901 	mov.w	r9, #1
   1dc3e:	2d00      	cmp	r5, #0
   1dc40:	f000 80ce 	beq.w	1dde0 <getTrngSource+0x224>
   1dc44:	9b08      	ldr	r3, [sp, #32]
   1dc46:	2b00      	cmp	r3, #0
   1dc48:	d03e      	beq.n	1dcc8 <getTrngSource+0x10c>
   1dc4a:	a908      	add	r1, sp, #32
   1dc4c:	4628      	mov	r0, r5
   1dc4e:	f000 fc95 	bl	1e57c <LLF_RND_GetFastestRosc>
   1dc52:	2800      	cmp	r0, #0
   1dc54:	d03a      	beq.n	1dccc <getTrngSource+0x110>
   1dc56:	4b81      	ldr	r3, [pc, #516]	; (1de5c <getTrngSource+0x2a0>)
   1dc58:	4298      	cmp	r0, r3
   1dc5a:	d020      	beq.n	1dc9e <getTrngSource+0xe2>
   1dc5c:	9b08      	ldr	r3, [sp, #32]
   1dc5e:	2b08      	cmp	r3, #8
   1dc60:	f000 80e4 	beq.w	1de2c <getTrngSource+0x270>
   1dc64:	005b      	lsls	r3, r3, #1
   1dc66:	2200      	movs	r2, #0
   1dc68:	9308      	str	r3, [sp, #32]
   1dc6a:	9200      	str	r2, [sp, #0]
   1dc6c:	ab08      	add	r3, sp, #32
   1dc6e:	4629      	mov	r1, r5
   1dc70:	4650      	mov	r0, sl
   1dc72:	f7ff fe91 	bl	1d998 <startTrngHW>
   1dc76:	4b7a      	ldr	r3, [pc, #488]	; (1de60 <getTrngSource+0x2a4>)
   1dc78:	4298      	cmp	r0, r3
   1dc7a:	f000 80d3 	beq.w	1de24 <getTrngSource+0x268>
   1dc7e:	b970      	cbnz	r0, 1dc9e <getTrngSource+0xe2>
   1dc80:	f8da 2000 	ldr.w	r2, [sl]
   1dc84:	0a13      	lsrs	r3, r2, #8
   1dc86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1dc8a:	4313      	orrs	r3, r2
   1dc8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1dc90:	f8ca 3000 	str.w	r3, [sl]
   1dc94:	9b05      	ldr	r3, [sp, #20]
   1dc96:	3b01      	subs	r3, #1
   1dc98:	9305      	str	r3, [sp, #20]
   1dc9a:	d1be      	bne.n	1dc1a <getTrngSource+0x5e>
   1dc9c:	2000      	movs	r0, #0
   1dc9e:	9003      	str	r0, [sp, #12]
   1dca0:	f000 fc7c 	bl	1e59c <LLF_RND_TurnOffTrng>
   1dca4:	9803      	ldr	r0, [sp, #12]
   1dca6:	b011      	add	sp, #68	; 0x44
   1dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1dcb0:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   1dcb4:	3601      	adds	r6, #1
   1dcb6:	bf14      	ite	ne
   1dcb8:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   1dcbc:	f44f 7004 	moveq.w	r0, #528	; 0x210
   1dcc0:	9006      	str	r0, [sp, #24]
   1dcc2:	e786      	b.n	1dbd2 <getTrngSource+0x16>
   1dcc4:	4867      	ldr	r0, [pc, #412]	; (1de64 <getTrngSource+0x2a8>)
   1dcc6:	e7ea      	b.n	1dc9e <getTrngSource+0xe2>
   1dcc8:	4865      	ldr	r0, [pc, #404]	; (1de60 <getTrngSource+0x2a4>)
   1dcca:	e7c4      	b.n	1dc56 <getTrngSource+0x9a>
   1dccc:	9808      	ldr	r0, [sp, #32]
   1dcce:	4629      	mov	r1, r5
   1dcd0:	f000 fc3a 	bl	1e548 <LLF_RND_GetRoscSampleCnt>
   1dcd4:	2800      	cmp	r0, #0
   1dcd6:	d1be      	bne.n	1dc56 <getTrngSource+0x9a>
   1dcd8:	9b08      	ldr	r3, [sp, #32]
   1dcda:	2b08      	cmp	r3, #8
   1dcdc:	f000 80a8 	beq.w	1de30 <getTrngSource+0x274>
   1dce0:	2b04      	cmp	r3, #4
   1dce2:	f000 80a8 	beq.w	1de36 <getTrngSource+0x27a>
   1dce6:	f1a3 0302 	sub.w	r3, r3, #2
   1dcea:	fab3 f383 	clz	r3, r3
   1dcee:	095b      	lsrs	r3, r3, #5
   1dcf0:	9304      	str	r3, [sp, #16]
   1dcf2:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1dcf6:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1dcfa:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1dcfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1dd00:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1dd04:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1dd08:	4293      	cmp	r3, r2
   1dd0a:	d1f6      	bne.n	1dcfa <getTrngSource+0x13e>
   1dd0c:	f04f 0b00 	mov.w	fp, #0
   1dd10:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   1dd14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dd18:	f7ff fd10 	bl	1d73c <CC_HalClearInterruptBit>
   1dd1c:	f06f 031b 	mvn.w	r3, #27
   1dd20:	4658      	mov	r0, fp
   1dd22:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1dd26:	f7ff fd17 	bl	1d758 <CC_HalMaskInterrupt>
   1dd2a:	9b04      	ldr	r3, [sp, #16]
   1dd2c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1dd30:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1dd34:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1dd38:	f7ff fd0e 	bl	1d758 <CC_HalMaskInterrupt>
   1dd3c:	230a      	movs	r3, #10
   1dd3e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1dd42:	692b      	ldr	r3, [r5, #16]
   1dd44:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   1dd48:	fbab 2303 	umull	r2, r3, fp, r3
   1dd4c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1dd4e:	091b      	lsrs	r3, r3, #4
   1dd50:	fb02 f303 	mul.w	r3, r2, r3
   1dd54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1dd58:	03db      	lsls	r3, r3, #15
   1dd5a:	099b      	lsrs	r3, r3, #6
   1dd5c:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   1dd60:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   1dd64:	f8da 3000 	ldr.w	r3, [sl]
   1dd68:	9908      	ldr	r1, [sp, #32]
   1dd6a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1dd6e:	020b      	lsls	r3, r1, #8
   1dd70:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1dd74:	4313      	orrs	r3, r2
   1dd76:	f8ca 3000 	str.w	r3, [sl]
   1dd7a:	a809      	add	r0, sp, #36	; 0x24
   1dd7c:	f000 fbd4 	bl	1e528 <LLF_RND_WaitRngInterrupt>
   1dd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dd82:	f003 031a 	and.w	r3, r3, #26
   1dd86:	4303      	orrs	r3, r0
   1dd88:	f47f af68 	bne.w	1dc5c <getTrngSource+0xa0>
   1dd8c:	fbab 3b06 	umull	r3, fp, fp, r6
   1dd90:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1dd94:	930a      	str	r3, [sp, #40]	; 0x28
   1dd96:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1dd9a:	930b      	str	r3, [sp, #44]	; 0x2c
   1dd9c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1dda0:	930c      	str	r3, [sp, #48]	; 0x30
   1dda2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1dda6:	930d      	str	r3, [sp, #52]	; 0x34
   1dda8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ddac:	930e      	str	r3, [sp, #56]	; 0x38
   1ddae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ddb2:	930f      	str	r3, [sp, #60]	; 0x3c
   1ddb4:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   1ddb8:	d101      	bne.n	1ddbe <getTrngSource+0x202>
   1ddba:	9b03      	ldr	r3, [sp, #12]
   1ddbc:	b993      	cbnz	r3, 1dde4 <getTrngSource+0x228>
   1ddbe:	4640      	mov	r0, r8
   1ddc0:	2218      	movs	r2, #24
   1ddc2:	a90a      	add	r1, sp, #40	; 0x28
   1ddc4:	3e18      	subs	r6, #24
   1ddc6:	f7ff fd47 	bl	1d858 <CC_PalMemCopyPlat>
   1ddca:	f108 0818 	add.w	r8, r8, #24
   1ddce:	3701      	adds	r7, #1
   1ddd0:	b196      	cbz	r6, 1ddf8 <getTrngSource+0x23c>
   1ddd2:	f000 fbe3 	bl	1e59c <LLF_RND_TurnOffTrng>
   1ddd6:	2300      	movs	r3, #0
   1ddd8:	9309      	str	r3, [sp, #36]	; 0x24
   1ddda:	2d00      	cmp	r5, #0
   1dddc:	f47f af32 	bne.w	1dc44 <getTrngSource+0x88>
   1dde0:	4821      	ldr	r0, [pc, #132]	; (1de68 <getTrngSource+0x2ac>)
   1dde2:	e738      	b.n	1dc56 <getTrngSource+0x9a>
   1dde4:	4640      	mov	r0, r8
   1dde6:	1af6      	subs	r6, r6, r3
   1dde8:	461a      	mov	r2, r3
   1ddea:	a90a      	add	r1, sp, #40	; 0x28
   1ddec:	4498      	add	r8, r3
   1ddee:	3701      	adds	r7, #1
   1ddf0:	f7ff fd32 	bl	1d858 <CC_PalMemCopyPlat>
   1ddf4:	2e00      	cmp	r6, #0
   1ddf6:	d1ec      	bne.n	1ddd2 <getTrngSource+0x216>
   1ddf8:	9f06      	ldr	r7, [sp, #24]
   1ddfa:	9e07      	ldr	r6, [sp, #28]
   1ddfc:	696a      	ldr	r2, [r5, #20]
   1ddfe:	4639      	mov	r1, r7
   1de00:	4630      	mov	r0, r6
   1de02:	f7ff fe69 	bl	1dad8 <LLF_RND_RepetitionCounterTest>
   1de06:	69aa      	ldr	r2, [r5, #24]
   1de08:	b940      	cbnz	r0, 1de1c <getTrngSource+0x260>
   1de0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1de0e:	4639      	mov	r1, r7
   1de10:	4630      	mov	r0, r6
   1de12:	f7ff fe91 	bl	1db38 <LLF_RND_AdaptiveProportionTest>
   1de16:	2800      	cmp	r0, #0
   1de18:	f43f af40 	beq.w	1dc9c <getTrngSource+0xe0>
   1de1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1de1e:	2300      	movs	r3, #0
   1de20:	6013      	str	r3, [r2, #0]
   1de22:	e718      	b.n	1dc56 <getTrngSource+0x9a>
   1de24:	6a2b      	ldr	r3, [r5, #32]
   1de26:	2b00      	cmp	r3, #0
   1de28:	f43f af39 	beq.w	1dc9e <getTrngSource+0xe2>
   1de2c:	480f      	ldr	r0, [pc, #60]	; (1de6c <getTrngSource+0x2b0>)
   1de2e:	e736      	b.n	1dc9e <getTrngSource+0xe2>
   1de30:	2303      	movs	r3, #3
   1de32:	9304      	str	r3, [sp, #16]
   1de34:	e75d      	b.n	1dcf2 <getTrngSource+0x136>
   1de36:	2302      	movs	r3, #2
   1de38:	9304      	str	r3, [sp, #16]
   1de3a:	e75a      	b.n	1dcf2 <getTrngSource+0x136>
   1de3c:	9100      	str	r1, [sp, #0]
   1de3e:	ab08      	add	r3, sp, #32
   1de40:	2201      	movs	r2, #1
   1de42:	4629      	mov	r1, r5
   1de44:	4650      	mov	r0, sl
   1de46:	f7ff fda7 	bl	1d998 <startTrngHW>
   1de4a:	2800      	cmp	r0, #0
   1de4c:	f43f aed5 	beq.w	1dbfa <getTrngSource+0x3e>
   1de50:	e725      	b.n	1dc9e <getTrngSource+0xe2>
   1de52:	bf00      	nop
   1de54:	5002b000 	.word	0x5002b000
   1de58:	aaaaaaab 	.word	0xaaaaaaab
   1de5c:	00f10c02 	.word	0x00f10c02
   1de60:	00f10c31 	.word	0x00f10c31
   1de64:	00f10c30 	.word	0x00f10c30
   1de68:	00f10c35 	.word	0x00f10c35
   1de6c:	00f10c32 	.word	0x00f10c32

0001de70 <LLF_RND_GetTrngSource>:
   1de70:	b410      	push	{r4}
   1de72:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   1de76:	9401      	str	r4, [sp, #4]
   1de78:	9c03      	ldr	r4, [sp, #12]
   1de7a:	9402      	str	r4, [sp, #8]
   1de7c:	2400      	movs	r4, #0
   1de7e:	9403      	str	r4, [sp, #12]
   1de80:	f85d 4b04 	ldr.w	r4, [sp], #4
   1de84:	f7ff be9a 	b.w	1dbbc <getTrngSource>

0001de88 <LLF_RND_RunTrngStartupTest>:
   1de88:	b510      	push	{r4, lr}
   1de8a:	b086      	sub	sp, #24
   1de8c:	ab05      	add	r3, sp, #20
   1de8e:	2401      	movs	r4, #1
   1de90:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1de94:	9300      	str	r3, [sp, #0]
   1de96:	2200      	movs	r2, #0
   1de98:	ab04      	add	r3, sp, #16
   1de9a:	f7ff fe8f 	bl	1dbbc <getTrngSource>
   1de9e:	b006      	add	sp, #24
   1dea0:	bd10      	pop	{r4, pc}
   1dea2:	bf00      	nop

0001dea4 <mbedtls_hardware_poll>:
   1dea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dea6:	b087      	sub	sp, #28
   1dea8:	2900      	cmp	r1, #0
   1deaa:	d066      	beq.n	1df7a <mbedtls_hardware_poll+0xd6>
   1deac:	461e      	mov	r6, r3
   1deae:	2b00      	cmp	r3, #0
   1deb0:	d063      	beq.n	1df7a <mbedtls_hardware_poll+0xd6>
   1deb2:	4614      	mov	r4, r2
   1deb4:	2a00      	cmp	r2, #0
   1deb6:	d060      	beq.n	1df7a <mbedtls_hardware_poll+0xd6>
   1deb8:	4f31      	ldr	r7, [pc, #196]	; (1df80 <mbedtls_hardware_poll+0xdc>)
   1deba:	460d      	mov	r5, r1
   1debc:	6838      	ldr	r0, [r7, #0]
   1debe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dec2:	f7ff fce5 	bl	1d890 <CC_PalMutexLock>
   1dec6:	2800      	cmp	r0, #0
   1dec8:	d14d      	bne.n	1df66 <mbedtls_hardware_poll+0xc2>
   1deca:	2000      	movs	r0, #0
   1decc:	f7ff fd10 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1ded0:	2800      	cmp	r0, #0
   1ded2:	d144      	bne.n	1df5e <mbedtls_hardware_poll+0xba>
   1ded4:	482b      	ldr	r0, [pc, #172]	; (1df84 <mbedtls_hardware_poll+0xe0>)
   1ded6:	f000 fa99 	bl	1e40c <RNG_PLAT_SetUserRngParameters>
   1deda:	4603      	mov	r3, r0
   1dedc:	b1d8      	cbz	r0, 1df16 <mbedtls_hardware_poll+0x72>
   1dede:	2001      	movs	r0, #1
   1dee0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1dee4:	f7ff fd04 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1dee8:	2800      	cmp	r0, #0
   1deea:	d134      	bne.n	1df56 <mbedtls_hardware_poll+0xb2>
   1deec:	4826      	ldr	r0, [pc, #152]	; (1df88 <mbedtls_hardware_poll+0xe4>)
   1deee:	f44f 7108 	mov.w	r1, #544	; 0x220
   1def2:	f7fe fed9 	bl	1cca8 <mbedtls_zeroize_internal>
   1def6:	4825      	ldr	r0, [pc, #148]	; (1df8c <mbedtls_hardware_poll+0xe8>)
   1def8:	2104      	movs	r1, #4
   1defa:	f7fe fed5 	bl	1cca8 <mbedtls_zeroize_internal>
   1defe:	4821      	ldr	r0, [pc, #132]	; (1df84 <mbedtls_hardware_poll+0xe0>)
   1df00:	2128      	movs	r1, #40	; 0x28
   1df02:	f7fe fed1 	bl	1cca8 <mbedtls_zeroize_internal>
   1df06:	6838      	ldr	r0, [r7, #0]
   1df08:	f7ff fcca 	bl	1d8a0 <CC_PalMutexUnlock>
   1df0c:	2800      	cmp	r0, #0
   1df0e:	d12e      	bne.n	1df6e <mbedtls_hardware_poll+0xca>
   1df10:	4628      	mov	r0, r5
   1df12:	b007      	add	sp, #28
   1df14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df16:	4a1c      	ldr	r2, [pc, #112]	; (1df88 <mbedtls_hardware_poll+0xe4>)
   1df18:	9202      	str	r2, [sp, #8]
   1df1a:	aa05      	add	r2, sp, #20
   1df1c:	9201      	str	r2, [sp, #4]
   1df1e:	aa04      	add	r2, sp, #16
   1df20:	9003      	str	r0, [sp, #12]
   1df22:	9200      	str	r2, [sp, #0]
   1df24:	4917      	ldr	r1, [pc, #92]	; (1df84 <mbedtls_hardware_poll+0xe0>)
   1df26:	4819      	ldr	r0, [pc, #100]	; (1df8c <mbedtls_hardware_poll+0xe8>)
   1df28:	461a      	mov	r2, r3
   1df2a:	f7ff ffa1 	bl	1de70 <LLF_RND_GetTrngSource>
   1df2e:	4603      	mov	r3, r0
   1df30:	2800      	cmp	r0, #0
   1df32:	d1d4      	bne.n	1dede <mbedtls_hardware_poll+0x3a>
   1df34:	4628      	mov	r0, r5
   1df36:	461d      	mov	r5, r3
   1df38:	9b05      	ldr	r3, [sp, #20]
   1df3a:	9904      	ldr	r1, [sp, #16]
   1df3c:	429c      	cmp	r4, r3
   1df3e:	4622      	mov	r2, r4
   1df40:	bf28      	it	cs
   1df42:	461a      	movcs	r2, r3
   1df44:	6032      	str	r2, [r6, #0]
   1df46:	3108      	adds	r1, #8
   1df48:	f7ff fc86 	bl	1d858 <CC_PalMemCopyPlat>
   1df4c:	2001      	movs	r0, #1
   1df4e:	f7ff fccf 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1df52:	2800      	cmp	r0, #0
   1df54:	d0ca      	beq.n	1deec <mbedtls_hardware_poll+0x48>
   1df56:	480e      	ldr	r0, [pc, #56]	; (1df90 <mbedtls_hardware_poll+0xec>)
   1df58:	f7fe fd90 	bl	1ca7c <CC_PalAbort>
   1df5c:	e7c6      	b.n	1deec <mbedtls_hardware_poll+0x48>
   1df5e:	480d      	ldr	r0, [pc, #52]	; (1df94 <mbedtls_hardware_poll+0xf0>)
   1df60:	f7fe fd8c 	bl	1ca7c <CC_PalAbort>
   1df64:	e7b6      	b.n	1ded4 <mbedtls_hardware_poll+0x30>
   1df66:	480c      	ldr	r0, [pc, #48]	; (1df98 <mbedtls_hardware_poll+0xf4>)
   1df68:	f7fe fd88 	bl	1ca7c <CC_PalAbort>
   1df6c:	e7ad      	b.n	1deca <mbedtls_hardware_poll+0x26>
   1df6e:	480b      	ldr	r0, [pc, #44]	; (1df9c <mbedtls_hardware_poll+0xf8>)
   1df70:	f7fe fd84 	bl	1ca7c <CC_PalAbort>
   1df74:	4628      	mov	r0, r5
   1df76:	b007      	add	sp, #28
   1df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1df7e:	e7c7      	b.n	1df10 <mbedtls_hardware_poll+0x6c>
   1df80:	200007d0 	.word	0x200007d0
   1df84:	20004868 	.word	0x20004868
   1df88:	20004890 	.word	0x20004890
   1df8c:	20004864 	.word	0x20004864
   1df90:	00026cd0 	.word	0x00026cd0
   1df94:	00026cb0 	.word	0x00026cb0
   1df98:	00026c98 	.word	0x00026c98
   1df9c:	00026d28 	.word	0x00026d28

0001dfa0 <cc_mbedtls_aes_init>:
   1dfa0:	b510      	push	{r4, lr}
   1dfa2:	4604      	mov	r4, r0
   1dfa4:	b130      	cbz	r0, 1dfb4 <cc_mbedtls_aes_init+0x14>
   1dfa6:	2200      	movs	r2, #0
   1dfa8:	2301      	movs	r3, #1
   1dfaa:	6562      	str	r2, [r4, #84]	; 0x54
   1dfac:	65a2      	str	r2, [r4, #88]	; 0x58
   1dfae:	65e3      	str	r3, [r4, #92]	; 0x5c
   1dfb0:	6623      	str	r3, [r4, #96]	; 0x60
   1dfb2:	bd10      	pop	{r4, pc}
   1dfb4:	4801      	ldr	r0, [pc, #4]	; (1dfbc <cc_mbedtls_aes_init+0x1c>)
   1dfb6:	f7fe fd61 	bl	1ca7c <CC_PalAbort>
   1dfba:	e7f4      	b.n	1dfa6 <cc_mbedtls_aes_init+0x6>
   1dfbc:	00026d40 	.word	0x00026d40

0001dfc0 <cc_mbedtls_aes_free>:
   1dfc0:	b118      	cbz	r0, 1dfca <cc_mbedtls_aes_free+0xa>
   1dfc2:	2274      	movs	r2, #116	; 0x74
   1dfc4:	2100      	movs	r1, #0
   1dfc6:	f7ff bc49 	b.w	1d85c <CC_PalMemSetPlat>
   1dfca:	4770      	bx	lr

0001dfcc <cc_mbedtls_aes_setkey_enc>:
   1dfcc:	b190      	cbz	r0, 1dff4 <cc_mbedtls_aes_setkey_enc+0x28>
   1dfce:	b1a1      	cbz	r1, 1dffa <cc_mbedtls_aes_setkey_enc+0x2e>
   1dfd0:	b510      	push	{r4, lr}
   1dfd2:	2a80      	cmp	r2, #128	; 0x80
   1dfd4:	f04f 0400 	mov.w	r4, #0
   1dfd8:	6384      	str	r4, [r0, #56]	; 0x38
   1dfda:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1dfde:	d106      	bne.n	1dfee <cc_mbedtls_aes_setkey_enc+0x22>
   1dfe0:	2210      	movs	r2, #16
   1dfe2:	6304      	str	r4, [r0, #48]	; 0x30
   1dfe4:	4410      	add	r0, r2
   1dfe6:	f7ff fc37 	bl	1d858 <CC_PalMemCopyPlat>
   1dfea:	4620      	mov	r0, r4
   1dfec:	bd10      	pop	{r4, pc}
   1dfee:	f06f 001f 	mvn.w	r0, #31
   1dff2:	bd10      	pop	{r4, pc}
   1dff4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1dff8:	4770      	bx	lr
   1dffa:	f06f 001f 	mvn.w	r0, #31
   1dffe:	4770      	bx	lr

0001e000 <cc_mbedtls_aes_crypt_ecb>:
   1e000:	b328      	cbz	r0, 1e04e <cc_mbedtls_aes_crypt_ecb+0x4e>
   1e002:	b322      	cbz	r2, 1e04e <cc_mbedtls_aes_crypt_ecb+0x4e>
   1e004:	b31b      	cbz	r3, 1e04e <cc_mbedtls_aes_crypt_ecb+0x4e>
   1e006:	2901      	cmp	r1, #1
   1e008:	d821      	bhi.n	1e04e <cc_mbedtls_aes_crypt_ecb+0x4e>
   1e00a:	b570      	push	{r4, r5, r6, lr}
   1e00c:	4604      	mov	r4, r0
   1e00e:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1e010:	b086      	sub	sp, #24
   1e012:	d017      	beq.n	1e044 <cc_mbedtls_aes_crypt_ecb+0x44>
   1e014:	2901      	cmp	r1, #1
   1e016:	d117      	bne.n	1e048 <cc_mbedtls_aes_crypt_ecb+0x48>
   1e018:	2510      	movs	r5, #16
   1e01a:	2100      	movs	r1, #0
   1e01c:	eb0d 0605 	add.w	r6, sp, r5
   1e020:	6361      	str	r1, [r4, #52]	; 0x34
   1e022:	4610      	mov	r0, r2
   1e024:	9500      	str	r5, [sp, #0]
   1e026:	9601      	str	r6, [sp, #4]
   1e028:	aa02      	add	r2, sp, #8
   1e02a:	4629      	mov	r1, r5
   1e02c:	f000 fac2 	bl	1e5b4 <SetDataBuffersInfo>
   1e030:	b950      	cbnz	r0, 1e048 <cc_mbedtls_aes_crypt_ecb+0x48>
   1e032:	462b      	mov	r3, r5
   1e034:	4632      	mov	r2, r6
   1e036:	a902      	add	r1, sp, #8
   1e038:	4620      	mov	r0, r4
   1e03a:	f000 fd43 	bl	1eac4 <ProcessAesDrv>
   1e03e:	b918      	cbnz	r0, 1e048 <cc_mbedtls_aes_crypt_ecb+0x48>
   1e040:	b006      	add	sp, #24
   1e042:	bd70      	pop	{r4, r5, r6, pc}
   1e044:	2900      	cmp	r1, #0
   1e046:	d0e7      	beq.n	1e018 <cc_mbedtls_aes_crypt_ecb+0x18>
   1e048:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e04c:	e7f8      	b.n	1e040 <cc_mbedtls_aes_crypt_ecb+0x40>
   1e04e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e052:	4770      	bx	lr

0001e054 <cc_mbedtls_sha256_init>:
   1e054:	b510      	push	{r4, lr}
   1e056:	4604      	mov	r4, r0
   1e058:	b128      	cbz	r0, 1e066 <cc_mbedtls_sha256_init+0x12>
   1e05a:	4620      	mov	r0, r4
   1e05c:	21f4      	movs	r1, #244	; 0xf4
   1e05e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e062:	f7ff bbfd 	b.w	1d860 <CC_PalMemSetZeroPlat>
   1e066:	4804      	ldr	r0, [pc, #16]	; (1e078 <cc_mbedtls_sha256_init+0x24>)
   1e068:	f7fe fd08 	bl	1ca7c <CC_PalAbort>
   1e06c:	4620      	mov	r0, r4
   1e06e:	21f4      	movs	r1, #244	; 0xf4
   1e070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e074:	f7ff bbf4 	b.w	1d860 <CC_PalMemSetZeroPlat>
   1e078:	00026d54 	.word	0x00026d54

0001e07c <cc_mbedtls_sha256_free>:
   1e07c:	b110      	cbz	r0, 1e084 <cc_mbedtls_sha256_free+0x8>
   1e07e:	21f4      	movs	r1, #244	; 0xf4
   1e080:	f7fe be12 	b.w	1cca8 <mbedtls_zeroize_internal>
   1e084:	4770      	bx	lr
   1e086:	bf00      	nop

0001e088 <cc_mbedtls_sha256_starts>:
   1e088:	b508      	push	{r3, lr}
   1e08a:	b121      	cbz	r1, 1e096 <cc_mbedtls_sha256_starts+0xe>
   1e08c:	2901      	cmp	r1, #1
   1e08e:	d008      	beq.n	1e0a2 <cc_mbedtls_sha256_starts+0x1a>
   1e090:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e094:	bd08      	pop	{r3, pc}
   1e096:	2101      	movs	r1, #1
   1e098:	f000 f858 	bl	1e14c <mbedtls_sha_starts_internal>
   1e09c:	2800      	cmp	r0, #0
   1e09e:	d1f7      	bne.n	1e090 <cc_mbedtls_sha256_starts+0x8>
   1e0a0:	bd08      	pop	{r3, pc}
   1e0a2:	2102      	movs	r1, #2
   1e0a4:	f000 f852 	bl	1e14c <mbedtls_sha_starts_internal>
   1e0a8:	2800      	cmp	r0, #0
   1e0aa:	d0f9      	beq.n	1e0a0 <cc_mbedtls_sha256_starts+0x18>
   1e0ac:	e7f0      	b.n	1e090 <cc_mbedtls_sha256_starts+0x8>
   1e0ae:	bf00      	nop

0001e0b0 <cc_mbedtls_sha256_update>:
   1e0b0:	b530      	push	{r4, r5, lr}
   1e0b2:	4605      	mov	r5, r0
   1e0b4:	1888      	adds	r0, r1, r2
   1e0b6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1e0ba:	b0a1      	sub	sp, #132	; 0x84
   1e0bc:	460b      	mov	r3, r1
   1e0be:	4614      	mov	r4, r2
   1e0c0:	d801      	bhi.n	1e0c6 <cc_mbedtls_sha256_update+0x16>
   1e0c2:	2a80      	cmp	r2, #128	; 0x80
   1e0c4:	d90c      	bls.n	1e0e0 <cc_mbedtls_sha256_update+0x30>
   1e0c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e0ca:	d917      	bls.n	1e0fc <cc_mbedtls_sha256_update+0x4c>
   1e0cc:	4622      	mov	r2, r4
   1e0ce:	4619      	mov	r1, r3
   1e0d0:	4628      	mov	r0, r5
   1e0d2:	f000 f87d 	bl	1e1d0 <mbedtls_sha_update_internal>
   1e0d6:	4604      	mov	r4, r0
   1e0d8:	b984      	cbnz	r4, 1e0fc <cc_mbedtls_sha256_update+0x4c>
   1e0da:	4620      	mov	r0, r4
   1e0dc:	b021      	add	sp, #132	; 0x84
   1e0de:	bd30      	pop	{r4, r5, pc}
   1e0e0:	4668      	mov	r0, sp
   1e0e2:	f7ff fbb9 	bl	1d858 <CC_PalMemCopyPlat>
   1e0e6:	4622      	mov	r2, r4
   1e0e8:	4669      	mov	r1, sp
   1e0ea:	4628      	mov	r0, r5
   1e0ec:	f000 f870 	bl	1e1d0 <mbedtls_sha_update_internal>
   1e0f0:	2180      	movs	r1, #128	; 0x80
   1e0f2:	4604      	mov	r4, r0
   1e0f4:	4668      	mov	r0, sp
   1e0f6:	f7ff fbb3 	bl	1d860 <CC_PalMemSetZeroPlat>
   1e0fa:	e7ed      	b.n	1e0d8 <cc_mbedtls_sha256_update+0x28>
   1e0fc:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1e100:	e7eb      	b.n	1e0da <cc_mbedtls_sha256_update+0x2a>
   1e102:	bf00      	nop

0001e104 <cc_mbedtls_sha256_finish>:
   1e104:	b570      	push	{r4, r5, r6, lr}
   1e106:	b1e8      	cbz	r0, 1e144 <cc_mbedtls_sha256_finish+0x40>
   1e108:	460e      	mov	r6, r1
   1e10a:	b1d9      	cbz	r1, 1e144 <cc_mbedtls_sha256_finish+0x40>
   1e10c:	4604      	mov	r4, r0
   1e10e:	f000 f831 	bl	1e174 <mbedtls_sha_finish_internal>
   1e112:	4605      	mov	r5, r0
   1e114:	b9b0      	cbnz	r0, 1e144 <cc_mbedtls_sha256_finish+0x40>
   1e116:	6823      	ldr	r3, [r4, #0]
   1e118:	2b01      	cmp	r3, #1
   1e11a:	d00b      	beq.n	1e134 <cc_mbedtls_sha256_finish+0x30>
   1e11c:	2b02      	cmp	r3, #2
   1e11e:	d001      	beq.n	1e124 <cc_mbedtls_sha256_finish+0x20>
   1e120:	4628      	mov	r0, r5
   1e122:	bd70      	pop	{r4, r5, r6, pc}
   1e124:	221c      	movs	r2, #28
   1e126:	f104 0108 	add.w	r1, r4, #8
   1e12a:	4630      	mov	r0, r6
   1e12c:	f7ff fb94 	bl	1d858 <CC_PalMemCopyPlat>
   1e130:	4628      	mov	r0, r5
   1e132:	bd70      	pop	{r4, r5, r6, pc}
   1e134:	2220      	movs	r2, #32
   1e136:	f104 0108 	add.w	r1, r4, #8
   1e13a:	4630      	mov	r0, r6
   1e13c:	f7ff fb8c 	bl	1d858 <CC_PalMemCopyPlat>
   1e140:	4628      	mov	r0, r5
   1e142:	bd70      	pop	{r4, r5, r6, pc}
   1e144:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1e148:	e7ea      	b.n	1e120 <cc_mbedtls_sha256_finish+0x1c>
   1e14a:	bf00      	nop

0001e14c <mbedtls_sha_starts_internal>:
   1e14c:	b178      	cbz	r0, 1e16e <mbedtls_sha_starts_internal+0x22>
   1e14e:	b538      	push	{r3, r4, r5, lr}
   1e150:	4604      	mov	r4, r0
   1e152:	460d      	mov	r5, r1
   1e154:	21f0      	movs	r1, #240	; 0xf0
   1e156:	f7ff fb83 	bl	1d860 <CC_PalMemSetZeroPlat>
   1e15a:	2340      	movs	r3, #64	; 0x40
   1e15c:	6025      	str	r5, [r4, #0]
   1e15e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e160:	4620      	mov	r0, r4
   1e162:	f000 fa5b 	bl	1e61c <InitHashDrv>
   1e166:	3800      	subs	r0, #0
   1e168:	bf18      	it	ne
   1e16a:	2001      	movne	r0, #1
   1e16c:	bd38      	pop	{r3, r4, r5, pc}
   1e16e:	2001      	movs	r0, #1
   1e170:	4770      	bx	lr
   1e172:	bf00      	nop

0001e174 <mbedtls_sha_finish_internal>:
   1e174:	b570      	push	{r4, r5, r6, lr}
   1e176:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1e178:	b0a4      	sub	sp, #144	; 0x90
   1e17a:	4604      	mov	r4, r0
   1e17c:	ae04      	add	r6, sp, #16
   1e17e:	b9e5      	cbnz	r5, 1e1ba <mbedtls_sha_finish_internal+0x46>
   1e180:	2201      	movs	r2, #1
   1e182:	2300      	movs	r3, #0
   1e184:	6062      	str	r2, [r4, #4]
   1e186:	4630      	mov	r0, r6
   1e188:	e9cd 3300 	strd	r3, r3, [sp]
   1e18c:	aa02      	add	r2, sp, #8
   1e18e:	4629      	mov	r1, r5
   1e190:	f000 fa10 	bl	1e5b4 <SetDataBuffersInfo>
   1e194:	b110      	cbz	r0, 1e19c <mbedtls_sha_finish_internal+0x28>
   1e196:	2001      	movs	r0, #1
   1e198:	b024      	add	sp, #144	; 0x90
   1e19a:	bd70      	pop	{r4, r5, r6, pc}
   1e19c:	462a      	mov	r2, r5
   1e19e:	a902      	add	r1, sp, #8
   1e1a0:	4620      	mov	r0, r4
   1e1a2:	f000 fa63 	bl	1e66c <ProcessHashDrv>
   1e1a6:	2800      	cmp	r0, #0
   1e1a8:	d1f5      	bne.n	1e196 <mbedtls_sha_finish_internal+0x22>
   1e1aa:	4620      	mov	r0, r4
   1e1ac:	f000 fb74 	bl	1e898 <FinishHashDrv>
   1e1b0:	2800      	cmp	r0, #0
   1e1b2:	d1f0      	bne.n	1e196 <mbedtls_sha_finish_internal+0x22>
   1e1b4:	6620      	str	r0, [r4, #96]	; 0x60
   1e1b6:	b024      	add	sp, #144	; 0x90
   1e1b8:	bd70      	pop	{r4, r5, r6, pc}
   1e1ba:	2d80      	cmp	r5, #128	; 0x80
   1e1bc:	462a      	mov	r2, r5
   1e1be:	f100 0164 	add.w	r1, r0, #100	; 0x64
   1e1c2:	bf28      	it	cs
   1e1c4:	2280      	movcs	r2, #128	; 0x80
   1e1c6:	4630      	mov	r0, r6
   1e1c8:	f7ff fb46 	bl	1d858 <CC_PalMemCopyPlat>
   1e1cc:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e1ce:	e7d7      	b.n	1e180 <mbedtls_sha_finish_internal+0xc>

0001e1d0 <mbedtls_sha_update_internal>:
   1e1d0:	2800      	cmp	r0, #0
   1e1d2:	f000 80ae 	beq.w	1e332 <mbedtls_sha_update_internal+0x162>
   1e1d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1da:	4614      	mov	r4, r2
   1e1dc:	b0a5      	sub	sp, #148	; 0x94
   1e1de:	2a00      	cmp	r2, #0
   1e1e0:	d03d      	beq.n	1e25e <mbedtls_sha_update_internal+0x8e>
   1e1e2:	460f      	mov	r7, r1
   1e1e4:	2900      	cmp	r1, #0
   1e1e6:	d049      	beq.n	1e27c <mbedtls_sha_update_internal+0xac>
   1e1e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1e1ec:	4605      	mov	r5, r0
   1e1ee:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1e1f0:	d320      	bcc.n	1e234 <mbedtls_sha_update_internal+0x64>
   1e1f2:	f64f 78ff 	movw	r8, #65535	; 0xffff
   1e1f6:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   1e1fa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e1fc:	1a1a      	subs	r2, r3, r0
   1e1fe:	fbb2 f1f3 	udiv	r1, r2, r3
   1e202:	fb03 2211 	mls	r2, r3, r1, r2
   1e206:	2a00      	cmp	r2, #0
   1e208:	d165      	bne.n	1e2d6 <mbedtls_sha_update_internal+0x106>
   1e20a:	4283      	cmp	r3, r0
   1e20c:	46b9      	mov	r9, r7
   1e20e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1e212:	d072      	beq.n	1e2fa <mbedtls_sha_update_internal+0x12a>
   1e214:	fbb6 fbf3 	udiv	fp, r6, r3
   1e218:	fb03 fb0b 	mul.w	fp, r3, fp
   1e21c:	f1bb 0f00 	cmp.w	fp, #0
   1e220:	d130      	bne.n	1e284 <mbedtls_sha_update_internal+0xb4>
   1e222:	2e00      	cmp	r6, #0
   1e224:	d145      	bne.n	1e2b2 <mbedtls_sha_update_internal+0xe2>
   1e226:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   1e22a:	3cff      	subs	r4, #255	; 0xff
   1e22c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1e230:	4447      	add	r7, r8
   1e232:	d2e2      	bcs.n	1e1fa <mbedtls_sha_update_internal+0x2a>
   1e234:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e236:	1a16      	subs	r6, r2, r0
   1e238:	fbb6 f3f2 	udiv	r3, r6, r2
   1e23c:	fb02 6613 	mls	r6, r2, r3, r6
   1e240:	42a6      	cmp	r6, r4
   1e242:	bf28      	it	cs
   1e244:	4626      	movcs	r6, r4
   1e246:	2e00      	cmp	r6, #0
   1e248:	d175      	bne.n	1e336 <mbedtls_sha_update_internal+0x166>
   1e24a:	4282      	cmp	r2, r0
   1e24c:	f000 808d 	beq.w	1e36a <mbedtls_sha_update_internal+0x19a>
   1e250:	fbb4 f6f2 	udiv	r6, r4, r2
   1e254:	fb02 f606 	mul.w	r6, r2, r6
   1e258:	b92e      	cbnz	r6, 1e266 <mbedtls_sha_update_internal+0x96>
   1e25a:	2c00      	cmp	r4, #0
   1e25c:	d179      	bne.n	1e352 <mbedtls_sha_update_internal+0x182>
   1e25e:	2000      	movs	r0, #0
   1e260:	b025      	add	sp, #148	; 0x94
   1e262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e266:	2300      	movs	r3, #0
   1e268:	e9cd 3300 	strd	r3, r3, [sp]
   1e26c:	aa02      	add	r2, sp, #8
   1e26e:	4631      	mov	r1, r6
   1e270:	4638      	mov	r0, r7
   1e272:	f000 f99f 	bl	1e5b4 <SetDataBuffersInfo>
   1e276:	2800      	cmp	r0, #0
   1e278:	f000 8095 	beq.w	1e3a6 <mbedtls_sha_update_internal+0x1d6>
   1e27c:	2001      	movs	r0, #1
   1e27e:	b025      	add	sp, #148	; 0x94
   1e280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e284:	2300      	movs	r3, #0
   1e286:	e9cd 3300 	strd	r3, r3, [sp]
   1e28a:	aa02      	add	r2, sp, #8
   1e28c:	4659      	mov	r1, fp
   1e28e:	4648      	mov	r0, r9
   1e290:	f000 f990 	bl	1e5b4 <SetDataBuffersInfo>
   1e294:	2800      	cmp	r0, #0
   1e296:	d1f1      	bne.n	1e27c <mbedtls_sha_update_internal+0xac>
   1e298:	a902      	add	r1, sp, #8
   1e29a:	465a      	mov	r2, fp
   1e29c:	4628      	mov	r0, r5
   1e29e:	f000 f9e5 	bl	1e66c <ProcessHashDrv>
   1e2a2:	2800      	cmp	r0, #0
   1e2a4:	d1ea      	bne.n	1e27c <mbedtls_sha_update_internal+0xac>
   1e2a6:	eba6 060b 	sub.w	r6, r6, fp
   1e2aa:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e2ac:	44d9      	add	r9, fp
   1e2ae:	2e00      	cmp	r6, #0
   1e2b0:	d0b9      	beq.n	1e226 <mbedtls_sha_update_internal+0x56>
   1e2b2:	3019      	adds	r0, #25
   1e2b4:	4649      	mov	r1, r9
   1e2b6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1e2ba:	4632      	mov	r2, r6
   1e2bc:	f7ff facc 	bl	1d858 <CC_PalMemCopyPlat>
   1e2c0:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   1e2c4:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e2c6:	3cff      	subs	r4, #255	; 0xff
   1e2c8:	4430      	add	r0, r6
   1e2ca:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1e2ce:	4447      	add	r7, r8
   1e2d0:	6628      	str	r0, [r5, #96]	; 0x60
   1e2d2:	d292      	bcs.n	1e1fa <mbedtls_sha_update_internal+0x2a>
   1e2d4:	e7ae      	b.n	1e234 <mbedtls_sha_update_internal+0x64>
   1e2d6:	4542      	cmp	r2, r8
   1e2d8:	bf28      	it	cs
   1e2da:	4642      	movcs	r2, r8
   1e2dc:	4450      	add	r0, sl
   1e2de:	4639      	mov	r1, r7
   1e2e0:	4616      	mov	r6, r2
   1e2e2:	f7ff fab9 	bl	1d858 <CC_PalMemCopyPlat>
   1e2e6:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e2e8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e2ea:	4430      	add	r0, r6
   1e2ec:	4283      	cmp	r3, r0
   1e2ee:	eb07 0906 	add.w	r9, r7, r6
   1e2f2:	6628      	str	r0, [r5, #96]	; 0x60
   1e2f4:	eba8 0606 	sub.w	r6, r8, r6
   1e2f8:	d18c      	bne.n	1e214 <mbedtls_sha_update_internal+0x44>
   1e2fa:	2b80      	cmp	r3, #128	; 0x80
   1e2fc:	bf28      	it	cs
   1e2fe:	2380      	movcs	r3, #128	; 0x80
   1e300:	461a      	mov	r2, r3
   1e302:	4651      	mov	r1, sl
   1e304:	a804      	add	r0, sp, #16
   1e306:	f7ff faa7 	bl	1d858 <CC_PalMemCopyPlat>
   1e30a:	2300      	movs	r3, #0
   1e30c:	e9cd 3300 	strd	r3, r3, [sp]
   1e310:	aa02      	add	r2, sp, #8
   1e312:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e314:	a804      	add	r0, sp, #16
   1e316:	f000 f94d 	bl	1e5b4 <SetDataBuffersInfo>
   1e31a:	2800      	cmp	r0, #0
   1e31c:	d1ae      	bne.n	1e27c <mbedtls_sha_update_internal+0xac>
   1e31e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e320:	a902      	add	r1, sp, #8
   1e322:	4628      	mov	r0, r5
   1e324:	f000 f9a2 	bl	1e66c <ProcessHashDrv>
   1e328:	2800      	cmp	r0, #0
   1e32a:	d1a7      	bne.n	1e27c <mbedtls_sha_update_internal+0xac>
   1e32c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e32e:	6628      	str	r0, [r5, #96]	; 0x60
   1e330:	e770      	b.n	1e214 <mbedtls_sha_update_internal+0x44>
   1e332:	2001      	movs	r0, #1
   1e334:	4770      	bx	lr
   1e336:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1e33a:	4639      	mov	r1, r7
   1e33c:	4632      	mov	r2, r6
   1e33e:	4418      	add	r0, r3
   1e340:	f7ff fa8a 	bl	1d858 <CC_PalMemCopyPlat>
   1e344:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e346:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e348:	4430      	add	r0, r6
   1e34a:	1ba4      	subs	r4, r4, r6
   1e34c:	4437      	add	r7, r6
   1e34e:	6628      	str	r0, [r5, #96]	; 0x60
   1e350:	e77b      	b.n	1e24a <mbedtls_sha_update_internal+0x7a>
   1e352:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e354:	3319      	adds	r3, #25
   1e356:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   1e35a:	4622      	mov	r2, r4
   1e35c:	4639      	mov	r1, r7
   1e35e:	f7ff fa7b 	bl	1d858 <CC_PalMemCopyPlat>
   1e362:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e364:	4423      	add	r3, r4
   1e366:	662b      	str	r3, [r5, #96]	; 0x60
   1e368:	e779      	b.n	1e25e <mbedtls_sha_update_internal+0x8e>
   1e36a:	2a80      	cmp	r2, #128	; 0x80
   1e36c:	bf28      	it	cs
   1e36e:	2280      	movcs	r2, #128	; 0x80
   1e370:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1e374:	a804      	add	r0, sp, #16
   1e376:	f7ff fa6f 	bl	1d858 <CC_PalMemCopyPlat>
   1e37a:	2300      	movs	r3, #0
   1e37c:	e9cd 3300 	strd	r3, r3, [sp]
   1e380:	a804      	add	r0, sp, #16
   1e382:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e384:	aa02      	add	r2, sp, #8
   1e386:	f000 f915 	bl	1e5b4 <SetDataBuffersInfo>
   1e38a:	2800      	cmp	r0, #0
   1e38c:	f47f af76 	bne.w	1e27c <mbedtls_sha_update_internal+0xac>
   1e390:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e392:	a902      	add	r1, sp, #8
   1e394:	4628      	mov	r0, r5
   1e396:	f000 f969 	bl	1e66c <ProcessHashDrv>
   1e39a:	2800      	cmp	r0, #0
   1e39c:	f47f af6e 	bne.w	1e27c <mbedtls_sha_update_internal+0xac>
   1e3a0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e3a2:	6628      	str	r0, [r5, #96]	; 0x60
   1e3a4:	e754      	b.n	1e250 <mbedtls_sha_update_internal+0x80>
   1e3a6:	a902      	add	r1, sp, #8
   1e3a8:	4632      	mov	r2, r6
   1e3aa:	4628      	mov	r0, r5
   1e3ac:	f000 f95e 	bl	1e66c <ProcessHashDrv>
   1e3b0:	2800      	cmp	r0, #0
   1e3b2:	f47f af63 	bne.w	1e27c <mbedtls_sha_update_internal+0xac>
   1e3b6:	4437      	add	r7, r6
   1e3b8:	1ba4      	subs	r4, r4, r6
   1e3ba:	e74e      	b.n	1e25a <mbedtls_sha_update_internal+0x8a>

0001e3bc <cc_mbedtls_sha256>:
   1e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3be:	461c      	mov	r4, r3
   1e3c0:	4605      	mov	r5, r0
   1e3c2:	4811      	ldr	r0, [pc, #68]	; (1e408 <cc_mbedtls_sha256+0x4c>)
   1e3c4:	460e      	mov	r6, r1
   1e3c6:	4617      	mov	r7, r2
   1e3c8:	f7ff fe44 	bl	1e054 <cc_mbedtls_sha256_init>
   1e3cc:	4621      	mov	r1, r4
   1e3ce:	480e      	ldr	r0, [pc, #56]	; (1e408 <cc_mbedtls_sha256+0x4c>)
   1e3d0:	f7ff fe5a 	bl	1e088 <cc_mbedtls_sha256_starts>
   1e3d4:	4604      	mov	r4, r0
   1e3d6:	b120      	cbz	r0, 1e3e2 <cc_mbedtls_sha256+0x26>
   1e3d8:	480b      	ldr	r0, [pc, #44]	; (1e408 <cc_mbedtls_sha256+0x4c>)
   1e3da:	f7ff fe4f 	bl	1e07c <cc_mbedtls_sha256_free>
   1e3de:	4620      	mov	r0, r4
   1e3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e3e2:	4809      	ldr	r0, [pc, #36]	; (1e408 <cc_mbedtls_sha256+0x4c>)
   1e3e4:	4632      	mov	r2, r6
   1e3e6:	4629      	mov	r1, r5
   1e3e8:	f7ff fe62 	bl	1e0b0 <cc_mbedtls_sha256_update>
   1e3ec:	4604      	mov	r4, r0
   1e3ee:	2800      	cmp	r0, #0
   1e3f0:	d1f2      	bne.n	1e3d8 <cc_mbedtls_sha256+0x1c>
   1e3f2:	4639      	mov	r1, r7
   1e3f4:	4804      	ldr	r0, [pc, #16]	; (1e408 <cc_mbedtls_sha256+0x4c>)
   1e3f6:	f7ff fe85 	bl	1e104 <cc_mbedtls_sha256_finish>
   1e3fa:	4604      	mov	r4, r0
   1e3fc:	4802      	ldr	r0, [pc, #8]	; (1e408 <cc_mbedtls_sha256+0x4c>)
   1e3fe:	f7ff fe3d 	bl	1e07c <cc_mbedtls_sha256_free>
   1e402:	4620      	mov	r0, r4
   1e404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e406:	bf00      	nop
   1e408:	20004ab0 	.word	0x20004ab0

0001e40c <RNG_PLAT_SetUserRngParameters>:
   1e40c:	b530      	push	{r4, r5, lr}
   1e40e:	b083      	sub	sp, #12
   1e410:	231c      	movs	r3, #28
   1e412:	a901      	add	r1, sp, #4
   1e414:	4605      	mov	r5, r0
   1e416:	9301      	str	r3, [sp, #4]
   1e418:	f000 f832 	bl	1e480 <CC_PalTrngParamGet>
   1e41c:	4604      	mov	r4, r0
   1e41e:	b938      	cbnz	r0, 1e430 <RNG_PLAT_SetUserRngParameters+0x24>
   1e420:	9b01      	ldr	r3, [sp, #4]
   1e422:	2b1c      	cmp	r3, #28
   1e424:	d007      	beq.n	1e436 <RNG_PLAT_SetUserRngParameters+0x2a>
   1e426:	4c14      	ldr	r4, [pc, #80]	; (1e478 <RNG_PLAT_SetUserRngParameters+0x6c>)
   1e428:	211c      	movs	r1, #28
   1e42a:	4628      	mov	r0, r5
   1e42c:	f7ff fa18 	bl	1d860 <CC_PalMemSetZeroPlat>
   1e430:	4620      	mov	r0, r4
   1e432:	b003      	add	sp, #12
   1e434:	bd30      	pop	{r4, r5, pc}
   1e436:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   1e43a:	1e13      	subs	r3, r2, #0
   1e43c:	bf18      	it	ne
   1e43e:	2301      	movne	r3, #1
   1e440:	3900      	subs	r1, #0
   1e442:	682a      	ldr	r2, [r5, #0]
   1e444:	bf18      	it	ne
   1e446:	2101      	movne	r1, #1
   1e448:	009b      	lsls	r3, r3, #2
   1e44a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   1e44e:	2a00      	cmp	r2, #0
   1e450:	bf18      	it	ne
   1e452:	f043 0301 	orrne.w	r3, r3, #1
   1e456:	68ea      	ldr	r2, [r5, #12]
   1e458:	2001      	movs	r0, #1
   1e45a:	61e8      	str	r0, [r5, #28]
   1e45c:	b92a      	cbnz	r2, 1e46a <RNG_PLAT_SetUserRngParameters+0x5e>
   1e45e:	e9c5 3408 	strd	r3, r4, [r5, #32]
   1e462:	2b00      	cmp	r3, #0
   1e464:	d1e4      	bne.n	1e430 <RNG_PLAT_SetUserRngParameters+0x24>
   1e466:	4c05      	ldr	r4, [pc, #20]	; (1e47c <RNG_PLAT_SetUserRngParameters+0x70>)
   1e468:	e7de      	b.n	1e428 <RNG_PLAT_SetUserRngParameters+0x1c>
   1e46a:	f043 0308 	orr.w	r3, r3, #8
   1e46e:	4620      	mov	r0, r4
   1e470:	e9c5 3408 	strd	r3, r4, [r5, #32]
   1e474:	b003      	add	sp, #12
   1e476:	bd30      	pop	{r4, r5, pc}
   1e478:	00f00c37 	.word	0x00f00c37
   1e47c:	00f00c0e 	.word	0x00f00c0e

0001e480 <CC_PalTrngParamGet>:
   1e480:	b118      	cbz	r0, 1e48a <CC_PalTrngParamGet+0xa>
   1e482:	b111      	cbz	r1, 1e48a <CC_PalTrngParamGet+0xa>
   1e484:	680b      	ldr	r3, [r1, #0]
   1e486:	2b1c      	cmp	r3, #28
   1e488:	d001      	beq.n	1e48e <CC_PalTrngParamGet+0xe>
   1e48a:	2001      	movs	r0, #1
   1e48c:	4770      	bx	lr
   1e48e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e492:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1e496:	3201      	adds	r2, #1
   1e498:	bf14      	ite	ne
   1e49a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1e49e:	f241 225c 	movweq	r2, #4700	; 0x125c
   1e4a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e4a6:	6002      	str	r2, [r0, #0]
   1e4a8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1e4ac:	3201      	adds	r2, #1
   1e4ae:	bf14      	ite	ne
   1e4b0:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1e4b4:	f641 1264 	movweq	r2, #6500	; 0x1964
   1e4b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e4bc:	6042      	str	r2, [r0, #4]
   1e4be:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1e4c2:	3201      	adds	r2, #1
   1e4c4:	bf14      	ite	ne
   1e4c6:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1e4ca:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1e4ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e4d2:	6082      	str	r2, [r0, #8]
   1e4d4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1e4d8:	3201      	adds	r2, #1
   1e4da:	bf14      	ite	ne
   1e4dc:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1e4e0:	f241 3288 	movweq	r2, #5000	; 0x1388
   1e4e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e4e8:	60c2      	str	r2, [r0, #12]
   1e4ea:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1e4ee:	3201      	adds	r2, #1
   1e4f0:	bf14      	ite	ne
   1e4f2:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1e4f6:	2290      	moveq	r2, #144	; 0x90
   1e4f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e4fc:	6102      	str	r2, [r0, #16]
   1e4fe:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1e502:	3201      	adds	r2, #1
   1e504:	bf14      	ite	ne
   1e506:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1e50a:	2251      	moveq	r2, #81	; 0x51
   1e50c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e510:	6142      	str	r2, [r0, #20]
   1e512:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1e516:	3201      	adds	r2, #1
   1e518:	bf14      	ite	ne
   1e51a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1e51e:	f240 3337 	movweq	r3, #823	; 0x337
   1e522:	6183      	str	r3, [r0, #24]
   1e524:	2000      	movs	r0, #0
   1e526:	4770      	bx	lr

0001e528 <LLF_RND_WaitRngInterrupt>:
   1e528:	b508      	push	{r3, lr}
   1e52a:	4601      	mov	r1, r0
   1e52c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e530:	f7ff f91e 	bl	1d770 <CC_HalWaitInterruptRND>
   1e534:	4b03      	ldr	r3, [pc, #12]	; (1e544 <LLF_RND_WaitRngInterrupt+0x1c>)
   1e536:	2200      	movs	r2, #0
   1e538:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1e53c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1e540:	bd08      	pop	{r3, pc}
   1e542:	bf00      	nop
   1e544:	5002b000 	.word	0x5002b000

0001e548 <LLF_RND_GetRoscSampleCnt>:
   1e548:	3801      	subs	r0, #1
   1e54a:	2807      	cmp	r0, #7
   1e54c:	d805      	bhi.n	1e55a <LLF_RND_GetRoscSampleCnt+0x12>
   1e54e:	e8df f000 	tbb	[pc, r0]
   1e552:	0e10      	.short	0x0e10
   1e554:	04040a04 	.word	0x04040a04
   1e558:	0604      	.short	0x0604
   1e55a:	4807      	ldr	r0, [pc, #28]	; (1e578 <LLF_RND_GetRoscSampleCnt+0x30>)
   1e55c:	4770      	bx	lr
   1e55e:	68cb      	ldr	r3, [r1, #12]
   1e560:	624b      	str	r3, [r1, #36]	; 0x24
   1e562:	2000      	movs	r0, #0
   1e564:	4770      	bx	lr
   1e566:	688b      	ldr	r3, [r1, #8]
   1e568:	624b      	str	r3, [r1, #36]	; 0x24
   1e56a:	2000      	movs	r0, #0
   1e56c:	4770      	bx	lr
   1e56e:	684b      	ldr	r3, [r1, #4]
   1e570:	e7f6      	b.n	1e560 <LLF_RND_GetRoscSampleCnt+0x18>
   1e572:	680b      	ldr	r3, [r1, #0]
   1e574:	e7f4      	b.n	1e560 <LLF_RND_GetRoscSampleCnt+0x18>
   1e576:	bf00      	nop
   1e578:	00f10c31 	.word	0x00f10c31

0001e57c <LLF_RND_GetFastestRosc>:
   1e57c:	680b      	ldr	r3, [r1, #0]
   1e57e:	e002      	b.n	1e586 <LLF_RND_GetFastestRosc+0xa>
   1e580:	2b08      	cmp	r3, #8
   1e582:	600b      	str	r3, [r1, #0]
   1e584:	d806      	bhi.n	1e594 <LLF_RND_GetFastestRosc+0x18>
   1e586:	6a02      	ldr	r2, [r0, #32]
   1e588:	4213      	tst	r3, r2
   1e58a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1e58e:	d0f7      	beq.n	1e580 <LLF_RND_GetFastestRosc+0x4>
   1e590:	2000      	movs	r0, #0
   1e592:	4770      	bx	lr
   1e594:	4800      	ldr	r0, [pc, #0]	; (1e598 <LLF_RND_GetFastestRosc+0x1c>)
   1e596:	4770      	bx	lr
   1e598:	00f10c31 	.word	0x00f10c31

0001e59c <LLF_RND_TurnOffTrng>:
   1e59c:	4b04      	ldr	r3, [pc, #16]	; (1e5b0 <LLF_RND_TurnOffTrng+0x14>)
   1e59e:	2200      	movs	r2, #0
   1e5a0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1e5a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e5a8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   1e5ac:	f7ff b8c6 	b.w	1d73c <CC_HalClearInterruptBit>
   1e5b0:	5002b000 	.word	0x5002b000

0001e5b4 <SetDataBuffersInfo>:
   1e5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5b6:	b083      	sub	sp, #12
   1e5b8:	461d      	mov	r5, r3
   1e5ba:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1e5be:	f04f 0300 	mov.w	r3, #0
   1e5c2:	f88d 3007 	strb.w	r3, [sp, #7]
   1e5c6:	d324      	bcc.n	1e612 <SetDataBuffersInfo+0x5e>
   1e5c8:	468c      	mov	ip, r1
   1e5ca:	4484      	add	ip, r0
   1e5cc:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   1e5d0:	4604      	mov	r4, r0
   1e5d2:	d81e      	bhi.n	1e612 <SetDataBuffersInfo+0x5e>
   1e5d4:	4617      	mov	r7, r2
   1e5d6:	f10d 0307 	add.w	r3, sp, #7
   1e5da:	2201      	movs	r2, #1
   1e5dc:	f000 fe64 	bl	1f2a8 <CC_PalDataBufferAttrGet>
   1e5e0:	4606      	mov	r6, r0
   1e5e2:	b9b0      	cbnz	r0, 1e612 <SetDataBuffersInfo+0x5e>
   1e5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e5e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e5ea:	603c      	str	r4, [r7, #0]
   1e5ec:	713b      	strb	r3, [r7, #4]
   1e5ee:	b192      	cbz	r2, 1e616 <SetDataBuffersInfo+0x62>
   1e5f0:	b14d      	cbz	r5, 1e606 <SetDataBuffersInfo+0x52>
   1e5f2:	4602      	mov	r2, r0
   1e5f4:	9908      	ldr	r1, [sp, #32]
   1e5f6:	f10d 0307 	add.w	r3, sp, #7
   1e5fa:	4628      	mov	r0, r5
   1e5fc:	f000 fe54 	bl	1f2a8 <CC_PalDataBufferAttrGet>
   1e600:	b938      	cbnz	r0, 1e612 <SetDataBuffersInfo+0x5e>
   1e602:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e606:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e608:	4630      	mov	r0, r6
   1e60a:	6015      	str	r5, [r2, #0]
   1e60c:	7113      	strb	r3, [r2, #4]
   1e60e:	b003      	add	sp, #12
   1e610:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e612:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1e616:	4630      	mov	r0, r6
   1e618:	b003      	add	sp, #12
   1e61a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e61c <InitHashDrv>:
   1e61c:	b1d8      	cbz	r0, 1e656 <InitHashDrv+0x3a>
   1e61e:	b508      	push	{r3, lr}
   1e620:	6803      	ldr	r3, [r0, #0]
   1e622:	2b01      	cmp	r3, #1
   1e624:	d004      	beq.n	1e630 <InitHashDrv+0x14>
   1e626:	2b02      	cmp	r3, #2
   1e628:	d00f      	beq.n	1e64a <InitHashDrv+0x2e>
   1e62a:	b143      	cbz	r3, 1e63e <InitHashDrv+0x22>
   1e62c:	480b      	ldr	r0, [pc, #44]	; (1e65c <InitHashDrv+0x40>)
   1e62e:	bd08      	pop	{r3, pc}
   1e630:	490b      	ldr	r1, [pc, #44]	; (1e660 <InitHashDrv+0x44>)
   1e632:	2220      	movs	r2, #32
   1e634:	3008      	adds	r0, #8
   1e636:	f7ff f90f 	bl	1d858 <CC_PalMemCopyPlat>
   1e63a:	2000      	movs	r0, #0
   1e63c:	bd08      	pop	{r3, pc}
   1e63e:	4909      	ldr	r1, [pc, #36]	; (1e664 <InitHashDrv+0x48>)
   1e640:	2214      	movs	r2, #20
   1e642:	3008      	adds	r0, #8
   1e644:	f7ff f908 	bl	1d858 <CC_PalMemCopyPlat>
   1e648:	e7f7      	b.n	1e63a <InitHashDrv+0x1e>
   1e64a:	4907      	ldr	r1, [pc, #28]	; (1e668 <InitHashDrv+0x4c>)
   1e64c:	2220      	movs	r2, #32
   1e64e:	3008      	adds	r0, #8
   1e650:	f7ff f902 	bl	1d858 <CC_PalMemCopyPlat>
   1e654:	e7f1      	b.n	1e63a <InitHashDrv+0x1e>
   1e656:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e65a:	4770      	bx	lr
   1e65c:	00f30001 	.word	0x00f30001
   1e660:	00026d64 	.word	0x00026d64
   1e664:	00026da4 	.word	0x00026da4
   1e668:	00026d84 	.word	0x00026d84

0001e66c <ProcessHashDrv>:
   1e66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e670:	2900      	cmp	r1, #0
   1e672:	f000 80f9 	beq.w	1e868 <ProcessHashDrv+0x1fc>
   1e676:	4604      	mov	r4, r0
   1e678:	2800      	cmp	r0, #0
   1e67a:	f000 80f9 	beq.w	1e870 <ProcessHashDrv+0x204>
   1e67e:	6803      	ldr	r3, [r0, #0]
   1e680:	4690      	mov	r8, r2
   1e682:	460f      	mov	r7, r1
   1e684:	2b00      	cmp	r3, #0
   1e686:	f000 80c3 	beq.w	1e810 <ProcessHashDrv+0x1a4>
   1e68a:	3b01      	subs	r3, #1
   1e68c:	2b01      	cmp	r3, #1
   1e68e:	f200 80d7 	bhi.w	1e840 <ProcessHashDrv+0x1d4>
   1e692:	4879      	ldr	r0, [pc, #484]	; (1e878 <ProcessHashDrv+0x20c>)
   1e694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e698:	f04f 0902 	mov.w	r9, #2
   1e69c:	f7ff f8f8 	bl	1d890 <CC_PalMutexLock>
   1e6a0:	2800      	cmp	r0, #0
   1e6a2:	f040 80bf 	bne.w	1e824 <ProcessHashDrv+0x1b8>
   1e6a6:	2000      	movs	r0, #0
   1e6a8:	f7ff f922 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1e6ac:	4606      	mov	r6, r0
   1e6ae:	2800      	cmp	r0, #0
   1e6b0:	f040 80c2 	bne.w	1e838 <ProcessHashDrv+0x1cc>
   1e6b4:	4a71      	ldr	r2, [pc, #452]	; (1e87c <ProcessHashDrv+0x210>)
   1e6b6:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1e6ba:	2b00      	cmp	r3, #0
   1e6bc:	d1fb      	bne.n	1e6b6 <ProcessHashDrv+0x4a>
   1e6be:	4d6f      	ldr	r5, [pc, #444]	; (1e87c <ProcessHashDrv+0x210>)
   1e6c0:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   1e6c4:	2b00      	cmp	r3, #0
   1e6c6:	d1fb      	bne.n	1e6c0 <ProcessHashDrv+0x54>
   1e6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e6cc:	f7ff f836 	bl	1d73c <CC_HalClearInterruptBit>
   1e6d0:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e6d4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1e6d8:	f7ff f83e 	bl	1d758 <CC_HalMaskInterrupt>
   1e6dc:	2301      	movs	r3, #1
   1e6de:	2207      	movs	r2, #7
   1e6e0:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   1e6e4:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   1e6e8:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1e6ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e6ee:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   1e6f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e6f4:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   1e6f8:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   1e6fc:	6823      	ldr	r3, [r4, #0]
   1e6fe:	b15b      	cbz	r3, 1e718 <ProcessHashDrv+0xac>
   1e700:	3b01      	subs	r3, #1
   1e702:	2b01      	cmp	r3, #1
   1e704:	d818      	bhi.n	1e738 <ProcessHashDrv+0xcc>
   1e706:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e708:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1e70c:	6a23      	ldr	r3, [r4, #32]
   1e70e:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   1e712:	69e3      	ldr	r3, [r4, #28]
   1e714:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   1e718:	4b58      	ldr	r3, [pc, #352]	; (1e87c <ProcessHashDrv+0x210>)
   1e71a:	69a2      	ldr	r2, [r4, #24]
   1e71c:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1e720:	6962      	ldr	r2, [r4, #20]
   1e722:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   1e726:	6922      	ldr	r2, [r4, #16]
   1e728:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1e72c:	68e2      	ldr	r2, [r4, #12]
   1e72e:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   1e732:	68a2      	ldr	r2, [r4, #8]
   1e734:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   1e738:	4a50      	ldr	r2, [pc, #320]	; (1e87c <ProcessHashDrv+0x210>)
   1e73a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e73e:	2b00      	cmp	r3, #0
   1e740:	d1fb      	bne.n	1e73a <ProcessHashDrv+0xce>
   1e742:	f1b8 0f00 	cmp.w	r8, #0
   1e746:	d05f      	beq.n	1e808 <ProcessHashDrv+0x19c>
   1e748:	6863      	ldr	r3, [r4, #4]
   1e74a:	2b01      	cmp	r3, #1
   1e74c:	bf08      	it	eq
   1e74e:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   1e752:	4b4a      	ldr	r3, [pc, #296]	; (1e87c <ProcessHashDrv+0x210>)
   1e754:	683a      	ldr	r2, [r7, #0]
   1e756:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1e75a:	2040      	movs	r0, #64	; 0x40
   1e75c:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   1e760:	f7ff f800 	bl	1d764 <CC_HalWaitInterrupt>
   1e764:	4606      	mov	r6, r0
   1e766:	4a45      	ldr	r2, [pc, #276]	; (1e87c <ProcessHashDrv+0x210>)
   1e768:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e76c:	2b00      	cmp	r3, #0
   1e76e:	d1fb      	bne.n	1e768 <ProcessHashDrv+0xfc>
   1e770:	4a42      	ldr	r2, [pc, #264]	; (1e87c <ProcessHashDrv+0x210>)
   1e772:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e776:	2b00      	cmp	r3, #0
   1e778:	d1fb      	bne.n	1e772 <ProcessHashDrv+0x106>
   1e77a:	6823      	ldr	r3, [r4, #0]
   1e77c:	b15b      	cbz	r3, 1e796 <ProcessHashDrv+0x12a>
   1e77e:	3b01      	subs	r3, #1
   1e780:	2b01      	cmp	r3, #1
   1e782:	d818      	bhi.n	1e7b6 <ProcessHashDrv+0x14a>
   1e784:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   1e788:	6263      	str	r3, [r4, #36]	; 0x24
   1e78a:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   1e78e:	6223      	str	r3, [r4, #32]
   1e790:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   1e794:	61e3      	str	r3, [r4, #28]
   1e796:	4b39      	ldr	r3, [pc, #228]	; (1e87c <ProcessHashDrv+0x210>)
   1e798:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e79c:	61a2      	str	r2, [r4, #24]
   1e79e:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   1e7a2:	6162      	str	r2, [r4, #20]
   1e7a4:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   1e7a8:	6122      	str	r2, [r4, #16]
   1e7aa:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   1e7ae:	60e2      	str	r2, [r4, #12]
   1e7b0:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   1e7b4:	60a3      	str	r3, [r4, #8]
   1e7b6:	4a31      	ldr	r2, [pc, #196]	; (1e87c <ProcessHashDrv+0x210>)
   1e7b8:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   1e7bc:	64a1      	str	r1, [r4, #72]	; 0x48
   1e7be:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   1e7c2:	64e1      	str	r1, [r4, #76]	; 0x4c
   1e7c4:	2300      	movs	r3, #0
   1e7c6:	2101      	movs	r1, #1
   1e7c8:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   1e7cc:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   1e7d0:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e7d4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e7d8:	2b00      	cmp	r3, #0
   1e7da:	d1fb      	bne.n	1e7d4 <ProcessHashDrv+0x168>
   1e7dc:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   1e7e0:	2e00      	cmp	r6, #0
   1e7e2:	d13b      	bne.n	1e85c <ProcessHashDrv+0x1f0>
   1e7e4:	4b25      	ldr	r3, [pc, #148]	; (1e87c <ProcessHashDrv+0x210>)
   1e7e6:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e7ea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1e7ee:	f7fe ffb3 	bl	1d758 <CC_HalMaskInterrupt>
   1e7f2:	2001      	movs	r0, #1
   1e7f4:	f7ff f87c 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1e7f8:	bb60      	cbnz	r0, 1e854 <ProcessHashDrv+0x1e8>
   1e7fa:	481f      	ldr	r0, [pc, #124]	; (1e878 <ProcessHashDrv+0x20c>)
   1e7fc:	f7ff f850 	bl	1d8a0 <CC_PalMutexUnlock>
   1e800:	bb10      	cbnz	r0, 1e848 <ProcessHashDrv+0x1dc>
   1e802:	4630      	mov	r0, r6
   1e804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e808:	2304      	movs	r3, #4
   1e80a:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e80e:	e7aa      	b.n	1e766 <ProcessHashDrv+0xfa>
   1e810:	4819      	ldr	r0, [pc, #100]	; (1e878 <ProcessHashDrv+0x20c>)
   1e812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e816:	f04f 0901 	mov.w	r9, #1
   1e81a:	f7ff f839 	bl	1d890 <CC_PalMutexLock>
   1e81e:	2800      	cmp	r0, #0
   1e820:	f43f af41 	beq.w	1e6a6 <ProcessHashDrv+0x3a>
   1e824:	4816      	ldr	r0, [pc, #88]	; (1e880 <ProcessHashDrv+0x214>)
   1e826:	f7fe f929 	bl	1ca7c <CC_PalAbort>
   1e82a:	2000      	movs	r0, #0
   1e82c:	f7ff f860 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1e830:	4606      	mov	r6, r0
   1e832:	2800      	cmp	r0, #0
   1e834:	f43f af3e 	beq.w	1e6b4 <ProcessHashDrv+0x48>
   1e838:	4812      	ldr	r0, [pc, #72]	; (1e884 <ProcessHashDrv+0x218>)
   1e83a:	f7fe f91f 	bl	1ca7c <CC_PalAbort>
   1e83e:	e739      	b.n	1e6b4 <ProcessHashDrv+0x48>
   1e840:	4e11      	ldr	r6, [pc, #68]	; (1e888 <ProcessHashDrv+0x21c>)
   1e842:	4630      	mov	r0, r6
   1e844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e848:	4810      	ldr	r0, [pc, #64]	; (1e88c <ProcessHashDrv+0x220>)
   1e84a:	f7fe f917 	bl	1ca7c <CC_PalAbort>
   1e84e:	4630      	mov	r0, r6
   1e850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e854:	480e      	ldr	r0, [pc, #56]	; (1e890 <ProcessHashDrv+0x224>)
   1e856:	f7fe f911 	bl	1ca7c <CC_PalAbort>
   1e85a:	e7ce      	b.n	1e7fa <ProcessHashDrv+0x18e>
   1e85c:	2110      	movs	r1, #16
   1e85e:	f104 0008 	add.w	r0, r4, #8
   1e862:	f7fe fffd 	bl	1d860 <CC_PalMemSetZeroPlat>
   1e866:	e7bd      	b.n	1e7e4 <ProcessHashDrv+0x178>
   1e868:	4e0a      	ldr	r6, [pc, #40]	; (1e894 <ProcessHashDrv+0x228>)
   1e86a:	4630      	mov	r0, r6
   1e86c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e870:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   1e874:	e7c5      	b.n	1e802 <ProcessHashDrv+0x196>
   1e876:	bf00      	nop
   1e878:	200007e0 	.word	0x200007e0
   1e87c:	5002b000 	.word	0x5002b000
   1e880:	00026c98 	.word	0x00026c98
   1e884:	00026cb0 	.word	0x00026cb0
   1e888:	00f30001 	.word	0x00f30001
   1e88c:	00026cf0 	.word	0x00026cf0
   1e890:	00026cd0 	.word	0x00026cd0
   1e894:	00f30003 	.word	0x00f30003

0001e898 <FinishHashDrv>:
   1e898:	b398      	cbz	r0, 1e902 <FinishHashDrv+0x6a>
   1e89a:	b470      	push	{r4, r5, r6}
   1e89c:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   1e8a0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1e8a4:	ba26      	rev	r6, r4
   1e8a6:	ba0d      	rev	r5, r1
   1e8a8:	ba14      	rev	r4, r2
   1e8aa:	ba19      	rev	r1, r3
   1e8ac:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   1e8b0:	ba12      	rev	r2, r2
   1e8b2:	e9c0 4104 	strd	r4, r1, [r0, #16]
   1e8b6:	6182      	str	r2, [r0, #24]
   1e8b8:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   1e8bc:	e9c0 6502 	strd	r6, r5, [r0, #8]
   1e8c0:	ba1b      	rev	r3, r3
   1e8c2:	ba25      	rev	r5, r4
   1e8c4:	e9c0 3507 	strd	r3, r5, [r0, #28]
   1e8c8:	ba14      	rev	r4, r2
   1e8ca:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   1e8ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1e8d0:	ba12      	rev	r2, r2
   1e8d2:	ba09      	rev	r1, r1
   1e8d4:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   1e8d8:	62c2      	str	r2, [r0, #44]	; 0x2c
   1e8da:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   1e8de:	ba1b      	rev	r3, r3
   1e8e0:	ba25      	rev	r5, r4
   1e8e2:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   1e8e6:	ba14      	rev	r4, r2
   1e8e8:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   1e8ec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1e8ee:	ba12      	rev	r2, r2
   1e8f0:	ba09      	rev	r1, r1
   1e8f2:	ba1b      	rev	r3, r3
   1e8f4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1e8f8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1e8fc:	2000      	movs	r0, #0
   1e8fe:	bc70      	pop	{r4, r5, r6}
   1e900:	4770      	bx	lr
   1e902:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e906:	4770      	bx	lr

0001e908 <LoadAesKey>:
   1e908:	2800      	cmp	r0, #0
   1e90a:	d047      	beq.n	1e99c <LoadAesKey+0x94>
   1e90c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1e910:	2b00      	cmp	r3, #0
   1e912:	d034      	beq.n	1e97e <LoadAesKey+0x76>
   1e914:	2b03      	cmp	r3, #3
   1e916:	b510      	push	{r4, lr}
   1e918:	d013      	beq.n	1e942 <LoadAesKey+0x3a>
   1e91a:	4822      	ldr	r0, [pc, #136]	; (1e9a4 <LoadAesKey+0x9c>)
   1e91c:	4c22      	ldr	r4, [pc, #136]	; (1e9a8 <LoadAesKey+0xa0>)
   1e91e:	6822      	ldr	r2, [r4, #0]
   1e920:	4b22      	ldr	r3, [pc, #136]	; (1e9ac <LoadAesKey+0xa4>)
   1e922:	6812      	ldr	r2, [r2, #0]
   1e924:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e928:	6822      	ldr	r2, [r4, #0]
   1e92a:	6852      	ldr	r2, [r2, #4]
   1e92c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e930:	6822      	ldr	r2, [r4, #0]
   1e932:	6892      	ldr	r2, [r2, #8]
   1e934:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e938:	6822      	ldr	r2, [r4, #0]
   1e93a:	68d2      	ldr	r2, [r2, #12]
   1e93c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e940:	bd10      	pop	{r4, pc}
   1e942:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e944:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1e946:	4c18      	ldr	r4, [pc, #96]	; (1e9a8 <LoadAesKey+0xa0>)
   1e948:	f000 fba8 	bl	1f09c <kmu_validate_kdr_slot_and_size>
   1e94c:	2800      	cmp	r0, #0
   1e94e:	d1e6      	bne.n	1e91e <LoadAesKey+0x16>
   1e950:	6822      	ldr	r2, [r4, #0]
   1e952:	4b16      	ldr	r3, [pc, #88]	; (1e9ac <LoadAesKey+0xa4>)
   1e954:	6812      	ldr	r2, [r2, #0]
   1e956:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e95a:	6822      	ldr	r2, [r4, #0]
   1e95c:	6852      	ldr	r2, [r2, #4]
   1e95e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e962:	6822      	ldr	r2, [r4, #0]
   1e964:	6892      	ldr	r2, [r2, #8]
   1e966:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e96a:	6822      	ldr	r2, [r4, #0]
   1e96c:	68d2      	ldr	r2, [r2, #12]
   1e96e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e972:	f000 fba1 	bl	1f0b8 <kmu_use_kdr_key>
   1e976:	2800      	cmp	r0, #0
   1e978:	d1d1      	bne.n	1e91e <LoadAesKey+0x16>
   1e97a:	2000      	movs	r0, #0
   1e97c:	bd10      	pop	{r4, pc}
   1e97e:	4b0b      	ldr	r3, [pc, #44]	; (1e9ac <LoadAesKey+0xa4>)
   1e980:	6902      	ldr	r2, [r0, #16]
   1e982:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e986:	6942      	ldr	r2, [r0, #20]
   1e988:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e98c:	6982      	ldr	r2, [r0, #24]
   1e98e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e992:	69c2      	ldr	r2, [r0, #28]
   1e994:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e998:	2000      	movs	r0, #0
   1e99a:	4770      	bx	lr
   1e99c:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1e9a0:	4770      	bx	lr
   1e9a2:	bf00      	nop
   1e9a4:	00f10009 	.word	0x00f10009
   1e9a8:	200007cc 	.word	0x200007cc
   1e9ac:	5002b000 	.word	0x5002b000

0001e9b0 <InitAes.part.0>:
   1e9b0:	4a37      	ldr	r2, [pc, #220]	; (1ea90 <InitAes.part.0+0xe0>)
   1e9b2:	b538      	push	{r3, r4, r5, lr}
   1e9b4:	4604      	mov	r4, r0
   1e9b6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e9ba:	2b00      	cmp	r3, #0
   1e9bc:	d1fb      	bne.n	1e9b6 <InitAes.part.0+0x6>
   1e9be:	4a34      	ldr	r2, [pc, #208]	; (1ea90 <InitAes.part.0+0xe0>)
   1e9c0:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e9c4:	2b00      	cmp	r3, #0
   1e9c6:	d1fb      	bne.n	1e9c0 <InitAes.part.0+0x10>
   1e9c8:	4a31      	ldr	r2, [pc, #196]	; (1ea90 <InitAes.part.0+0xe0>)
   1e9ca:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   1e9ce:	2b00      	cmp	r3, #0
   1e9d0:	d1fb      	bne.n	1e9ca <InitAes.part.0+0x1a>
   1e9d2:	4a2f      	ldr	r2, [pc, #188]	; (1ea90 <InitAes.part.0+0xe0>)
   1e9d4:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e9d8:	2b00      	cmp	r3, #0
   1e9da:	d1fb      	bne.n	1e9d4 <InitAes.part.0+0x24>
   1e9dc:	4a2c      	ldr	r2, [pc, #176]	; (1ea90 <InitAes.part.0+0xe0>)
   1e9de:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1e9e2:	2b00      	cmp	r3, #0
   1e9e4:	d1fb      	bne.n	1e9de <InitAes.part.0+0x2e>
   1e9e6:	4d2a      	ldr	r5, [pc, #168]	; (1ea90 <InitAes.part.0+0xe0>)
   1e9e8:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   1e9ec:	2b00      	cmp	r3, #0
   1e9ee:	d1fb      	bne.n	1e9e8 <InitAes.part.0+0x38>
   1e9f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e9f4:	f7fe fea2 	bl	1d73c <CC_HalClearInterruptBit>
   1e9f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e9fa:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e9fe:	f023 0304 	bic.w	r3, r3, #4
   1ea02:	2b03      	cmp	r3, #3
   1ea04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ea06:	d039      	beq.n	1ea7c <InitAes.part.0+0xcc>
   1ea08:	2b01      	cmp	r3, #1
   1ea0a:	bf0c      	ite	eq
   1ea0c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1ea10:	f020 0020 	bicne.w	r0, r0, #32
   1ea14:	f7fe fea0 	bl	1d758 <CC_HalMaskInterrupt>
   1ea18:	4a1d      	ldr	r2, [pc, #116]	; (1ea90 <InitAes.part.0+0xe0>)
   1ea1a:	2301      	movs	r3, #1
   1ea1c:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   1ea20:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	d1fb      	bne.n	1ea20 <InitAes.part.0+0x70>
   1ea28:	4a19      	ldr	r2, [pc, #100]	; (1ea90 <InitAes.part.0+0xe0>)
   1ea2a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1ea2e:	2b00      	cmp	r3, #0
   1ea30:	d1fb      	bne.n	1ea2a <InitAes.part.0+0x7a>
   1ea32:	4917      	ldr	r1, [pc, #92]	; (1ea90 <InitAes.part.0+0xe0>)
   1ea34:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   1ea38:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   1ea3c:	2b00      	cmp	r3, #0
   1ea3e:	d1fb      	bne.n	1ea38 <InitAes.part.0+0x88>
   1ea40:	4a13      	ldr	r2, [pc, #76]	; (1ea90 <InitAes.part.0+0xe0>)
   1ea42:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1ea46:	2b00      	cmp	r3, #0
   1ea48:	d1fb      	bne.n	1ea42 <InitAes.part.0+0x92>
   1ea4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1ea4c:	f022 0104 	bic.w	r1, r2, #4
   1ea50:	2903      	cmp	r1, #3
   1ea52:	bf18      	it	ne
   1ea54:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1ea56:	490e      	ldr	r1, [pc, #56]	; (1ea90 <InitAes.part.0+0xe0>)
   1ea58:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1ea5c:	bf18      	it	ne
   1ea5e:	f003 0301 	andne.w	r3, r3, #1
   1ea62:	f002 021c 	and.w	r2, r2, #28
   1ea66:	431a      	orrs	r2, r3
   1ea68:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   1ea6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ea6e:	2b07      	cmp	r3, #7
   1ea70:	bf04      	itt	eq
   1ea72:	2301      	moveq	r3, #1
   1ea74:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   1ea78:	2000      	movs	r0, #0
   1ea7a:	bd38      	pop	{r3, r4, r5, pc}
   1ea7c:	2b01      	cmp	r3, #1
   1ea7e:	bf0c      	ite	eq
   1ea80:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1ea84:	f020 0010 	bicne.w	r0, r0, #16
   1ea88:	f7fe fe66 	bl	1d758 <CC_HalMaskInterrupt>
   1ea8c:	e7c4      	b.n	1ea18 <InitAes.part.0+0x68>
   1ea8e:	bf00      	nop
   1ea90:	5002b000 	.word	0x5002b000

0001ea94 <write_invalid_key>:
   1ea94:	4a09      	ldr	r2, [pc, #36]	; (1eabc <write_invalid_key+0x28>)
   1ea96:	4b0a      	ldr	r3, [pc, #40]	; (1eac0 <write_invalid_key+0x2c>)
   1ea98:	6811      	ldr	r1, [r2, #0]
   1ea9a:	6809      	ldr	r1, [r1, #0]
   1ea9c:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   1eaa0:	6811      	ldr	r1, [r2, #0]
   1eaa2:	6849      	ldr	r1, [r1, #4]
   1eaa4:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   1eaa8:	6811      	ldr	r1, [r2, #0]
   1eaaa:	6889      	ldr	r1, [r1, #8]
   1eaac:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   1eab0:	6812      	ldr	r2, [r2, #0]
   1eab2:	68d2      	ldr	r2, [r2, #12]
   1eab4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1eab8:	4770      	bx	lr
   1eaba:	bf00      	nop
   1eabc:	200007cc 	.word	0x200007cc
   1eac0:	5002b000 	.word	0x5002b000

0001eac4 <ProcessAesDrv>:
   1eac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eac8:	b085      	sub	sp, #20
   1eaca:	2900      	cmp	r1, #0
   1eacc:	f000 80ec 	beq.w	1eca8 <ProcessAesDrv+0x1e4>
   1ead0:	4690      	mov	r8, r2
   1ead2:	2a00      	cmp	r2, #0
   1ead4:	f000 80e8 	beq.w	1eca8 <ProcessAesDrv+0x1e4>
   1ead8:	4605      	mov	r5, r0
   1eada:	2800      	cmp	r0, #0
   1eadc:	f000 8129 	beq.w	1ed32 <ProcessAesDrv+0x26e>
   1eae0:	4699      	mov	r9, r3
   1eae2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1eae4:	460e      	mov	r6, r1
   1eae6:	2b00      	cmp	r3, #0
   1eae8:	d152      	bne.n	1eb90 <ProcessAesDrv+0xcc>
   1eaea:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   1eaee:	d254      	bcs.n	1eb9a <ProcessAesDrv+0xd6>
   1eaf0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1eaf4:	2b04      	cmp	r3, #4
   1eaf6:	f000 80ff 	beq.w	1ecf8 <ProcessAesDrv+0x234>
   1eafa:	2700      	movs	r7, #0
   1eafc:	48ad      	ldr	r0, [pc, #692]	; (1edb4 <ProcessAesDrv+0x2f0>)
   1eafe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1eb02:	f7fe fec5 	bl	1d890 <CC_PalMutexLock>
   1eb06:	2800      	cmp	r0, #0
   1eb08:	f040 80d5 	bne.w	1ecb6 <ProcessAesDrv+0x1f2>
   1eb0c:	2000      	movs	r0, #0
   1eb0e:	f7fe feef 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1eb12:	2800      	cmp	r0, #0
   1eb14:	f040 80d8 	bne.w	1ecc8 <ProcessAesDrv+0x204>
   1eb18:	48a7      	ldr	r0, [pc, #668]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1eb1a:	2301      	movs	r3, #1
   1eb1c:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   1eb20:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   1eb24:	2c00      	cmp	r4, #0
   1eb26:	d1fb      	bne.n	1eb20 <ProcessAesDrv+0x5c>
   1eb28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1eb2a:	2b03      	cmp	r3, #3
   1eb2c:	dc3a      	bgt.n	1eba4 <ProcessAesDrv+0xe0>
   1eb2e:	2b00      	cmp	r3, #0
   1eb30:	da3b      	bge.n	1ebaa <ProcessAesDrv+0xe6>
   1eb32:	4ca2      	ldr	r4, [pc, #648]	; (1edbc <ProcessAesDrv+0x2f8>)
   1eb34:	4aa0      	ldr	r2, [pc, #640]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1eb36:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1eb3a:	2b00      	cmp	r3, #0
   1eb3c:	d1fb      	bne.n	1eb36 <ProcessAesDrv+0x72>
   1eb3e:	2f00      	cmp	r7, #0
   1eb40:	f040 80d1 	bne.w	1ece6 <ProcessAesDrv+0x222>
   1eb44:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1eb46:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1eb48:	f023 0304 	bic.w	r3, r3, #4
   1eb4c:	2b03      	cmp	r3, #3
   1eb4e:	4b9a      	ldr	r3, [pc, #616]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1eb50:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1eb54:	f000 809f 	beq.w	1ec96 <ProcessAesDrv+0x1d2>
   1eb58:	2a01      	cmp	r2, #1
   1eb5a:	bf0c      	ite	eq
   1eb5c:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1eb60:	f040 0020 	orrne.w	r0, r0, #32
   1eb64:	f7fe fdf8 	bl	1d758 <CC_HalMaskInterrupt>
   1eb68:	4b93      	ldr	r3, [pc, #588]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1eb6a:	2200      	movs	r2, #0
   1eb6c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   1eb70:	2001      	movs	r0, #1
   1eb72:	f7fe febd 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1eb76:	2800      	cmp	r0, #0
   1eb78:	f040 80b1 	bne.w	1ecde <ProcessAesDrv+0x21a>
   1eb7c:	488d      	ldr	r0, [pc, #564]	; (1edb4 <ProcessAesDrv+0x2f0>)
   1eb7e:	f7fe fe8f 	bl	1d8a0 <CC_PalMutexUnlock>
   1eb82:	2800      	cmp	r0, #0
   1eb84:	f040 80a4 	bne.w	1ecd0 <ProcessAesDrv+0x20c>
   1eb88:	4620      	mov	r0, r4
   1eb8a:	b005      	add	sp, #20
   1eb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb90:	2b01      	cmp	r3, #1
   1eb92:	d1ad      	bne.n	1eaf0 <ProcessAesDrv+0x2c>
   1eb94:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   1eb98:	d3aa      	bcc.n	1eaf0 <ProcessAesDrv+0x2c>
   1eb9a:	4c89      	ldr	r4, [pc, #548]	; (1edc0 <ProcessAesDrv+0x2fc>)
   1eb9c:	4620      	mov	r0, r4
   1eb9e:	b005      	add	sp, #20
   1eba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eba4:	3b06      	subs	r3, #6
   1eba6:	2b01      	cmp	r3, #1
   1eba8:	d8c3      	bhi.n	1eb32 <ProcessAesDrv+0x6e>
   1ebaa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1ebac:	2b01      	cmp	r3, #1
   1ebae:	f200 80be 	bhi.w	1ed2e <ProcessAesDrv+0x26a>
   1ebb2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ebb4:	2b01      	cmp	r3, #1
   1ebb6:	d87c      	bhi.n	1ecb2 <ProcessAesDrv+0x1ee>
   1ebb8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1ebba:	2b01      	cmp	r3, #1
   1ebbc:	f200 80e8 	bhi.w	1ed90 <ProcessAesDrv+0x2cc>
   1ebc0:	4628      	mov	r0, r5
   1ebc2:	f7ff fef5 	bl	1e9b0 <InitAes.part.0>
   1ebc6:	4604      	mov	r4, r0
   1ebc8:	2800      	cmp	r0, #0
   1ebca:	d1b3      	bne.n	1eb34 <ProcessAesDrv+0x70>
   1ebcc:	4628      	mov	r0, r5
   1ebce:	f7ff fe9b 	bl	1e908 <LoadAesKey>
   1ebd2:	4604      	mov	r4, r0
   1ebd4:	2800      	cmp	r0, #0
   1ebd6:	d1ad      	bne.n	1eb34 <ProcessAesDrv+0x70>
   1ebd8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ebda:	2b07      	cmp	r3, #7
   1ebdc:	d8a9      	bhi.n	1eb32 <ProcessAesDrv+0x6e>
   1ebde:	2201      	movs	r2, #1
   1ebe0:	409a      	lsls	r2, r3
   1ebe2:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   1ebe6:	f040 80d5 	bne.w	1ed94 <ProcessAesDrv+0x2d0>
   1ebea:	f012 0f44 	tst.w	r2, #68	; 0x44
   1ebee:	f040 80ba 	bne.w	1ed66 <ProcessAesDrv+0x2a2>
   1ebf2:	07d2      	lsls	r2, r2, #31
   1ebf4:	d59d      	bpl.n	1eb32 <ProcessAesDrv+0x6e>
   1ebf6:	f023 0304 	bic.w	r3, r3, #4
   1ebfa:	2b03      	cmp	r3, #3
   1ebfc:	6832      	ldr	r2, [r6, #0]
   1ebfe:	d00d      	beq.n	1ec1c <ProcessAesDrv+0x158>
   1ec00:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1ec02:	f8d8 1000 	ldr.w	r1, [r8]
   1ec06:	2b01      	cmp	r3, #1
   1ec08:	4b6b      	ldr	r3, [pc, #428]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1ec0a:	bf0b      	itete	eq
   1ec0c:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   1ec10:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   1ec14:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   1ec18:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   1ec1c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ec1e:	2b01      	cmp	r3, #1
   1ec20:	4b65      	ldr	r3, [pc, #404]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1ec22:	bf0b      	itete	eq
   1ec24:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   1ec28:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   1ec2c:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   1ec30:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   1ec34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ec36:	f023 0304 	bic.w	r3, r3, #4
   1ec3a:	2b03      	cmp	r3, #3
   1ec3c:	f000 80a2 	beq.w	1ed84 <ProcessAesDrv+0x2c0>
   1ec40:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1ec42:	2b01      	cmp	r3, #1
   1ec44:	bf14      	ite	ne
   1ec46:	2020      	movne	r0, #32
   1ec48:	2080      	moveq	r0, #128	; 0x80
   1ec4a:	f7fe fd8b 	bl	1d764 <CC_HalWaitInterrupt>
   1ec4e:	4604      	mov	r4, r0
   1ec50:	2800      	cmp	r0, #0
   1ec52:	f47f af6f 	bne.w	1eb34 <ProcessAesDrv+0x70>
   1ec56:	4b58      	ldr	r3, [pc, #352]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1ec58:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   1ec5c:	2c00      	cmp	r4, #0
   1ec5e:	d1fb      	bne.n	1ec58 <ProcessAesDrv+0x194>
   1ec60:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1ec62:	2907      	cmp	r1, #7
   1ec64:	d814      	bhi.n	1ec90 <ProcessAesDrv+0x1cc>
   1ec66:	2201      	movs	r2, #1
   1ec68:	408a      	lsls	r2, r1
   1ec6a:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   1ec6e:	f040 80bb 	bne.w	1ede8 <ProcessAesDrv+0x324>
   1ec72:	f012 0f44 	tst.w	r2, #68	; 0x44
   1ec76:	d00b      	beq.n	1ec90 <ProcessAesDrv+0x1cc>
   1ec78:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1ec7c:	602a      	str	r2, [r5, #0]
   1ec7e:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1ec82:	606a      	str	r2, [r5, #4]
   1ec84:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1ec88:	60aa      	str	r2, [r5, #8]
   1ec8a:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1ec8e:	60eb      	str	r3, [r5, #12]
   1ec90:	2301      	movs	r3, #1
   1ec92:	65ab      	str	r3, [r5, #88]	; 0x58
   1ec94:	e74e      	b.n	1eb34 <ProcessAesDrv+0x70>
   1ec96:	2a01      	cmp	r2, #1
   1ec98:	bf0c      	ite	eq
   1ec9a:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1ec9e:	f040 0010 	orrne.w	r0, r0, #16
   1eca2:	f7fe fd59 	bl	1d758 <CC_HalMaskInterrupt>
   1eca6:	e75f      	b.n	1eb68 <ProcessAesDrv+0xa4>
   1eca8:	4c46      	ldr	r4, [pc, #280]	; (1edc4 <ProcessAesDrv+0x300>)
   1ecaa:	4620      	mov	r0, r4
   1ecac:	b005      	add	sp, #20
   1ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecb2:	4c45      	ldr	r4, [pc, #276]	; (1edc8 <ProcessAesDrv+0x304>)
   1ecb4:	e73e      	b.n	1eb34 <ProcessAesDrv+0x70>
   1ecb6:	4845      	ldr	r0, [pc, #276]	; (1edcc <ProcessAesDrv+0x308>)
   1ecb8:	f7fd fee0 	bl	1ca7c <CC_PalAbort>
   1ecbc:	2000      	movs	r0, #0
   1ecbe:	f7fe fe17 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1ecc2:	2800      	cmp	r0, #0
   1ecc4:	f43f af28 	beq.w	1eb18 <ProcessAesDrv+0x54>
   1ecc8:	4841      	ldr	r0, [pc, #260]	; (1edd0 <ProcessAesDrv+0x30c>)
   1ecca:	f7fd fed7 	bl	1ca7c <CC_PalAbort>
   1ecce:	e723      	b.n	1eb18 <ProcessAesDrv+0x54>
   1ecd0:	4840      	ldr	r0, [pc, #256]	; (1edd4 <ProcessAesDrv+0x310>)
   1ecd2:	f7fd fed3 	bl	1ca7c <CC_PalAbort>
   1ecd6:	4620      	mov	r0, r4
   1ecd8:	b005      	add	sp, #20
   1ecda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecde:	483e      	ldr	r0, [pc, #248]	; (1edd8 <ProcessAesDrv+0x314>)
   1ece0:	f7fd fecc 	bl	1ca7c <CC_PalAbort>
   1ece4:	e74a      	b.n	1eb7c <ProcessAesDrv+0xb8>
   1ece6:	2304      	movs	r3, #4
   1ece8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1ecec:	2120      	movs	r1, #32
   1ecee:	f105 0010 	add.w	r0, r5, #16
   1ecf2:	f7fe fdb5 	bl	1d860 <CC_PalMemSetZeroPlat>
   1ecf6:	e725      	b.n	1eb44 <ProcessAesDrv+0x80>
   1ecf8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1ecfa:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1ecfc:	f000 f9c0 	bl	1f080 <kmu_validate_slot_and_size>
   1ed00:	b998      	cbnz	r0, 1ed2a <ProcessAesDrv+0x266>
   1ed02:	4f36      	ldr	r7, [pc, #216]	; (1eddc <ProcessAesDrv+0x318>)
   1ed04:	4c2c      	ldr	r4, [pc, #176]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1ed06:	683b      	ldr	r3, [r7, #0]
   1ed08:	681b      	ldr	r3, [r3, #0]
   1ed0a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1ed0e:	683b      	ldr	r3, [r7, #0]
   1ed10:	685b      	ldr	r3, [r3, #4]
   1ed12:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1ed16:	683b      	ldr	r3, [r7, #0]
   1ed18:	689b      	ldr	r3, [r3, #8]
   1ed1a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1ed1e:	683b      	ldr	r3, [r7, #0]
   1ed20:	68db      	ldr	r3, [r3, #12]
   1ed22:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1ed26:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1ed28:	b131      	cbz	r1, 1ed38 <ProcessAesDrv+0x274>
   1ed2a:	2701      	movs	r7, #1
   1ed2c:	e6e6      	b.n	1eafc <ProcessAesDrv+0x38>
   1ed2e:	4c2c      	ldr	r4, [pc, #176]	; (1ede0 <ProcessAesDrv+0x31c>)
   1ed30:	e700      	b.n	1eb34 <ProcessAesDrv+0x70>
   1ed32:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   1ed36:	e727      	b.n	1eb88 <ProcessAesDrv+0xc4>
   1ed38:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1ed3a:	9301      	str	r3, [sp, #4]
   1ed3c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1ed3e:	9300      	str	r3, [sp, #0]
   1ed40:	f105 0a10 	add.w	sl, r5, #16
   1ed44:	f04f 0b10 	mov.w	fp, #16
   1ed48:	f8cd a008 	str.w	sl, [sp, #8]
   1ed4c:	f8cd b00c 	str.w	fp, [sp, #12]
   1ed50:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   1ed54:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1ed56:	f000 f9b9 	bl	1f0cc <kmu_derive_cmac>
   1ed5a:	2800      	cmp	r0, #0
   1ed5c:	d151      	bne.n	1ee02 <ProcessAesDrv+0x33e>
   1ed5e:	2300      	movs	r3, #0
   1ed60:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1ed64:	e7e1      	b.n	1ed2a <ProcessAesDrv+0x266>
   1ed66:	4b14      	ldr	r3, [pc, #80]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1ed68:	682a      	ldr	r2, [r5, #0]
   1ed6a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1ed6e:	686a      	ldr	r2, [r5, #4]
   1ed70:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1ed74:	68aa      	ldr	r2, [r5, #8]
   1ed76:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1ed7a:	68ea      	ldr	r2, [r5, #12]
   1ed7c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1ed80:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ed82:	e738      	b.n	1ebf6 <ProcessAesDrv+0x132>
   1ed84:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ed86:	2b01      	cmp	r3, #1
   1ed88:	bf14      	ite	ne
   1ed8a:	2010      	movne	r0, #16
   1ed8c:	2040      	moveq	r0, #64	; 0x40
   1ed8e:	e75c      	b.n	1ec4a <ProcessAesDrv+0x186>
   1ed90:	4c14      	ldr	r4, [pc, #80]	; (1ede4 <ProcessAesDrv+0x320>)
   1ed92:	e6cf      	b.n	1eb34 <ProcessAesDrv+0x70>
   1ed94:	4b08      	ldr	r3, [pc, #32]	; (1edb8 <ProcessAesDrv+0x2f4>)
   1ed96:	682a      	ldr	r2, [r5, #0]
   1ed98:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1ed9c:	686a      	ldr	r2, [r5, #4]
   1ed9e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1eda2:	68aa      	ldr	r2, [r5, #8]
   1eda4:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1eda8:	68ea      	ldr	r2, [r5, #12]
   1edaa:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1edae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1edb0:	e721      	b.n	1ebf6 <ProcessAesDrv+0x132>
   1edb2:	bf00      	nop
   1edb4:	200007e0 	.word	0x200007e0
   1edb8:	5002b000 	.word	0x5002b000
   1edbc:	00f10001 	.word	0x00f10001
   1edc0:	00f10005 	.word	0x00f10005
   1edc4:	00f1000b 	.word	0x00f1000b
   1edc8:	00f10003 	.word	0x00f10003
   1edcc:	00026c98 	.word	0x00026c98
   1edd0:	00026cb0 	.word	0x00026cb0
   1edd4:	00026cf0 	.word	0x00026cf0
   1edd8:	00026cd0 	.word	0x00026cd0
   1eddc:	200007cc 	.word	0x200007cc
   1ede0:	00f10002 	.word	0x00f10002
   1ede4:	00f10004 	.word	0x00f10004
   1ede8:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1edec:	602a      	str	r2, [r5, #0]
   1edee:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1edf2:	606a      	str	r2, [r5, #4]
   1edf4:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1edf8:	60aa      	str	r2, [r5, #8]
   1edfa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1edfe:	60eb      	str	r3, [r5, #12]
   1ee00:	e746      	b.n	1ec90 <ProcessAesDrv+0x1cc>
   1ee02:	683b      	ldr	r3, [r7, #0]
   1ee04:	681b      	ldr	r3, [r3, #0]
   1ee06:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1ee0a:	683b      	ldr	r3, [r7, #0]
   1ee0c:	685b      	ldr	r3, [r3, #4]
   1ee0e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1ee12:	683b      	ldr	r3, [r7, #0]
   1ee14:	689b      	ldr	r3, [r3, #8]
   1ee16:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1ee1a:	683b      	ldr	r3, [r7, #0]
   1ee1c:	68db      	ldr	r3, [r3, #12]
   1ee1e:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1ee22:	4659      	mov	r1, fp
   1ee24:	4650      	mov	r0, sl
   1ee26:	f7fe fd1b 	bl	1d860 <CC_PalMemSetZeroPlat>
   1ee2a:	e798      	b.n	1ed5e <ProcessAesDrv+0x29a>

0001ee2c <FinishAesDrv>:
   1ee2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee30:	b309      	cbz	r1, 1ee76 <FinishAesDrv+0x4a>
   1ee32:	b302      	cbz	r2, 1ee76 <FinishAesDrv+0x4a>
   1ee34:	4604      	mov	r4, r0
   1ee36:	2800      	cmp	r0, #0
   1ee38:	f000 80af 	beq.w	1ef9a <FinishAesDrv+0x16e>
   1ee3c:	461d      	mov	r5, r3
   1ee3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1ee40:	2b07      	cmp	r3, #7
   1ee42:	460e      	mov	r6, r1
   1ee44:	d01b      	beq.n	1ee7e <FinishAesDrv+0x52>
   1ee46:	b95d      	cbnz	r5, 1ee60 <FinishAesDrv+0x34>
   1ee48:	2b03      	cmp	r3, #3
   1ee4a:	d110      	bne.n	1ee6e <FinishAesDrv+0x42>
   1ee4c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1ee4e:	b973      	cbnz	r3, 1ee6e <FinishAesDrv+0x42>
   1ee50:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1ee54:	6645      	str	r5, [r0, #100]	; 0x64
   1ee56:	6685      	str	r5, [r0, #104]	; 0x68
   1ee58:	66c5      	str	r5, [r0, #108]	; 0x6c
   1ee5a:	6705      	str	r5, [r0, #112]	; 0x70
   1ee5c:	600b      	str	r3, [r1, #0]
   1ee5e:	2510      	movs	r5, #16
   1ee60:	462b      	mov	r3, r5
   1ee62:	4631      	mov	r1, r6
   1ee64:	4620      	mov	r0, r4
   1ee66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ee6a:	f7ff be2b 	b.w	1eac4 <ProcessAesDrv>
   1ee6e:	462f      	mov	r7, r5
   1ee70:	4638      	mov	r0, r7
   1ee72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee76:	4f76      	ldr	r7, [pc, #472]	; (1f050 <FinishAesDrv+0x224>)
   1ee78:	4638      	mov	r0, r7
   1ee7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee7e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1ee80:	2b00      	cmp	r3, #0
   1ee82:	f040 808d 	bne.w	1efa0 <FinishAesDrv+0x174>
   1ee86:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1ee8a:	f080 8090 	bcs.w	1efae <FinishAesDrv+0x182>
   1ee8e:	b91d      	cbnz	r5, 1ee98 <FinishAesDrv+0x6c>
   1ee90:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1ee92:	2b00      	cmp	r3, #0
   1ee94:	f040 808b 	bne.w	1efae <FinishAesDrv+0x182>
   1ee98:	486e      	ldr	r0, [pc, #440]	; (1f054 <FinishAesDrv+0x228>)
   1ee9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ee9e:	f7fe fcf7 	bl	1d890 <CC_PalMutexLock>
   1eea2:	2800      	cmp	r0, #0
   1eea4:	f040 808f 	bne.w	1efc6 <FinishAesDrv+0x19a>
   1eea8:	2000      	movs	r0, #0
   1eeaa:	f7fe fd21 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1eeae:	2800      	cmp	r0, #0
   1eeb0:	f040 8085 	bne.w	1efbe <FinishAesDrv+0x192>
   1eeb4:	4a68      	ldr	r2, [pc, #416]	; (1f058 <FinishAesDrv+0x22c>)
   1eeb6:	2301      	movs	r3, #1
   1eeb8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1eebc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1eec0:	2b00      	cmp	r3, #0
   1eec2:	d1fb      	bne.n	1eebc <FinishAesDrv+0x90>
   1eec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1eec6:	2b03      	cmp	r3, #3
   1eec8:	dd4f      	ble.n	1ef6a <FinishAesDrv+0x13e>
   1eeca:	3b06      	subs	r3, #6
   1eecc:	2b01      	cmp	r3, #1
   1eece:	d84e      	bhi.n	1ef6e <FinishAesDrv+0x142>
   1eed0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1eed2:	2b01      	cmp	r3, #1
   1eed4:	d86d      	bhi.n	1efb2 <FinishAesDrv+0x186>
   1eed6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1eed8:	2b01      	cmp	r3, #1
   1eeda:	d878      	bhi.n	1efce <FinishAesDrv+0x1a2>
   1eedc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1eede:	2b01      	cmp	r3, #1
   1eee0:	d877      	bhi.n	1efd2 <FinishAesDrv+0x1a6>
   1eee2:	4620      	mov	r0, r4
   1eee4:	f7ff fd64 	bl	1e9b0 <InitAes.part.0>
   1eee8:	4607      	mov	r7, r0
   1eeea:	2800      	cmp	r0, #0
   1eeec:	d140      	bne.n	1ef70 <FinishAesDrv+0x144>
   1eeee:	4620      	mov	r0, r4
   1eef0:	f7ff fd0a 	bl	1e908 <LoadAesKey>
   1eef4:	4607      	mov	r7, r0
   1eef6:	2800      	cmp	r0, #0
   1eef8:	d13a      	bne.n	1ef70 <FinishAesDrv+0x144>
   1eefa:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1eefc:	2a07      	cmp	r2, #7
   1eefe:	d836      	bhi.n	1ef6e <FinishAesDrv+0x142>
   1ef00:	2301      	movs	r3, #1
   1ef02:	4093      	lsls	r3, r2
   1ef04:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   1ef08:	f040 8081 	bne.w	1f00e <FinishAesDrv+0x1e2>
   1ef0c:	f013 0f44 	tst.w	r3, #68	; 0x44
   1ef10:	d16f      	bne.n	1eff2 <FinishAesDrv+0x1c6>
   1ef12:	07db      	lsls	r3, r3, #31
   1ef14:	d52b      	bpl.n	1ef6e <FinishAesDrv+0x142>
   1ef16:	4b50      	ldr	r3, [pc, #320]	; (1f058 <FinishAesDrv+0x22c>)
   1ef18:	2201      	movs	r2, #1
   1ef1a:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   1ef1e:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   1ef22:	6831      	ldr	r1, [r6, #0]
   1ef24:	2d00      	cmp	r5, #0
   1ef26:	d156      	bne.n	1efd6 <FinishAesDrv+0x1aa>
   1ef28:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1ef2a:	b909      	cbnz	r1, 1ef30 <FinishAesDrv+0x104>
   1ef2c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   1ef30:	4b49      	ldr	r3, [pc, #292]	; (1f058 <FinishAesDrv+0x22c>)
   1ef32:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   1ef36:	2f00      	cmp	r7, #0
   1ef38:	d1fb      	bne.n	1ef32 <FinishAesDrv+0x106>
   1ef3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1ef3c:	2907      	cmp	r1, #7
   1ef3e:	d817      	bhi.n	1ef70 <FinishAesDrv+0x144>
   1ef40:	2201      	movs	r2, #1
   1ef42:	408a      	lsls	r2, r1
   1ef44:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   1ef48:	d16f      	bne.n	1f02a <FinishAesDrv+0x1fe>
   1ef4a:	f012 0f44 	tst.w	r2, #68	; 0x44
   1ef4e:	d00f      	beq.n	1ef70 <FinishAesDrv+0x144>
   1ef50:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1ef54:	6022      	str	r2, [r4, #0]
   1ef56:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1ef5a:	6062      	str	r2, [r4, #4]
   1ef5c:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1ef60:	60a2      	str	r2, [r4, #8]
   1ef62:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1ef66:	60e3      	str	r3, [r4, #12]
   1ef68:	e002      	b.n	1ef70 <FinishAesDrv+0x144>
   1ef6a:	2b00      	cmp	r3, #0
   1ef6c:	dab0      	bge.n	1eed0 <FinishAesDrv+0xa4>
   1ef6e:	4f3b      	ldr	r7, [pc, #236]	; (1f05c <FinishAesDrv+0x230>)
   1ef70:	4a39      	ldr	r2, [pc, #228]	; (1f058 <FinishAesDrv+0x22c>)
   1ef72:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1ef76:	2b00      	cmp	r3, #0
   1ef78:	d1fb      	bne.n	1ef72 <FinishAesDrv+0x146>
   1ef7a:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1ef7e:	2001      	movs	r0, #1
   1ef80:	f7fe fcb6 	bl	1d8f0 <CC_PalPowerSaveModeSelect>
   1ef84:	b9b8      	cbnz	r0, 1efb6 <FinishAesDrv+0x18a>
   1ef86:	4833      	ldr	r0, [pc, #204]	; (1f054 <FinishAesDrv+0x228>)
   1ef88:	f7fe fc8a 	bl	1d8a0 <CC_PalMutexUnlock>
   1ef8c:	2800      	cmp	r0, #0
   1ef8e:	f43f af6f 	beq.w	1ee70 <FinishAesDrv+0x44>
   1ef92:	4833      	ldr	r0, [pc, #204]	; (1f060 <FinishAesDrv+0x234>)
   1ef94:	f7fd fd72 	bl	1ca7c <CC_PalAbort>
   1ef98:	e76a      	b.n	1ee70 <FinishAesDrv+0x44>
   1ef9a:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1ef9e:	e767      	b.n	1ee70 <FinishAesDrv+0x44>
   1efa0:	2b01      	cmp	r3, #1
   1efa2:	f47f af74 	bne.w	1ee8e <FinishAesDrv+0x62>
   1efa6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1efaa:	f4ff af70 	bcc.w	1ee8e <FinishAesDrv+0x62>
   1efae:	4f2d      	ldr	r7, [pc, #180]	; (1f064 <FinishAesDrv+0x238>)
   1efb0:	e75e      	b.n	1ee70 <FinishAesDrv+0x44>
   1efb2:	4f2d      	ldr	r7, [pc, #180]	; (1f068 <FinishAesDrv+0x23c>)
   1efb4:	e7dc      	b.n	1ef70 <FinishAesDrv+0x144>
   1efb6:	482d      	ldr	r0, [pc, #180]	; (1f06c <FinishAesDrv+0x240>)
   1efb8:	f7fd fd60 	bl	1ca7c <CC_PalAbort>
   1efbc:	e7e3      	b.n	1ef86 <FinishAesDrv+0x15a>
   1efbe:	482c      	ldr	r0, [pc, #176]	; (1f070 <FinishAesDrv+0x244>)
   1efc0:	f7fd fd5c 	bl	1ca7c <CC_PalAbort>
   1efc4:	e776      	b.n	1eeb4 <FinishAesDrv+0x88>
   1efc6:	482b      	ldr	r0, [pc, #172]	; (1f074 <FinishAesDrv+0x248>)
   1efc8:	f7fd fd58 	bl	1ca7c <CC_PalAbort>
   1efcc:	e76c      	b.n	1eea8 <FinishAesDrv+0x7c>
   1efce:	4f2a      	ldr	r7, [pc, #168]	; (1f078 <FinishAesDrv+0x24c>)
   1efd0:	e7ce      	b.n	1ef70 <FinishAesDrv+0x144>
   1efd2:	4f2a      	ldr	r7, [pc, #168]	; (1f07c <FinishAesDrv+0x250>)
   1efd4:	e7cc      	b.n	1ef70 <FinishAesDrv+0x144>
   1efd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1efd8:	2a01      	cmp	r2, #1
   1efda:	d033      	beq.n	1f044 <FinishAesDrv+0x218>
   1efdc:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   1efe0:	2010      	movs	r0, #16
   1efe2:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1efe6:	f7fe fbbd 	bl	1d764 <CC_HalWaitInterrupt>
   1efea:	4607      	mov	r7, r0
   1efec:	2800      	cmp	r0, #0
   1efee:	d09f      	beq.n	1ef30 <FinishAesDrv+0x104>
   1eff0:	e7be      	b.n	1ef70 <FinishAesDrv+0x144>
   1eff2:	4b19      	ldr	r3, [pc, #100]	; (1f058 <FinishAesDrv+0x22c>)
   1eff4:	6822      	ldr	r2, [r4, #0]
   1eff6:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1effa:	6862      	ldr	r2, [r4, #4]
   1effc:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1f000:	68a2      	ldr	r2, [r4, #8]
   1f002:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1f006:	68e2      	ldr	r2, [r4, #12]
   1f008:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1f00c:	e783      	b.n	1ef16 <FinishAesDrv+0xea>
   1f00e:	4b12      	ldr	r3, [pc, #72]	; (1f058 <FinishAesDrv+0x22c>)
   1f010:	6822      	ldr	r2, [r4, #0]
   1f012:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1f016:	6862      	ldr	r2, [r4, #4]
   1f018:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1f01c:	68a2      	ldr	r2, [r4, #8]
   1f01e:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1f022:	68e2      	ldr	r2, [r4, #12]
   1f024:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1f028:	e775      	b.n	1ef16 <FinishAesDrv+0xea>
   1f02a:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1f02e:	6022      	str	r2, [r4, #0]
   1f030:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1f034:	6062      	str	r2, [r4, #4]
   1f036:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1f03a:	60a2      	str	r2, [r4, #8]
   1f03c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1f040:	60e3      	str	r3, [r4, #12]
   1f042:	e795      	b.n	1ef70 <FinishAesDrv+0x144>
   1f044:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   1f048:	2040      	movs	r0, #64	; 0x40
   1f04a:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   1f04e:	e7ca      	b.n	1efe6 <FinishAesDrv+0x1ba>
   1f050:	00f1000b 	.word	0x00f1000b
   1f054:	200007e0 	.word	0x200007e0
   1f058:	5002b000 	.word	0x5002b000
   1f05c:	00f10001 	.word	0x00f10001
   1f060:	00026cf0 	.word	0x00026cf0
   1f064:	00f10005 	.word	0x00f10005
   1f068:	00f10002 	.word	0x00f10002
   1f06c:	00026cd0 	.word	0x00026cd0
   1f070:	00026cb0 	.word	0x00026cb0
   1f074:	00026c98 	.word	0x00026c98
   1f078:	00f10003 	.word	0x00f10003
   1f07c:	00f10004 	.word	0x00f10004

0001f080 <kmu_validate_slot_and_size>:
   1f080:	b929      	cbnz	r1, 1f08e <kmu_validate_slot_and_size+0xe>
   1f082:	4b04      	ldr	r3, [pc, #16]	; (1f094 <kmu_validate_slot_and_size+0x14>)
   1f084:	2800      	cmp	r0, #0
   1f086:	bf14      	ite	ne
   1f088:	4618      	movne	r0, r3
   1f08a:	2000      	moveq	r0, #0
   1f08c:	4770      	bx	lr
   1f08e:	4802      	ldr	r0, [pc, #8]	; (1f098 <kmu_validate_slot_and_size+0x18>)
   1f090:	4770      	bx	lr
   1f092:	bf00      	nop
   1f094:	00f70001 	.word	0x00f70001
   1f098:	00f70003 	.word	0x00f70003

0001f09c <kmu_validate_kdr_slot_and_size>:
   1f09c:	b929      	cbnz	r1, 1f0aa <kmu_validate_kdr_slot_and_size+0xe>
   1f09e:	4b04      	ldr	r3, [pc, #16]	; (1f0b0 <kmu_validate_kdr_slot_and_size+0x14>)
   1f0a0:	2800      	cmp	r0, #0
   1f0a2:	bf14      	ite	ne
   1f0a4:	4618      	movne	r0, r3
   1f0a6:	2000      	moveq	r0, #0
   1f0a8:	4770      	bx	lr
   1f0aa:	4802      	ldr	r0, [pc, #8]	; (1f0b4 <kmu_validate_kdr_slot_and_size+0x18>)
   1f0ac:	4770      	bx	lr
   1f0ae:	bf00      	nop
   1f0b0:	00f70001 	.word	0x00f70001
   1f0b4:	00f70003 	.word	0x00f70003

0001f0b8 <kmu_use_kdr_key>:
   1f0b8:	4b03      	ldr	r3, [pc, #12]	; (1f0c8 <kmu_use_kdr_key+0x10>)
   1f0ba:	2000      	movs	r0, #0
   1f0bc:	2201      	movs	r2, #1
   1f0be:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   1f0c2:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   1f0c6:	4770      	bx	lr
   1f0c8:	5002b000 	.word	0x5002b000

0001f0cc <kmu_derive_cmac>:
   1f0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f0d0:	b0cc      	sub	sp, #304	; 0x130
   1f0d2:	2400      	movs	r4, #0
   1f0d4:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   1f0d6:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1f0da:	4682      	mov	sl, r0
   1f0dc:	4689      	mov	r9, r1
   1f0de:	4616      	mov	r6, r2
   1f0e0:	4621      	mov	r1, r4
   1f0e2:	2274      	movs	r2, #116	; 0x74
   1f0e4:	a80e      	add	r0, sp, #56	; 0x38
   1f0e6:	461f      	mov	r7, r3
   1f0e8:	f005 feb0 	bl	24e4c <memset>
   1f0ec:	2280      	movs	r2, #128	; 0x80
   1f0ee:	4621      	mov	r1, r4
   1f0f0:	a82c      	add	r0, sp, #176	; 0xb0
   1f0f2:	942b      	str	r4, [sp, #172]	; 0xac
   1f0f4:	f005 feaa 	bl	24e4c <memset>
   1f0f8:	2384      	movs	r3, #132	; 0x84
   1f0fa:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f0fe:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1f102:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1f106:	9305      	str	r3, [sp, #20]
   1f108:	d863      	bhi.n	1f1d2 <kmu_derive_cmac+0x106>
   1f10a:	f7ff fcc3 	bl	1ea94 <write_invalid_key>
   1f10e:	ab05      	add	r3, sp, #20
   1f110:	4630      	mov	r0, r6
   1f112:	ae2b      	add	r6, sp, #172	; 0xac
   1f114:	9301      	str	r3, [sp, #4]
   1f116:	9502      	str	r5, [sp, #8]
   1f118:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1f11c:	4639      	mov	r1, r7
   1f11e:	9600      	str	r6, [sp, #0]
   1f120:	f000 f862 	bl	1f1e8 <UtilCmacBuildDataForDerivation>
   1f124:	2800      	cmp	r0, #0
   1f126:	d14f      	bne.n	1f1c8 <kmu_derive_cmac+0xfc>
   1f128:	2303      	movs	r3, #3
   1f12a:	f88d 3013 	strb.w	r3, [sp, #19]
   1f12e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f132:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1f136:	2307      	movs	r3, #7
   1f138:	2200      	movs	r2, #0
   1f13a:	901c      	str	r0, [sp, #112]	; 0x70
   1f13c:	2110      	movs	r1, #16
   1f13e:	a80e      	add	r0, sp, #56	; 0x38
   1f140:	931b      	str	r3, [sp, #108]	; 0x6c
   1f142:	2401      	movs	r4, #1
   1f144:	2301      	movs	r3, #1
   1f146:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1f14a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   1f14e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   1f152:	9426      	str	r4, [sp, #152]	; 0x98
   1f154:	f10d 0920 	add.w	r9, sp, #32
   1f158:	f7fe fb82 	bl	1d860 <CC_PalMemSetZeroPlat>
   1f15c:	2210      	movs	r2, #16
   1f15e:	9200      	str	r2, [sp, #0]
   1f160:	9905      	ldr	r1, [sp, #20]
   1f162:	f8cd 9004 	str.w	r9, [sp, #4]
   1f166:	ab0a      	add	r3, sp, #40	; 0x28
   1f168:	4630      	mov	r0, r6
   1f16a:	aa06      	add	r2, sp, #24
   1f16c:	f7ff fa22 	bl	1e5b4 <SetDataBuffersInfo>
   1f170:	4607      	mov	r7, r0
   1f172:	b170      	cbz	r0, 1f192 <kmu_derive_cmac+0xc6>
   1f174:	e01d      	b.n	1f1b2 <kmu_derive_cmac+0xe6>
   1f176:	a90e      	add	r1, sp, #56	; 0x38
   1f178:	eb08 0007 	add.w	r0, r8, r7
   1f17c:	f7fe fb6c 	bl	1d858 <CC_PalMemCopyPlat>
   1f180:	2110      	movs	r1, #16
   1f182:	a80e      	add	r0, sp, #56	; 0x38
   1f184:	f7fe fb6c 	bl	1d860 <CC_PalMemSetZeroPlat>
   1f188:	3401      	adds	r4, #1
   1f18a:	1bad      	subs	r5, r5, r6
   1f18c:	4437      	add	r7, r6
   1f18e:	b2e4      	uxtb	r4, r4
   1f190:	d024      	beq.n	1f1dc <kmu_derive_cmac+0x110>
   1f192:	2d10      	cmp	r5, #16
   1f194:	464a      	mov	r2, r9
   1f196:	9b05      	ldr	r3, [sp, #20]
   1f198:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1f19c:	a906      	add	r1, sp, #24
   1f19e:	a80e      	add	r0, sp, #56	; 0x38
   1f1a0:	462e      	mov	r6, r5
   1f1a2:	bf28      	it	cs
   1f1a4:	2610      	movcs	r6, #16
   1f1a6:	f7ff fe41 	bl	1ee2c <FinishAesDrv>
   1f1aa:	4632      	mov	r2, r6
   1f1ac:	2800      	cmp	r0, #0
   1f1ae:	d0e2      	beq.n	1f176 <kmu_derive_cmac+0xaa>
   1f1b0:	4607      	mov	r7, r0
   1f1b2:	a80e      	add	r0, sp, #56	; 0x38
   1f1b4:	2274      	movs	r2, #116	; 0x74
   1f1b6:	2100      	movs	r1, #0
   1f1b8:	f7fe fb50 	bl	1d85c <CC_PalMemSetPlat>
   1f1bc:	f7ff fc6a 	bl	1ea94 <write_invalid_key>
   1f1c0:	4638      	mov	r0, r7
   1f1c2:	b04c      	add	sp, #304	; 0x130
   1f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f1c8:	4f05      	ldr	r7, [pc, #20]	; (1f1e0 <kmu_derive_cmac+0x114>)
   1f1ca:	4638      	mov	r0, r7
   1f1cc:	b04c      	add	sp, #304	; 0x130
   1f1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f1d2:	4f04      	ldr	r7, [pc, #16]	; (1f1e4 <kmu_derive_cmac+0x118>)
   1f1d4:	4638      	mov	r0, r7
   1f1d6:	b04c      	add	sp, #304	; 0x130
   1f1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f1dc:	462f      	mov	r7, r5
   1f1de:	e7e8      	b.n	1f1b2 <kmu_derive_cmac+0xe6>
   1f1e0:	00f1000e 	.word	0x00f1000e
   1f1e4:	00f1000f 	.word	0x00f1000f

0001f1e8 <UtilCmacBuildDataForDerivation>:
   1f1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f1ec:	b082      	sub	sp, #8
   1f1ee:	461e      	mov	r6, r3
   1f1f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f1f2:	2300      	movs	r3, #0
   1f1f4:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f1f8:	9301      	str	r3, [sp, #4]
   1f1fa:	d83e      	bhi.n	1f27a <UtilCmacBuildDataForDerivation+0x92>
   1f1fc:	00ed      	lsls	r5, r5, #3
   1f1fe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   1f202:	4617      	mov	r7, r2
   1f204:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   1f208:	bf34      	ite	cc
   1f20a:	2303      	movcc	r3, #3
   1f20c:	2304      	movcs	r3, #4
   1f20e:	2a3f      	cmp	r2, #63	; 0x3f
   1f210:	460c      	mov	r4, r1
   1f212:	9300      	str	r3, [sp, #0]
   1f214:	d831      	bhi.n	1f27a <UtilCmacBuildDataForDerivation+0x92>
   1f216:	b380      	cbz	r0, 1f27a <UtilCmacBuildDataForDerivation+0x92>
   1f218:	bb66      	cbnz	r6, 1f274 <UtilCmacBuildDataForDerivation+0x8c>
   1f21a:	9a08      	ldr	r2, [sp, #32]
   1f21c:	b36a      	cbz	r2, 1f27a <UtilCmacBuildDataForDerivation+0x92>
   1f21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f220:	6811      	ldr	r1, [r2, #0]
   1f222:	b351      	cbz	r1, 1f27a <UtilCmacBuildDataForDerivation+0x92>
   1f224:	19a2      	adds	r2, r4, r6
   1f226:	4413      	add	r3, r2
   1f228:	4299      	cmp	r1, r3
   1f22a:	d326      	bcc.n	1f27a <UtilCmacBuildDataForDerivation+0x92>
   1f22c:	9b08      	ldr	r3, [sp, #32]
   1f22e:	4601      	mov	r1, r0
   1f230:	4622      	mov	r2, r4
   1f232:	1c58      	adds	r0, r3, #1
   1f234:	f7fe fb10 	bl	1d858 <CC_PalMemCopyPlat>
   1f238:	9b08      	ldr	r3, [sp, #32]
   1f23a:	f104 0802 	add.w	r8, r4, #2
   1f23e:	441c      	add	r4, r3
   1f240:	2300      	movs	r3, #0
   1f242:	7063      	strb	r3, [r4, #1]
   1f244:	bb26      	cbnz	r6, 1f290 <UtilCmacBuildDataForDerivation+0xa8>
   1f246:	9b08      	ldr	r3, [sp, #32]
   1f248:	9500      	str	r5, [sp, #0]
   1f24a:	2dff      	cmp	r5, #255	; 0xff
   1f24c:	eb03 0008 	add.w	r0, r3, r8
   1f250:	d917      	bls.n	1f282 <UtilCmacBuildDataForDerivation+0x9a>
   1f252:	022b      	lsls	r3, r5, #8
   1f254:	b29b      	uxth	r3, r3
   1f256:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   1f25a:	2202      	movs	r2, #2
   1f25c:	a901      	add	r1, sp, #4
   1f25e:	9301      	str	r3, [sp, #4]
   1f260:	f7fe fafa 	bl	1d858 <CC_PalMemCopyPlat>
   1f264:	f108 0302 	add.w	r3, r8, #2
   1f268:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f26a:	2000      	movs	r0, #0
   1f26c:	6013      	str	r3, [r2, #0]
   1f26e:	b002      	add	sp, #8
   1f270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f274:	b10f      	cbz	r7, 1f27a <UtilCmacBuildDataForDerivation+0x92>
   1f276:	2e40      	cmp	r6, #64	; 0x40
   1f278:	d9cf      	bls.n	1f21a <UtilCmacBuildDataForDerivation+0x32>
   1f27a:	480a      	ldr	r0, [pc, #40]	; (1f2a4 <UtilCmacBuildDataForDerivation+0xbc>)
   1f27c:	b002      	add	sp, #8
   1f27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f282:	2201      	movs	r2, #1
   1f284:	4669      	mov	r1, sp
   1f286:	f7fe fae7 	bl	1d858 <CC_PalMemCopyPlat>
   1f28a:	f108 0301 	add.w	r3, r8, #1
   1f28e:	e7eb      	b.n	1f268 <UtilCmacBuildDataForDerivation+0x80>
   1f290:	9b08      	ldr	r3, [sp, #32]
   1f292:	4632      	mov	r2, r6
   1f294:	eb03 0008 	add.w	r0, r3, r8
   1f298:	4639      	mov	r1, r7
   1f29a:	f7fe fadd 	bl	1d858 <CC_PalMemCopyPlat>
   1f29e:	44b0      	add	r8, r6
   1f2a0:	e7d1      	b.n	1f246 <UtilCmacBuildDataForDerivation+0x5e>
   1f2a2:	bf00      	nop
   1f2a4:	80000006 	.word	0x80000006

0001f2a8 <CC_PalDataBufferAttrGet>:
   1f2a8:	2000      	movs	r0, #0
   1f2aa:	7018      	strb	r0, [r3, #0]
   1f2ac:	4770      	bx	lr
   1f2ae:	bf00      	nop

0001f2b0 <k_msleep>:
{
   1f2b0:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1f2b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1f2b6:	17c1      	asrs	r1, r0, #31
	return z_impl_k_sleep(timeout);
   1f2b8:	f7fa ff16 	bl	1a0e8 <z_impl_k_sleep>
}
   1f2bc:	bd08      	pop	{r3, pc}

0001f2be <esb_wait_idle>:
void esb_wait_idle(void) {
   1f2be:	b510      	push	{r4, lr}
	int cnt = 0;
   1f2c0:	2400      	movs	r4, #0
	while(!nrf_esb_is_idle()) {
   1f2c2:	f7f0 fea1 	bl	10008 <nrf_esb_is_idle>
   1f2c6:	b928      	cbnz	r0, 1f2d4 <esb_wait_idle+0x16>
		k_msleep(1);
   1f2c8:	2001      	movs	r0, #1
   1f2ca:	f7ff fff1 	bl	1f2b0 <k_msleep>
		cnt++;
   1f2ce:	3401      	adds	r4, #1
		if (cnt >= 10) {
   1f2d0:	2c09      	cmp	r4, #9
   1f2d2:	ddf6      	ble.n	1f2c2 <esb_wait_idle+0x4>
}
   1f2d4:	bd10      	pop	{r4, pc}

0001f2d6 <bytewise_bit_swap>:
	uint32_t inp = (*(uint32_t *)input);
   1f2d6:	6800      	ldr	r0, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1f2d8:	fa90 f0a0 	rbit	r0, r0
	return sys_cpu_to_be32((uint32_t)__RBIT(inp));
   1f2dc:	0a03      	lsrs	r3, r0, #8
   1f2de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1f2e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   1f2e6:	0202      	lsls	r2, r0, #8
   1f2e8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   1f2ec:	4313      	orrs	r3, r2
}
   1f2ee:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   1f2f2:	4770      	bx	lr

0001f2f4 <NRF_ESB_SYS_TIMER_IRQHandler>:
}
   1f2f4:	4770      	bx	lr

0001f2f6 <addr_conv>:
{
   1f2f6:	b508      	push	{r3, lr}
	return __REV(bytewise_bit_swap(addr));
   1f2f8:	f7ff ffed 	bl	1f2d6 <bytewise_bit_swap>
}
   1f2fc:	ba00      	rev	r0, r0
   1f2fe:	bd08      	pop	{r3, pc}

0001f300 <buffer_get_int16>:

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
   1f300:	680a      	ldr	r2, [r1, #0]
   1f302:	5c83      	ldrb	r3, [r0, r2]
   1f304:	021b      	lsls	r3, r3, #8
   1f306:	b21b      	sxth	r3, r3
					((uint16_t) buffer[*index + 1]);
   1f308:	4410      	add	r0, r2
   1f30a:	7840      	ldrb	r0, [r0, #1]
	*index += 2;
   1f30c:	3202      	adds	r2, #2
   1f30e:	600a      	str	r2, [r1, #0]
	return res;
}
   1f310:	4318      	orrs	r0, r3
   1f312:	4770      	bx	lr

0001f314 <buffer_get_int32>:
					((uint16_t) buffer[*index + 1]);
	*index += 2;
	return res;
}

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
   1f314:	b410      	push	{r4}
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
   1f316:	680c      	ldr	r4, [r1, #0]
   1f318:	f810 c004 	ldrb.w	ip, [r0, r4]
					((uint32_t) buffer[*index + 1]) << 16 |
   1f31c:	1903      	adds	r3, r0, r4
   1f31e:	785a      	ldrb	r2, [r3, #1]
   1f320:	0412      	lsls	r2, r2, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
   1f322:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
					((uint32_t) buffer[*index + 2]) << 8 |
   1f326:	7898      	ldrb	r0, [r3, #2]
					((uint32_t) buffer[*index + 1]) << 16 |
   1f328:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
					((uint32_t) buffer[*index + 3]);
   1f32c:	78d8      	ldrb	r0, [r3, #3]
	*index += 4;
   1f32e:	3404      	adds	r4, #4
   1f330:	600c      	str	r4, [r1, #0]
	return res;
}
   1f332:	4310      	orrs	r0, r2
   1f334:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f338:	4770      	bx	lr

0001f33a <buffer_get_float16>:
					((uint32_t) buffer[*index + 3]);
	*index += 4;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
   1f33a:	b508      	push	{r3, lr}
   1f33c:	ed2d 8b02 	vpush	{d8}
   1f340:	eeb0 8a40 	vmov.f32	s16, s0
    return (float)buffer_get_int16(buffer, index) / scale;
   1f344:	f7ff ffdc 	bl	1f300 <buffer_get_int16>
   1f348:	ee00 0a10 	vmov	s0, r0
   1f34c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
   1f350:	ee80 0a08 	vdiv.f32	s0, s0, s16
   1f354:	ecbd 8b02 	vpop	{d8}
   1f358:	bd08      	pop	{r3, pc}

0001f35a <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
   1f35a:	b508      	push	{r3, lr}
   1f35c:	ed2d 8b02 	vpush	{d8}
   1f360:	eeb0 8a40 	vmov.f32	s16, s0
    return (float)buffer_get_int32(buffer, index) / scale;
   1f364:	f7ff ffd6 	bl	1f314 <buffer_get_int32>
   1f368:	ee00 0a10 	vmov	s0, r0
   1f36c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
   1f370:	ee80 0a08 	vdiv.f32	s0, s0, s16
   1f374:	ecbd 8b02 	vpop	{d8}
   1f378:	bd08      	pop	{r3, pc}

0001f37a <i2c_delay>:

static void i2c_delay(void) {
   1f37a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1f37c:	2001      	movs	r0, #1
   1f37e:	f005 fc57 	bl	24c30 <z_impl_k_busy_wait>
	k_busy_wait(1);
}
   1f382:	bd08      	pop	{r3, pc}

0001f384 <i2c_write_byte>:
static bool i2c_write_byte(i2c_bb_state *s, bool send_start, bool send_stop, unsigned char byte) {
   1f384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f386:	4606      	mov	r6, r0
   1f388:	4617      	mov	r7, r2
   1f38a:	461c      	mov	r4, r3
	if (send_start) {
   1f38c:	b909      	cbnz	r1, 1f392 <i2c_write_byte+0xe>
static bool i2c_write_byte(i2c_bb_state *s, bool send_start, bool send_stop, unsigned char byte) {
   1f38e:	2500      	movs	r5, #0
   1f390:	e009      	b.n	1f3a6 <i2c_write_byte+0x22>
		i2c_start_cond(s);
   1f392:	f7f1 f86b 	bl	1046c <i2c_start_cond>
   1f396:	e7fa      	b.n	1f38e <i2c_write_byte+0xa>
		i2c_write_bit(s, (byte & 0x80) != 0);
   1f398:	09e1      	lsrs	r1, r4, #7
   1f39a:	4630      	mov	r0, r6
   1f39c:	f7f1 f910 	bl	105c0 <i2c_write_bit>
		byte <<= 1;
   1f3a0:	0064      	lsls	r4, r4, #1
   1f3a2:	b2e4      	uxtb	r4, r4
	for (bit = 0;bit < 8;bit++) {
   1f3a4:	3501      	adds	r5, #1
   1f3a6:	2d07      	cmp	r5, #7
   1f3a8:	d9f6      	bls.n	1f398 <i2c_write_byte+0x14>
	nack = i2c_read_bit(s);
   1f3aa:	4630      	mov	r0, r6
   1f3ac:	f7f1 f968 	bl	10680 <i2c_read_bit>
   1f3b0:	4604      	mov	r4, r0
	if (send_stop) {
   1f3b2:	b90f      	cbnz	r7, 1f3b8 <i2c_write_byte+0x34>
}
   1f3b4:	4620      	mov	r0, r4
   1f3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		i2c_stop_cond(s);
   1f3b8:	4630      	mov	r0, r6
   1f3ba:	f7f1 f8af 	bl	1051c <i2c_stop_cond>
   1f3be:	e7f9      	b.n	1f3b4 <i2c_write_byte+0x30>

0001f3c0 <i2c_read_byte>:
static unsigned char i2c_read_byte(i2c_bb_state *s, bool nack, bool send_stop) {
   1f3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3c4:	4606      	mov	r6, r0
   1f3c6:	4688      	mov	r8, r1
   1f3c8:	4617      	mov	r7, r2
	for (bit = 0;bit < 8;bit++) {
   1f3ca:	2400      	movs	r4, #0
	unsigned char byte = 0;
   1f3cc:	4625      	mov	r5, r4
	for (bit = 0;bit < 8;bit++) {
   1f3ce:	e008      	b.n	1f3e2 <i2c_read_byte+0x22>
		byte = (byte << 1) | i2c_read_bit(s);
   1f3d0:	006d      	lsls	r5, r5, #1
   1f3d2:	4630      	mov	r0, r6
   1f3d4:	f7f1 f954 	bl	10680 <i2c_read_bit>
   1f3d8:	b243      	sxtb	r3, r0
   1f3da:	432b      	orrs	r3, r5
   1f3dc:	b2dd      	uxtb	r5, r3
	for (bit = 0;bit < 8;bit++) {
   1f3de:	3401      	adds	r4, #1
   1f3e0:	b2e4      	uxtb	r4, r4
   1f3e2:	2c07      	cmp	r4, #7
   1f3e4:	d9f4      	bls.n	1f3d0 <i2c_read_byte+0x10>
	i2c_write_bit(s, nack);
   1f3e6:	4641      	mov	r1, r8
   1f3e8:	4630      	mov	r0, r6
   1f3ea:	f7f1 f8e9 	bl	105c0 <i2c_write_bit>
	if (send_stop) {
   1f3ee:	b917      	cbnz	r7, 1f3f6 <i2c_read_byte+0x36>
}
   1f3f0:	4628      	mov	r0, r5
   1f3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		i2c_stop_cond(s);
   1f3f6:	4630      	mov	r0, r6
   1f3f8:	f7f1 f890 	bl	1051c <i2c_stop_cond>
   1f3fc:	e7f8      	b.n	1f3f0 <i2c_read_byte+0x30>

0001f3fe <i2c_bb_tx_rx>:
bool i2c_bb_tx_rx(i2c_bb_state *s, uint16_t addr, uint8_t *txbuf, size_t txbytes, uint8_t *rxbuf, size_t rxbytes) {
   1f3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f402:	4605      	mov	r5, r0
   1f404:	468a      	mov	sl, r1
   1f406:	4617      	mov	r7, r2
   1f408:	461e      	mov	r6, r3
   1f40a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1f40e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
	s->has_error = 0;
   1f412:	2400      	movs	r4, #0
   1f414:	7244      	strb	r4, [r0, #9]
	i2c_write_byte(s, true, false, addr << 1);
   1f416:	004b      	lsls	r3, r1, #1
   1f418:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1f41c:	4622      	mov	r2, r4
   1f41e:	2101      	movs	r1, #1
   1f420:	f7ff ffb0 	bl	1f384 <i2c_write_byte>
	for (unsigned int i = 0;i < txbytes;i++) {
   1f424:	e006      	b.n	1f434 <i2c_bb_tx_rx+0x36>
		i2c_write_byte(s, false, false, txbuf[i]);
   1f426:	5d3b      	ldrb	r3, [r7, r4]
   1f428:	2200      	movs	r2, #0
   1f42a:	4611      	mov	r1, r2
   1f42c:	4628      	mov	r0, r5
   1f42e:	f7ff ffa9 	bl	1f384 <i2c_write_byte>
	for (unsigned int i = 0;i < txbytes;i++) {
   1f432:	3401      	adds	r4, #1
   1f434:	42b4      	cmp	r4, r6
   1f436:	d3f6      	bcc.n	1f426 <i2c_bb_tx_rx+0x28>
	if (rxbytes > 0) {
   1f438:	f1b8 0f00 	cmp.w	r8, #0
   1f43c:	d107      	bne.n	1f44e <i2c_bb_tx_rx+0x50>
	i2c_stop_cond(s);
   1f43e:	4628      	mov	r0, r5
   1f440:	f7f1 f86c 	bl	1051c <i2c_stop_cond>
	return !s->has_error;
   1f444:	7a68      	ldrb	r0, [r5, #9]
}
   1f446:	f080 0001 	eor.w	r0, r0, #1
   1f44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i2c_write_byte(s, true, false, addr << 1 | 1);
   1f44e:	ea4f 034a 	mov.w	r3, sl, lsl #1
   1f452:	f043 0301 	orr.w	r3, r3, #1
   1f456:	b2db      	uxtb	r3, r3
   1f458:	2200      	movs	r2, #0
   1f45a:	2101      	movs	r1, #1
   1f45c:	4628      	mov	r0, r5
   1f45e:	f7ff ff91 	bl	1f384 <i2c_write_byte>
		for (unsigned int i = 0;i < rxbytes;i++) {
   1f462:	2400      	movs	r4, #0
   1f464:	e00c      	b.n	1f480 <i2c_bb_tx_rx+0x82>
			rxbuf[i] = i2c_read_byte(s, i == (rxbytes - 1), false);
   1f466:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   1f46a:	2200      	movs	r2, #0
   1f46c:	42a1      	cmp	r1, r4
   1f46e:	bf14      	ite	ne
   1f470:	2100      	movne	r1, #0
   1f472:	2101      	moveq	r1, #1
   1f474:	4628      	mov	r0, r5
   1f476:	f7ff ffa3 	bl	1f3c0 <i2c_read_byte>
   1f47a:	f809 0004 	strb.w	r0, [r9, r4]
		for (unsigned int i = 0;i < rxbytes;i++) {
   1f47e:	3401      	adds	r4, #1
   1f480:	4544      	cmp	r4, r8
   1f482:	d3f0      	bcc.n	1f466 <i2c_bb_tx_rx+0x68>
   1f484:	e7db      	b.n	1f43e <i2c_bb_tx_rx+0x40>

0001f486 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
   1f486:	b150      	cbz	r0, 1f49e <null_ptr_check+0x18>
   1f488:	69c2      	ldr	r2, [r0, #28]
   1f48a:	b15a      	cbz	r2, 1f4a4 <null_ptr_check+0x1e>
   1f48c:	6a02      	ldr	r2, [r0, #32]
   1f48e:	b162      	cbz	r2, 1f4aa <null_ptr_check+0x24>
   1f490:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1f492:	b10b      	cbz	r3, 1f498 <null_ptr_check+0x12>
        rslt = BMI160_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
   1f494:	2000      	movs	r0, #0
    }

    return rslt;
}
   1f496:	4770      	bx	lr
        rslt = BMI160_E_NULL_PTR;
   1f498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f49c:	4770      	bx	lr
   1f49e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f4a2:	4770      	bx	lr
   1f4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f4a8:	4770      	bx	lr
   1f4aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f4ae:	4770      	bx	lr

0001f4b0 <default_param_settg>:
 */
static void default_param_settg(struct bmi160_dev *dev)
{
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
   1f4b0:	2202      	movs	r2, #2
   1f4b2:	71c2      	strb	r2, [r0, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
   1f4b4:	2308      	movs	r3, #8
   1f4b6:	7143      	strb	r3, [r0, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
   1f4b8:	2110      	movs	r1, #16
   1f4ba:	7101      	strb	r1, [r0, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
   1f4bc:	2103      	movs	r1, #3
   1f4be:	7181      	strb	r1, [r0, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
   1f4c0:	73c2      	strb	r2, [r0, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
   1f4c2:	7343      	strb	r3, [r0, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
   1f4c4:	2314      	movs	r3, #20
   1f4c6:	7303      	strb	r3, [r0, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
   1f4c8:	2300      	movs	r3, #0
   1f4ca:	7383      	strb	r3, [r0, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
   1f4cc:	6843      	ldr	r3, [r0, #4]
   1f4ce:	6083      	str	r3, [r0, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
   1f4d0:	68c3      	ldr	r3, [r0, #12]
   1f4d2:	6103      	str	r3, [r0, #16]
}
   1f4d4:	4770      	bx	lr

0001f4d6 <process_accel_odr>:
{
    int8_t rslt = 0;
    uint8_t temp = 0;
    uint8_t odr = 0;

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_MAX)
   1f4d6:	794b      	ldrb	r3, [r1, #5]
   1f4d8:	2b0f      	cmp	r3, #15
   1f4da:	d80b      	bhi.n	1f4f4 <process_accel_odr+0x1e>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
   1f4dc:	7a4a      	ldrb	r2, [r1, #9]
   1f4de:	4293      	cmp	r3, r2
   1f4e0:	d00b      	beq.n	1f4fa <process_accel_odr+0x24>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
   1f4e2:	7802      	ldrb	r2, [r0, #0]
   1f4e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
   1f4e8:	f003 030f 	and.w	r3, r3, #15
   1f4ec:	4313      	orrs	r3, r2
   1f4ee:	7003      	strb	r3, [r0, #0]
    int8_t rslt = 0;
   1f4f0:	2000      	movs	r0, #0
   1f4f2:	4770      	bx	lr
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
   1f4f4:	f06f 0003 	mvn.w	r0, #3
   1f4f8:	4770      	bx	lr
    int8_t rslt = 0;
   1f4fa:	2000      	movs	r0, #0
    }

    return rslt;
}
   1f4fc:	4770      	bx	lr

0001f4fe <process_accel_bw>:
{
    int8_t rslt = 0;
    uint8_t temp = 0;
    uint8_t bw = 0;

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_MAX)
   1f4fe:	79cb      	ldrb	r3, [r1, #7]
   1f500:	2b02      	cmp	r3, #2
   1f502:	d808      	bhi.n	1f516 <process_accel_bw+0x18>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
   1f504:	7aca      	ldrb	r2, [r1, #11]
   1f506:	4293      	cmp	r3, r2
   1f508:	d008      	beq.n	1f51c <process_accel_bw+0x1e>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
            temp = *data & ~BMI160_ACCEL_BW_MASK;
   1f50a:	7803      	ldrb	r3, [r0, #0]
   1f50c:	f003 038f 	and.w	r3, r3, #143	; 0x8f

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
   1f510:	7003      	strb	r3, [r0, #0]
    int8_t rslt = 0;
   1f512:	2000      	movs	r0, #0
   1f514:	4770      	bx	lr
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
   1f516:	f06f 0003 	mvn.w	r0, #3
   1f51a:	4770      	bx	lr
    int8_t rslt = 0;
   1f51c:	2000      	movs	r0, #0
    }

    return rslt;
}
   1f51e:	4770      	bx	lr

0001f520 <process_accel_range>:
{
    int8_t rslt = 0;
    uint8_t temp = 0;
    uint8_t range = 0;

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_MAX)
   1f520:	798b      	ldrb	r3, [r1, #6]
   1f522:	2b0c      	cmp	r3, #12
   1f524:	d80b      	bhi.n	1f53e <process_accel_range+0x1e>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
   1f526:	7a8a      	ldrb	r2, [r1, #10]
   1f528:	4293      	cmp	r3, r2
   1f52a:	d00b      	beq.n	1f544 <process_accel_range+0x24>
        {
            range = (uint8_t)dev->accel_cfg.range;
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
   1f52c:	7802      	ldrb	r2, [r0, #0]
   1f52e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
   1f532:	f003 030f 	and.w	r3, r3, #15
   1f536:	4313      	orrs	r3, r2
   1f538:	7003      	strb	r3, [r0, #0]
    int8_t rslt = 0;
   1f53a:	2000      	movs	r0, #0
   1f53c:	4770      	bx	lr
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
   1f53e:	f06f 0003 	mvn.w	r0, #3
   1f542:	4770      	bx	lr
    int8_t rslt = 0;
   1f544:	2000      	movs	r0, #0
    }

    return rslt;
}
   1f546:	4770      	bx	lr

0001f548 <process_gyro_odr>:
{
    int8_t rslt = 0;
    uint8_t temp = 0;
    uint8_t odr = 0;

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_MAX)
   1f548:	7b4b      	ldrb	r3, [r1, #13]
   1f54a:	2b0d      	cmp	r3, #13
   1f54c:	d80b      	bhi.n	1f566 <process_gyro_odr+0x1e>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
   1f54e:	7c4a      	ldrb	r2, [r1, #17]
   1f550:	4293      	cmp	r3, r2
   1f552:	d00b      	beq.n	1f56c <process_gyro_odr+0x24>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
   1f554:	7802      	ldrb	r2, [r0, #0]
   1f556:	f002 02f0 	and.w	r2, r2, #240	; 0xf0

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
   1f55a:	f003 030f 	and.w	r3, r3, #15
   1f55e:	4313      	orrs	r3, r2
   1f560:	7003      	strb	r3, [r0, #0]
    int8_t rslt = 0;
   1f562:	2000      	movs	r0, #0
   1f564:	4770      	bx	lr
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
   1f566:	f06f 0003 	mvn.w	r0, #3
   1f56a:	4770      	bx	lr
    int8_t rslt = 0;
   1f56c:	2000      	movs	r0, #0
    }

    return rslt;
}
   1f56e:	4770      	bx	lr

0001f570 <process_gyro_bw>:
{
    int8_t rslt = 0;
    uint8_t temp = 0;
    uint8_t bw = 0;

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_MAX)
   1f570:	7bcb      	ldrb	r3, [r1, #15]
   1f572:	2b02      	cmp	r3, #2
   1f574:	d809      	bhi.n	1f58a <process_gyro_bw+0x1a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
        temp = *data & ~BMI160_GYRO_BW_MASK;
   1f576:	7802      	ldrb	r2, [r0, #0]
   1f578:	f002 02cf 	and.w	r2, r2, #207	; 0xcf

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
   1f57c:	011b      	lsls	r3, r3, #4
   1f57e:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1f582:	4313      	orrs	r3, r2
   1f584:	7003      	strb	r3, [r0, #0]
    int8_t rslt = 0;
   1f586:	2000      	movs	r0, #0
   1f588:	4770      	bx	lr
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
   1f58a:	f06f 0003 	mvn.w	r0, #3
    }

    return rslt;
}
   1f58e:	4770      	bx	lr

0001f590 <process_gyro_range>:
{
    int8_t rslt = 0;
    uint8_t temp = 0;
    uint8_t range = 0;

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_MAX)
   1f590:	7b8b      	ldrb	r3, [r1, #14]
   1f592:	2b04      	cmp	r3, #4
   1f594:	d80b      	bhi.n	1f5ae <process_gyro_range+0x1e>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
   1f596:	7c8a      	ldrb	r2, [r1, #18]
   1f598:	4293      	cmp	r3, r2
   1f59a:	d00b      	beq.n	1f5b4 <process_gyro_range+0x24>
        {
            range = (uint8_t)dev->gyro_cfg.range;
            temp = *data & ~BMI160_GYRO_RANGE_MSK;
   1f59c:	7802      	ldrb	r2, [r0, #0]
   1f59e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MSK);
   1f5a2:	f003 0307 	and.w	r3, r3, #7
   1f5a6:	4313      	orrs	r3, r2
   1f5a8:	7003      	strb	r3, [r0, #0]
    int8_t rslt = 0;
   1f5aa:	2000      	movs	r0, #0
   1f5ac:	4770      	bx	lr
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
   1f5ae:	f06f 0003 	mvn.w	r0, #3
   1f5b2:	4770      	bx	lr
    int8_t rslt = 0;
   1f5b4:	2000      	movs	r0, #0
    }

    return rslt;
}
   1f5b6:	4770      	bx	lr

0001f5b8 <bmi160_get_regs>:
    if ((dev == NULL) || (dev->read == NULL))
   1f5b8:	b18b      	cbz	r3, 1f5de <bmi160_get_regs+0x26>
{
   1f5ba:	b510      	push	{r4, lr}
   1f5bc:	469c      	mov	ip, r3
    if ((dev == NULL) || (dev->read == NULL))
   1f5be:	69dc      	ldr	r4, [r3, #28]
   1f5c0:	b184      	cbz	r4, 1f5e4 <bmi160_get_regs+0x2c>
        if (dev->interface == BMI160_SPI_INTF)
   1f5c2:	789b      	ldrb	r3, [r3, #2]
   1f5c4:	2b01      	cmp	r3, #1
   1f5c6:	d007      	beq.n	1f5d8 <bmi160_get_regs+0x20>
        rslt = dev->read(dev->id, reg_addr, data, len);
   1f5c8:	4613      	mov	r3, r2
   1f5ca:	460a      	mov	r2, r1
   1f5cc:	4601      	mov	r1, r0
   1f5ce:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1f5d2:	47a0      	blx	r4
        if (rslt != BMI160_OK)
   1f5d4:	b948      	cbnz	r0, 1f5ea <bmi160_get_regs+0x32>
}
   1f5d6:	bd10      	pop	{r4, pc}
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
   1f5d8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1f5dc:	e7f4      	b.n	1f5c8 <bmi160_get_regs+0x10>
        rslt = BMI160_E_NULL_PTR;
   1f5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f5e2:	4770      	bx	lr
        rslt = BMI160_E_NULL_PTR;
   1f5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f5e8:	e7f5      	b.n	1f5d6 <bmi160_get_regs+0x1e>
            rslt = BMI160_E_COM_FAIL;
   1f5ea:	f06f 0001 	mvn.w	r0, #1
   1f5ee:	e7f2      	b.n	1f5d6 <bmi160_get_regs+0x1e>

0001f5f0 <check_accel_config>:
{
   1f5f0:	b538      	push	{r3, r4, r5, lr}
   1f5f2:	4604      	mov	r4, r0
   1f5f4:	460d      	mov	r5, r1
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
   1f5f6:	460b      	mov	r3, r1
   1f5f8:	2202      	movs	r2, #2
   1f5fa:	4601      	mov	r1, r0
   1f5fc:	2040      	movs	r0, #64	; 0x40
   1f5fe:	f7ff ffdb 	bl	1f5b8 <bmi160_get_regs>
    if (rslt == BMI160_OK)
   1f602:	b100      	cbz	r0, 1f606 <check_accel_config+0x16>
}
   1f604:	bd38      	pop	{r3, r4, r5, pc}
        rslt = process_accel_odr(&data[0], dev);
   1f606:	4629      	mov	r1, r5
   1f608:	4620      	mov	r0, r4
   1f60a:	f7ff ff64 	bl	1f4d6 <process_accel_odr>
        if (rslt == BMI160_OK)
   1f60e:	2800      	cmp	r0, #0
   1f610:	d1f8      	bne.n	1f604 <check_accel_config+0x14>
            rslt = process_accel_bw(&data[0], dev);
   1f612:	4629      	mov	r1, r5
   1f614:	4620      	mov	r0, r4
   1f616:	f7ff ff72 	bl	1f4fe <process_accel_bw>
            if (rslt == BMI160_OK)
   1f61a:	2800      	cmp	r0, #0
   1f61c:	d1f2      	bne.n	1f604 <check_accel_config+0x14>
                rslt = process_accel_range(&data[1], dev);
   1f61e:	4629      	mov	r1, r5
   1f620:	1c60      	adds	r0, r4, #1
   1f622:	f7ff ff7d 	bl	1f520 <process_accel_range>
   1f626:	e7ed      	b.n	1f604 <check_accel_config+0x14>

0001f628 <check_gyro_config>:
{
   1f628:	b538      	push	{r3, r4, r5, lr}
   1f62a:	4604      	mov	r4, r0
   1f62c:	460d      	mov	r5, r1
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
   1f62e:	460b      	mov	r3, r1
   1f630:	2202      	movs	r2, #2
   1f632:	4601      	mov	r1, r0
   1f634:	2042      	movs	r0, #66	; 0x42
   1f636:	f7ff ffbf 	bl	1f5b8 <bmi160_get_regs>
    if (rslt == BMI160_OK)
   1f63a:	b100      	cbz	r0, 1f63e <check_gyro_config+0x16>
}
   1f63c:	bd38      	pop	{r3, r4, r5, pc}
        rslt = process_gyro_odr(&data[0], dev);
   1f63e:	4629      	mov	r1, r5
   1f640:	4620      	mov	r0, r4
   1f642:	f7ff ff81 	bl	1f548 <process_gyro_odr>
        if (rslt == BMI160_OK)
   1f646:	2800      	cmp	r0, #0
   1f648:	d1f8      	bne.n	1f63c <check_gyro_config+0x14>
            rslt = process_gyro_bw(&data[0], dev);
   1f64a:	4629      	mov	r1, r5
   1f64c:	4620      	mov	r0, r4
   1f64e:	f7ff ff8f 	bl	1f570 <process_gyro_bw>
            if (rslt == BMI160_OK)
   1f652:	2800      	cmp	r0, #0
   1f654:	d1f2      	bne.n	1f63c <check_gyro_config+0x14>
                rslt = process_gyro_range(&data[1], dev);
   1f656:	4629      	mov	r1, r5
   1f658:	1c60      	adds	r0, r4, #1
   1f65a:	f7ff ff99 	bl	1f590 <process_gyro_range>
   1f65e:	e7ed      	b.n	1f63c <check_gyro_config+0x14>

0001f660 <check_invalid_settg>:
{
   1f660:	b500      	push	{lr}
   1f662:	b083      	sub	sp, #12
   1f664:	4603      	mov	r3, r0
    uint8_t data = 0;
   1f666:	2200      	movs	r2, #0
   1f668:	f88d 2007 	strb.w	r2, [sp, #7]
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
   1f66c:	2201      	movs	r2, #1
   1f66e:	f10d 0107 	add.w	r1, sp, #7
   1f672:	2002      	movs	r0, #2
   1f674:	f7ff ffa0 	bl	1f5b8 <bmi160_get_regs>
    data = data >> 1;
   1f678:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f67c:	085b      	lsrs	r3, r3, #1
   1f67e:	f88d 3007 	strb.w	r3, [sp, #7]
    data = data & BMI160_ERR_REG_MASK;
   1f682:	f003 030f 	and.w	r3, r3, #15
   1f686:	f88d 3007 	strb.w	r3, [sp, #7]
    if (data == 1)
   1f68a:	2b01      	cmp	r3, #1
   1f68c:	d008      	beq.n	1f6a0 <check_invalid_settg+0x40>
    else if (data == 2)
   1f68e:	2b02      	cmp	r3, #2
   1f690:	d009      	beq.n	1f6a6 <check_invalid_settg+0x46>
    else if (data == 3)
   1f692:	2b03      	cmp	r3, #3
   1f694:	d00a      	beq.n	1f6ac <check_invalid_settg+0x4c>
    else if (data == 7)
   1f696:	2b07      	cmp	r3, #7
   1f698:	d00b      	beq.n	1f6b2 <check_invalid_settg+0x52>
}
   1f69a:	b003      	add	sp, #12
   1f69c:	f85d fb04 	ldr.w	pc, [sp], #4
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
   1f6a0:	f06f 0005 	mvn.w	r0, #5
   1f6a4:	e7f9      	b.n	1f69a <check_invalid_settg+0x3a>
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
   1f6a6:	f06f 0006 	mvn.w	r0, #6
   1f6aa:	e7f6      	b.n	1f69a <check_invalid_settg+0x3a>
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
   1f6ac:	f06f 0007 	mvn.w	r0, #7
   1f6b0:	e7f3      	b.n	1f69a <check_invalid_settg+0x3a>
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
   1f6b2:	f06f 0008 	mvn.w	r0, #8
   1f6b6:	e7f0      	b.n	1f69a <check_invalid_settg+0x3a>

0001f6b8 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
   1f6b8:	b530      	push	{r4, r5, lr}
   1f6ba:	b085      	sub	sp, #20
   1f6bc:	4605      	mov	r5, r0
   1f6be:	460c      	mov	r4, r1
   1f6c0:	4613      	mov	r3, r2
    int8_t rslt;
    uint8_t idx = 0;
    uint8_t data_array[9] = { 0 };
   1f6c2:	2100      	movs	r1, #0
   1f6c4:	9101      	str	r1, [sp, #4]
   1f6c6:	9102      	str	r1, [sp, #8]
   1f6c8:	f88d 100c 	strb.w	r1, [sp, #12]
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
   1f6cc:	1d82      	adds	r2, r0, #6
   1f6ce:	a901      	add	r1, sp, #4
   1f6d0:	2012      	movs	r0, #18
   1f6d2:	f7ff ff71 	bl	1f5b8 <bmi160_get_regs>
    if (rslt == BMI160_OK)
   1f6d6:	bb58      	cbnz	r0, 1f730 <get_accel_data+0x78>
   1f6d8:	4602      	mov	r2, r0
    {
        /* Accel Data */
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f6da:	f89d 3005 	ldrb.w	r3, [sp, #5]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f6de:	021b      	lsls	r3, r3, #8
   1f6e0:	b21b      	sxth	r3, r3
   1f6e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1f6e6:	430b      	orrs	r3, r1
        accel->x = msblsb; /* Data in X axis */
   1f6e8:	8023      	strh	r3, [r4, #0]
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f6ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f6ee:	021b      	lsls	r3, r3, #8
   1f6f0:	b21b      	sxth	r3, r3
   1f6f2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1f6f6:	430b      	orrs	r3, r1
        accel->y = msblsb; /* Data in Y axis */
   1f6f8:	8063      	strh	r3, [r4, #2]
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f6fa:	f89d 3009 	ldrb.w	r3, [sp, #9]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f6fe:	021b      	lsls	r3, r3, #8
   1f700:	b21b      	sxth	r3, r3
   1f702:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1f706:	430b      	orrs	r3, r1
        accel->z = msblsb; /* Data in Z axis */
   1f708:	80a3      	strh	r3, [r4, #4]
        if (len == 3)
   1f70a:	2d03      	cmp	r5, #3
   1f70c:	d004      	beq.n	1f718 <get_accel_data+0x60>
            time_2 = (uint32_t)(data_array[idx++] << 16);
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
        }
        else
        {
            accel->sensortime = 0;
   1f70e:	2300      	movs	r3, #0
   1f710:	60a3      	str	r3, [r4, #8]
    {
        rslt = BMI160_E_COM_FAIL;
    }

    return rslt;
}
   1f712:	4610      	mov	r0, r2
   1f714:	b005      	add	sp, #20
   1f716:	bd30      	pop	{r4, r5, pc}
            time_0 = data_array[idx++];
   1f718:	f89d 100a 	ldrb.w	r1, [sp, #10]
            time_1 = (uint16_t)(data_array[idx++] << 8);
   1f71c:	f89d 000b 	ldrb.w	r0, [sp, #11]
            time_2 = (uint32_t)(data_array[idx++] << 16);
   1f720:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1f724:	041b      	lsls	r3, r3, #16
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
   1f726:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1f72a:	430b      	orrs	r3, r1
   1f72c:	60a3      	str	r3, [r4, #8]
   1f72e:	e7f0      	b.n	1f712 <get_accel_data+0x5a>
        rslt = BMI160_E_COM_FAIL;
   1f730:	f06f 0201 	mvn.w	r2, #1
   1f734:	e7ed      	b.n	1f712 <get_accel_data+0x5a>

0001f736 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
   1f736:	b510      	push	{r4, lr}
   1f738:	b084      	sub	sp, #16
   1f73a:	460c      	mov	r4, r1
   1f73c:	4613      	mov	r3, r2
    int8_t rslt;
    uint8_t idx = 0;
    uint8_t data_array[15] = { 0 };
   1f73e:	2100      	movs	r1, #0
   1f740:	9100      	str	r1, [sp, #0]
   1f742:	9101      	str	r1, [sp, #4]
   1f744:	9102      	str	r1, [sp, #8]
   1f746:	f8cd 100b 	str.w	r1, [sp, #11]
    uint32_t time_2 = 0;
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
   1f74a:	bb20      	cbnz	r0, 1f796 <get_gyro_data+0x60>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
   1f74c:	2206      	movs	r2, #6
   1f74e:	4669      	mov	r1, sp
   1f750:	200c      	movs	r0, #12
   1f752:	f7ff ff31 	bl	1f5b8 <bmi160_get_regs>
        if (rslt == BMI160_OK)
   1f756:	4602      	mov	r2, r0
   1f758:	2800      	cmp	r0, #0
   1f75a:	d148      	bne.n	1f7ee <get_gyro_data+0xb8>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
            msb = data_array[idx++];
   1f75c:	f89d 3001 	ldrb.w	r3, [sp, #1]
            msblsb = (int16_t)((msb << 8) | lsb);
   1f760:	021b      	lsls	r3, r3, #8
   1f762:	b21b      	sxth	r3, r3
   1f764:	f89d 1000 	ldrb.w	r1, [sp]
   1f768:	430b      	orrs	r3, r1
            gyro->x = msblsb; /* Data in X axis */
   1f76a:	8023      	strh	r3, [r4, #0]
            lsb = data_array[idx++];
            msb = data_array[idx++];
   1f76c:	f89d 3003 	ldrb.w	r3, [sp, #3]
            msblsb = (int16_t)((msb << 8) | lsb);
   1f770:	021b      	lsls	r3, r3, #8
   1f772:	b21b      	sxth	r3, r3
   1f774:	f89d 1002 	ldrb.w	r1, [sp, #2]
   1f778:	430b      	orrs	r3, r1
            gyro->y = msblsb; /* Data in Y axis */
   1f77a:	8063      	strh	r3, [r4, #2]
            lsb = data_array[idx++];
            msb = data_array[idx++];
   1f77c:	f89d 3005 	ldrb.w	r3, [sp, #5]
            msblsb = (int16_t)((msb << 8) | lsb);
   1f780:	021b      	lsls	r3, r3, #8
   1f782:	b21b      	sxth	r3, r3
   1f784:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1f788:	430b      	orrs	r3, r1
            gyro->z = msblsb; /* Data in Z axis */
   1f78a:	80a3      	strh	r3, [r4, #4]
            gyro->sensortime = 0;
   1f78c:	2300      	movs	r3, #0
   1f78e:	60a3      	str	r3, [r4, #8]
            rslt = BMI160_E_COM_FAIL;
        }
    }

    return rslt;
}
   1f790:	4610      	mov	r0, r2
   1f792:	b004      	add	sp, #16
   1f794:	bd10      	pop	{r4, pc}
   1f796:	4602      	mov	r2, r0
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
   1f798:	320c      	adds	r2, #12
   1f79a:	4669      	mov	r1, sp
   1f79c:	200c      	movs	r0, #12
   1f79e:	f7ff ff0b 	bl	1f5b8 <bmi160_get_regs>
        if (rslt == BMI160_OK)
   1f7a2:	4602      	mov	r2, r0
   1f7a4:	bb30      	cbnz	r0, 1f7f4 <get_gyro_data+0xbe>
            msb = data_array[idx++];
   1f7a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
            msblsb = (int16_t)((msb << 8) | lsb);
   1f7aa:	021b      	lsls	r3, r3, #8
   1f7ac:	b21b      	sxth	r3, r3
   1f7ae:	f89d 1000 	ldrb.w	r1, [sp]
   1f7b2:	430b      	orrs	r3, r1
            gyro->x = msblsb; /* gyro X axis data */
   1f7b4:	8023      	strh	r3, [r4, #0]
            msb = data_array[idx++];
   1f7b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
            msblsb = (int16_t)((msb << 8) | lsb);
   1f7ba:	021b      	lsls	r3, r3, #8
   1f7bc:	b21b      	sxth	r3, r3
   1f7be:	f89d 1002 	ldrb.w	r1, [sp, #2]
   1f7c2:	430b      	orrs	r3, r1
            gyro->y = msblsb; /* gyro Y axis data */
   1f7c4:	8063      	strh	r3, [r4, #2]
            msb = data_array[idx++];
   1f7c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
            msblsb = (int16_t)((msb << 8) | lsb);
   1f7ca:	021b      	lsls	r3, r3, #8
   1f7cc:	b21b      	sxth	r3, r3
   1f7ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1f7d2:	430b      	orrs	r3, r1
            gyro->z = msblsb; /* gyro Z axis data */
   1f7d4:	80a3      	strh	r3, [r4, #4]
            time_0 = data_array[idx++];
   1f7d6:	f89d 100c 	ldrb.w	r1, [sp, #12]
            time_1 = (uint16_t)(data_array[idx++] << 8);
   1f7da:	f89d 000d 	ldrb.w	r0, [sp, #13]
            time_2 = (uint32_t)(data_array[idx++] << 16);
   1f7de:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1f7e2:	041b      	lsls	r3, r3, #16
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
   1f7e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1f7e8:	430b      	orrs	r3, r1
   1f7ea:	60a3      	str	r3, [r4, #8]
   1f7ec:	e7d0      	b.n	1f790 <get_gyro_data+0x5a>
            rslt = BMI160_E_COM_FAIL;
   1f7ee:	f06f 0201 	mvn.w	r2, #1
   1f7f2:	e7cd      	b.n	1f790 <get_gyro_data+0x5a>
            rslt = BMI160_E_COM_FAIL;
   1f7f4:	f06f 0201 	mvn.w	r2, #1
   1f7f8:	e7ca      	b.n	1f790 <get_gyro_data+0x5a>

0001f7fa <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
   1f7fa:	b570      	push	{r4, r5, r6, lr}
   1f7fc:	b084      	sub	sp, #16
   1f7fe:	4606      	mov	r6, r0
   1f800:	460d      	mov	r5, r1
   1f802:	4614      	mov	r4, r2
    int8_t rslt;
    uint8_t idx = 0;
    uint8_t data_array[15] = { 0 };
   1f804:	2200      	movs	r2, #0
   1f806:	9200      	str	r2, [sp, #0]
   1f808:	9201      	str	r2, [sp, #4]
   1f80a:	9202      	str	r2, [sp, #8]
   1f80c:	f8cd 200b 	str.w	r2, [sp, #11]
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
   1f810:	f100 020c 	add.w	r2, r0, #12
   1f814:	4669      	mov	r1, sp
   1f816:	200c      	movs	r0, #12
   1f818:	f7ff fece 	bl	1f5b8 <bmi160_get_regs>
    if (rslt == BMI160_OK)
   1f81c:	2800      	cmp	r0, #0
   1f81e:	d145      	bne.n	1f8ac <get_accel_gyro_data+0xb2>
   1f820:	4602      	mov	r2, r0
    {
        /* Gyro Data */
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f822:	f89d 3001 	ldrb.w	r3, [sp, #1]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f826:	021b      	lsls	r3, r3, #8
   1f828:	b21b      	sxth	r3, r3
   1f82a:	f89d 1000 	ldrb.w	r1, [sp]
   1f82e:	430b      	orrs	r3, r1
        gyro->x = msblsb; /* gyro X axis data */
   1f830:	8023      	strh	r3, [r4, #0]
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f832:	f89d 3003 	ldrb.w	r3, [sp, #3]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f836:	021b      	lsls	r3, r3, #8
   1f838:	b21b      	sxth	r3, r3
   1f83a:	f89d 1002 	ldrb.w	r1, [sp, #2]
   1f83e:	430b      	orrs	r3, r1
        gyro->y = msblsb; /* gyro Y axis data */
   1f840:	8063      	strh	r3, [r4, #2]
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f842:	f89d 3005 	ldrb.w	r3, [sp, #5]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f846:	021b      	lsls	r3, r3, #8
   1f848:	b21b      	sxth	r3, r3
   1f84a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1f84e:	430b      	orrs	r3, r1
        gyro->z = msblsb; /* gyro Z axis data */
   1f850:	80a3      	strh	r3, [r4, #4]
        /* Accel Data */
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f852:	f89d 3007 	ldrb.w	r3, [sp, #7]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f856:	021b      	lsls	r3, r3, #8
   1f858:	b21b      	sxth	r3, r3
   1f85a:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1f85e:	430b      	orrs	r3, r1
        accel->x = (int16_t)msblsb; /* accel X axis data */
   1f860:	802b      	strh	r3, [r5, #0]
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f862:	f89d 3009 	ldrb.w	r3, [sp, #9]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f866:	021b      	lsls	r3, r3, #8
   1f868:	b21b      	sxth	r3, r3
   1f86a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1f86e:	430b      	orrs	r3, r1
        accel->y = (int16_t)msblsb; /* accel Y axis data */
   1f870:	806b      	strh	r3, [r5, #2]
        lsb = data_array[idx++];
        msb = data_array[idx++];
   1f872:	f89d 300b 	ldrb.w	r3, [sp, #11]
        msblsb = (int16_t)((msb << 8) | lsb);
   1f876:	021b      	lsls	r3, r3, #8
   1f878:	b21b      	sxth	r3, r3
   1f87a:	f89d 100a 	ldrb.w	r1, [sp, #10]
   1f87e:	430b      	orrs	r3, r1
        accel->z = (int16_t)msblsb; /* accel Z axis data */
   1f880:	80ab      	strh	r3, [r5, #4]
        if (len == 3)
   1f882:	2e03      	cmp	r6, #3
   1f884:	d005      	beq.n	1f892 <get_accel_gyro_data+0x98>
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
        }
        else
        {
            accel->sensortime = 0;
   1f886:	2300      	movs	r3, #0
   1f888:	60ab      	str	r3, [r5, #8]
            gyro->sensortime = 0;
   1f88a:	60a3      	str	r3, [r4, #8]
    {
        rslt = BMI160_E_COM_FAIL;
    }

    return rslt;
}
   1f88c:	4610      	mov	r0, r2
   1f88e:	b004      	add	sp, #16
   1f890:	bd70      	pop	{r4, r5, r6, pc}
            time_0 = data_array[idx++];
   1f892:	f89d 100c 	ldrb.w	r1, [sp, #12]
            time_1 = (uint16_t)(data_array[idx++] << 8);
   1f896:	f89d 000d 	ldrb.w	r0, [sp, #13]
            time_2 = (uint32_t)(data_array[idx++] << 16);
   1f89a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1f89e:	041b      	lsls	r3, r3, #16
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
   1f8a0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1f8a4:	430b      	orrs	r3, r1
   1f8a6:	60ab      	str	r3, [r5, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
   1f8a8:	60a3      	str	r3, [r4, #8]
   1f8aa:	e7ef      	b.n	1f88c <get_accel_gyro_data+0x92>
        rslt = BMI160_E_COM_FAIL;
   1f8ac:	f06f 0201 	mvn.w	r2, #1
   1f8b0:	e7ec      	b.n	1f88c <get_accel_gyro_data+0x92>

0001f8b2 <bmi160_set_regs>:
{
   1f8b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((dev == NULL) || (dev->write == NULL))
   1f8b6:	2b00      	cmp	r3, #0
   1f8b8:	d033      	beq.n	1f922 <bmi160_set_regs+0x70>
   1f8ba:	4606      	mov	r6, r0
   1f8bc:	4689      	mov	r9, r1
   1f8be:	4690      	mov	r8, r2
   1f8c0:	461f      	mov	r7, r3
   1f8c2:	6a1c      	ldr	r4, [r3, #32]
   1f8c4:	b384      	cbz	r4, 1f928 <bmi160_set_regs+0x76>
        if (dev->interface == BMI160_SPI_INTF)
   1f8c6:	789b      	ldrb	r3, [r3, #2]
   1f8c8:	2b01      	cmp	r3, #1
   1f8ca:	d008      	beq.n	1f8de <bmi160_set_regs+0x2c>
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
   1f8cc:	7a3b      	ldrb	r3, [r7, #8]
   1f8ce:	2b11      	cmp	r3, #17
   1f8d0:	d008      	beq.n	1f8e4 <bmi160_set_regs+0x32>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
   1f8d2:	7c3b      	ldrb	r3, [r7, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
   1f8d4:	2b15      	cmp	r3, #21
   1f8d6:	d005      	beq.n	1f8e4 <bmi160_set_regs+0x32>
    uint8_t count = 0;
   1f8d8:	2400      	movs	r4, #0
    int8_t rslt = BMI160_OK;
   1f8da:	4625      	mov	r5, r4
   1f8dc:	e01e      	b.n	1f91c <bmi160_set_regs+0x6a>
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
   1f8de:	f000 067f 	and.w	r6, r0, #127	; 0x7f
   1f8e2:	e7f3      	b.n	1f8cc <bmi160_set_regs+0x1a>
            rslt = dev->write(dev->id, reg_addr, data, len);
   1f8e4:	4643      	mov	r3, r8
   1f8e6:	464a      	mov	r2, r9
   1f8e8:	4631      	mov	r1, r6
   1f8ea:	7878      	ldrb	r0, [r7, #1]
   1f8ec:	47a0      	blx	r4
   1f8ee:	4605      	mov	r5, r0
            dev->delay_ms(1);
   1f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f8f2:	2001      	movs	r0, #1
   1f8f4:	4798      	blx	r3
        if (rslt != BMI160_OK)
   1f8f6:	b9d5      	cbnz	r5, 1f92e <bmi160_set_regs+0x7c>
}
   1f8f8:	4628      	mov	r0, r5
   1f8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
   1f8fe:	6a3d      	ldr	r5, [r7, #32]
   1f900:	2301      	movs	r3, #1
   1f902:	eb09 0204 	add.w	r2, r9, r4
   1f906:	4631      	mov	r1, r6
   1f908:	7878      	ldrb	r0, [r7, #1]
   1f90a:	47a8      	blx	r5
   1f90c:	4605      	mov	r5, r0
                reg_addr++;
   1f90e:	3601      	adds	r6, #1
   1f910:	b2f6      	uxtb	r6, r6
                dev->delay_ms(1);
   1f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f914:	2001      	movs	r0, #1
   1f916:	4798      	blx	r3
            for (; count < len; count++)
   1f918:	3401      	adds	r4, #1
   1f91a:	b2e4      	uxtb	r4, r4
   1f91c:	4544      	cmp	r4, r8
   1f91e:	d3ee      	bcc.n	1f8fe <bmi160_set_regs+0x4c>
   1f920:	e7e9      	b.n	1f8f6 <bmi160_set_regs+0x44>
        rslt = BMI160_E_NULL_PTR;
   1f922:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f926:	e7e7      	b.n	1f8f8 <bmi160_set_regs+0x46>
   1f928:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f92c:	e7e4      	b.n	1f8f8 <bmi160_set_regs+0x46>
            rslt = BMI160_E_COM_FAIL;
   1f92e:	f06f 0501 	mvn.w	r5, #1
   1f932:	e7e1      	b.n	1f8f8 <bmi160_set_regs+0x46>

0001f934 <set_accel_conf>:
{
   1f934:	b510      	push	{r4, lr}
   1f936:	b082      	sub	sp, #8
   1f938:	4604      	mov	r4, r0
    uint8_t data[2] = { 0 };
   1f93a:	2300      	movs	r3, #0
   1f93c:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = check_accel_config(data, dev);
   1f940:	4601      	mov	r1, r0
   1f942:	a801      	add	r0, sp, #4
   1f944:	f7ff fe54 	bl	1f5f0 <check_accel_config>
    if (rslt == BMI160_OK)
   1f948:	b108      	cbz	r0, 1f94e <set_accel_conf+0x1a>
}
   1f94a:	b002      	add	sp, #8
   1f94c:	bd10      	pop	{r4, pc}
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
   1f94e:	4623      	mov	r3, r4
   1f950:	2201      	movs	r2, #1
   1f952:	a901      	add	r1, sp, #4
   1f954:	2040      	movs	r0, #64	; 0x40
   1f956:	f7ff ffac 	bl	1f8b2 <bmi160_set_regs>
        if (rslt == BMI160_OK)
   1f95a:	2800      	cmp	r0, #0
   1f95c:	d1f5      	bne.n	1f94a <set_accel_conf+0x16>
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
   1f95e:	7963      	ldrb	r3, [r4, #5]
   1f960:	7263      	strb	r3, [r4, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
   1f962:	79e3      	ldrb	r3, [r4, #7]
   1f964:	72e3      	strb	r3, [r4, #11]
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
   1f966:	4623      	mov	r3, r4
   1f968:	2201      	movs	r2, #1
   1f96a:	f10d 0105 	add.w	r1, sp, #5
   1f96e:	2041      	movs	r0, #65	; 0x41
   1f970:	f7ff ff9f 	bl	1f8b2 <bmi160_set_regs>
            if (rslt == BMI160_OK)
   1f974:	2800      	cmp	r0, #0
   1f976:	d1e8      	bne.n	1f94a <set_accel_conf+0x16>
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
   1f978:	79a3      	ldrb	r3, [r4, #6]
   1f97a:	72a3      	strb	r3, [r4, #10]
   1f97c:	e7e5      	b.n	1f94a <set_accel_conf+0x16>

0001f97e <set_gyro_conf>:
{
   1f97e:	b510      	push	{r4, lr}
   1f980:	b082      	sub	sp, #8
   1f982:	4604      	mov	r4, r0
    uint8_t data[2] = { 0 };
   1f984:	2300      	movs	r3, #0
   1f986:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = check_gyro_config(data, dev);
   1f98a:	4601      	mov	r1, r0
   1f98c:	a801      	add	r0, sp, #4
   1f98e:	f7ff fe4b 	bl	1f628 <check_gyro_config>
    if (rslt == BMI160_OK)
   1f992:	b108      	cbz	r0, 1f998 <set_gyro_conf+0x1a>
}
   1f994:	b002      	add	sp, #8
   1f996:	bd10      	pop	{r4, pc}
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
   1f998:	4623      	mov	r3, r4
   1f99a:	2201      	movs	r2, #1
   1f99c:	a901      	add	r1, sp, #4
   1f99e:	2042      	movs	r0, #66	; 0x42
   1f9a0:	f7ff ff87 	bl	1f8b2 <bmi160_set_regs>
        if (rslt == BMI160_OK)
   1f9a4:	2800      	cmp	r0, #0
   1f9a6:	d1f5      	bne.n	1f994 <set_gyro_conf+0x16>
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
   1f9a8:	7b63      	ldrb	r3, [r4, #13]
   1f9aa:	7463      	strb	r3, [r4, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
   1f9ac:	7be3      	ldrb	r3, [r4, #15]
   1f9ae:	74e3      	strb	r3, [r4, #19]
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
   1f9b0:	4623      	mov	r3, r4
   1f9b2:	2201      	movs	r2, #1
   1f9b4:	f10d 0105 	add.w	r1, sp, #5
   1f9b8:	2043      	movs	r0, #67	; 0x43
   1f9ba:	f7ff ff7a 	bl	1f8b2 <bmi160_set_regs>
            if (rslt == BMI160_OK)
   1f9be:	2800      	cmp	r0, #0
   1f9c0:	d1e8      	bne.n	1f994 <set_gyro_conf+0x16>
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
   1f9c2:	7ba3      	ldrb	r3, [r4, #14]
   1f9c4:	74a3      	strb	r3, [r4, #18]
   1f9c6:	e7e5      	b.n	1f994 <set_gyro_conf+0x16>

0001f9c8 <process_under_sampling>:
{
   1f9c8:	b530      	push	{r4, r5, lr}
   1f9ca:	b083      	sub	sp, #12
   1f9cc:	4604      	mov	r4, r0
   1f9ce:	460d      	mov	r5, r1
    uint8_t pre_filter = 0;
   1f9d0:	2300      	movs	r3, #0
   1f9d2:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
   1f9d6:	460b      	mov	r3, r1
   1f9d8:	2201      	movs	r2, #1
   1f9da:	4601      	mov	r1, r0
   1f9dc:	2040      	movs	r0, #64	; 0x40
   1f9de:	f7ff fdeb 	bl	1f5b8 <bmi160_get_regs>
    if (rslt == BMI160_OK)
   1f9e2:	b938      	cbnz	r0, 1f9f4 <process_under_sampling+0x2c>
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
   1f9e4:	792b      	ldrb	r3, [r5, #4]
   1f9e6:	2b12      	cmp	r3, #18
   1f9e8:	d006      	beq.n	1f9f8 <process_under_sampling+0x30>
            if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
   1f9ea:	7822      	ldrb	r2, [r4, #0]
   1f9ec:	f994 3000 	ldrsb.w	r3, [r4]
   1f9f0:	2b00      	cmp	r3, #0
   1f9f2:	db15      	blt.n	1fa20 <process_under_sampling+0x58>
}
   1f9f4:	b003      	add	sp, #12
   1f9f6:	bd30      	pop	{r4, r5, pc}
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
   1f9f8:	7823      	ldrb	r3, [r4, #0]
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
   1f9fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f9fe:	7023      	strb	r3, [r4, #0]
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
   1fa00:	462b      	mov	r3, r5
   1fa02:	2201      	movs	r2, #1
   1fa04:	4621      	mov	r1, r4
   1fa06:	2040      	movs	r0, #64	; 0x40
   1fa08:	f7ff ff53 	bl	1f8b2 <bmi160_set_regs>
            if (rslt == BMI160_OK)
   1fa0c:	2800      	cmp	r0, #0
   1fa0e:	d1f1      	bne.n	1f9f4 <process_under_sampling+0x2c>
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
   1fa10:	462b      	mov	r3, r5
   1fa12:	2202      	movs	r2, #2
   1fa14:	f10d 0107 	add.w	r1, sp, #7
   1fa18:	2058      	movs	r0, #88	; 0x58
   1fa1a:	f7ff ff4a 	bl	1f8b2 <bmi160_set_regs>
   1fa1e:	e7e9      	b.n	1f9f4 <process_under_sampling+0x2c>
                temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
   1fa20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
                *data = temp;
   1fa24:	7022      	strb	r2, [r4, #0]
                rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
   1fa26:	462b      	mov	r3, r5
   1fa28:	2201      	movs	r2, #1
   1fa2a:	4621      	mov	r1, r4
   1fa2c:	2040      	movs	r0, #64	; 0x40
   1fa2e:	f7ff ff40 	bl	1f8b2 <bmi160_set_regs>
   1fa32:	e7df      	b.n	1f9f4 <process_under_sampling+0x2c>

0001fa34 <set_accel_pwr>:
{
   1fa34:	b530      	push	{r4, r5, lr}
   1fa36:	b083      	sub	sp, #12
    uint8_t data = 0;
   1fa38:	2300      	movs	r3, #0
   1fa3a:	f88d 3007 	strb.w	r3, [sp, #7]
    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
   1fa3e:	7902      	ldrb	r2, [r0, #4]
   1fa40:	f1a2 0310 	sub.w	r3, r2, #16
   1fa44:	b2db      	uxtb	r3, r3
   1fa46:	2b02      	cmp	r3, #2
   1fa48:	d820      	bhi.n	1fa8c <set_accel_pwr+0x58>
   1fa4a:	4604      	mov	r4, r0
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
   1fa4c:	7a03      	ldrb	r3, [r0, #8]
   1fa4e:	429a      	cmp	r2, r3
   1fa50:	d103      	bne.n	1fa5a <set_accel_pwr+0x26>
    int8_t rslt = 0;
   1fa52:	2500      	movs	r5, #0
}
   1fa54:	4628      	mov	r0, r5
   1fa56:	b003      	add	sp, #12
   1fa58:	bd30      	pop	{r4, r5, pc}
            rslt = process_under_sampling(&data, dev);
   1fa5a:	4601      	mov	r1, r0
   1fa5c:	f10d 0007 	add.w	r0, sp, #7
   1fa60:	f7ff ffb2 	bl	1f9c8 <process_under_sampling>
            if (rslt == BMI160_OK)
   1fa64:	4605      	mov	r5, r0
   1fa66:	2800      	cmp	r0, #0
   1fa68:	d1f4      	bne.n	1fa54 <set_accel_pwr+0x20>
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
   1fa6a:	4623      	mov	r3, r4
   1fa6c:	2201      	movs	r2, #1
   1fa6e:	1d21      	adds	r1, r4, #4
   1fa70:	207e      	movs	r0, #126	; 0x7e
   1fa72:	f7ff ff1e 	bl	1f8b2 <bmi160_set_regs>
   1fa76:	4605      	mov	r5, r0
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
   1fa78:	7a23      	ldrb	r3, [r4, #8]
   1fa7a:	2b10      	cmp	r3, #16
   1fa7c:	d002      	beq.n	1fa84 <set_accel_pwr+0x50>
                dev->prev_accel_cfg.power = dev->accel_cfg.power;
   1fa7e:	7923      	ldrb	r3, [r4, #4]
   1fa80:	7223      	strb	r3, [r4, #8]
   1fa82:	e7e7      	b.n	1fa54 <set_accel_pwr+0x20>
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
   1fa84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fa86:	2005      	movs	r0, #5
   1fa88:	4798      	blx	r3
   1fa8a:	e7f8      	b.n	1fa7e <set_accel_pwr+0x4a>
        rslt = BMI160_E_OUT_OF_RANGE;
   1fa8c:	f06f 0503 	mvn.w	r5, #3
   1fa90:	e7e0      	b.n	1fa54 <set_accel_pwr+0x20>

0001fa92 <set_gyro_pwr>:
{
   1fa92:	b538      	push	{r3, r4, r5, lr}
   1fa94:	4604      	mov	r4, r0
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
   1fa96:	7b02      	ldrb	r2, [r0, #12]
   1fa98:	f1a2 0314 	sub.w	r3, r2, #20
   1fa9c:	b2db      	uxtb	r3, r3
   1fa9e:	2b01      	cmp	r3, #1
   1faa0:	d901      	bls.n	1faa6 <set_gyro_pwr+0x14>
   1faa2:	2a17      	cmp	r2, #23
   1faa4:	d120      	bne.n	1fae8 <set_gyro_pwr+0x56>
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
   1faa6:	7c23      	ldrb	r3, [r4, #16]
   1faa8:	429a      	cmp	r2, r3
   1faaa:	d102      	bne.n	1fab2 <set_gyro_pwr+0x20>
    int8_t rslt = 0;
   1faac:	2500      	movs	r5, #0
}
   1faae:	4628      	mov	r0, r5
   1fab0:	bd38      	pop	{r3, r4, r5, pc}
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
   1fab2:	4623      	mov	r3, r4
   1fab4:	2201      	movs	r2, #1
   1fab6:	f104 010c 	add.w	r1, r4, #12
   1faba:	207e      	movs	r0, #126	; 0x7e
   1fabc:	f7ff fef9 	bl	1f8b2 <bmi160_set_regs>
   1fac0:	4605      	mov	r5, r0
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
   1fac2:	7c23      	ldrb	r3, [r4, #16]
   1fac4:	2b14      	cmp	r3, #20
   1fac6:	d004      	beq.n	1fad2 <set_gyro_pwr+0x40>
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
   1fac8:	2b17      	cmp	r3, #23
   1faca:	d006      	beq.n	1fada <set_gyro_pwr+0x48>
            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
   1facc:	7b23      	ldrb	r3, [r4, #12]
   1face:	7423      	strb	r3, [r4, #16]
   1fad0:	e7ed      	b.n	1faae <set_gyro_pwr+0x1c>
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
   1fad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fad4:	2051      	movs	r0, #81	; 0x51
   1fad6:	4798      	blx	r3
   1fad8:	e7f8      	b.n	1facc <set_gyro_pwr+0x3a>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
   1fada:	7b23      	ldrb	r3, [r4, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
   1fadc:	2b15      	cmp	r3, #21
   1fade:	d1f5      	bne.n	1facc <set_gyro_pwr+0x3a>
                dev->delay_ms(10);
   1fae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fae2:	200a      	movs	r0, #10
   1fae4:	4798      	blx	r3
   1fae6:	e7f1      	b.n	1facc <set_gyro_pwr+0x3a>
        rslt = BMI160_E_OUT_OF_RANGE;
   1fae8:	f06f 0503 	mvn.w	r5, #3
   1faec:	e7df      	b.n	1faae <set_gyro_pwr+0x1c>

0001faee <bmi160_soft_reset>:
{
   1faee:	b530      	push	{r4, r5, lr}
   1faf0:	b083      	sub	sp, #12
    uint8_t data = BMI160_SOFT_RESET_CMD;
   1faf2:	23b6      	movs	r3, #182	; 0xb6
   1faf4:	f88d 3007 	strb.w	r3, [sp, #7]
    if ((dev == NULL) || (dev->delay_ms == NULL))
   1faf8:	b310      	cbz	r0, 1fb40 <bmi160_soft_reset+0x52>
   1fafa:	4605      	mov	r5, r0
   1fafc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1fafe:	b313      	cbz	r3, 1fb46 <bmi160_soft_reset+0x58>
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
   1fb00:	4603      	mov	r3, r0
   1fb02:	2201      	movs	r2, #1
   1fb04:	f10d 0107 	add.w	r1, sp, #7
   1fb08:	207e      	movs	r0, #126	; 0x7e
   1fb0a:	f7ff fed2 	bl	1f8b2 <bmi160_set_regs>
   1fb0e:	4604      	mov	r4, r0
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
   1fb10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1fb12:	2001      	movs	r0, #1
   1fb14:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
   1fb16:	b91c      	cbnz	r4, 1fb20 <bmi160_soft_reset+0x32>
   1fb18:	78ab      	ldrb	r3, [r5, #2]
   1fb1a:	2b01      	cmp	r3, #1
   1fb1c:	d003      	beq.n	1fb26 <bmi160_soft_reset+0x38>
        if (rslt == BMI160_OK)
   1fb1e:	b15c      	cbz	r4, 1fb38 <bmi160_soft_reset+0x4a>
}
   1fb20:	4620      	mov	r0, r4
   1fb22:	b003      	add	sp, #12
   1fb24:	bd30      	pop	{r4, r5, pc}
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
   1fb26:	462b      	mov	r3, r5
   1fb28:	2201      	movs	r2, #1
   1fb2a:	f10d 0107 	add.w	r1, sp, #7
   1fb2e:	207f      	movs	r0, #127	; 0x7f
   1fb30:	f7ff fd42 	bl	1f5b8 <bmi160_get_regs>
   1fb34:	4604      	mov	r4, r0
   1fb36:	e7f2      	b.n	1fb1e <bmi160_soft_reset+0x30>
            default_param_settg(dev);
   1fb38:	4628      	mov	r0, r5
   1fb3a:	f7ff fcb9 	bl	1f4b0 <default_param_settg>
   1fb3e:	e7ef      	b.n	1fb20 <bmi160_soft_reset+0x32>
        rslt = BMI160_E_NULL_PTR;
   1fb40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1fb44:	e7ec      	b.n	1fb20 <bmi160_soft_reset+0x32>
   1fb46:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1fb4a:	e7e9      	b.n	1fb20 <bmi160_soft_reset+0x32>

0001fb4c <bmi160_init>:
{
   1fb4c:	b530      	push	{r4, r5, lr}
   1fb4e:	b083      	sub	sp, #12
   1fb50:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   1fb52:	f7ff fc98 	bl	1f486 <null_ptr_check>
    if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
   1fb56:	bb28      	cbnz	r0, 1fba4 <bmi160_init+0x58>
   1fb58:	78a3      	ldrb	r3, [r4, #2]
   1fb5a:	2b01      	cmp	r3, #1
   1fb5c:	d004      	beq.n	1fb68 <bmi160_init+0x1c>
    if (rslt == BMI160_OK)
   1fb5e:	bb08      	cbnz	r0, 1fba4 <bmi160_init+0x58>
        dev->chip_id = 0;
   1fb60:	2300      	movs	r3, #0
   1fb62:	7023      	strb	r3, [r4, #0]
    uint8_t try = 3;
   1fb64:	2203      	movs	r2, #3
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
   1fb66:	e00e      	b.n	1fb86 <bmi160_init+0x3a>
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
   1fb68:	4623      	mov	r3, r4
   1fb6a:	2201      	movs	r2, #1
   1fb6c:	f10d 0107 	add.w	r1, sp, #7
   1fb70:	207f      	movs	r0, #127	; 0x7f
   1fb72:	f7ff fd21 	bl	1f5b8 <bmi160_get_regs>
   1fb76:	e7f2      	b.n	1fb5e <bmi160_init+0x12>
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   1fb78:	4623      	mov	r3, r4
   1fb7a:	2201      	movs	r2, #1
   1fb7c:	4621      	mov	r1, r4
   1fb7e:	2000      	movs	r0, #0
   1fb80:	f7ff fd1a 	bl	1f5b8 <bmi160_get_regs>
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
   1fb84:	462a      	mov	r2, r5
   1fb86:	1e53      	subs	r3, r2, #1
   1fb88:	b2dd      	uxtb	r5, r3
   1fb8a:	b112      	cbz	r2, 1fb92 <bmi160_init+0x46>
   1fb8c:	7823      	ldrb	r3, [r4, #0]
   1fb8e:	2bd1      	cmp	r3, #209	; 0xd1
   1fb90:	d1f2      	bne.n	1fb78 <bmi160_init+0x2c>
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
   1fb92:	b948      	cbnz	r0, 1fba8 <bmi160_init+0x5c>
   1fb94:	7823      	ldrb	r3, [r4, #0]
   1fb96:	2bd1      	cmp	r3, #209	; 0xd1
   1fb98:	d109      	bne.n	1fbae <bmi160_init+0x62>
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
   1fb9a:	23ff      	movs	r3, #255	; 0xff
   1fb9c:	70e3      	strb	r3, [r4, #3]
            rslt = bmi160_soft_reset(dev);
   1fb9e:	4620      	mov	r0, r4
   1fba0:	f7ff ffa5 	bl	1faee <bmi160_soft_reset>
}
   1fba4:	b003      	add	sp, #12
   1fba6:	bd30      	pop	{r4, r5, pc}
            rslt = BMI160_E_DEV_NOT_FOUND;
   1fba8:	f06f 0002 	mvn.w	r0, #2
   1fbac:	e7fa      	b.n	1fba4 <bmi160_init+0x58>
   1fbae:	f06f 0002 	mvn.w	r0, #2
   1fbb2:	e7f7      	b.n	1fba4 <bmi160_init+0x58>

0001fbb4 <bmi160_set_power_mode>:
    if ((dev == NULL) || (dev->delay_ms == NULL))
   1fbb4:	b158      	cbz	r0, 1fbce <bmi160_set_power_mode+0x1a>
{
   1fbb6:	b510      	push	{r4, lr}
   1fbb8:	4604      	mov	r4, r0
    if ((dev == NULL) || (dev->delay_ms == NULL))
   1fbba:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1fbbc:	b153      	cbz	r3, 1fbd4 <bmi160_set_power_mode+0x20>
        rslt = set_accel_pwr(dev);
   1fbbe:	f7ff ff39 	bl	1fa34 <set_accel_pwr>
        if (rslt == BMI160_OK)
   1fbc2:	b100      	cbz	r0, 1fbc6 <bmi160_set_power_mode+0x12>
}
   1fbc4:	bd10      	pop	{r4, pc}
            rslt = set_gyro_pwr(dev);
   1fbc6:	4620      	mov	r0, r4
   1fbc8:	f7ff ff63 	bl	1fa92 <set_gyro_pwr>
   1fbcc:	e7fa      	b.n	1fbc4 <bmi160_set_power_mode+0x10>
        rslt = BMI160_E_NULL_PTR;
   1fbce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1fbd2:	4770      	bx	lr
        rslt = BMI160_E_NULL_PTR;
   1fbd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fbd8:	e7f4      	b.n	1fbc4 <bmi160_set_power_mode+0x10>

0001fbda <bmi160_set_sens_conf>:
    if ((dev == NULL) || (dev->delay_ms == NULL))
   1fbda:	b1a8      	cbz	r0, 1fc08 <bmi160_set_sens_conf+0x2e>
{
   1fbdc:	b510      	push	{r4, lr}
   1fbde:	4604      	mov	r4, r0
    if ((dev == NULL) || (dev->delay_ms == NULL))
   1fbe0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1fbe2:	b1a3      	cbz	r3, 1fc0e <bmi160_set_sens_conf+0x34>
        rslt = set_accel_conf(dev);
   1fbe4:	f7ff fea6 	bl	1f934 <set_accel_conf>
        if (rslt == BMI160_OK)
   1fbe8:	b100      	cbz	r0, 1fbec <bmi160_set_sens_conf+0x12>
}
   1fbea:	bd10      	pop	{r4, pc}
            rslt = set_gyro_conf(dev);
   1fbec:	4620      	mov	r0, r4
   1fbee:	f7ff fec6 	bl	1f97e <set_gyro_conf>
            if (rslt == BMI160_OK)
   1fbf2:	2800      	cmp	r0, #0
   1fbf4:	d1f9      	bne.n	1fbea <bmi160_set_sens_conf+0x10>
                rslt = bmi160_set_power_mode(dev);
   1fbf6:	4620      	mov	r0, r4
   1fbf8:	f7ff ffdc 	bl	1fbb4 <bmi160_set_power_mode>
                if (rslt == BMI160_OK)
   1fbfc:	2800      	cmp	r0, #0
   1fbfe:	d1f4      	bne.n	1fbea <bmi160_set_sens_conf+0x10>
                    rslt = check_invalid_settg(dev);
   1fc00:	4620      	mov	r0, r4
   1fc02:	f7ff fd2d 	bl	1f660 <check_invalid_settg>
   1fc06:	e7f0      	b.n	1fbea <bmi160_set_sens_conf+0x10>
        rslt = BMI160_E_NULL_PTR;
   1fc08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1fc0c:	4770      	bx	lr
        rslt = BMI160_E_NULL_PTR;
   1fc0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc12:	e7ea      	b.n	1fbea <bmi160_set_sens_conf+0x10>

0001fc14 <bmi160_get_sensor_data>:
{
   1fc14:	b510      	push	{r4, lr}
   1fc16:	4684      	mov	ip, r0
   1fc18:	4614      	mov	r4, r2
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
   1fc1a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
   1fc1e:	f00c 0203 	and.w	r2, ip, #3
    if (time_sel == 1)
   1fc22:	f01c 0f04 	tst.w	ip, #4
   1fc26:	d000      	beq.n	1fc2a <bmi160_get_sensor_data+0x16>
        len = 3;
   1fc28:	2003      	movs	r0, #3
    if (dev != NULL)
   1fc2a:	b1cb      	cbz	r3, 1fc60 <bmi160_get_sensor_data+0x4c>
        switch (sen_sel)
   1fc2c:	2a02      	cmp	r2, #2
   1fc2e:	d00b      	beq.n	1fc48 <bmi160_get_sensor_data+0x34>
   1fc30:	2a03      	cmp	r2, #3
   1fc32:	d00f      	beq.n	1fc54 <bmi160_get_sensor_data+0x40>
   1fc34:	2a01      	cmp	r2, #1
   1fc36:	d002      	beq.n	1fc3e <bmi160_get_sensor_data+0x2a>
   1fc38:	f06f 0004 	mvn.w	r0, #4
}
   1fc3c:	bd10      	pop	{r4, pc}
                if (accel == NULL)
   1fc3e:	b191      	cbz	r1, 1fc66 <bmi160_get_sensor_data+0x52>
                    rslt = get_accel_data(len, accel, dev);
   1fc40:	461a      	mov	r2, r3
   1fc42:	f7ff fd39 	bl	1f6b8 <get_accel_data>
   1fc46:	e7f9      	b.n	1fc3c <bmi160_get_sensor_data+0x28>
                if (gyro == NULL)
   1fc48:	b184      	cbz	r4, 1fc6c <bmi160_get_sensor_data+0x58>
                    rslt = get_gyro_data(len, gyro, dev);
   1fc4a:	461a      	mov	r2, r3
   1fc4c:	4621      	mov	r1, r4
   1fc4e:	f7ff fd72 	bl	1f736 <get_gyro_data>
   1fc52:	e7f3      	b.n	1fc3c <bmi160_get_sensor_data+0x28>
                if ((gyro == NULL) || (accel == NULL))
   1fc54:	b16c      	cbz	r4, 1fc72 <bmi160_get_sensor_data+0x5e>
   1fc56:	b179      	cbz	r1, 1fc78 <bmi160_get_sensor_data+0x64>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
   1fc58:	4622      	mov	r2, r4
   1fc5a:	f7ff fdce 	bl	1f7fa <get_accel_gyro_data>
   1fc5e:	e7ed      	b.n	1fc3c <bmi160_get_sensor_data+0x28>
        rslt = BMI160_E_NULL_PTR;
   1fc60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc64:	e7ea      	b.n	1fc3c <bmi160_get_sensor_data+0x28>
                    rslt = BMI160_E_NULL_PTR;
   1fc66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc6a:	e7e7      	b.n	1fc3c <bmi160_get_sensor_data+0x28>
                    rslt = BMI160_E_NULL_PTR;
   1fc6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc70:	e7e4      	b.n	1fc3c <bmi160_get_sensor_data+0x28>
                    rslt = BMI160_E_NULL_PTR;
   1fc72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc76:	e7e1      	b.n	1fc3c <bmi160_get_sensor_data+0x28>
   1fc78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fc7c:	e7de      	b.n	1fc3c <bmi160_get_sensor_data+0x28>

0001fc7e <utils_truncate_number>:
	if (*number > max) {
   1fc7e:	edd0 7a00 	vldr	s15, [r0]
   1fc82:	eef4 7ae0 	vcmpe.f32	s15, s1
   1fc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fc8a:	dd03      	ble.n	1fc94 <utils_truncate_number+0x16>
		*number = max;
   1fc8c:	edc0 0a00 	vstr	s1, [r0]
		did_trunc = 1;
   1fc90:	2001      	movs	r0, #1
   1fc92:	4770      	bx	lr
	} else if (*number < min) {
   1fc94:	eef4 7ac0 	vcmpe.f32	s15, s0
   1fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fc9c:	d503      	bpl.n	1fca6 <utils_truncate_number+0x28>
		*number = min;
   1fc9e:	ed80 0a00 	vstr	s0, [r0]
		did_trunc = 1;
   1fca2:	2001      	movs	r0, #1
   1fca4:	4770      	bx	lr
	int did_trunc = 0;
   1fca6:	2000      	movs	r0, #0
}
   1fca8:	4770      	bx	lr

0001fcaa <invSqrt>:
	rpy[0] = -atan2f(q0 * q1 + q2 * q3, 0.5 - (q1 * q1 + q2 * q2));
	rpy[1] = asinf(-2.0 * (q1 * q3 - q0 * q2));
	rpy[2] = -atan2f(q0 * q3 + q1 * q2, 0.5 - (q2 * q2 + q3 * q3));
}

static float invSqrt(float x) {
   1fcaa:	b508      	push	{r3, lr}
	//	un.as_float = un.as_float * (1.5f - xhalf * un.as_float * un.as_float);
	//	return un.as_float;

	// Use normal inverse square root.
	// http://diydrones.com/forum/topics/madgwick-imu-ahrs-and-fast-inverse-square-root
	return 1.0 / sqrtf(x);
   1fcac:	f7fa fcd0 	bl	1a650 <sqrtf>
}
   1fcb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1fcb4:	ee87 0a80 	vdiv.f32	s0, s15, s0
   1fcb8:	bd08      	pop	{r3, pc}

0001fcba <ahrs_init_attitude_info>:
	att->q0 = 1.0;
   1fcba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1fcbe:	6002      	str	r2, [r0, #0]
	att->q1 = 0.0;
   1fcc0:	2300      	movs	r3, #0
   1fcc2:	6043      	str	r3, [r0, #4]
	att->q2 = 0.0;
   1fcc4:	6083      	str	r3, [r0, #8]
	att->q3 = 0.0;
   1fcc6:	60c3      	str	r3, [r0, #12]
	att->integralFBx = 0.0;
   1fcc8:	6103      	str	r3, [r0, #16]
	att->integralFBy = 0.0;
   1fcca:	6143      	str	r3, [r0, #20]
	att->integralFBz = 0.0;
   1fccc:	6183      	str	r3, [r0, #24]
	att->accMagP = 1.0;
   1fcce:	61c2      	str	r2, [r0, #28]
	att->initialUpdateDone = 0;
   1fcd0:	2300      	movs	r3, #0
   1fcd2:	6203      	str	r3, [r0, #32]
}
   1fcd4:	4770      	bx	lr

0001fcd6 <k_msleep>:
{
   1fcd6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1fcd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1fcdc:	17c1      	asrs	r1, r0, #31
	return z_impl_k_sleep(timeout);
   1fcde:	f7fa fa03 	bl	1a0e8 <z_impl_k_sleep>
}
   1fce2:	bd08      	pop	{r3, pc}

0001fce4 <user_delay_ms>:
static void user_delay_ms(uint32_t ms) {
   1fce4:	b508      	push	{r3, lr}
	k_msleep(ms);
   1fce6:	f7ff fff6 	bl	1fcd6 <k_msleep>
}
   1fcea:	bd08      	pop	{r3, pc}

0001fcec <arch_printk_char_out>:
}
   1fcec:	2000      	movs	r0, #0
   1fcee:	4770      	bx	lr

0001fcf0 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   1fcf0:	b40f      	push	{r0, r1, r2, r3}
   1fcf2:	b500      	push	{lr}
   1fcf4:	b083      	sub	sp, #12
   1fcf6:	a904      	add	r1, sp, #16
   1fcf8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1fcfc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1fcfe:	f7f0 fde7 	bl	108d0 <vprintk>

	va_end(ap);
}
   1fd02:	b003      	add	sp, #12
   1fd04:	f85d eb04 	ldr.w	lr, [sp], #4
   1fd08:	b004      	add	sp, #16
   1fd0a:	4770      	bx	lr

0001fd0c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1fd0c:	b508      	push	{r3, lr}
   1fd0e:	4604      	mov	r4, r0
   1fd10:	4608      	mov	r0, r1
   1fd12:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1fd14:	461a      	mov	r2, r3
   1fd16:	47a0      	blx	r4
	return z_impl_z_current_get();
   1fd18:	f7fa f9fa 	bl	1a110 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1fd1c:	f7f3 fce2 	bl	136e4 <z_impl_k_thread_abort>

0001fd20 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fd20:	00c9      	lsls	r1, r1, #3
   1fd22:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1fd24:	4408      	add	r0, r1
   1fd26:	4770      	bx	lr

0001fd28 <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1fd28:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1fd2c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1fd30:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   1fd32:	4299      	cmp	r1, r3
   1fd34:	d00c      	beq.n	1fd50 <free_list_remove_bidx+0x28>
   1fd36:	4484      	add	ip, r0
   1fd38:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1fd3c:	3204      	adds	r2, #4
   1fd3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1fd42:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1fd44:	3206      	adds	r2, #6
   1fd46:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   1fd48:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1fd4a:	3304      	adds	r3, #4
   1fd4c:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1fd4e:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   1fd50:	68c3      	ldr	r3, [r0, #12]
   1fd52:	2101      	movs	r1, #1
   1fd54:	4091      	lsls	r1, r2
   1fd56:	ea23 0301 	bic.w	r3, r3, r1
   1fd5a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1fd5c:	3204      	adds	r2, #4
   1fd5e:	2300      	movs	r3, #0
   1fd60:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   1fd64:	4770      	bx	lr

0001fd66 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1fd66:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1fd68:	1d13      	adds	r3, r2, #4
   1fd6a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1fd6e:	b974      	cbnz	r4, 1fd8e <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   1fd70:	68c3      	ldr	r3, [r0, #12]
   1fd72:	2401      	movs	r4, #1
   1fd74:	4094      	lsls	r4, r2
   1fd76:	4323      	orrs	r3, r4
   1fd78:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1fd7a:	3204      	adds	r2, #4
   1fd7c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1fd80:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   1fd82:	1d1a      	adds	r2, r3, #4
   1fd84:	b289      	uxth	r1, r1
   1fd86:	5281      	strh	r1, [r0, r2]
   1fd88:	3306      	adds	r3, #6
   1fd8a:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1fd8c:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   1fd8e:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   1fd90:	3204      	adds	r2, #4
   1fd92:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   1fd94:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   1fd98:	f10c 0e04 	add.w	lr, ip, #4
   1fd9c:	f820 300e 	strh.w	r3, [r0, lr]
   1fda0:	f10c 0c06 	add.w	ip, ip, #6
   1fda4:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   1fda8:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1fdaa:	3306      	adds	r3, #6
   1fdac:	b289      	uxth	r1, r1
   1fdae:	52c1      	strh	r1, [r0, r3]
   1fdb0:	5281      	strh	r1, [r0, r2]
   1fdb2:	e7eb      	b.n	1fd8c <free_list_add_bidx+0x26>

0001fdb4 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1fdb4:	b500      	push	{lr}
	void *cmem = &buf[c];
   1fdb6:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   1fdb8:	3302      	adds	r3, #2
   1fdba:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   1fdbe:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1fdc2:	1a89      	subs	r1, r1, r2
   1fdc4:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fdc8:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   1fdcc:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fdd0:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   1fdd4:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   1fdd6:	3302      	adds	r3, #2
   1fdd8:	f820 e003 	strh.w	lr, [r0, r3]
   1fddc:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   1fde0:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1fde2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   1fde6:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1fdea:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdee <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1fdee:	b500      	push	{lr}
	void *cmem = &buf[c];
   1fdf0:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   1fdf2:	3102      	adds	r1, #2
   1fdf4:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   1fdf8:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   1fdfc:	f10c 0c02 	add.w	ip, ip, #2
   1fe00:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1fe04:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fe06:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fe0a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   1fe0e:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   1fe12:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   1fe16:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   1fe1a:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1fe1e:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe22 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fe22:	3904      	subs	r1, #4
   1fe24:	1a08      	subs	r0, r1, r0
}
   1fe26:	08c0      	lsrs	r0, r0, #3
   1fe28:	4770      	bx	lr

0001fe2a <free_list_remove>:
{
   1fe2a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1fe2c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1fe30:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1fe32:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1fe34:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   1fe38:	f1c2 021f 	rsb	r2, r2, #31
   1fe3c:	f7ff ff74 	bl	1fd28 <free_list_remove_bidx>
}
   1fe40:	bd08      	pop	{r3, pc}

0001fe42 <free_list_add>:
{
   1fe42:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1fe44:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1fe48:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1fe4a:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   1fe4c:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   1fe50:	f1c2 021f 	rsb	r2, r2, #31
   1fe54:	f7ff ff87 	bl	1fd66 <free_list_add_bidx>
}
   1fe58:	bd08      	pop	{r3, pc}

0001fe5a <free_chunk>:
{
   1fe5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe5c:	4604      	mov	r4, r0
   1fe5e:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   1fe60:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   1fe62:	1cb7      	adds	r7, r6, #2
   1fe64:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   1fe66:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   1fe6a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1fe6e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1fe70:	f013 0f01 	tst.w	r3, #1
   1fe74:	d00c      	beq.n	1fe90 <free_chunk+0x36>
   1fe76:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fe78:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   1fe7a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   1fe7e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1fe80:	f013 0f01 	tst.w	r3, #1
   1fe84:	d00e      	beq.n	1fea4 <free_chunk+0x4a>
	free_list_add(h, c);
   1fe86:	4629      	mov	r1, r5
   1fe88:	4620      	mov	r0, r4
   1fe8a:	f7ff ffda 	bl	1fe42 <free_list_add>
}
   1fe8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   1fe90:	f7ff ffcb 	bl	1fe2a <free_list_remove>
   1fe94:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   1fe96:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   1fe9a:	4629      	mov	r1, r5
   1fe9c:	4620      	mov	r0, r4
   1fe9e:	f7ff ffa6 	bl	1fdee <merge_chunks>
   1fea2:	e7e8      	b.n	1fe76 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   1fea4:	4620      	mov	r0, r4
   1fea6:	f7ff ffc0 	bl	1fe2a <free_list_remove>
   1feaa:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   1feac:	462a      	mov	r2, r5
   1feae:	1a69      	subs	r1, r5, r1
   1feb0:	4620      	mov	r0, r4
   1feb2:	f7ff ff9c 	bl	1fdee <merge_chunks>
   1feb6:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1feb8:	1aed      	subs	r5, r5, r3
   1feba:	e7e4      	b.n	1fe86 <free_chunk+0x2c>

0001febc <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1febc:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   1febe:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1fec2:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   1fec6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   1feca:	b1cd      	cbz	r5, 1ff00 <alloc_chunk+0x44>
   1fecc:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   1fed0:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   1fed4:	1d14      	adds	r4, r2, #4
   1fed6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   1feda:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   1fede:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   1fee2:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   1fee4:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   1fee8:	d914      	bls.n	1ff14 <alloc_chunk+0x58>
   1feea:	4484      	add	ip, r0
   1feec:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   1fef0:	1d16      	adds	r6, r2, #4
   1fef2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   1fef6:	f1be 0e01 	subs.w	lr, lr, #1
   1fefa:	d001      	beq.n	1ff00 <alloc_chunk+0x44>
   1fefc:	42a5      	cmp	r5, r4
   1fefe:	d1e9      	bne.n	1fed4 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1ff00:	68c4      	ldr	r4, [r0, #12]
   1ff02:	f1c3 0220 	rsb	r2, r3, #32
   1ff06:	2301      	movs	r3, #1
   1ff08:	4093      	lsls	r3, r2
   1ff0a:	425b      	negs	r3, r3

	if (bmask != 0U) {
   1ff0c:	401c      	ands	r4, r3
   1ff0e:	d105      	bne.n	1ff1c <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1ff10:	4620      	mov	r0, r4
   1ff12:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   1ff14:	4621      	mov	r1, r4
   1ff16:	f7ff ff07 	bl	1fd28 <free_list_remove_bidx>
				return c;
   1ff1a:	e7f9      	b.n	1ff10 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   1ff1c:	fa94 f2a4 	rbit	r2, r4
   1ff20:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ff24:	1d13      	adds	r3, r2, #4
   1ff26:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1ff2a:	4621      	mov	r1, r4
   1ff2c:	f7ff fefc 	bl	1fd28 <free_list_remove_bidx>
		return c;
   1ff30:	e7ee      	b.n	1ff10 <alloc_chunk+0x54>

0001ff32 <sys_heap_free>:
	if (mem == NULL) {
   1ff32:	b179      	cbz	r1, 1ff54 <sys_heap_free+0x22>
{
   1ff34:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   1ff36:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   1ff38:	4620      	mov	r0, r4
   1ff3a:	f7ff ff72 	bl	1fe22 <mem_to_chunkid>
   1ff3e:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1ff40:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ff44:	8853      	ldrh	r3, [r2, #2]
   1ff46:	f023 0301 	bic.w	r3, r3, #1
   1ff4a:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   1ff4c:	4620      	mov	r0, r4
   1ff4e:	f7ff ff84 	bl	1fe5a <free_chunk>
}
   1ff52:	bd10      	pop	{r4, pc}
   1ff54:	4770      	bx	lr

0001ff56 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1ff56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   1ff58:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1ff5a:	b341      	cbz	r1, 1ffae <sys_heap_alloc+0x58>
   1ff5c:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1ff5e:	68aa      	ldr	r2, [r5, #8]
   1ff60:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1ff64:	d925      	bls.n	1ffb2 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ff66:	330b      	adds	r3, #11
   1ff68:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1ff6a:	4621      	mov	r1, r4
   1ff6c:	4628      	mov	r0, r5
   1ff6e:	f7ff ffa5 	bl	1febc <alloc_chunk>
	if (c == 0U) {
   1ff72:	4607      	mov	r7, r0
   1ff74:	b1f8      	cbz	r0, 1ffb6 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   1ff76:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   1ff78:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   1ff7c:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1ff7e:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   1ff82:	d309      	bcc.n	1ff98 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   1ff84:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ff86:	885a      	ldrh	r2, [r3, #2]
   1ff88:	f042 0201 	orr.w	r2, r2, #1
   1ff8c:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   1ff8e:	4639      	mov	r1, r7
   1ff90:	4628      	mov	r0, r5
   1ff92:	f7ff fec5 	bl	1fd20 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1ff96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   1ff98:	4404      	add	r4, r0
   1ff9a:	4622      	mov	r2, r4
   1ff9c:	4601      	mov	r1, r0
   1ff9e:	4628      	mov	r0, r5
   1ffa0:	f7ff ff08 	bl	1fdb4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1ffa4:	4621      	mov	r1, r4
   1ffa6:	4628      	mov	r0, r5
   1ffa8:	f7ff ff4b 	bl	1fe42 <free_list_add>
   1ffac:	e7ea      	b.n	1ff84 <sys_heap_alloc+0x2e>
		return NULL;
   1ffae:	2000      	movs	r0, #0
   1ffb0:	e7f1      	b.n	1ff96 <sys_heap_alloc+0x40>
   1ffb2:	2000      	movs	r0, #0
   1ffb4:	e7ef      	b.n	1ff96 <sys_heap_alloc+0x40>
		return NULL;
   1ffb6:	2000      	movs	r0, #0
   1ffb8:	e7ed      	b.n	1ff96 <sys_heap_alloc+0x40>

0001ffba <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1ffba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ffbe:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   1ffc0:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1ffc2:	424b      	negs	r3, r1
   1ffc4:	400b      	ands	r3, r1
	if (align != rew) {
   1ffc6:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1ffca:	ea19 0901 	ands.w	r9, r9, r1
   1ffce:	d004      	beq.n	1ffda <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1ffd0:	2b03      	cmp	r3, #3
   1ffd2:	d847      	bhi.n	20064 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
   1ffd4:	464c      	mov	r4, r9
	rew = align & -align;
   1ffd6:	4699      	mov	r9, r3
   1ffd8:	e003      	b.n	1ffe2 <sys_heap_aligned_alloc+0x28>
   1ffda:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   1ffdc:	2904      	cmp	r1, #4
   1ffde:	d93c      	bls.n	2005a <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   1ffe0:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1ffe2:	2d00      	cmp	r5, #0
   1ffe4:	d056      	beq.n	20094 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1ffe6:	68b2      	ldr	r2, [r6, #8]
   1ffe8:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   1ffec:	d955      	bls.n	2009a <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1ffee:	1961      	adds	r1, r4, r5
   1fff0:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fff2:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fff4:	08c9      	lsrs	r1, r1, #3
   1fff6:	4630      	mov	r0, r6
   1fff8:	f7ff ff60 	bl	1febc <alloc_chunk>

	if (c0 == 0) {
   1fffc:	4607      	mov	r7, r0
   1fffe:	2800      	cmp	r0, #0
   20000:	d04e      	beq.n	200a0 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   20002:	4601      	mov	r1, r0
   20004:	4630      	mov	r0, r6
   20006:	f7ff fe8b 	bl	1fd20 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2000a:	eb00 0809 	add.w	r8, r0, r9
   2000e:	44a0      	add	r8, r4
   20010:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   20014:	4264      	negs	r4, r4
   20016:	ea08 0804 	and.w	r8, r8, r4
   2001a:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2001e:	eb08 0405 	add.w	r4, r8, r5
   20022:	3407      	adds	r4, #7
   20024:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   20028:	4641      	mov	r1, r8
   2002a:	4630      	mov	r0, r6
   2002c:	f7ff fef9 	bl	1fe22 <mem_to_chunkid>
   20030:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   20032:	1ba4      	subs	r4, r4, r6
   20034:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   20036:	4287      	cmp	r7, r0
   20038:	d318      	bcc.n	2006c <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
   2003a:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   2003c:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   20040:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   20042:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   20046:	429c      	cmp	r4, r3
   20048:	d31a      	bcc.n	20080 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
   2004a:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2004c:	8873      	ldrh	r3, [r6, #2]
   2004e:	f043 0301 	orr.w	r3, r3, #1
   20052:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   20054:	4640      	mov	r0, r8
   20056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   2005a:	4611      	mov	r1, r2
   2005c:	f7ff ff7b 	bl	1ff56 <sys_heap_alloc>
   20060:	4680      	mov	r8, r0
   20062:	e7f7      	b.n	20054 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   20064:	464c      	mov	r4, r9
	rew = align & -align;
   20066:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   20068:	2304      	movs	r3, #4
   2006a:	e7ba      	b.n	1ffe2 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   2006c:	4602      	mov	r2, r0
   2006e:	4639      	mov	r1, r7
   20070:	4630      	mov	r0, r6
   20072:	f7ff fe9f 	bl	1fdb4 <split_chunks>
		free_list_add(h, c0);
   20076:	4639      	mov	r1, r7
   20078:	4630      	mov	r0, r6
   2007a:	f7ff fee2 	bl	1fe42 <free_list_add>
   2007e:	e7dc      	b.n	2003a <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
   20080:	4622      	mov	r2, r4
   20082:	4629      	mov	r1, r5
   20084:	4630      	mov	r0, r6
   20086:	f7ff fe95 	bl	1fdb4 <split_chunks>
		free_list_add(h, c_end);
   2008a:	4621      	mov	r1, r4
   2008c:	4630      	mov	r0, r6
   2008e:	f7ff fed8 	bl	1fe42 <free_list_add>
   20092:	e7da      	b.n	2004a <sys_heap_aligned_alloc+0x90>
		return NULL;
   20094:	f04f 0800 	mov.w	r8, #0
   20098:	e7dc      	b.n	20054 <sys_heap_aligned_alloc+0x9a>
   2009a:	f04f 0800 	mov.w	r8, #0
   2009e:	e7d9      	b.n	20054 <sys_heap_aligned_alloc+0x9a>
		return NULL;
   200a0:	f04f 0800 	mov.w	r8, #0
   200a4:	e7d6      	b.n	20054 <sys_heap_aligned_alloc+0x9a>

000200a6 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   200a6:	b570      	push	{r4, r5, r6, lr}
   200a8:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   200aa:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   200ac:	1dc8      	adds	r0, r1, #7
   200ae:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   200b2:	440a      	add	r2, r1
   200b4:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   200b8:	1a12      	subs	r2, r2, r0
   200ba:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   200bc:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   200be:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   200c0:	2300      	movs	r3, #0
   200c2:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   200c4:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   200c8:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   200cc:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   200d0:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   200d2:	1dce      	adds	r6, r1, #7
   200d4:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   200d6:	e005      	b.n	200e4 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   200d8:	f103 0c04 	add.w	ip, r3, #4
   200dc:	2400      	movs	r4, #0
   200de:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   200e2:	3301      	adds	r3, #1
   200e4:	4573      	cmp	r3, lr
   200e6:	dbf7      	blt.n	200d8 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   200e8:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   200ea:	b2a4      	uxth	r4, r4
   200ec:	8044      	strh	r4, [r0, #2]
   200ee:	f04f 0c00 	mov.w	ip, #0
   200f2:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   200f6:	f044 0401 	orr.w	r4, r4, #1
   200fa:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   200fc:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   200fe:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   20102:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   20106:	1ca5      	adds	r5, r4, #2
   20108:	f820 e005 	strh.w	lr, [r0, r5]
   2010c:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   2010e:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   20112:	1c95      	adds	r5, r2, #2
   20114:	f820 c005 	strh.w	ip, [r0, r5]
   20118:	4402      	add	r2, r0
   2011a:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2011c:	8853      	ldrh	r3, [r2, #2]
   2011e:	f043 0301 	orr.w	r3, r3, #1
   20122:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   20124:	f7ff fe8d 	bl	1fe42 <free_list_add>
}
   20128:	bd70      	pop	{r4, r5, r6, pc}

0002012a <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2012a:	460b      	mov	r3, r1
   2012c:	b139      	cbz	r1, 2013e <sys_slist_remove+0x14>
	return node->next;
   2012e:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   20130:	6019      	str	r1, [r3, #0]
	return list->tail;
   20132:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   20134:	428a      	cmp	r2, r1
   20136:	d009      	beq.n	2014c <sys_slist_remove+0x22>
	parent->next = child;
   20138:	2300      	movs	r3, #0
   2013a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2013c:	4770      	bx	lr
	return node->next;
   2013e:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   20140:	6003      	str	r3, [r0, #0]
	return list->tail;
   20142:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   20144:	428a      	cmp	r2, r1
   20146:	d1f7      	bne.n	20138 <sys_slist_remove+0xe>
	list->tail = node;
   20148:	6043      	str	r3, [r0, #4]
}
   2014a:	e7f5      	b.n	20138 <sys_slist_remove+0xe>
	list->tail = node;
   2014c:	6043      	str	r3, [r0, #4]
}
   2014e:	e7f3      	b.n	20138 <sys_slist_remove+0xe>

00020150 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20150:	b508      	push	{r3, lr}
   20152:	460a      	mov	r2, r1
	return list->head;
   20154:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20156:	2100      	movs	r1, #0
   20158:	e001      	b.n	2015e <sys_slist_find_and_remove+0xe>
   2015a:	4619      	mov	r1, r3
   2015c:	681b      	ldr	r3, [r3, #0]
   2015e:	b12b      	cbz	r3, 2016c <sys_slist_find_and_remove+0x1c>
   20160:	4293      	cmp	r3, r2
   20162:	d1fa      	bne.n	2015a <sys_slist_find_and_remove+0xa>
   20164:	f7ff ffe1 	bl	2012a <sys_slist_remove>
   20168:	2001      	movs	r0, #1
   2016a:	e000      	b.n	2016e <sys_slist_find_and_remove+0x1e>
   2016c:	2000      	movs	r0, #0
   2016e:	bd08      	pop	{r3, pc}

00020170 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   20170:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20174:	8b03      	ldrh	r3, [r0, #24]
   20176:	f023 0307 	bic.w	r3, r3, #7
   2017a:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2017c:	8303      	strh	r3, [r0, #24]
}
   2017e:	4770      	bx	lr

00020180 <notify_monitors>:
{
   20180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20184:	4606      	mov	r6, r0
   20186:	460f      	mov	r7, r1
   20188:	4690      	mov	r8, r2
	return list->head;
   2018a:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2018c:	b121      	cbz	r1, 20198 <notify_monitors+0x18>
	return node->next;
   2018e:	680c      	ldr	r4, [r1, #0]
   20190:	b13c      	cbz	r4, 201a2 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20192:	b931      	cbnz	r1, 201a2 <notify_monitors+0x22>
   20194:	460c      	mov	r4, r1
   20196:	e004      	b.n	201a2 <notify_monitors+0x22>
   20198:	460c      	mov	r4, r1
   2019a:	e002      	b.n	201a2 <notify_monitors+0x22>
   2019c:	4623      	mov	r3, r4
   2019e:	4621      	mov	r1, r4
   201a0:	461c      	mov	r4, r3
   201a2:	b169      	cbz	r1, 201c0 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   201a4:	684d      	ldr	r5, [r1, #4]
   201a6:	4643      	mov	r3, r8
   201a8:	463a      	mov	r2, r7
   201aa:	4630      	mov	r0, r6
   201ac:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   201ae:	2c00      	cmp	r4, #0
   201b0:	d0f4      	beq.n	2019c <notify_monitors+0x1c>
	return node->next;
   201b2:	6823      	ldr	r3, [r4, #0]
   201b4:	2b00      	cmp	r3, #0
   201b6:	d0f2      	beq.n	2019e <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   201b8:	2c00      	cmp	r4, #0
   201ba:	d1f0      	bne.n	2019e <notify_monitors+0x1e>
   201bc:	4623      	mov	r3, r4
   201be:	e7ee      	b.n	2019e <notify_monitors+0x1e>
}
   201c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000201c4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   201c4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   201c6:	f013 0307 	ands.w	r3, r3, #7
   201ca:	d103      	bne.n	201d4 <process_recheck+0x10>
	return list->head;
   201cc:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   201ce:	b10a      	cbz	r2, 201d4 <process_recheck+0x10>
		evt = EVT_START;
   201d0:	2003      	movs	r0, #3
   201d2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   201d4:	2b02      	cmp	r3, #2
   201d6:	d003      	beq.n	201e0 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   201d8:	2b01      	cmp	r3, #1
   201da:	d006      	beq.n	201ea <process_recheck+0x26>
	int evt = EVT_NOP;
   201dc:	2000      	movs	r0, #0
   201de:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   201e0:	8b42      	ldrh	r2, [r0, #26]
   201e2:	2a00      	cmp	r2, #0
   201e4:	d1f8      	bne.n	201d8 <process_recheck+0x14>
		evt = EVT_STOP;
   201e6:	2004      	movs	r0, #4
   201e8:	4770      	bx	lr
   201ea:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   201ec:	b10b      	cbz	r3, 201f2 <process_recheck+0x2e>
		evt = EVT_RESET;
   201ee:	2005      	movs	r0, #5
}
   201f0:	4770      	bx	lr
	int evt = EVT_NOP;
   201f2:	2000      	movs	r0, #0
   201f4:	4770      	bx	lr

000201f6 <process_complete>:
{
   201f6:	b510      	push	{r4, lr}
   201f8:	4604      	mov	r4, r0
   201fa:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   201fc:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   201fe:	2a00      	cmp	r2, #0
   20200:	db07      	blt.n	20212 <process_complete+0x1c>
   20202:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   20206:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   20208:	2a01      	cmp	r2, #1
   2020a:	d90e      	bls.n	2022a <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2020c:	2b04      	cmp	r3, #4
   2020e:	d036      	beq.n	2027e <process_complete+0x88>
}
   20210:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   20212:	e9d0 0100 	ldrd	r0, r1, [r0]
   20216:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   2021a:	2300      	movs	r3, #0
   2021c:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   2021e:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   20220:	2101      	movs	r1, #1
   20222:	4620      	mov	r0, r4
   20224:	f7ff ffa4 	bl	20170 <set_state>
   20228:	e7f2      	b.n	20210 <process_complete+0x1a>
		*clients = mgr->clients;
   2022a:	e9d0 0100 	ldrd	r0, r1, [r0]
   2022e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   20232:	2200      	movs	r2, #0
   20234:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   20236:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   20238:	2b06      	cmp	r3, #6
   2023a:	d11b      	bne.n	20274 <process_complete+0x7e>
	return list->head;
   2023c:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20240:	b153      	cbz	r3, 20258 <process_complete+0x62>
				mgr->refs += 1U;
   20242:	8b62      	ldrh	r2, [r4, #26]
   20244:	3201      	adds	r2, #1
   20246:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20248:	461a      	mov	r2, r3
	return node->next;
   2024a:	681b      	ldr	r3, [r3, #0]
   2024c:	2b00      	cmp	r3, #0
   2024e:	d0f7      	beq.n	20240 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20250:	2a00      	cmp	r2, #0
   20252:	d1f5      	bne.n	20240 <process_complete+0x4a>
   20254:	4613      	mov	r3, r2
   20256:	e7f3      	b.n	20240 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   20258:	2102      	movs	r1, #2
   2025a:	4620      	mov	r0, r4
   2025c:	f7ff ff88 	bl	20170 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   20260:	4620      	mov	r0, r4
   20262:	f7ff ffaf 	bl	201c4 <process_recheck>
   20266:	2800      	cmp	r0, #0
   20268:	d0d2      	beq.n	20210 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2026a:	8b23      	ldrh	r3, [r4, #24]
   2026c:	f043 0320 	orr.w	r3, r3, #32
   20270:	8323      	strh	r3, [r4, #24]
   20272:	e7cd      	b.n	20210 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   20274:	2100      	movs	r1, #0
   20276:	4620      	mov	r0, r4
   20278:	f7ff ff7a 	bl	20170 <set_state>
   2027c:	e7f0      	b.n	20260 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
   2027e:	2100      	movs	r1, #0
   20280:	f7ff ff76 	bl	20170 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   20284:	4620      	mov	r0, r4
   20286:	f7ff ff9d 	bl	201c4 <process_recheck>
   2028a:	2800      	cmp	r0, #0
   2028c:	d0c0      	beq.n	20210 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2028e:	8b23      	ldrh	r3, [r4, #24]
   20290:	f043 0320 	orr.w	r3, r3, #32
   20294:	8323      	strh	r3, [r4, #24]
}
   20296:	e7bb      	b.n	20210 <process_complete+0x1a>

00020298 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   20298:	b150      	cbz	r0, 202b0 <validate_args+0x18>
{
   2029a:	b510      	push	{r4, lr}
   2029c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2029e:	b151      	cbz	r1, 202b6 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   202a0:	1d08      	adds	r0, r1, #4
   202a2:	f000 f90b 	bl	204bc <sys_notify_validate>
	if ((rv == 0)
   202a6:	b910      	cbnz	r0, 202ae <validate_args+0x16>
	    && ((cli->notify.flags
   202a8:	68a3      	ldr	r3, [r4, #8]
   202aa:	2b03      	cmp	r3, #3
   202ac:	d806      	bhi.n	202bc <validate_args+0x24>
}
   202ae:	bd10      	pop	{r4, pc}
		return -EINVAL;
   202b0:	f06f 0015 	mvn.w	r0, #21
}
   202b4:	4770      	bx	lr
		return -EINVAL;
   202b6:	f06f 0015 	mvn.w	r0, #21
   202ba:	e7f8      	b.n	202ae <validate_args+0x16>
		rv = -EINVAL;
   202bc:	f06f 0015 	mvn.w	r0, #21
   202c0:	e7f5      	b.n	202ae <validate_args+0x16>

000202c2 <notify_one>:
{
   202c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202c6:	4607      	mov	r7, r0
   202c8:	460c      	mov	r4, r1
   202ca:	4616      	mov	r6, r2
   202cc:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   202ce:	4619      	mov	r1, r3
   202d0:	1d20      	adds	r0, r4, #4
   202d2:	f000 f912 	bl	204fa <sys_notify_finalize>
	if (cb) {
   202d6:	b128      	cbz	r0, 202e4 <notify_one+0x22>
   202d8:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   202da:	462b      	mov	r3, r5
   202dc:	4632      	mov	r2, r6
   202de:	4621      	mov	r1, r4
   202e0:	4638      	mov	r0, r7
   202e2:	47c0      	blx	r8
}
   202e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000202e8 <notify_all>:
{
   202e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202ec:	4680      	mov	r8, r0
   202ee:	460c      	mov	r4, r1
   202f0:	4617      	mov	r7, r2
   202f2:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   202f4:	e004      	b.n	20300 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   202f6:	4633      	mov	r3, r6
   202f8:	463a      	mov	r2, r7
   202fa:	4640      	mov	r0, r8
   202fc:	f7ff ffe1 	bl	202c2 <notify_one>
	return list->head;
   20300:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   20302:	b131      	cbz	r1, 20312 <notify_all+0x2a>
	return node->next;
   20304:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   20306:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20308:	6863      	ldr	r3, [r4, #4]
   2030a:	428b      	cmp	r3, r1
   2030c:	d1f3      	bne.n	202f6 <notify_all+0xe>
	list->tail = node;
   2030e:	6065      	str	r5, [r4, #4]
}
   20310:	e7f1      	b.n	202f6 <notify_all+0xe>
}
   20312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020316 <transition_complete>:
{
   20316:	b508      	push	{r3, lr}
	__asm__ volatile(
   20318:	f04f 0c40 	mov.w	ip, #64	; 0x40
   2031c:	f3ef 8211 	mrs	r2, BASEPRI
   20320:	f38c 8812 	msr	BASEPRI_MAX, ip
   20324:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   20328:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   2032a:	2101      	movs	r1, #1
   2032c:	f7f0 fade 	bl	108ec <process_event>
}
   20330:	bd08      	pop	{r3, pc}

00020332 <onoff_manager_init>:
	if ((mgr == NULL)
   20332:	4603      	mov	r3, r0
   20334:	b170      	cbz	r0, 20354 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   20336:	b181      	cbz	r1, 2035a <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   20338:	680a      	ldr	r2, [r1, #0]
   2033a:	b18a      	cbz	r2, 20360 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   2033c:	684a      	ldr	r2, [r1, #4]
   2033e:	b192      	cbz	r2, 20366 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   20340:	2000      	movs	r0, #0
   20342:	6018      	str	r0, [r3, #0]
   20344:	6058      	str	r0, [r3, #4]
   20346:	6098      	str	r0, [r3, #8]
   20348:	60d8      	str	r0, [r3, #12]
   2034a:	6118      	str	r0, [r3, #16]
   2034c:	6158      	str	r0, [r3, #20]
   2034e:	6198      	str	r0, [r3, #24]
   20350:	6119      	str	r1, [r3, #16]
	return 0;
   20352:	4770      	bx	lr
		return -EINVAL;
   20354:	f06f 0015 	mvn.w	r0, #21
   20358:	4770      	bx	lr
   2035a:	f06f 0015 	mvn.w	r0, #21
   2035e:	4770      	bx	lr
   20360:	f06f 0015 	mvn.w	r0, #21
   20364:	4770      	bx	lr
   20366:	f06f 0015 	mvn.w	r0, #21
}
   2036a:	4770      	bx	lr

0002036c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2036c:	b570      	push	{r4, r5, r6, lr}
   2036e:	4605      	mov	r5, r0
   20370:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   20372:	f7ff ff91 	bl	20298 <validate_args>

	if (rv < 0) {
   20376:	1e04      	subs	r4, r0, #0
   20378:	db30      	blt.n	203dc <onoff_request+0x70>
   2037a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2037e:	f3ef 8211 	mrs	r2, BASEPRI
   20382:	f383 8812 	msr	BASEPRI_MAX, r3
   20386:	f3bf 8f6f 	isb	sy
   2038a:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2038c:	f8b5 c018 	ldrh.w	ip, [r5, #24]
   20390:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   20394:	8b6b      	ldrh	r3, [r5, #26]
   20396:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2039a:	428b      	cmp	r3, r1
   2039c:	d02c      	beq.n	203f8 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   2039e:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
   203a0:	f1bc 0f02 	cmp.w	ip, #2
   203a4:	d008      	beq.n	203b8 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   203a6:	f1bc 0f06 	cmp.w	ip, #6
   203aa:	d819      	bhi.n	203e0 <onoff_request+0x74>
   203ac:	e8df f00c 	tbb	[pc, ip]
   203b0:	1818181e 	.word	0x1818181e
   203b4:	2a1e      	.short	0x2a1e
   203b6:	1e          	.byte	0x1e
   203b7:	00          	.byte	0x00
		mgr->refs += 1U;
   203b8:	3301      	adds	r3, #1
   203ba:	836b      	strh	r3, [r5, #26]
		notify = true;
   203bc:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
   203be:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
   203c0:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   203c2:	b128      	cbz	r0, 203d0 <onoff_request+0x64>
	parent->next = child;
   203c4:	2000      	movs	r0, #0
   203c6:	6030      	str	r0, [r6, #0]
	return list->tail;
   203c8:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   203ca:	b308      	cbz	r0, 20410 <onoff_request+0xa4>
	parent->next = child;
   203cc:	6006      	str	r6, [r0, #0]
	list->tail = node;
   203ce:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   203d0:	bb09      	cbnz	r1, 20416 <onoff_request+0xaa>
	__asm__ volatile(
   203d2:	f38e 8811 	msr	BASEPRI, lr
   203d6:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   203da:	bb0b      	cbnz	r3, 20420 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   203dc:	4620      	mov	r0, r4
   203de:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   203e0:	f06f 0404 	mvn.w	r4, #4
   203e4:	2300      	movs	r3, #0
   203e6:	4619      	mov	r1, r3
   203e8:	4618      	mov	r0, r3
   203ea:	e7ea      	b.n	203c2 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
   203ec:	fabc f18c 	clz	r1, ip
   203f0:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
   203f2:	2300      	movs	r3, #0
		add_client = true;
   203f4:	2001      	movs	r0, #1
   203f6:	e7e4      	b.n	203c2 <onoff_request+0x56>
		rv = -EAGAIN;
   203f8:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
   203fc:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
   203fe:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
   20400:	4618      	mov	r0, r3
   20402:	e7de      	b.n	203c2 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
   20404:	f06f 0485 	mvn.w	r4, #133	; 0x85
   20408:	2300      	movs	r3, #0
   2040a:	4619      	mov	r1, r3
   2040c:	4618      	mov	r0, r3
   2040e:	e7d8      	b.n	203c2 <onoff_request+0x56>
   20410:	606e      	str	r6, [r5, #4]
	list->head = node;
   20412:	602e      	str	r6, [r5, #0]
}
   20414:	e7dc      	b.n	203d0 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
   20416:	2102      	movs	r1, #2
   20418:	4628      	mov	r0, r5
   2041a:	f7f0 fa67 	bl	108ec <process_event>
   2041e:	e7dd      	b.n	203dc <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
   20420:	2300      	movs	r3, #0
   20422:	4662      	mov	r2, ip
   20424:	4631      	mov	r1, r6
   20426:	4628      	mov	r0, r5
   20428:	f7ff ff4b 	bl	202c2 <notify_one>
   2042c:	e7d6      	b.n	203dc <onoff_request+0x70>

0002042e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2042e:	b510      	push	{r4, lr}
	__asm__ volatile(
   20430:	f04f 0340 	mov.w	r3, #64	; 0x40
   20434:	f3ef 8211 	mrs	r2, BASEPRI
   20438:	f383 8812 	msr	BASEPRI_MAX, r3
   2043c:	f3bf 8f6f 	isb	sy
   20440:	4611      	mov	r1, r2
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20442:	8b03      	ldrh	r3, [r0, #24]
   20444:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   20448:	2b02      	cmp	r3, #2
   2044a:	d007      	beq.n	2045c <onoff_release+0x2e>
		if (state == ONOFF_STATE_ERROR) {
   2044c:	2b01      	cmp	r3, #1
   2044e:	d002      	beq.n	20456 <onoff_release+0x28>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   20450:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
   20454:	e008      	b.n	20468 <onoff_release+0x3a>
			rv = -EIO;
   20456:	f06f 0404 	mvn.w	r4, #4
   2045a:	e005      	b.n	20468 <onoff_release+0x3a>
   2045c:	461c      	mov	r4, r3
	mgr->refs -= 1U;
   2045e:	8b43      	ldrh	r3, [r0, #26]
   20460:	3b01      	subs	r3, #1
   20462:	b29b      	uxth	r3, r3
   20464:	8343      	strh	r3, [r0, #26]
	if (stop) {
   20466:	b12b      	cbz	r3, 20474 <onoff_release+0x46>
	__asm__ volatile(
   20468:	f381 8811 	msr	BASEPRI, r1
   2046c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   20470:	4620      	mov	r0, r4
   20472:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
   20474:	2102      	movs	r1, #2
   20476:	f7f0 fa39 	bl	108ec <process_event>
   2047a:	e7f9      	b.n	20470 <onoff_release+0x42>

0002047c <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
   2047c:	b1c0      	cbz	r0, 204b0 <onoff_cancel+0x34>
   2047e:	b1d1      	cbz	r1, 204b6 <onoff_cancel+0x3a>
{
   20480:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20482:	f04f 0340 	mov.w	r3, #64	; 0x40
   20486:	f3ef 8511 	mrs	r5, BASEPRI
   2048a:	f383 8812 	msr	BASEPRI_MAX, r3
   2048e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20492:	8b03      	ldrh	r3, [r0, #24]
   20494:	f003 0407 	and.w	r4, r3, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   20498:	f7ff fe5a 	bl	20150 <sys_slist_find_and_remove>
   2049c:	b108      	cbz	r0, 204a2 <onoff_cancel+0x26>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   2049e:	4620      	mov	r0, r4
   204a0:	e001      	b.n	204a6 <onoff_cancel+0x2a>
	int rv = -EALREADY;
   204a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
   204a6:	f385 8811 	msr	BASEPRI, r5
   204aa:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   204ae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   204b0:	f06f 0015 	mvn.w	r0, #21
   204b4:	4770      	bx	lr
   204b6:	f06f 0015 	mvn.w	r0, #21
}
   204ba:	4770      	bx	lr

000204bc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   204bc:	4602      	mov	r2, r0
   204be:	b1b0      	cbz	r0, 204ee <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   204c0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   204c2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   204c6:	2b02      	cmp	r3, #2
   204c8:	d00b      	beq.n	204e2 <sys_notify_validate+0x26>
   204ca:	2b03      	cmp	r3, #3
   204cc:	d004      	beq.n	204d8 <sys_notify_validate+0x1c>
   204ce:	2b01      	cmp	r3, #1
   204d0:	d004      	beq.n	204dc <sys_notify_validate+0x20>
   204d2:	f06f 0015 	mvn.w	r0, #21
   204d6:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   204d8:	6803      	ldr	r3, [r0, #0]
   204da:	b15b      	cbz	r3, 204f4 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   204dc:	2000      	movs	r0, #0
   204de:	6090      	str	r0, [r2, #8]
   204e0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   204e2:	6803      	ldr	r3, [r0, #0]
   204e4:	2b00      	cmp	r3, #0
   204e6:	d1f9      	bne.n	204dc <sys_notify_validate+0x20>
			rv = -EINVAL;
   204e8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   204ec:	4770      	bx	lr
		return -EINVAL;
   204ee:	f06f 0015 	mvn.w	r0, #21
   204f2:	4770      	bx	lr
			rv = -EINVAL;
   204f4:	f06f 0015 	mvn.w	r0, #21
   204f8:	4770      	bx	lr

000204fa <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   204fa:	b510      	push	{r4, lr}
   204fc:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   204fe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   20500:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   20504:	6081      	str	r1, [r0, #8]
	switch (method) {
   20506:	2a02      	cmp	r2, #2
   20508:	d004      	beq.n	20514 <sys_notify_finalize+0x1a>
   2050a:	2a03      	cmp	r2, #3
   2050c:	d105      	bne.n	2051a <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2050e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   20510:	2000      	movs	r0, #0
		break;
   20512:	e004      	b.n	2051e <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   20514:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   20516:	2400      	movs	r4, #0
		break;
   20518:	e001      	b.n	2051e <sys_notify_finalize+0x24>
	switch (method) {
   2051a:	2400      	movs	r4, #0
   2051c:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2051e:	2200      	movs	r2, #0
   20520:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   20522:	b108      	cbz	r0, 20528 <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   20524:	f7fa f834 	bl	1a590 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   20528:	4620      	mov	r0, r4
   2052a:	bd10      	pop	{r4, pc}

0002052c <extract_width>:
{
   2052c:	b530      	push	{r4, r5, lr}
   2052e:	b083      	sub	sp, #12
   20530:	4604      	mov	r4, r0
   20532:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   20534:	7803      	ldrb	r3, [r0, #0]
   20536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2053a:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   2053c:	460d      	mov	r5, r1
   2053e:	780b      	ldrb	r3, [r1, #0]
   20540:	2b2a      	cmp	r3, #42	; 0x2a
   20542:	d018      	beq.n	20576 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   20544:	a801      	add	r0, sp, #4
   20546:	f7f0 faa5 	bl	10a94 <extract_decimal>
	if (sp != wp) {
   2054a:	9b01      	ldr	r3, [sp, #4]
   2054c:	429d      	cmp	r5, r3
   2054e:	d00f      	beq.n	20570 <extract_width+0x44>
		conv->width_present = true;
   20550:	7823      	ldrb	r3, [r4, #0]
   20552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20556:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   20558:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   2055a:	b2db      	uxtb	r3, r3
   2055c:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   20560:	2800      	cmp	r0, #0
   20562:	db10      	blt.n	20586 <extract_width+0x5a>
   20564:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   20566:	4313      	orrs	r3, r2
   20568:	7822      	ldrb	r2, [r4, #0]
   2056a:	f363 0241 	bfi	r2, r3, #1, #1
   2056e:	7022      	strb	r2, [r4, #0]
	return sp;
   20570:	9801      	ldr	r0, [sp, #4]
}
   20572:	b003      	add	sp, #12
   20574:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   20576:	7843      	ldrb	r3, [r0, #1]
   20578:	f043 0301 	orr.w	r3, r3, #1
   2057c:	7043      	strb	r3, [r0, #1]
		return ++sp;
   2057e:	4608      	mov	r0, r1
   20580:	3001      	adds	r0, #1
   20582:	9001      	str	r0, [sp, #4]
   20584:	e7f5      	b.n	20572 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   20586:	2201      	movs	r2, #1
   20588:	e7ed      	b.n	20566 <extract_width+0x3a>

0002058a <extract_prec>:
{
   2058a:	b510      	push	{r4, lr}
   2058c:	b082      	sub	sp, #8
   2058e:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   20590:	780b      	ldrb	r3, [r1, #0]
   20592:	2b2e      	cmp	r3, #46	; 0x2e
   20594:	bf14      	ite	ne
   20596:	2300      	movne	r3, #0
   20598:	2301      	moveq	r3, #1
   2059a:	7842      	ldrb	r2, [r0, #1]
   2059c:	f363 0241 	bfi	r2, r3, #1, #1
   205a0:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   205a2:	b1c3      	cbz	r3, 205d6 <extract_prec+0x4c>
   205a4:	4604      	mov	r4, r0
	++sp;
   205a6:	9b01      	ldr	r3, [sp, #4]
   205a8:	1c5a      	adds	r2, r3, #1
   205aa:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   205ac:	785b      	ldrb	r3, [r3, #1]
   205ae:	2b2a      	cmp	r3, #42	; 0x2a
   205b0:	d013      	beq.n	205da <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   205b2:	a801      	add	r0, sp, #4
   205b4:	f7f0 fa6e 	bl	10a94 <extract_decimal>
	conv->prec_value = prec;
   205b8:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   205ba:	7823      	ldrb	r3, [r4, #0]
   205bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   205c0:	2800      	cmp	r0, #0
   205c2:	db12      	blt.n	205ea <extract_prec+0x60>
   205c4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   205c6:	4313      	orrs	r3, r2
   205c8:	7822      	ldrb	r2, [r4, #0]
   205ca:	f363 0241 	bfi	r2, r3, #1, #1
   205ce:	7022      	strb	r2, [r4, #0]
	return sp;
   205d0:	9801      	ldr	r0, [sp, #4]
}
   205d2:	b002      	add	sp, #8
   205d4:	bd10      	pop	{r4, pc}
		return sp;
   205d6:	4608      	mov	r0, r1
   205d8:	e7fb      	b.n	205d2 <extract_prec+0x48>
		conv->prec_star = true;
   205da:	7843      	ldrb	r3, [r0, #1]
   205dc:	f043 0304 	orr.w	r3, r3, #4
   205e0:	7043      	strb	r3, [r0, #1]
		return ++sp;
   205e2:	4610      	mov	r0, r2
   205e4:	3001      	adds	r0, #1
   205e6:	9001      	str	r0, [sp, #4]
   205e8:	e7f3      	b.n	205d2 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   205ea:	2201      	movs	r2, #1
   205ec:	e7eb      	b.n	205c6 <extract_prec+0x3c>

000205ee <extract_length>:
{
   205ee:	4602      	mov	r2, r0
	switch (*sp) {
   205f0:	780b      	ldrb	r3, [r1, #0]
   205f2:	3b4c      	subs	r3, #76	; 0x4c
   205f4:	2b2e      	cmp	r3, #46	; 0x2e
   205f6:	d85b      	bhi.n	206b0 <extract_length+0xc2>
   205f8:	e8df f003 	tbb	[pc, r3]
   205fc:	5a5a5a4f 	.word	0x5a5a5a4f
   20600:	5a5a5a5a 	.word	0x5a5a5a5a
   20604:	5a5a5a5a 	.word	0x5a5a5a5a
   20608:	5a5a5a5a 	.word	0x5a5a5a5a
   2060c:	5a5a5a5a 	.word	0x5a5a5a5a
   20610:	5a5a5a5a 	.word	0x5a5a5a5a
   20614:	5a5a5a5a 	.word	0x5a5a5a5a
   20618:	5a3a5a18 	.word	0x5a3a5a18
   2061c:	5a5a5a29 	.word	0x5a5a5a29
   20620:	5a5a5a5a 	.word	0x5a5a5a5a
   20624:	5a5a5a48 	.word	0x5a5a5a48
   20628:	5a5a      	.short	0x5a5a
   2062a:	41          	.byte	0x41
   2062b:	00          	.byte	0x00
		if (*++sp == 'h') {
   2062c:	1c48      	adds	r0, r1, #1
   2062e:	784b      	ldrb	r3, [r1, #1]
   20630:	2b68      	cmp	r3, #104	; 0x68
   20632:	d005      	beq.n	20640 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   20634:	7853      	ldrb	r3, [r2, #1]
   20636:	2102      	movs	r1, #2
   20638:	f361 03c6 	bfi	r3, r1, #3, #4
   2063c:	7053      	strb	r3, [r2, #1]
   2063e:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   20640:	7853      	ldrb	r3, [r2, #1]
   20642:	2001      	movs	r0, #1
   20644:	f360 03c6 	bfi	r3, r0, #3, #4
   20648:	7053      	strb	r3, [r2, #1]
			++sp;
   2064a:	1c88      	adds	r0, r1, #2
   2064c:	4770      	bx	lr
		if (*++sp == 'l') {
   2064e:	1c48      	adds	r0, r1, #1
   20650:	784b      	ldrb	r3, [r1, #1]
   20652:	2b6c      	cmp	r3, #108	; 0x6c
   20654:	d005      	beq.n	20662 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   20656:	7853      	ldrb	r3, [r2, #1]
   20658:	2103      	movs	r1, #3
   2065a:	f361 03c6 	bfi	r3, r1, #3, #4
   2065e:	7053      	strb	r3, [r2, #1]
   20660:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   20662:	7853      	ldrb	r3, [r2, #1]
   20664:	2004      	movs	r0, #4
   20666:	f360 03c6 	bfi	r3, r0, #3, #4
   2066a:	7053      	strb	r3, [r2, #1]
			++sp;
   2066c:	1c88      	adds	r0, r1, #2
   2066e:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   20670:	7853      	ldrb	r3, [r2, #1]
   20672:	2005      	movs	r0, #5
   20674:	f360 03c6 	bfi	r3, r0, #3, #4
   20678:	7053      	strb	r3, [r2, #1]
		++sp;
   2067a:	1c48      	adds	r0, r1, #1
		break;
   2067c:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   2067e:	7853      	ldrb	r3, [r2, #1]
   20680:	2006      	movs	r0, #6
   20682:	f360 03c6 	bfi	r3, r0, #3, #4
   20686:	7053      	strb	r3, [r2, #1]
		++sp;
   20688:	1c48      	adds	r0, r1, #1
		break;
   2068a:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   2068c:	7853      	ldrb	r3, [r2, #1]
   2068e:	2007      	movs	r0, #7
   20690:	f360 03c6 	bfi	r3, r0, #3, #4
   20694:	7053      	strb	r3, [r2, #1]
		++sp;
   20696:	1c48      	adds	r0, r1, #1
		break;
   20698:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   2069a:	7853      	ldrb	r3, [r2, #1]
   2069c:	2008      	movs	r0, #8
   2069e:	f360 03c6 	bfi	r3, r0, #3, #4
   206a2:	7053      	strb	r3, [r2, #1]
		++sp;
   206a4:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   206a6:	7813      	ldrb	r3, [r2, #0]
   206a8:	f043 0302 	orr.w	r3, r3, #2
   206ac:	7013      	strb	r3, [r2, #0]
		break;
   206ae:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   206b0:	7853      	ldrb	r3, [r2, #1]
   206b2:	f36f 03c6 	bfc	r3, #3, #4
   206b6:	7053      	strb	r3, [r2, #1]
		break;
   206b8:	4608      	mov	r0, r1
}
   206ba:	4770      	bx	lr

000206bc <extract_specifier>:
{
   206bc:	b500      	push	{lr}
   206be:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   206c0:	4608      	mov	r0, r1
   206c2:	f810 3b01 	ldrb.w	r3, [r0], #1
   206c6:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   206c8:	2b78      	cmp	r3, #120	; 0x78
   206ca:	d817      	bhi.n	206fc <extract_specifier+0x40>
   206cc:	2b6e      	cmp	r3, #110	; 0x6e
   206ce:	d245      	bcs.n	2075c <extract_specifier+0xa0>
   206d0:	2b69      	cmp	r3, #105	; 0x69
   206d2:	d813      	bhi.n	206fc <extract_specifier+0x40>
   206d4:	2b58      	cmp	r3, #88	; 0x58
   206d6:	d317      	bcc.n	20708 <extract_specifier+0x4c>
   206d8:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   206dc:	fa5f fc8c 	uxtb.w	ip, ip
   206e0:	2101      	movs	r1, #1
   206e2:	fa01 f10c 	lsl.w	r1, r1, ip
   206e6:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   206ea:	d115      	bne.n	20718 <extract_specifier+0x5c>
   206ec:	f640 0c01 	movw	ip, #2049	; 0x801
   206f0:	ea11 0f0c 	tst.w	r1, ip
   206f4:	d171      	bne.n	207da <extract_specifier+0x11e>
   206f6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   206fa:	d156      	bne.n	207aa <extract_specifier+0xee>
		conv->invalid = true;
   206fc:	7813      	ldrb	r3, [r2, #0]
   206fe:	f043 0301 	orr.w	r3, r3, #1
   20702:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   20704:	2100      	movs	r1, #0
		break;
   20706:	e05e      	b.n	207c6 <extract_specifier+0x10a>
	switch (conv->specifier) {
   20708:	2b41      	cmp	r3, #65	; 0x41
   2070a:	d005      	beq.n	20718 <extract_specifier+0x5c>
   2070c:	d3f6      	bcc.n	206fc <extract_specifier+0x40>
   2070e:	f1a3 0145 	sub.w	r1, r3, #69	; 0x45
   20712:	b2c9      	uxtb	r1, r1
   20714:	2902      	cmp	r1, #2
   20716:	d8f1      	bhi.n	206fc <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   20718:	7891      	ldrb	r1, [r2, #2]
   2071a:	f04f 0c04 	mov.w	ip, #4
   2071e:	f36c 0102 	bfi	r1, ip, #0, #3
   20722:	7091      	strb	r1, [r2, #2]
			|| (conv->specifier == 'A');
   20724:	2b61      	cmp	r3, #97	; 0x61
   20726:	d06c      	beq.n	20802 <extract_specifier+0x146>
   20728:	2b41      	cmp	r3, #65	; 0x41
   2072a:	d068      	beq.n	207fe <extract_specifier+0x142>
   2072c:	2100      	movs	r1, #0
		conv->specifier_a = (conv->specifier == 'a')
   2072e:	7853      	ldrb	r3, [r2, #1]
   20730:	f361 13c7 	bfi	r3, r1, #7, #1
   20734:	7053      	strb	r3, [r2, #1]
		if (conv->specifier_a
   20736:	b2db      	uxtb	r3, r3
   20738:	f992 1001 	ldrsb.w	r1, [r2, #1]
   2073c:	2900      	cmp	r1, #0
   2073e:	db74      	blt.n	2082a <extract_specifier+0x16e>
		if (conv->length_mod == LENGTH_L) {
   20740:	f003 0378 	and.w	r3, r3, #120	; 0x78
   20744:	2b18      	cmp	r3, #24
   20746:	d05e      	beq.n	20806 <extract_specifier+0x14a>
		} else if ((conv->length_mod != LENGTH_NONE)
   20748:	2b00      	cmp	r3, #0
   2074a:	d070      	beq.n	2082e <extract_specifier+0x172>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
   2074c:	2b40      	cmp	r3, #64	; 0x40
   2074e:	d070      	beq.n	20832 <extract_specifier+0x176>
			conv->invalid = true;
   20750:	7813      	ldrb	r3, [r2, #0]
   20752:	f043 0301 	orr.w	r3, r3, #1
   20756:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   20758:	2100      	movs	r1, #0
   2075a:	e034      	b.n	207c6 <extract_specifier+0x10a>
	switch (conv->specifier) {
   2075c:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   20760:	b2c9      	uxtb	r1, r1
   20762:	f04f 0c01 	mov.w	ip, #1
   20766:	fa0c fc01 	lsl.w	ip, ip, r1
   2076a:	f240 4182 	movw	r1, #1154	; 0x482
   2076e:	ea1c 0f01 	tst.w	ip, r1
   20772:	bf14      	ite	ne
   20774:	f04f 0e01 	movne.w	lr, #1
   20778:	f04f 0e00 	moveq.w	lr, #0
   2077c:	d12d      	bne.n	207da <extract_specifier+0x11e>
   2077e:	f01c 0f24 	tst.w	ip, #36	; 0x24
   20782:	bf14      	ite	ne
   20784:	2101      	movne	r1, #1
   20786:	2100      	moveq	r1, #0
   20788:	d143      	bne.n	20812 <extract_specifier+0x156>
   2078a:	f01c 0c01 	ands.w	ip, ip, #1
   2078e:	d0b5      	beq.n	206fc <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   20790:	7893      	ldrb	r3, [r2, #2]
   20792:	f04f 0e03 	mov.w	lr, #3
   20796:	f36e 0302 	bfi	r3, lr, #0, #3
   2079a:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   2079c:	7853      	ldrb	r3, [r2, #1]
   2079e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   207a2:	2b40      	cmp	r3, #64	; 0x40
   207a4:	d10f      	bne.n	207c6 <extract_specifier+0x10a>
			unsupported = true;
   207a6:	4661      	mov	r1, ip
   207a8:	e00d      	b.n	207c6 <extract_specifier+0x10a>
		conv->specifier_cat = SPECIFIER_SINT;
   207aa:	7891      	ldrb	r1, [r2, #2]
   207ac:	f04f 0c01 	mov.w	ip, #1
   207b0:	f36c 0102 	bfi	r1, ip, #0, #3
   207b4:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   207b6:	7851      	ldrb	r1, [r2, #1]
   207b8:	f001 0178 	and.w	r1, r1, #120	; 0x78
   207bc:	2940      	cmp	r1, #64	; 0x40
   207be:	d013      	beq.n	207e8 <extract_specifier+0x12c>
		if (conv->specifier == 'c') {
   207c0:	2b63      	cmp	r3, #99	; 0x63
   207c2:	d018      	beq.n	207f6 <extract_specifier+0x13a>
	bool unsupported = false;
   207c4:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   207c6:	7813      	ldrb	r3, [r2, #0]
   207c8:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   207cc:	ea41 010c 	orr.w	r1, r1, ip
   207d0:	f361 0341 	bfi	r3, r1, #1, #1
   207d4:	7013      	strb	r3, [r2, #0]
}
   207d6:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   207da:	7891      	ldrb	r1, [r2, #2]
   207dc:	f04f 0c02 	mov.w	ip, #2
   207e0:	f36c 0102 	bfi	r1, ip, #0, #3
   207e4:	7091      	strb	r1, [r2, #2]
   207e6:	e7e6      	b.n	207b6 <extract_specifier+0xfa>
			conv->invalid = true;
   207e8:	f892 c000 	ldrb.w	ip, [r2]
   207ec:	f04c 0c01 	orr.w	ip, ip, #1
   207f0:	f882 c000 	strb.w	ip, [r2]
   207f4:	e7e4      	b.n	207c0 <extract_specifier+0x104>
			unsupported = (conv->length_mod != LENGTH_NONE);
   207f6:	3900      	subs	r1, #0
   207f8:	bf18      	it	ne
   207fa:	2101      	movne	r1, #1
   207fc:	e7e3      	b.n	207c6 <extract_specifier+0x10a>
			|| (conv->specifier == 'A');
   207fe:	2101      	movs	r1, #1
   20800:	e795      	b.n	2072e <extract_specifier+0x72>
   20802:	2101      	movs	r1, #1
   20804:	e793      	b.n	2072e <extract_specifier+0x72>
			conv->length_mod = LENGTH_NONE;
   20806:	7853      	ldrb	r3, [r2, #1]
   20808:	f36f 03c6 	bfc	r3, #3, #4
   2080c:	7053      	strb	r3, [r2, #1]
	bool unsupported = false;
   2080e:	2100      	movs	r1, #0
   20810:	e7d9      	b.n	207c6 <extract_specifier+0x10a>
		conv->specifier_cat = SPECIFIER_PTR;
   20812:	7893      	ldrb	r3, [r2, #2]
   20814:	f04f 0c03 	mov.w	ip, #3
   20818:	f36c 0302 	bfi	r3, ip, #0, #3
   2081c:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   2081e:	7853      	ldrb	r3, [r2, #1]
   20820:	f013 0f78 	tst.w	r3, #120	; 0x78
   20824:	d1cf      	bne.n	207c6 <extract_specifier+0x10a>
	bool unsupported = false;
   20826:	4671      	mov	r1, lr
   20828:	e7cd      	b.n	207c6 <extract_specifier+0x10a>
			unsupported = true;
   2082a:	2101      	movs	r1, #1
   2082c:	e7cb      	b.n	207c6 <extract_specifier+0x10a>
	bool unsupported = false;
   2082e:	2100      	movs	r1, #0
   20830:	e7c9      	b.n	207c6 <extract_specifier+0x10a>
   20832:	2100      	movs	r1, #0
   20834:	e7c7      	b.n	207c6 <extract_specifier+0x10a>

00020836 <extract_conversion>:
{
   20836:	b510      	push	{r4, lr}
   20838:	4604      	mov	r4, r0
   2083a:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   2083c:	2300      	movs	r3, #0
   2083e:	6023      	str	r3, [r4, #0]
   20840:	6063      	str	r3, [r4, #4]
   20842:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   20844:	784b      	ldrb	r3, [r1, #1]
   20846:	2b25      	cmp	r3, #37	; 0x25
   20848:	d014      	beq.n	20874 <extract_conversion+0x3e>
   2084a:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   2084c:	4620      	mov	r0, r4
   2084e:	f7f0 f937 	bl	10ac0 <extract_flags>
   20852:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   20854:	4620      	mov	r0, r4
   20856:	f7ff fe69 	bl	2052c <extract_width>
   2085a:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   2085c:	4620      	mov	r0, r4
   2085e:	f7ff fe94 	bl	2058a <extract_prec>
   20862:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   20864:	4620      	mov	r0, r4
   20866:	f7ff fec2 	bl	205ee <extract_length>
   2086a:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   2086c:	4620      	mov	r0, r4
   2086e:	f7ff ff25 	bl	206bc <extract_specifier>
}
   20872:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   20874:	3002      	adds	r0, #2
   20876:	70e3      	strb	r3, [r4, #3]
		return sp;
   20878:	e7fb      	b.n	20872 <extract_conversion+0x3c>

0002087a <_ldiv5>:
{
   2087a:	b500      	push	{lr}
	uint32_t v_lo = *v;
   2087c:	6802      	ldr	r2, [r0, #0]
   2087e:	6841      	ldr	r1, [r0, #4]
	__asm__ ("" : "+r" (m));
   20880:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
   20884:	469e      	mov	lr, r3
	result += (uint64_t)v_lo * m;
   20886:	fba2 2c03 	umull	r2, ip, r2, r3
   2088a:	eb12 0e0e 	adds.w	lr, r2, lr
   2088e:	eb43 0e0c 	adc.w	lr, r3, ip
	result += (uint64_t)v_lo * m;
   20892:	eb12 020e 	adds.w	r2, r2, lr
   20896:	f14c 0c00 	adc.w	ip, ip, #0
	result += (uint64_t)v_hi * m;
   2089a:	fba1 1303 	umull	r1, r3, r1, r3
   2089e:	188a      	adds	r2, r1, r2
   208a0:	eb43 020c 	adc.w	r2, r3, ip
	result += (uint64_t)v_hi * m;
   208a4:	1889      	adds	r1, r1, r2
   208a6:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   208aa:	6001      	str	r1, [r0, #0]
   208ac:	6043      	str	r3, [r0, #4]
}
   208ae:	f85d fb04 	ldr.w	pc, [sp], #4

000208b2 <_ldiv10>:
{
   208b2:	b508      	push	{r3, lr}
	*v >>= 1;
   208b4:	6802      	ldr	r2, [r0, #0]
   208b6:	6841      	ldr	r1, [r0, #4]
   208b8:	0852      	lsrs	r2, r2, #1
   208ba:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   208be:	0849      	lsrs	r1, r1, #1
   208c0:	6002      	str	r2, [r0, #0]
   208c2:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
   208c4:	f7ff ffd9 	bl	2087a <_ldiv5>
}
   208c8:	bd08      	pop	{r3, pc}

000208ca <_get_digit>:
{
   208ca:	4684      	mov	ip, r0
	if (*digit_count > 0) {
   208cc:	680b      	ldr	r3, [r1, #0]
   208ce:	2b00      	cmp	r3, #0
   208d0:	dd17      	ble.n	20902 <_get_digit+0x38>
		--*digit_count;
   208d2:	3b01      	subs	r3, #1
   208d4:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   208d6:	6801      	ldr	r1, [r0, #0]
   208d8:	6843      	ldr	r3, [r0, #4]
   208da:	0098      	lsls	r0, r3, #2
   208dc:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
   208e0:	008a      	lsls	r2, r1, #2
   208e2:	1852      	adds	r2, r2, r1
   208e4:	eb43 0300 	adc.w	r3, r3, r0
   208e8:	1892      	adds	r2, r2, r2
   208ea:	415b      	adcs	r3, r3
   208ec:	f8cc 2000 	str.w	r2, [ip]
   208f0:	f8cc 3004 	str.w	r3, [ip, #4]
		rval = ((*fr >> 60) & 0xF) + '0';
   208f4:	0f18      	lsrs	r0, r3, #28
   208f6:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
   208f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   208fc:	f8cc 3004 	str.w	r3, [ip, #4]
   20900:	4770      	bx	lr
		rval = '0';
   20902:	2030      	movs	r0, #48	; 0x30
}
   20904:	4770      	bx	lr

00020906 <conversion_radix>:
	switch (specifier) {
   20906:	286f      	cmp	r0, #111	; 0x6f
   20908:	d00c      	beq.n	20924 <conversion_radix+0x1e>
   2090a:	d905      	bls.n	20918 <conversion_radix+0x12>
   2090c:	2870      	cmp	r0, #112	; 0x70
   2090e:	d00b      	beq.n	20928 <conversion_radix+0x22>
   20910:	2878      	cmp	r0, #120	; 0x78
   20912:	d10b      	bne.n	2092c <conversion_radix+0x26>
		return 16;
   20914:	2010      	movs	r0, #16
   20916:	4770      	bx	lr
	switch (specifier) {
   20918:	2858      	cmp	r0, #88	; 0x58
   2091a:	d001      	beq.n	20920 <conversion_radix+0x1a>
   2091c:	200a      	movs	r0, #10
   2091e:	4770      	bx	lr
		return 16;
   20920:	2010      	movs	r0, #16
   20922:	4770      	bx	lr
		return 8;
   20924:	2008      	movs	r0, #8
   20926:	4770      	bx	lr
		return 16;
   20928:	2010      	movs	r0, #16
   2092a:	4770      	bx	lr
	switch (specifier) {
   2092c:	200a      	movs	r0, #10
}
   2092e:	4770      	bx	lr

00020930 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   20930:	7843      	ldrb	r3, [r0, #1]
   20932:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20936:	2b07      	cmp	r3, #7
   20938:	d818      	bhi.n	2096c <store_count+0x3c>
   2093a:	e8df f003 	tbb	[pc, r3]
   2093e:	0604      	.short	0x0604
   20940:	100c0a08 	.word	0x100c0a08
   20944:	1614      	.short	0x1614
		*(int *)dp = count;
   20946:	600a      	str	r2, [r1, #0]
		break;
   20948:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   2094a:	700a      	strb	r2, [r1, #0]
		break;
   2094c:	4770      	bx	lr
		*(short *)dp = (short)count;
   2094e:	800a      	strh	r2, [r1, #0]
		break;
   20950:	4770      	bx	lr
		*(long *)dp = (long)count;
   20952:	600a      	str	r2, [r1, #0]
		break;
   20954:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   20956:	17d3      	asrs	r3, r2, #31
   20958:	600a      	str	r2, [r1, #0]
   2095a:	604b      	str	r3, [r1, #4]
		break;
   2095c:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   2095e:	17d3      	asrs	r3, r2, #31
   20960:	600a      	str	r2, [r1, #0]
   20962:	604b      	str	r3, [r1, #4]
		break;
   20964:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   20966:	600a      	str	r2, [r1, #0]
		break;
   20968:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   2096a:	600a      	str	r2, [r1, #0]
}
   2096c:	4770      	bx	lr

0002096e <outs>:
{
   2096e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20972:	4607      	mov	r7, r0
   20974:	460e      	mov	r6, r1
   20976:	4614      	mov	r4, r2
   20978:	4698      	mov	r8, r3
	size_t count = 0;
   2097a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2097c:	e006      	b.n	2098c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   2097e:	4631      	mov	r1, r6
   20980:	f814 0b01 	ldrb.w	r0, [r4], #1
   20984:	47b8      	blx	r7
		if (rc < 0) {
   20986:	2800      	cmp	r0, #0
   20988:	db09      	blt.n	2099e <outs+0x30>
		++count;
   2098a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2098c:	4544      	cmp	r4, r8
   2098e:	d3f6      	bcc.n	2097e <outs+0x10>
   20990:	f1b8 0f00 	cmp.w	r8, #0
   20994:	d102      	bne.n	2099c <outs+0x2e>
   20996:	7823      	ldrb	r3, [r4, #0]
   20998:	2b00      	cmp	r3, #0
   2099a:	d1f0      	bne.n	2097e <outs+0x10>
	return (int)count;
   2099c:	4628      	mov	r0, r5
}
   2099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000209a2 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   209a2:	b4f0      	push	{r4, r5, r6, r7}
   209a4:	4603      	mov	r3, r0
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
   209a6:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
   209a8:	6845      	ldr	r5, [r0, #4]
   209aa:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   209ac:	69dc      	ldr	r4, [r3, #28]
   209ae:	4284      	cmp	r4, r0
   209b0:	d914      	bls.n	209dc <ring_buf_put_claim+0x3a>
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
   209b2:	1a20      	subs	r0, r4, r0
	return buf->size - (buf->put_head - buf->get_tail);
   209b4:	695f      	ldr	r7, [r3, #20]
   209b6:	eba5 0c07 	sub.w	ip, r5, r7
   209ba:	eba4 040c 	sub.w	r4, r4, ip

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
   209be:	42a2      	cmp	r2, r4
   209c0:	bf28      	it	cs
   209c2:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
   209c4:	4290      	cmp	r0, r2
   209c6:	bf28      	it	cs
   209c8:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->put_head - base];
   209ca:	681a      	ldr	r2, [r3, #0]
   209cc:	1bad      	subs	r5, r5, r6
   209ce:	442a      	add	r2, r5
   209d0:	600a      	str	r2, [r1, #0]
	buf->put_head += size;
   209d2:	685a      	ldr	r2, [r3, #4]
   209d4:	4402      	add	r2, r0
   209d6:	605a      	str	r2, [r3, #4]

	return size;
}
   209d8:	bcf0      	pop	{r4, r5, r6, r7}
   209da:	4770      	bx	lr
		wrap_size -= buf->size;
   209dc:	1b00      	subs	r0, r0, r4
		base += buf->size;
   209de:	4426      	add	r6, r4
   209e0:	e7e7      	b.n	209b2 <ring_buf_put_claim+0x10>

000209e2 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   209e2:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   209e4:	6844      	ldr	r4, [r0, #4]
   209e6:	6883      	ldr	r3, [r0, #8]
   209e8:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
   209ea:	428c      	cmp	r4, r1
   209ec:	bf2c      	ite	cs
   209ee:	2400      	movcs	r4, #0
   209f0:	2401      	movcc	r4, #1
   209f2:	b98c      	cbnz	r4, 20a18 <ring_buf_put_finish+0x36>
   209f4:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->put_tail += size;
   209f6:	4419      	add	r1, r3
   209f8:	6081      	str	r1, [r0, #8]
	buf->put_head = buf->put_tail;
   209fa:	6041      	str	r1, [r0, #4]

	wrap_size = buf->put_tail - buf->put_base;
   209fc:	68c5      	ldr	r5, [r0, #12]
   209fe:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
   20a00:	69c3      	ldr	r3, [r0, #28]
   20a02:	428b      	cmp	r3, r1
   20a04:	bf8c      	ite	hi
   20a06:	2000      	movhi	r0, #0
   20a08:	2001      	movls	r0, #1
   20a0a:	b908      	cbnz	r0, 20a10 <ring_buf_put_finish+0x2e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
}
   20a0c:	bc30      	pop	{r4, r5}
   20a0e:	4770      	bx	lr
		buf->put_base += buf->size;
   20a10:	442b      	add	r3, r5
   20a12:	60d3      	str	r3, [r2, #12]
	return 0;
   20a14:	4620      	mov	r0, r4
   20a16:	e7f9      	b.n	20a0c <ring_buf_put_finish+0x2a>
		return -EINVAL;
   20a18:	f06f 0015 	mvn.w	r0, #21
   20a1c:	e7f6      	b.n	20a0c <ring_buf_put_finish+0x2a>

00020a1e <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   20a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a22:	b082      	sub	sp, #8
   20a24:	4680      	mov	r8, r0
   20a26:	460e      	mov	r6, r1
   20a28:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   20a2a:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   20a2c:	462a      	mov	r2, r5
   20a2e:	a901      	add	r1, sp, #4
   20a30:	4640      	mov	r0, r8
   20a32:	f7ff ffb6 	bl	209a2 <ring_buf_put_claim>
   20a36:	4604      	mov	r4, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20a38:	4602      	mov	r2, r0
   20a3a:	4631      	mov	r1, r6
   20a3c:	9801      	ldr	r0, [sp, #4]
   20a3e:	f004 f9e4 	bl	24e0a <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
   20a42:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   20a44:	4426      	add	r6, r4
	} while (size && partial_size);
   20a46:	1b2d      	subs	r5, r5, r4
   20a48:	d001      	beq.n	20a4e <ring_buf_put+0x30>
   20a4a:	2c00      	cmp	r4, #0
   20a4c:	d1ee      	bne.n	20a2c <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   20a4e:	4639      	mov	r1, r7
   20a50:	4640      	mov	r0, r8
   20a52:	f7ff ffc6 	bl	209e2 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   20a56:	4638      	mov	r0, r7
   20a58:	b002      	add	sp, #8
   20a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020a5e <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   20a5e:	b470      	push	{r4, r5, r6}
   20a60:	4603      	mov	r3, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   20a62:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   20a64:	6905      	ldr	r5, [r0, #16]
   20a66:	1ba8      	subs	r0, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   20a68:	69dc      	ldr	r4, [r3, #28]
   20a6a:	4284      	cmp	r4, r0
   20a6c:	d911      	bls.n	20a92 <ring_buf_get_claim+0x34>
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
	}
	wrap_size = buf->size - wrap_size;
   20a6e:	1a20      	subs	r0, r4, r0
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   20a70:	689c      	ldr	r4, [r3, #8]
   20a72:	1b64      	subs	r4, r4, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
   20a74:	42a2      	cmp	r2, r4
   20a76:	bf28      	it	cs
   20a78:	4622      	movcs	r2, r4
	size = MIN(size, wrap_size);
   20a7a:	4290      	cmp	r0, r2
   20a7c:	bf28      	it	cs
   20a7e:	4610      	movcs	r0, r2

	*data = &buf->buffer[buf->get_head - base];
   20a80:	681a      	ldr	r2, [r3, #0]
   20a82:	1bad      	subs	r5, r5, r6
   20a84:	442a      	add	r2, r5
   20a86:	600a      	str	r2, [r1, #0]
	buf->get_head += size;
   20a88:	691a      	ldr	r2, [r3, #16]
   20a8a:	4402      	add	r2, r0
   20a8c:	611a      	str	r2, [r3, #16]

	return size;
}
   20a8e:	bc70      	pop	{r4, r5, r6}
   20a90:	4770      	bx	lr
		wrap_size -= buf->size;
   20a92:	1b00      	subs	r0, r0, r4
		base += buf->size;
   20a94:	4426      	add	r6, r4
   20a96:	e7ea      	b.n	20a6e <ring_buf_get_claim+0x10>

00020a98 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   20a98:	b430      	push	{r4, r5}
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   20a9a:	6904      	ldr	r4, [r0, #16]
   20a9c:	6943      	ldr	r3, [r0, #20]
   20a9e:	1ae4      	subs	r4, r4, r3
	if (unlikely(size > finish_space)) {
   20aa0:	428c      	cmp	r4, r1
   20aa2:	bf2c      	ite	cs
   20aa4:	2400      	movcs	r4, #0
   20aa6:	2401      	movcc	r4, #1
   20aa8:	b98c      	cbnz	r4, 20ace <ring_buf_get_finish+0x36>
   20aaa:	4602      	mov	r2, r0
		return -EINVAL;
	}

	buf->get_tail += size;
   20aac:	4419      	add	r1, r3
   20aae:	6141      	str	r1, [r0, #20]
	buf->get_head = buf->get_tail;
   20ab0:	6101      	str	r1, [r0, #16]

	wrap_size = buf->get_tail - buf->get_base;
   20ab2:	6985      	ldr	r5, [r0, #24]
   20ab4:	1b49      	subs	r1, r1, r5
	if (unlikely(wrap_size >= buf->size)) {
   20ab6:	69c3      	ldr	r3, [r0, #28]
   20ab8:	428b      	cmp	r3, r1
   20aba:	bf8c      	ite	hi
   20abc:	2000      	movhi	r0, #0
   20abe:	2001      	movls	r0, #1
   20ac0:	b908      	cbnz	r0, 20ac6 <ring_buf_get_finish+0x2e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
}
   20ac2:	bc30      	pop	{r4, r5}
   20ac4:	4770      	bx	lr
		buf->get_base += buf->size;
   20ac6:	442b      	add	r3, r5
   20ac8:	6193      	str	r3, [r2, #24]
	return 0;
   20aca:	4620      	mov	r0, r4
   20acc:	e7f9      	b.n	20ac2 <ring_buf_get_finish+0x2a>
		return -EINVAL;
   20ace:	f06f 0015 	mvn.w	r0, #21
   20ad2:	e7f6      	b.n	20ac2 <ring_buf_get_finish+0x2a>

00020ad4 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   20ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ad8:	b082      	sub	sp, #8
   20ada:	4680      	mov	r8, r0
   20adc:	460e      	mov	r6, r1
   20ade:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   20ae0:	2700      	movs	r7, #0
   20ae2:	e009      	b.n	20af8 <ring_buf_get+0x24>
   20ae4:	4602      	mov	r2, r0
   20ae6:	9901      	ldr	r1, [sp, #4]
   20ae8:	4630      	mov	r0, r6
   20aea:	f004 f98e 	bl	24e0a <memcpy>

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
			data += partial_size;
   20aee:	4426      	add	r6, r4
		}
		total_size += partial_size;
   20af0:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   20af2:	1b2d      	subs	r5, r5, r4
   20af4:	d009      	beq.n	20b0a <ring_buf_get+0x36>
   20af6:	b144      	cbz	r4, 20b0a <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   20af8:	462a      	mov	r2, r5
   20afa:	a901      	add	r1, sp, #4
   20afc:	4640      	mov	r0, r8
   20afe:	f7ff ffae 	bl	20a5e <ring_buf_get_claim>
   20b02:	4604      	mov	r4, r0
		if (data) {
   20b04:	2e00      	cmp	r6, #0
   20b06:	d1ed      	bne.n	20ae4 <ring_buf_get+0x10>
   20b08:	e7f2      	b.n	20af0 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   20b0a:	4639      	mov	r1, r7
   20b0c:	4640      	mov	r0, r8
   20b0e:	f7ff ffc3 	bl	20a98 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   20b12:	4638      	mov	r0, r7
   20b14:	b002      	add	sp, #8
   20b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020b1a <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   20b1a:	b40f      	push	{r0, r1, r2, r3}
   20b1c:	b500      	push	{lr}
   20b1e:	b083      	sub	sp, #12
   20b20:	a904      	add	r1, sp, #16
   20b22:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   20b26:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   20b28:	f7ef fed2 	bl	108d0 <vprintk>

	va_end(ap);
}
   20b2c:	b003      	add	sp, #12
   20b2e:	f85d eb04 	ldr.w	lr, [sp], #4
   20b32:	b004      	add	sp, #16
   20b34:	4770      	bx	lr

00020b36 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   20b36:	4770      	bx	lr

00020b38 <nvs_flash_rd>:
}

/* basic flash read from nvs address */
static int nvs_flash_rd(struct nvs_fs *fs, uint32_t addr, void *data,
			 size_t len)
{
   20b38:	b538      	push	{r3, r4, r5, lr}
	int rc;
	off_t offset;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20b3a:	8984      	ldrh	r4, [r0, #12]
   20b3c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   20b40:	6805      	ldr	r5, [r0, #0]
   20b42:	fb0c 5c04 	mla	ip, ip, r4, r5
	offset += addr & ADDR_OFFS_MASK;
   20b46:	fa1c f181 	uxtah	r1, ip, r1

	rc = flash_read(fs->flash_device, offset, data, len);
   20b4a:	6a80      	ldr	r0, [r0, #40]	; 0x28

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
   20b4c:	6884      	ldr	r4, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   20b4e:	6824      	ldr	r4, [r4, #0]
   20b50:	47a0      	blx	r4
	return rc;
}
   20b52:	bd38      	pop	{r3, r4, r5, pc}

00020b54 <nvs_flash_ate_rd>:
}

/* flash ate read */
static int nvs_flash_ate_rd(struct nvs_fs *fs, uint32_t addr,
			     struct nvs_ate *entry)
{
   20b54:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   20b56:	2308      	movs	r3, #8
   20b58:	f7ff ffee 	bl	20b38 <nvs_flash_rd>
}
   20b5c:	bd08      	pop	{r3, pc}

00020b5e <nvs_ate_cmp_const>:
static int nvs_ate_cmp_const(const struct nvs_ate *entry, uint8_t value)
{
	const uint8_t *data8 = (const uint8_t *)entry;
	int i;

	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   20b5e:	2300      	movs	r3, #0
   20b60:	2b07      	cmp	r3, #7
   20b62:	d804      	bhi.n	20b6e <nvs_ate_cmp_const+0x10>
		if (data8[i] != value) {
   20b64:	5cc2      	ldrb	r2, [r0, r3]
   20b66:	428a      	cmp	r2, r1
   20b68:	d103      	bne.n	20b72 <nvs_ate_cmp_const+0x14>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   20b6a:	3301      	adds	r3, #1
   20b6c:	e7f8      	b.n	20b60 <nvs_ate_cmp_const+0x2>
			return 1;
		}
	}

	return 0;
   20b6e:	2000      	movs	r0, #0
   20b70:	4770      	bx	lr
			return 1;
   20b72:	2001      	movs	r0, #1
}
   20b74:	4770      	bx	lr

00020b76 <nvs_sector_advance>:
	return nvs_recover_last_ate(fs, addr);
}

static void nvs_sector_advance(struct nvs_fs *fs, uint32_t *addr)
{
	*addr += (1 << ADDR_SECT_SHIFT);
   20b76:	680b      	ldr	r3, [r1, #0]
   20b78:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   20b7c:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   20b7e:	89c2      	ldrh	r2, [r0, #14]
   20b80:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   20b84:	d000      	beq.n	20b88 <nvs_sector_advance+0x12>
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
	}
}
   20b86:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   20b88:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
   20b8c:	600b      	str	r3, [r1, #0]
}
   20b8e:	e7fa      	b.n	20b86 <nvs_sector_advance+0x10>

00020b90 <nvs_flash_block_cmp>:
{
   20b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20b94:	b089      	sub	sp, #36	; 0x24
   20b96:	4681      	mov	r9, r0
   20b98:	460e      	mov	r6, r1
   20b9a:	4617      	mov	r7, r2
   20b9c:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   20b9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20ba0:	681b      	ldr	r3, [r3, #0]
   20ba2:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   20ba6:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   20baa:	e002      	b.n	20bb2 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
   20bac:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
   20bae:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
   20bb0:	4427      	add	r7, r4
	while (len) {
   20bb2:	b1a5      	cbz	r5, 20bde <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
   20bb4:	462c      	mov	r4, r5
   20bb6:	4545      	cmp	r5, r8
   20bb8:	bf28      	it	cs
   20bba:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   20bbc:	4623      	mov	r3, r4
   20bbe:	466a      	mov	r2, sp
   20bc0:	4631      	mov	r1, r6
   20bc2:	4648      	mov	r0, r9
   20bc4:	f7ff ffb8 	bl	20b38 <nvs_flash_rd>
		if (rc) {
   20bc8:	4603      	mov	r3, r0
   20bca:	b948      	cbnz	r0, 20be0 <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
   20bcc:	4622      	mov	r2, r4
   20bce:	4669      	mov	r1, sp
   20bd0:	4638      	mov	r0, r7
   20bd2:	f004 f90a 	bl	24dea <memcmp>
		if (rc) {
   20bd6:	2800      	cmp	r0, #0
   20bd8:	d0e8      	beq.n	20bac <nvs_flash_block_cmp+0x1c>
			return 1;
   20bda:	2301      	movs	r3, #1
   20bdc:	e000      	b.n	20be0 <nvs_flash_block_cmp+0x50>
	return 0;
   20bde:	2300      	movs	r3, #0
}
   20be0:	4618      	mov	r0, r3
   20be2:	b009      	add	sp, #36	; 0x24
   20be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00020be8 <nvs_flash_cmp_const>:
{
   20be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20bec:	b088      	sub	sp, #32
   20bee:	4680      	mov	r8, r0
   20bf0:	460e      	mov	r6, r1
   20bf2:	4611      	mov	r1, r2
   20bf4:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   20bf6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20bf8:	681f      	ldr	r7, [r3, #0]
   20bfa:	427f      	negs	r7, r7
	block_size =
   20bfc:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   20c00:	2320      	movs	r3, #32
   20c02:	463a      	mov	r2, r7
   20c04:	4668      	mov	r0, sp
   20c06:	f004 f929 	bl	24e5c <__memset_chk>
   20c0a:	e001      	b.n	20c10 <nvs_flash_cmp_const+0x28>
		len -= bytes_to_cmp;
   20c0c:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   20c0e:	442e      	add	r6, r5
	while (len) {
   20c10:	b16c      	cbz	r4, 20c2e <nvs_flash_cmp_const+0x46>
		bytes_to_cmp = MIN(block_size, len);
   20c12:	4625      	mov	r5, r4
   20c14:	42bc      	cmp	r4, r7
   20c16:	bf28      	it	cs
   20c18:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   20c1a:	462b      	mov	r3, r5
   20c1c:	466a      	mov	r2, sp
   20c1e:	4631      	mov	r1, r6
   20c20:	4640      	mov	r0, r8
   20c22:	f7ff ffb5 	bl	20b90 <nvs_flash_block_cmp>
		if (rc) {
   20c26:	4603      	mov	r3, r0
   20c28:	2800      	cmp	r0, #0
   20c2a:	d0ef      	beq.n	20c0c <nvs_flash_cmp_const+0x24>
   20c2c:	e000      	b.n	20c30 <nvs_flash_cmp_const+0x48>
	return 0;
   20c2e:	2300      	movs	r3, #0
}
   20c30:	4618      	mov	r0, r3
   20c32:	b008      	add	sp, #32
   20c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020c38 <nvs_flash_erase_sector>:
{
   20c38:	b570      	push	{r4, r5, r6, lr}
   20c3a:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   20c3c:	0c0d      	lsrs	r5, r1, #16
	offset = fs->offset;
   20c3e:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20c40:	8982      	ldrh	r2, [r0, #12]
   20c42:	0c09      	lsrs	r1, r1, #16
   20c44:	fb01 3102 	mla	r1, r1, r2, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   20c48:	6a80      	ldr	r0, [r0, #40]	; 0x28
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   20c4a:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
   20c4c:	689b      	ldr	r3, [r3, #8]
   20c4e:	4798      	blx	r3
	if (rc) {
   20c50:	4606      	mov	r6, r0
   20c52:	b108      	cbz	r0, 20c58 <nvs_flash_erase_sector+0x20>
}
   20c54:	4630      	mov	r0, r6
   20c56:	bd70      	pop	{r4, r5, r6, pc}
   20c58:	042d      	lsls	r5, r5, #16
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   20c5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   20c5c:	89a3      	ldrh	r3, [r4, #12]
   20c5e:	7912      	ldrb	r2, [r2, #4]
   20c60:	4629      	mov	r1, r5
   20c62:	4620      	mov	r0, r4
   20c64:	f7ff ffc0 	bl	20be8 <nvs_flash_cmp_const>
   20c68:	2800      	cmp	r0, #0
   20c6a:	d0f3      	beq.n	20c54 <nvs_flash_erase_sector+0x1c>
		rc = -ENXIO;
   20c6c:	f06f 0605 	mvn.w	r6, #5
   20c70:	e7f0      	b.n	20c54 <nvs_flash_erase_sector+0x1c>

00020c72 <nvs_ate_crc8_check>:
{
   20c72:	b510      	push	{r4, lr}
   20c74:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   20c76:	2207      	movs	r2, #7
   20c78:	4601      	mov	r1, r0
   20c7a:	20ff      	movs	r0, #255	; 0xff
   20c7c:	f7ef feec 	bl	10a58 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   20c80:	79e3      	ldrb	r3, [r4, #7]
   20c82:	4283      	cmp	r3, r0
   20c84:	d001      	beq.n	20c8a <nvs_ate_crc8_check+0x18>
	return 1;
   20c86:	2001      	movs	r0, #1
}
   20c88:	bd10      	pop	{r4, pc}
		return 0;
   20c8a:	2000      	movs	r0, #0
   20c8c:	e7fc      	b.n	20c88 <nvs_ate_crc8_check+0x16>

00020c8e <nvs_ate_valid>:
{
   20c8e:	b570      	push	{r4, r5, r6, lr}
   20c90:	4604      	mov	r4, r0
   20c92:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20c94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20c96:	681b      	ldr	r3, [r3, #0]
   20c98:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   20c9a:	2a01      	cmp	r2, #1
   20c9c:	d90d      	bls.n	20cba <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20c9e:	1dd6      	adds	r6, r2, #7
   20ca0:	4253      	negs	r3, r2
   20ca2:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   20ca4:	4628      	mov	r0, r5
   20ca6:	f7ff ffe4 	bl	20c72 <nvs_ate_crc8_check>
   20caa:	b940      	cbnz	r0, 20cbe <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   20cac:	886a      	ldrh	r2, [r5, #2]
   20cae:	89a3      	ldrh	r3, [r4, #12]
   20cb0:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   20cb2:	429a      	cmp	r2, r3
   20cb4:	d205      	bcs.n	20cc2 <nvs_ate_valid+0x34>
	return 1;
   20cb6:	2001      	movs	r0, #1
}
   20cb8:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   20cba:	2608      	movs	r6, #8
   20cbc:	e7f2      	b.n	20ca4 <nvs_ate_valid+0x16>
		return 0;
   20cbe:	2000      	movs	r0, #0
   20cc0:	e7fa      	b.n	20cb8 <nvs_ate_valid+0x2a>
   20cc2:	2000      	movs	r0, #0
   20cc4:	e7f8      	b.n	20cb8 <nvs_ate_valid+0x2a>

00020cc6 <nvs_recover_last_ate>:
{
   20cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20cca:	b082      	sub	sp, #8
   20ccc:	4606      	mov	r6, r0
   20cce:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20cd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20cd2:	681f      	ldr	r7, [r3, #0]
   20cd4:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   20cd6:	2b01      	cmp	r3, #1
   20cd8:	d90b      	bls.n	20cf2 <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20cda:	461f      	mov	r7, r3
   20cdc:	3307      	adds	r3, #7
   20cde:	427f      	negs	r7, r7
   20ce0:	401f      	ands	r7, r3
	*addr -= ate_size;
   20ce2:	f8d8 4000 	ldr.w	r4, [r8]
   20ce6:	1be4      	subs	r4, r4, r7
   20ce8:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   20cec:	0c25      	lsrs	r5, r4, #16
   20cee:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   20cf0:	e002      	b.n	20cf8 <nvs_recover_last_ate+0x32>
		return len;
   20cf2:	2708      	movs	r7, #8
   20cf4:	e7f5      	b.n	20ce2 <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   20cf6:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   20cf8:	42ac      	cmp	r4, r5
   20cfa:	d917      	bls.n	20d2c <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   20cfc:	466a      	mov	r2, sp
   20cfe:	4621      	mov	r1, r4
   20d00:	4630      	mov	r0, r6
   20d02:	f7ff ff27 	bl	20b54 <nvs_flash_ate_rd>
		if (rc) {
   20d06:	4603      	mov	r3, r0
   20d08:	b988      	cbnz	r0, 20d2e <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   20d0a:	4669      	mov	r1, sp
   20d0c:	4630      	mov	r0, r6
   20d0e:	f7ff ffbe 	bl	20c8e <nvs_ate_valid>
   20d12:	2800      	cmp	r0, #0
   20d14:	d0ef      	beq.n	20cf6 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   20d16:	0c2d      	lsrs	r5, r5, #16
   20d18:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   20d1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20d1e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   20d22:	4413      	add	r3, r2
   20d24:	441d      	add	r5, r3
			*addr = ate_end_addr;
   20d26:	f8c8 4000 	str.w	r4, [r8]
   20d2a:	e7e4      	b.n	20cf6 <nvs_recover_last_ate+0x30>
	return 0;
   20d2c:	2300      	movs	r3, #0
}
   20d2e:	4618      	mov	r0, r3
   20d30:	b002      	add	sp, #8
   20d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020d36 <nvs_close_ate_valid>:
{
   20d36:	b538      	push	{r3, r4, r5, lr}
   20d38:	4605      	mov	r5, r0
   20d3a:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   20d3c:	f7ff ffa7 	bl	20c8e <nvs_ate_valid>
   20d40:	b1e0      	cbz	r0, 20d7c <nvs_close_ate_valid+0x46>
   20d42:	88a3      	ldrh	r3, [r4, #4]
   20d44:	b9cb      	cbnz	r3, 20d7a <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   20d46:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   20d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20d4c:	429a      	cmp	r2, r3
   20d4e:	d116      	bne.n	20d7e <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20d50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20d52:	681b      	ldr	r3, [r3, #0]
   20d54:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   20d56:	2a01      	cmp	r2, #1
   20d58:	d90d      	bls.n	20d76 <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20d5a:	4613      	mov	r3, r2
   20d5c:	3207      	adds	r2, #7
   20d5e:	425b      	negs	r3, r3
   20d60:	401a      	ands	r2, r3
	if ((fs->sector_size - entry->offset) % ate_size) {
   20d62:	89ab      	ldrh	r3, [r5, #12]
   20d64:	8861      	ldrh	r1, [r4, #2]
   20d66:	1a5b      	subs	r3, r3, r1
   20d68:	fbb3 f1f2 	udiv	r1, r3, r2
   20d6c:	fb02 3311 	mls	r3, r2, r1, r3
   20d70:	b93b      	cbnz	r3, 20d82 <nvs_close_ate_valid+0x4c>
	return 1;
   20d72:	2001      	movs	r0, #1
   20d74:	e002      	b.n	20d7c <nvs_close_ate_valid+0x46>
		return len;
   20d76:	2208      	movs	r2, #8
   20d78:	e7f3      	b.n	20d62 <nvs_close_ate_valid+0x2c>
		return 0;
   20d7a:	2000      	movs	r0, #0
}
   20d7c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   20d7e:	2000      	movs	r0, #0
   20d80:	e7fc      	b.n	20d7c <nvs_close_ate_valid+0x46>
		return 0;
   20d82:	2000      	movs	r0, #0
   20d84:	e7fa      	b.n	20d7c <nvs_close_ate_valid+0x46>

00020d86 <nvs_prev_ate>:
{
   20d86:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d88:	b083      	sub	sp, #12
   20d8a:	4604      	mov	r4, r0
   20d8c:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20d8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20d90:	681b      	ldr	r3, [r3, #0]
   20d92:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   20d94:	2901      	cmp	r1, #1
   20d96:	d92a      	bls.n	20dee <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20d98:	1dce      	adds	r6, r1, #7
   20d9a:	424b      	negs	r3, r1
   20d9c:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   20d9e:	6829      	ldr	r1, [r5, #0]
   20da0:	4620      	mov	r0, r4
   20da2:	f7ff fed7 	bl	20b54 <nvs_flash_ate_rd>
	if (rc) {
   20da6:	4607      	mov	r7, r0
   20da8:	b9f0      	cbnz	r0, 20de8 <nvs_prev_ate+0x62>
	*addr += ate_size;
   20daa:	682b      	ldr	r3, [r5, #0]
   20dac:	4433      	add	r3, r6
   20dae:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   20db0:	b299      	uxth	r1, r3
   20db2:	89a2      	ldrh	r2, [r4, #12]
   20db4:	1b92      	subs	r2, r2, r6
   20db6:	4291      	cmp	r1, r2
   20db8:	d116      	bne.n	20de8 <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   20dba:	0c1a      	lsrs	r2, r3, #16
   20dbc:	d119      	bne.n	20df2 <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   20dbe:	89e2      	ldrh	r2, [r4, #14]
   20dc0:	3a01      	subs	r2, #1
   20dc2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   20dc6:	602b      	str	r3, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   20dc8:	466a      	mov	r2, sp
   20dca:	6829      	ldr	r1, [r5, #0]
   20dcc:	4620      	mov	r0, r4
   20dce:	f7ff fec1 	bl	20b54 <nvs_flash_ate_rd>
	if (rc) {
   20dd2:	4607      	mov	r7, r0
   20dd4:	b940      	cbnz	r0, 20de8 <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   20dd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20dd8:	7919      	ldrb	r1, [r3, #4]
   20dda:	4668      	mov	r0, sp
   20ddc:	f7ff febf 	bl	20b5e <nvs_ate_cmp_const>
	if (!rc) {
   20de0:	b958      	cbnz	r0, 20dfa <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   20de2:	6862      	ldr	r2, [r4, #4]
   20de4:	602a      	str	r2, [r5, #0]
		return 0;
   20de6:	4607      	mov	r7, r0
}
   20de8:	4638      	mov	r0, r7
   20dea:	b003      	add	sp, #12
   20dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   20dee:	2608      	movs	r6, #8
   20df0:	e7d5      	b.n	20d9e <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   20df2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   20df6:	602b      	str	r3, [r5, #0]
   20df8:	e7e6      	b.n	20dc8 <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   20dfa:	4669      	mov	r1, sp
   20dfc:	4620      	mov	r0, r4
   20dfe:	f7ff ff9a 	bl	20d36 <nvs_close_ate_valid>
   20e02:	b138      	cbz	r0, 20e14 <nvs_prev_ate+0x8e>
		(*addr) &= ADDR_SECT_MASK;
   20e04:	886b      	ldrh	r3, [r5, #2]
   20e06:	041b      	lsls	r3, r3, #16
   20e08:	602b      	str	r3, [r5, #0]
		(*addr) += close_ate.offset;
   20e0a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   20e0e:	4413      	add	r3, r2
   20e10:	602b      	str	r3, [r5, #0]
		return 0;
   20e12:	e7e9      	b.n	20de8 <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   20e14:	4629      	mov	r1, r5
   20e16:	4620      	mov	r0, r4
   20e18:	f7ff ff55 	bl	20cc6 <nvs_recover_last_ate>
   20e1c:	4607      	mov	r7, r0
   20e1e:	e7e3      	b.n	20de8 <nvs_prev_ate+0x62>

00020e20 <nvs_ate_crc8_update>:
{
   20e20:	b510      	push	{r4, lr}
   20e22:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   20e24:	2207      	movs	r2, #7
   20e26:	4601      	mov	r1, r0
   20e28:	20ff      	movs	r0, #255	; 0xff
   20e2a:	f7ef fe15 	bl	10a58 <crc8_ccitt>
	entry->crc8 = crc8;
   20e2e:	71e0      	strb	r0, [r4, #7]
}
   20e30:	bd10      	pop	{r4, pc}

00020e32 <nvs_flash_al_wrt>:
	if (!len) {
   20e32:	2b00      	cmp	r3, #0
   20e34:	d041      	beq.n	20eba <nvs_flash_al_wrt+0x88>
{
   20e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20e3a:	b089      	sub	sp, #36	; 0x24
   20e3c:	4605      	mov	r5, r0
   20e3e:	4617      	mov	r7, r2
   20e40:	4698      	mov	r8, r3
	offset = fs->offset;
   20e42:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   20e44:	8982      	ldrh	r2, [r0, #12]
   20e46:	0c08      	lsrs	r0, r1, #16
   20e48:	fb00 3302 	mla	r3, r0, r2, r3
	offset += addr & ADDR_OFFS_MASK;
   20e4c:	fa13 f481 	uxtah	r4, r3, r1
   20e50:	46a1      	mov	r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   20e52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20e54:	681b      	ldr	r3, [r3, #0]
   20e56:	425b      	negs	r3, r3
	if (blen > 0) {
   20e58:	ea13 0608 	ands.w	r6, r3, r8
   20e5c:	d00e      	beq.n	20e7c <nvs_flash_al_wrt+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   20e5e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	const struct flash_driver_api *api =
   20e60:	6883      	ldr	r3, [r0, #8]
	rc = api->write(dev, offset, data, len);
   20e62:	f8d3 9004 	ldr.w	r9, [r3, #4]
   20e66:	4633      	mov	r3, r6
   20e68:	463a      	mov	r2, r7
   20e6a:	4621      	mov	r1, r4
   20e6c:	47c8      	blx	r9
		if (rc) {
   20e6e:	b948      	cbnz	r0, 20e84 <nvs_flash_al_wrt+0x52>
		len -= blen;
   20e70:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   20e74:	eb04 0906 	add.w	r9, r4, r6
		data8 += blen;
   20e78:	4437      	add	r7, r6
   20e7a:	e000      	b.n	20e7e <nvs_flash_al_wrt+0x4c>
	int rc = 0;
   20e7c:	2000      	movs	r0, #0
	if (len) {
   20e7e:	f1b8 0f00 	cmp.w	r8, #0
   20e82:	d102      	bne.n	20e8a <nvs_flash_al_wrt+0x58>
}
   20e84:	b009      	add	sp, #36	; 0x24
   20e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(buf, data8, len);
   20e8a:	2320      	movs	r3, #32
   20e8c:	4642      	mov	r2, r8
   20e8e:	4639      	mov	r1, r7
   20e90:	4668      	mov	r0, sp
   20e92:	f003 ffc8 	bl	24e26 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   20e96:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20e98:	681a      	ldr	r2, [r3, #0]
__ssp_bos_icheck3(memset, void *, int)
   20e9a:	eba2 0208 	sub.w	r2, r2, r8
   20e9e:	7919      	ldrb	r1, [r3, #4]
   20ea0:	eb0d 0008 	add.w	r0, sp, r8
   20ea4:	f003 ffd2 	bl	24e4c <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   20ea8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   20eaa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20eac:	681b      	ldr	r3, [r3, #0]
	const struct flash_driver_api *api =
   20eae:	6882      	ldr	r2, [r0, #8]
	rc = api->write(dev, offset, data, len);
   20eb0:	6854      	ldr	r4, [r2, #4]
   20eb2:	466a      	mov	r2, sp
   20eb4:	4649      	mov	r1, r9
   20eb6:	47a0      	blx	r4
	return rc;
   20eb8:	e7e4      	b.n	20e84 <nvs_flash_al_wrt+0x52>
		return 0;
   20eba:	2000      	movs	r0, #0
}
   20ebc:	4770      	bx	lr

00020ebe <nvs_flash_data_wrt>:
{
   20ebe:	b538      	push	{r3, r4, r5, lr}
   20ec0:	4605      	mov	r5, r0
   20ec2:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   20ec4:	4613      	mov	r3, r2
   20ec6:	460a      	mov	r2, r1
   20ec8:	6881      	ldr	r1, [r0, #8]
   20eca:	f7ff ffb2 	bl	20e32 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20ece:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20ed0:	681b      	ldr	r3, [r3, #0]
   20ed2:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   20ed4:	2a01      	cmp	r2, #1
   20ed6:	d903      	bls.n	20ee0 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20ed8:	4414      	add	r4, r2
   20eda:	3c01      	subs	r4, #1
   20edc:	4253      	negs	r3, r2
   20ede:	401c      	ands	r4, r3
	fs->data_wra += nvs_al_size(fs, len);
   20ee0:	68ab      	ldr	r3, [r5, #8]
   20ee2:	4423      	add	r3, r4
   20ee4:	60ab      	str	r3, [r5, #8]
}
   20ee6:	bd38      	pop	{r3, r4, r5, pc}

00020ee8 <nvs_flash_block_move>:
{
   20ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20eec:	b088      	sub	sp, #32
   20eee:	4607      	mov	r7, r0
   20ef0:	460e      	mov	r6, r1
   20ef2:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   20ef4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20ef6:	681b      	ldr	r3, [r3, #0]
   20ef8:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   20efc:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   20f00:	e001      	b.n	20f06 <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   20f02:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   20f04:	4426      	add	r6, r4
	while (len) {
   20f06:	b1a5      	cbz	r5, 20f32 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   20f08:	462c      	mov	r4, r5
   20f0a:	4545      	cmp	r5, r8
   20f0c:	bf28      	it	cs
   20f0e:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   20f10:	4623      	mov	r3, r4
   20f12:	466a      	mov	r2, sp
   20f14:	4631      	mov	r1, r6
   20f16:	4638      	mov	r0, r7
   20f18:	f7ff fe0e 	bl	20b38 <nvs_flash_rd>
		if (rc) {
   20f1c:	4603      	mov	r3, r0
   20f1e:	b948      	cbnz	r0, 20f34 <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   20f20:	4622      	mov	r2, r4
   20f22:	4669      	mov	r1, sp
   20f24:	4638      	mov	r0, r7
   20f26:	f7ff ffca 	bl	20ebe <nvs_flash_data_wrt>
		if (rc) {
   20f2a:	4603      	mov	r3, r0
   20f2c:	2800      	cmp	r0, #0
   20f2e:	d0e8      	beq.n	20f02 <nvs_flash_block_move+0x1a>
   20f30:	e000      	b.n	20f34 <nvs_flash_block_move+0x4c>
	return 0;
   20f32:	2300      	movs	r3, #0
}
   20f34:	4618      	mov	r0, r3
   20f36:	b008      	add	sp, #32
   20f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020f3c <nvs_flash_ate_wrt>:
{
   20f3c:	b510      	push	{r4, lr}
   20f3e:	4604      	mov	r4, r0
   20f40:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   20f42:	2308      	movs	r3, #8
   20f44:	6841      	ldr	r1, [r0, #4]
   20f46:	f7ff ff74 	bl	20e32 <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20f4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20f4c:	681b      	ldr	r3, [r3, #0]
   20f4e:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   20f50:	2a01      	cmp	r2, #1
   20f52:	d907      	bls.n	20f64 <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20f54:	4613      	mov	r3, r2
   20f56:	3207      	adds	r2, #7
   20f58:	425b      	negs	r3, r3
   20f5a:	401a      	ands	r2, r3
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   20f5c:	6863      	ldr	r3, [r4, #4]
   20f5e:	1a9b      	subs	r3, r3, r2
   20f60:	6063      	str	r3, [r4, #4]
}
   20f62:	bd10      	pop	{r4, pc}
		return len;
   20f64:	2208      	movs	r2, #8
   20f66:	e7f9      	b.n	20f5c <nvs_flash_ate_wrt+0x20>

00020f68 <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
   20f68:	b510      	push	{r4, lr}
   20f6a:	b082      	sub	sp, #8
   20f6c:	4604      	mov	r4, r0
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
	gc_done_ate.id = 0xffff;
   20f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20f72:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   20f76:	2300      	movs	r3, #0
   20f78:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   20f7c:	8903      	ldrh	r3, [r0, #8]
   20f7e:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   20f82:	4668      	mov	r0, sp
   20f84:	f7ff ff4c 	bl	20e20 <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   20f88:	4669      	mov	r1, sp
   20f8a:	4620      	mov	r0, r4
   20f8c:	f7ff ffd6 	bl	20f3c <nvs_flash_ate_wrt>
}
   20f90:	b002      	add	sp, #8
   20f92:	bd10      	pop	{r4, pc}

00020f94 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   20f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f98:	b08a      	sub	sp, #40	; 0x28
   20f9a:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   20f9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   20f9e:	681b      	ldr	r3, [r3, #0]
   20fa0:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   20fa2:	2a01      	cmp	r2, #1
   20fa4:	d92d      	bls.n	21002 <nvs_gc+0x6e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   20fa6:	1dd6      	adds	r6, r2, #7
   20fa8:	4253      	negs	r3, r2
   20faa:	401e      	ands	r6, r3
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   20fac:	88e3      	ldrh	r3, [r4, #6]
   20fae:	041b      	lsls	r3, r3, #16
   20fb0:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   20fb2:	a903      	add	r1, sp, #12
   20fb4:	4620      	mov	r0, r4
   20fb6:	f7ff fdde 	bl	20b76 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   20fba:	89a1      	ldrh	r1, [r4, #12]
   20fbc:	9b03      	ldr	r3, [sp, #12]
   20fbe:	4419      	add	r1, r3
   20fc0:	1b89      	subs	r1, r1, r6
   20fc2:	9102      	str	r1, [sp, #8]

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   20fc4:	aa08      	add	r2, sp, #32
   20fc6:	4620      	mov	r0, r4
   20fc8:	f7ff fdc4 	bl	20b54 <nvs_flash_ate_rd>
	if (rc < 0) {
   20fcc:	1e03      	subs	r3, r0, #0
   20fce:	db14      	blt.n	20ffa <nvs_gc+0x66>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   20fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20fd2:	7919      	ldrb	r1, [r3, #4]
   20fd4:	a808      	add	r0, sp, #32
   20fd6:	f7ff fdc2 	bl	20b5e <nvs_ate_cmp_const>
	if (!rc) {
   20fda:	b9a0      	cbnz	r0, 21006 <nvs_gc+0x72>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   20fdc:	6863      	ldr	r3, [r4, #4]
   20fde:	68a2      	ldr	r2, [r4, #8]
   20fe0:	4416      	add	r6, r2
   20fe2:	42b3      	cmp	r3, r6
   20fe4:	d304      	bcc.n	20ff0 <nvs_gc+0x5c>
		rc = nvs_add_gc_done_ate(fs);
   20fe6:	4620      	mov	r0, r4
   20fe8:	f7ff ffbe 	bl	20f68 <nvs_add_gc_done_ate>
		if (rc) {
   20fec:	4603      	mov	r3, r0
   20fee:	b920      	cbnz	r0, 20ffa <nvs_gc+0x66>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
   20ff0:	9903      	ldr	r1, [sp, #12]
   20ff2:	4620      	mov	r0, r4
   20ff4:	f7ff fe20 	bl	20c38 <nvs_flash_erase_sector>
   20ff8:	4603      	mov	r3, r0
	if (rc) {
		return rc;
	}
	return 0;
}
   20ffa:	4618      	mov	r0, r3
   20ffc:	b00a      	add	sp, #40	; 0x28
   20ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return len;
   21002:	2608      	movs	r6, #8
   21004:	e7d2      	b.n	20fac <nvs_gc+0x18>
	stop_addr = gc_addr - ate_size;
   21006:	9b02      	ldr	r3, [sp, #8]
   21008:	eba3 0806 	sub.w	r8, r3, r6
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2100c:	a908      	add	r1, sp, #32
   2100e:	4620      	mov	r0, r4
   21010:	f7ff fe91 	bl	20d36 <nvs_close_ate_valid>
   21014:	b140      	cbz	r0, 21028 <nvs_gc+0x94>
		gc_addr &= ADDR_SECT_MASK;
   21016:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2101a:	041b      	lsls	r3, r3, #16
   2101c:	9302      	str	r3, [sp, #8]
		gc_addr += close_ate.offset;
   2101e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   21022:	4413      	add	r3, r2
   21024:	9302      	str	r3, [sp, #8]
   21026:	e023      	b.n	21070 <nvs_gc+0xdc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   21028:	a902      	add	r1, sp, #8
   2102a:	4620      	mov	r0, r4
   2102c:	f7ff fe4b 	bl	20cc6 <nvs_recover_last_ate>
		if (rc) {
   21030:	4603      	mov	r3, r0
   21032:	b1e8      	cbz	r0, 21070 <nvs_gc+0xdc>
   21034:	e7e1      	b.n	20ffa <nvs_gc+0x66>
		} while (wlk_addr != fs->ate_wra);
   21036:	6862      	ldr	r2, [r4, #4]
   21038:	9b01      	ldr	r3, [sp, #4]
   2103a:	429a      	cmp	r2, r3
   2103c:	d014      	beq.n	21068 <nvs_gc+0xd4>
			wlk_prev_addr = wlk_addr;
   2103e:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   21040:	aa04      	add	r2, sp, #16
   21042:	a901      	add	r1, sp, #4
   21044:	4620      	mov	r0, r4
   21046:	f7ff fe9e 	bl	20d86 <nvs_prev_ate>
			if (rc) {
   2104a:	4603      	mov	r3, r0
   2104c:	2800      	cmp	r0, #0
   2104e:	d1d4      	bne.n	20ffa <nvs_gc+0x66>
			if ((wlk_ate.id == gc_ate.id) &&
   21050:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   21054:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   21058:	429a      	cmp	r2, r3
   2105a:	d1ec      	bne.n	21036 <nvs_gc+0xa2>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2105c:	a904      	add	r1, sp, #16
   2105e:	4620      	mov	r0, r4
   21060:	f7ff fe15 	bl	20c8e <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   21064:	2800      	cmp	r0, #0
   21066:	d0e6      	beq.n	21036 <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   21068:	42bd      	cmp	r5, r7
   2106a:	d013      	beq.n	21094 <nvs_gc+0x100>
	} while (gc_prev_addr != stop_addr);
   2106c:	4547      	cmp	r7, r8
   2106e:	d0b5      	beq.n	20fdc <nvs_gc+0x48>
		gc_prev_addr = gc_addr;
   21070:	9f02      	ldr	r7, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   21072:	aa06      	add	r2, sp, #24
   21074:	a902      	add	r1, sp, #8
   21076:	4620      	mov	r0, r4
   21078:	f7ff fe85 	bl	20d86 <nvs_prev_ate>
		if (rc) {
   2107c:	4603      	mov	r3, r0
   2107e:	2800      	cmp	r0, #0
   21080:	d1bb      	bne.n	20ffa <nvs_gc+0x66>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   21082:	a906      	add	r1, sp, #24
   21084:	4620      	mov	r0, r4
   21086:	f7ff fe02 	bl	20c8e <nvs_ate_valid>
   2108a:	2800      	cmp	r0, #0
   2108c:	d0ee      	beq.n	2106c <nvs_gc+0xd8>
		wlk_addr = fs->ate_wra;
   2108e:	6863      	ldr	r3, [r4, #4]
   21090:	9301      	str	r3, [sp, #4]
   21092:	e7d4      	b.n	2103e <nvs_gc+0xaa>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   21094:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21098:	2b00      	cmp	r3, #0
   2109a:	d0e7      	beq.n	2106c <nvs_gc+0xd8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2109c:	0c3b      	lsrs	r3, r7, #16
   2109e:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   210a0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   210a4:	189d      	adds	r5, r3, r2
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   210a6:	8923      	ldrh	r3, [r4, #8]
   210a8:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   210ac:	a806      	add	r0, sp, #24
   210ae:	f7ff feb7 	bl	20e20 <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   210b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   210b6:	4629      	mov	r1, r5
   210b8:	4620      	mov	r0, r4
   210ba:	f7ff ff15 	bl	20ee8 <nvs_flash_block_move>
			if (rc) {
   210be:	4603      	mov	r3, r0
   210c0:	2800      	cmp	r0, #0
   210c2:	d19a      	bne.n	20ffa <nvs_gc+0x66>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   210c4:	a906      	add	r1, sp, #24
   210c6:	4620      	mov	r0, r4
   210c8:	f7ff ff38 	bl	20f3c <nvs_flash_ate_wrt>
			if (rc) {
   210cc:	4603      	mov	r3, r0
   210ce:	2800      	cmp	r0, #0
   210d0:	d0cc      	beq.n	2106c <nvs_gc+0xd8>
   210d2:	e792      	b.n	20ffa <nvs_gc+0x66>

000210d4 <nvs_flash_wrt_entry>:
{
   210d4:	b570      	push	{r4, r5, r6, lr}
   210d6:	b082      	sub	sp, #8
   210d8:	4604      	mov	r4, r0
   210da:	4616      	mov	r6, r2
   210dc:	461d      	mov	r5, r3
	entry.id = id;
   210de:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   210e2:	8903      	ldrh	r3, [r0, #8]
   210e4:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   210e8:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   210ec:	23ff      	movs	r3, #255	; 0xff
   210ee:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   210f2:	4668      	mov	r0, sp
   210f4:	f7ff fe94 	bl	20e20 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   210f8:	462a      	mov	r2, r5
   210fa:	4631      	mov	r1, r6
   210fc:	4620      	mov	r0, r4
   210fe:	f7ff fede 	bl	20ebe <nvs_flash_data_wrt>
	if (rc) {
   21102:	b108      	cbz	r0, 21108 <nvs_flash_wrt_entry+0x34>
}
   21104:	b002      	add	sp, #8
   21106:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   21108:	4669      	mov	r1, sp
   2110a:	4620      	mov	r0, r4
   2110c:	f7ff ff16 	bl	20f3c <nvs_flash_ate_wrt>
	if (rc) {
   21110:	e7f8      	b.n	21104 <nvs_flash_wrt_entry+0x30>

00021112 <nvs_sector_close>:
{
   21112:	b530      	push	{r4, r5, lr}
   21114:	b083      	sub	sp, #12
   21116:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   21118:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2111a:	681b      	ldr	r3, [r3, #0]
   2111c:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2111e:	2a01      	cmp	r2, #1
   21120:	d926      	bls.n	21170 <nvs_sector_close+0x5e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   21122:	4613      	mov	r3, r2
   21124:	3207      	adds	r2, #7
   21126:	425b      	negs	r3, r3
   21128:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   2112a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2112e:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   21132:	2500      	movs	r5, #0
   21134:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   21138:	6863      	ldr	r3, [r4, #4]
   2113a:	1899      	adds	r1, r3, r2
   2113c:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   21140:	0c1b      	lsrs	r3, r3, #16
   21142:	041b      	lsls	r3, r3, #16
   21144:	6063      	str	r3, [r4, #4]
	fs->ate_wra += (fs->sector_size - ate_size);
   21146:	89a1      	ldrh	r1, [r4, #12]
   21148:	1a8a      	subs	r2, r1, r2
   2114a:	4413      	add	r3, r2
   2114c:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   2114e:	4668      	mov	r0, sp
   21150:	f7ff fe66 	bl	20e20 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   21154:	4669      	mov	r1, sp
   21156:	4620      	mov	r0, r4
   21158:	f7ff fef0 	bl	20f3c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   2115c:	1d21      	adds	r1, r4, #4
   2115e:	4620      	mov	r0, r4
   21160:	f7ff fd09 	bl	20b76 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   21164:	88e3      	ldrh	r3, [r4, #6]
   21166:	041b      	lsls	r3, r3, #16
   21168:	60a3      	str	r3, [r4, #8]
}
   2116a:	4628      	mov	r0, r5
   2116c:	b003      	add	sp, #12
   2116e:	bd30      	pop	{r4, r5, pc}
		return len;
   21170:	2208      	movs	r2, #8
   21172:	e7da      	b.n	2112a <nvs_sector_close+0x18>

00021174 <nvs_startup>:

static int nvs_startup(struct nvs_fs *fs)
{
   21174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21178:	b087      	sub	sp, #28
   2117a:	4604      	mov	r4, r0
	size_t ate_size, empty_len;
	/* Initialize addr to 0 for the case fs->sector_count == 0. This
	 * should never happen as this is verified in nvs_mount() but both
	 * Coverity and GCC believe the contrary.
	 */
	uint32_t addr = 0U;
   2117c:	2300      	movs	r3, #0
   2117e:	9303      	str	r3, [sp, #12]
	uint16_t i, closed_sectors = 0;
	uint8_t erase_value = fs->flash_parameters->erase_value;
   21180:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21182:	791e      	ldrb	r6, [r3, #4]

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   21184:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   21188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2118c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21190:	4648      	mov	r0, r9
   21192:	f7f8 f9d1 	bl	19538 <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   21196:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21198:	681b      	ldr	r3, [r3, #0]
   2119a:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   2119c:	2a01      	cmp	r2, #1
   2119e:	d906      	bls.n	211ae <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   211a0:	1dd7      	adds	r7, r2, #7
   211a2:	4253      	negs	r3, r2
   211a4:	401f      	ands	r7, r3
	uint16_t i, closed_sectors = 0;
   211a6:	f04f 0800 	mov.w	r8, #0

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
	/* step through the sectors to find a open sector following
	 * a closed sector, this is where NVS can write.
	 */
	for (i = 0; i < fs->sector_count; i++) {
   211aa:	4645      	mov	r5, r8
   211ac:	e003      	b.n	211b6 <nvs_startup+0x42>
		return len;
   211ae:	2708      	movs	r7, #8
   211b0:	e7f9      	b.n	211a6 <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
   211b2:	3501      	adds	r5, #1
   211b4:	b2ad      	uxth	r5, r5
   211b6:	89e3      	ldrh	r3, [r4, #14]
   211b8:	42ab      	cmp	r3, r5
   211ba:	d91c      	bls.n	211f6 <nvs_startup+0x82>
		addr = (i << ADDR_SECT_SHIFT) +
		       (uint16_t)(fs->sector_size - ate_size);
   211bc:	89a1      	ldrh	r1, [r4, #12]
   211be:	1bc9      	subs	r1, r1, r7
   211c0:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
   211c2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   211c6:	9103      	str	r1, [sp, #12]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   211c8:	2308      	movs	r3, #8
   211ca:	4632      	mov	r2, r6
   211cc:	4620      	mov	r0, r4
   211ce:	f7ff fd0b 	bl	20be8 <nvs_flash_cmp_const>
					 sizeof(struct nvs_ate));
		if (rc) {
   211d2:	2800      	cmp	r0, #0
   211d4:	d0ed      	beq.n	211b2 <nvs_startup+0x3e>
			/* closed sector */
			closed_sectors++;
   211d6:	f108 0801 	add.w	r8, r8, #1
   211da:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
   211de:	a903      	add	r1, sp, #12
   211e0:	4620      	mov	r0, r4
   211e2:	f7ff fcc8 	bl	20b76 <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   211e6:	2308      	movs	r3, #8
   211e8:	4632      	mov	r2, r6
   211ea:	9903      	ldr	r1, [sp, #12]
   211ec:	4620      	mov	r0, r4
   211ee:	f7ff fcfb 	bl	20be8 <nvs_flash_cmp_const>
						 sizeof(struct nvs_ate));
			if (!rc) {
   211f2:	2800      	cmp	r0, #0
   211f4:	d1dd      	bne.n	211b2 <nvs_startup+0x3e>
				break;
			}
		}
	}
	/* all sectors are closed, this is not a nvs fs */
	if (closed_sectors == fs->sector_count) {
   211f6:	89e3      	ldrh	r3, [r4, #14]
   211f8:	4543      	cmp	r3, r8
   211fa:	f000 80eb 	beq.w	213d4 <nvs_startup+0x260>
		rc = -EDEADLK;
		goto end;
	}

	if (i == fs->sector_count) {
   211fe:	42ab      	cmp	r3, r5
   21200:	d00d      	beq.n	2121e <nvs_startup+0xaa>

	/* addr contains address of closing ate in the most recent sector,
	 * search for the last valid ate using the recover_last_ate routine
	 */

	rc = nvs_recover_last_ate(fs, &addr);
   21202:	a903      	add	r1, sp, #12
   21204:	4620      	mov	r0, r4
   21206:	f7ff fd5e 	bl	20cc6 <nvs_recover_last_ate>
	if (rc) {
   2120a:	4605      	mov	r5, r0
   2120c:	2800      	cmp	r0, #0
   2120e:	f040 80c6 	bne.w	2139e <nvs_startup+0x22a>

	/* addr contains address of the last valid ate in the most recent sector
	 * search for the first ate containing all cells erased, in the process
	 * also update fs->data_wra.
	 */
	fs->ate_wra = addr;
   21212:	9b03      	ldr	r3, [sp, #12]
   21214:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   21216:	0c1b      	lsrs	r3, r3, #16
   21218:	041b      	lsls	r3, r3, #16
   2121a:	60a3      	str	r3, [r4, #8]

	while (fs->ate_wra >= fs->data_wra) {
   2121c:	e010      	b.n	21240 <nvs_startup+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   2121e:	2308      	movs	r3, #8
   21220:	4632      	mov	r2, r6
   21222:	9903      	ldr	r1, [sp, #12]
   21224:	1bc9      	subs	r1, r1, r7
   21226:	4620      	mov	r0, r4
   21228:	f7ff fcde 	bl	20be8 <nvs_flash_cmp_const>
		if (!rc) {
   2122c:	2800      	cmp	r0, #0
   2122e:	d1e8      	bne.n	21202 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
   21230:	a903      	add	r1, sp, #12
   21232:	4620      	mov	r0, r4
   21234:	f7ff fc9f 	bl	20b76 <nvs_sector_advance>
   21238:	e7e3      	b.n	21202 <nvs_startup+0x8e>
				rc = -ESPIPE;
				goto end;
			}
		}

		fs->ate_wra -= ate_size;
   2123a:	6863      	ldr	r3, [r4, #4]
   2123c:	1bdb      	subs	r3, r3, r7
   2123e:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
   21240:	6861      	ldr	r1, [r4, #4]
   21242:	68a3      	ldr	r3, [r4, #8]
   21244:	4299      	cmp	r1, r3
   21246:	d32e      	bcc.n	212a6 <nvs_startup+0x132>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
   21248:	aa04      	add	r2, sp, #16
   2124a:	4620      	mov	r0, r4
   2124c:	f7ff fc82 	bl	20b54 <nvs_flash_ate_rd>
		if (rc) {
   21250:	4605      	mov	r5, r0
   21252:	2800      	cmp	r0, #0
   21254:	f040 809c 	bne.w	21390 <nvs_startup+0x21c>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
   21258:	4631      	mov	r1, r6
   2125a:	a804      	add	r0, sp, #16
   2125c:	f7ff fc7f 	bl	20b5e <nvs_ate_cmp_const>
		if (!rc) {
   21260:	b308      	cbz	r0, 212a6 <nvs_startup+0x132>
		if (nvs_ate_valid(fs, &last_ate)) {
   21262:	a904      	add	r1, sp, #16
   21264:	4620      	mov	r0, r4
   21266:	f7ff fd12 	bl	20c8e <nvs_ate_valid>
   2126a:	2800      	cmp	r0, #0
   2126c:	d0e5      	beq.n	2123a <nvs_startup+0xc6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   2126e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21272:	0419      	lsls	r1, r3, #16
   21274:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   21276:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2127a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   2127e:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   21280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   21282:	6812      	ldr	r2, [r2, #0]
   21284:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
   21286:	2d01      	cmp	r5, #1
   21288:	d903      	bls.n	21292 <nvs_startup+0x11e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2128a:	442b      	add	r3, r5
   2128c:	3b01      	subs	r3, #1
   2128e:	426a      	negs	r2, r5
   21290:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   21292:	440b      	add	r3, r1
   21294:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   21296:	6862      	ldr	r2, [r4, #4]
   21298:	4293      	cmp	r3, r2
   2129a:	d1ce      	bne.n	2123a <nvs_startup+0xc6>
   2129c:	2800      	cmp	r0, #0
   2129e:	d0cc      	beq.n	2123a <nvs_startup+0xc6>
				rc = -ESPIPE;
   212a0:	f06f 051c 	mvn.w	r5, #28
   212a4:	e07b      	b.n	2139e <nvs_startup+0x22a>
	 * we might need to restart gc if it has not yet finished. Otherwise
	 * just erase the sector.
	 * When gc needs to be restarted, first erase the sector otherwise the
	 * data might not fit into the sector.
	 */
	addr = fs->ate_wra & ADDR_SECT_MASK;
   212a6:	88e3      	ldrh	r3, [r4, #6]
   212a8:	041b      	lsls	r3, r3, #16
   212aa:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &addr);
   212ac:	a903      	add	r1, sp, #12
   212ae:	4620      	mov	r0, r4
   212b0:	f7ff fc61 	bl	20b76 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   212b4:	89a3      	ldrh	r3, [r4, #12]
   212b6:	4632      	mov	r2, r6
   212b8:	9903      	ldr	r1, [sp, #12]
   212ba:	4620      	mov	r0, r4
   212bc:	f7ff fc94 	bl	20be8 <nvs_flash_cmp_const>
	if (rc < 0) {
   212c0:	1e05      	subs	r5, r0, #0
   212c2:	db6c      	blt.n	2139e <nvs_startup+0x22a>
		goto end;
	}
	if (rc) {
   212c4:	2d00      	cmp	r5, #0
   212c6:	d050      	beq.n	2136a <nvs_startup+0x1f6>
		 * (gc_done_ate) that indicates that gc was finished.
		 */
		bool gc_done_marker = false;
		struct nvs_ate gc_done_ate;

		addr = fs->ate_wra + ate_size;
   212c8:	6863      	ldr	r3, [r4, #4]
   212ca:	443b      	add	r3, r7
   212cc:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   212ce:	e002      	b.n	212d6 <nvs_startup+0x162>
			    (gc_done_ate.id == 0xffff) &&
			    (gc_done_ate.len == 0U)) {
				gc_done_marker = true;
				break;
			}
			addr += ate_size;
   212d0:	9b03      	ldr	r3, [sp, #12]
   212d2:	443b      	add	r3, r7
   212d4:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   212d6:	9903      	ldr	r1, [sp, #12]
   212d8:	b28a      	uxth	r2, r1
   212da:	89a3      	ldrh	r3, [r4, #12]
   212dc:	1bdb      	subs	r3, r3, r7
   212de:	429a      	cmp	r2, r3
   212e0:	d218      	bcs.n	21314 <nvs_startup+0x1a0>
			rc = nvs_flash_ate_rd(fs, addr, &gc_done_ate);
   212e2:	aa01      	add	r2, sp, #4
   212e4:	4620      	mov	r0, r4
   212e6:	f7ff fc35 	bl	20b54 <nvs_flash_ate_rd>
			if (rc) {
   212ea:	4605      	mov	r5, r0
   212ec:	2800      	cmp	r0, #0
   212ee:	d14f      	bne.n	21390 <nvs_startup+0x21c>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   212f0:	a901      	add	r1, sp, #4
   212f2:	4620      	mov	r0, r4
   212f4:	f7ff fccb 	bl	20c8e <nvs_ate_valid>
   212f8:	2800      	cmp	r0, #0
   212fa:	d0e9      	beq.n	212d0 <nvs_startup+0x15c>
			    (gc_done_ate.id == 0xffff) &&
   212fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   21300:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21304:	429a      	cmp	r2, r3
   21306:	d1e3      	bne.n	212d0 <nvs_startup+0x15c>
			    (gc_done_ate.len == 0U)) {
   21308:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			    (gc_done_ate.id == 0xffff) &&
   2130c:	2b00      	cmp	r3, #0
   2130e:	d1df      	bne.n	212d0 <nvs_startup+0x15c>
				gc_done_marker = true;
   21310:	2301      	movs	r3, #1
   21312:	e000      	b.n	21316 <nvs_startup+0x1a2>
		bool gc_done_marker = false;
   21314:	2300      	movs	r3, #0
		}

		if (gc_done_marker) {
   21316:	b9b3      	cbnz	r3, 21346 <nvs_startup+0x1d2>
			nvs_sector_advance(fs, &addr);
			rc = nvs_flash_erase_sector(fs, addr);
			goto end;
		}
		LOG_INF("No GC Done marker found: restarting gc");
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   21318:	6861      	ldr	r1, [r4, #4]
   2131a:	4620      	mov	r0, r4
   2131c:	f7ff fc8c 	bl	20c38 <nvs_flash_erase_sector>
		if (rc) {
   21320:	4605      	mov	r5, r0
   21322:	2800      	cmp	r0, #0
   21324:	d13b      	bne.n	2139e <nvs_startup+0x22a>
			goto end;
		}
		fs->ate_wra &= ADDR_SECT_MASK;
   21326:	88e3      	ldrh	r3, [r4, #6]
   21328:	041b      	lsls	r3, r3, #16
   2132a:	6063      	str	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2132c:	89a2      	ldrh	r2, [r4, #12]
   2132e:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
   21332:	4413      	add	r3, r2
   21334:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   21336:	0c1b      	lsrs	r3, r3, #16
   21338:	041b      	lsls	r3, r3, #16
   2133a:	60a3      	str	r3, [r4, #8]
		 **/
		for (int i = 0; i < CONFIG_NVS_LOOKUP_CACHE_SIZE; i++) {
			fs->lookup_cache[i] = fs->ate_wra;
		}
#endif
		rc = nvs_gc(fs);
   2133c:	4620      	mov	r0, r4
   2133e:	f7ff fe29 	bl	20f94 <nvs_gc>
   21342:	4605      	mov	r5, r0
		goto end;
   21344:	e024      	b.n	21390 <nvs_startup+0x21c>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   21346:	88e3      	ldrh	r3, [r4, #6]
   21348:	041b      	lsls	r3, r3, #16
   2134a:	9303      	str	r3, [sp, #12]
			nvs_sector_advance(fs, &addr);
   2134c:	a903      	add	r1, sp, #12
   2134e:	4620      	mov	r0, r4
   21350:	f7ff fc11 	bl	20b76 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   21354:	9903      	ldr	r1, [sp, #12]
   21356:	4620      	mov	r0, r4
   21358:	f7ff fc6e 	bl	20c38 <nvs_flash_erase_sector>
   2135c:	4605      	mov	r5, r0
			goto end;
   2135e:	e017      	b.n	21390 <nvs_startup+0x21c>
		}
		if (!rc) {
			break;
		}

		fs->data_wra += fs->flash_parameters->write_block_size;
   21360:	68a3      	ldr	r3, [r4, #8]
   21362:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   21364:	6812      	ldr	r2, [r2, #0]
   21366:	4413      	add	r3, r2
   21368:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   2136a:	6863      	ldr	r3, [r4, #4]
   2136c:	68a1      	ldr	r1, [r4, #8]
   2136e:	428b      	cmp	r3, r1
   21370:	d908      	bls.n	21384 <nvs_startup+0x210>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   21372:	1a5b      	subs	r3, r3, r1
   21374:	4632      	mov	r2, r6
   21376:	4620      	mov	r0, r4
   21378:	f7ff fc36 	bl	20be8 <nvs_flash_cmp_const>
		if (rc < 0) {
   2137c:	1e05      	subs	r5, r0, #0
   2137e:	db07      	blt.n	21390 <nvs_startup+0x21c>
		if (!rc) {
   21380:	2d00      	cmp	r5, #0
   21382:	d1ed      	bne.n	21360 <nvs_startup+0x1ec>

	/* If the ate_wra is pointing to the first ate write location in a
	 * sector and data_wra is not 0, erase the sector as it contains no
	 * valid data (this also avoids closing a sector without any data).
	 */
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   21384:	6861      	ldr	r1, [r4, #4]
   21386:	eb01 0247 	add.w	r2, r1, r7, lsl #1
   2138a:	89a3      	ldrh	r3, [r4, #12]
   2138c:	429a      	cmp	r2, r3
   2138e:	d00d      	beq.n	213ac <nvs_startup+0x238>
	}
#endif
	/* If the sector is empty add a gc done ate to avoid having insufficient
	 * space when doing gc.
	 */
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   21390:	b92d      	cbnz	r5, 2139e <nvs_startup+0x22a>
   21392:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   21394:	89a3      	ldrh	r3, [r4, #12]
   21396:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2139a:	429a      	cmp	r2, r3
   2139c:	d015      	beq.n	213ca <nvs_startup+0x256>
	return z_impl_k_mutex_unlock(mutex);
   2139e:	4648      	mov	r0, r9
   213a0:	f7f8 f94e 	bl	19640 <z_impl_k_mutex_unlock>

		rc = nvs_add_gc_done_ate(fs);
	}
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   213a4:	4628      	mov	r0, r5
   213a6:	b007      	add	sp, #28
   213a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   213ac:	68a2      	ldr	r2, [r4, #8]
   213ae:	0c0b      	lsrs	r3, r1, #16
   213b0:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   213b2:	429a      	cmp	r2, r3
   213b4:	d0ec      	beq.n	21390 <nvs_startup+0x21c>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   213b6:	4620      	mov	r0, r4
   213b8:	f7ff fc3e 	bl	20c38 <nvs_flash_erase_sector>
		if (rc) {
   213bc:	4605      	mov	r5, r0
   213be:	2800      	cmp	r0, #0
   213c0:	d1ed      	bne.n	2139e <nvs_startup+0x22a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   213c2:	88e3      	ldrh	r3, [r4, #6]
   213c4:	041b      	lsls	r3, r3, #16
   213c6:	60a3      	str	r3, [r4, #8]
   213c8:	e7e2      	b.n	21390 <nvs_startup+0x21c>
		rc = nvs_add_gc_done_ate(fs);
   213ca:	4620      	mov	r0, r4
   213cc:	f7ff fdcc 	bl	20f68 <nvs_add_gc_done_ate>
   213d0:	4605      	mov	r5, r0
   213d2:	e7e4      	b.n	2139e <nvs_startup+0x22a>
		rc = -EDEADLK;
   213d4:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   213d8:	e7e1      	b.n	2139e <nvs_startup+0x22a>

000213da <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   213da:	b510      	push	{r4, lr}
   213dc:	b084      	sub	sp, #16
   213de:	4604      	mov	r4, r0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   213e0:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
   213e2:	f003 f87a 	bl	244da <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   213e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   213e8:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   213ea:	68db      	ldr	r3, [r3, #12]
   213ec:	4798      	blx	r3
   213ee:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   213f0:	b300      	cbz	r0, 21434 <nvs_mount+0x5a>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
   213f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
   213f4:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   213f6:	68db      	ldr	r3, [r3, #12]
   213f8:	4798      	blx	r3
   213fa:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   213fc:	3b01      	subs	r3, #1
   213fe:	2b1f      	cmp	r3, #31
   21400:	d81b      	bhi.n	2143a <nvs_mount+0x60>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   21402:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21404:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   21406:	aa01      	add	r2, sp, #4
   21408:	f001 fc1f 	bl	22c4a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   2140c:	b9c0      	cbnz	r0, 21440 <nvs_mount+0x66>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
   2140e:	89a3      	ldrh	r3, [r4, #12]
   21410:	b1cb      	cbz	r3, 21446 <nvs_mount+0x6c>
   21412:	9a02      	ldr	r2, [sp, #8]
   21414:	fbb3 f1f2 	udiv	r1, r3, r2
   21418:	fb02 3311 	mls	r3, r2, r1, r3
   2141c:	b9b3      	cbnz	r3, 2144c <nvs_mount+0x72>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
   2141e:	89e3      	ldrh	r3, [r4, #14]
   21420:	2b01      	cmp	r3, #1
   21422:	d916      	bls.n	21452 <nvs_mount+0x78>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
   21424:	4620      	mov	r0, r4
   21426:	f7ff fea5 	bl	21174 <nvs_startup>
	if (rc) {
   2142a:	b908      	cbnz	r0, 21430 <nvs_mount+0x56>
		return rc;
	}

	/* nvs is ready for use */
	fs->ready = true;
   2142c:	2301      	movs	r3, #1
   2142e:	7423      	strb	r3, [r4, #16]
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   21430:	b004      	add	sp, #16
   21432:	bd10      	pop	{r4, pc}
		return -EINVAL;
   21434:	f06f 0015 	mvn.w	r0, #21
   21438:	e7fa      	b.n	21430 <nvs_mount+0x56>
		return -EINVAL;
   2143a:	f06f 0015 	mvn.w	r0, #21
   2143e:	e7f7      	b.n	21430 <nvs_mount+0x56>
		return -EINVAL;
   21440:	f06f 0015 	mvn.w	r0, #21
   21444:	e7f4      	b.n	21430 <nvs_mount+0x56>
		return -EINVAL;
   21446:	f06f 0015 	mvn.w	r0, #21
   2144a:	e7f1      	b.n	21430 <nvs_mount+0x56>
   2144c:	f06f 0015 	mvn.w	r0, #21
   21450:	e7ee      	b.n	21430 <nvs_mount+0x56>
		return -EINVAL;
   21452:	f06f 0015 	mvn.w	r0, #21
   21456:	e7eb      	b.n	21430 <nvs_mount+0x56>

00021458 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   21458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2145c:	b087      	sub	sp, #28
   2145e:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   21460:	f890 b010 	ldrb.w	fp, [r0, #16]
   21464:	f1bb 0f00 	cmp.w	fp, #0
   21468:	f000 809e 	beq.w	215a8 <nvs_write+0x150>
   2146c:	4604      	mov	r4, r0
   2146e:	460e      	mov	r6, r1
   21470:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   21472:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21474:	681b      	ldr	r3, [r3, #0]
   21476:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   21478:	2901      	cmp	r1, #1
   2147a:	d91d      	bls.n	214b8 <nvs_write+0x60>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2147c:	f101 0a07 	add.w	sl, r1, #7
   21480:	424a      	negs	r2, r1
   21482:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
   21486:	2901      	cmp	r1, #1
   21488:	d919      	bls.n	214be <nvs_write+0x66>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2148a:	b2db      	uxtb	r3, r3
   2148c:	eb03 0209 	add.w	r2, r3, r9
   21490:	3a01      	subs	r2, #1
   21492:	425b      	negs	r3, r3
   21494:	ea03 0802 	and.w	r8, r3, r2

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   21498:	89a3      	ldrh	r3, [r4, #12]
   2149a:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   2149e:	4599      	cmp	r9, r3
   214a0:	f200 8085 	bhi.w	215ae <nvs_write+0x156>
   214a4:	f1b9 0f00 	cmp.w	r9, #0
   214a8:	d003      	beq.n	214b2 <nvs_write+0x5a>
	    ((len > 0) && (data == NULL))) {
   214aa:	9b01      	ldr	r3, [sp, #4]
   214ac:	2b00      	cmp	r3, #0
   214ae:	f000 8081 	beq.w	215b4 <nvs_write+0x15c>

	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		goto no_cached_entry;
	}
#else
	wlk_addr = fs->ate_wra;
   214b2:	6863      	ldr	r3, [r4, #4]
   214b4:	9303      	str	r3, [sp, #12]
#endif
	rd_addr = wlk_addr;
   214b6:	e008      	b.n	214ca <nvs_write+0x72>
		return len;
   214b8:	f04f 0a08 	mov.w	sl, #8
   214bc:	e7e3      	b.n	21486 <nvs_write+0x2e>
   214be:	46c8      	mov	r8, r9
   214c0:	e7ea      	b.n	21498 <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   214c2:	6862      	ldr	r2, [r4, #4]
   214c4:	9b03      	ldr	r3, [sp, #12]
   214c6:	429a      	cmp	r2, r3
   214c8:	d013      	beq.n	214f2 <nvs_write+0x9a>
		rd_addr = wlk_addr;
   214ca:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   214cc:	aa04      	add	r2, sp, #16
   214ce:	a903      	add	r1, sp, #12
   214d0:	4620      	mov	r0, r4
   214d2:	f7ff fc58 	bl	20d86 <nvs_prev_ate>
		if (rc) {
   214d6:	4605      	mov	r5, r0
   214d8:	2800      	cmp	r0, #0
   214da:	d15d      	bne.n	21598 <nvs_write+0x140>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   214dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   214e0:	429e      	cmp	r6, r3
   214e2:	d1ee      	bne.n	214c2 <nvs_write+0x6a>
   214e4:	a904      	add	r1, sp, #16
   214e6:	4620      	mov	r0, r4
   214e8:	f7ff fbd1 	bl	20c8e <nvs_ate_valid>
   214ec:	2800      	cmp	r0, #0
   214ee:	d0e8      	beq.n	214c2 <nvs_write+0x6a>
   214f0:	e001      	b.n	214f6 <nvs_write+0x9e>
	bool prev_found = false;
   214f2:	f04f 0b00 	mov.w	fp, #0

#ifdef CONFIG_NVS_LOOKUP_CACHE
no_cached_entry:
#endif

	if (prev_found) {
   214f6:	f1bb 0f00 	cmp.w	fp, #0
   214fa:	d018      	beq.n	2152e <nvs_write+0xd6>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
   214fc:	0c3f      	lsrs	r7, r7, #16
   214fe:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
   21500:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   21504:	18f9      	adds	r1, r7, r3

		if (len == 0) {
   21506:	f1b9 0f00 	cmp.w	r9, #0
   2150a:	d103      	bne.n	21514 <nvs_write+0xbc>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
   2150c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   21510:	b983      	cbnz	r3, 21534 <nvs_write+0xdc>
   21512:	e041      	b.n	21598 <nvs_write+0x140>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
   21514:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   21518:	4599      	cmp	r9, r3
   2151a:	d10b      	bne.n	21534 <nvs_write+0xdc>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   2151c:	464b      	mov	r3, r9
   2151e:	9a01      	ldr	r2, [sp, #4]
   21520:	4620      	mov	r0, r4
   21522:	f7ff fb35 	bl	20b90 <nvs_flash_block_cmp>
			if (rc <= 0) {
   21526:	2800      	cmp	r0, #0
   21528:	dc04      	bgt.n	21534 <nvs_write+0xdc>
				return rc;
   2152a:	4605      	mov	r5, r0
   2152c:	e034      	b.n	21598 <nvs_write+0x140>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   2152e:	f1b9 0f00 	cmp.w	r9, #0
   21532:	d031      	beq.n	21598 <nvs_write+0x140>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   21534:	f1b8 0f00 	cmp.w	r8, #0
   21538:	d01d      	beq.n	21576 <nvs_write+0x11e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
   2153a:	fa1a f788 	uxtah	r7, sl, r8
   2153e:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   21540:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   21544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2154c:	4640      	mov	r0, r8
   2154e:	f7f7 fff3 	bl	19538 <z_impl_k_mutex_lock>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   21552:	89e3      	ldrh	r3, [r4, #14]
   21554:	429d      	cmp	r5, r3
   21556:	d01a      	beq.n	2158e <nvs_write+0x136>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   21558:	6862      	ldr	r2, [r4, #4]
   2155a:	68a3      	ldr	r3, [r4, #8]
   2155c:	443b      	add	r3, r7
   2155e:	429a      	cmp	r2, r3
   21560:	d20b      	bcs.n	2157a <nvs_write+0x122>
			}
			break;
		}


		rc = nvs_sector_close(fs);
   21562:	4620      	mov	r0, r4
   21564:	f7ff fdd5 	bl	21112 <nvs_sector_close>
		if (rc) {
   21568:	b9d0      	cbnz	r0, 215a0 <nvs_write+0x148>
			goto end;
		}

		rc = nvs_gc(fs);
   2156a:	4620      	mov	r0, r4
   2156c:	f7ff fd12 	bl	20f94 <nvs_gc>
		if (rc) {
   21570:	b9c0      	cbnz	r0, 215a4 <nvs_write+0x14c>
			goto end;
		}
		gc_count++;
   21572:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   21574:	e7ed      	b.n	21552 <nvs_write+0xfa>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
   21576:	2700      	movs	r7, #0
   21578:	e7e2      	b.n	21540 <nvs_write+0xe8>
			rc = nvs_flash_wrt_entry(fs, id, data, len);
   2157a:	464b      	mov	r3, r9
   2157c:	9a01      	ldr	r2, [sp, #4]
   2157e:	4631      	mov	r1, r6
   21580:	4620      	mov	r0, r4
   21582:	f7ff fda7 	bl	210d4 <nvs_flash_wrt_entry>
			if (rc) {
   21586:	4605      	mov	r5, r0
   21588:	b918      	cbnz	r0, 21592 <nvs_write+0x13a>
	}
	rc = len;
   2158a:	464d      	mov	r5, r9
   2158c:	e001      	b.n	21592 <nvs_write+0x13a>
			rc = -ENOSPC;
   2158e:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
   21592:	4640      	mov	r0, r8
   21594:	f7f8 f854 	bl	19640 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   21598:	4628      	mov	r0, r5
   2159a:	b007      	add	sp, #28
   2159c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
   215a0:	4605      	mov	r5, r0
   215a2:	e7f6      	b.n	21592 <nvs_write+0x13a>
		rc = nvs_gc(fs);
   215a4:	4605      	mov	r5, r0
   215a6:	e7f4      	b.n	21592 <nvs_write+0x13a>
		return -EACCES;
   215a8:	f06f 050c 	mvn.w	r5, #12
   215ac:	e7f4      	b.n	21598 <nvs_write+0x140>
		return -EINVAL;
   215ae:	f06f 0515 	mvn.w	r5, #21
   215b2:	e7f1      	b.n	21598 <nvs_write+0x140>
   215b4:	f06f 0515 	mvn.w	r5, #21
   215b8:	e7ee      	b.n	21598 <nvs_write+0x140>

000215ba <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   215ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   215be:	b084      	sub	sp, #16
   215c0:	4699      	mov	r9, r3
   215c2:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   215c6:	7c03      	ldrb	r3, [r0, #16]
   215c8:	2b00      	cmp	r3, #0
   215ca:	d055      	beq.n	21678 <nvs_read_hist+0xbe>
   215cc:	4604      	mov	r4, r0
   215ce:	460f      	mov	r7, r1
   215d0:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   215d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   215d4:	681b      	ldr	r3, [r3, #0]
   215d6:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   215d8:	2a01      	cmp	r2, #1
   215da:	d90c      	bls.n	215f6 <nvs_read_hist+0x3c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   215dc:	4613      	mov	r3, r2
   215de:	3207      	adds	r2, #7
   215e0:	425b      	negs	r3, r3
   215e2:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
   215e4:	89a3      	ldrh	r3, [r4, #12]
   215e6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   215ea:	4599      	cmp	r9, r3
   215ec:	d847      	bhi.n	2167e <nvs_read_hist+0xc4>
	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		rc = -ENOENT;
		goto err;
	}
#else
	wlk_addr = fs->ate_wra;
   215ee:	6866      	ldr	r6, [r4, #4]
   215f0:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
   215f2:	2500      	movs	r5, #0
#endif
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   215f4:	e005      	b.n	21602 <nvs_read_hist+0x48>
		return len;
   215f6:	2208      	movs	r2, #8
   215f8:	e7f4      	b.n	215e4 <nvs_read_hist+0x2a>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
   215fa:	6862      	ldr	r2, [r4, #4]
   215fc:	9b03      	ldr	r3, [sp, #12]
   215fe:	429a      	cmp	r2, r3
   21600:	d016      	beq.n	21630 <nvs_read_hist+0x76>
	while (cnt_his <= cnt) {
   21602:	45a8      	cmp	r8, r5
   21604:	d314      	bcc.n	21630 <nvs_read_hist+0x76>
		rd_addr = wlk_addr;
   21606:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   21608:	aa01      	add	r2, sp, #4
   2160a:	a903      	add	r1, sp, #12
   2160c:	4620      	mov	r0, r4
   2160e:	f7ff fbba 	bl	20d86 <nvs_prev_ate>
		if (rc) {
   21612:	4603      	mov	r3, r0
   21614:	bb28      	cbnz	r0, 21662 <nvs_read_hist+0xa8>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   21616:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2161a:	429f      	cmp	r7, r3
   2161c:	d1ed      	bne.n	215fa <nvs_read_hist+0x40>
   2161e:	a901      	add	r1, sp, #4
   21620:	4620      	mov	r0, r4
   21622:	f7ff fb34 	bl	20c8e <nvs_ate_valid>
   21626:	2800      	cmp	r0, #0
   21628:	d0e7      	beq.n	215fa <nvs_read_hist+0x40>
			cnt_his++;
   2162a:	3501      	adds	r5, #1
   2162c:	b2ad      	uxth	r5, r5
   2162e:	e7e4      	b.n	215fa <nvs_read_hist+0x40>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   21630:	6862      	ldr	r2, [r4, #4]
   21632:	9b03      	ldr	r3, [sp, #12]
   21634:	429a      	cmp	r2, r3
   21636:	d018      	beq.n	2166a <nvs_read_hist+0xb0>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   21638:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   2163c:	b313      	cbz	r3, 21684 <nvs_read_hist+0xca>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   2163e:	45a8      	cmp	r8, r5
   21640:	d823      	bhi.n	2168a <nvs_read_hist+0xd0>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
   21642:	0c36      	lsrs	r6, r6, #16
   21644:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
   21646:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   2164a:	454b      	cmp	r3, r9
   2164c:	bf28      	it	cs
   2164e:	464b      	movcs	r3, r9
   21650:	4652      	mov	r2, sl
   21652:	4431      	add	r1, r6
   21654:	4620      	mov	r0, r4
   21656:	f7ff fa6f 	bl	20b38 <nvs_flash_rd>
	if (rc) {
   2165a:	4603      	mov	r3, r0
   2165c:	b908      	cbnz	r0, 21662 <nvs_read_hist+0xa8>
		goto err;
	}

	return wlk_ate.len;
   2165e:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
   21662:	4618      	mov	r0, r3
   21664:	b004      	add	sp, #16
   21666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   2166a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2166e:	429f      	cmp	r7, r3
   21670:	d0e2      	beq.n	21638 <nvs_read_hist+0x7e>
		return -ENOENT;
   21672:	f06f 0301 	mvn.w	r3, #1
   21676:	e7f4      	b.n	21662 <nvs_read_hist+0xa8>
		return -EACCES;
   21678:	f06f 030c 	mvn.w	r3, #12
   2167c:	e7f1      	b.n	21662 <nvs_read_hist+0xa8>
		return -EINVAL;
   2167e:	f06f 0315 	mvn.w	r3, #21
   21682:	e7ee      	b.n	21662 <nvs_read_hist+0xa8>
		return -ENOENT;
   21684:	f06f 0301 	mvn.w	r3, #1
   21688:	e7eb      	b.n	21662 <nvs_read_hist+0xa8>
   2168a:	f06f 0301 	mvn.w	r3, #1
   2168e:	e7e8      	b.n	21662 <nvs_read_hist+0xa8>

00021690 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   21690:	b510      	push	{r4, lr}
   21692:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   21694:	2400      	movs	r4, #0
   21696:	9400      	str	r4, [sp, #0]
   21698:	f7ff ff8f 	bl	215ba <nvs_read_hist>
	return rc;
}
   2169c:	b002      	add	sp, #8
   2169e:	bd10      	pop	{r4, pc}

000216a0 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   216a0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   216a2:	f001 021f 	and.w	r2, r1, #31
   216a6:	2301      	movs	r3, #1
   216a8:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   216aa:	0949      	lsrs	r1, r1, #5
   216ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   216b0:	43d9      	mvns	r1, r3
   216b2:	f3bf 8f5b 	dmb	ish
   216b6:	e850 2f00 	ldrex	r2, [r0]
   216ba:	ea02 0c01 	and.w	ip, r2, r1
   216be:	e840 ce00 	strex	lr, ip, [r0]
   216c2:	f1be 0f00 	cmp.w	lr, #0
   216c6:	d1f6      	bne.n	216b6 <atomic_test_and_clear_bit+0x16>
   216c8:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   216cc:	4213      	tst	r3, r2
}
   216ce:	bf14      	ite	ne
   216d0:	2001      	movne	r0, #1
   216d2:	2000      	moveq	r0, #0
   216d4:	f85d fb04 	ldr.w	pc, [sp], #4

000216d8 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   216d8:	f001 021f 	and.w	r2, r1, #31
   216dc:	2301      	movs	r3, #1
   216de:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   216e0:	0949      	lsrs	r1, r1, #5
   216e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   216e6:	f3bf 8f5b 	dmb	ish
   216ea:	e850 2f00 	ldrex	r2, [r0]
   216ee:	431a      	orrs	r2, r3
   216f0:	e840 2100 	strex	r1, r2, [r0]
   216f4:	2900      	cmp	r1, #0
   216f6:	d1f8      	bne.n	216ea <atomic_set_bit+0x12>
   216f8:	f3bf 8f5b 	dmb	ish
}
   216fc:	4770      	bx	lr

000216fe <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   216fe:	2000      	movs	r0, #0
   21700:	4770      	bx	lr

00021702 <usb_get_status>:
	uint8_t *data = *data_buf;
   21702:	6813      	ldr	r3, [r2, #0]
	data[0] = 0U;
   21704:	2200      	movs	r2, #0
   21706:	701a      	strb	r2, [r3, #0]
	data[1] = 0U;
   21708:	705a      	strb	r2, [r3, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2170a:	2001      	movs	r0, #1
   2170c:	7018      	strb	r0, [r3, #0]
	*len = 2;
   2170e:	2302      	movs	r3, #2
   21710:	600b      	str	r3, [r1, #0]
}
   21712:	4770      	bx	lr

00021714 <get_ep_bm_from_addr>:
	ep_idx = ep & (~USB_EP_DIR_IN);
   21714:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep_idx > 15) {
   21718:	f010 0f70 	tst.w	r0, #112	; 0x70
   2171c:	d109      	bne.n	21732 <get_ep_bm_from_addr+0x1e>
	if (ep & USB_EP_DIR_IN) {
   2171e:	f010 0f80 	tst.w	r0, #128	; 0x80
   21722:	d102      	bne.n	2172a <get_ep_bm_from_addr+0x16>
		ep_bm = BIT(ep_idx);
   21724:	2001      	movs	r0, #1
   21726:	4098      	lsls	r0, r3
   21728:	4770      	bx	lr
		ep_bm = BIT(ep_idx + 16);
   2172a:	3310      	adds	r3, #16
   2172c:	2001      	movs	r0, #1
   2172e:	4098      	lsls	r0, r3
   21730:	4770      	bx	lr
	uint32_t ep_bm = 0;
   21732:	2000      	movs	r0, #0
}
   21734:	4770      	bx	lr

00021736 <usb_vbus_set>:
}
   21736:	2000      	movs	r0, #0
   21738:	4770      	bx	lr

0002173a <reset_endpoint>:
{
   2173a:	b510      	push	{r4, lr}
   2173c:	b082      	sub	sp, #8
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   2173e:	7884      	ldrb	r4, [r0, #2]
   21740:	f88d 4000 	strb.w	r4, [sp]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   21744:	78c3      	ldrb	r3, [r0, #3]
   21746:	f003 0303 	and.w	r3, r3, #3
   2174a:	f88d 3004 	strb.w	r3, [sp, #4]
	usb_cancel_transfer(ep_cfg.ep_addr);
   2174e:	4620      	mov	r0, r4
   21750:	f7f1 f80e 	bl	12770 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   21754:	4620      	mov	r0, r4
   21756:	f7f0 fa89 	bl	11c6c <disable_endpoint>
}
   2175a:	fab0 f080 	clz	r0, r0
   2175e:	0940      	lsrs	r0, r0, #5
   21760:	b002      	add	sp, #8
   21762:	bd10      	pop	{r4, pc}

00021764 <usb_eps_reconfigure>:
{
   21764:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
   21766:	4291      	cmp	r1, r2
   21768:	d002      	beq.n	21770 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
   2176a:	f7ff ffe6 	bl	2173a <reset_endpoint>
}
   2176e:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
   21770:	f7f0 fad6 	bl	11d20 <set_endpoint>
   21774:	e7fb      	b.n	2176e <usb_eps_reconfigure+0xa>

00021776 <usb_handle_std_interface_req>:
{
   21776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21778:	4604      	mov	r4, r0
   2177a:	460e      	mov	r6, r1
   2177c:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
   2177e:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
   21780:	f7f0 f99c 	bl	11abc <is_device_configured>
   21784:	b900      	cbnz	r0, 21788 <usb_handle_std_interface_req+0x12>
}
   21786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   21788:	7920      	ldrb	r0, [r4, #4]
   2178a:	f7f0 f9a1 	bl	11ad0 <is_interface_valid>
	if (!is_device_configured() ||
   2178e:	2800      	cmp	r0, #0
   21790:	d0f9      	beq.n	21786 <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
   21792:	f994 3000 	ldrsb.w	r3, [r4]
   21796:	2b00      	cmp	r3, #0
   21798:	db04      	blt.n	217a4 <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   2179a:	7863      	ldrb	r3, [r4, #1]
   2179c:	2b0b      	cmp	r3, #11
   2179e:	d013      	beq.n	217c8 <usb_handle_std_interface_req+0x52>
	return false;
   217a0:	2000      	movs	r0, #0
   217a2:	e7f0      	b.n	21786 <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
   217a4:	7863      	ldrb	r3, [r4, #1]
   217a6:	b11b      	cbz	r3, 217b0 <usb_handle_std_interface_req+0x3a>
   217a8:	2b0a      	cmp	r3, #10
   217aa:	d007      	beq.n	217bc <usb_handle_std_interface_req+0x46>
   217ac:	2000      	movs	r0, #0
   217ae:	e7ea      	b.n	21786 <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
   217b0:	2300      	movs	r3, #0
   217b2:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
   217b4:	707b      	strb	r3, [r7, #1]
			*len = 2;
   217b6:	2302      	movs	r3, #2
   217b8:	6033      	str	r3, [r6, #0]
			return true;
   217ba:	e7e4      	b.n	21786 <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
   217bc:	462a      	mov	r2, r5
   217be:	4631      	mov	r1, r6
   217c0:	4620      	mov	r0, r4
   217c2:	f7f0 f95b 	bl	11a7c <usb_get_interface>
   217c6:	e7de      	b.n	21786 <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
   217c8:	4620      	mov	r0, r4
   217ca:	f7f0 faeb 	bl	11da4 <usb_set_interface>
   217ce:	e7da      	b.n	21786 <usb_handle_std_interface_req+0x10>

000217d0 <usb_get_status_endpoint>:
{
   217d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217d2:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   217d4:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
   217d6:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
   217d8:	4620      	mov	r0, r4
   217da:	f7f0 f98b 	bl	11af4 <is_ep_valid>
   217de:	4605      	mov	r5, r0
   217e0:	b130      	cbz	r0, 217f0 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   217e2:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   217e6:	d005      	beq.n	217f4 <usb_get_status_endpoint+0x24>
   217e8:	f7f0 f968 	bl	11abc <is_device_configured>
   217ec:	b910      	cbnz	r0, 217f4 <usb_get_status_endpoint+0x24>
	return false;
   217ee:	4605      	mov	r5, r0
}
   217f0:	4628      	mov	r0, r5
   217f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
   217f4:	4639      	mov	r1, r7
   217f6:	4620      	mov	r0, r4
   217f8:	f7f3 fb8e 	bl	14f18 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   217fc:	2300      	movs	r3, #0
   217fe:	707b      	strb	r3, [r7, #1]
		*len = 2;
   21800:	2302      	movs	r3, #2
   21802:	6033      	str	r3, [r6, #0]
		return true;
   21804:	e7f4      	b.n	217f0 <usb_get_status_endpoint+0x20>

00021806 <usb_handle_std_endpoint_req>:
{
   21806:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
   21808:	f990 3000 	ldrsb.w	r3, [r0]
   2180c:	2b00      	cmp	r3, #0
   2180e:	db06      	blt.n	2181e <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
   21810:	7843      	ldrb	r3, [r0, #1]
   21812:	2b01      	cmp	r3, #1
   21814:	d00a      	beq.n	2182c <usb_handle_std_endpoint_req+0x26>
   21816:	2b03      	cmp	r3, #3
   21818:	d010      	beq.n	2183c <usb_handle_std_endpoint_req+0x36>
   2181a:	2000      	movs	r0, #0
   2181c:	e002      	b.n	21824 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   2181e:	7843      	ldrb	r3, [r0, #1]
   21820:	b10b      	cbz	r3, 21826 <usb_handle_std_endpoint_req+0x20>
	return false;
   21822:	2000      	movs	r0, #0
}
   21824:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
   21826:	f7ff ffd3 	bl	217d0 <usb_get_status_endpoint>
   2182a:	e7fb      	b.n	21824 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2182c:	8843      	ldrh	r3, [r0, #2]
   2182e:	b10b      	cbz	r3, 21834 <usb_handle_std_endpoint_req+0x2e>
	return false;
   21830:	2000      	movs	r0, #0
   21832:	e7f7      	b.n	21824 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
   21834:	2100      	movs	r1, #0
   21836:	f7f0 fa43 	bl	11cc0 <usb_halt_endpoint_req>
   2183a:	e7f3      	b.n	21824 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2183c:	8843      	ldrh	r3, [r0, #2]
   2183e:	b10b      	cbz	r3, 21844 <usb_handle_std_endpoint_req+0x3e>
	return false;
   21840:	2000      	movs	r0, #0
   21842:	e7ef      	b.n	21824 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
   21844:	2101      	movs	r1, #1
   21846:	f7f0 fa3b 	bl	11cc0 <usb_halt_endpoint_req>
   2184a:	e7eb      	b.n	21824 <usb_handle_std_endpoint_req+0x1e>

0002184c <usb_write>:
{
   2184c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21850:	4681      	mov	r9, r0
   21852:	4688      	mov	r8, r1
   21854:	4617      	mov	r7, r2
   21856:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
   21858:	2503      	movs	r5, #3
   2185a:	e000      	b.n	2185e <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
   2185c:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   2185e:	4633      	mov	r3, r6
   21860:	463a      	mov	r2, r7
   21862:	4641      	mov	r1, r8
   21864:	4648      	mov	r0, r9
   21866:	f7f3 fba9 	bl	14fbc <usb_dc_ep_write>
   2186a:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   2186c:	f110 0f0b 	cmn.w	r0, #11
   21870:	d104      	bne.n	2187c <usb_write+0x30>
	z_impl_k_yield();
   21872:	f7f8 fba7 	bl	19fc4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   21876:	1e6b      	subs	r3, r5, #1
   21878:	2d00      	cmp	r5, #0
   2187a:	d1ef      	bne.n	2185c <usb_write+0x10>
}
   2187c:	4620      	mov	r0, r4
   2187e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021882 <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   21882:	f810 2b02 	ldrb.w	r2, [r0], #2
   21886:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   21888:	0852      	lsrs	r2, r2, #1
   2188a:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
   2188c:	e008      	b.n	218a0 <ascii7_to_utf16le+0x1e>
		buf[i] = 0U;
   2188e:	2100      	movs	r1, #0
   21890:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
   21892:	1e59      	subs	r1, r3, #1
   21894:	f810 c002 	ldrb.w	ip, [r0, r2]
   21898:	f800 c001 	strb.w	ip, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
   2189c:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
   2189e:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
   218a0:	2b00      	cmp	r3, #0
   218a2:	daf4      	bge.n	2188e <ascii7_to_utf16le+0xc>
}
   218a4:	4770      	bx	lr

000218a6 <usb_validate_ep_cfg_data>:
{
   218a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   218aa:	b083      	sub	sp, #12
   218ac:	4605      	mov	r5, r0
   218ae:	4689      	mov	r9, r1
   218b0:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   218b2:	2700      	movs	r7, #0
   218b4:	e047      	b.n	21946 <usb_validate_ep_cfg_data+0xa0>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   218b6:	f8d8 2000 	ldr.w	r2, [r8]
   218ba:	f104 0110 	add.w	r1, r4, #16
   218be:	2301      	movs	r3, #1
   218c0:	408b      	lsls	r3, r1
   218c2:	421a      	tst	r2, r3
   218c4:	d108      	bne.n	218d8 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   218c6:	f064 037f 	orn	r3, r4, #127	; 0x7f
   218ca:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   218ce:	4668      	mov	r0, sp
   218d0:	f000 fdfc 	bl	224cc <usb_dc_ep_check_cap>
   218d4:	4603      	mov	r3, r0
   218d6:	b1d0      	cbz	r0, 2190e <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   218d8:	3401      	adds	r4, #1
   218da:	b2e4      	uxtb	r4, r4
   218dc:	2c0f      	cmp	r4, #15
   218de:	d831      	bhi.n	21944 <usb_validate_ep_cfg_data+0x9e>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   218e0:	78eb      	ldrb	r3, [r5, #3]
   218e2:	f003 0303 	and.w	r3, r3, #3
   218e6:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   218ea:	88ab      	ldrh	r3, [r5, #4]
   218ec:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   218f0:	78ab      	ldrb	r3, [r5, #2]
   218f2:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   218f6:	f013 0f80 	tst.w	r3, #128	; 0x80
   218fa:	d1dc      	bne.n	218b6 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
   218fc:	f8d8 2000 	ldr.w	r2, [r8]
   21900:	2301      	movs	r3, #1
   21902:	40a3      	lsls	r3, r4
   21904:	421a      	tst	r2, r3
   21906:	d1e7      	bne.n	218d8 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   21908:	f88d 4000 	strb.w	r4, [sp]
   2190c:	e7df      	b.n	218ce <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2190e:	f89d 2000 	ldrb.w	r2, [sp]
   21912:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   21914:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   21916:	f012 0f80 	tst.w	r2, #128	; 0x80
   2191a:	d10a      	bne.n	21932 <usb_validate_ep_cfg_data+0x8c>
					*requested_ep |= (1U << idx);
   2191c:	f8d8 2000 	ldr.w	r2, [r8]
   21920:	2101      	movs	r1, #1
   21922:	40a1      	lsls	r1, r4
   21924:	430a      	orrs	r2, r1
   21926:	f8c8 2000 	str.w	r2, [r8]
}
   2192a:	4618      	mov	r0, r3
   2192c:	b003      	add	sp, #12
   2192e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
   21932:	f8d8 2000 	ldr.w	r2, [r8]
   21936:	3410      	adds	r4, #16
   21938:	2101      	movs	r1, #1
   2193a:	40a1      	lsls	r1, r4
   2193c:	430a      	orrs	r2, r1
   2193e:	f8c8 2000 	str.w	r2, [r8]
   21942:	e7f2      	b.n	2192a <usb_validate_ep_cfg_data+0x84>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   21944:	3701      	adds	r7, #1
   21946:	f899 301c 	ldrb.w	r3, [r9, #28]
   2194a:	429f      	cmp	r7, r3
   2194c:	d209      	bcs.n	21962 <usb_validate_ep_cfg_data+0xbc>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   2194e:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   21952:	78aa      	ldrb	r2, [r5, #2]
   21954:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   21958:	7933      	ldrb	r3, [r6, #4]
   2195a:	429a      	cmp	r2, r3
   2195c:	d1f2      	bne.n	21944 <usb_validate_ep_cfg_data+0x9e>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2195e:	2401      	movs	r4, #1
   21960:	e7bc      	b.n	218dc <usb_validate_ep_cfg_data+0x36>
	return -1;
   21962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21966:	e7e0      	b.n	2192a <usb_validate_ep_cfg_data+0x84>

00021968 <usb_fix_ascii_sn_string_descriptor>:
{
   21968:	b538      	push	{r3, r4, r5, lr}
   2196a:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   2196c:	f7f0 fcf0 	bl	12350 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   21970:	b150      	cbz	r0, 21988 <usb_fix_ascii_sn_string_descriptor+0x20>
   21972:	4605      	mov	r5, r0
	runtime_sn_len = strlen(runtime_sn);
   21974:	f7e8 f8f3 	bl	9b5e <strlen>
	if (!runtime_sn_len) {
   21978:	4602      	mov	r2, r0
   2197a:	b128      	cbz	r0, 21988 <usb_fix_ascii_sn_string_descriptor+0x20>
	if (runtime_sn_len != default_sn_len) {
   2197c:	2810      	cmp	r0, #16
   2197e:	d103      	bne.n	21988 <usb_fix_ascii_sn_string_descriptor+0x20>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21980:	4629      	mov	r1, r5
   21982:	1ca0      	adds	r0, r4, #2
   21984:	f003 fa41 	bl	24e0a <memcpy>
}
   21988:	bd38      	pop	{r3, r4, r5, pc}

0002198a <usb_get_dev_data_by_cfg>:
	return list->head;
   2198a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2198c:	b110      	cbz	r0, 21994 <usb_get_dev_data_by_cfg+0xa>
   2198e:	3804      	subs	r0, #4
   21990:	e000      	b.n	21994 <usb_get_dev_data_by_cfg+0xa>
   21992:	4618      	mov	r0, r3
   21994:	b150      	cbz	r0, 219ac <usb_get_dev_data_by_cfg+0x22>
		const struct device *dev = dev_data->dev;
   21996:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
   21998:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
   2199a:	428b      	cmp	r3, r1
   2199c:	d006      	beq.n	219ac <usb_get_dev_data_by_cfg+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2199e:	1d03      	adds	r3, r0, #4
   219a0:	d0f7      	beq.n	21992 <usb_get_dev_data_by_cfg+0x8>
	return node->next;
   219a2:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   219a4:	2800      	cmp	r0, #0
   219a6:	d0f5      	beq.n	21994 <usb_get_dev_data_by_cfg+0xa>
   219a8:	3804      	subs	r0, #4
   219aa:	e7f3      	b.n	21994 <usb_get_dev_data_by_cfg+0xa>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   219ac:	4770      	bx	lr

000219ae <usb_get_dev_data_by_iface>:
	return list->head;
   219ae:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   219b0:	b110      	cbz	r0, 219b8 <usb_get_dev_data_by_iface+0xa>
   219b2:	3804      	subs	r0, #4
   219b4:	e000      	b.n	219b8 <usb_get_dev_data_by_iface+0xa>
   219b6:	4618      	mov	r0, r3
   219b8:	b160      	cbz	r0, 219d4 <usb_get_dev_data_by_iface+0x26>
		const struct device *dev = dev_data->dev;
   219ba:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   219bc:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
   219be:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   219c0:	789b      	ldrb	r3, [r3, #2]
   219c2:	428b      	cmp	r3, r1
   219c4:	d006      	beq.n	219d4 <usb_get_dev_data_by_iface+0x26>
Z_GENLIST_PEEK_NEXT(slist, snode)
   219c6:	1d03      	adds	r3, r0, #4
   219c8:	d0f5      	beq.n	219b6 <usb_get_dev_data_by_iface+0x8>
	return node->next;
   219ca:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   219cc:	2800      	cmp	r0, #0
   219ce:	d0f3      	beq.n	219b8 <usb_get_dev_data_by_iface+0xa>
   219d0:	3804      	subs	r0, #4
   219d2:	e7f1      	b.n	219b8 <usb_get_dev_data_by_iface+0xa>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   219d4:	4770      	bx	lr

000219d6 <usb_get_dev_data_by_ep>:
	return list->head;
   219d6:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   219d8:	b100      	cbz	r0, 219dc <usb_get_dev_data_by_ep+0x6>
   219da:	3804      	subs	r0, #4
   219dc:	b1b0      	cbz	r0, 21a0c <usb_get_dev_data_by_ep+0x36>
{
   219de:	b430      	push	{r4, r5}
   219e0:	e003      	b.n	219ea <usb_get_dev_data_by_ep+0x14>
	return node->next;
   219e2:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   219e4:	b100      	cbz	r0, 219e8 <usb_get_dev_data_by_ep+0x12>
   219e6:	3804      	subs	r0, #4
   219e8:	b170      	cbz	r0, 21a08 <usb_get_dev_data_by_ep+0x32>
		const struct device *dev = dev_data->dev;
   219ea:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   219ec:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   219ee:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   219f0:	2300      	movs	r3, #0
   219f2:	7f22      	ldrb	r2, [r4, #28]
   219f4:	429a      	cmp	r2, r3
   219f6:	d9f4      	bls.n	219e2 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   219f8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   219fc:	7912      	ldrb	r2, [r2, #4]
   219fe:	428a      	cmp	r2, r1
   21a00:	d002      	beq.n	21a08 <usb_get_dev_data_by_ep+0x32>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   21a02:	3301      	adds	r3, #1
   21a04:	b2db      	uxtb	r3, r3
   21a06:	e7f4      	b.n	219f2 <usb_get_dev_data_by_ep+0x1c>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   21a08:	bc30      	pop	{r4, r5}
   21a0a:	4770      	bx	lr
   21a0c:	4770      	bx	lr

00021a0e <usb_transfer_is_busy>:
{
   21a0e:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   21a10:	f7f0 fd5c 	bl	124cc <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   21a14:	b128      	cbz	r0, 21a22 <usb_transfer_is_busy+0x14>
   21a16:	6843      	ldr	r3, [r0, #4]
   21a18:	f113 0f10 	cmn.w	r3, #16
   21a1c:	d003      	beq.n	21a26 <usb_transfer_is_busy+0x18>
	return false;
   21a1e:	2000      	movs	r0, #0
}
   21a20:	bd08      	pop	{r3, pc}
	return false;
   21a22:	2000      	movs	r0, #0
   21a24:	e7fc      	b.n	21a20 <usb_transfer_is_busy+0x12>
		return true;
   21a26:	2001      	movs	r0, #1
   21a28:	e7fa      	b.n	21a20 <usb_transfer_is_busy+0x12>

00021a2a <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   21a2a:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   21a2c:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   21a2e:	1c4b      	adds	r3, r1, #1
   21a30:	b2db      	uxtb	r3, r3
   21a32:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   21a36:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   21a38:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   21a3c:	4770      	bx	lr

00021a3e <cdc_acm_irq_callback_work_handler>:
{
   21a3e:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   21a40:	f850 3c08 	ldr.w	r3, [r0, #-8]
   21a44:	f850 1c04 	ldr.w	r1, [r0, #-4]
   21a48:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   21a4c:	4798      	blx	r3
}
   21a4e:	bd08      	pop	{r3, pc}

00021a50 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   21a50:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   21a52:	2200      	movs	r2, #0
   21a54:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   21a58:	4770      	bx	lr

00021a5a <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   21a5a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   21a5c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   21a60:	b122      	cbz	r2, 21a6c <cdc_acm_irq_tx_ready+0x12>
   21a62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   21a66:	b91b      	cbnz	r3, 21a70 <cdc_acm_irq_tx_ready+0x16>
	return 0;
   21a68:	2000      	movs	r0, #0
   21a6a:	4770      	bx	lr
   21a6c:	2000      	movs	r0, #0
   21a6e:	4770      	bx	lr
		return 1;
   21a70:	2001      	movs	r0, #1
}
   21a72:	4770      	bx	lr

00021a74 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   21a74:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   21a76:	2200      	movs	r2, #0
   21a78:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
   21a7c:	4770      	bx	lr

00021a7e <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   21a7e:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
   21a80:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   21a84:	b90b      	cbnz	r3, 21a8a <cdc_acm_irq_rx_ready+0xc>
	return 0;
   21a86:	2000      	movs	r0, #0
   21a88:	4770      	bx	lr
		return 1;
   21a8a:	2001      	movs	r0, #1
}
   21a8c:	4770      	bx	lr

00021a8e <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   21a8e:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   21a90:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   21a94:	b112      	cbz	r2, 21a9c <cdc_acm_irq_is_pending+0xe>
   21a96:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   21a9a:	b93a      	cbnz	r2, 21aac <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   21a9c:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
   21aa0:	b132      	cbz	r2, 21ab0 <cdc_acm_irq_is_pending+0x22>
   21aa2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   21aa6:	b92b      	cbnz	r3, 21ab4 <cdc_acm_irq_is_pending+0x26>
		return 0;
   21aa8:	2000      	movs	r0, #0
   21aaa:	4770      	bx	lr
		return 1;
   21aac:	2001      	movs	r0, #1
   21aae:	4770      	bx	lr
		return 0;
   21ab0:	2000      	movs	r0, #0
   21ab2:	4770      	bx	lr
		return 1;
   21ab4:	2001      	movs	r0, #1
}
   21ab6:	4770      	bx	lr

00021ab8 <cdc_acm_irq_update>:
}
   21ab8:	2001      	movs	r0, #1
   21aba:	4770      	bx	lr

00021abc <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   21abc:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
   21abe:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
   21ac0:	605a      	str	r2, [r3, #4]
}
   21ac2:	4770      	bx	lr

00021ac4 <cdc_acm_configure>:
}
   21ac4:	2000      	movs	r0, #0
   21ac6:	4770      	bx	lr

00021ac8 <cdc_acm_config_get>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   21ac8:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   21aca:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   21ace:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
   21ad0:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   21ad4:	b122      	cbz	r2, 21ae0 <cdc_acm_config_get+0x18>
   21ad6:	2a01      	cmp	r2, #1
   21ad8:	d00d      	beq.n	21af6 <cdc_acm_config_get+0x2e>
		cfg->stop_bits = UART_CFG_STOP_BITS_2;
   21ada:	2203      	movs	r2, #3
   21adc:	714a      	strb	r2, [r1, #5]
		break;
   21ade:	e001      	b.n	21ae4 <cdc_acm_config_get+0x1c>
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
   21ae0:	2201      	movs	r2, #1
   21ae2:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
   21ae4:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
   21ae8:	3a01      	subs	r2, #1
   21aea:	2a03      	cmp	r2, #3
   21aec:	d806      	bhi.n	21afc <cdc_acm_config_get+0x34>
   21aee:	e8df f002 	tbb	[pc, r2]
   21af2:	1508      	.short	0x1508
   21af4:	1b18      	.short	0x1b18
		cfg->stop_bits = UART_CFG_STOP_BITS_1_5;
   21af6:	2202      	movs	r2, #2
   21af8:	714a      	strb	r2, [r1, #5]
		break;
   21afa:	e7f3      	b.n	21ae4 <cdc_acm_config_get+0x1c>
		cfg->parity = UART_CFG_PARITY_NONE;
   21afc:	2200      	movs	r2, #0
   21afe:	710a      	strb	r2, [r1, #4]
		break;
   21b00:	e001      	b.n	21b06 <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_ODD;
   21b02:	2201      	movs	r2, #1
   21b04:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
   21b06:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   21b0a:	2b06      	cmp	r3, #6
   21b0c:	d014      	beq.n	21b38 <cdc_acm_config_get+0x70>
   21b0e:	2b07      	cmp	r3, #7
   21b10:	d015      	beq.n	21b3e <cdc_acm_config_get+0x76>
   21b12:	2b05      	cmp	r3, #5
   21b14:	d00b      	beq.n	21b2e <cdc_acm_config_get+0x66>
		cfg->data_bits = UART_CFG_DATA_BITS_8;
   21b16:	2303      	movs	r3, #3
   21b18:	718b      	strb	r3, [r1, #6]
		break;
   21b1a:	e00a      	b.n	21b32 <cdc_acm_config_get+0x6a>
		cfg->parity = UART_CFG_PARITY_EVEN;
   21b1c:	2202      	movs	r2, #2
   21b1e:	710a      	strb	r2, [r1, #4]
		break;
   21b20:	e7f1      	b.n	21b06 <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_MARK;
   21b22:	2203      	movs	r2, #3
   21b24:	710a      	strb	r2, [r1, #4]
		break;
   21b26:	e7ee      	b.n	21b06 <cdc_acm_config_get+0x3e>
		cfg->parity = UART_CFG_PARITY_SPACE;
   21b28:	2204      	movs	r2, #4
   21b2a:	710a      	strb	r2, [r1, #4]
		break;
   21b2c:	e7eb      	b.n	21b06 <cdc_acm_config_get+0x3e>
		cfg->data_bits = UART_CFG_DATA_BITS_5;
   21b2e:	2300      	movs	r3, #0
   21b30:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   21b32:	2000      	movs	r0, #0
   21b34:	71c8      	strb	r0, [r1, #7]
}
   21b36:	4770      	bx	lr
		cfg->data_bits = UART_CFG_DATA_BITS_6;
   21b38:	2301      	movs	r3, #1
   21b3a:	718b      	strb	r3, [r1, #6]
		break;
   21b3c:	e7f9      	b.n	21b32 <cdc_acm_config_get+0x6a>
		cfg->data_bits = UART_CFG_DATA_BITS_7;
   21b3e:	2302      	movs	r3, #2
   21b40:	718b      	strb	r3, [r1, #6]
		break;
   21b42:	e7f6      	b.n	21b32 <cdc_acm_config_get+0x6a>

00021b44 <cdc_acm_fifo_read>:
{
   21b44:	b570      	push	{r4, r5, r6, lr}
   21b46:	4605      	mov	r5, r0
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   21b48:	6904      	ldr	r4, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   21b4a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   21b4e:	f7fe ffc1 	bl	20ad4 <ring_buf_get>
   21b52:	4606      	mov	r6, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   21b54:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	return buf->get_head == buf->put_tail;
   21b58:	691a      	ldr	r2, [r3, #16]
   21b5a:	6899      	ldr	r1, [r3, #8]
   21b5c:	4291      	cmp	r1, r2
   21b5e:	d012      	beq.n	21b86 <cdc_acm_fifo_read+0x42>
	if (dev_data->rx_paused == true) {
   21b60:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   21b64:	b16a      	cbz	r2, 21b82 <cdc_acm_fifo_read+0x3e>
	return buf->size - (buf->put_head - buf->get_tail);
   21b66:	69da      	ldr	r2, [r3, #28]
   21b68:	6859      	ldr	r1, [r3, #4]
   21b6a:	695b      	ldr	r3, [r3, #20]
   21b6c:	1acb      	subs	r3, r1, r3
   21b6e:	1ad3      	subs	r3, r2, r3
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
   21b70:	2b3f      	cmp	r3, #63	; 0x3f
   21b72:	d906      	bls.n	21b82 <cdc_acm_fifo_read+0x3e>
			struct usb_cfg_data *cfg = (void *)dev->config;
   21b74:	686a      	ldr	r2, [r5, #4]
			if (dev_data->configured) {
   21b76:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   21b7a:	b943      	cbnz	r3, 21b8e <cdc_acm_fifo_read+0x4a>
			dev_data->rx_paused = false;
   21b7c:	2300      	movs	r3, #0
   21b7e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   21b82:	4630      	mov	r0, r6
   21b84:	bd70      	pop	{r4, r5, r6, pc}
		dev_data->rx_ready = false;
   21b86:	2200      	movs	r2, #0
   21b88:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
   21b8c:	e7e8      	b.n	21b60 <cdc_acm_fifo_read+0x1c>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
   21b8e:	6a13      	ldr	r3, [r2, #32]
   21b90:	4622      	mov	r2, r4
   21b92:	2100      	movs	r1, #0
   21b94:	7b18      	ldrb	r0, [r3, #12]
   21b96:	f7f0 fec5 	bl	12924 <cdc_acm_read_cb>
   21b9a:	e7ef      	b.n	21b7c <cdc_acm_fifo_read+0x38>

00021b9c <cdc_acm_poll_in>:
{
   21b9c:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   21b9e:	2201      	movs	r2, #1
   21ba0:	f7ff ffd0 	bl	21b44 <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
   21ba4:	2801      	cmp	r0, #1
   21ba6:	d101      	bne.n	21bac <cdc_acm_poll_in+0x10>
   21ba8:	2000      	movs	r0, #0
}
   21baa:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
   21bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21bb0:	e7fb      	b.n	21baa <cdc_acm_poll_in+0xe>

00021bb2 <abort_function>:
{
   21bb2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   21bb4:	2000      	movs	r0, #0
   21bb6:	f7ef fd89 	bl	116cc <sys_reboot>

00021bba <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21bba:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   21bbc:	f002 fb34 	bl	24228 <z_fatal_error>
}
   21bc0:	bd08      	pop	{r3, pc}

00021bc2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   21bc2:	b508      	push	{r3, lr}
   21bc4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   21bc6:	6800      	ldr	r0, [r0, #0]
   21bc8:	f7ff fff7 	bl	21bba <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   21bcc:	bd08      	pop	{r3, pc}

00021bce <arch_irq_enable>:
{
   21bce:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   21bd0:	b240      	sxtb	r0, r0
   21bd2:	f7f1 f96b 	bl	12eac <__NVIC_EnableIRQ>
}
   21bd6:	bd08      	pop	{r3, pc}

00021bd8 <arch_irq_disable>:
{
   21bd8:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   21bda:	b240      	sxtb	r0, r0
   21bdc:	f7f1 f974 	bl	12ec8 <__NVIC_DisableIRQ>
}
   21be0:	bd08      	pop	{r3, pc}

00021be2 <z_arm_irq_priority_set>:
{
   21be2:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   21be4:	f012 0f01 	tst.w	r2, #1
   21be8:	d104      	bne.n	21bf4 <z_arm_irq_priority_set+0x12>
		prio += _IRQ_PRIO_OFFSET;
   21bea:	3102      	adds	r1, #2
	NVIC_SetPriority((IRQn_Type)irq, prio);
   21bec:	b240      	sxtb	r0, r0
   21bee:	f7f1 f97d 	bl	12eec <__NVIC_SetPriority>
}
   21bf2:	bd08      	pop	{r3, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   21bf4:	2100      	movs	r1, #0
   21bf6:	e7f9      	b.n	21bec <z_arm_irq_priority_set+0xa>

00021bf8 <z_irq_spurious>:
{
   21bf8:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   21bfa:	2100      	movs	r1, #0
   21bfc:	2001      	movs	r0, #1
   21bfe:	f7ff ffdc 	bl	21bba <z_arm_fatal_error>
}
   21c02:	bd08      	pop	{r3, pc}

00021c04 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   21c04:	b508      	push	{r3, lr}
	handler();
   21c06:	f7f1 f9a3 	bl	12f50 <z_SysNmiOnReset>
	z_arm_int_exit();
   21c0a:	f7f1 fb3d 	bl	13288 <z_arm_exc_exit>
}
   21c0e:	bd08      	pop	{r3, pc}

00021c10 <z_arm_prepare_switch_to_main>:
  __builtin_arm_set_fpscr(fpscr);
   21c10:	2300      	movs	r3, #0
   21c12:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   21c16:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   21c1a:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   21c1e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   21c22:	f3bf 8f6f 	isb	sy
   21c26:	f3bf 8f6f 	isb	sy
}
   21c2a:	4770      	bx	lr

00021c2c <memory_fault_recoverable>:
}
   21c2c:	2000      	movs	r0, #0
   21c2e:	4770      	bx	lr

00021c30 <debug_monitor>:
	*recoverable = false;
   21c30:	2300      	movs	r3, #0
   21c32:	700b      	strb	r3, [r1, #0]
}
   21c34:	4770      	bx	lr

00021c36 <fault_handle>:
{
   21c36:	b508      	push	{r3, lr}
	*recoverable = false;
   21c38:	2300      	movs	r3, #0
   21c3a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   21c3c:	1ecb      	subs	r3, r1, #3
   21c3e:	2b09      	cmp	r3, #9
   21c40:	d81a      	bhi.n	21c78 <fault_handle+0x42>
   21c42:	e8df f003 	tbb	[pc, r3]
   21c46:	0905      	.short	0x0905
   21c48:	1919110d 	.word	0x1919110d
   21c4c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   21c50:	4611      	mov	r1, r2
   21c52:	f7f1 fc27 	bl	134a4 <hard_fault>
		break;
   21c56:	e010      	b.n	21c7a <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   21c58:	2100      	movs	r1, #0
   21c5a:	f7f1 fbb9 	bl	133d0 <mem_manage_fault>
		break;
   21c5e:	e00c      	b.n	21c7a <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   21c60:	2100      	movs	r1, #0
   21c62:	f7f1 fb1f 	bl	132a4 <bus_fault>
		break;
   21c66:	e008      	b.n	21c7a <fault_handle+0x44>
		reason = usage_fault(esf);
   21c68:	f7f1 fb62 	bl	13330 <usage_fault>
		break;
   21c6c:	e005      	b.n	21c7a <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   21c6e:	4611      	mov	r1, r2
   21c70:	f7ff ffde 	bl	21c30 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   21c74:	2000      	movs	r0, #0
		break;
   21c76:	e000      	b.n	21c7a <fault_handle+0x44>
	switch (fault) {
   21c78:	2000      	movs	r0, #0
}
   21c7a:	bd08      	pop	{r3, pc}

00021c7c <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   21c7c:	6843      	ldr	r3, [r0, #4]
   21c7e:	1e5a      	subs	r2, r3, #1
		&&
   21c80:	4213      	tst	r3, r2
   21c82:	d106      	bne.n	21c92 <mpu_partition_is_valid+0x16>
		&&
   21c84:	2b1f      	cmp	r3, #31
   21c86:	d906      	bls.n	21c96 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   21c88:	6803      	ldr	r3, [r0, #0]
		&&
   21c8a:	421a      	tst	r2, r3
   21c8c:	d005      	beq.n	21c9a <mpu_partition_is_valid+0x1e>
   21c8e:	2000      	movs	r0, #0
   21c90:	4770      	bx	lr
   21c92:	2000      	movs	r0, #0
   21c94:	4770      	bx	lr
   21c96:	2000      	movs	r0, #0
   21c98:	4770      	bx	lr
   21c9a:	2001      	movs	r0, #1
}
   21c9c:	4770      	bx	lr

00021c9e <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   21c9e:	2807      	cmp	r0, #7
   21ca0:	d805      	bhi.n	21cae <region_allocate_and_init+0x10>
{
   21ca2:	b510      	push	{r4, lr}
   21ca4:	4604      	mov	r4, r0
	region_init(index, region_conf);
   21ca6:	f7f1 fd5b 	bl	13760 <region_init>
	return index;
   21caa:	4620      	mov	r0, r4
}
   21cac:	bd10      	pop	{r4, pc}
		return -EINVAL;
   21cae:	f06f 0015 	mvn.w	r0, #21
}
   21cb2:	4770      	bx	lr

00021cb4 <mpu_configure_region>:
{
   21cb4:	b500      	push	{lr}
   21cb6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   21cb8:	680b      	ldr	r3, [r1, #0]
   21cba:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
   21cbc:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   21cbe:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   21cc0:	2b20      	cmp	r3, #32
   21cc2:	d912      	bls.n	21cea <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   21cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21cc8:	d811      	bhi.n	21cee <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   21cca:	3b01      	subs	r3, #1
   21ccc:	fab3 f383 	clz	r3, r3
   21cd0:	f1c3 031f 	rsb	r3, r3, #31
   21cd4:	005b      	lsls	r3, r3, #1
   21cd6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   21cda:	4313      	orrs	r3, r2
   21cdc:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   21cde:	a901      	add	r1, sp, #4
   21ce0:	f7ff ffdd 	bl	21c9e <region_allocate_and_init>
}
   21ce4:	b005      	add	sp, #20
   21ce6:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   21cea:	2308      	movs	r3, #8
   21cec:	e7f5      	b.n	21cda <mpu_configure_region+0x26>
		return REGION_4G;
   21cee:	233e      	movs	r3, #62	; 0x3e
   21cf0:	e7f3      	b.n	21cda <mpu_configure_region+0x26>

00021cf2 <mpu_configure_regions>:
{
   21cf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21cf6:	4680      	mov	r8, r0
   21cf8:	460f      	mov	r7, r1
   21cfa:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   21cfc:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   21cfe:	2500      	movs	r5, #0
   21d00:	e009      	b.n	21d16 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   21d02:	4621      	mov	r1, r4
   21d04:	b2f0      	uxtb	r0, r6
   21d06:	f7ff ffd5 	bl	21cb4 <mpu_configure_region>
   21d0a:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   21d0c:	f110 0f16 	cmn.w	r0, #22
   21d10:	d014      	beq.n	21d3c <mpu_configure_regions+0x4a>
		reg_index++;
   21d12:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   21d14:	3501      	adds	r5, #1
   21d16:	42bd      	cmp	r5, r7
   21d18:	da10      	bge.n	21d3c <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   21d1a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   21d1e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   21d22:	6862      	ldr	r2, [r4, #4]
   21d24:	2a00      	cmp	r2, #0
   21d26:	d0f5      	beq.n	21d14 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   21d28:	f1b9 0f00 	cmp.w	r9, #0
   21d2c:	d0e9      	beq.n	21d02 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   21d2e:	4620      	mov	r0, r4
   21d30:	f7ff ffa4 	bl	21c7c <mpu_partition_is_valid>
		if (do_sanity_check &&
   21d34:	2800      	cmp	r0, #0
   21d36:	d1e4      	bne.n	21d02 <mpu_configure_regions+0x10>
			return -EINVAL;
   21d38:	f06f 0615 	mvn.w	r6, #21
}
   21d3c:	4630      	mov	r0, r6
   21d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021d42 <arm_core_mpu_configure_static_mpu_regions>:
{
   21d42:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   21d44:	f7f1 fd20 	bl	13788 <mpu_configure_static_mpu_regions>
}
   21d48:	bd08      	pop	{r3, pc}

00021d4a <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   21d4a:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   21d4c:	f7f1 fd26 	bl	1379c <mpu_configure_dynamic_mpu_regions>
}
   21d50:	bd08      	pop	{r3, pc}

00021d52 <malloc_prepare>:
}
   21d52:	2000      	movs	r0, #0
   21d54:	4770      	bx	lr

00021d56 <_stdout_hook_default>:
}
   21d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21d5a:	4770      	bx	lr

00021d5c <_stdin_hook_default>:
}
   21d5c:	2000      	movs	r0, #0
   21d5e:	4770      	bx	lr

00021d60 <_read>:
{
   21d60:	b508      	push	{r3, lr}
   21d62:	4608      	mov	r0, r1
   21d64:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   21d66:	f7f1 fd6b 	bl	13840 <z_impl_zephyr_read_stdin>
}
   21d6a:	bd08      	pop	{r3, pc}

00021d6c <_write>:
{
   21d6c:	b508      	push	{r3, lr}
   21d6e:	4608      	mov	r0, r1
   21d70:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   21d72:	f7f1 fd7b 	bl	1386c <z_impl_zephyr_write_stdout>
}
   21d76:	bd08      	pop	{r3, pc}

00021d78 <_close>:
}
   21d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21d7c:	4770      	bx	lr

00021d7e <_lseek>:
}
   21d7e:	2000      	movs	r0, #0
   21d80:	4770      	bx	lr

00021d82 <_isatty>:
}
   21d82:	2802      	cmp	r0, #2
   21d84:	bfcc      	ite	gt
   21d86:	2000      	movgt	r0, #0
   21d88:	2001      	movle	r0, #1
   21d8a:	4770      	bx	lr

00021d8c <_kill>:
}
   21d8c:	2000      	movs	r0, #0
   21d8e:	4770      	bx	lr

00021d90 <_getpid>:
}
   21d90:	2000      	movs	r0, #0
   21d92:	4770      	bx	lr

00021d94 <_fstat>:
	st->st_mode = S_IFCHR;
   21d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   21d98:	604b      	str	r3, [r1, #4]
}
   21d9a:	2000      	movs	r0, #0
   21d9c:	4770      	bx	lr

00021d9e <__retarget_lock_init_recursive>:
{
   21d9e:	b510      	push	{r4, lr}
   21da0:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   21da2:	2014      	movs	r0, #20
   21da4:	f7f8 fc80 	bl	1a6a8 <malloc>
   21da8:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   21daa:	f002 fb96 	bl	244da <z_impl_k_mutex_init>
}
   21dae:	bd10      	pop	{r4, pc}

00021db0 <__retarget_lock_acquire_recursive>:
{
   21db0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   21db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21dba:	f7f7 fbbd 	bl	19538 <z_impl_k_mutex_lock>
}
   21dbe:	bd08      	pop	{r3, pc}

00021dc0 <__retarget_lock_release_recursive>:
{
   21dc0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   21dc2:	f7f7 fc3d 	bl	19640 <z_impl_k_mutex_unlock>
}
   21dc6:	bd08      	pop	{r3, pc}

00021dc8 <__errno>:
{
   21dc8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   21dca:	f7f7 f937 	bl	1903c <z_impl_z_errno>
}
   21dce:	bd08      	pop	{r3, pc}

00021dd0 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21dd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21dd4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   21dd8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   21ddc:	2a08      	cmp	r2, #8
   21dde:	d001      	beq.n	21de4 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   21de0:	2000      	movs	r0, #0
   21de2:	4770      	bx	lr
                switch(var2)
   21de4:	2b02      	cmp	r3, #2
   21de6:	d001      	beq.n	21dec <nrf52_errata_197+0x1c>
                        return false;
   21de8:	2000      	movs	r0, #0
   21dea:	4770      	bx	lr
                        return true;
   21dec:	2001      	movs	r0, #1
    #endif
}
   21dee:	4770      	bx	lr

00021df0 <sys_arch_reboot>:
{
   21df0:	b508      	push	{r3, lr}
    *p_gpregret = val;
   21df2:	b2c0      	uxtb	r0, r0
   21df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21df8:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
   21dfc:	f7f1 fd7e 	bl	138fc <__NVIC_SystemReset>

00021e00 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   21e00:	2301      	movs	r3, #1
   21e02:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   21e06:	f3bf 8f4f 	dsb	sy
        __WFE();
   21e0a:	bf20      	wfe
    while (true)
   21e0c:	e7fd      	b.n	21e0a <nrf_power_system_off+0xa>

00021e0e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   21e0e:	2806      	cmp	r0, #6
   21e10:	d000      	beq.n	21e14 <pm_state_set+0x6>
   21e12:	4770      	bx	lr
{
   21e14:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
   21e16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   21e1a:	f7ff fff1 	bl	21e00 <nrf_power_system_off>

00021e1e <pm_state_exit_post_ops>:
   21e1e:	2300      	movs	r3, #0
   21e20:	f383 8811 	msr	BASEPRI, r3
   21e24:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   21e28:	4770      	bx	lr

00021e2a <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   21e2a:	b510      	push	{r4, lr}
   21e2c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   21e2e:	2301      	movs	r3, #1
   21e30:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   21e34:	2106      	movs	r1, #6
   21e36:	f7f4 ff79 	bl	16d2c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   21e3a:	b918      	cbnz	r0, 21e44 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   21e3c:	79a3      	ldrb	r3, [r4, #6]
   21e3e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   21e42:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   21e44:	bd10      	pop	{r4, pc}

00021e46 <sys_put_le64>:
	dst[0] = val;
   21e46:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   21e48:	f3c0 2307 	ubfx	r3, r0, #8, #8
   21e4c:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   21e4e:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   21e50:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   21e52:	0e00      	lsrs	r0, r0, #24
   21e54:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   21e56:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   21e58:	f3c1 2307 	ubfx	r3, r1, #8, #8
   21e5c:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   21e5e:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   21e60:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   21e62:	0e09      	lsrs	r1, r1, #24
   21e64:	71d1      	strb	r1, [r2, #7]
}
   21e66:	4770      	bx	lr

00021e68 <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
   21e68:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   21e6a:	79c3      	ldrb	r3, [r0, #7]
   21e6c:	7981      	ldrb	r1, [r0, #6]
   21e6e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   21e72:	7942      	ldrb	r2, [r0, #5]
   21e74:	7903      	ldrb	r3, [r0, #4]
   21e76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   21e7a:	78c2      	ldrb	r2, [r0, #3]
   21e7c:	f890 c002 	ldrb.w	ip, [r0, #2]
   21e80:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   21e84:	f890 e001 	ldrb.w	lr, [r0, #1]
   21e88:	7802      	ldrb	r2, [r0, #0]
   21e8a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
   21e8e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   21e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   21e96:	f85d fb04 	ldr.w	pc, [sp], #4

00021e9a <handle_event_common>:
{
   21e9a:	b510      	push	{r4, lr}
   21e9c:	4686      	mov	lr, r0
   21e9e:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   21ea0:	f04f 0c00 	mov.w	ip, #0
   21ea4:	4563      	cmp	r3, ip
   21ea6:	d910      	bls.n	21eca <handle_event_common+0x30>
		const struct event_handler *handler = &handlers[i];
   21ea8:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   21eac:	f812 403c 	ldrb.w	r4, [r2, ip, lsl #3]
   21eb0:	4574      	cmp	r4, lr
   21eb2:	d107      	bne.n	21ec4 <handle_event_common+0x2a>
		if (buf->len < handler->min_len) {
   21eb4:	8a02      	ldrh	r2, [r0, #16]
   21eb6:	784b      	ldrb	r3, [r1, #1]
   21eb8:	429a      	cmp	r2, r3
   21eba:	d309      	bcc.n	21ed0 <handle_event_common+0x36>
		handler->handler(buf);
   21ebc:	684b      	ldr	r3, [r1, #4]
   21ebe:	4798      	blx	r3
		return 0;
   21ec0:	2000      	movs	r0, #0
}
   21ec2:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
   21ec4:	f10c 0c01 	add.w	ip, ip, #1
   21ec8:	e7ec      	b.n	21ea4 <handle_event_common+0xa>
	return -EOPNOTSUPP;
   21eca:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   21ece:	e7f8      	b.n	21ec2 <handle_event_common+0x28>
			return -EINVAL;
   21ed0:	f06f 0015 	mvn.w	r0, #21
   21ed4:	e7f5      	b.n	21ec2 <handle_event_common+0x28>

00021ed6 <handle_event>:
{
   21ed6:	b508      	push	{r3, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   21ed8:	f7ff ffdf 	bl	21e9a <handle_event_common>
}
   21edc:	bd08      	pop	{r3, pc}

00021ede <hci_vendor_event>:
}
   21ede:	4770      	bx	lr

00021ee0 <bt_br_init>:
}
   21ee0:	2000      	movs	r0, #0
   21ee2:	4770      	bx	lr

00021ee4 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   21ee4:	f001 0c1f 	and.w	ip, r1, #31
   21ee8:	2301      	movs	r3, #1
   21eea:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   21eee:	b172      	cbz	r2, 21f0e <atomic_set_bit_to+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   21ef0:	0949      	lsrs	r1, r1, #5
   21ef2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21ef6:	f3bf 8f5b 	dmb	ish
   21efa:	e850 2f00 	ldrex	r2, [r0]
   21efe:	431a      	orrs	r2, r3
   21f00:	e840 2100 	strex	r1, r2, [r0]
   21f04:	2900      	cmp	r1, #0
   21f06:	d1f8      	bne.n	21efa <atomic_set_bit_to+0x16>
   21f08:	f3bf 8f5b 	dmb	ish
   21f0c:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21f0e:	0949      	lsrs	r1, r1, #5
   21f10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21f14:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21f16:	f3bf 8f5b 	dmb	ish
   21f1a:	e850 2f00 	ldrex	r2, [r0]
   21f1e:	401a      	ands	r2, r3
   21f20:	e840 2100 	strex	r1, r2, [r0]
   21f24:	2900      	cmp	r1, #0
   21f26:	d1f8      	bne.n	21f1a <atomic_set_bit_to+0x36>
   21f28:	f3bf 8f5b 	dmb	ish
	}
}
   21f2c:	4770      	bx	lr

00021f2e <hci_hardware_error>:
{
   21f2e:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   21f30:	2101      	movs	r1, #1
   21f32:	300c      	adds	r0, #12
   21f34:	f000 f9bc 	bl	222b0 <net_buf_simple_pull_mem>
}
   21f38:	bd08      	pop	{r3, pc}

00021f3a <le_set_event_mask>:
{
   21f3a:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   21f3c:	2108      	movs	r1, #8
   21f3e:	f242 0001 	movw	r0, #8193	; 0x2001
   21f42:	f7f1 ff3f 	bl	13dc4 <bt_hci_cmd_create>
	if (!buf) {
   21f46:	b180      	cbz	r0, 21f6a <le_set_event_mask+0x30>
   21f48:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   21f4a:	2108      	movs	r1, #8
   21f4c:	300c      	adds	r0, #12
   21f4e:	f000 f99e 	bl	2228e <net_buf_simple_add>
   21f52:	4602      	mov	r2, r0
	sys_put_le64(mask, cp_mask->events);
   21f54:	2002      	movs	r0, #2
   21f56:	2100      	movs	r1, #0
   21f58:	f7ff ff75 	bl	21e46 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   21f5c:	2200      	movs	r2, #0
   21f5e:	4621      	mov	r1, r4
   21f60:	f242 0001 	movw	r0, #8193	; 0x2001
   21f64:	f7f1 ff6c 	bl	13e40 <bt_hci_cmd_send_sync>
}
   21f68:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   21f6a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21f6e:	e7fb      	b.n	21f68 <le_set_event_mask+0x2e>

00021f70 <bt_recv>:
{
   21f70:	b538      	push	{r3, r4, r5, lr}
   21f72:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   21f74:	7e05      	ldrb	r5, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   21f76:	2d01      	cmp	r5, #1
   21f78:	d11f      	bne.n	21fba <bt_recv+0x4a>
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   21f7a:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   21f7c:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   21f7e:	2b05      	cmp	r3, #5
   21f80:	d00e      	beq.n	21fa0 <bt_recv+0x30>
   21f82:	d30f      	bcc.n	21fa4 <bt_recv+0x34>
   21f84:	3b0e      	subs	r3, #14
   21f86:	b2db      	uxtb	r3, r3
   21f88:	2b01      	cmp	r3, #1
   21f8a:	d807      	bhi.n	21f9c <bt_recv+0x2c>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   21f8c:	f015 0f01 	tst.w	r5, #1
   21f90:	d10a      	bne.n	21fa8 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   21f92:	f015 0f02 	tst.w	r5, #2
   21f96:	d10b      	bne.n	21fb0 <bt_recv+0x40>
		return 0;
   21f98:	2000      	movs	r0, #0
}
   21f9a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV;
   21f9c:	2502      	movs	r5, #2
   21f9e:	e7f5      	b.n	21f8c <bt_recv+0x1c>
	switch (evt) {
   21fa0:	2503      	movs	r5, #3
   21fa2:	e7f3      	b.n	21f8c <bt_recv+0x1c>
		return BT_HCI_EVT_FLAG_RECV;
   21fa4:	2502      	movs	r5, #2
   21fa6:	e7f1      	b.n	21f8c <bt_recv+0x1c>
			hci_event_prio(buf);
   21fa8:	4620      	mov	r0, r4
   21faa:	f7f2 f8fb 	bl	141a4 <hci_event_prio>
   21fae:	e7f0      	b.n	21f92 <bt_recv+0x22>
			rx_queue_put(buf);
   21fb0:	4620      	mov	r0, r4
   21fb2:	f7f1 fed9 	bl	13d68 <rx_queue_put>
		return 0;
   21fb6:	2000      	movs	r0, #0
   21fb8:	e7ef      	b.n	21f9a <bt_recv+0x2a>
		net_buf_unref(buf);
   21fba:	f000 f93d 	bl	22238 <net_buf_unref>
		return -EINVAL;
   21fbe:	f06f 0015 	mvn.w	r0, #21
   21fc2:	e7ea      	b.n	21f9a <bt_recv+0x2a>

00021fc4 <bt_init>:
{
   21fc4:	b510      	push	{r4, lr}
	err = hci_init();
   21fc6:	f7f2 f89d 	bl	14104 <hci_init>
	if (err) {
   21fca:	4604      	mov	r4, r0
   21fcc:	b108      	cbz	r0, 21fd2 <bt_init+0xe>
}
   21fce:	4620      	mov	r0, r4
   21fd0:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   21fd2:	f7f2 f963 	bl	1429c <bt_finalize_init>
	return 0;
   21fd6:	e7fa      	b.n	21fce <bt_init+0xa>

00021fd8 <bt_addr_copy>:
   21fd8:	680b      	ldr	r3, [r1, #0]
   21fda:	6003      	str	r3, [r0, #0]
   21fdc:	888b      	ldrh	r3, [r1, #4]
   21fde:	8083      	strh	r3, [r0, #4]
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   21fe0:	4770      	bx	lr

00021fe2 <bt_addr_le_copy>:
   21fe2:	680b      	ldr	r3, [r1, #0]
   21fe4:	6003      	str	r3, [r0, #0]
   21fe6:	888a      	ldrh	r2, [r1, #4]
   21fe8:	798b      	ldrb	r3, [r1, #6]
   21fea:	8082      	strh	r2, [r0, #4]
   21fec:	7183      	strb	r3, [r0, #6]
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   21fee:	4770      	bx	lr

00021ff0 <pool_get_uninit>:
	return offset / struct_size;
}

static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
   21ff0:	b538      	push	{r3, r4, r5, lr}
   21ff2:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   21ff4:	7f03      	ldrb	r3, [r0, #28]
   21ff6:	331b      	adds	r3, #27
   21ff8:	f023 0303 	bic.w	r3, r3, #3
				__alignof__(struct net_buf));
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   21ffc:	8b02      	ldrh	r2, [r0, #24]
   21ffe:	1a52      	subs	r2, r2, r1
	struct net_buf *buf;

	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   22000:	6a85      	ldr	r5, [r0, #40]	; 0x28
   22002:	fb03 5502 	mla	r5, r3, r2, r5

	buf->pool_id = pool_id(pool);
   22006:	f7f2 fb1f 	bl	14648 <pool_id>
   2200a:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   2200c:	7f23      	ldrb	r3, [r4, #28]
   2200e:	72eb      	strb	r3, [r5, #11]

	return buf;
}
   22010:	4628      	mov	r0, r5
   22012:	bd38      	pop	{r3, r4, r5, pc}

00022014 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   22014:	4770      	bx	lr

00022016 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   22016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2201a:	4604      	mov	r4, r0
   2201c:	460d      	mov	r5, r1
   2201e:	4617      	mov	r7, r2
   22020:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22022:	7a80      	ldrb	r0, [r0, #10]
   22024:	f7f2 fb1c 	bl	14660 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   22028:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2202a:	681b      	ldr	r3, [r3, #0]
   2202c:	f8d3 8000 	ldr.w	r8, [r3]
   22030:	463a      	mov	r2, r7
   22032:	4633      	mov	r3, r6
   22034:	4629      	mov	r1, r5
   22036:	4620      	mov	r0, r4
   22038:	47c0      	blx	r8
}
   2203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002203e <net_buf_destroy>:
{
   2203e:	b510      	push	{r4, lr}
   22040:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22042:	7a80      	ldrb	r0, [r0, #10]
   22044:	f7f2 fb0c 	bl	14660 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   22048:	4621      	mov	r1, r4
   2204a:	f002 faec 	bl	24626 <k_queue_prepend>
}
   2204e:	bd10      	pop	{r4, pc}

00022050 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   22050:	b538      	push	{r3, r4, r5, lr}
   22052:	4604      	mov	r4, r0
   22054:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22056:	7a80      	ldrb	r0, [r0, #10]
   22058:	f7f2 fb02 	bl	14660 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2205c:	7a63      	ldrb	r3, [r4, #9]
   2205e:	f013 0f01 	tst.w	r3, #1
   22062:	d105      	bne.n	22070 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   22064:	6a43      	ldr	r3, [r0, #36]	; 0x24
   22066:	681b      	ldr	r3, [r3, #0]
   22068:	689b      	ldr	r3, [r3, #8]
   2206a:	4629      	mov	r1, r5
   2206c:	4620      	mov	r0, r4
   2206e:	4798      	blx	r3
}
   22070:	bd38      	pop	{r3, r4, r5, pc}

00022072 <net_buf_id>:
{
   22072:	b510      	push	{r4, lr}
   22074:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22076:	7a80      	ldrb	r0, [r0, #10]
   22078:	f7f2 faf2 	bl	14660 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2207c:	7f03      	ldrb	r3, [r0, #28]
   2207e:	331b      	adds	r3, #27
   22080:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   22084:	6a82      	ldr	r2, [r0, #40]	; 0x28
   22086:	1aa4      	subs	r4, r4, r2
}
   22088:	fbb4 f0f3 	udiv	r0, r4, r3
   2208c:	bd10      	pop	{r4, pc}

0002208e <fixed_data_alloc>:
{
   2208e:	b570      	push	{r4, r5, r6, lr}
   22090:	4604      	mov	r4, r0
   22092:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22094:	7a80      	ldrb	r0, [r0, #10]
   22096:	f7f2 fae3 	bl	14660 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2209a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2209c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2209e:	682a      	ldr	r2, [r5, #0]
   220a0:	6819      	ldr	r1, [r3, #0]
   220a2:	428a      	cmp	r2, r1
   220a4:	bf28      	it	cs
   220a6:	460a      	movcs	r2, r1
   220a8:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   220aa:	685d      	ldr	r5, [r3, #4]
   220ac:	681e      	ldr	r6, [r3, #0]
   220ae:	4620      	mov	r0, r4
   220b0:	f7ff ffdf 	bl	22072 <net_buf_id>
}
   220b4:	fb00 5006 	mla	r0, r0, r6, r5
   220b8:	bd70      	pop	{r4, r5, r6, pc}

000220ba <net_buf_reset>:
	buf->len  = 0U;
   220ba:	2300      	movs	r3, #0
   220bc:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   220be:	6943      	ldr	r3, [r0, #20]
   220c0:	60c3      	str	r3, [r0, #12]
}
   220c2:	4770      	bx	lr

000220c4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   220c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   220c8:	b082      	sub	sp, #8
   220ca:	4605      	mov	r5, r0
   220cc:	9101      	str	r1, [sp, #4]
   220ce:	4616      	mov	r6, r2
   220d0:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   220d2:	4610      	mov	r0, r2
   220d4:	4619      	mov	r1, r3
   220d6:	f002 fdb1 	bl	24c3c <sys_clock_timeout_end_calc>
   220da:	4681      	mov	r9, r0
   220dc:	468a      	mov	sl, r1
	__asm__ volatile(
   220de:	f04f 0240 	mov.w	r2, #64	; 0x40
   220e2:	f3ef 8311 	mrs	r3, BASEPRI
   220e6:	f382 8812 	msr	BASEPRI_MAX, r2
   220ea:	f3bf 8f6f 	isb	sy
   220ee:	461a      	mov	r2, r3
   220f0:	4698      	mov	r8, r3
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   220f2:	8b6b      	ldrh	r3, [r5, #26]
   220f4:	b393      	cbz	r3, 2215c <net_buf_alloc_len+0x98>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   220f6:	8b2a      	ldrh	r2, [r5, #24]
   220f8:	4293      	cmp	r3, r2
   220fa:	d20b      	bcs.n	22114 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   220fc:	2200      	movs	r2, #0
   220fe:	2300      	movs	r3, #0
   22100:	4628      	mov	r0, r5
   22102:	f7f7 fadb 	bl	196bc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   22106:	4604      	mov	r4, r0
   22108:	b120      	cbz	r0, 22114 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   2210a:	f388 8811 	msr	BASEPRI, r8
   2210e:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   22112:	e00a      	b.n	2212a <net_buf_alloc_len+0x66>
			}
		}

		uninit_count = pool->uninit_count--;
   22114:	8b69      	ldrh	r1, [r5, #26]
   22116:	1e4b      	subs	r3, r1, #1
   22118:	836b      	strh	r3, [r5, #26]
   2211a:	f388 8811 	msr	BASEPRI, r8
   2211e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   22122:	4628      	mov	r0, r5
   22124:	f7ff ff64 	bl	21ff0 <pool_get_uninit>
   22128:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2212a:	9b01      	ldr	r3, [sp, #4]
   2212c:	b3a3      	cbz	r3, 22198 <net_buf_alloc_len+0xd4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2212e:	ea56 0307 	orrs.w	r3, r6, r7
   22132:	d005      	beq.n	22140 <net_buf_alloc_len+0x7c>
   22134:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   22138:	bf08      	it	eq
   2213a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   2213e:	d11a      	bne.n	22176 <net_buf_alloc_len+0xb2>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   22140:	4632      	mov	r2, r6
   22142:	463b      	mov	r3, r7
   22144:	a901      	add	r1, sp, #4
   22146:	4620      	mov	r0, r4
   22148:	f7ff ff65 	bl	22016 <data_alloc>
   2214c:	4605      	mov	r5, r0
   2214e:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   22150:	bb20      	cbnz	r0, 2219c <net_buf_alloc_len+0xd8>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
   22152:	4620      	mov	r0, r4
   22154:	f7ff ff73 	bl	2203e <net_buf_destroy>
			return NULL;
   22158:	462c      	mov	r4, r5
   2215a:	e029      	b.n	221b0 <net_buf_alloc_len+0xec>
   2215c:	f382 8811 	msr	BASEPRI, r2
   22160:	f3bf 8f6f 	isb	sy
   22164:	4632      	mov	r2, r6
   22166:	463b      	mov	r3, r7
   22168:	4628      	mov	r0, r5
   2216a:	f7f7 faa7 	bl	196bc <z_impl_k_queue_get>
	if (!buf) {
   2216e:	4604      	mov	r4, r0
   22170:	2800      	cmp	r0, #0
   22172:	d1da      	bne.n	2212a <net_buf_alloc_len+0x66>
   22174:	e01c      	b.n	221b0 <net_buf_alloc_len+0xec>
			int64_t remaining = end - sys_clock_tick_get();
   22176:	f7f8 f93b 	bl	1a3f0 <sys_clock_tick_get>
   2217a:	ebb9 0900 	subs.w	r9, r9, r0
   2217e:	eb6a 0a01 	sbc.w	sl, sl, r1
			if (remaining <= 0) {
   22182:	f1b9 0f01 	cmp.w	r9, #1
   22186:	f17a 0300 	sbcs.w	r3, sl, #0
   2218a:	db02      	blt.n	22192 <net_buf_alloc_len+0xce>
				timeout = Z_TIMEOUT_TICKS(remaining);
   2218c:	464e      	mov	r6, r9
   2218e:	4657      	mov	r7, sl
   22190:	e7d6      	b.n	22140 <net_buf_alloc_len+0x7c>
				timeout = K_NO_WAIT;
   22192:	2600      	movs	r6, #0
   22194:	4637      	mov	r7, r6
   22196:	e7d3      	b.n	22140 <net_buf_alloc_len+0x7c>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   22198:	2300      	movs	r3, #0
   2219a:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   2219c:	2301      	movs	r3, #1
   2219e:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   221a0:	2300      	movs	r3, #0
   221a2:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   221a4:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   221a6:	9b01      	ldr	r3, [sp, #4]
   221a8:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   221aa:	4620      	mov	r0, r4
   221ac:	f7ff ff85 	bl	220ba <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   221b0:	4620      	mov	r0, r4
   221b2:	b002      	add	sp, #8
   221b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000221b8 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   221b8:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   221ba:	6a41      	ldr	r1, [r0, #36]	; 0x24
   221bc:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   221be:	6809      	ldr	r1, [r1, #0]
   221c0:	f7ff ff80 	bl	220c4 <net_buf_alloc_len>
}
   221c4:	bd08      	pop	{r3, pc}

000221c6 <net_buf_slist_put>:
	__asm__ volatile(
   221c6:	f04f 0240 	mov.w	r2, #64	; 0x40
   221ca:	f3ef 8311 	mrs	r3, BASEPRI
   221ce:	f382 8812 	msr	BASEPRI_MAX, r2
   221d2:	f3bf 8f6f 	isb	sy
	parent->next = child;
   221d6:	2200      	movs	r2, #0
   221d8:	600a      	str	r2, [r1, #0]
	return list->tail;
   221da:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   221dc:	b132      	cbz	r2, 221ec <net_buf_slist_put+0x26>
	parent->next = child;
   221de:	6011      	str	r1, [r2, #0]
	list->tail = node;
   221e0:	6041      	str	r1, [r0, #4]
	__asm__ volatile(
   221e2:	f383 8811 	msr	BASEPRI, r3
   221e6:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(buf);

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   221ea:	4770      	bx	lr
   221ec:	6041      	str	r1, [r0, #4]
	list->head = node;
   221ee:	6001      	str	r1, [r0, #0]
}
   221f0:	e7f7      	b.n	221e2 <net_buf_slist_put+0x1c>

000221f2 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   221f2:	4603      	mov	r3, r0
	__asm__ volatile(
   221f4:	f04f 0140 	mov.w	r1, #64	; 0x40
   221f8:	f3ef 8211 	mrs	r2, BASEPRI
   221fc:	f381 8812 	msr	BASEPRI_MAX, r1
   22200:	f3bf 8f6f 	isb	sy
	return list->head;
   22204:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   22206:	b170      	cbz	r0, 22226 <net_buf_slist_get+0x34>
   22208:	b410      	push	{r4}
	return node->next;
   2220a:	6801      	ldr	r1, [r0, #0]
	list->head = node;
   2220c:	6019      	str	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2220e:	685c      	ldr	r4, [r3, #4]
   22210:	42a0      	cmp	r0, r4
   22212:	d006      	beq.n	22222 <net_buf_slist_get+0x30>
	__asm__ volatile(
   22214:	f382 8811 	msr	BASEPRI, r2
   22218:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   2221c:	f85d 4b04 	ldr.w	r4, [sp], #4
   22220:	4770      	bx	lr
	list->tail = node;
   22222:	6059      	str	r1, [r3, #4]
}
   22224:	e7f6      	b.n	22214 <net_buf_slist_get+0x22>
   22226:	f382 8811 	msr	BASEPRI, r2
   2222a:	f3bf 8f6f 	isb	sy
   2222e:	4770      	bx	lr

00022230 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   22230:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	k_fifo_put(fifo, buf);
   22232:	f002 f9ec 	bl	2460e <k_queue_append>
}
   22236:	bd08      	pop	{r3, pc}

00022238 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   22238:	b538      	push	{r3, r4, r5, lr}
   2223a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   2223c:	e00a      	b.n	22254 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   2223e:	2300      	movs	r3, #0
   22240:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   22242:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   22244:	7aa0      	ldrb	r0, [r4, #10]
   22246:	f7f2 fa0b 	bl	14660 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2224a:	6a03      	ldr	r3, [r0, #32]
   2224c:	b193      	cbz	r3, 22274 <net_buf_unref+0x3c>
			pool->destroy(buf);
   2224e:	4620      	mov	r0, r4
   22250:	4798      	blx	r3
{
   22252:	462c      	mov	r4, r5
	while (buf) {
   22254:	b194      	cbz	r4, 2227c <net_buf_unref+0x44>
		struct net_buf *frags = buf->frags;
   22256:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   22258:	7a23      	ldrb	r3, [r4, #8]
   2225a:	3b01      	subs	r3, #1
   2225c:	b2db      	uxtb	r3, r3
   2225e:	7223      	strb	r3, [r4, #8]
   22260:	b963      	cbnz	r3, 2227c <net_buf_unref+0x44>
		if (buf->__buf) {
   22262:	6961      	ldr	r1, [r4, #20]
   22264:	2900      	cmp	r1, #0
   22266:	d0ea      	beq.n	2223e <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   22268:	4620      	mov	r0, r4
   2226a:	f7ff fef1 	bl	22050 <data_unref>
			buf->__buf = NULL;
   2226e:	2300      	movs	r3, #0
   22270:	6163      	str	r3, [r4, #20]
   22272:	e7e4      	b.n	2223e <net_buf_unref+0x6>
		} else {
			net_buf_destroy(buf);
   22274:	4620      	mov	r0, r4
   22276:	f7ff fee2 	bl	2203e <net_buf_destroy>
   2227a:	e7ea      	b.n	22252 <net_buf_unref+0x1a>
		}

		buf = frags;
	}
}
   2227c:	bd38      	pop	{r3, r4, r5, pc}

0002227e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2227e:	7a02      	ldrb	r2, [r0, #8]
   22280:	3201      	adds	r2, #1
   22282:	7202      	strb	r2, [r0, #8]
	return buf;
}
   22284:	4770      	bx	lr

00022286 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   22286:	6883      	ldr	r3, [r0, #8]
   22288:	440b      	add	r3, r1
   2228a:	6003      	str	r3, [r0, #0]
}
   2228c:	4770      	bx	lr

0002228e <net_buf_simple_add>:
	return buf->data + buf->len;
   2228e:	6802      	ldr	r2, [r0, #0]
   22290:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22292:	4419      	add	r1, r3
   22294:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22296:	18d0      	adds	r0, r2, r3
   22298:	4770      	bx	lr

0002229a <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2229a:	b538      	push	{r3, r4, r5, lr}
   2229c:	460d      	mov	r5, r1
   2229e:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   222a0:	4611      	mov	r1, r2
   222a2:	f7ff fff4 	bl	2228e <net_buf_simple_add>
   222a6:	4622      	mov	r2, r4
   222a8:	4629      	mov	r1, r5
   222aa:	f002 fdae 	bl	24e0a <memcpy>
}
   222ae:	bd38      	pop	{r3, r4, r5, pc}

000222b0 <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   222b0:	4603      	mov	r3, r0
	void *data = buf->data;
   222b2:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   222b4:	889a      	ldrh	r2, [r3, #4]
   222b6:	1a52      	subs	r2, r2, r1
   222b8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   222ba:	4401      	add	r1, r0
   222bc:	6019      	str	r1, [r3, #0]

	return data;
}
   222be:	4770      	bx	lr

000222c0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   222c0:	6802      	ldr	r2, [r0, #0]
   222c2:	6880      	ldr	r0, [r0, #8]
}
   222c4:	1a10      	subs	r0, r2, r0
   222c6:	4770      	bx	lr

000222c8 <nrf_usbd_ep_amount_get>:

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   222c8:	f011 0f80 	tst.w	r1, #128	; 0x80
   222cc:	d105      	bne.n	222da <nrf_usbd_ep_amount_get+0x12>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   222ce:	f011 0f08 	tst.w	r1, #8
   222d2:	d011      	beq.n	222f8 <nrf_usbd_ep_amount_get+0x30>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   222d4:	f8d0 07a8 	ldr.w	r0, [r0, #1960]	; 0x7a8
   222d8:	4770      	bx	lr
        if (NRF_USBD_EPISO_CHECK(ep))
   222da:	f011 0f08 	tst.w	r1, #8
   222de:	d002      	beq.n	222e6 <nrf_usbd_ep_amount_get+0x1e>
            ret = p_reg->ISOIN.AMOUNT;
   222e0:	f8d0 06a8 	ldr.w	r0, [r0, #1704]	; 0x6a8
   222e4:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   222e6:	f001 010f 	and.w	r1, r1, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
   222ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   222ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   222f2:	f8d0 0608 	ldr.w	r0, [r0, #1544]	; 0x608
   222f6:	4770      	bx	lr
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   222f8:	f001 010f 	and.w	r1, r1, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
   222fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   22300:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   22304:	f8d0 0708 	ldr.w	r0, [r0, #1800]	; 0x708
        }
    }

    return ret;
}
   22308:	4770      	bx	lr

0002230a <ep_is_valid>:
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   2230a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2230e:	f010 0f80 	tst.w	r0, #128	; 0x80
   22312:	d106      	bne.n	22322 <ep_is_valid+0x18>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   22314:	2b08      	cmp	r3, #8
   22316:	d00f      	beq.n	22338 <ep_is_valid+0x2e>
			if (ep_num >= CFG_EPOUT_CNT) {
   22318:	f010 0f78 	tst.w	r0, #120	; 0x78
   2231c:	d10e      	bne.n	2233c <ep_is_valid+0x32>
	return true;
   2231e:	2001      	movs	r0, #1
   22320:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   22322:	2b08      	cmp	r3, #8
   22324:	d004      	beq.n	22330 <ep_is_valid+0x26>
			if (ep_num >= CFG_EPIN_CNT) {
   22326:	f010 0f78 	tst.w	r0, #120	; 0x78
   2232a:	d103      	bne.n	22334 <ep_is_valid+0x2a>
	return true;
   2232c:	2001      	movs	r0, #1
   2232e:	4770      	bx	lr
   22330:	2001      	movs	r0, #1
   22332:	4770      	bx	lr
				return false;
   22334:	2000      	movs	r0, #0
   22336:	4770      	bx	lr
	return true;
   22338:	2001      	movs	r0, #1
   2233a:	4770      	bx	lr
				return false;
   2233c:	2000      	movs	r0, #0
}
   2233e:	4770      	bx	lr

00022340 <in_endpoint_ctx>:
{
   22340:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   22342:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   22346:	f7f2 f993 	bl	14670 <endpoint_ctx>
}
   2234a:	bd08      	pop	{r3, pc}

0002234c <out_endpoint_ctx>:
{
   2234c:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   2234e:	f7f2 f98f 	bl	14670 <endpoint_ctx>
}
   22352:	bd08      	pop	{r3, pc}

00022354 <ep_ctx_reset>:
{
   22354:	b510      	push	{r4, lr}
   22356:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   22358:	6903      	ldr	r3, [r0, #16]
   2235a:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2235c:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   2235e:	2300      	movs	r3, #0
   22360:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   22362:	7f83      	ldrb	r3, [r0, #30]
   22364:	b933      	cbnz	r3, 22374 <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
   22366:	2301      	movs	r3, #1
   22368:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2236a:	2300      	movs	r3, #0
   2236c:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
   2236e:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
   22370:	77e3      	strb	r3, [r4, #31]
}
   22372:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   22374:	7a40      	ldrb	r0, [r0, #9]
   22376:	f001 ff3a 	bl	241ee <nrfx_usbd_ep_abort>
   2237a:	e7f4      	b.n	22366 <ep_ctx_reset+0x12>

0002237c <usb_dc_power_event_handler>:
	switch (event) {
   2237c:	2801      	cmp	r0, #1
   2237e:	d008      	beq.n	22392 <usb_dc_power_event_handler+0x16>
   22380:	2802      	cmp	r0, #2
   22382:	d002      	beq.n	2238a <usb_dc_power_event_handler+0xe>
   22384:	b100      	cbz	r0, 22388 <usb_dc_power_event_handler+0xc>
   22386:	4770      	bx	lr
   22388:	2001      	movs	r0, #1
{
   2238a:	b508      	push	{r3, lr}
	submit_dc_power_event(new_state);
   2238c:	f7f2 fa14 	bl	147b8 <submit_dc_power_event>
}
   22390:	bd08      	pop	{r3, pc}
		new_state = USBD_DETACHED;
   22392:	2000      	movs	r0, #0
   22394:	e7f9      	b.n	2238a <usb_dc_power_event_handler+0xe>

00022396 <onoff_cancel_or_release>:
 *
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
   22396:	b510      	push	{r4, lr}
   22398:	4604      	mov	r4, r0
	int rv = onoff_cancel(mgr, cli);
   2239a:	f7fe f86f 	bl	2047c <onoff_cancel>

	if (rv == -EALREADY) {
   2239e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   223a2:	d000      	beq.n	223a6 <onoff_cancel_or_release+0x10>
		rv = onoff_release(mgr);
	}
	return rv;
}
   223a4:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
   223a6:	4620      	mov	r0, r4
   223a8:	f7fe f841 	bl	2042e <onoff_release>
	return rv;
   223ac:	e7fa      	b.n	223a4 <onoff_cancel_or_release+0xe>

000223ae <hfxo_stop>:
{
   223ae:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   223b0:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   223b4:	2200      	movs	r2, #0
   223b6:	f3bf 8f5b 	dmb	ish
   223ba:	e853 1f00 	ldrex	r1, [r3]
   223be:	2901      	cmp	r1, #1
   223c0:	d104      	bne.n	223cc <hfxo_stop+0x1e>
   223c2:	e843 2c00 	strex	ip, r2, [r3]
   223c6:	f1bc 0f00 	cmp.w	ip, #0
   223ca:	d1f6      	bne.n	223ba <hfxo_stop+0xc>
   223cc:	f3bf 8f5b 	dmb	ish
   223d0:	d105      	bne.n	223de <hfxo_stop+0x30>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   223d2:	f100 010c 	add.w	r1, r0, #12
   223d6:	69c0      	ldr	r0, [r0, #28]
   223d8:	f7ff ffdd 	bl	22396 <onoff_cancel_or_release>
}
   223dc:	bd08      	pop	{r3, pc}
	return 0;
   223de:	2000      	movs	r0, #0
   223e0:	e7fc      	b.n	223dc <hfxo_stop+0x2e>

000223e2 <usbd_enable_endpoints>:
{
   223e2:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   223e4:	2400      	movs	r4, #0
   223e6:	e000      	b.n	223ea <usbd_enable_endpoints+0x8>
   223e8:	3401      	adds	r4, #1
   223ea:	2c07      	cmp	r4, #7
   223ec:	dc09      	bgt.n	22402 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
   223ee:	b2e0      	uxtb	r0, r4
   223f0:	f7ff ffa6 	bl	22340 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   223f4:	7a03      	ldrb	r3, [r0, #8]
   223f6:	2b00      	cmp	r3, #0
   223f8:	d0f6      	beq.n	223e8 <usbd_enable_endpoints+0x6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   223fa:	7a40      	ldrb	r0, [r0, #9]
   223fc:	f7f6 fd3c 	bl	18e78 <nrfx_usbd_ep_enable>
   22400:	e7f2      	b.n	223e8 <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   22402:	2088      	movs	r0, #136	; 0x88
   22404:	f7ff ff9c 	bl	22340 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   22408:	7a03      	ldrb	r3, [r0, #8]
   2240a:	b90b      	cbnz	r3, 22410 <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2240c:	2400      	movs	r4, #0
   2240e:	e004      	b.n	2241a <usbd_enable_endpoints+0x38>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   22410:	7a40      	ldrb	r0, [r0, #9]
   22412:	f7f6 fd31 	bl	18e78 <nrfx_usbd_ep_enable>
   22416:	e7f9      	b.n	2240c <usbd_enable_endpoints+0x2a>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   22418:	3401      	adds	r4, #1
   2241a:	2c07      	cmp	r4, #7
   2241c:	dc09      	bgt.n	22432 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
   2241e:	b2e0      	uxtb	r0, r4
   22420:	f7ff ff94 	bl	2234c <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   22424:	7a03      	ldrb	r3, [r0, #8]
   22426:	2b00      	cmp	r3, #0
   22428:	d0f6      	beq.n	22418 <usbd_enable_endpoints+0x36>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2242a:	7a40      	ldrb	r0, [r0, #9]
   2242c:	f7f6 fd24 	bl	18e78 <nrfx_usbd_ep_enable>
   22430:	e7f2      	b.n	22418 <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   22432:	2008      	movs	r0, #8
   22434:	f7ff ff8a 	bl	2234c <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   22438:	7a03      	ldrb	r3, [r0, #8]
   2243a:	b903      	cbnz	r3, 2243e <usbd_enable_endpoints+0x5c>
}
   2243c:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2243e:	7a40      	ldrb	r0, [r0, #9]
   22440:	f7f6 fd1a 	bl	18e78 <nrfx_usbd_ep_enable>
}
   22444:	e7fa      	b.n	2243c <usbd_enable_endpoints+0x5a>

00022446 <usbd_work_process_recvreq>:
	if (!ep_ctx->read_pending) {
   22446:	7f4b      	ldrb	r3, [r1, #29]
   22448:	b1fb      	cbz	r3, 2248a <usbd_work_process_recvreq+0x44>
{
   2244a:	b570      	push	{r4, r5, r6, lr}
   2244c:	b084      	sub	sp, #16
   2244e:	460c      	mov	r4, r1
	if (!ep_ctx->read_complete) {
   22450:	7f0b      	ldrb	r3, [r1, #28]
   22452:	b90b      	cbnz	r3, 22458 <usbd_work_process_recvreq+0x12>
}
   22454:	b004      	add	sp, #16
   22456:	bd70      	pop	{r4, r5, r6, pc}
	ep_ctx->read_pending = false;
   22458:	2600      	movs	r6, #0
   2245a:	774e      	strb	r6, [r1, #29]
	ep_ctx->read_complete = false;
   2245c:	770e      	strb	r6, [r1, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2245e:	f100 0538 	add.w	r5, r0, #56	; 0x38
	return z_impl_k_mutex_lock(mutex, timeout);
   22462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2246a:	4628      	mov	r0, r5
   2246c:	f7f7 f864 	bl	19538 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   22470:	6963      	ldr	r3, [r4, #20]
   22472:	9301      	str	r3, [sp, #4]
   22474:	6863      	ldr	r3, [r4, #4]
   22476:	9302      	str	r3, [sp, #8]
   22478:	9603      	str	r6, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   2247a:	a901      	add	r1, sp, #4
   2247c:	7a60      	ldrb	r0, [r4, #9]
   2247e:	f7f6 f86d 	bl	1855c <nrfx_usbd_ep_transfer>
	return z_impl_k_mutex_unlock(mutex);
   22482:	4628      	mov	r0, r5
   22484:	f7f7 f8dc 	bl	19640 <z_impl_k_mutex_unlock>
   22488:	e7e4      	b.n	22454 <usbd_work_process_recvreq+0xe>
   2248a:	4770      	bx	lr

0002248c <hfxo_start>:
{
   2248c:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   2248e:	f100 0320 	add.w	r3, r0, #32
   22492:	2201      	movs	r2, #1
   22494:	f3bf 8f5b 	dmb	ish
   22498:	e853 1f00 	ldrex	r1, [r3]
   2249c:	2900      	cmp	r1, #0
   2249e:	d104      	bne.n	224aa <hfxo_start+0x1e>
   224a0:	e843 2c00 	strex	ip, r2, [r3]
   224a4:	f1bc 0f00 	cmp.w	ip, #0
   224a8:	d1f6      	bne.n	22498 <hfxo_start+0xc>
   224aa:	f3bf 8f5b 	dmb	ish
   224ae:	d10b      	bne.n	224c8 <hfxo_start+0x3c>
	*notify = (struct sys_notify){
   224b0:	2300      	movs	r3, #0
   224b2:	6103      	str	r3, [r0, #16]
   224b4:	6143      	str	r3, [r0, #20]
   224b6:	6183      	str	r3, [r0, #24]
   224b8:	2301      	movs	r3, #1
   224ba:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   224bc:	f100 010c 	add.w	r1, r0, #12
   224c0:	69c0      	ldr	r0, [r0, #28]
   224c2:	f7fd ff53 	bl	2036c <onoff_request>
}
   224c6:	bd08      	pop	{r3, pc}
	return 0;
   224c8:	2000      	movs	r0, #0
   224ca:	e7fc      	b.n	224c6 <hfxo_start+0x3a>

000224cc <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   224cc:	7801      	ldrb	r1, [r0, #0]
   224ce:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   224d2:	7903      	ldrb	r3, [r0, #4]
   224d4:	b903      	cbnz	r3, 224d8 <usb_dc_ep_check_cap+0xc>
   224d6:	b952      	cbnz	r2, 224ee <usb_dc_ep_check_cap+0x22>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   224d8:	2a08      	cmp	r2, #8
   224da:	d80b      	bhi.n	224f4 <usb_dc_ep_check_cap+0x28>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   224dc:	2b01      	cmp	r3, #1
   224de:	d001      	beq.n	224e4 <usb_dc_ep_check_cap+0x18>
	return 0;
   224e0:	2000      	movs	r0, #0
   224e2:	4770      	bx	lr
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   224e4:	f011 0f08 	tst.w	r1, #8
   224e8:	d007      	beq.n	224fa <usb_dc_ep_check_cap+0x2e>
	return 0;
   224ea:	2000      	movs	r0, #0
   224ec:	4770      	bx	lr
		return -1;
   224ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   224f2:	4770      	bx	lr
		return -1;
   224f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   224f8:	4770      	bx	lr
		return -1;
   224fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   224fe:	4770      	bx	lr

00022500 <usb_dc_ep_disable>:
{
   22500:	b538      	push	{r3, r4, r5, lr}
   22502:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   22504:	f7f2 f8b4 	bl	14670 <endpoint_ctx>
	if (!ep_ctx) {
   22508:	b168      	cbz	r0, 22526 <usb_dc_ep_disable+0x26>
   2250a:	4605      	mov	r5, r0
	if (!ep_ctx->cfg.en) {
   2250c:	7a03      	ldrb	r3, [r0, #8]
   2250e:	b16b      	cbz	r3, 2252c <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   22510:	4620      	mov	r0, r4
   22512:	f7f6 fc93 	bl	18e3c <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
   22516:	2400      	movs	r4, #0
   22518:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   2251a:	4628      	mov	r0, r5
   2251c:	f7ff ff1a 	bl	22354 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   22520:	722c      	strb	r4, [r5, #8]
	return 0;
   22522:	4620      	mov	r0, r4
}
   22524:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22526:	f06f 0015 	mvn.w	r0, #21
   2252a:	e7fb      	b.n	22524 <usb_dc_ep_disable+0x24>
		return -EALREADY;
   2252c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   22530:	e7f8      	b.n	22524 <usb_dc_ep_disable+0x24>

00022532 <usb_dc_ep_read>:
{
   22532:	b570      	push	{r4, r5, r6, lr}
   22534:	4605      	mov	r5, r0
   22536:	460c      	mov	r4, r1
   22538:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2253a:	f7f2 fdc3 	bl	150c4 <usb_dc_ep_read_wait>
	if (ret) {
   2253e:	b918      	cbnz	r0, 22548 <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
   22540:	b11c      	cbz	r4, 2254a <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
   22542:	4628      	mov	r0, r5
   22544:	f7f2 fe1c 	bl	15180 <usb_dc_ep_read_continue>
}
   22548:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   2254a:	2e00      	cmp	r6, #0
   2254c:	d1f9      	bne.n	22542 <usb_dc_ep_read+0x10>
   2254e:	e7fb      	b.n	22548 <usb_dc_ep_read+0x16>

00022550 <nrf_saadc_channel_init>:
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
   22550:	7813      	ldrb	r3, [r2, #0]
   22552:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
   22556:	f892 c001 	ldrb.w	ip, [r2, #1]
   2255a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
   2255e:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
   22562:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   22566:	f892 c002 	ldrb.w	ip, [r2, #2]
   2256a:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   2256e:	f40c 6ce0 	and.w	ip, ip, #1792	; 0x700
   22572:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
   22576:	f892 c003 	ldrb.w	ip, [r2, #3]
   2257a:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
   2257e:	f40c 5c80 	and.w	ip, ip, #4096	; 0x1000
   22582:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
   22586:	f892 c004 	ldrb.w	ip, [r2, #4]
   2258a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   2258e:	f40c 2ce0 	and.w	ip, ip, #458752	; 0x70000
   22592:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   22596:	f892 c005 	ldrb.w	ip, [r2, #5]
   2259a:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   2259e:	f40c 1c80 	and.w	ip, ip, #1048576	; 0x100000
   225a2:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
   225a6:	7992      	ldrb	r2, [r2, #6]
   225a8:	0612      	lsls	r2, r2, #24
   225aa:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
   225ae:	4313      	orrs	r3, r2
    p_reg->CH[channel].CONFIG =
   225b0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   225b4:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
}
   225b8:	4770      	bx	lr

000225ba <check_buffer_size>:
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   225ba:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
   225bc:	6803      	ldr	r3, [r0, #0]
   225be:	b113      	cbz	r3, 225c6 <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   225c0:	899b      	ldrh	r3, [r3, #12]
   225c2:	fb03 1101 	mla	r1, r3, r1, r1
	if (sequence->buffer_size < needed_buffer_size) {
   225c6:	68c3      	ldr	r3, [r0, #12]
   225c8:	428b      	cmp	r3, r1
   225ca:	d301      	bcc.n	225d0 <check_buffer_size+0x16>
	return 0;
   225cc:	2000      	movs	r0, #0
   225ce:	4770      	bx	lr
		return -ENOMEM;
   225d0:	f06f 000b 	mvn.w	r0, #11
}
   225d4:	4770      	bx	lr

000225d6 <adc_context_request_next_sampling>:
	k_sem_init(&ctx->lock, 0, 1);
	k_sem_init(&ctx->sync, 0, 1);
}

static inline void adc_context_request_next_sampling(struct adc_context *ctx)
{
   225d6:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   225d8:	f3bf 8f5b 	dmb	ish
   225dc:	e850 3f00 	ldrex	r3, [r0]
   225e0:	1c5a      	adds	r2, r3, #1
   225e2:	e840 2100 	strex	r1, r2, [r0]
   225e6:	2900      	cmp	r1, #0
   225e8:	d1f8      	bne.n	225dc <adc_context_request_next_sampling+0x6>
   225ea:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   225ee:	b11b      	cbz	r3, 225f8 <adc_context_request_next_sampling+0x22>
		 * do not start another one from here, this will be done from
		 * adc_context_on_sampling_done() after the current sampling is
		 * complete. Instead, note this fact, and inform the user about
		 * it after the sequence is done.
		 */
		ctx->status = -EBUSY;
   225f0:	f06f 030f 	mvn.w	r3, #15
   225f4:	6703      	str	r3, [r0, #112]	; 0x70
	}
}
   225f6:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
   225f8:	f7f2 feee 	bl	153d8 <adc_context_start_sampling>
   225fc:	e7fb      	b.n	225f6 <adc_context_request_next_sampling+0x20>

000225fe <adc_context_on_timer_expired>:
{
	k_timer_stop(&ctx->timer);
}

static void adc_context_on_timer_expired(struct k_timer *timer_id)
{
   225fe:	b508      	push	{r3, lr}
	struct adc_context *ctx =
		CONTAINER_OF(timer_id, struct adc_context, timer);

	adc_context_request_next_sampling(ctx);
   22600:	3808      	subs	r0, #8
   22602:	f7ff ffe8 	bl	225d6 <adc_context_request_next_sampling>
}
   22606:	bd08      	pop	{r3, pc}

00022608 <adc_context_lock>:
#endif /* ADC_CONTEXT_USES_KERNEL_TIMER */

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
   22608:	b570      	push	{r4, r5, r6, lr}
   2260a:	4604      	mov	r4, r0
   2260c:	460e      	mov	r6, r1
   2260e:	4615      	mov	r5, r2
	k_sem_take(&ctx->lock, K_FOREVER);
   22610:	3040      	adds	r0, #64	; 0x40
	return z_impl_k_sem_take(sem, timeout);
   22612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2261a:	f7f7 f8b5 	bl	19788 <z_impl_k_sem_take>

#ifdef CONFIG_ADC_ASYNC
	ctx->asynchronous = asynchronous;
   2261e:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
	ctx->signal = signal;
   22622:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* CONFIG_ADC_ASYNC */
}
   22624:	bd70      	pop	{r4, r5, r6, pc}

00022626 <adc_context_wait_for_completion>:
}

static inline int adc_context_wait_for_completion(struct adc_context *ctx)
{
#ifdef CONFIG_ADC_ASYNC
	if (ctx->asynchronous) {
   22626:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   2262a:	b10b      	cbz	r3, 22630 <adc_context_wait_for_completion+0xa>
		return 0;
   2262c:	2000      	movs	r0, #0
	}
#endif /* CONFIG_ADC_ASYNC */

	k_sem_take(&ctx->sync, K_FOREVER);
	return ctx->status;
}
   2262e:	4770      	bx	lr
{
   22630:	b510      	push	{r4, lr}
   22632:	4604      	mov	r4, r0
	k_sem_take(&ctx->sync, K_FOREVER);
   22634:	3058      	adds	r0, #88	; 0x58
   22636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2263a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2263e:	f7f7 f8a3 	bl	19788 <z_impl_k_sem_take>
	return ctx->status;
   22642:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
   22644:	bd10      	pop	{r4, pc}

00022646 <adc_context_enable_timer>:
{
   22646:	b510      	push	{r4, lr}
   22648:	b082      	sub	sp, #8
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
   2264a:	f100 0408 	add.w	r4, r0, #8
   2264e:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
		t += off;
   22652:	f240 33e7 	movw	r3, #999	; 0x3e7
   22656:	18c0      	adds	r0, r0, r3
   22658:	bf2c      	ite	cs
   2265a:	2101      	movcs	r1, #1
   2265c:	2100      	movcc	r1, #0
			return t / ((uint64_t)from_hz / to_hz);
   2265e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22662:	2300      	movs	r3, #0
   22664:	f7df fb70 	bl	1d48 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   22668:	9000      	str	r0, [sp, #0]
   2266a:	9101      	str	r1, [sp, #4]
   2266c:	2200      	movs	r2, #0
   2266e:	2300      	movs	r3, #0
   22670:	4620      	mov	r0, r4
   22672:	f7f7 ff5d 	bl	1a530 <z_impl_k_timer_start>
}
   22676:	b002      	add	sp, #8
   22678:	bd10      	pop	{r4, pc}

0002267a <adc_context_start_read>:
	k_sem_give(&ctx->sync);
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
   2267a:	b538      	push	{r3, r4, r5, lr}
   2267c:	4684      	mov	ip, r0
   2267e:	460d      	mov	r5, r1
	ctx->sequence = *sequence;
   22680:	f100 0e7c 	add.w	lr, r0, #124	; 0x7c
   22684:	460c      	mov	r4, r1
   22686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   22688:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2268c:	6823      	ldr	r3, [r4, #0]
   2268e:	f8ce 3000 	str.w	r3, [lr]
	ctx->status = 0;
   22692:	2300      	movs	r3, #0
   22694:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

	if (sequence->options) {
   22698:	682b      	ldr	r3, [r5, #0]
   2269a:	b153      	cbz	r3, 226b2 <adc_context_start_read+0x38>
		ctx->options = *sequence->options;
   2269c:	f10c 0490 	add.w	r4, ip, #144	; 0x90
   226a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   226a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   226a6:	f8cc 407c 	str.w	r4, [ip, #124]	; 0x7c
		ctx->sampling_index = 0U;
   226aa:	2300      	movs	r3, #0
   226ac:	f8ac 30a0 	strh.w	r3, [ip, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   226b0:	b918      	cbnz	r0, 226ba <adc_context_start_read+0x40>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   226b2:	4660      	mov	r0, ip
   226b4:	f7f2 fe90 	bl	153d8 <adc_context_start_sampling>
}
   226b8:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   226ba:	2300      	movs	r3, #0
   226bc:	f3bf 8f5b 	dmb	ish
   226c0:	e85c 2f00 	ldrex	r2, [ip]
   226c4:	e84c 3100 	strex	r1, r3, [ip]
   226c8:	2900      	cmp	r1, #0
   226ca:	d1f9      	bne.n	226c0 <adc_context_start_read+0x46>
   226cc:	f3bf 8f5b 	dmb	ish
			adc_context_enable_timer(ctx);
   226d0:	4660      	mov	r0, ip
   226d2:	f7ff ffb8 	bl	22646 <adc_context_enable_timer>
			return;
   226d6:	e7ef      	b.n	226b8 <adc_context_start_read+0x3e>

000226d8 <adc_context_release>:
{
   226d8:	b508      	push	{r3, lr}
	if (ctx->asynchronous && (status == 0)) {
   226da:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   226de:	b103      	cbz	r3, 226e2 <adc_context_release+0xa>
   226e0:	b111      	cbz	r1, 226e8 <adc_context_release+0x10>
	k_sem_give(&ctx->lock);
   226e2:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
   226e4:	f7f7 f828 	bl	19738 <z_impl_k_sem_give>
}
   226e8:	bd08      	pop	{r3, pc}

000226ea <adc_context_unlock_unconditionally>:
{
   226ea:	b508      	push	{r3, lr}
	return sem->count;
   226ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
   226ee:	b103      	cbz	r3, 226f2 <adc_context_unlock_unconditionally+0x8>
}
   226f0:	bd08      	pop	{r3, pc}
		k_sem_give(&ctx->lock);
   226f2:	3040      	adds	r0, #64	; 0x40
   226f4:	f7f7 f820 	bl	19738 <z_impl_k_sem_give>
}
   226f8:	e7fa      	b.n	226f0 <adc_context_unlock_unconditionally+0x6>

000226fa <adc_context_complete>:
{
   226fa:	b510      	push	{r4, lr}
   226fc:	4604      	mov	r4, r0
	if (ctx->asynchronous) {
   226fe:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   22702:	b933      	cbnz	r3, 22712 <adc_context_complete+0x18>
	if (status != 0) {
   22704:	b101      	cbz	r1, 22708 <adc_context_complete+0xe>
		ctx->status = status;
   22706:	6701      	str	r1, [r0, #112]	; 0x70
	k_sem_give(&ctx->sync);
   22708:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2270c:	f7f7 f814 	bl	19738 <z_impl_k_sem_give>
}
   22710:	bd10      	pop	{r4, pc}
		if (ctx->signal) {
   22712:	6f40      	ldr	r0, [r0, #116]	; 0x74
   22714:	b108      	cbz	r0, 2271a <adc_context_complete+0x20>
	return z_impl_k_poll_signal_raise(sig, result);
   22716:	f7f7 ff3b 	bl	1a590 <z_impl_k_poll_signal_raise>
		k_sem_give(&ctx->lock);
   2271a:	f104 0040 	add.w	r0, r4, #64	; 0x40
	z_impl_k_sem_give(sem);
   2271e:	f7f7 f80b 	bl	19738 <z_impl_k_sem_give>
		return;
   22722:	e7f5      	b.n	22710 <adc_context_complete+0x16>

00022724 <adc_context_on_sampling_done>:
 * depending on the realized sequence) is done. It calls the defined callback
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
   22724:	b510      	push	{r4, lr}
   22726:	4604      	mov	r4, r0
	if (ctx->sequence.options) {
   22728:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2272a:	b30b      	cbz	r3, 22770 <adc_context_on_sampling_done+0x4c>
   2272c:	4608      	mov	r0, r1
		adc_sequence_callback callback = ctx->options.callback;
   2272e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   22732:	b143      	cbz	r3, 22746 <adc_context_on_sampling_done+0x22>
			action = callback(dev,
   22734:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   22738:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   2273c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   2273e:	2801      	cmp	r0, #1
   22740:	d00d      	beq.n	2275e <adc_context_on_sampling_done+0x3a>
   22742:	2802      	cmp	r0, #2
   22744:	d00e      	beq.n	22764 <adc_context_on_sampling_done+0x40>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   22746:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
			    ctx->options.extra_samplings) {
   2274a:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
			if (ctx->sampling_index <
   2274e:	4293      	cmp	r3, r2
   22750:	d213      	bcs.n	2277a <adc_context_on_sampling_done+0x56>
				++ctx->sampling_index;
   22752:	3301      	adds	r3, #1
   22754:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		bool repeat = false;
   22758:	2100      	movs	r1, #0
		bool finish = false;
   2275a:	460b      	mov	r3, r1
   2275c:	e004      	b.n	22768 <adc_context_on_sampling_done+0x44>
		switch (action) {
   2275e:	2101      	movs	r1, #1
   22760:	2300      	movs	r3, #0
   22762:	e001      	b.n	22768 <adc_context_on_sampling_done+0x44>
		bool repeat = false;
   22764:	2100      	movs	r1, #0
			finish = true;
   22766:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
   22768:	b153      	cbz	r3, 22780 <adc_context_on_sampling_done+0x5c>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   2276a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2276e:	bb13      	cbnz	r3, 227b6 <adc_context_on_sampling_done+0x92>
			adc_context_disable_timer(ctx);
		}
	}

	adc_context_complete(ctx, 0);
   22770:	2100      	movs	r1, #0
   22772:	4620      	mov	r0, r4
   22774:	f7ff ffc1 	bl	226fa <adc_context_complete>
}
   22778:	bd10      	pop	{r4, pc}
		bool repeat = false;
   2277a:	2100      	movs	r1, #0
				finish = true;
   2277c:	2301      	movs	r3, #1
   2277e:	e7f3      	b.n	22768 <adc_context_on_sampling_done+0x44>
			adc_context_update_buffer_pointer(ctx, repeat);
   22780:	4620      	mov	r0, r4
   22782:	f7f2 fe3b 	bl	153fc <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
   22786:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2278a:	b91b      	cbnz	r3, 22794 <adc_context_on_sampling_done+0x70>
				adc_context_start_sampling(ctx);
   2278c:	4620      	mov	r0, r4
   2278e:	f7f2 fe23 	bl	153d8 <adc_context_start_sampling>
   22792:	e7f1      	b.n	22778 <adc_context_on_sampling_done+0x54>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   22794:	f3bf 8f5b 	dmb	ish
   22798:	e854 3f00 	ldrex	r3, [r4]
   2279c:	1e5a      	subs	r2, r3, #1
   2279e:	e844 2100 	strex	r1, r2, [r4]
   227a2:	2900      	cmp	r1, #0
   227a4:	d1f8      	bne.n	22798 <adc_context_on_sampling_done+0x74>
   227a6:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   227aa:	2b01      	cmp	r3, #1
   227ac:	dde4      	ble.n	22778 <adc_context_on_sampling_done+0x54>
				adc_context_start_sampling(ctx);
   227ae:	4620      	mov	r0, r4
   227b0:	f7f2 fe12 	bl	153d8 <adc_context_start_sampling>
			return;
   227b4:	e7e0      	b.n	22778 <adc_context_on_sampling_done+0x54>
	k_timer_stop(&ctx->timer);
   227b6:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_timer_stop(timer);
   227ba:	f002 fa78 	bl	24cae <z_impl_k_timer_stop>
}
   227be:	e7d7      	b.n	22770 <adc_context_on_sampling_done+0x4c>

000227c0 <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   227c0:	b119      	cbz	r1, 227ca <nrf_clock_is_running+0xa>
   227c2:	2901      	cmp	r1, #1
   227c4:	d00e      	beq.n	227e4 <nrf_clock_is_running+0x24>
   227c6:	2000      	movs	r0, #0
   227c8:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   227ca:	b122      	cbz	r2, 227d6 <nrf_clock_is_running+0x16>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   227cc:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   227d0:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   227d4:	6013      	str	r3, [r2, #0]
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   227d6:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   227da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   227de:	d10e      	bne.n	227fe <nrf_clock_is_running+0x3e>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   227e0:	2000      	movs	r0, #0
   227e2:	4770      	bx	lr
            if (p_clk_src != NULL)
   227e4:	b122      	cbz	r2, 227f0 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   227e6:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   227ea:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   227ee:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   227f0:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   227f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   227f8:	d103      	bne.n	22802 <nrf_clock_is_running+0x42>
    return false;
   227fa:	2000      	movs	r0, #0
   227fc:	4770      	bx	lr
                return true;
   227fe:	2001      	movs	r0, #1
   22800:	4770      	bx	lr
                return true;
   22802:	2001      	movs	r0, #1
}
   22804:	4770      	bx	lr

00022806 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   22806:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   22808:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2280c:	0089      	lsls	r1, r1, #2
   2280e:	3138      	adds	r1, #56	; 0x38
}
   22810:	4408      	add	r0, r1
   22812:	4770      	bx	lr

00022814 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   22814:	6840      	ldr	r0, [r0, #4]
}
   22816:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2281a:	4770      	bx	lr

0002281c <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2281c:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   2281e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   22822:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   22826:	4770      	bx	lr

00022828 <get_status>:
{
   22828:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2282a:	b2c9      	uxtb	r1, r1
   2282c:	f7ff ffeb 	bl	22806 <get_sub_data>
   22830:	6880      	ldr	r0, [r0, #8]
}
   22832:	f000 0007 	and.w	r0, r0, #7
   22836:	bd08      	pop	{r3, pc}

00022838 <set_off_state>:
	__asm__ volatile(
   22838:	f04f 0340 	mov.w	r3, #64	; 0x40
   2283c:	f3ef 8211 	mrs	r2, BASEPRI
   22840:	f383 8812 	msr	BASEPRI_MAX, r3
   22844:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22848:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2284a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2284e:	d001      	beq.n	22854 <set_off_state+0x1c>
   22850:	428b      	cmp	r3, r1
   22852:	d107      	bne.n	22864 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   22854:	2301      	movs	r3, #1
   22856:	6003      	str	r3, [r0, #0]
	int err = 0;
   22858:	2000      	movs	r0, #0
	__asm__ volatile(
   2285a:	f382 8811 	msr	BASEPRI, r2
   2285e:	f3bf 8f6f 	isb	sy
}
   22862:	4770      	bx	lr
		err = -EPERM;
   22864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22868:	e7f7      	b.n	2285a <set_off_state+0x22>

0002286a <set_starting_state>:
	__asm__ volatile(
   2286a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2286e:	f3ef 8211 	mrs	r2, BASEPRI
   22872:	f383 8812 	msr	BASEPRI_MAX, r3
   22876:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2287a:	6803      	ldr	r3, [r0, #0]
   2287c:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22880:	f003 0307 	and.w	r3, r3, #7
   22884:	2b01      	cmp	r3, #1
   22886:	d008      	beq.n	2289a <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   22888:	458c      	cmp	ip, r1
   2288a:	d009      	beq.n	228a0 <set_starting_state+0x36>
		err = -EPERM;
   2288c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   22890:	f382 8811 	msr	BASEPRI, r2
   22894:	f3bf 8f6f 	isb	sy
}
   22898:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2289a:	6001      	str	r1, [r0, #0]
	int err = 0;
   2289c:	2000      	movs	r0, #0
   2289e:	e7f7      	b.n	22890 <set_starting_state+0x26>
		err = -EALREADY;
   228a0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   228a4:	e7f4      	b.n	22890 <set_starting_state+0x26>

000228a6 <set_on_state>:
	__asm__ volatile(
   228a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   228aa:	f3ef 8211 	mrs	r2, BASEPRI
   228ae:	f383 8812 	msr	BASEPRI_MAX, r3
   228b2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   228b6:	6803      	ldr	r3, [r0, #0]
   228b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   228bc:	f043 0302 	orr.w	r3, r3, #2
   228c0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   228c2:	f382 8811 	msr	BASEPRI, r2
   228c6:	f3bf 8f6f 	isb	sy
}
   228ca:	4770      	bx	lr

000228cc <clkstarted_handle>:
{
   228cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228ce:	4606      	mov	r6, r0
   228d0:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   228d2:	f7ff ff98 	bl	22806 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   228d6:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   228d8:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   228da:	2300      	movs	r3, #0
   228dc:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   228e0:	f7ff ffe1 	bl	228a6 <set_on_state>
	if (callback) {
   228e4:	b11d      	cbz	r5, 228ee <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   228e6:	463a      	mov	r2, r7
   228e8:	4621      	mov	r1, r4
   228ea:	4630      	mov	r0, r6
   228ec:	47a8      	blx	r5
}
   228ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000228f0 <stop>:
{
   228f0:	b570      	push	{r4, r5, r6, lr}
   228f2:	4606      	mov	r6, r0
   228f4:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   228f6:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   228f8:	4621      	mov	r1, r4
   228fa:	f7ff ff84 	bl	22806 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   228fe:	4629      	mov	r1, r5
   22900:	3008      	adds	r0, #8
   22902:	f7ff ff99 	bl	22838 <set_off_state>
	if (err < 0) {
   22906:	2800      	cmp	r0, #0
   22908:	db06      	blt.n	22918 <stop+0x28>
	get_sub_config(dev, type)->stop();
   2290a:	4621      	mov	r1, r4
   2290c:	4630      	mov	r0, r6
   2290e:	f7ff ff81 	bl	22814 <get_sub_config>
   22912:	6843      	ldr	r3, [r0, #4]
   22914:	4798      	blx	r3
	return 0;
   22916:	2000      	movs	r0, #0
}
   22918:	bd70      	pop	{r4, r5, r6, pc}

0002291a <api_stop>:
{
   2291a:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2291c:	2280      	movs	r2, #128	; 0x80
   2291e:	f7ff ffe7 	bl	228f0 <stop>
}
   22922:	bd08      	pop	{r3, pc}

00022924 <async_start>:
{
   22924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22928:	4606      	mov	r6, r0
   2292a:	4690      	mov	r8, r2
   2292c:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2292e:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   22930:	4629      	mov	r1, r5
   22932:	f7ff ff68 	bl	22806 <get_sub_data>
   22936:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   22938:	9906      	ldr	r1, [sp, #24]
   2293a:	3008      	adds	r0, #8
   2293c:	f7ff ff95 	bl	2286a <set_starting_state>
	if (err < 0) {
   22940:	2800      	cmp	r0, #0
   22942:	db09      	blt.n	22958 <async_start+0x34>
	subdata->cb = cb;
   22944:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   22948:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2294a:	4629      	mov	r1, r5
   2294c:	4630      	mov	r0, r6
   2294e:	f7ff ff61 	bl	22814 <get_sub_config>
   22952:	6803      	ldr	r3, [r0, #0]
   22954:	4798      	blx	r3
	return 0;
   22956:	2000      	movs	r0, #0
}
   22958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002295c <api_start>:
{
   2295c:	b510      	push	{r4, lr}
   2295e:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   22960:	2480      	movs	r4, #128	; 0x80
   22962:	9400      	str	r4, [sp, #0]
   22964:	f7ff ffde 	bl	22924 <async_start>
}
   22968:	b002      	add	sp, #8
   2296a:	bd10      	pop	{r4, pc}

0002296c <onoff_started_callback>:
{
   2296c:	b510      	push	{r4, lr}
   2296e:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   22970:	b2c9      	uxtb	r1, r1
   22972:	f7ff ff53 	bl	2281c <get_onoff_manager>
	notify(mgr, 0);
   22976:	2100      	movs	r1, #0
   22978:	47a0      	blx	r4
}
   2297a:	bd10      	pop	{r4, pc}

0002297c <hfclk_start>:
{
   2297c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2297e:	2001      	movs	r0, #1
   22980:	f7f4 fa4c 	bl	16e1c <nrfx_clock_start>
}
   22984:	bd08      	pop	{r3, pc}

00022986 <lfclk_start>:
{
   22986:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   22988:	2000      	movs	r0, #0
   2298a:	f7f4 fa47 	bl	16e1c <nrfx_clock_start>
}
   2298e:	bd08      	pop	{r3, pc}

00022990 <hfclk_stop>:
{
   22990:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   22992:	2001      	movs	r0, #1
   22994:	f001 f93d 	bl	23c12 <nrfx_clock_stop>
}
   22998:	bd08      	pop	{r3, pc}

0002299a <lfclk_stop>:
{
   2299a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2299c:	2000      	movs	r0, #0
   2299e:	f001 f938 	bl	23c12 <nrfx_clock_stop>
}
   229a2:	bd08      	pop	{r3, pc}

000229a4 <k_msleep>:
{
   229a4:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   229a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   229aa:	17c1      	asrs	r1, r0, #31
	return z_impl_k_sleep(timeout);
   229ac:	f7f7 fb9c 	bl	1a0e8 <z_impl_k_sleep>
}
   229b0:	bd08      	pop	{r3, pc}

000229b2 <blocking_start_callback>:
{
   229b2:	b508      	push	{r3, lr}
   229b4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   229b6:	f7f6 febf 	bl	19738 <z_impl_k_sem_give>
}
   229ba:	bd08      	pop	{r3, pc}

000229bc <rng_pool_put>:
	uint8_t first = rngp->first_read;
   229bc:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   229be:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   229c0:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   229c4:	1a9a      	subs	r2, r3, r2
   229c6:	ea3c 0202 	bics.w	r2, ip, r2
   229ca:	d007      	beq.n	229dc <rng_pool_put+0x20>
	rngp->buffer[last] = byte;
   229cc:	18c2      	adds	r2, r0, r3
   229ce:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   229d0:	3301      	adds	r3, #1
   229d2:	ea03 030c 	and.w	r3, r3, ip
   229d6:	7083      	strb	r3, [r0, #2]
	return 0;
   229d8:	2000      	movs	r0, #0
   229da:	4770      	bx	lr
		return -ENOBUFS;
   229dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   229e0:	4770      	bx	lr

000229e2 <rng_pool_init>:
	rngp->first_alloc = 0U;
   229e2:	2300      	movs	r3, #0
   229e4:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   229e6:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   229e8:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   229ea:	3901      	subs	r1, #1
   229ec:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   229ee:	7102      	strb	r2, [r0, #4]
}
   229f0:	4770      	bx	lr

000229f2 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   229f2:	2000      	movs	r0, #0
   229f4:	4770      	bx	lr

000229f6 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   229f6:	b538      	push	{r3, r4, r5, lr}
   229f8:	460c      	mov	r4, r1
   229fa:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   229fc:	f7f1 fc68 	bl	142d0 <bt_is_ready>
   22a00:	b120      	cbz	r0, 22a0c <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   22a02:	4629      	mov	r1, r5
   22a04:	4620      	mov	r0, r4
   22a06:	f7f1 fba1 	bl	1414c <bt_hci_le_rand>
}
   22a0a:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   22a0c:	f06f 000a 	mvn.w	r0, #10
   22a10:	e7fb      	b.n	22a0a <entropy_bt_get_entropy+0x14>

00022a12 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   22a12:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a14:	b083      	sub	sp, #12
   22a16:	460f      	mov	r7, r1
   22a18:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   22a1a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   22a1e:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   22a20:	e00a      	b.n	22a38 <entropy_cc3xx_rng_get_entropy+0x26>
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   22a22:	ab01      	add	r3, sp, #4
   22a24:	462a      	mov	r2, r5
   22a26:	1939      	adds	r1, r7, r4
   22a28:	2000      	movs	r0, #0
   22a2a:	f7fa f87b 	bl	1cb24 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   22a2e:	b970      	cbnz	r0, 22a4e <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
		}

		if (olen != chunk_size) {
   22a30:	9b01      	ldr	r3, [sp, #4]
   22a32:	42ab      	cmp	r3, r5
   22a34:	d10f      	bne.n	22a56 <entropy_cc3xx_rng_get_entropy+0x44>
			return -EINVAL;
		}

		offset += chunk_size;
   22a36:	442c      	add	r4, r5
	while (offset < length) {
   22a38:	42a6      	cmp	r6, r4
   22a3a:	d905      	bls.n	22a48 <entropy_cc3xx_rng_get_entropy+0x36>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   22a3c:	1b33      	subs	r3, r6, r4
   22a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22a42:	d2ee      	bcs.n	22a22 <entropy_cc3xx_rng_get_entropy+0x10>
			chunk_size = length - offset;
   22a44:	461d      	mov	r5, r3
   22a46:	e7ec      	b.n	22a22 <entropy_cc3xx_rng_get_entropy+0x10>
	}

	if (offset == length) {
   22a48:	d008      	beq.n	22a5c <entropy_cc3xx_rng_get_entropy+0x4a>
	int err = EINVAL;
   22a4a:	2016      	movs	r0, #22
   22a4c:	e001      	b.n	22a52 <entropy_cc3xx_rng_get_entropy+0x40>
			return -EINVAL;
   22a4e:	f06f 0015 	mvn.w	r0, #21
		err = 0;
	}

	return err;
}
   22a52:	b003      	add	sp, #12
   22a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
   22a56:	f06f 0015 	mvn.w	r0, #21
   22a5a:	e7fa      	b.n	22a52 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   22a5c:	2000      	movs	r0, #0
   22a5e:	e7f8      	b.n	22a52 <entropy_cc3xx_rng_get_entropy+0x40>

00022a60 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   22a60:	b508      	push	{r3, lr}
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   22a62:	2200      	movs	r2, #0
   22a64:	4611      	mov	r1, r2
   22a66:	4610      	mov	r0, r2
   22a68:	f7fa f82c 	bl	1cac4 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
   22a6c:	b900      	cbnz	r0, 22a70 <entropy_cc3xx_rng_init+0x10>
		return -EINVAL;
	}

	return 0;
}
   22a6e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   22a70:	f06f 0015 	mvn.w	r0, #21
   22a74:	e7fb      	b.n	22a6e <entropy_cc3xx_rng_init+0xe>

00022a76 <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22a76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22a7a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   22a7e:	2b08      	cmp	r3, #8
   22a80:	d001      	beq.n	22a86 <nrf52_errata_242+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   22a82:	2000      	movs	r0, #0
   22a84:	4770      	bx	lr
                        return true;
   22a86:	2001      	movs	r0, #1
    #endif
}
   22a88:	4770      	bx	lr

00022a8a <shift_write_context>:
	w_ctx->flash_addr += shift;
   22a8a:	684b      	ldr	r3, [r1, #4]
   22a8c:	4403      	add	r3, r0
   22a8e:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   22a90:	680b      	ldr	r3, [r1, #0]
   22a92:	4403      	add	r3, r0
   22a94:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   22a96:	688b      	ldr	r3, [r1, #8]
   22a98:	1a1b      	subs	r3, r3, r0
   22a9a:	608b      	str	r3, [r1, #8]
}
   22a9c:	4770      	bx	lr

00022a9e <is_regular_addr_valid>:
{
   22a9e:	b538      	push	{r3, r4, r5, lr}
   22aa0:	4604      	mov	r4, r0
   22aa2:	460d      	mov	r5, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   22aa4:	f001 fa03 	bl	23eae <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   22aa8:	2c00      	cmp	r4, #0
   22aaa:	db06      	blt.n	22aba <is_regular_addr_valid+0x1c>
	return (addr >= boundary_start &&
   22aac:	42a0      	cmp	r0, r4
   22aae:	d906      	bls.n	22abe <is_regular_addr_valid+0x20>
			(len <= (boundary_start + boundary_size - addr)));
   22ab0:	1b00      	subs	r0, r0, r4
			(addr < (boundary_start + boundary_size)) &&
   22ab2:	4285      	cmp	r5, r0
   22ab4:	d905      	bls.n	22ac2 <is_regular_addr_valid+0x24>
   22ab6:	2000      	movs	r0, #0
   22ab8:	e000      	b.n	22abc <is_regular_addr_valid+0x1e>
   22aba:	2000      	movs	r0, #0
}
   22abc:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   22abe:	2000      	movs	r0, #0
   22ac0:	e7fc      	b.n	22abc <is_regular_addr_valid+0x1e>
   22ac2:	2001      	movs	r0, #1
   22ac4:	e7fa      	b.n	22abc <is_regular_addr_valid+0x1e>

00022ac6 <erase_op>:
{
   22ac6:	b570      	push	{r4, r5, r6, lr}
   22ac8:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   22aca:	f001 f9f4 	bl	23eb6 <nrfx_nvmc_flash_page_size_get>
   22ace:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   22ad0:	7b23      	ldrb	r3, [r4, #12]
   22ad2:	b90b      	cbnz	r3, 22ad8 <erase_op+0x12>
{
   22ad4:	2500      	movs	r5, #0
   22ad6:	e004      	b.n	22ae2 <erase_op+0x1c>
		nrf_flash_sync_get_timestamp_begin();
   22ad8:	f001 f8ab 	bl	23c32 <nrf_flash_sync_get_timestamp_begin>
   22adc:	e7fa      	b.n	22ad4 <erase_op+0xe>
	} while (e_ctx->len > 0);
   22ade:	68a3      	ldr	r3, [r4, #8]
   22ae0:	b1b3      	cbz	r3, 22b10 <erase_op+0x4a>
		if (SUSPEND_POFWARN()) {
   22ae2:	f7f3 f877 	bl	15bd4 <suspend_pofwarn>
   22ae6:	b9c0      	cbnz	r0, 22b1a <erase_op+0x54>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   22ae8:	6860      	ldr	r0, [r4, #4]
   22aea:	f7f5 f875 	bl	17bd8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   22aee:	68a3      	ldr	r3, [r4, #8]
   22af0:	1b9b      	subs	r3, r3, r6
   22af2:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   22af4:	6863      	ldr	r3, [r4, #4]
   22af6:	4433      	add	r3, r6
   22af8:	6063      	str	r3, [r4, #4]
		RESUME_POFWARN();
   22afa:	f7f3 f89f 	bl	15c3c <restore_pofwarn>
		i++;
   22afe:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   22b00:	7b23      	ldrb	r3, [r4, #12]
   22b02:	2b00      	cmp	r3, #0
   22b04:	d0eb      	beq.n	22ade <erase_op+0x18>
			if (nrf_flash_sync_check_time_limit(i)) {
   22b06:	4628      	mov	r0, r5
   22b08:	f7f4 fa82 	bl	17010 <nrf_flash_sync_check_time_limit>
   22b0c:	2800      	cmp	r0, #0
   22b0e:	d0e6      	beq.n	22ade <erase_op+0x18>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   22b10:	68a0      	ldr	r0, [r4, #8]
   22b12:	3800      	subs	r0, #0
   22b14:	bf18      	it	ne
   22b16:	2001      	movne	r0, #1
}
   22b18:	bd70      	pop	{r4, r5, r6, pc}
			return -ECANCELED;
   22b1a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   22b1e:	e7fb      	b.n	22b18 <erase_op+0x52>

00022b20 <erase>:
{
   22b20:	b500      	push	{lr}
   22b22:	b085      	sub	sp, #20
	struct flash_context context = {
   22b24:	2300      	movs	r3, #0
   22b26:	9300      	str	r3, [sp, #0]
   22b28:	9301      	str	r3, [sp, #4]
   22b2a:	9302      	str	r3, [sp, #8]
   22b2c:	9303      	str	r3, [sp, #12]
   22b2e:	9001      	str	r0, [sp, #4]
   22b30:	9102      	str	r1, [sp, #8]
	return	erase_op(&context);
   22b32:	4668      	mov	r0, sp
   22b34:	f7ff ffc7 	bl	22ac6 <erase_op>
}
   22b38:	b005      	add	sp, #20
   22b3a:	f85d fb04 	ldr.w	pc, [sp], #4

00022b3e <write_op>:
{
   22b3e:	b538      	push	{r3, r4, r5, lr}
   22b40:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   22b42:	7b03      	ldrb	r3, [r0, #12]
   22b44:	b9f3      	cbnz	r3, 22b84 <write_op+0x46>
{
   22b46:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   22b48:	68a3      	ldr	r3, [r4, #8]
   22b4a:	2b03      	cmp	r3, #3
   22b4c:	d91d      	bls.n	22b8a <write_op+0x4c>
		if (SUSPEND_POFWARN()) {
   22b4e:	f7f3 f841 	bl	15bd4 <suspend_pofwarn>
   22b52:	b9f0      	cbnz	r0, 22b92 <write_op+0x54>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   22b54:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   22b56:	6819      	ldr	r1, [r3, #0]
   22b58:	6860      	ldr	r0, [r4, #4]
   22b5a:	f001 f99c 	bl	23e96 <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   22b5e:	f7f3 f86d 	bl	15c3c <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   22b62:	4621      	mov	r1, r4
   22b64:	2004      	movs	r0, #4
   22b66:	f7ff ff90 	bl	22a8a <shift_write_context>
		i++;
   22b6a:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   22b6c:	7b23      	ldrb	r3, [r4, #12]
   22b6e:	2b00      	cmp	r3, #0
   22b70:	d0ea      	beq.n	22b48 <write_op+0xa>
			if (nrf_flash_sync_check_time_limit(i)) {
   22b72:	4628      	mov	r0, r5
   22b74:	f7f4 fa4c 	bl	17010 <nrf_flash_sync_check_time_limit>
   22b78:	2800      	cmp	r0, #0
   22b7a:	d0e5      	beq.n	22b48 <write_op+0xa>
				nvmc_wait_ready();
   22b7c:	f7f3 f814 	bl	15ba8 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
   22b80:	2001      	movs	r0, #1
   22b82:	e005      	b.n	22b90 <write_op+0x52>
		nrf_flash_sync_get_timestamp_begin();
   22b84:	f001 f855 	bl	23c32 <nrf_flash_sync_get_timestamp_begin>
   22b88:	e7dd      	b.n	22b46 <write_op+0x8>
	nvmc_wait_ready();
   22b8a:	f7f3 f80d 	bl	15ba8 <nvmc_wait_ready>
	return FLASH_OP_DONE;
   22b8e:	2000      	movs	r0, #0
}
   22b90:	bd38      	pop	{r3, r4, r5, pc}
			return -ECANCELED;
   22b92:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   22b96:	e7fb      	b.n	22b90 <write_op+0x52>

00022b98 <write>:
{
   22b98:	b500      	push	{lr}
   22b9a:	b085      	sub	sp, #20
	struct flash_context context = {
   22b9c:	9100      	str	r1, [sp, #0]
   22b9e:	9001      	str	r0, [sp, #4]
   22ba0:	9202      	str	r2, [sp, #8]
   22ba2:	2300      	movs	r3, #0
   22ba4:	f88d 300c 	strb.w	r3, [sp, #12]
	return write_op(&context);
   22ba8:	4668      	mov	r0, sp
   22baa:	f7ff ffc8 	bl	22b3e <write_op>
}
   22bae:	b005      	add	sp, #20
   22bb0:	f85d fb04 	ldr.w	pc, [sp], #4

00022bb4 <flash_nrf_read>:
{
   22bb4:	b570      	push	{r4, r5, r6, lr}
   22bb6:	460d      	mov	r5, r1
   22bb8:	4616      	mov	r6, r2
   22bba:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   22bbc:	4619      	mov	r1, r3
   22bbe:	4628      	mov	r0, r5
   22bc0:	f7ff ff6d 	bl	22a9e <is_regular_addr_valid>
   22bc4:	b138      	cbz	r0, 22bd6 <flash_nrf_read+0x22>
	if (!len) {
   22bc6:	b14c      	cbz	r4, 22bdc <flash_nrf_read+0x28>
   22bc8:	4622      	mov	r2, r4
   22bca:	4629      	mov	r1, r5
   22bcc:	4630      	mov	r0, r6
   22bce:	f002 f91c 	bl	24e0a <memcpy>
	return 0;
   22bd2:	2000      	movs	r0, #0
}
   22bd4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22bd6:	f06f 0015 	mvn.w	r0, #21
   22bda:	e7fb      	b.n	22bd4 <flash_nrf_read+0x20>
		return 0;
   22bdc:	2000      	movs	r0, #0
   22bde:	e7f9      	b.n	22bd4 <flash_nrf_read+0x20>

00022be0 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   22be0:	b570      	push	{r4, r5, r6, lr}
   22be2:	b082      	sub	sp, #8
   22be4:	460d      	mov	r5, r1
   22be6:	4616      	mov	r6, r2
   22be8:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   22bea:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   22bec:	2300      	movs	r3, #0
   22bee:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   22bf0:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   22bf2:	6913      	ldr	r3, [r2, #16]
   22bf4:	466a      	mov	r2, sp
   22bf6:	a901      	add	r1, sp, #4
   22bf8:	4798      	blx	r3

	while (layout_size--) {
   22bfa:	e014      	b.n	22c26 <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   22bfc:	6820      	ldr	r0, [r4, #0]
   22bfe:	1a28      	subs	r0, r5, r0
   22c00:	fbb0 f0f2 	udiv	r0, r0, r2
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   22c04:	681b      	ldr	r3, [r3, #0]
   22c06:	4298      	cmp	r0, r3
   22c08:	bf28      	it	cs
   22c0a:	4618      	movcs	r0, r3
		info->start_offset += (index_jmp * info->size);
   22c0c:	6823      	ldr	r3, [r4, #0]
   22c0e:	fb00 3302 	mla	r3, r0, r2, r3
   22c12:	6023      	str	r3, [r4, #0]
		info->index += index_jmp;
   22c14:	68a3      	ldr	r3, [r4, #8]
   22c16:	4403      	add	r3, r0
   22c18:	60a3      	str	r3, [r4, #8]
		if (index_jmp < layout->pages_count) {
   22c1a:	9b01      	ldr	r3, [sp, #4]
   22c1c:	681a      	ldr	r2, [r3, #0]
   22c1e:	4282      	cmp	r2, r0
   22c20:	d811      	bhi.n	22c46 <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   22c22:	3308      	adds	r3, #8
   22c24:	9301      	str	r3, [sp, #4]
	while (layout_size--) {
   22c26:	9b00      	ldr	r3, [sp, #0]
   22c28:	1e5a      	subs	r2, r3, #1
   22c2a:	9200      	str	r2, [sp, #0]
   22c2c:	b13b      	cbz	r3, 22c3e <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   22c2e:	9b01      	ldr	r3, [sp, #4]
   22c30:	685a      	ldr	r2, [r3, #4]
   22c32:	6062      	str	r2, [r4, #4]
		if (offs == 0) {
   22c34:	2d00      	cmp	r5, #0
   22c36:	d1e1      	bne.n	22bfc <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   22c38:	68a0      	ldr	r0, [r4, #8]
   22c3a:	1a30      	subs	r0, r6, r0
   22c3c:	e7e2      	b.n	22c04 <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   22c3e:	f06f 0015 	mvn.w	r0, #21
}
   22c42:	b002      	add	sp, #8
   22c44:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   22c46:	2000      	movs	r0, #0
   22c48:	e7fb      	b.n	22c42 <flash_get_page_info+0x62>

00022c4a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   22c4a:	b508      	push	{r3, lr}
   22c4c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   22c4e:	2200      	movs	r2, #0
   22c50:	f7ff ffc6 	bl	22be0 <flash_get_page_info>
}
   22c54:	bd08      	pop	{r3, pc}

00022c56 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   22c56:	460b      	mov	r3, r1
   22c58:	b139      	cbz	r1, 22c6a <sys_slist_remove+0x14>
	return node->next;
   22c5a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   22c5c:	6019      	str	r1, [r3, #0]
	return list->tail;
   22c5e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   22c60:	428a      	cmp	r2, r1
   22c62:	d009      	beq.n	22c78 <sys_slist_remove+0x22>
	parent->next = child;
   22c64:	2300      	movs	r3, #0
   22c66:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22c68:	4770      	bx	lr
	return node->next;
   22c6a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   22c6c:	6003      	str	r3, [r0, #0]
	return list->tail;
   22c6e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   22c70:	428a      	cmp	r2, r1
   22c72:	d1f7      	bne.n	22c64 <sys_slist_remove+0xe>
	list->tail = node;
   22c74:	6043      	str	r3, [r0, #4]
}
   22c76:	e7f5      	b.n	22c64 <sys_slist_remove+0xe>
	list->tail = node;
   22c78:	6043      	str	r3, [r0, #4]
}
   22c7a:	e7f3      	b.n	22c64 <sys_slist_remove+0xe>

00022c7c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22c7c:	b508      	push	{r3, lr}
   22c7e:	460a      	mov	r2, r1
	return list->head;
   22c80:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22c82:	2100      	movs	r1, #0
   22c84:	e001      	b.n	22c8a <sys_slist_find_and_remove+0xe>
   22c86:	4619      	mov	r1, r3
   22c88:	681b      	ldr	r3, [r3, #0]
   22c8a:	b12b      	cbz	r3, 22c98 <sys_slist_find_and_remove+0x1c>
   22c8c:	4293      	cmp	r3, r2
   22c8e:	d1fa      	bne.n	22c86 <sys_slist_find_and_remove+0xa>
   22c90:	f7ff ffe1 	bl	22c56 <sys_slist_remove>
   22c94:	2001      	movs	r0, #1
   22c96:	e000      	b.n	22c9a <sys_slist_find_and_remove+0x1e>
   22c98:	2000      	movs	r0, #0
   22c9a:	bd08      	pop	{r3, pc}

00022c9c <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   22c9c:	b570      	push	{r4, r5, r6, lr}
   22c9e:	4604      	mov	r4, r0
   22ca0:	460d      	mov	r5, r1
   22ca2:	4616      	mov	r6, r2
	return list->head;
   22ca4:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   22ca6:	b133      	cbz	r3, 22cb6 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   22ca8:	f7ff ffe8 	bl	22c7c <sys_slist_find_and_remove>
   22cac:	b970      	cbnz	r0, 22ccc <gpio_manage_callback+0x30>
			if (!set) {
   22cae:	b91e      	cbnz	r6, 22cb8 <gpio_manage_callback+0x1c>
				return -EINVAL;
   22cb0:	f06f 0015 	mvn.w	r0, #21
   22cb4:	e006      	b.n	22cc4 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
   22cb6:	b132      	cbz	r2, 22cc6 <gpio_manage_callback+0x2a>
   22cb8:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   22cba:	602b      	str	r3, [r5, #0]
	list->head = node;
   22cbc:	6025      	str	r5, [r4, #0]
	return list->tail;
   22cbe:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   22cc0:	b143      	cbz	r3, 22cd4 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   22cc2:	2000      	movs	r0, #0
}
   22cc4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22cc6:	f06f 0015 	mvn.w	r0, #21
   22cca:	e7fb      	b.n	22cc4 <gpio_manage_callback+0x28>
	if (set) {
   22ccc:	2e00      	cmp	r6, #0
   22cce:	d1f3      	bne.n	22cb8 <gpio_manage_callback+0x1c>
	return 0;
   22cd0:	2000      	movs	r0, #0
   22cd2:	e7f7      	b.n	22cc4 <gpio_manage_callback+0x28>
	list->tail = node;
   22cd4:	6065      	str	r5, [r4, #4]
   22cd6:	2000      	movs	r0, #0
}
   22cd8:	e7f4      	b.n	22cc4 <gpio_manage_callback+0x28>

00022cda <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   22cda:	b570      	push	{r4, r5, r6, lr}
   22cdc:	460e      	mov	r6, r1
   22cde:	4615      	mov	r5, r2
	return list->head;
   22ce0:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22ce2:	b121      	cbz	r1, 22cee <gpio_fire_callbacks+0x14>
	return node->next;
   22ce4:	680c      	ldr	r4, [r1, #0]
   22ce6:	b13c      	cbz	r4, 22cf8 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22ce8:	b931      	cbnz	r1, 22cf8 <gpio_fire_callbacks+0x1e>
   22cea:	460c      	mov	r4, r1
   22cec:	e004      	b.n	22cf8 <gpio_fire_callbacks+0x1e>
   22cee:	460c      	mov	r4, r1
   22cf0:	e002      	b.n	22cf8 <gpio_fire_callbacks+0x1e>
   22cf2:	4623      	mov	r3, r4
   22cf4:	4621      	mov	r1, r4
   22cf6:	461c      	mov	r4, r3
   22cf8:	b171      	cbz	r1, 22d18 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
   22cfa:	688a      	ldr	r2, [r1, #8]
   22cfc:	402a      	ands	r2, r5
   22cfe:	d002      	beq.n	22d06 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   22d00:	684b      	ldr	r3, [r1, #4]
   22d02:	4630      	mov	r0, r6
   22d04:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22d06:	2c00      	cmp	r4, #0
   22d08:	d0f3      	beq.n	22cf2 <gpio_fire_callbacks+0x18>
	return node->next;
   22d0a:	6823      	ldr	r3, [r4, #0]
   22d0c:	2b00      	cmp	r3, #0
   22d0e:	d0f1      	beq.n	22cf4 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22d10:	2c00      	cmp	r4, #0
   22d12:	d1ef      	bne.n	22cf4 <gpio_fire_callbacks+0x1a>
   22d14:	4623      	mov	r3, r4
   22d16:	e7ed      	b.n	22cf4 <gpio_fire_callbacks+0x1a>
		}
	}
}
   22d18:	bd70      	pop	{r4, r5, r6, pc}

00022d1a <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   22d1a:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   22d1e:	0580      	lsls	r0, r0, #22
   22d20:	0d80      	lsrs	r0, r0, #22
   22d22:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   22d26:	d033      	beq.n	22d90 <get_drive+0x76>
   22d28:	d816      	bhi.n	22d58 <get_drive+0x3e>
   22d2a:	2806      	cmp	r0, #6
   22d2c:	d02c      	beq.n	22d88 <get_drive+0x6e>
   22d2e:	d906      	bls.n	22d3e <get_drive+0x24>
   22d30:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   22d34:	d10d      	bne.n	22d52 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   22d36:	2301      	movs	r3, #1
   22d38:	700b      	strb	r3, [r1, #0]
	return 0;
   22d3a:	2000      	movs	r0, #0
		break;
   22d3c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   22d3e:	b300      	cbz	r0, 22d82 <get_drive+0x68>
   22d40:	2802      	cmp	r0, #2
   22d42:	d103      	bne.n	22d4c <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   22d44:	2304      	movs	r3, #4
   22d46:	700b      	strb	r3, [r1, #0]
	return 0;
   22d48:	2000      	movs	r0, #0
		break;
   22d4a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   22d4c:	f06f 0015 	mvn.w	r0, #21
   22d50:	4770      	bx	lr
   22d52:	f06f 0015 	mvn.w	r0, #21
   22d56:	4770      	bx	lr
   22d58:	f240 2302 	movw	r3, #514	; 0x202
   22d5c:	4298      	cmp	r0, r3
   22d5e:	d01b      	beq.n	22d98 <get_drive+0x7e>
   22d60:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   22d64:	d103      	bne.n	22d6e <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   22d66:	2303      	movs	r3, #3
   22d68:	700b      	strb	r3, [r1, #0]
	return 0;
   22d6a:	2000      	movs	r0, #0
		break;
   22d6c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   22d6e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   22d72:	d103      	bne.n	22d7c <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   22d74:	2302      	movs	r3, #2
   22d76:	700b      	strb	r3, [r1, #0]
	return 0;
   22d78:	2000      	movs	r0, #0
		break;
   22d7a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   22d7c:	f06f 0015 	mvn.w	r0, #21
   22d80:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   22d82:	2000      	movs	r0, #0
   22d84:	7008      	strb	r0, [r1, #0]
		break;
   22d86:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   22d88:	2306      	movs	r3, #6
   22d8a:	700b      	strb	r3, [r1, #0]
	return 0;
   22d8c:	2000      	movs	r0, #0
		break;
   22d8e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   22d90:	2307      	movs	r3, #7
   22d92:	700b      	strb	r3, [r1, #0]
	return 0;
   22d94:	2000      	movs	r0, #0
		break;
   22d96:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   22d98:	2305      	movs	r3, #5
   22d9a:	700b      	strb	r3, [r1, #0]
	return 0;
   22d9c:	2000      	movs	r0, #0
}
   22d9e:	4770      	bx	lr

00022da0 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   22da0:	f010 0f10 	tst.w	r0, #16
   22da4:	d104      	bne.n	22db0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   22da6:	f010 0f20 	tst.w	r0, #32
   22daa:	d103      	bne.n	22db4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   22dac:	2000      	movs	r0, #0
   22dae:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   22db0:	2003      	movs	r0, #3
   22db2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   22db4:	2001      	movs	r0, #1
}
   22db6:	4770      	bx	lr

00022db8 <gpio_nrfx_port_get_raw>:
	return port->config;
   22db8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22dba:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   22dbc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   22dc0:	600b      	str	r3, [r1, #0]
}
   22dc2:	2000      	movs	r0, #0
   22dc4:	4770      	bx	lr

00022dc6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   22dc6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22dc8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   22dca:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   22dce:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   22dd2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   22dd6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   22dda:	2000      	movs	r0, #0
   22ddc:	4770      	bx	lr

00022dde <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   22dde:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22de0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   22de2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   22de6:	2000      	movs	r0, #0
   22de8:	4770      	bx	lr

00022dea <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   22dea:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22dec:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   22dee:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   22df2:	2000      	movs	r0, #0
   22df4:	4770      	bx	lr

00022df6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   22df6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22df8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   22dfa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   22dfe:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   22e02:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   22e04:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   22e08:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   22e0c:	2000      	movs	r0, #0
   22e0e:	4770      	bx	lr

00022e10 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   22e10:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   22e14:	d007      	beq.n	22e26 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   22e16:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   22e1a:	d00d      	beq.n	22e38 <get_trigger+0x28>
   22e1c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   22e20:	d008      	beq.n	22e34 <get_trigger+0x24>
   22e22:	2001      	movs	r0, #1
}
   22e24:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   22e26:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   22e2a:	d001      	beq.n	22e30 <get_trigger+0x20>
   22e2c:	2005      	movs	r0, #5
   22e2e:	4770      	bx	lr
   22e30:	2004      	movs	r0, #4
   22e32:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   22e34:	2002      	movs	r0, #2
   22e36:	4770      	bx	lr
   22e38:	2003      	movs	r0, #3
   22e3a:	4770      	bx	lr

00022e3c <gpio_nrfx_manage_callback>:
{
   22e3c:	b508      	push	{r3, lr}
	return port->data;
   22e3e:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22e40:	3004      	adds	r0, #4
   22e42:	f7ff ff2b 	bl	22c9c <gpio_manage_callback>
}
   22e46:	bd08      	pop	{r3, pc}

00022e48 <nrfx_gpio_handler>:
{
   22e48:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   22e4a:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   22e4e:	0940      	lsrs	r0, r0, #5
   22e50:	f7f2 ffce 	bl	15df0 <get_dev>
	if (port == NULL) {
   22e54:	b130      	cbz	r0, 22e64 <nrfx_gpio_handler+0x1c>
   22e56:	4601      	mov	r1, r0
	return port->data;
   22e58:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   22e5a:	2201      	movs	r2, #1
   22e5c:	40a2      	lsls	r2, r4
   22e5e:	3004      	adds	r0, #4
   22e60:	f7ff ff3b 	bl	22cda <gpio_fire_callbacks>
}
   22e64:	bd10      	pop	{r4, pc}

00022e66 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   22e66:	b510      	push	{r4, lr}
   22e68:	b084      	sub	sp, #16
   22e6a:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   22e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22e70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
}
#endif /* defined(CONFIG_SOC_HFXO_CAP_INTERNAL) */

static inline void soc_secure_read_deviceid(uint32_t deviceid[2])
{
	deviceid[0] = nrf_ficr_deviceid_get(NRF_FICR, 0);
   22e72:	9200      	str	r2, [sp, #0]
   22e74:	6e59      	ldr	r1, [r3, #100]	; 0x64
	deviceid[1] = nrf_ficr_deviceid_get(NRF_FICR, 1);
   22e76:	9101      	str	r1, [sp, #4]
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   22e78:	0a0b      	lsrs	r3, r1, #8
   22e7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   22e7e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   22e82:	ea4f 2c01 	mov.w	ip, r1, lsl #8
   22e86:	f40c 0c7f 	and.w	ip, ip, #16711680	; 0xff0000
   22e8a:	ea43 030c 	orr.w	r3, r3, ip
   22e8e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   22e92:	9302      	str	r3, [sp, #8]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   22e94:	0a13      	lsrs	r3, r2, #8
   22e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   22e9a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   22e9e:	0211      	lsls	r1, r2, #8
   22ea0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   22ea4:	430b      	orrs	r3, r1
   22ea6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   22eaa:	9303      	str	r3, [sp, #12]

	if (length > sizeof(dev_id.id)) {
   22eac:	2c08      	cmp	r4, #8
   22eae:	d900      	bls.n	22eb2 <z_impl_hwinfo_get_device_id+0x4c>
		length = sizeof(dev_id.id);
   22eb0:	2408      	movs	r4, #8
   22eb2:	4622      	mov	r2, r4
   22eb4:	a902      	add	r1, sp, #8
   22eb6:	f001 ffa8 	bl	24e0a <memcpy>
	}

	memcpy(buffer, dev_id.id, length);

	return length;
}
   22eba:	4620      	mov	r0, r4
   22ebc:	b004      	add	sp, #16
   22ebe:	bd10      	pop	{r4, pc}

00022ec0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   22ec0:	b410      	push	{r4}
	*state = &config->states[0];
   22ec2:	6843      	ldr	r3, [r0, #4]
   22ec4:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   22ec6:	e001      	b.n	22ecc <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   22ec8:	3308      	adds	r3, #8
   22eca:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   22ecc:	6813      	ldr	r3, [r2, #0]
   22ece:	f890 c008 	ldrb.w	ip, [r0, #8]
   22ed2:	6844      	ldr	r4, [r0, #4]
   22ed4:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
   22ed8:	4563      	cmp	r3, ip
   22eda:	d205      	bcs.n	22ee8 <pinctrl_lookup_state+0x28>
		if (id == (*state)->id) {
   22edc:	f893 c005 	ldrb.w	ip, [r3, #5]
   22ee0:	458c      	cmp	ip, r1
   22ee2:	d1f1      	bne.n	22ec8 <pinctrl_lookup_state+0x8>
			return 0;
   22ee4:	2000      	movs	r0, #0
   22ee6:	e001      	b.n	22eec <pinctrl_lookup_state+0x2c>
	}

	return -ENOENT;
   22ee8:	f06f 0001 	mvn.w	r0, #1
}
   22eec:	f85d 4b04 	ldr.w	r4, [sp], #4
   22ef0:	4770      	bx	lr

00022ef2 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   22ef2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   22ef4:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   22ef6:	f04f 0140 	mov.w	r1, #64	; 0x40
   22efa:	f3ef 8311 	mrs	r3, BASEPRI
   22efe:	f381 8812 	msr	BASEPRI_MAX, r1
   22f02:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22f06:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   22f0a:	b131      	cbz	r1, 22f1a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22f0c:	2100      	movs	r1, #0
   22f0e:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   22f12:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22f16:	2101      	movs	r1, #1
   22f18:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   22f1a:	f383 8811 	msr	BASEPRI, r3
   22f1e:	f3bf 8f6f 	isb	sy
}
   22f22:	4770      	bx	lr

00022f24 <uarte_nrfx_isr_int>:
{
   22f24:	b570      	push	{r4, r5, r6, lr}
   22f26:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   22f28:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   22f2a:	6835      	ldr	r5, [r6, #0]
    return p_reg->INTENSET & mask;
   22f2c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   22f30:	f413 7f80 	tst.w	r3, #256	; 0x100
   22f34:	d003      	beq.n	22f3e <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22f36:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   22f3a:	2b00      	cmp	r3, #0
   22f3c:	d138      	bne.n	22fb0 <uarte_nrfx_isr_int+0x8c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22f3e:	6873      	ldr	r3, [r6, #4]
   22f40:	f013 0f10 	tst.w	r3, #16
   22f44:	d01a      	beq.n	22f7c <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
   22f46:	f04f 0240 	mov.w	r2, #64	; 0x40
   22f4a:	f3ef 8311 	mrs	r3, BASEPRI
   22f4e:	f382 8812 	msr	BASEPRI_MAX, r2
   22f52:	f3bf 8f6f 	isb	sy
   22f56:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   22f5a:	b112      	cbz	r2, 22f62 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   22f5c:	2200      	movs	r2, #0
   22f5e:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
		struct uarte_nrfx_data *data = dev->data;
   22f62:	6922      	ldr	r2, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   22f64:	68d2      	ldr	r2, [r2, #12]
   22f66:	b10a      	cbz	r2, 22f6c <uarte_nrfx_isr_int+0x48>
   22f68:	6912      	ldr	r2, [r2, #16]
   22f6a:	b91a      	cbnz	r2, 22f74 <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
   22f6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   22f70:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   22f74:	f383 8811 	msr	BASEPRI, r3
   22f78:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   22f7c:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   22f7e:	68da      	ldr	r2, [r3, #12]
   22f80:	b1aa      	cbz	r2, 22fae <uarte_nrfx_isr_int+0x8a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22f82:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   22f86:	b121      	cbz	r1, 22f92 <uarte_nrfx_isr_int+0x6e>
		data->int_driven->fifo_fill_lock = 0;
   22f88:	2100      	movs	r1, #0
   22f8a:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   22f8c:	68da      	ldr	r2, [r3, #12]
   22f8e:	7b92      	ldrb	r2, [r2, #14]
   22f90:	b98a      	cbnz	r2, 22fb6 <uarte_nrfx_isr_int+0x92>
   22f92:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   22f96:	b122      	cbz	r2, 22fa2 <uarte_nrfx_isr_int+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22f98:	2200      	movs	r2, #0
   22f9a:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   22f9e:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   22fa2:	68da      	ldr	r2, [r3, #12]
   22fa4:	6813      	ldr	r3, [r2, #0]
   22fa6:	b113      	cbz	r3, 22fae <uarte_nrfx_isr_int+0x8a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   22fa8:	6851      	ldr	r1, [r2, #4]
   22faa:	4620      	mov	r0, r4
   22fac:	4798      	blx	r3
}
   22fae:	bd70      	pop	{r4, r5, r6, pc}
		endtx_isr(dev);
   22fb0:	f7ff ff9f 	bl	22ef2 <endtx_isr>
   22fb4:	e7c3      	b.n	22f3e <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   22fb6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   22fba:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   22fbe:	68db      	ldr	r3, [r3, #12]
   22fc0:	7399      	strb	r1, [r3, #14]
			return;
   22fc2:	e7f4      	b.n	22fae <uarte_nrfx_isr_int+0x8a>

00022fc4 <uarte_nrfx_configure>:
{
   22fc4:	b570      	push	{r4, r5, r6, lr}
   22fc6:	b082      	sub	sp, #8
   22fc8:	4606      	mov	r6, r0
   22fca:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   22fcc:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
   22fce:	794b      	ldrb	r3, [r1, #5]
   22fd0:	2b01      	cmp	r3, #1
   22fd2:	d006      	beq.n	22fe2 <uarte_nrfx_configure+0x1e>
   22fd4:	2b03      	cmp	r3, #3
   22fd6:	d011      	beq.n	22ffc <uarte_nrfx_configure+0x38>
   22fd8:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   22fdc:	4618      	mov	r0, r3
   22fde:	b002      	add	sp, #8
   22fe0:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   22fe2:	2300      	movs	r3, #0
   22fe4:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   22fe8:	79a3      	ldrb	r3, [r4, #6]
   22fea:	2b03      	cmp	r3, #3
   22fec:	d137      	bne.n	2305e <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   22fee:	79e3      	ldrb	r3, [r4, #7]
   22ff0:	b143      	cbz	r3, 23004 <uarte_nrfx_configure+0x40>
   22ff2:	2b01      	cmp	r3, #1
   22ff4:	d010      	beq.n	23018 <uarte_nrfx_configure+0x54>
   22ff6:	f06f 0385 	mvn.w	r3, #133	; 0x85
   22ffa:	e7ef      	b.n	22fdc <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   22ffc:	2310      	movs	r3, #16
   22ffe:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   23002:	e7f1      	b.n	22fe8 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   23004:	2300      	movs	r3, #0
   23006:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   2300a:	7923      	ldrb	r3, [r4, #4]
   2300c:	b143      	cbz	r3, 23020 <uarte_nrfx_configure+0x5c>
   2300e:	2b02      	cmp	r3, #2
   23010:	d021      	beq.n	23056 <uarte_nrfx_configure+0x92>
   23012:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23016:	e7e1      	b.n	22fdc <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   23018:	2301      	movs	r3, #1
   2301a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2301e:	e7f4      	b.n	2300a <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   23020:	2300      	movs	r3, #0
   23022:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   23026:	6821      	ldr	r1, [r4, #0]
   23028:	4630      	mov	r0, r6
   2302a:	f7f3 f917 	bl	1625c <baudrate_set>
   2302e:	4603      	mov	r3, r0
   23030:	b9c0      	cbnz	r0, 23064 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
   23032:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   23034:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   23036:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   2303a:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   2303e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   23042:	4331      	orrs	r1, r6
   23044:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   23046:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
   2304a:	3504      	adds	r5, #4
   2304c:	e894 0003 	ldmia.w	r4, {r0, r1}
   23050:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
   23054:	e7c2      	b.n	22fdc <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   23056:	230e      	movs	r3, #14
   23058:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   2305c:	e7e3      	b.n	23026 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
   2305e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23062:	e7bb      	b.n	22fdc <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   23064:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23068:	e7b8      	b.n	22fdc <uarte_nrfx_configure+0x18>

0002306a <uarte_nrfx_config_get>:
{
   2306a:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   2306c:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   2306e:	3304      	adds	r3, #4
   23070:	e893 0003 	ldmia.w	r3, {r0, r1}
   23074:	e882 0003 	stmia.w	r2, {r0, r1}
}
   23078:	2000      	movs	r0, #0
   2307a:	4770      	bx	lr

0002307c <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   2307c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2307e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23080:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23084:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   23088:	4770      	bx	lr

0002308a <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   2308a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2308c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2308e:	685b      	ldr	r3, [r3, #4]
   23090:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23094:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   23098:	b929      	cbnz	r1, 230a6 <is_tx_ready+0x1c>
   2309a:	b933      	cbnz	r3, 230aa <is_tx_ready+0x20>
   2309c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   230a0:	b92b      	cbnz	r3, 230ae <is_tx_ready+0x24>
   230a2:	2000      	movs	r0, #0
   230a4:	4770      	bx	lr
   230a6:	2001      	movs	r0, #1
   230a8:	4770      	bx	lr
   230aa:	2000      	movs	r0, #0
   230ac:	4770      	bx	lr
   230ae:	2001      	movs	r0, #1
}
   230b0:	4770      	bx	lr

000230b2 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   230b2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   230b4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   230b6:	2208      	movs	r2, #8
   230b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   230bc:	4770      	bx	lr

000230be <tx_start>:
{
   230be:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   230c0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   230c2:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   230c4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   230c8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   230cc:	2200      	movs	r2, #0
   230ce:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   230d2:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   230d6:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   230da:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   230de:	685b      	ldr	r3, [r3, #4]
   230e0:	f013 0f10 	tst.w	r3, #16
   230e4:	d102      	bne.n	230ec <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   230e6:	2301      	movs	r3, #1
   230e8:	60a3      	str	r3, [r4, #8]
}
   230ea:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   230ec:	2101      	movs	r1, #1
   230ee:	f7ff ffe0 	bl	230b2 <uarte_enable>
    p_reg->INTENSET = mask;
   230f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   230f6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   230fa:	e7f4      	b.n	230e6 <tx_start+0x28>

000230fc <uarte_nrfx_poll_in>:
{
   230fc:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   230fe:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   23100:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23102:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23104:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23108:	b162      	cbz	r2, 23124 <uarte_nrfx_poll_in+0x28>
	*c = *data->rx_data;
   2310a:	69a2      	ldr	r2, [r4, #24]
   2310c:	7812      	ldrb	r2, [r2, #0]
   2310e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23110:	2000      	movs	r0, #0
   23112:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23116:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2311a:	2201      	movs	r2, #1
   2311c:	601a      	str	r2, [r3, #0]
}
   2311e:	f85d 4b04 	ldr.w	r4, [sp], #4
   23122:	4770      	bx	lr
		return -1;
   23124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23128:	e7f9      	b.n	2311e <uarte_nrfx_poll_in+0x22>

0002312a <uarte_nrfx_fifo_read>:
	const struct uarte_nrfx_config *config = dev->config;
   2312a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2312c:	681b      	ldr	r3, [r3, #0]
	const struct uarte_nrfx_data *data = dev->data;
   2312e:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23130:	2a00      	cmp	r2, #0
   23132:	dd0d      	ble.n	23150 <uarte_nrfx_fifo_read+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23134:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   23138:	b162      	cbz	r2, 23154 <uarte_nrfx_fifo_read+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2313a:	2200      	movs	r2, #0
   2313c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   23140:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
   23144:	6982      	ldr	r2, [r0, #24]
   23146:	7812      	ldrb	r2, [r2, #0]
   23148:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2314a:	2001      	movs	r0, #1
   2314c:	6018      	str	r0, [r3, #0]
}
   2314e:	4770      	bx	lr
	int num_rx = 0;
   23150:	2000      	movs	r0, #0
   23152:	4770      	bx	lr
   23154:	2000      	movs	r0, #0
}
   23156:	4770      	bx	lr

00023158 <uarte_nrfx_irq_tx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   23158:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2315a:	681a      	ldr	r2, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   2315c:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   2315e:	f04f 0040 	mov.w	r0, #64	; 0x40
   23162:	f3ef 8311 	mrs	r3, BASEPRI
   23166:	f380 8812 	msr	BASEPRI_MAX, r0
   2316a:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2316e:	68c9      	ldr	r1, [r1, #12]
   23170:	2000      	movs	r0, #0
   23172:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   23174:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   23178:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2317c:	f383 8811 	msr	BASEPRI, r3
   23180:	f3bf 8f6f 	isb	sy
}
   23184:	4770      	bx	lr

00023186 <uarte_nrfx_irq_tx_disable>:
	struct uarte_nrfx_data *data = dev->data;
   23186:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   23188:	68db      	ldr	r3, [r3, #12]
   2318a:	2201      	movs	r2, #1
   2318c:	739a      	strb	r2, [r3, #14]
}
   2318e:	4770      	bx	lr

00023190 <uarte_nrfx_irq_tx_ready_complete>:
	const struct uarte_nrfx_config *config = dev->config;
   23190:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23192:	6819      	ldr	r1, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   23194:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   23196:	68db      	ldr	r3, [r3, #12]
   23198:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2319a:	b95a      	cbnz	r2, 231b4 <uarte_nrfx_irq_tx_ready_complete+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2319c:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   231a0:	b152      	cbz	r2, 231b8 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   231a2:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   231a6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   231aa:	d007      	beq.n	231bc <uarte_nrfx_irq_tx_ready_complete+0x2c>
		data->int_driven->fifo_fill_lock = 0;
   231ac:	2200      	movs	r2, #0
   231ae:	611a      	str	r2, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   231b0:	2001      	movs	r0, #1
   231b2:	4770      	bx	lr
   231b4:	2000      	movs	r0, #0
   231b6:	4770      	bx	lr
   231b8:	2000      	movs	r0, #0
   231ba:	4770      	bx	lr
   231bc:	2000      	movs	r0, #0
}
   231be:	4770      	bx	lr

000231c0 <uarte_nrfx_irq_rx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   231c0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   231c2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   231c4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   231c8:	3800      	subs	r0, #0
   231ca:	bf18      	it	ne
   231cc:	2001      	movne	r0, #1
   231ce:	4770      	bx	lr

000231d0 <uarte_nrfx_irq_rx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   231d0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   231d2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   231d4:	2210      	movs	r2, #16
   231d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   231da:	4770      	bx	lr

000231dc <uarte_nrfx_irq_rx_disable>:
	const struct uarte_nrfx_config *config = dev->config;
   231dc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   231de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   231e0:	2210      	movs	r2, #16
   231e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   231e6:	4770      	bx	lr

000231e8 <uarte_nrfx_irq_err_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   231e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   231ea:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   231ec:	f44f 7200 	mov.w	r2, #512	; 0x200
   231f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   231f4:	4770      	bx	lr

000231f6 <uarte_nrfx_irq_err_disable>:
	const struct uarte_nrfx_config *config = dev->config;
   231f6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   231f8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   231fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   231fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23202:	4770      	bx	lr

00023204 <uarte_nrfx_irq_is_pending>:
{
   23204:	b538      	push	{r3, r4, r5, lr}
   23206:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   23208:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2320a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2320c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   23210:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   23214:	d106      	bne.n	23224 <uarte_nrfx_irq_is_pending+0x20>
   23216:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   2321a:	f013 0f10 	tst.w	r3, #16
   2321e:	d107      	bne.n	23230 <uarte_nrfx_irq_is_pending+0x2c>
   23220:	2000      	movs	r0, #0
}
   23222:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   23224:	f7ff ffb4 	bl	23190 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   23228:	2800      	cmp	r0, #0
   2322a:	d0f4      	beq.n	23216 <uarte_nrfx_irq_is_pending+0x12>
		||
   2322c:	2001      	movs	r0, #1
   2322e:	e7f8      	b.n	23222 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   23230:	4620      	mov	r0, r4
   23232:	f7ff ffc5 	bl	231c0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   23236:	2800      	cmp	r0, #0
   23238:	d0f3      	beq.n	23222 <uarte_nrfx_irq_is_pending+0x1e>
		||
   2323a:	2001      	movs	r0, #1
   2323c:	e7f1      	b.n	23222 <uarte_nrfx_irq_is_pending+0x1e>

0002323e <uarte_nrfx_irq_update>:
}
   2323e:	2001      	movs	r0, #1
   23240:	4770      	bx	lr

00023242 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   23242:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   23244:	68d8      	ldr	r0, [r3, #12]
   23246:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   23248:	68db      	ldr	r3, [r3, #12]
   2324a:	605a      	str	r2, [r3, #4]
}
   2324c:	4770      	bx	lr

0002324e <uarte_nrfx_fifo_fill>:
{
   2324e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23250:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   23252:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   23254:	68fb      	ldr	r3, [r7, #12]
   23256:	899c      	ldrh	r4, [r3, #12]
   23258:	4294      	cmp	r4, r2
   2325a:	bfa8      	it	ge
   2325c:	4614      	movge	r4, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2325e:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23260:	2201      	movs	r2, #1
   23262:	f3bf 8f5b 	dmb	ish
   23266:	e853 0f00 	ldrex	r0, [r3]
   2326a:	2800      	cmp	r0, #0
   2326c:	d103      	bne.n	23276 <uarte_nrfx_fifo_fill+0x28>
   2326e:	e843 2500 	strex	r5, r2, [r3]
   23272:	2d00      	cmp	r5, #0
   23274:	d1f7      	bne.n	23266 <uarte_nrfx_fifo_fill+0x18>
   23276:	f3bf 8f5b 	dmb	ish
   2327a:	d120      	bne.n	232be <uarte_nrfx_fifo_fill+0x70>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   2327c:	68fb      	ldr	r3, [r7, #12]
   2327e:	4622      	mov	r2, r4
   23280:	6898      	ldr	r0, [r3, #8]
   23282:	f001 fdc2 	bl	24e0a <memcpy>
	__asm__ volatile(
   23286:	f04f 0340 	mov.w	r3, #64	; 0x40
   2328a:	f3ef 8511 	mrs	r5, BASEPRI
   2328e:	f383 8812 	msr	BASEPRI_MAX, r3
   23292:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   23296:	4630      	mov	r0, r6
   23298:	f7ff fef7 	bl	2308a <is_tx_ready>
   2329c:	b940      	cbnz	r0, 232b0 <uarte_nrfx_fifo_fill+0x62>
		data->int_driven->fifo_fill_lock = 0;
   2329e:	68fb      	ldr	r3, [r7, #12]
   232a0:	2400      	movs	r4, #0
   232a2:	611c      	str	r4, [r3, #16]
	__asm__ volatile(
   232a4:	f385 8811 	msr	BASEPRI, r5
   232a8:	f3bf 8f6f 	isb	sy
}
   232ac:	4620      	mov	r0, r4
   232ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   232b0:	68fb      	ldr	r3, [r7, #12]
   232b2:	4622      	mov	r2, r4
   232b4:	6899      	ldr	r1, [r3, #8]
   232b6:	4630      	mov	r0, r6
   232b8:	f7ff ff01 	bl	230be <tx_start>
   232bc:	e7f2      	b.n	232a4 <uarte_nrfx_fifo_fill+0x56>
		return 0;
   232be:	2400      	movs	r4, #0
   232c0:	e7f4      	b.n	232ac <uarte_nrfx_fifo_fill+0x5e>

000232c2 <k_msleep>:
{
   232c2:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   232c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   232c8:	17c1      	asrs	r1, r0, #31
	return z_impl_k_sleep(timeout);
   232ca:	f7f6 ff0d 	bl	1a0e8 <z_impl_k_sleep>
}
   232ce:	bd08      	pop	{r3, pc}

000232d0 <wait_tx_ready>:
{
   232d0:	b570      	push	{r4, r5, r6, lr}
   232d2:	4606      	mov	r6, r0
   232d4:	e013      	b.n	232fe <wait_tx_ready+0x2e>
		if (res) {
   232d6:	b17d      	cbz	r5, 232f8 <wait_tx_ready+0x28>
	__asm__ volatile(
   232d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   232dc:	f3ef 8411 	mrs	r4, BASEPRI
   232e0:	f383 8812 	msr	BASEPRI_MAX, r3
   232e4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   232e8:	4630      	mov	r0, r6
   232ea:	f7ff fece 	bl	2308a <is_tx_ready>
   232ee:	b998      	cbnz	r0, 23318 <wait_tx_ready+0x48>
	__asm__ volatile(
   232f0:	f384 8811 	msr	BASEPRI, r4
   232f4:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   232f8:	2001      	movs	r0, #1
   232fa:	f7ff ffe2 	bl	232c2 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   232fe:	2464      	movs	r4, #100	; 0x64
   23300:	4630      	mov	r0, r6
   23302:	f7ff fec2 	bl	2308a <is_tx_ready>
   23306:	4605      	mov	r5, r0
   23308:	2800      	cmp	r0, #0
   2330a:	d1e4      	bne.n	232d6 <wait_tx_ready+0x6>
   2330c:	2001      	movs	r0, #1
   2330e:	f000 fd27 	bl	23d60 <nrfx_busy_wait>
   23312:	3c01      	subs	r4, #1
   23314:	d1f4      	bne.n	23300 <wait_tx_ready+0x30>
   23316:	e7de      	b.n	232d6 <wait_tx_ready+0x6>
}
   23318:	4620      	mov	r0, r4
   2331a:	bd70      	pop	{r4, r5, r6, pc}

0002331c <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   2331c:	b510      	push	{r4, lr}
   2331e:	b082      	sub	sp, #8
   23320:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   23322:	aa01      	add	r2, sp, #4
   23324:	f7ff fdcc 	bl	22ec0 <pinctrl_lookup_state>
	if (ret < 0) {
   23328:	2800      	cmp	r0, #0
   2332a:	db05      	blt.n	23338 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2332c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2332e:	6822      	ldr	r2, [r4, #0]
   23330:	7919      	ldrb	r1, [r3, #4]
   23332:	6818      	ldr	r0, [r3, #0]
   23334:	f7f2 fe94 	bl	16060 <pinctrl_configure_pins>
}
   23338:	b002      	add	sp, #8
   2333a:	bd10      	pop	{r4, pc}

0002333c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   2333c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23340:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   23342:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   23344:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   23346:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2334a:	2100      	movs	r1, #0
   2334c:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   23350:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   23354:	68f8      	ldr	r0, [r7, #12]
   23356:	f7ff ffe1 	bl	2331c <pinctrl_apply_state>
	if (err < 0) {
   2335a:	1e05      	subs	r5, r0, #0
   2335c:	db35      	blt.n	233ca <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   2335e:	f108 0104 	add.w	r1, r8, #4
   23362:	4620      	mov	r0, r4
   23364:	f7ff fe2e 	bl	22fc4 <uarte_nrfx_configure>
	if (err) {
   23368:	4605      	mov	r5, r0
   2336a:	bb70      	cbnz	r0, 233ca <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2336c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2336e:	f013 0f02 	tst.w	r3, #2
   23372:	d12d      	bne.n	233d0 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   23374:	2308      	movs	r3, #8
   23376:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   2337a:	7a3b      	ldrb	r3, [r7, #8]
   2337c:	b95b      	cbnz	r3, 23396 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2337e:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   23382:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   23386:	f8d8 3018 	ldr.w	r3, [r8, #24]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2338a:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2338e:	2301      	movs	r3, #1
   23390:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23394:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   23396:	687b      	ldr	r3, [r7, #4]
   23398:	f013 0f02 	tst.w	r3, #2
   2339c:	d103      	bne.n	233a6 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
   2339e:	f44f 7380 	mov.w	r3, #256	; 0x100
   233a2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   233a6:	687b      	ldr	r3, [r7, #4]
   233a8:	f013 0f10 	tst.w	r3, #16
   233ac:	d003      	beq.n	233b6 <uarte_instance_init+0x7a>
   233ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   233b2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   233b6:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   233ba:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   233be:	2300      	movs	r3, #0
   233c0:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233c4:	2301      	movs	r3, #1
   233c6:	60b3      	str	r3, [r6, #8]
   233c8:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   233ca:	4628      	mov	r0, r5
   233cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   233d0:	4641      	mov	r1, r8
   233d2:	4630      	mov	r0, r6
   233d4:	f7f3 f818 	bl	16408 <endtx_stoptx_ppi_init>
		if (err < 0) {
   233d8:	2800      	cmp	r0, #0
   233da:	dacb      	bge.n	23374 <uarte_instance_init+0x38>
			return err;
   233dc:	4605      	mov	r5, r0
   233de:	e7f4      	b.n	233ca <uarte_instance_init+0x8e>

000233e0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   233e0:	b510      	push	{r4, lr}
   233e2:	4604      	mov	r4, r0
   233e4:	2200      	movs	r2, #0
   233e6:	2101      	movs	r1, #1
   233e8:	2002      	movs	r0, #2
   233ea:	f7fe fbfa 	bl	21be2 <z_arm_irq_priority_set>
   233ee:	2002      	movs	r0, #2
   233f0:	f7fe fbed 	bl	21bce <arch_irq_enable>
   233f4:	2101      	movs	r1, #1
   233f6:	4620      	mov	r0, r4
   233f8:	f7ff ffa0 	bl	2333c <uarte_instance_init>
   233fc:	bd10      	pop	{r4, pc}

000233fe <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   233fe:	4770      	bx	lr

00023400 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   23400:	1a40      	subs	r0, r0, r1
}
   23402:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   23406:	4770      	bx	lr

00023408 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   23408:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2340c:	009b      	lsls	r3, r3, #2
   2340e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23414:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   23418:	6818      	ldr	r0, [r3, #0]
}
   2341a:	3800      	subs	r0, #0
   2341c:	bf18      	it	ne
   2341e:	2001      	movne	r0, #1
   23420:	4770      	bx	lr

00023422 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   23422:	f100 0350 	add.w	r3, r0, #80	; 0x50
   23426:	009b      	lsls	r3, r3, #2
   23428:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2342a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2342e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   23432:	2200      	movs	r2, #0
   23434:	601a      	str	r2, [r3, #0]
   23436:	681b      	ldr	r3, [r3, #0]
}
   23438:	4770      	bx	lr

0002343a <absolute_time_to_cc>:
}
   2343a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2343e:	4770      	bx	lr

00023440 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   23440:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   23444:	b672      	cpsid	i
}
   23446:	4770      	bx	lr

00023448 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   23448:	f380 8810 	msr	PRIMASK, r0
}
   2344c:	4770      	bx	lr

0002344e <compare_set>:
{
   2344e:	b5f0      	push	{r4, r5, r6, r7, lr}
   23450:	b083      	sub	sp, #12
   23452:	4604      	mov	r4, r0
   23454:	4617      	mov	r7, r2
   23456:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   23458:	f7f3 f860 	bl	1651c <compare_int_lock>
   2345c:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2345e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23460:	9301      	str	r3, [sp, #4]
   23462:	9b08      	ldr	r3, [sp, #32]
   23464:	9300      	str	r3, [sp, #0]
   23466:	463a      	mov	r2, r7
   23468:	462b      	mov	r3, r5
   2346a:	4620      	mov	r0, r4
   2346c:	f7f3 f928 	bl	166c0 <compare_set_nolocks>
   23470:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   23472:	4631      	mov	r1, r6
   23474:	4620      	mov	r0, r4
   23476:	f7f3 f8a7 	bl	165c8 <compare_int_unlock>
}
   2347a:	4628      	mov	r0, r5
   2347c:	b003      	add	sp, #12
   2347e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023480 <sys_clock_cycle_get_32>:
{
   23480:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   23482:	f7f3 f8fd 	bl	16680 <z_nrf_rtc_timer_read>
}
   23486:	bd08      	pop	{r3, pc}

00023488 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   23488:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   2348a:	2000      	movs	r0, #0
   2348c:	f7fe fcb0 	bl	21df0 <sys_arch_reboot>

00023490 <sdc_assertion_handler>:
	k_oops();
   23490:	4040      	eors	r0, r0
   23492:	f380 8811 	msr	BASEPRI, r0
   23496:	f04f 0003 	mov.w	r0, #3
   2349a:	df02      	svc	2
}
   2349c:	4770      	bx	lr

0002349e <event_packet_is_discardable>:
	switch (hdr->evt) {
   2349e:	7803      	ldrb	r3, [r0, #0]
   234a0:	2b3e      	cmp	r3, #62	; 0x3e
   234a2:	d003      	beq.n	234ac <event_packet_is_discardable+0xe>
   234a4:	2bff      	cmp	r3, #255	; 0xff
   234a6:	d008      	beq.n	234ba <event_packet_is_discardable+0x1c>
   234a8:	2000      	movs	r0, #0
   234aa:	4770      	bx	lr
		switch (me->subevent) {
   234ac:	7883      	ldrb	r3, [r0, #2]
   234ae:	2b02      	cmp	r3, #2
   234b0:	d001      	beq.n	234b6 <event_packet_is_discardable+0x18>
			return false;
   234b2:	2000      	movs	r0, #0
   234b4:	4770      	bx	lr
			return true;
   234b6:	2001      	movs	r0, #1
   234b8:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   234ba:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   234bc:	2b80      	cmp	r3, #128	; 0x80
   234be:	d001      	beq.n	234c4 <event_packet_is_discardable+0x26>
			return false;
   234c0:	2000      	movs	r0, #0
}
   234c2:	4770      	bx	lr
			return true;
   234c4:	2001      	movs	r0, #1
   234c6:	4770      	bx	lr

000234c8 <event_packet_process>:
{
   234c8:	b538      	push	{r3, r4, r5, lr}
   234ca:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   234cc:	f7ff ffe7 	bl	2349e <event_packet_is_discardable>
   234d0:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   234d2:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   234d4:	4619      	mov	r1, r3
   234d6:	b17b      	cbz	r3, 234f8 <event_packet_process+0x30>
   234d8:	2200      	movs	r2, #0
   234da:	2300      	movs	r3, #0
   234dc:	f7f0 fad4 	bl	13a88 <bt_buf_get_evt>
	if (!evt_buf) {
   234e0:	4605      	mov	r5, r0
   234e2:	b140      	cbz	r0, 234f6 <event_packet_process+0x2e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   234e4:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   234e6:	3202      	adds	r2, #2
   234e8:	4621      	mov	r1, r4
   234ea:	300c      	adds	r0, #12
   234ec:	f7fe fed5 	bl	2229a <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   234f0:	4628      	mov	r0, r5
   234f2:	f7fe fd3d 	bl	21f70 <bt_recv>
}
   234f6:	bd38      	pop	{r3, r4, r5, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   234f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   234fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23500:	e7ec      	b.n	234dc <event_packet_process+0x14>

00023502 <data_packet_process>:
{
   23502:	b538      	push	{r3, r4, r5, lr}
   23504:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   23506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2350a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2350e:	2003      	movs	r0, #3
   23510:	f7f0 fa88 	bl	13a24 <bt_buf_get_rx>
	if (!data_buf) {
   23514:	b148      	cbz	r0, 2352a <data_packet_process+0x28>
   23516:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   23518:	8862      	ldrh	r2, [r4, #2]
   2351a:	3204      	adds	r2, #4
   2351c:	4621      	mov	r1, r4
   2351e:	300c      	adds	r0, #12
   23520:	f7fe febb 	bl	2229a <net_buf_simple_add_mem>
	bt_recv(data_buf);
   23524:	4628      	mov	r0, r5
   23526:	f7fe fd23 	bl	21f70 <bt_recv>
}
   2352a:	bd38      	pop	{r3, r4, r5, pc}

0002352c <fetch_and_process_hci_msg>:
{
   2352c:	b530      	push	{r4, r5, lr}
   2352e:	b083      	sub	sp, #12
   23530:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23536:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2353a:	f7f3 fa19 	bl	16970 <multithreading_lock_acquire>
	if (!errcode) {
   2353e:	b110      	cbz	r0, 23546 <fetch_and_process_hci_msg+0x1a>
		return false;
   23540:	2000      	movs	r0, #0
}
   23542:	b003      	add	sp, #12
   23544:	bd30      	pop	{r4, r5, pc}
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   23546:	f10d 0107 	add.w	r1, sp, #7
   2354a:	4620      	mov	r0, r4
   2354c:	f7f3 fbd8 	bl	16d00 <hci_internal_msg_get>
   23550:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   23552:	f7f3 fa17 	bl	16984 <multithreading_lock_release>
	if (errcode) {
   23556:	2d00      	cmp	r5, #0
   23558:	d1f2      	bne.n	23540 <fetch_and_process_hci_msg+0x14>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   2355a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2355e:	2b04      	cmp	r3, #4
   23560:	d003      	beq.n	2356a <fetch_and_process_hci_msg+0x3e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   23562:	2b02      	cmp	r3, #2
   23564:	d006      	beq.n	23574 <fetch_and_process_hci_msg+0x48>
	return true;
   23566:	2001      	movs	r0, #1
   23568:	e7eb      	b.n	23542 <fetch_and_process_hci_msg+0x16>
		event_packet_process(p_hci_buffer);
   2356a:	4620      	mov	r0, r4
   2356c:	f7ff ffac 	bl	234c8 <event_packet_process>
	return true;
   23570:	2001      	movs	r0, #1
   23572:	e7e6      	b.n	23542 <fetch_and_process_hci_msg+0x16>
		data_packet_process(p_hci_buffer);
   23574:	4620      	mov	r0, r4
   23576:	f7ff ffc4 	bl	23502 <data_packet_process>
	return true;
   2357a:	2001      	movs	r0, #1
   2357c:	e7e1      	b.n	23542 <fetch_and_process_hci_msg+0x16>

0002357e <hci_driver_send>:
{
   2357e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   23580:	8a03      	ldrh	r3, [r0, #16]
   23582:	b163      	cbz	r3, 2359e <hci_driver_send+0x20>
   23584:	4604      	mov	r4, r0
   23586:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   23588:	b963      	cbnz	r3, 235a4 <hci_driver_send+0x26>
		err = cmd_handle(buf);
   2358a:	f7f3 fa19 	bl	169c0 <cmd_handle>
	if (!err) {
   2358e:	4605      	mov	r5, r0
   23590:	b108      	cbz	r0, 23596 <hci_driver_send+0x18>
}
   23592:	4628      	mov	r0, r5
   23594:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   23596:	4620      	mov	r0, r4
   23598:	f7fe fe4e 	bl	22238 <net_buf_unref>
   2359c:	e7f9      	b.n	23592 <hci_driver_send+0x14>
		return -EINVAL;
   2359e:	f06f 0515 	mvn.w	r5, #21
   235a2:	e7f6      	b.n	23592 <hci_driver_send+0x14>
		return -EINVAL;
   235a4:	f06f 0515 	mvn.w	r5, #21
   235a8:	e7f3      	b.n	23592 <hci_driver_send+0x14>

000235aa <hci_driver_close>:
{
   235aa:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   235ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   235b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   235b4:	f7f3 f9dc 	bl	16970 <multithreading_lock_acquire>
	if (err) {
   235b8:	4604      	mov	r4, r0
   235ba:	b108      	cbz	r0, 235c0 <hci_driver_close+0x16>
}
   235bc:	4620      	mov	r0, r4
   235be:	bd10      	pop	{r4, pc}
	err = sdc_disable();
   235c0:	f7de fcc2 	bl	1f48 <sdc_disable>
	if (err) {
   235c4:	4604      	mov	r4, r0
   235c6:	b910      	cbnz	r0, 235ce <hci_driver_close+0x24>
	MULTITHREADING_LOCK_RELEASE();
   235c8:	f7f3 f9dc 	bl	16984 <multithreading_lock_release>
	return err;
   235cc:	e7f6      	b.n	235bc <hci_driver_close+0x12>
		MULTITHREADING_LOCK_RELEASE();
   235ce:	f7f3 f9d9 	bl	16984 <multithreading_lock_release>
		return err;
   235d2:	e7f3      	b.n	235bc <hci_driver_close+0x12>

000235d4 <configure_supported_features>:
{
   235d4:	b508      	push	{r3, lr}
		err = sdc_support_adv();
   235d6:	f7de fd6d 	bl	20b4 <sdc_support_adv>
		if (err) {
   235da:	b900      	cbnz	r0, 235de <configure_supported_features+0xa>
}
   235dc:	bd08      	pop	{r3, pc}
			return -ENOTSUP;
   235de:	f06f 0085 	mvn.w	r0, #133	; 0x85
   235e2:	e7fb      	b.n	235dc <configure_supported_features+0x8>

000235e4 <configure_memory_usage>:
{
   235e4:	b500      	push	{lr}
   235e6:	b083      	sub	sp, #12
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   235e8:	2000      	movs	r0, #0
   235ea:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   235ee:	aa01      	add	r2, sp, #4
   235f0:	2102      	movs	r1, #2
   235f2:	f7de fc5b 	bl	1eac <sdc_cfg_set>
	if (required_memory < 0) {
   235f6:	2800      	cmp	r0, #0
   235f8:	db3c      	blt.n	23674 <configure_memory_usage+0x90>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   235fa:	2108      	movs	r1, #8
   235fc:	f8ad 1004 	strh.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23600:	aa01      	add	r2, sp, #4
   23602:	2000      	movs	r0, #0
   23604:	f7de fc52 	bl	1eac <sdc_cfg_set>
	if (required_memory < 0) {
   23608:	2800      	cmp	r0, #0
   2360a:	db33      	blt.n	23674 <configure_memory_usage+0x90>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   2360c:	231b      	movs	r3, #27
   2360e:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   23612:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = CONFIG_BT_CTLR_SDC_RX_PACKET_COUNT;
   23616:	2302      	movs	r3, #2
   23618:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = CONFIG_BT_CTLR_SDC_TX_PACKET_COUNT;
   2361c:	2103      	movs	r1, #3
   2361e:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23622:	aa01      	add	r2, sp, #4
   23624:	2000      	movs	r0, #0
   23626:	f7de fc41 	bl	1eac <sdc_cfg_set>
	if (required_memory < 0) {
   2362a:	2800      	cmp	r0, #0
   2362c:	db22      	blt.n	23674 <configure_memory_usage+0x90>
	cfg.event_length.event_length_us =
   2362e:	f641 534c 	movw	r3, #7500	; 0x1d4c
   23632:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23634:	aa01      	add	r2, sp, #4
   23636:	2104      	movs	r1, #4
   23638:	2000      	movs	r0, #0
   2363a:	f7de fc37 	bl	1eac <sdc_cfg_set>
	if (required_memory < 0) {
   2363e:	2800      	cmp	r0, #0
   23640:	db18      	blt.n	23674 <configure_memory_usage+0x90>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   23642:	2301      	movs	r3, #1
   23644:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23648:	aa01      	add	r2, sp, #4
   2364a:	2105      	movs	r1, #5
   2364c:	2000      	movs	r0, #0
   2364e:	f7de fc2d 	bl	1eac <sdc_cfg_set>
	if (required_memory < 0) {
   23652:	2800      	cmp	r0, #0
   23654:	db0e      	blt.n	23674 <configure_memory_usage+0x90>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   23656:	231f      	movs	r3, #31
   23658:	f8ad 3004 	strh.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2365c:	aa01      	add	r2, sp, #4
   2365e:	2107      	movs	r1, #7
   23660:	2000      	movs	r0, #0
   23662:	f7de fc23 	bl	1eac <sdc_cfg_set>
	if (required_memory < 0) {
   23666:	2800      	cmp	r0, #0
   23668:	db04      	blt.n	23674 <configure_memory_usage+0x90>
	if (required_memory > sizeof(sdc_mempool)) {
   2366a:	f240 235e 	movw	r3, #606	; 0x25e
   2366e:	4298      	cmp	r0, r3
   23670:	d803      	bhi.n	2367a <configure_memory_usage+0x96>
	return 0;
   23672:	2000      	movs	r0, #0
}
   23674:	b003      	add	sp, #12
   23676:	f85d fb04 	ldr.w	pc, [sp], #4
		k_panic();
   2367a:	4040      	eors	r0, r0
   2367c:	f380 8811 	msr	BASEPRI, r0
   23680:	f04f 0004 	mov.w	r0, #4
   23684:	df02      	svc	2
		return -ENOMEM;
   23686:	f06f 000b 	mvn.w	r0, #11
   2368a:	e7f3      	b.n	23674 <configure_memory_usage+0x90>

0002368c <receive_work_handler>:
{
   2368c:	b508      	push	{r3, lr}
	hci_driver_receive_process();
   2368e:	f7f3 fa2f 	bl	16af0 <hci_driver_receive_process>
}
   23692:	bd08      	pop	{r3, pc}

00023694 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23694:	230f      	movs	r3, #15
   23696:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   23698:	2304      	movs	r3, #4
   2369a:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2369c:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2369e:	2301      	movs	r3, #1
   236a0:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   236a2:	8081      	strh	r1, [r0, #4]
}
   236a4:	4770      	bx	lr

000236a6 <encode_command_complete_header>:
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   236a6:	f04f 0c0e 	mov.w	ip, #14
   236aa:	f880 c000 	strb.w	ip, [r0]
	evt_hdr->len = param_length;
   236ae:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   236b0:	2201      	movs	r2, #1
   236b2:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   236b4:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   236b8:	7143      	strb	r3, [r0, #5]
}
   236ba:	4770      	bx	lr

000236bc <le_read_supported_states>:
	*buf = states1;
   236bc:	2303      	movs	r3, #3
   236be:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   236c0:	2300      	movs	r3, #0
   236c2:	7103      	strb	r3, [r0, #4]
}
   236c4:	4770      	bx	lr

000236c6 <status_param_cmd_put>:
}
   236c6:	2001      	movs	r0, #1
   236c8:	4770      	bx	lr

000236ca <controller_and_baseband_cmd_put>:
{
   236ca:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   236cc:	7842      	ldrb	r2, [r0, #1]
   236ce:	7803      	ldrb	r3, [r0, #0]
   236d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   236d4:	b21b      	sxth	r3, r3
	switch (opcode)	{
   236d6:	f640 4201 	movw	r2, #3073	; 0xc01
   236da:	4293      	cmp	r3, r2
   236dc:	d005      	beq.n	236ea <controller_and_baseband_cmd_put+0x20>
   236de:	f640 4203 	movw	r2, #3075	; 0xc03
   236e2:	4293      	cmp	r3, r2
   236e4:	d005      	beq.n	236f2 <controller_and_baseband_cmd_put+0x28>
   236e6:	2001      	movs	r0, #1
}
   236e8:	bd08      	pop	{r3, pc}
   236ea:	3003      	adds	r0, #3
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   236ec:	f7e6 fd41 	bl	a172 <sdc_hci_cmd_cb_set_event_mask>
   236f0:	e7fa      	b.n	236e8 <controller_and_baseband_cmd_put+0x1e>
		return sdc_hci_cmd_cb_reset();
   236f2:	f7de fe2f 	bl	2354 <sdc_hci_cmd_cb_reset>
   236f6:	e7f7      	b.n	236e8 <controller_and_baseband_cmd_put+0x1e>

000236f8 <supported_commands>:
{
   236f8:	b510      	push	{r4, lr}
   236fa:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   236fc:	2230      	movs	r2, #48	; 0x30
   236fe:	2100      	movs	r1, #0
   23700:	f001 fba4 	bl	24e4c <memset>
	cmds->hci_set_event_mask = 1;
   23704:	7963      	ldrb	r3, [r4, #5]
   23706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2370a:	7163      	strb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2370c:	b2db      	uxtb	r3, r3
   2370e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23712:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_local_version_information = 1;
   23714:	7ba3      	ldrb	r3, [r4, #14]
   23716:	f043 0308 	orr.w	r3, r3, #8
   2371a:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2371c:	b2db      	uxtb	r3, r3
   2371e:	f043 0320 	orr.w	r3, r3, #32
   23722:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   23724:	7be3      	ldrb	r3, [r4, #15]
   23726:	f043 0302 	orr.w	r3, r3, #2
   2372a:	73e3      	strb	r3, [r4, #15]
	cmds->hci_le_set_event_mask = 1;
   2372c:	7e63      	ldrb	r3, [r4, #25]
   2372e:	f043 0301 	orr.w	r3, r3, #1
   23732:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_buffer_size_v1 = 1;
   23734:	b2db      	uxtb	r3, r3
   23736:	f043 0302 	orr.w	r3, r3, #2
   2373a:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_local_supported_features = 1;
   2373c:	b2db      	uxtb	r3, r3
   2373e:	f043 0304 	orr.w	r3, r3, #4
   23742:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   23744:	b2db      	uxtb	r3, r3
   23746:	f043 0310 	orr.w	r3, r3, #16
   2374a:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_parameters = 1;
   2374c:	b2db      	uxtb	r3, r3
   2374e:	f043 0320 	orr.w	r3, r3, #32
   23752:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_read_advertising_physical_channel_tx_power = 1;
   23754:	b2db      	uxtb	r3, r3
   23756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2375a:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   2375c:	b2db      	uxtb	r3, r3
   2375e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23762:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   23764:	7ea3      	ldrb	r3, [r4, #26]
   23766:	f043 0301 	orr.w	r3, r3, #1
   2376a:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_advertising_enable = 1;
   2376c:	b2db      	uxtb	r3, r3
   2376e:	f043 0302 	orr.w	r3, r3, #2
   23772:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_set_data_related_address_changes = 1;
   23774:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   23778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2377c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_read_filter_accept_list_size = 1;
   23780:	7ea3      	ldrb	r3, [r4, #26]
   23782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23786:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_clear_filter_accept_list = 1;
   23788:	b2db      	uxtb	r3, r3
   2378a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2378e:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   23790:	7ee3      	ldrb	r3, [r4, #27]
   23792:	f043 0301 	orr.w	r3, r3, #1
   23796:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_remove_device_from_filter_accept_list = 1;
   23798:	b2db      	uxtb	r3, r3
   2379a:	f043 0302 	orr.w	r3, r3, #2
   2379e:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_encrypt = 1;
   237a0:	b2db      	uxtb	r3, r3
   237a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   237a6:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   237a8:	b2db      	uxtb	r3, r3
   237aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   237ae:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_supported_states = 1;
   237b0:	7f23      	ldrb	r3, [r4, #28]
   237b2:	f043 0308 	orr.w	r3, r3, #8
   237b6:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v1 = 1;
   237b8:	b2db      	uxtb	r3, r3
   237ba:	f043 0310 	orr.w	r3, r3, #16
   237be:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_transmitter_test_v1 = 1;
   237c0:	b2db      	uxtb	r3, r3
   237c2:	f043 0320 	orr.w	r3, r3, #32
   237c6:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   237c8:	b2db      	uxtb	r3, r3
   237ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   237ce:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_receiver_test_v2 = 1;
   237d0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   237d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   237d8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   237dc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   237e0:	f043 0301 	orr.w	r3, r3, #1
   237e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   237e8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   237ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   237f0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
   237f4:	bd10      	pop	{r4, pc}

000237f6 <supported_features>:
   237f6:	2300      	movs	r3, #0
   237f8:	6003      	str	r3, [r0, #0]
   237fa:	6043      	str	r3, [r0, #4]
	features->bdedr_not_supported = 1;
   237fc:	7903      	ldrb	r3, [r0, #4]
   237fe:	f043 0320 	orr.w	r3, r3, #32
   23802:	7103      	strb	r3, [r0, #4]
	features->le_supported = 1;
   23804:	b2db      	uxtb	r3, r3
   23806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2380a:	7103      	strb	r3, [r0, #4]
}
   2380c:	4770      	bx	lr

0002380e <info_param_cmd_put>:
{
   2380e:	b508      	push	{r3, lr}
   23810:	4603      	mov	r3, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   23812:	1d88      	adds	r0, r1, #6
   23814:	f893 c001 	ldrb.w	ip, [r3, #1]
   23818:	781b      	ldrb	r3, [r3, #0]
   2381a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2381e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   23820:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   23824:	3b01      	subs	r3, #1
   23826:	2b08      	cmp	r3, #8
   23828:	d820      	bhi.n	2386c <info_param_cmd_put+0x5e>
   2382a:	e8df f003 	tbb	[pc, r3]
   2382e:	0b05      	.short	0x0b05
   23830:	1f1f1f12 	.word	0x1f1f1f12
   23834:	1f1f      	.short	0x1f1f
   23836:	19          	.byte	0x19
   23837:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   23838:	7813      	ldrb	r3, [r2, #0]
   2383a:	3308      	adds	r3, #8
   2383c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2383e:	f7e6 fcca 	bl	a1d6 <sdc_hci_cmd_ip_read_local_version_information>
   23842:	e014      	b.n	2386e <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   23844:	7813      	ldrb	r3, [r2, #0]
   23846:	3340      	adds	r3, #64	; 0x40
   23848:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2384a:	f7ff ff55 	bl	236f8 <supported_commands>
		return 0;
   2384e:	2000      	movs	r0, #0
   23850:	e00d      	b.n	2386e <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   23852:	7813      	ldrb	r3, [r2, #0]
   23854:	3308      	adds	r3, #8
   23856:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   23858:	f7ff ffcd 	bl	237f6 <supported_features>
		return 0;
   2385c:	2000      	movs	r0, #0
   2385e:	e006      	b.n	2386e <info_param_cmd_put+0x60>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   23860:	7813      	ldrb	r3, [r2, #0]
   23862:	3306      	adds	r3, #6
   23864:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   23866:	f7e6 fcb4 	bl	a1d2 <sdc_hci_cmd_ip_read_bd_addr>
   2386a:	e000      	b.n	2386e <info_param_cmd_put+0x60>
	switch (opcode)	{
   2386c:	2001      	movs	r0, #1
}
   2386e:	bd08      	pop	{r3, pc}

00023870 <le_supported_features>:
   23870:	2300      	movs	r3, #0
   23872:	6003      	str	r3, [r0, #0]
   23874:	6043      	str	r3, [r0, #4]
	features->params.le_encryption = 1;
   23876:	7803      	ldrb	r3, [r0, #0]
   23878:	f043 0301 	orr.w	r3, r3, #1
   2387c:	7003      	strb	r3, [r0, #0]
	features->params.extended_reject_indication = 1;
   2387e:	b2db      	uxtb	r3, r3
   23880:	f043 0304 	orr.w	r3, r3, #4
   23884:	7003      	strb	r3, [r0, #0]
	features->params.slave_initiated_features_exchange = 1;
   23886:	b2db      	uxtb	r3, r3
   23888:	f043 0308 	orr.w	r3, r3, #8
   2388c:	7003      	strb	r3, [r0, #0]
	features->params.le_ping = 1;
   2388e:	b2db      	uxtb	r3, r3
   23890:	f043 0310 	orr.w	r3, r3, #16
   23894:	7003      	strb	r3, [r0, #0]
	features->params.channel_selection_algorithm_2 = 1;
   23896:	7843      	ldrb	r3, [r0, #1]
   23898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2389c:	7043      	strb	r3, [r0, #1]
}
   2389e:	4770      	bx	lr

000238a0 <vs_zephyr_supported_commands>:
   238a0:	2300      	movs	r3, #0
   238a2:	8003      	strh	r3, [r0, #0]
	cmds->read_version_info = 1;
   238a4:	7803      	ldrb	r3, [r0, #0]
   238a6:	f043 0301 	orr.w	r3, r3, #1
   238aa:	7003      	strb	r3, [r0, #0]
	cmds->read_supported_commands = 1;
   238ac:	b2db      	uxtb	r3, r3
   238ae:	f043 0302 	orr.w	r3, r3, #2
   238b2:	7003      	strb	r3, [r0, #0]
	cmds->write_bd_addr = 1;
   238b4:	b2db      	uxtb	r3, r3
   238b6:	f043 0320 	orr.w	r3, r3, #32
   238ba:	7003      	strb	r3, [r0, #0]
	cmds->read_static_addresses = 1;
   238bc:	7843      	ldrb	r3, [r0, #1]
   238be:	f043 0301 	orr.w	r3, r3, #1
   238c2:	7043      	strb	r3, [r0, #1]
	cmds->read_key_hierarchy_roots = 1;
   238c4:	b2db      	uxtb	r3, r3
   238c6:	f043 0302 	orr.w	r3, r3, #2
   238ca:	7043      	strb	r3, [r0, #1]
	cmds->read_chip_temperature = 1;
   238cc:	b2db      	uxtb	r3, r3
   238ce:	f043 0304 	orr.w	r3, r3, #4
   238d2:	7043      	strb	r3, [r0, #1]
}
   238d4:	4770      	bx	lr

000238d6 <vs_supported_commands>:
   238d6:	2300      	movs	r3, #0
   238d8:	8003      	strh	r3, [r0, #0]
	cmds->read_supported_vs_commands = 1;
   238da:	7803      	ldrb	r3, [r0, #0]
   238dc:	f043 0301 	orr.w	r3, r3, #1
   238e0:	7003      	strb	r3, [r0, #0]
	cmds->llpm_mode_set = 1;
   238e2:	b2db      	uxtb	r3, r3
   238e4:	f043 0302 	orr.w	r3, r3, #2
   238e8:	7003      	strb	r3, [r0, #0]
	cmds->conn_update = 1;
   238ea:	b2db      	uxtb	r3, r3
   238ec:	f043 0304 	orr.w	r3, r3, #4
   238f0:	7003      	strb	r3, [r0, #0]
	cmds->conn_event_extend = 1;
   238f2:	b2db      	uxtb	r3, r3
   238f4:	f043 0308 	orr.w	r3, r3, #8
   238f8:	7003      	strb	r3, [r0, #0]
	cmds->qos_conn_event_report_enable = 1;
   238fa:	b2db      	uxtb	r3, r3
   238fc:	f043 0310 	orr.w	r3, r3, #16
   23900:	7003      	strb	r3, [r0, #0]
	cmds->event_length_set = 1;
   23902:	b2db      	uxtb	r3, r3
   23904:	f043 0320 	orr.w	r3, r3, #32
   23908:	7003      	strb	r3, [r0, #0]
}
   2390a:	4770      	bx	lr

0002390c <le_controller_cmd_put>:
{
   2390c:	b508      	push	{r3, lr}
   2390e:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   23910:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   23912:	3106      	adds	r1, #6
   23914:	f893 c001 	ldrb.w	ip, [r3, #1]
   23918:	781b      	ldrb	r3, [r3, #0]
   2391a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   2391e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   23920:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   23924:	3b01      	subs	r3, #1
   23926:	2b7b      	cmp	r3, #123	; 0x7b
   23928:	f200 8097 	bhi.w	23a5a <le_controller_cmd_put+0x14e>
   2392c:	e8df f003 	tbb	[pc, r3]
   23930:	9548413e 	.word	0x9548413e
   23934:	5d565350 	.word	0x5d565350
   23938:	95956360 	.word	0x95956360
   2393c:	70699595 	.word	0x70699595
   23940:	95957673 	.word	0x95957673
   23944:	7f799595 	.word	0x7f799595
   23948:	86959595 	.word	0x86959595
   2394c:	95959595 	.word	0x95959595
   23950:	95959595 	.word	0x95959595
   23954:	95959595 	.word	0x95959595
   23958:	95959595 	.word	0x95959595
   2395c:	95959595 	.word	0x95959595
   23960:	95959595 	.word	0x95959595
   23964:	95959595 	.word	0x95959595
   23968:	95959595 	.word	0x95959595
   2396c:	95959595 	.word	0x95959595
   23970:	95959595 	.word	0x95959595
   23974:	95959595 	.word	0x95959595
   23978:	958e9595 	.word	0x958e9595
   2397c:	95959595 	.word	0x95959595
   23980:	95959595 	.word	0x95959595
   23984:	95959595 	.word	0x95959595
   23988:	95959595 	.word	0x95959595
   2398c:	95959595 	.word	0x95959595
   23990:	95959595 	.word	0x95959595
   23994:	95959595 	.word	0x95959595
   23998:	95959595 	.word	0x95959595
   2399c:	95959595 	.word	0x95959595
   239a0:	95959595 	.word	0x95959595
   239a4:	95959595 	.word	0x95959595
   239a8:	66959595 	.word	0x66959595
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   239ac:	f7e6 fc33 	bl	a216 <sdc_hci_cmd_le_set_event_mask>
   239b0:	e054      	b.n	23a5c <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   239b2:	7813      	ldrb	r3, [r2, #0]
   239b4:	3303      	adds	r3, #3
   239b6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   239b8:	4608      	mov	r0, r1
   239ba:	f7e6 fc1c 	bl	a1f6 <sdc_hci_cmd_le_read_buffer_size>
   239be:	e04d      	b.n	23a5c <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   239c0:	7813      	ldrb	r3, [r2, #0]
   239c2:	3308      	adds	r3, #8
   239c4:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   239c6:	4608      	mov	r0, r1
   239c8:	f7ff ff52 	bl	23870 <le_supported_features>
		return 0;
   239cc:	2000      	movs	r0, #0
   239ce:	e045      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   239d0:	f7e6 fc26 	bl	a220 <sdc_hci_cmd_le_set_random_address>
   239d4:	e042      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   239d6:	f7e6 fc1a 	bl	a20e <sdc_hci_cmd_le_set_adv_params>
   239da:	e03f      	b.n	23a5c <le_controller_cmd_put+0x150>
		*param_length_out +=
   239dc:	7813      	ldrb	r3, [r2, #0]
   239de:	3301      	adds	r3, #1
   239e0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   239e2:	4608      	mov	r0, r1
   239e4:	f7e6 fc05 	bl	a1f2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   239e8:	e038      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   239ea:	f7e6 fc0c 	bl	a206 <sdc_hci_cmd_le_set_adv_data>
   239ee:	e035      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   239f0:	f7e6 fc18 	bl	a224 <sdc_hci_cmd_le_set_scan_response_data>
   239f4:	e032      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   239f6:	f7e6 fc08 	bl	a20a <sdc_hci_cmd_le_set_adv_enable>
   239fa:	e02f      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   239fc:	f7e6 fc09 	bl	a212 <sdc_hci_cmd_le_set_data_related_address_changes>
   23a00:	e02c      	b.n	23a5c <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   23a02:	7813      	ldrb	r3, [r2, #0]
   23a04:	3301      	adds	r3, #1
   23a06:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   23a08:	4608      	mov	r0, r1
   23a0a:	f7e6 fbf6 	bl	a1fa <sdc_hci_cmd_le_read_filter_accept_list_size>
   23a0e:	e025      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   23a10:	f7e6 fbe5 	bl	a1de <sdc_hci_cmd_le_clear_filter_accept_list>
   23a14:	e022      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   23a16:	f7e6 fbe0 	bl	a1da <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   23a1a:	e01f      	b.n	23a5c <le_controller_cmd_put+0x150>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   23a1c:	f7e6 fbf1 	bl	a202 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   23a20:	e01c      	b.n	23a5c <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   23a22:	7813      	ldrb	r3, [r2, #0]
   23a24:	3310      	adds	r3, #16
   23a26:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   23a28:	f7e6 fbdb 	bl	a1e2 <sdc_hci_cmd_le_encrypt>
   23a2c:	e016      	b.n	23a5c <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   23a2e:	7813      	ldrb	r3, [r2, #0]
   23a30:	3308      	adds	r3, #8
   23a32:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   23a34:	4608      	mov	r0, r1
   23a36:	f7e6 fbda 	bl	a1ee <sdc_hci_cmd_le_rand>
   23a3a:	e00f      	b.n	23a5c <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   23a3c:	7813      	ldrb	r3, [r2, #0]
   23a3e:	3308      	adds	r3, #8
   23a40:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   23a42:	4608      	mov	r0, r1
   23a44:	f7ff fe3a 	bl	236bc <le_read_supported_states>
		return 0;
   23a48:	2000      	movs	r0, #0
   23a4a:	e007      	b.n	23a5c <le_controller_cmd_put+0x150>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   23a4c:	7813      	ldrb	r3, [r2, #0]
   23a4e:	3302      	adds	r3, #2
   23a50:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   23a52:	4608      	mov	r0, r1
   23a54:	f7e6 fbd3 	bl	a1fe <sdc_hci_cmd_le_read_transmit_power>
   23a58:	e000      	b.n	23a5c <le_controller_cmd_put+0x150>
	switch (opcode)	{
   23a5a:	2001      	movs	r0, #1
}
   23a5c:	bd08      	pop	{r3, pc}

00023a5e <vs_cmd_put>:
{
   23a5e:	b508      	push	{r3, lr}
   23a60:	4603      	mov	r3, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   23a62:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   23a64:	3106      	adds	r1, #6
   23a66:	f893 c001 	ldrb.w	ip, [r3, #1]
   23a6a:	781b      	ldrb	r3, [r3, #0]
   23a6c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	switch (opcode)	{
   23a70:	f64f 4c0b 	movw	ip, #64523	; 0xfc0b
   23a74:	4563      	cmp	r3, ip
   23a76:	d913      	bls.n	23aa0 <vs_cmd_put+0x42>
   23a78:	f64f 5c0c 	movw	ip, #64780	; 0xfd0c
   23a7c:	4563      	cmp	r3, ip
   23a7e:	d86a      	bhi.n	23b56 <vs_cmd_put+0xf8>
   23a80:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   23a84:	d31e      	bcc.n	23ac4 <vs_cmd_put+0x66>
   23a86:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   23a8a:	2b0c      	cmp	r3, #12
   23a8c:	d85f      	bhi.n	23b4e <vs_cmd_put+0xf0>
   23a8e:	e8df f003 	tbb	[pc, r3]
   23a92:	4c44      	.short	0x4c44
   23a94:	5855524f 	.word	0x5855524f
   23a98:	5e5e5e5e 	.word	0x5e5e5e5e
   23a9c:	5e5e      	.short	0x5e5e
   23a9e:	5b          	.byte	0x5b
   23a9f:	00          	.byte	0x00
   23aa0:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   23aa4:	d801      	bhi.n	23aaa <vs_cmd_put+0x4c>
   23aa6:	2001      	movs	r0, #1
}
   23aa8:	bd08      	pop	{r3, pc}
	switch (opcode)	{
   23aaa:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   23aae:	3b01      	subs	r3, #1
   23ab0:	2b0a      	cmp	r3, #10
   23ab2:	d84e      	bhi.n	23b52 <vs_cmd_put+0xf4>
   23ab4:	e8df f003 	tbb	[pc, r3]
   23ab8:	4d4d0f08 	.word	0x4d4d0f08
   23abc:	4d4d274d 	.word	0x4d4d274d
   23ac0:	2017      	.short	0x2017
   23ac2:	2a          	.byte	0x2a
   23ac3:	00          	.byte	0x00
   23ac4:	2001      	movs	r0, #1
   23ac6:	e7ef      	b.n	23aa8 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   23ac8:	7813      	ldrb	r3, [r2, #0]
   23aca:	330c      	adds	r3, #12
   23acc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   23ace:	4608      	mov	r0, r1
   23ad0:	f7de fce8 	bl	24a4 <sdc_hci_cmd_vs_zephyr_read_version_info>
   23ad4:	e7e8      	b.n	23aa8 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   23ad6:	7813      	ldrb	r3, [r2, #0]
   23ad8:	3340      	adds	r3, #64	; 0x40
   23ada:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   23adc:	4608      	mov	r0, r1
   23ade:	f7ff fedf 	bl	238a0 <vs_zephyr_supported_commands>
		return 0;
   23ae2:	2000      	movs	r0, #0
   23ae4:	e7e0      	b.n	23aa8 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   23ae6:	7813      	ldrb	r3, [r2, #0]
   23ae8:	1c58      	adds	r0, r3, #1
   23aea:	7010      	strb	r0, [r2, #0]
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   23aec:	3317      	adds	r3, #23
   23aee:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   23af0:	4608      	mov	r0, r1
   23af2:	f7de fc8b 	bl	240c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   23af6:	e7d7      	b.n	23aa8 <vs_cmd_put+0x4a>
		*param_length_out +=
   23af8:	7813      	ldrb	r3, [r2, #0]
   23afa:	3320      	adds	r3, #32
   23afc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   23afe:	4608      	mov	r0, r1
   23b00:	f7de fc3c 	bl	237c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   23b04:	e7d0      	b.n	23aa8 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   23b06:	f7e6 fb62 	bl	a1ce <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   23b0a:	e7cd      	b.n	23aa8 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   23b0c:	7813      	ldrb	r3, [r2, #0]
   23b0e:	3301      	adds	r3, #1
   23b10:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   23b12:	4608      	mov	r0, r1
   23b14:	f7e6 fb47 	bl	a1a6 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   23b18:	e7c6      	b.n	23aa8 <vs_cmd_put+0x4a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   23b1a:	7813      	ldrb	r3, [r2, #0]
   23b1c:	3340      	adds	r3, #64	; 0x40
   23b1e:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   23b20:	4608      	mov	r0, r1
   23b22:	f7ff fed8 	bl	238d6 <vs_supported_commands>
		return 0;
   23b26:	2000      	movs	r0, #0
   23b28:	e7be      	b.n	23aa8 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   23b2a:	f7e6 fb33 	bl	a194 <sdc_hci_cmd_vs_llpm_mode_set>
   23b2e:	e7bb      	b.n	23aa8 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   23b30:	f7e6 fb2c 	bl	a18c <sdc_hci_cmd_vs_conn_update>
   23b34:	e7b8      	b.n	23aa8 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   23b36:	f7e6 fb21 	bl	a17c <sdc_hci_cmd_vs_conn_event_extend>
   23b3a:	e7b5      	b.n	23aa8 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   23b3c:	f7e6 fb2c 	bl	a198 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   23b40:	e7b2      	b.n	23aa8 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   23b42:	f7e6 fb25 	bl	a190 <sdc_hci_cmd_vs_event_length_set>
   23b46:	e7af      	b.n	23aa8 <vs_cmd_put+0x4a>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   23b48:	f7e6 fb2b 	bl	a1a2 <sdc_hci_cmd_vs_set_adv_randomness>
   23b4c:	e7ac      	b.n	23aa8 <vs_cmd_put+0x4a>
	switch (opcode)	{
   23b4e:	2001      	movs	r0, #1
   23b50:	e7aa      	b.n	23aa8 <vs_cmd_put+0x4a>
   23b52:	2001      	movs	r0, #1
   23b54:	e7a8      	b.n	23aa8 <vs_cmd_put+0x4a>
   23b56:	2001      	movs	r0, #1
   23b58:	e7a6      	b.n	23aa8 <vs_cmd_put+0x4a>

00023b5a <m_assert_handler>:
	k_oops();
   23b5a:	4040      	eors	r0, r0
   23b5c:	f380 8811 	msr	BASEPRI, r0
   23b60:	f04f 0003 	mov.w	r0, #3
   23b64:	df02      	svc	2
}
   23b66:	4770      	bx	lr

00023b68 <m_config_clock_source_get>:
}
   23b68:	2000      	movs	r0, #0
   23b6a:	4770      	bx	lr

00023b6c <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   23b6c:	4668      	mov	r0, sp
   23b6e:	f020 0107 	bic.w	r1, r0, #7
   23b72:	468d      	mov	sp, r1
   23b74:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   23b76:	f7e4 fcb5 	bl	84e4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   23b7a:	f7ef f9d9 	bl	12f30 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   23b7e:	f7ef fb83 	bl	13288 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   23b82:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23b86:	4685      	mov	sp, r0
   23b88:	4770      	bx	lr

00023b8a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   23b8a:	4668      	mov	r0, sp
   23b8c:	f020 0107 	bic.w	r1, r0, #7
   23b90:	468d      	mov	sp, r1
   23b92:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   23b94:	f7e4 fc5c 	bl	8450 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   23b98:	f7ef f9ca 	bl	12f30 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   23b9c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23ba0:	4685      	mov	sp, r0
   23ba2:	4770      	bx	lr

00023ba4 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   23ba4:	4668      	mov	r0, sp
   23ba6:	f020 0107 	bic.w	r1, r0, #7
   23baa:	468d      	mov	sp, r1
   23bac:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   23bae:	f7e2 f999 	bl	5ee4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   23bb2:	f7ef f9bd 	bl	12f30 <_arch_isr_direct_pm>
   23bb6:	f7ef fb67 	bl	13288 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   23bba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23bbe:	4685      	mov	sp, r0
   23bc0:	4770      	bx	lr

00023bc2 <mpsl_lib_init_sys>:
{
   23bc2:	b510      	push	{r4, lr}
	err = mpsl_lib_init_internal();
   23bc4:	f7f3 f8ca 	bl	16d5c <mpsl_lib_init_internal>
	if (err) {
   23bc8:	4604      	mov	r4, r0
   23bca:	b108      	cbz	r0, 23bd0 <mpsl_lib_init_sys+0xe>
}
   23bcc:	4620      	mov	r0, r4
   23bce:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   23bd0:	2201      	movs	r2, #1
   23bd2:	2100      	movs	r1, #0
   23bd4:	2008      	movs	r0, #8
   23bd6:	f7fe f804 	bl	21be2 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   23bda:	2201      	movs	r2, #1
   23bdc:	2100      	movs	r1, #0
   23bde:	200b      	movs	r0, #11
   23be0:	f7fd ffff 	bl	21be2 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   23be4:	2201      	movs	r2, #1
   23be6:	2100      	movs	r1, #0
   23be8:	4610      	mov	r0, r2
   23bea:	f7fd fffa 	bl	21be2 <z_arm_irq_priority_set>
	return 0;
   23bee:	e7ed      	b.n	23bcc <mpsl_lib_init_sys+0xa>

00023bf0 <mpsl_low_prio_work_handler>:
{
   23bf0:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23bf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23bfa:	f7f2 feb9 	bl	16970 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   23bfe:	f7e8 fabb 	bl	c178 <mpsl_low_priority_process>
	MULTITHREADING_LOCK_RELEASE();
   23c02:	f7f2 febf 	bl	16984 <multithreading_lock_release>
}
   23c06:	bd08      	pop	{r3, pc}

00023c08 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   23c08:	b508      	push	{r3, lr}

	mpsl_fem_init();
   23c0a:	f7e8 fc8b 	bl	c524 <mpsl_fem_init>

	return 0;
}
   23c0e:	2000      	movs	r0, #0
   23c10:	bd08      	pop	{r3, pc}

00023c12 <nrfx_clock_stop>:
	switch (domain) {
   23c12:	2801      	cmp	r0, #1
   23c14:	d000      	beq.n	23c18 <nrfx_clock_stop+0x6>
   23c16:	4770      	bx	lr
{
   23c18:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   23c1a:	f7e5 faf7 	bl	920c <mpsl_clock_hfclk_release>
}
   23c1e:	bd08      	pop	{r3, pc}

00023c20 <nrfx_clock_enable>:
}
   23c20:	4770      	bx	lr

00023c22 <nrfx_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   23c22:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   23c24:	f7e5 f8fc 	bl	8e20 <MPSL_IRQ_CLOCK_Handler>
}
   23c28:	bd08      	pop	{r3, pc}

00023c2a <nrf_flash_sync_is_required>:
{
   23c2a:	b508      	push	{r3, lr}
	return mpsl_is_initialized();
   23c2c:	f7e5 fcb4 	bl	9598 <mpsl_is_initialized>
}
   23c30:	bd08      	pop	{r3, pc}

00023c32 <nrf_flash_sync_get_timestamp_begin>:
}
   23c32:	4770      	bx	lr

00023c34 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(void)
{
   23c34:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   23c36:	f7f8 feed 	bl	1ca14 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   23c3a:	bd08      	pop	{r3, pc}

00023c3c <hw_cc3xx_init>:

static int hw_cc3xx_init(void)
{
   23c3c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   23c3e:	f7ef f801 	bl	12c44 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   23c42:	f7ef f8ff 	bl	12e44 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
   23c46:	f7ff fff5 	bl	23c34 <hw_cc3xx_init_internal>
	return res;
}
   23c4a:	bd08      	pop	{r3, pc}

00023c4c <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23c50:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   23c54:	2b08      	cmp	r3, #8
   23c56:	d001      	beq.n	23c5c <nrf52_errata_36+0x10>
        return false;
   23c58:	2000      	movs	r0, #0
   23c5a:	4770      	bx	lr
                        return true;
   23c5c:	2001      	movs	r0, #1
}
   23c5e:	4770      	bx	lr

00023c60 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23c60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23c64:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   23c68:	2b08      	cmp	r3, #8
   23c6a:	d001      	beq.n	23c70 <nrf52_errata_66+0x10>
        return false;
   23c6c:	2000      	movs	r0, #0
   23c6e:	4770      	bx	lr
                        return true;
   23c70:	2001      	movs	r0, #1
}
   23c72:	4770      	bx	lr

00023c74 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23c78:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23c7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   23c80:	2a08      	cmp	r2, #8
   23c82:	d001      	beq.n	23c88 <nrf52_errata_98+0x14>
        return false;
   23c84:	2000      	movs	r0, #0
   23c86:	4770      	bx	lr
                switch(var2)
   23c88:	2b00      	cmp	r3, #0
   23c8a:	d804      	bhi.n	23c96 <nrf52_errata_98+0x22>
   23c8c:	e8df f003 	tbb	[pc, r3]
   23c90:	01          	.byte	0x01
   23c91:	00          	.byte	0x00
   23c92:	2001      	movs	r0, #1
   23c94:	4770      	bx	lr
                        return false;
   23c96:	2000      	movs	r0, #0
}
   23c98:	4770      	bx	lr

00023c9a <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23c9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23c9e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23ca2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   23ca6:	2a08      	cmp	r2, #8
   23ca8:	d001      	beq.n	23cae <nrf52_errata_103+0x14>
        return false;
   23caa:	2000      	movs	r0, #0
   23cac:	4770      	bx	lr
                switch(var2)
   23cae:	2b00      	cmp	r3, #0
   23cb0:	d804      	bhi.n	23cbc <nrf52_errata_103+0x22>
   23cb2:	e8df f003 	tbb	[pc, r3]
   23cb6:	01          	.byte	0x01
   23cb7:	00          	.byte	0x00
   23cb8:	2001      	movs	r0, #1
   23cba:	4770      	bx	lr
                        return false;
   23cbc:	2000      	movs	r0, #0
}
   23cbe:	4770      	bx	lr

00023cc0 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23cc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23cc4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23cc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   23ccc:	2a08      	cmp	r2, #8
   23cce:	d001      	beq.n	23cd4 <nrf52_errata_115+0x14>
        return false;
   23cd0:	2000      	movs	r0, #0
   23cd2:	4770      	bx	lr
                switch(var2)
   23cd4:	2b00      	cmp	r3, #0
   23cd6:	d804      	bhi.n	23ce2 <nrf52_errata_115+0x22>
   23cd8:	e8df f003 	tbb	[pc, r3]
   23cdc:	01          	.byte	0x01
   23cdd:	00          	.byte	0x00
   23cde:	2001      	movs	r0, #1
   23ce0:	4770      	bx	lr
                        return false;
   23ce2:	2000      	movs	r0, #0
}
   23ce4:	4770      	bx	lr

00023ce6 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23cea:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23cee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   23cf2:	2a08      	cmp	r2, #8
   23cf4:	d001      	beq.n	23cfa <nrf52_errata_120+0x14>
        return false;
   23cf6:	2000      	movs	r0, #0
   23cf8:	4770      	bx	lr
                switch(var2)
   23cfa:	2b00      	cmp	r3, #0
   23cfc:	d804      	bhi.n	23d08 <nrf52_errata_120+0x22>
   23cfe:	e8df f003 	tbb	[pc, r3]
   23d02:	01          	.byte	0x01
   23d03:	00          	.byte	0x00
   23d04:	2001      	movs	r0, #1
   23d06:	4770      	bx	lr
                        return false;
   23d08:	2000      	movs	r0, #0
}
   23d0a:	4770      	bx	lr

00023d0c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23d0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23d10:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   23d14:	2b08      	cmp	r3, #8
   23d16:	d001      	beq.n	23d1c <nrf52_errata_136+0x10>
        return false;
   23d18:	2000      	movs	r0, #0
   23d1a:	4770      	bx	lr
                        return true;
   23d1c:	2001      	movs	r0, #1
}
   23d1e:	4770      	bx	lr

00023d20 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23d20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23d24:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23d28:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   23d2c:	2a08      	cmp	r2, #8
   23d2e:	d001      	beq.n	23d34 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   23d30:	2000      	movs	r0, #0
   23d32:	4770      	bx	lr
                switch(var2)
   23d34:	2b04      	cmp	r3, #4
   23d36:	d801      	bhi.n	23d3c <nrf52_configuration_249+0x1c>
   23d38:	2000      	movs	r0, #0
   23d3a:	4770      	bx	lr
                        return true;
   23d3c:	2001      	movs	r0, #1
    #endif
}
   23d3e:	4770      	bx	lr

00023d40 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
   23d40:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   23d42:	f7ff ffed 	bl	23d20 <nrf52_configuration_249>
   23d46:	b138      	cbz	r0, 23d58 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   23d48:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23d4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   23d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23d54:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
   23d58:	bd08      	pop	{r3, pc}

00023d5a <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   23d5a:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   23d5c:	4780      	blx	r0
}
   23d5e:	bd08      	pop	{r3, pc}

00023d60 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   23d60:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   23d62:	f000 ff65 	bl	24c30 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   23d66:	bd08      	pop	{r3, pc}

00023d68 <nrf_gpiote_event_configure>:
{
   23d68:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23d6a:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   23d6e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   23d72:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   23d76:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   23d7a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23d7e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   23d82:	0212      	lsls	r2, r2, #8
   23d84:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   23d88:	041b      	lsls	r3, r3, #16
   23d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23d8e:	431a      	orrs	r2, r3
   23d90:	4314      	orrs	r4, r2
   23d92:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   23d96:	f85d 4b04 	ldr.w	r4, [sp], #4
   23d9a:	4770      	bx	lr

00023d9c <nrf_gpiote_task_configure>:
{
   23d9c:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   23d9e:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   23da2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   23da6:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   23daa:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   23dae:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23db2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   23db6:	0212      	lsls	r2, r2, #8
   23db8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   23dbc:	041b      	lsls	r3, r3, #16
   23dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23dc2:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   23dc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23dc8:	051b      	lsls	r3, r3, #20
   23dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   23dce:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23dd0:	4314      	orrs	r4, r2
   23dd2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   23dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
   23dda:	4770      	bx	lr

00023ddc <nrf_gpio_cfg_sense_set>:
{
   23ddc:	b500      	push	{lr}
   23dde:	b085      	sub	sp, #20
   23de0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   23de4:	f10d 030f 	add.w	r3, sp, #15
   23de8:	9301      	str	r3, [sp, #4]
   23dea:	2100      	movs	r1, #0
   23dec:	9100      	str	r1, [sp, #0]
   23dee:	460b      	mov	r3, r1
   23df0:	460a      	mov	r2, r1
   23df2:	f7f3 fa6d 	bl	172d0 <nrf_gpio_reconfigure>
}
   23df6:	b005      	add	sp, #20
   23df8:	f85d fb04 	ldr.w	pc, [sp], #4

00023dfc <pin_is_task_output>:
{
   23dfc:	b510      	push	{r4, lr}
   23dfe:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23e00:	f7f3 fb04 	bl	1740c <pin_is_output>
   23e04:	b128      	cbz	r0, 23e12 <pin_is_task_output+0x16>
   23e06:	4620      	mov	r0, r4
   23e08:	f7f3 faea 	bl	173e0 <pin_in_use_by_te>
   23e0c:	b118      	cbz	r0, 23e16 <pin_is_task_output+0x1a>
   23e0e:	2001      	movs	r0, #1
   23e10:	e000      	b.n	23e14 <pin_is_task_output+0x18>
   23e12:	2000      	movs	r0, #0
}
   23e14:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23e16:	2000      	movs	r0, #0
   23e18:	e7fc      	b.n	23e14 <pin_is_task_output+0x18>

00023e1a <pin_is_input>:
{
   23e1a:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   23e1c:	f7f3 faf6 	bl	1740c <pin_is_output>
   23e20:	f080 0001 	eor.w	r0, r0, #1
}
   23e24:	b2c0      	uxtb	r0, r0
   23e26:	bd08      	pop	{r3, pc}

00023e28 <gpiote_polarity_to_trigger>:
}
   23e28:	4770      	bx	lr

00023e2a <gpiote_trigger_to_polarity>:
}
   23e2a:	4770      	bx	lr

00023e2c <is_level>:
}
   23e2c:	2803      	cmp	r0, #3
   23e2e:	bf94      	ite	ls
   23e30:	2000      	movls	r0, #0
   23e32:	2001      	movhi	r0, #1
   23e34:	4770      	bx	lr

00023e36 <latch_pending_read_and_check>:
{
   23e36:	b510      	push	{r4, lr}
   23e38:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   23e3a:	4602      	mov	r2, r0
   23e3c:	2102      	movs	r1, #2
   23e3e:	2000      	movs	r0, #0
   23e40:	f7f3 faa2 	bl	17388 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   23e44:	2300      	movs	r3, #0
   23e46:	2b01      	cmp	r3, #1
   23e48:	d804      	bhi.n	23e54 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   23e4a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   23e4e:	b91a      	cbnz	r2, 23e58 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   23e50:	3301      	adds	r3, #1
   23e52:	e7f8      	b.n	23e46 <latch_pending_read_and_check+0x10>
    return false;
   23e54:	2000      	movs	r0, #0
}
   23e56:	bd10      	pop	{r4, pc}
            return true;
   23e58:	2001      	movs	r0, #1
   23e5a:	e7fc      	b.n	23e56 <latch_pending_read_and_check+0x20>

00023e5c <flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   23e5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23e60:	6918      	ldr	r0, [r3, #16]
}
   23e62:	4770      	bx	lr

00023e64 <flash_page_count_get>:
    return p_reg->CODESIZE;
   23e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23e68:	6958      	ldr	r0, [r3, #20]
}
   23e6a:	4770      	bx	lr

00023e6c <flash_total_size_get>:
{
   23e6c:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   23e6e:	f7ff fff5 	bl	23e5c <flash_page_size_get>
   23e72:	4604      	mov	r4, r0
   23e74:	f7ff fff6 	bl	23e64 <flash_page_count_get>
}
   23e78:	fb04 f000 	mul.w	r0, r4, r0
   23e7c:	bd10      	pop	{r4, pc}

00023e7e <is_page_aligned_check>:
{
   23e7e:	b510      	push	{r4, lr}
   23e80:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   23e82:	f7ff ffeb 	bl	23e5c <flash_page_size_get>
   23e86:	fbb4 f3f0 	udiv	r3, r4, r0
   23e8a:	fb00 4013 	mls	r0, r0, r3, r4
}
   23e8e:	fab0 f080 	clz	r0, r0
   23e92:	0940      	lsrs	r0, r0, #5
   23e94:	bd10      	pop	{r4, pc}

00023e96 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   23e96:	b538      	push	{r3, r4, r5, lr}
   23e98:	4604      	mov	r4, r0
   23e9a:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   23e9c:	f7f3 fe80 	bl	17ba0 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   23ea0:	4629      	mov	r1, r5
   23ea2:	4620      	mov	r0, r4
   23ea4:	f7f3 fe8c 	bl	17bc0 <nvmc_word_write>

    nvmc_readonly_mode_set();
   23ea8:	f7f3 fe72 	bl	17b90 <nvmc_readonly_mode_set>
}
   23eac:	bd38      	pop	{r3, r4, r5, pc}

00023eae <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   23eae:	b508      	push	{r3, lr}
    return flash_total_size_get();
   23eb0:	f7ff ffdc 	bl	23e6c <flash_total_size_get>
}
   23eb4:	bd08      	pop	{r3, pc}

00023eb6 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   23eb6:	b508      	push	{r3, lr}
    return flash_page_size_get();
   23eb8:	f7ff ffd0 	bl	23e5c <flash_page_size_get>
}
   23ebc:	bd08      	pop	{r3, pc}

00023ebe <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   23ebe:	b508      	push	{r3, lr}
    return flash_page_count_get();
   23ec0:	f7ff ffd0 	bl	23e64 <flash_page_count_get>
}
   23ec4:	bd08      	pop	{r3, pc}

00023ec6 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23ec6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23eca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23ece:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   23ed2:	2a08      	cmp	r2, #8
   23ed4:	d001      	beq.n	23eda <nrf52_errata_197+0x14>
        return false;
   23ed6:	2000      	movs	r0, #0
   23ed8:	4770      	bx	lr
                switch(var2)
   23eda:	2b02      	cmp	r3, #2
   23edc:	d001      	beq.n	23ee2 <nrf52_errata_197+0x1c>
                        return false;
   23ede:	2000      	movs	r0, #0
   23ee0:	4770      	bx	lr
                        return true;
   23ee2:	2001      	movs	r0, #1
}
   23ee4:	4770      	bx	lr

00023ee6 <nrf_power_dcdcen_vddh_set>:
{
   23ee6:	b510      	push	{r4, lr}
   23ee8:	4604      	mov	r4, r0
    if (enable && nrf52_errata_197())
   23eea:	b141      	cbz	r1, 23efe <nrf_power_dcdcen_vddh_set+0x18>
   23eec:	f7ff ffeb 	bl	23ec6 <nrf52_errata_197>
   23ef0:	b148      	cbz	r0, 23f06 <nrf_power_dcdcen_vddh_set+0x20>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   23ef2:	2301      	movs	r3, #1
   23ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   23ef8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
   23efc:	e000      	b.n	23f00 <nrf_power_dcdcen_vddh_set+0x1a>
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   23efe:	2300      	movs	r3, #0
   23f00:	f8c4 3580 	str.w	r3, [r4, #1408]	; 0x580
}
   23f04:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   23f06:	2301      	movs	r3, #1
   23f08:	e7fa      	b.n	23f00 <nrf_power_dcdcen_vddh_set+0x1a>

00023f0a <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   23f0a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   23f0c:	2000      	movs	r0, #0
   23f0e:	f7ef f801 	bl	12f14 <arch_irq_is_enabled>
   23f12:	b100      	cbz	r0, 23f16 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   23f14:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   23f16:	f7fd fe5a 	bl	21bce <arch_irq_enable>
}
   23f1a:	e7fb      	b.n	23f14 <nrfx_power_clock_irq_init+0xa>

00023f1c <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   23f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23f20:	f44f 7260 	mov.w	r2, #896	; 0x380
   23f24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23f28:	4770      	bx	lr

00023f2a <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   23f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23f2e:	f44f 7260 	mov.w	r2, #896	; 0x380
   23f32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23f36:	4770      	bx	lr

00023f38 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   23f38:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   23f3a:	f7f3 fea5 	bl	17c88 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
   23f3e:	f7ff fe70 	bl	23c22 <nrfx_clock_irq_handler>
}
   23f42:	bd08      	pop	{r3, pc}

00023f44 <nrf_usbd_ep_disable>:
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   23f44:	f001 0c0f 	and.w	ip, r1, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   23f48:	f011 0f80 	tst.w	r1, #128	; 0x80
   23f4c:	d109      	bne.n	23f62 <nrf_usbd_ep_disable+0x1e>
        p_reg->EPOUTEN &= ~(1UL << epnr);
   23f4e:	f8d0 3514 	ldr.w	r3, [r0, #1300]	; 0x514
   23f52:	2201      	movs	r2, #1
   23f54:	fa02 f20c 	lsl.w	r2, r2, ip
   23f58:	ea23 0302 	bic.w	r3, r3, r2
   23f5c:	f8c0 3514 	str.w	r3, [r0, #1300]	; 0x514
}
   23f60:	4770      	bx	lr
        p_reg->EPINEN &= ~(1UL << epnr);
   23f62:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   23f66:	2201      	movs	r2, #1
   23f68:	fa02 f20c 	lsl.w	r2, r2, ip
   23f6c:	ea23 0302 	bic.w	r3, r3, r2
   23f70:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
   23f74:	4770      	bx	lr

00023f76 <nrf_usbd_ep_easydma_set>:
    if (NRF_USBD_EPIN_CHECK(ep))
   23f76:	f011 0f80 	tst.w	r1, #128	; 0x80
   23f7a:	d107      	bne.n	23f8c <nrf_usbd_ep_easydma_set+0x16>
        if (NRF_USBD_EPISO_CHECK(ep))
   23f7c:	f011 0f08 	tst.w	r1, #8
   23f80:	d017      	beq.n	23fb2 <nrf_usbd_ep_easydma_set+0x3c>
            p_reg->ISOOUT.PTR    = ptr;
   23f82:	f8c0 27a0 	str.w	r2, [r0, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   23f86:	f8c0 37a4 	str.w	r3, [r0, #1956]	; 0x7a4
   23f8a:	4770      	bx	lr
        if (NRF_USBD_EPISO_CHECK(ep))
   23f8c:	f011 0f08 	tst.w	r1, #8
   23f90:	d004      	beq.n	23f9c <nrf_usbd_ep_easydma_set+0x26>
            p_reg->ISOIN.PTR    = ptr;
   23f92:	f8c0 26a0 	str.w	r2, [r0, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   23f96:	f8c0 36a4 	str.w	r3, [r0, #1700]	; 0x6a4
   23f9a:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   23f9c:	f001 010f 	and.w	r1, r1, #15
            p_reg->EPIN[epnr].PTR    = ptr;
   23fa0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
   23fa4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   23fa8:	f8cc 2600 	str.w	r2, [ip, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   23fac:	f8cc 3604 	str.w	r3, [ip, #1540]	; 0x604
   23fb0:	4770      	bx	lr
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   23fb2:	f001 010f 	and.w	r1, r1, #15
            p_reg->EPOUT[epnr].PTR    = ptr;
   23fb6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
   23fba:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   23fbe:	f8cc 2700 	str.w	r2, [ip, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   23fc2:	f8cc 3704 	str.w	r3, [ip, #1796]	; 0x704
}
   23fc6:	4770      	bx	lr

00023fc8 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23fcc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   23fd0:	2b08      	cmp	r3, #8
   23fd2:	d001      	beq.n	23fd8 <nrf52_errata_166+0x10>
        return false;
   23fd4:	2000      	movs	r0, #0
   23fd6:	4770      	bx	lr
                        return true;
   23fd8:	2001      	movs	r0, #1
}
   23fda:	4770      	bx	lr

00023fdc <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23fdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23fe0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   23fe4:	2b08      	cmp	r3, #8
   23fe6:	d001      	beq.n	23fec <nrf52_errata_171+0x10>
        return false;
   23fe8:	2000      	movs	r0, #0
   23fea:	4770      	bx	lr
                        return true;
   23fec:	2001      	movs	r0, #1
}
   23fee:	4770      	bx	lr

00023ff0 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23ff0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23ff4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23ff8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   23ffc:	2a08      	cmp	r2, #8
   23ffe:	d001      	beq.n	24004 <nrf52_errata_187+0x14>
        return false;
   24000:	2000      	movs	r0, #0
   24002:	4770      	bx	lr
                switch(var2)
   24004:	2b00      	cmp	r3, #0
   24006:	d804      	bhi.n	24012 <nrf52_errata_187+0x22>
   24008:	e8df f003 	tbb	[pc, r3]
   2400c:	01          	.byte	0x01
   2400d:	00          	.byte	0x00
   2400e:	2000      	movs	r0, #0
   24010:	4770      	bx	lr
                        return true;
   24012:	2001      	movs	r0, #1
}
   24014:	4770      	bx	lr

00024016 <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   24016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2401a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   2401e:	2b08      	cmp	r3, #8
   24020:	d001      	beq.n	24026 <nrf52_errata_199+0x10>
        return false;
   24022:	2000      	movs	r0, #0
   24024:	4770      	bx	lr
                        return true;
   24026:	2001      	movs	r0, #1
}
   24028:	4770      	bx	lr

0002402a <nrf52_errata_223>:
}
   2402a:	2000      	movs	r0, #0
   2402c:	4770      	bx	lr

0002402e <nrfx_usbd_consumer>:
{
   2402e:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
   24030:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   24032:	429c      	cmp	r4, r3
   24034:	d208      	bcs.n	24048 <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
   24036:	2500      	movs	r5, #0
   24038:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2403a:	6809      	ldr	r1, [r1, #0]
   2403c:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   2403e:	429a      	cmp	r2, r3
   24040:	d00b      	beq.n	2405a <nrfx_usbd_consumer+0x2c>
   24042:	2000      	movs	r0, #0
}
   24044:	bc30      	pop	{r4, r5}
   24046:	4770      	bx	lr
        p_next->size = data_size;
   24048:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2404a:	680d      	ldr	r5, [r1, #0]
   2404c:	6005      	str	r5, [r0, #0]
        size -= data_size;
   2404e:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
   24050:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   24052:	6808      	ldr	r0, [r1, #0]
   24054:	4418      	add	r0, r3
   24056:	6008      	str	r0, [r1, #0]
   24058:	e7f1      	b.n	2403e <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   2405a:	b90c      	cbnz	r4, 24060 <nrfx_usbd_consumer+0x32>
   2405c:	2000      	movs	r0, #0
   2405e:	e7f1      	b.n	24044 <nrfx_usbd_consumer+0x16>
   24060:	2001      	movs	r0, #1
   24062:	e7ef      	b.n	24044 <nrfx_usbd_consumer+0x16>

00024064 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   24064:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   24066:	4293      	cmp	r3, r2
   24068:	d800      	bhi.n	2406c <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
   2406a:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
   2406c:	680b      	ldr	r3, [r1, #0]
   2406e:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   24070:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   24072:	6848      	ldr	r0, [r1, #4]
   24074:	1a80      	subs	r0, r0, r2
   24076:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   24078:	680b      	ldr	r3, [r1, #0]
   2407a:	4413      	add	r3, r2
   2407c:	600b      	str	r3, [r1, #0]
}
   2407e:	3800      	subs	r0, #0
   24080:	bf18      	it	ne
   24082:	2001      	movne	r0, #1
   24084:	4770      	bx	lr

00024086 <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
   24086:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   24088:	4293      	cmp	r3, r2
   2408a:	d800      	bhi.n	2408e <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
   2408c:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2408e:	b162      	cbz	r2, 240aa <nrfx_usbd_feeder_ram_zlp+0x24>
   24090:	680b      	ldr	r3, [r1, #0]
   24092:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   24094:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   24096:	684b      	ldr	r3, [r1, #4]
   24098:	1a9b      	subs	r3, r3, r2
   2409a:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2409c:	680b      	ldr	r3, [r1, #0]
   2409e:	4413      	add	r3, r2
   240a0:	600b      	str	r3, [r1, #0]
}
   240a2:	1e10      	subs	r0, r2, #0
   240a4:	bf18      	it	ne
   240a6:	2001      	movne	r0, #1
   240a8:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   240aa:	2300      	movs	r3, #0
   240ac:	e7f1      	b.n	24092 <nrfx_usbd_feeder_ram_zlp+0xc>

000240ae <ev_started_handler>:
}
   240ae:	4770      	bx	lr

000240b0 <usbd_dma_scheduler_algorithm>:
}
   240b0:	fa90 f0a0 	rbit	r0, r0
   240b4:	fab0 f080 	clz	r0, r0
   240b8:	4770      	bx	lr

000240ba <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   240ba:	b508      	push	{r3, lr}
   240bc:	2087      	movs	r0, #135	; 0x87
   240be:	f7f3 ffbf 	bl	18040 <nrf_usbd_epin_dma_handler>
   240c2:	bd08      	pop	{r3, pc}

000240c4 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   240c4:	b508      	push	{r3, lr}
   240c6:	2086      	movs	r0, #134	; 0x86
   240c8:	f7f3 ffba 	bl	18040 <nrf_usbd_epin_dma_handler>
   240cc:	bd08      	pop	{r3, pc}

000240ce <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   240ce:	b508      	push	{r3, lr}
   240d0:	2085      	movs	r0, #133	; 0x85
   240d2:	f7f3 ffb5 	bl	18040 <nrf_usbd_epin_dma_handler>
   240d6:	bd08      	pop	{r3, pc}

000240d8 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   240d8:	b508      	push	{r3, lr}
   240da:	2084      	movs	r0, #132	; 0x84
   240dc:	f7f3 ffb0 	bl	18040 <nrf_usbd_epin_dma_handler>
   240e0:	bd08      	pop	{r3, pc}

000240e2 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   240e2:	b508      	push	{r3, lr}
   240e4:	2083      	movs	r0, #131	; 0x83
   240e6:	f7f3 ffab 	bl	18040 <nrf_usbd_epin_dma_handler>
   240ea:	bd08      	pop	{r3, pc}

000240ec <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   240ec:	b508      	push	{r3, lr}
   240ee:	2082      	movs	r0, #130	; 0x82
   240f0:	f7f3 ffa6 	bl	18040 <nrf_usbd_epin_dma_handler>
   240f4:	bd08      	pop	{r3, pc}

000240f6 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   240f6:	b508      	push	{r3, lr}
   240f8:	2081      	movs	r0, #129	; 0x81
   240fa:	f7f3 ffa1 	bl	18040 <nrf_usbd_epin_dma_handler>
   240fe:	bd08      	pop	{r3, pc}

00024100 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   24100:	b508      	push	{r3, lr}
   24102:	f7f3 ffe3 	bl	180cc <nrf_usbd_ep0in_dma_handler>
   24106:	bd08      	pop	{r3, pc}

00024108 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   24108:	b508      	push	{r3, lr}
   2410a:	2008      	movs	r0, #8
   2410c:	f7f4 f86a 	bl	181e4 <nrf_usbd_epoutiso_dma_handler>
   24110:	bd08      	pop	{r3, pc}

00024112 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   24112:	b508      	push	{r3, lr}
   24114:	2088      	movs	r0, #136	; 0x88
   24116:	f7f4 f8a5 	bl	18264 <nrf_usbd_epiniso_dma_handler>
   2411a:	bd08      	pop	{r3, pc}

0002411c <nrfx_usbd_feeder_flash>:
{
   2411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24120:	4606      	mov	r6, r0
   24122:	460c      	mov	r4, r1
   24124:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
   24126:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   2412a:	f7f4 faa7 	bl	1867c <nrfx_usbd_feeder_buffer_get>
   2412e:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   24130:	45a8      	cmp	r8, r5
   24132:	d800      	bhi.n	24136 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
   24134:	4645      	mov	r5, r8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24136:	462a      	mov	r2, r5
   24138:	6821      	ldr	r1, [r4, #0]
   2413a:	4638      	mov	r0, r7
   2413c:	f000 fe65 	bl	24e0a <memcpy>
    p_next->p_data.tx = p_buffer;
   24140:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   24142:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
   24144:	6860      	ldr	r0, [r4, #4]
   24146:	1b40      	subs	r0, r0, r5
   24148:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2414a:	6823      	ldr	r3, [r4, #0]
   2414c:	442b      	add	r3, r5
   2414e:	6023      	str	r3, [r4, #0]
}
   24150:	3800      	subs	r0, #0
   24152:	bf18      	it	ne
   24154:	2001      	movne	r0, #1
   24156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002415a <nrfx_usbd_feeder_flash_zlp>:
{
   2415a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2415e:	4606      	mov	r6, r0
   24160:	460d      	mov	r5, r1
   24162:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
   24164:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   24168:	f7f4 fa88 	bl	1867c <nrfx_usbd_feeder_buffer_get>
   2416c:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   2416e:	45a0      	cmp	r8, r4
   24170:	d800      	bhi.n	24174 <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
   24172:	4644      	mov	r4, r8
    if (tx_size != 0)
   24174:	b18c      	cbz	r4, 2419a <nrfx_usbd_feeder_flash_zlp+0x40>
   24176:	4622      	mov	r2, r4
   24178:	6829      	ldr	r1, [r5, #0]
   2417a:	4638      	mov	r0, r7
   2417c:	f000 fe45 	bl	24e0a <memcpy>
        p_next->p_data.tx = p_buffer;
   24180:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   24182:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   24184:	686b      	ldr	r3, [r5, #4]
   24186:	1b1b      	subs	r3, r3, r4
   24188:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   2418a:	682b      	ldr	r3, [r5, #0]
   2418c:	4423      	add	r3, r4
   2418e:	602b      	str	r3, [r5, #0]
}
   24190:	1e20      	subs	r0, r4, #0
   24192:	bf18      	it	ne
   24194:	2001      	movne	r0, #1
   24196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        p_next->p_data.tx = NULL;
   2419a:	2300      	movs	r3, #0
   2419c:	6033      	str	r3, [r6, #0]
   2419e:	e7f0      	b.n	24182 <nrfx_usbd_feeder_flash_zlp+0x28>

000241a0 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   241a0:	b508      	push	{r3, lr}
   241a2:	2007      	movs	r0, #7
   241a4:	f7f4 fb8e 	bl	188c4 <nrf_usbd_epout_dma_handler>
   241a8:	bd08      	pop	{r3, pc}

000241aa <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   241aa:	b508      	push	{r3, lr}
   241ac:	2006      	movs	r0, #6
   241ae:	f7f4 fb89 	bl	188c4 <nrf_usbd_epout_dma_handler>
   241b2:	bd08      	pop	{r3, pc}

000241b4 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   241b4:	b508      	push	{r3, lr}
   241b6:	2005      	movs	r0, #5
   241b8:	f7f4 fb84 	bl	188c4 <nrf_usbd_epout_dma_handler>
   241bc:	bd08      	pop	{r3, pc}

000241be <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   241be:	b508      	push	{r3, lr}
   241c0:	2004      	movs	r0, #4
   241c2:	f7f4 fb7f 	bl	188c4 <nrf_usbd_epout_dma_handler>
   241c6:	bd08      	pop	{r3, pc}

000241c8 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   241c8:	b508      	push	{r3, lr}
   241ca:	2003      	movs	r0, #3
   241cc:	f7f4 fb7a 	bl	188c4 <nrf_usbd_epout_dma_handler>
   241d0:	bd08      	pop	{r3, pc}

000241d2 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   241d2:	b508      	push	{r3, lr}
   241d4:	2002      	movs	r0, #2
   241d6:	f7f4 fb75 	bl	188c4 <nrf_usbd_epout_dma_handler>
   241da:	bd08      	pop	{r3, pc}

000241dc <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   241dc:	b508      	push	{r3, lr}
   241de:	2001      	movs	r0, #1
   241e0:	f7f4 fb70 	bl	188c4 <nrf_usbd_epout_dma_handler>
   241e4:	bd08      	pop	{r3, pc}

000241e6 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   241e6:	b508      	push	{r3, lr}
   241e8:	f7f4 fc28 	bl	18a3c <nrf_usbd_ep0out_dma_handler>
   241ec:	bd08      	pop	{r3, pc}

000241ee <nrfx_usbd_ep_abort>:
{
   241ee:	b508      	push	{r3, lr}
    usbd_ep_abort(ep);
   241f0:	f7f4 fcaa 	bl	18b48 <usbd_ep_abort>
}
   241f4:	bd08      	pop	{r3, pc}

000241f6 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   241f6:	b508      	push	{r3, lr}
  _DoInit();
   241f8:	f7f4 feaa 	bl	18f50 <_DoInit>
}
   241fc:	bd08      	pop	{r3, pc}

000241fe <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   241fe:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   24200:	f7ff fff9 	bl	241f6 <SEGGER_RTT_Init>

	return 0;
}
   24204:	2000      	movs	r0, #0
   24206:	bd08      	pop	{r3, pc}

00024208 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   24208:	b160      	cbz	r0, 24224 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2420a:	68c3      	ldr	r3, [r0, #12]
   2420c:	785a      	ldrb	r2, [r3, #1]
   2420e:	f012 0f01 	tst.w	r2, #1
   24212:	d003      	beq.n	2421c <z_device_is_ready+0x14>
   24214:	781b      	ldrb	r3, [r3, #0]
   24216:	b11b      	cbz	r3, 24220 <z_device_is_ready+0x18>
   24218:	2000      	movs	r0, #0
   2421a:	4770      	bx	lr
   2421c:	2000      	movs	r0, #0
   2421e:	4770      	bx	lr
   24220:	2001      	movs	r0, #1
   24222:	4770      	bx	lr
		return false;
   24224:	2000      	movs	r0, #0
}
   24226:	4770      	bx	lr

00024228 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2422a:	4605      	mov	r5, r0
   2422c:	460e      	mov	r6, r1
	__asm__ volatile(
   2422e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24232:	f3ef 8711 	mrs	r7, BASEPRI
   24236:	f383 8812 	msr	BASEPRI_MAX, r3
   2423a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2423e:	f7f5 ff67 	bl	1a110 <z_impl_z_current_get>
   24242:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   24244:	4631      	mov	r1, r6
   24246:	4628      	mov	r0, r5
   24248:	f7ff f91e 	bl	23488 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2424c:	f387 8811 	msr	BASEPRI, r7
   24250:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   24254:	4620      	mov	r0, r4
   24256:	f7ef fa45 	bl	136e4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002425c <z_early_memset>:
{
   2425c:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   2425e:	f000 fdf5 	bl	24e4c <memset>
}
   24262:	bd08      	pop	{r3, pc}

00024264 <z_early_memcpy>:
{
   24264:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24266:	f000 fdd0 	bl	24e0a <memcpy>
}
   2426a:	bd08      	pop	{r3, pc}

0002426c <k_heap_init>:
{
   2426c:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   2426e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   24272:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   24274:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   24276:	f7fb ff16 	bl	200a6 <sys_heap_init>
}
   2427a:	bd10      	pop	{r4, pc}

0002427c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24280:	b085      	sub	sp, #20
   24282:	4607      	mov	r7, r0
   24284:	9103      	str	r1, [sp, #12]
   24286:	4692      	mov	sl, r2
   24288:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2428a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2428c:	4628      	mov	r0, r5
   2428e:	4621      	mov	r1, r4
   24290:	f000 fcd4 	bl	24c3c <sys_clock_timeout_end_calc>
   24294:	4606      	mov	r6, r0
   24296:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24298:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2429c:	bf08      	it	eq
   2429e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   242a2:	d00d      	beq.n	242c0 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   242a4:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   242a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   242ac:	f3ef 8511 	mrs	r5, BASEPRI
   242b0:	f383 8812 	msr	BASEPRI_MAX, r3
   242b4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   242b8:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   242bc:	4644      	mov	r4, r8

	while (ret == NULL) {
   242be:	e014      	b.n	242ea <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   242c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   242c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   242c8:	e7ec      	b.n	242a4 <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   242ca:	9000      	str	r0, [sp, #0]
   242cc:	9101      	str	r1, [sp, #4]
   242ce:	f107 020c 	add.w	r2, r7, #12
   242d2:	4629      	mov	r1, r5
   242d4:	4658      	mov	r0, fp
   242d6:	f7f5 fd67 	bl	19da8 <z_pend_curr>
   242da:	f04f 0340 	mov.w	r3, #64	; 0x40
   242de:	f3ef 8511 	mrs	r5, BASEPRI
   242e2:	f383 8812 	msr	BASEPRI_MAX, r3
   242e6:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   242ea:	b9ac      	cbnz	r4, 24318 <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   242ec:	4652      	mov	r2, sl
   242ee:	9903      	ldr	r1, [sp, #12]
   242f0:	4638      	mov	r0, r7
   242f2:	f7fb fe62 	bl	1ffba <sys_heap_aligned_alloc>
   242f6:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   242f8:	f7f6 f87a 	bl	1a3f0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   242fc:	b964      	cbnz	r4, 24318 <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
   242fe:	1a30      	subs	r0, r6, r0
   24300:	eb69 0101 	sbc.w	r1, r9, r1
   24304:	2801      	cmp	r0, #1
   24306:	f171 0300 	sbcs.w	r3, r1, #0
   2430a:	db05      	blt.n	24318 <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
   2430c:	f1b8 0f00 	cmp.w	r8, #0
   24310:	d1db      	bne.n	242ca <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
   24312:	f04f 0801 	mov.w	r8, #1
   24316:	e7d8      	b.n	242ca <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
   24318:	f385 8811 	msr	BASEPRI, r5
   2431c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24320:	4620      	mov	r0, r4
   24322:	b005      	add	sp, #20
   24324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024328 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2432a:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2432c:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   24330:	f04f 0340 	mov.w	r3, #64	; 0x40
   24334:	f3ef 8511 	mrs	r5, BASEPRI
   24338:	f383 8812 	msr	BASEPRI_MAX, r3
   2433c:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   24340:	f7fb fdf7 	bl	1ff32 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24344:	f104 000c 	add.w	r0, r4, #12
   24348:	f000 fba9 	bl	24a9e <z_unpend_all>
   2434c:	b920      	cbnz	r0, 24358 <k_heap_free+0x30>
	__asm__ volatile(
   2434e:	f385 8811 	msr	BASEPRI, r5
   24352:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
   24358:	4629      	mov	r1, r5
   2435a:	4638      	mov	r0, r7
   2435c:	f7f5 fbd6 	bl	19b0c <z_reschedule>
   24360:	e7f9      	b.n	24356 <k_heap_free+0x2e>

00024362 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24362:	68c2      	ldr	r2, [r0, #12]
   24364:	6903      	ldr	r3, [r0, #16]
   24366:	431a      	orrs	r2, r3
   24368:	f012 0203 	ands.w	r2, r2, #3
   2436c:	d10d      	bne.n	2438a <create_free_list+0x28>
	slab->free_list = NULL;
   2436e:	2100      	movs	r1, #0
   24370:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   24372:	e005      	b.n	24380 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   24374:	6941      	ldr	r1, [r0, #20]
   24376:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   24378:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   2437a:	68c1      	ldr	r1, [r0, #12]
   2437c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2437e:	3201      	adds	r2, #1
   24380:	6881      	ldr	r1, [r0, #8]
   24382:	4291      	cmp	r1, r2
   24384:	d8f6      	bhi.n	24374 <create_free_list+0x12>
	return 0;
   24386:	2000      	movs	r0, #0
   24388:	4770      	bx	lr
		return -EINVAL;
   2438a:	f06f 0015 	mvn.w	r0, #21
}
   2438e:	4770      	bx	lr

00024390 <k_mem_slab_init>:
{
   24390:	b510      	push	{r4, lr}
   24392:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   24394:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   24396:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   24398:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   2439a:	2300      	movs	r3, #0
   2439c:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   2439e:	f7ff ffe0 	bl	24362 <create_free_list>
	if (rc < 0) {
   243a2:	2800      	cmp	r0, #0
   243a4:	db01      	blt.n	243aa <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   243a6:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   243a8:	6064      	str	r4, [r4, #4]
}
   243aa:	bd10      	pop	{r4, pc}

000243ac <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   243ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243b0:	4604      	mov	r4, r0
   243b2:	460d      	mov	r5, r1
	__asm__ volatile(
   243b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   243b8:	f3ef 8611 	mrs	r6, BASEPRI
   243bc:	f383 8812 	msr	BASEPRI_MAX, r3
   243c0:	f3bf 8f6f 	isb	sy
   243c4:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   243c6:	6943      	ldr	r3, [r0, #20]
   243c8:	b16b      	cbz	r3, 243e6 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   243ca:	682b      	ldr	r3, [r5, #0]
   243cc:	6962      	ldr	r2, [r4, #20]
   243ce:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   243d0:	682b      	ldr	r3, [r5, #0]
   243d2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   243d4:	69a3      	ldr	r3, [r4, #24]
   243d6:	3b01      	subs	r3, #1
   243d8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   243da:	f387 8811 	msr	BASEPRI, r7
   243de:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   243e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   243e6:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   243ea:	f000 fb36 	bl	24a5a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   243ee:	2800      	cmp	r0, #0
   243f0:	d0eb      	beq.n	243ca <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   243f2:	682a      	ldr	r2, [r5, #0]
   243f4:	2100      	movs	r1, #0
   243f6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   243fa:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   243fc:	f000 fa77 	bl	248ee <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24400:	4631      	mov	r1, r6
   24402:	4640      	mov	r0, r8
   24404:	f7f5 fb82 	bl	19b0c <z_reschedule>
			return;
   24408:	e7eb      	b.n	243e2 <k_mem_slab_free+0x36>

0002440a <setup_thread_stack>:
{
   2440a:	b410      	push	{r4}
   2440c:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2440e:	3207      	adds	r2, #7
   24410:	f022 0207 	bic.w	r2, r2, #7
   24414:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   24418:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   2441c:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   24420:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   24424:	2200      	movs	r2, #0
   24426:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
   2442a:	4408      	add	r0, r1
   2442c:	f85d 4b04 	ldr.w	r4, [sp], #4
   24430:	4770      	bx	lr

00024432 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24432:	f3ef 8005 	mrs	r0, IPSR
}
   24436:	3800      	subs	r0, #0
   24438:	bf18      	it	ne
   2443a:	2001      	movne	r0, #1
   2443c:	4770      	bx	lr

0002443e <z_impl_k_thread_start>:
{
   2443e:	b508      	push	{r3, lr}
	z_sched_start(thread);
   24440:	f7f5 fc78 	bl	19d34 <z_sched_start>
}
   24444:	bd08      	pop	{r3, pc}

00024446 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   24446:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   24448:	2400      	movs	r4, #0
   2444a:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2444c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2444e:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   24450:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   24452:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   24454:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   24456:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   24458:	f85d 4b04 	ldr.w	r4, [sp], #4
   2445c:	4770      	bx	lr

0002445e <z_impl_k_thread_create>:
{
   2445e:	b5f0      	push	{r4, r5, r6, r7, lr}
   24460:	b087      	sub	sp, #28
   24462:	4604      	mov	r4, r0
   24464:	9e12      	ldr	r6, [sp, #72]	; 0x48
   24466:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24468:	2700      	movs	r7, #0
   2446a:	9705      	str	r7, [sp, #20]
   2446c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2446e:	9704      	str	r7, [sp, #16]
   24470:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   24472:	9703      	str	r7, [sp, #12]
   24474:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   24476:	9702      	str	r7, [sp, #8]
   24478:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2447a:	9701      	str	r7, [sp, #4]
   2447c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2447e:	9700      	str	r7, [sp, #0]
   24480:	f7f4 ffa0 	bl	193c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24484:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   24488:	bf08      	it	eq
   2448a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   2448e:	d102      	bne.n	24496 <z_impl_k_thread_create+0x38>
}
   24490:	4620      	mov	r0, r4
   24492:	b007      	add	sp, #28
   24494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   24496:	4632      	mov	r2, r6
   24498:	462b      	mov	r3, r5
   2449a:	4620      	mov	r0, r4
   2449c:	f7f4 ff84 	bl	193a8 <schedule_new_thread>
   244a0:	e7f6      	b.n	24490 <z_impl_k_thread_create+0x32>

000244a2 <z_pm_save_idle_exit>:
{
   244a2:	b508      	push	{r3, lr}
	pm_system_resume();
   244a4:	f7ed f96a 	bl	1177c <pm_system_resume>
	sys_clock_idle_exit();
   244a8:	f7fe ffa9 	bl	233fe <sys_clock_idle_exit>
}
   244ac:	bd08      	pop	{r3, pc}

000244ae <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   244ae:	4288      	cmp	r0, r1
   244b0:	da00      	bge.n	244b4 <new_prio_for_inheritance+0x6>
   244b2:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   244b4:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   244b8:	db01      	blt.n	244be <new_prio_for_inheritance+0x10>
   244ba:	4608      	mov	r0, r1
   244bc:	4770      	bx	lr
   244be:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   244c2:	4770      	bx	lr

000244c4 <adjust_owner_prio>:
{
   244c4:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   244c6:	6880      	ldr	r0, [r0, #8]
   244c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   244cc:	428b      	cmp	r3, r1
   244ce:	d101      	bne.n	244d4 <adjust_owner_prio+0x10>
	return false;
   244d0:	2000      	movs	r0, #0
}
   244d2:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   244d4:	f7f5 fc84 	bl	19de0 <z_set_prio>
   244d8:	e7fb      	b.n	244d2 <adjust_owner_prio+0xe>

000244da <z_impl_k_mutex_init>:
{
   244da:	4603      	mov	r3, r0
	mutex->owner = NULL;
   244dc:	2000      	movs	r0, #0
   244de:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   244e0:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   244e2:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   244e4:	605b      	str	r3, [r3, #4]
}
   244e6:	4770      	bx	lr

000244e8 <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   244e8:	680b      	ldr	r3, [r1, #0]
   244ea:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   244ee:	600b      	str	r3, [r1, #0]
	return list->tail;
   244f0:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   244f2:	b132      	cbz	r2, 24502 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   244f4:	6813      	ldr	r3, [r2, #0]
   244f6:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   244fa:	430b      	orrs	r3, r1
   244fc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   244fe:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   24500:	4770      	bx	lr
	list->tail = node;
   24502:	6041      	str	r1, [r0, #4]
	list->head = node;
   24504:	6001      	str	r1, [r0, #0]
}
   24506:	4770      	bx	lr

00024508 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   24508:	b508      	push	{r3, lr}
   2450a:	b191      	cbz	r1, 24532 <sys_sflist_insert+0x2a>
   2450c:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2450e:	680b      	ldr	r3, [r1, #0]
   24510:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   24514:	2b03      	cmp	r3, #3
   24516:	d918      	bls.n	2454a <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24518:	6813      	ldr	r3, [r2, #0]
   2451a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2451e:	430b      	orrs	r3, r1
   24520:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24522:	f8dc 3000 	ldr.w	r3, [ip]
   24526:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2452a:	4313      	orrs	r3, r2
   2452c:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   24530:	bd08      	pop	{r3, pc}
	return list->head;
   24532:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24534:	6813      	ldr	r3, [r2, #0]
   24536:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2453a:	430b      	orrs	r3, r1
   2453c:	6013      	str	r3, [r2, #0]
	list->head = node;
   2453e:	6002      	str	r2, [r0, #0]
	return list->tail;
   24540:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   24542:	2b00      	cmp	r3, #0
   24544:	d1f4      	bne.n	24530 <sys_sflist_insert+0x28>
	list->tail = node;
   24546:	6042      	str	r2, [r0, #4]
}
   24548:	e7f2      	b.n	24530 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   2454a:	4611      	mov	r1, r2
   2454c:	f7ff ffcc 	bl	244e8 <sys_sflist_append>
   24550:	e7ee      	b.n	24530 <sys_sflist_insert+0x28>

00024552 <prepare_thread_to_run>:
{
   24552:	b508      	push	{r3, lr}
   24554:	2200      	movs	r2, #0
   24556:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2455a:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2455c:	f000 f9c7 	bl	248ee <z_ready_thread>
}
   24560:	bd08      	pop	{r3, pc}

00024562 <queue_insert>:
{
   24562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24566:	4604      	mov	r4, r0
   24568:	460e      	mov	r6, r1
   2456a:	4615      	mov	r5, r2
   2456c:	461f      	mov	r7, r3
   2456e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24572:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   24576:	f04f 0240 	mov.w	r2, #64	; 0x40
   2457a:	f3ef 8911 	mrs	r9, BASEPRI
   2457e:	f382 8812 	msr	BASEPRI_MAX, r2
   24582:	f3bf 8f6f 	isb	sy
   24586:	46ca      	mov	sl, r9
	if (is_append) {
   24588:	b103      	cbz	r3, 2458c <queue_insert+0x2a>
	return list->tail;
   2458a:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2458c:	4640      	mov	r0, r8
   2458e:	f000 fa64 	bl	24a5a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   24592:	b998      	cbnz	r0, 245bc <queue_insert+0x5a>
	if (alloc) {
   24594:	b9df      	cbnz	r7, 245ce <queue_insert+0x6c>
	node->next_and_flags = flags;
   24596:	2300      	movs	r3, #0
   24598:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
   2459a:	462a      	mov	r2, r5
   2459c:	4631      	mov	r1, r6
   2459e:	4620      	mov	r0, r4
   245a0:	f7ff ffb2 	bl	24508 <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   245a4:	2104      	movs	r1, #4
   245a6:	f104 0010 	add.w	r0, r4, #16
   245aa:	f000 fc02 	bl	24db2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   245ae:	4649      	mov	r1, r9
   245b0:	4640      	mov	r0, r8
   245b2:	f7f5 faab 	bl	19b0c <z_reschedule>
	return 0;
   245b6:	2000      	movs	r0, #0
}
   245b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
   245bc:	4629      	mov	r1, r5
   245be:	f7ff ffc8 	bl	24552 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   245c2:	4649      	mov	r1, r9
   245c4:	4640      	mov	r0, r8
   245c6:	f7f5 faa1 	bl	19b0c <z_reschedule>
		return 0;
   245ca:	2000      	movs	r0, #0
   245cc:	e7f4      	b.n	245b8 <queue_insert+0x56>
	return z_thread_aligned_alloc(0, size);
   245ce:	2108      	movs	r1, #8
   245d0:	2000      	movs	r0, #0
   245d2:	f7f6 f807 	bl	1a5e4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   245d6:	b120      	cbz	r0, 245e2 <queue_insert+0x80>
		anode->data = data;
   245d8:	6045      	str	r5, [r0, #4]
   245da:	2201      	movs	r2, #1
   245dc:	6002      	str	r2, [r0, #0]
		data = anode;
   245de:	4605      	mov	r5, r0
   245e0:	e7db      	b.n	2459a <queue_insert+0x38>
	__asm__ volatile(
   245e2:	f38a 8811 	msr	BASEPRI, sl
   245e6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   245ea:	f06f 000b 	mvn.w	r0, #11
   245ee:	e7e3      	b.n	245b8 <queue_insert+0x56>

000245f0 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   245f0:	b160      	cbz	r0, 2460c <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   245f2:	6803      	ldr	r3, [r0, #0]
   245f4:	f013 0f03 	tst.w	r3, #3
   245f8:	d008      	beq.n	2460c <z_queue_node_peek+0x1c>
{
   245fa:	b510      	push	{r4, lr}
		ret = anode->data;
   245fc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   245fe:	b909      	cbnz	r1, 24604 <z_queue_node_peek+0x14>
		ret = anode->data;
   24600:	4620      	mov	r0, r4
}
   24602:	bd10      	pop	{r4, pc}
			k_free(anode);
   24604:	f000 fbe4 	bl	24dd0 <k_free>
		ret = anode->data;
   24608:	4620      	mov	r0, r4
   2460a:	e7fa      	b.n	24602 <z_queue_node_peek+0x12>
}
   2460c:	4770      	bx	lr

0002460e <k_queue_append>:
{
   2460e:	b500      	push	{lr}
   24610:	b083      	sub	sp, #12
   24612:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   24614:	2301      	movs	r3, #1
   24616:	9300      	str	r3, [sp, #0]
   24618:	2300      	movs	r3, #0
   2461a:	4619      	mov	r1, r3
   2461c:	f7ff ffa1 	bl	24562 <queue_insert>
}
   24620:	b003      	add	sp, #12
   24622:	f85d fb04 	ldr.w	pc, [sp], #4

00024626 <k_queue_prepend>:
{
   24626:	b500      	push	{lr}
   24628:	b083      	sub	sp, #12
   2462a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2462c:	2100      	movs	r1, #0
   2462e:	9100      	str	r1, [sp, #0]
   24630:	460b      	mov	r3, r1
   24632:	f7ff ff96 	bl	24562 <queue_insert>
}
   24636:	b003      	add	sp, #12
   24638:	f85d fb04 	ldr.w	pc, [sp], #4

0002463c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2463c:	b15a      	cbz	r2, 24656 <z_impl_k_sem_init+0x1a>
   2463e:	428a      	cmp	r2, r1
   24640:	d30c      	bcc.n	2465c <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   24642:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   24644:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   24646:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   24648:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2464a:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2464e:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   24650:	6143      	str	r3, [r0, #20]
	return 0;
   24652:	2000      	movs	r0, #0
   24654:	4770      	bx	lr
		return -EINVAL;
   24656:	f06f 0015 	mvn.w	r0, #21
   2465a:	4770      	bx	lr
   2465c:	f06f 0015 	mvn.w	r0, #21
}
   24660:	4770      	bx	lr

00024662 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   24662:	460b      	mov	r3, r1
   24664:	b139      	cbz	r1, 24676 <sys_slist_remove+0x14>
	return node->next;
   24666:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   24668:	6019      	str	r1, [r3, #0]
	return list->tail;
   2466a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2466c:	428a      	cmp	r2, r1
   2466e:	d009      	beq.n	24684 <sys_slist_remove+0x22>
	parent->next = child;
   24670:	2300      	movs	r3, #0
   24672:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24674:	4770      	bx	lr
	return node->next;
   24676:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   24678:	6003      	str	r3, [r0, #0]
	return list->tail;
   2467a:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2467c:	428a      	cmp	r2, r1
   2467e:	d1f7      	bne.n	24670 <sys_slist_remove+0xe>
	list->tail = node;
   24680:	6043      	str	r3, [r0, #4]
}
   24682:	e7f5      	b.n	24670 <sys_slist_remove+0xe>
	list->tail = node;
   24684:	6043      	str	r3, [r0, #4]
}
   24686:	e7f3      	b.n	24670 <sys_slist_remove+0xe>

00024688 <notify_queue_locked>:
	if (queue != NULL) {
   24688:	b138      	cbz	r0, 2469a <notify_queue_locked+0x12>
{
   2468a:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2468c:	2200      	movs	r2, #0
   2468e:	4611      	mov	r1, r2
   24690:	f500 7080 	add.w	r0, r0, #256	; 0x100
   24694:	f000 fa2d 	bl	24af2 <z_sched_wake>
}
   24698:	bd08      	pop	{r3, pc}
	bool rv = false;
   2469a:	2000      	movs	r0, #0
}
   2469c:	4770      	bx	lr

0002469e <submit_to_queue_locked>:
{
   2469e:	b570      	push	{r4, r5, r6, lr}
   246a0:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   246a2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   246a4:	f013 0f02 	tst.w	r3, #2
   246a8:	d122      	bne.n	246f0 <submit_to_queue_locked+0x52>
   246aa:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   246ac:	f013 0f04 	tst.w	r3, #4
   246b0:	d123      	bne.n	246fa <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
   246b2:	680b      	ldr	r3, [r1, #0]
   246b4:	b1ab      	cbz	r3, 246e2 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
   246b6:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   246b8:	f013 0f01 	tst.w	r3, #1
   246bc:	d014      	beq.n	246e8 <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
   246be:	68a3      	ldr	r3, [r4, #8]
   246c0:	602b      	str	r3, [r5, #0]
			ret = 2;
   246c2:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   246c4:	4621      	mov	r1, r4
   246c6:	6828      	ldr	r0, [r5, #0]
   246c8:	f7f5 f8aa 	bl	19820 <queue_submit_locked>
		if (rc < 0) {
   246cc:	2800      	cmp	r0, #0
   246ce:	db11      	blt.n	246f4 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
   246d0:	68e3      	ldr	r3, [r4, #12]
   246d2:	f043 0304 	orr.w	r3, r3, #4
   246d6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   246d8:	682b      	ldr	r3, [r5, #0]
   246da:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
   246dc:	b136      	cbz	r6, 246ec <submit_to_queue_locked+0x4e>
   246de:	4630      	mov	r0, r6
	return ret;
   246e0:	e00a      	b.n	246f8 <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
   246e2:	6883      	ldr	r3, [r0, #8]
   246e4:	600b      	str	r3, [r1, #0]
   246e6:	e7e6      	b.n	246b6 <submit_to_queue_locked+0x18>
		ret = 1;
   246e8:	2601      	movs	r6, #1
   246ea:	e7eb      	b.n	246c4 <submit_to_queue_locked+0x26>
   246ec:	4630      	mov	r0, r6
   246ee:	e001      	b.n	246f4 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
   246f0:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   246f4:	2300      	movs	r3, #0
   246f6:	602b      	str	r3, [r5, #0]
}
   246f8:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   246fa:	2000      	movs	r0, #0
   246fc:	e7fa      	b.n	246f4 <submit_to_queue_locked+0x56>

000246fe <work_timeout>:
{
   246fe:	b510      	push	{r4, lr}
   24700:	b082      	sub	sp, #8
   24702:	4603      	mov	r3, r0
	__asm__ volatile(
   24704:	f04f 0240 	mov.w	r2, #64	; 0x40
   24708:	f3ef 8411 	mrs	r4, BASEPRI
   2470c:	f382 8812 	msr	BASEPRI_MAX, r2
   24710:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   24714:	2200      	movs	r2, #0
   24716:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   24718:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2471c:	f022 0108 	bic.w	r1, r2, #8
   24720:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24724:	f012 0f08 	tst.w	r2, #8
   24728:	d105      	bne.n	24736 <work_timeout+0x38>
	__asm__ volatile(
   2472a:	f384 8811 	msr	BASEPRI, r4
   2472e:	f3bf 8f6f 	isb	sy
}
   24732:	b002      	add	sp, #8
   24734:	bd10      	pop	{r4, pc}
   24736:	3810      	subs	r0, #16
		queue = dw->queue;
   24738:	699b      	ldr	r3, [r3, #24]
   2473a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2473c:	a901      	add	r1, sp, #4
   2473e:	f7ff ffae 	bl	2469e <submit_to_queue_locked>
   24742:	e7f2      	b.n	2472a <work_timeout+0x2c>

00024744 <z_reschedule_unlocked>:
{
   24744:	b508      	push	{r3, lr}
	__asm__ volatile(
   24746:	f04f 0340 	mov.w	r3, #64	; 0x40
   2474a:	f3ef 8011 	mrs	r0, BASEPRI
   2474e:	f383 8812 	msr	BASEPRI_MAX, r3
   24752:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24756:	f000 f875 	bl	24844 <z_reschedule_irqlock>
}
   2475a:	bd08      	pop	{r3, pc}

0002475c <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2475c:	2300      	movs	r3, #0
   2475e:	6003      	str	r3, [r0, #0]
   24760:	6043      	str	r3, [r0, #4]
   24762:	6083      	str	r3, [r0, #8]
   24764:	60c3      	str	r3, [r0, #12]
   24766:	6041      	str	r1, [r0, #4]
}
   24768:	4770      	bx	lr

0002476a <z_work_submit_to_queue>:
{
   2476a:	b510      	push	{r4, lr}
   2476c:	b082      	sub	sp, #8
   2476e:	9001      	str	r0, [sp, #4]
   24770:	4608      	mov	r0, r1
   24772:	f04f 0340 	mov.w	r3, #64	; 0x40
   24776:	f3ef 8411 	mrs	r4, BASEPRI
   2477a:	f383 8812 	msr	BASEPRI_MAX, r3
   2477e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   24782:	a901      	add	r1, sp, #4
   24784:	f7ff ff8b 	bl	2469e <submit_to_queue_locked>
	__asm__ volatile(
   24788:	f384 8811 	msr	BASEPRI, r4
   2478c:	f3bf 8f6f 	isb	sy
}
   24790:	b002      	add	sp, #8
   24792:	bd10      	pop	{r4, pc}

00024794 <k_work_submit_to_queue>:
{
   24794:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   24796:	f7ff ffe8 	bl	2476a <z_work_submit_to_queue>
	if (ret > 0) {
   2479a:	1e04      	subs	r4, r0, #0
   2479c:	dc01      	bgt.n	247a2 <k_work_submit_to_queue+0xe>
}
   2479e:	4620      	mov	r0, r4
   247a0:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   247a2:	f7ff ffcf 	bl	24744 <z_reschedule_unlocked>
	return ret;
   247a6:	e7fa      	b.n	2479e <k_work_submit_to_queue+0xa>

000247a8 <k_work_init_delayable>:
{
   247a8:	b538      	push	{r3, r4, r5, lr}
   247aa:	4604      	mov	r4, r0
   247ac:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   247ae:	2230      	movs	r2, #48	; 0x30
   247b0:	2100      	movs	r1, #0
   247b2:	f000 fb4b 	bl	24e4c <memset>
   247b6:	6065      	str	r5, [r4, #4]
   247b8:	f44f 7380 	mov.w	r3, #256	; 0x100
   247bc:	60e3      	str	r3, [r4, #12]
}
   247be:	bd38      	pop	{r3, r4, r5, pc}

000247c0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   247c0:	b510      	push	{r4, lr}
   247c2:	b082      	sub	sp, #8
   247c4:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   247c6:	f04f 0040 	mov.w	r0, #64	; 0x40
   247ca:	f3ef 8411 	mrs	r4, BASEPRI
   247ce:	f380 8812 	msr	BASEPRI_MAX, r0
   247d2:	f3bf 8f6f 	isb	sy
	return *flagp;
   247d6:	68c8      	ldr	r0, [r1, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   247d8:	f010 0f0e 	tst.w	r0, #14
   247dc:	d006      	beq.n	247ec <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   247de:	2000      	movs	r0, #0
	__asm__ volatile(
   247e0:	f384 8811 	msr	BASEPRI, r4
   247e4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   247e8:	b002      	add	sp, #8
   247ea:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   247ec:	a801      	add	r0, sp, #4
   247ee:	f7f5 f8fd 	bl	199ec <schedule_for_queue_locked>
   247f2:	e7f5      	b.n	247e0 <k_work_schedule_for_queue+0x20>

000247f4 <thread_active_elsewhere>:
}
   247f4:	2000      	movs	r0, #0
   247f6:	4770      	bx	lr

000247f8 <pended_on_thread>:
}
   247f8:	6880      	ldr	r0, [r0, #8]
   247fa:	4770      	bx	lr

000247fc <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   247fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24800:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   24804:	4283      	cmp	r3, r0
   24806:	d001      	beq.n	2480c <z_sched_prio_cmp+0x10>
		return b2 - b1;
   24808:	1ac0      	subs	r0, r0, r3
   2480a:	4770      	bx	lr
	return 0;
   2480c:	2000      	movs	r0, #0
}
   2480e:	4770      	bx	lr

00024810 <z_unpend_thread_no_timeout>:
{
   24810:	b538      	push	{r3, r4, r5, lr}
   24812:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   24814:	2300      	movs	r3, #0
	__asm__ volatile(
   24816:	f04f 0240 	mov.w	r2, #64	; 0x40
   2481a:	f3ef 8511 	mrs	r5, BASEPRI
   2481e:	f382 8812 	msr	BASEPRI_MAX, r2
   24822:	f3bf 8f6f 	isb	sy
   24826:	e004      	b.n	24832 <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
   24828:	f385 8811 	msr	BASEPRI, r5
   2482c:	f3bf 8f6f 	isb	sy
   24830:	2301      	movs	r3, #1
   24832:	b933      	cbnz	r3, 24842 <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
   24834:	68a3      	ldr	r3, [r4, #8]
   24836:	2b00      	cmp	r3, #0
   24838:	d0f6      	beq.n	24828 <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
   2483a:	4620      	mov	r0, r4
   2483c:	f000 f824 	bl	24888 <unpend_thread_no_timeout>
   24840:	e7f2      	b.n	24828 <z_unpend_thread_no_timeout+0x18>
}
   24842:	bd38      	pop	{r3, r4, r5, pc}

00024844 <z_reschedule_irqlock>:
{
   24844:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24846:	4603      	mov	r3, r0
   24848:	b928      	cbnz	r0, 24856 <z_reschedule_irqlock+0x12>
   2484a:	f3ef 8205 	mrs	r2, IPSR
   2484e:	b912      	cbnz	r2, 24856 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   24850:	f7ee fbb6 	bl	12fc0 <arch_swap>
	return ret;
   24854:	e003      	b.n	2485e <z_reschedule_irqlock+0x1a>
   24856:	f383 8811 	msr	BASEPRI, r3
   2485a:	f3bf 8f6f 	isb	sy
}
   2485e:	bd08      	pop	{r3, pc}

00024860 <z_reschedule_unlocked>:
{
   24860:	b508      	push	{r3, lr}
	__asm__ volatile(
   24862:	f04f 0340 	mov.w	r3, #64	; 0x40
   24866:	f3ef 8011 	mrs	r0, BASEPRI
   2486a:	f383 8812 	msr	BASEPRI_MAX, r3
   2486e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24872:	f7ff ffe7 	bl	24844 <z_reschedule_irqlock>
}
   24876:	bd08      	pop	{r3, pc}

00024878 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   24878:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   2487a:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   2487c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2487e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24880:	2300      	movs	r3, #0
   24882:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   24884:	604b      	str	r3, [r1, #4]
}
   24886:	4770      	bx	lr

00024888 <unpend_thread_no_timeout>:
{
   24888:	b510      	push	{r4, lr}
   2488a:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2488c:	f7ff ffb4 	bl	247f8 <pended_on_thread>
   24890:	4621      	mov	r1, r4
   24892:	f7ff fff1 	bl	24878 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24896:	7b63      	ldrb	r3, [r4, #13]
   24898:	f023 0302 	bic.w	r3, r3, #2
   2489c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2489e:	2300      	movs	r3, #0
   248a0:	60a3      	str	r3, [r4, #8]
}
   248a2:	bd10      	pop	{r4, pc}

000248a4 <z_unpend_thread>:
{
   248a4:	b538      	push	{r3, r4, r5, lr}
   248a6:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   248a8:	2300      	movs	r3, #0
   248aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   248ae:	f3ef 8511 	mrs	r5, BASEPRI
   248b2:	f382 8812 	msr	BASEPRI_MAX, r2
   248b6:	f3bf 8f6f 	isb	sy
   248ba:	e004      	b.n	248c6 <z_unpend_thread+0x22>
	__asm__ volatile(
   248bc:	f385 8811 	msr	BASEPRI, r5
   248c0:	f3bf 8f6f 	isb	sy
   248c4:	2301      	movs	r3, #1
   248c6:	b933      	cbnz	r3, 248d6 <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
   248c8:	68a3      	ldr	r3, [r4, #8]
   248ca:	2b00      	cmp	r3, #0
   248cc:	d0f6      	beq.n	248bc <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
   248ce:	4620      	mov	r0, r4
   248d0:	f7ff ffda 	bl	24888 <unpend_thread_no_timeout>
   248d4:	e7f2      	b.n	248bc <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   248d6:	f104 0018 	add.w	r0, r4, #24
   248da:	f000 f96c 	bl	24bb6 <z_abort_timeout>
}
   248de:	bd38      	pop	{r3, r4, r5, pc}

000248e0 <z_priq_dumb_best>:
{
   248e0:	4603      	mov	r3, r0
	return list->head == list;
   248e2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   248e4:	4283      	cmp	r3, r0
   248e6:	d000      	beq.n	248ea <z_priq_dumb_best+0xa>
}
   248e8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   248ea:	2000      	movs	r0, #0
	return thread;
   248ec:	e7fc      	b.n	248e8 <z_priq_dumb_best+0x8>

000248ee <z_ready_thread>:
{
   248ee:	b538      	push	{r3, r4, r5, lr}
   248f0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   248f2:	2300      	movs	r3, #0
	__asm__ volatile(
   248f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   248f8:	f3ef 8511 	mrs	r5, BASEPRI
   248fc:	f382 8812 	msr	BASEPRI_MAX, r2
   24900:	f3bf 8f6f 	isb	sy
   24904:	e004      	b.n	24910 <z_ready_thread+0x22>
	__asm__ volatile(
   24906:	f385 8811 	msr	BASEPRI, r5
   2490a:	f3bf 8f6f 	isb	sy
   2490e:	2301      	movs	r3, #1
   24910:	b943      	cbnz	r3, 24924 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   24912:	4620      	mov	r0, r4
   24914:	f7ff ff6e 	bl	247f4 <thread_active_elsewhere>
   24918:	2800      	cmp	r0, #0
   2491a:	d1f4      	bne.n	24906 <z_ready_thread+0x18>
			ready_thread(thread);
   2491c:	4620      	mov	r0, r4
   2491e:	f7f5 f9cd 	bl	19cbc <ready_thread>
   24922:	e7f0      	b.n	24906 <z_ready_thread+0x18>
}
   24924:	bd38      	pop	{r3, r4, r5, pc}

00024926 <z_sched_wake_thread>:
{
   24926:	b570      	push	{r4, r5, r6, lr}
   24928:	4604      	mov	r4, r0
   2492a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   2492c:	2300      	movs	r3, #0
	__asm__ volatile(
   2492e:	f04f 0240 	mov.w	r2, #64	; 0x40
   24932:	f3ef 8511 	mrs	r5, BASEPRI
   24936:	f382 8812 	msr	BASEPRI_MAX, r2
   2493a:	f3bf 8f6f 	isb	sy
   2493e:	e007      	b.n	24950 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
   24940:	4620      	mov	r0, r4
   24942:	f7f5 f9bb 	bl	19cbc <ready_thread>
	__asm__ volatile(
   24946:	f385 8811 	msr	BASEPRI, r5
   2494a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2494e:	2301      	movs	r3, #1
   24950:	b993      	cbnz	r3, 24978 <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   24952:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
   24954:	f013 0f28 	tst.w	r3, #40	; 0x28
   24958:	d1f5      	bne.n	24946 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
   2495a:	68a3      	ldr	r3, [r4, #8]
   2495c:	b113      	cbz	r3, 24964 <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
   2495e:	4620      	mov	r0, r4
   24960:	f7ff ff92 	bl	24888 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24964:	7b63      	ldrb	r3, [r4, #13]
   24966:	f023 0204 	bic.w	r2, r3, #4
   2496a:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
   2496c:	2e00      	cmp	r6, #0
   2496e:	d0e7      	beq.n	24940 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24970:	f023 0314 	bic.w	r3, r3, #20
   24974:	7363      	strb	r3, [r4, #13]
}
   24976:	e7e3      	b.n	24940 <z_sched_wake_thread+0x1a>
}
   24978:	bd70      	pop	{r4, r5, r6, pc}

0002497a <z_thread_timeout>:
{
   2497a:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
   2497c:	2101      	movs	r1, #1
   2497e:	3818      	subs	r0, #24
   24980:	f7ff ffd1 	bl	24926 <z_sched_wake_thread>
}
   24984:	bd08      	pop	{r3, pc}

00024986 <unpend_all>:
{
   24986:	b538      	push	{r3, r4, r5, lr}
   24988:	4605      	mov	r5, r0
	return list->head == list;
   2498a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2498c:	42a5      	cmp	r5, r4
   2498e:	d00e      	beq.n	249ae <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24990:	b16c      	cbz	r4, 249ae <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   24992:	4620      	mov	r0, r4
   24994:	f7ff ff78 	bl	24888 <unpend_thread_no_timeout>
   24998:	f104 0018 	add.w	r0, r4, #24
   2499c:	f000 f90b 	bl	24bb6 <z_abort_timeout>
   249a0:	2300      	movs	r3, #0
   249a2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   249a6:	4620      	mov	r0, r4
   249a8:	f7f5 f988 	bl	19cbc <ready_thread>
   249ac:	e7ed      	b.n	2498a <unpend_all+0x4>
}
   249ae:	bd38      	pop	{r3, r4, r5, pc}

000249b0 <add_to_waitq_locked>:
{
   249b0:	b570      	push	{r4, r5, r6, lr}
   249b2:	4605      	mov	r5, r0
   249b4:	460e      	mov	r6, r1
	unready_thread(thread);
   249b6:	f7f5 f9db 	bl	19d70 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   249ba:	7b6b      	ldrb	r3, [r5, #13]
   249bc:	f043 0302 	orr.w	r3, r3, #2
   249c0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   249c2:	b1fe      	cbz	r6, 24a04 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
   249c4:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   249c6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   249c8:	42a6      	cmp	r6, r4
   249ca:	d108      	bne.n	249de <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   249cc:	2400      	movs	r4, #0
   249ce:	e006      	b.n	249de <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
   249d0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   249d2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   249d4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   249d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   249d8:	6065      	str	r5, [r4, #4]
}
   249da:	e013      	b.n	24a04 <add_to_waitq_locked+0x54>
   249dc:	2400      	movs	r4, #0
   249de:	b164      	cbz	r4, 249fa <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   249e0:	4621      	mov	r1, r4
   249e2:	4628      	mov	r0, r5
   249e4:	f7ff ff0a 	bl	247fc <z_sched_prio_cmp>
   249e8:	2800      	cmp	r0, #0
   249ea:	dcf1      	bgt.n	249d0 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   249ec:	2c00      	cmp	r4, #0
   249ee:	d0f6      	beq.n	249de <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
   249f0:	6873      	ldr	r3, [r6, #4]
   249f2:	429c      	cmp	r4, r3
   249f4:	d0f2      	beq.n	249dc <add_to_waitq_locked+0x2c>
   249f6:	6824      	ldr	r4, [r4, #0]
   249f8:	e7f1      	b.n	249de <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
   249fa:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   249fc:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   249fe:	606b      	str	r3, [r5, #4]
	tail->next = node;
   24a00:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24a02:	6075      	str	r5, [r6, #4]
}
   24a04:	bd70      	pop	{r4, r5, r6, pc}

00024a06 <pend_locked>:
{
   24a06:	b570      	push	{r4, r5, r6, lr}
   24a08:	4604      	mov	r4, r0
   24a0a:	4616      	mov	r6, r2
   24a0c:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   24a0e:	f7ff ffcf 	bl	249b0 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   24a12:	4632      	mov	r2, r6
   24a14:	462b      	mov	r3, r5
   24a16:	4620      	mov	r0, r4
   24a18:	f7f5 f840 	bl	19a9c <add_thread_timeout>
}
   24a1c:	bd70      	pop	{r4, r5, r6, pc}

00024a1e <z_unpend1_no_timeout>:
{
   24a1e:	b570      	push	{r4, r5, r6, lr}
   24a20:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   24a22:	2300      	movs	r3, #0
	__asm__ volatile(
   24a24:	f04f 0240 	mov.w	r2, #64	; 0x40
   24a28:	f3ef 8511 	mrs	r5, BASEPRI
   24a2c:	f382 8812 	msr	BASEPRI_MAX, r2
   24a30:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   24a34:	461c      	mov	r4, r3
   24a36:	e004      	b.n	24a42 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   24a38:	f385 8811 	msr	BASEPRI, r5
   24a3c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24a40:	2301      	movs	r3, #1
   24a42:	b943      	cbnz	r3, 24a56 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
   24a44:	4630      	mov	r0, r6
   24a46:	f7ff ff4b 	bl	248e0 <z_priq_dumb_best>
		if (thread != NULL) {
   24a4a:	4604      	mov	r4, r0
   24a4c:	2800      	cmp	r0, #0
   24a4e:	d0f3      	beq.n	24a38 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   24a50:	f7ff ff1a 	bl	24888 <unpend_thread_no_timeout>
   24a54:	e7f0      	b.n	24a38 <z_unpend1_no_timeout+0x1a>
}
   24a56:	4620      	mov	r0, r4
   24a58:	bd70      	pop	{r4, r5, r6, pc}

00024a5a <z_unpend_first_thread>:
{
   24a5a:	b570      	push	{r4, r5, r6, lr}
   24a5c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   24a5e:	2300      	movs	r3, #0
	__asm__ volatile(
   24a60:	f04f 0240 	mov.w	r2, #64	; 0x40
   24a64:	f3ef 8511 	mrs	r5, BASEPRI
   24a68:	f382 8812 	msr	BASEPRI_MAX, r2
   24a6c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   24a70:	461c      	mov	r4, r3
   24a72:	e004      	b.n	24a7e <z_unpend_first_thread+0x24>
	__asm__ volatile(
   24a74:	f385 8811 	msr	BASEPRI, r5
   24a78:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24a7c:	2301      	movs	r3, #1
   24a7e:	b963      	cbnz	r3, 24a9a <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
   24a80:	4630      	mov	r0, r6
   24a82:	f7ff ff2d 	bl	248e0 <z_priq_dumb_best>
		if (thread != NULL) {
   24a86:	4604      	mov	r4, r0
   24a88:	2800      	cmp	r0, #0
   24a8a:	d0f3      	beq.n	24a74 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
   24a8c:	f7ff fefc 	bl	24888 <unpend_thread_no_timeout>
   24a90:	f104 0018 	add.w	r0, r4, #24
   24a94:	f000 f88f 	bl	24bb6 <z_abort_timeout>
   24a98:	e7ec      	b.n	24a74 <z_unpend_first_thread+0x1a>
}
   24a9a:	4620      	mov	r0, r4
   24a9c:	bd70      	pop	{r4, r5, r6, pc}

00024a9e <z_unpend_all>:
{
   24a9e:	b538      	push	{r3, r4, r5, lr}
   24aa0:	4605      	mov	r5, r0
	int need_sched = 0;
   24aa2:	2000      	movs	r0, #0
	return list->head == list;
   24aa4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24aa6:	42a5      	cmp	r5, r4
   24aa8:	d008      	beq.n	24abc <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24aaa:	b13c      	cbz	r4, 24abc <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   24aac:	4620      	mov	r0, r4
   24aae:	f7ff fef9 	bl	248a4 <z_unpend_thread>
		z_ready_thread(thread);
   24ab2:	4620      	mov	r0, r4
   24ab4:	f7ff ff1b 	bl	248ee <z_ready_thread>
		need_sched = 1;
   24ab8:	2001      	movs	r0, #1
   24aba:	e7f3      	b.n	24aa4 <z_unpend_all+0x6>
}
   24abc:	bd38      	pop	{r3, r4, r5, pc}

00024abe <init_ready_q>:
	sys_dlist_init(&rq->runq);
   24abe:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   24ac0:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   24ac2:	6083      	str	r3, [r0, #8]
}
   24ac4:	4770      	bx	lr

00024ac6 <z_impl_k_usleep>:
{
   24ac6:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   24ac8:	17c1      	asrs	r1, r0, #31
		t += off;
   24aca:	f240 33e7 	movw	r3, #999	; 0x3e7
   24ace:	18c0      	adds	r0, r0, r3
			return t / ((uint64_t)from_hz / to_hz);
   24ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24ad4:	f04f 0300 	mov.w	r3, #0
   24ad8:	f141 0100 	adc.w	r1, r1, #0
   24adc:	f7dd f934 	bl	1d48 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   24ae0:	17c1      	asrs	r1, r0, #31
   24ae2:	f7f5 fab5 	bl	1a050 <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
   24ae6:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
   24aea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
}
   24aee:	00c0      	lsls	r0, r0, #3
   24af0:	bd08      	pop	{r3, pc}

00024af2 <z_sched_wake>:
{
   24af2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24af6:	4606      	mov	r6, r0
   24af8:	4688      	mov	r8, r1
   24afa:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   24afc:	2300      	movs	r3, #0
	__asm__ volatile(
   24afe:	f04f 0240 	mov.w	r2, #64	; 0x40
   24b02:	f3ef 8511 	mrs	r5, BASEPRI
   24b06:	f382 8812 	msr	BASEPRI_MAX, r2
   24b0a:	f3bf 8f6f 	isb	sy
	bool ret = false;
   24b0e:	4699      	mov	r9, r3
   24b10:	e004      	b.n	24b1c <z_sched_wake+0x2a>
	__asm__ volatile(
   24b12:	f385 8811 	msr	BASEPRI, r5
   24b16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24b1a:	2301      	movs	r3, #1
   24b1c:	b9a3      	cbnz	r3, 24b48 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
   24b1e:	4630      	mov	r0, r6
   24b20:	f7ff fede 	bl	248e0 <z_priq_dumb_best>
		if (thread != NULL) {
   24b24:	4604      	mov	r4, r0
   24b26:	2800      	cmp	r0, #0
   24b28:	d0f3      	beq.n	24b12 <z_sched_wake+0x20>
   24b2a:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   24b2e:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
   24b30:	f7ff feaa 	bl	24888 <unpend_thread_no_timeout>
   24b34:	f104 0018 	add.w	r0, r4, #24
   24b38:	f000 f83d 	bl	24bb6 <z_abort_timeout>
			ready_thread(thread);
   24b3c:	4620      	mov	r0, r4
   24b3e:	f7f5 f8bd 	bl	19cbc <ready_thread>
			ret = true;
   24b42:	f04f 0901 	mov.w	r9, #1
   24b46:	e7e4      	b.n	24b12 <z_sched_wake+0x20>
}
   24b48:	4648      	mov	r0, r9
   24b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024b4e <remove_timeout>:
{
   24b4e:	b510      	push	{r4, lr}
   24b50:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   24b52:	f7f5 fb51 	bl	1a1f8 <next>
   24b56:	b148      	cbz	r0, 24b6c <remove_timeout+0x1e>
   24b58:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   24b5a:	6903      	ldr	r3, [r0, #16]
   24b5c:	6941      	ldr	r1, [r0, #20]
   24b5e:	6920      	ldr	r0, [r4, #16]
   24b60:	181b      	adds	r3, r3, r0
   24b62:	6960      	ldr	r0, [r4, #20]
   24b64:	eb41 0100 	adc.w	r1, r1, r0
   24b68:	6113      	str	r3, [r2, #16]
   24b6a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   24b6c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   24b6e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   24b70:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24b72:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24b74:	2300      	movs	r3, #0
   24b76:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   24b78:	6063      	str	r3, [r4, #4]
}
   24b7a:	bd10      	pop	{r4, pc}

00024b7c <next_timeout>:
{
   24b7c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   24b7e:	f7f5 fb31 	bl	1a1e4 <first>
   24b82:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   24b84:	f7f5 fb44 	bl	1a210 <elapsed>
	if ((to == NULL) ||
   24b88:	b17c      	cbz	r4, 24baa <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   24b8a:	6923      	ldr	r3, [r4, #16]
   24b8c:	6962      	ldr	r2, [r4, #20]
   24b8e:	1a1b      	subs	r3, r3, r0
   24b90:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   24b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   24b98:	f172 0100 	sbcs.w	r1, r2, #0
   24b9c:	da08      	bge.n	24bb0 <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
   24b9e:	2a00      	cmp	r2, #0
   24ba0:	db01      	blt.n	24ba6 <next_timeout+0x2a>
   24ba2:	4618      	mov	r0, r3
}
   24ba4:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
   24ba6:	2300      	movs	r3, #0
   24ba8:	e7fb      	b.n	24ba2 <next_timeout+0x26>
		ret = MAX_WAIT;
   24baa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24bae:	e7f9      	b.n	24ba4 <next_timeout+0x28>
   24bb0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
   24bb4:	e7f6      	b.n	24ba4 <next_timeout+0x28>

00024bb6 <z_abort_timeout>:
{
   24bb6:	b570      	push	{r4, r5, r6, lr}
   24bb8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   24bba:	2300      	movs	r3, #0
	__asm__ volatile(
   24bbc:	f04f 0240 	mov.w	r2, #64	; 0x40
   24bc0:	f3ef 8611 	mrs	r6, BASEPRI
   24bc4:	f382 8812 	msr	BASEPRI_MAX, r2
   24bc8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   24bcc:	f06f 0015 	mvn.w	r0, #21
   24bd0:	e004      	b.n	24bdc <z_abort_timeout+0x26>
	__asm__ volatile(
   24bd2:	f386 8811 	msr	BASEPRI, r6
   24bd6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24bda:	2301      	movs	r3, #1
   24bdc:	461d      	mov	r5, r3
   24bde:	b93b      	cbnz	r3, 24bf0 <z_abort_timeout+0x3a>
	return node->next != NULL;
   24be0:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   24be2:	2b00      	cmp	r3, #0
   24be4:	d0f5      	beq.n	24bd2 <z_abort_timeout+0x1c>
			remove_timeout(to);
   24be6:	4620      	mov	r0, r4
   24be8:	f7ff ffb1 	bl	24b4e <remove_timeout>
			ret = 0;
   24bec:	4628      	mov	r0, r5
   24bee:	e7f0      	b.n	24bd2 <z_abort_timeout+0x1c>
}
   24bf0:	bd70      	pop	{r4, r5, r6, pc}

00024bf2 <z_get_next_timeout_expiry>:
{
   24bf2:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   24bf4:	2300      	movs	r3, #0
	__asm__ volatile(
   24bf6:	f04f 0240 	mov.w	r2, #64	; 0x40
   24bfa:	f3ef 8411 	mrs	r4, BASEPRI
   24bfe:	f382 8812 	msr	BASEPRI_MAX, r2
   24c02:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   24c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24c0a:	e006      	b.n	24c1a <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   24c0c:	f7ff ffb6 	bl	24b7c <next_timeout>
	__asm__ volatile(
   24c10:	f384 8811 	msr	BASEPRI, r4
   24c14:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24c18:	2301      	movs	r3, #1
   24c1a:	2b00      	cmp	r3, #0
   24c1c:	d0f6      	beq.n	24c0c <z_get_next_timeout_expiry+0x1a>
}
   24c1e:	bd10      	pop	{r4, pc}

00024c20 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   24c20:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   24c22:	f7f5 fbe5 	bl	1a3f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   24c26:	bd08      	pop	{r3, pc}

00024c28 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   24c28:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   24c2a:	f7f5 fbe1 	bl	1a3f0 <sys_clock_tick_get>
}
   24c2e:	bd08      	pop	{r3, pc}

00024c30 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   24c30:	b900      	cbnz	r0, 24c34 <z_impl_k_busy_wait+0x4>
   24c32:	4770      	bx	lr
{
   24c34:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   24c36:	f7ee fe99 	bl	1396c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   24c3a:	bd08      	pop	{r3, pc}

00024c3c <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   24c3c:	b538      	push	{r3, r4, r5, lr}
   24c3e:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24c40:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   24c44:	bf08      	it	eq
   24c46:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   24c4a:	d020      	beq.n	24c8e <sys_clock_timeout_end_calc+0x52>
   24c4c:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24c4e:	ea51 0300 	orrs.w	r3, r1, r0
   24c52:	d009      	beq.n	24c68 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   24c54:	f06f 0301 	mvn.w	r3, #1
   24c58:	1a18      	subs	r0, r3, r0
   24c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24c5e:	eb63 0101 	sbc.w	r1, r3, r1
   24c62:	2900      	cmp	r1, #0
   24c64:	db03      	blt.n	24c6e <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   24c66:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   24c68:	f7f5 fbc2 	bl	1a3f0 <sys_clock_tick_get>
   24c6c:	e7fb      	b.n	24c66 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   24c6e:	f7f5 fbbf 	bl	1a3f0 <sys_clock_tick_get>
   24c72:	4603      	mov	r3, r0
   24c74:	462a      	mov	r2, r5
   24c76:	46a4      	mov	ip, r4
   24c78:	2d01      	cmp	r5, #1
   24c7a:	f174 0400 	sbcs.w	r4, r4, #0
   24c7e:	da02      	bge.n	24c86 <sys_clock_timeout_end_calc+0x4a>
   24c80:	2201      	movs	r2, #1
   24c82:	f04f 0c00 	mov.w	ip, #0
   24c86:	1898      	adds	r0, r3, r2
   24c88:	eb41 010c 	adc.w	r1, r1, ip
   24c8c:	e7eb      	b.n	24c66 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   24c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24c92:	4601      	mov	r1, r0
   24c94:	e7e7      	b.n	24c66 <sys_clock_timeout_end_calc+0x2a>

00024c96 <z_reschedule_unlocked>:
{
   24c96:	b508      	push	{r3, lr}
	__asm__ volatile(
   24c98:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c9c:	f3ef 8011 	mrs	r0, BASEPRI
   24ca0:	f383 8812 	msr	BASEPRI_MAX, r3
   24ca4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24ca8:	f7ff fdcc 	bl	24844 <z_reschedule_irqlock>
}
   24cac:	bd08      	pop	{r3, pc}

00024cae <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   24cae:	b510      	push	{r4, lr}
   24cb0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   24cb2:	f7ff ff80 	bl	24bb6 <z_abort_timeout>

	if (inactive) {
   24cb6:	b960      	cbnz	r0, 24cd2 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   24cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24cba:	b10b      	cbz	r3, 24cc0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   24cbc:	4620      	mov	r0, r4
   24cbe:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   24cc0:	f104 0018 	add.w	r0, r4, #24
   24cc4:	f7ff feab 	bl	24a1e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   24cc8:	b118      	cbz	r0, 24cd2 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   24cca:	f7ff fe10 	bl	248ee <z_ready_thread>
			z_reschedule_unlocked();
   24cce:	f7ff ffe2 	bl	24c96 <z_reschedule_unlocked>
		}
	}
}
   24cd2:	bd10      	pop	{r4, pc}

00024cd4 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24cd4:	b108      	cbz	r0, 24cda <poller_thread+0x6>
   24cd6:	3860      	subs	r0, #96	; 0x60
   24cd8:	4770      	bx	lr
}
   24cda:	4770      	bx	lr

00024cdc <signal_poller>:
{
   24cdc:	b538      	push	{r3, r4, r5, lr}
   24cde:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   24ce0:	6880      	ldr	r0, [r0, #8]
   24ce2:	f7ff fff7 	bl	24cd4 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   24ce6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   24ce8:	f013 0f02 	tst.w	r3, #2
   24cec:	d025      	beq.n	24d3a <signal_poller+0x5e>
   24cee:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   24cf0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   24cf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   24cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24cf8:	bf08      	it	eq
   24cfa:	f112 0f02 	cmneq.w	r2, #2
   24cfe:	d01e      	beq.n	24d3e <signal_poller+0x62>
	z_unpend_thread(thread);
   24d00:	f7ff fdd0 	bl	248a4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   24d04:	2d08      	cmp	r5, #8
   24d06:	d00a      	beq.n	24d1e <signal_poller+0x42>
   24d08:	2300      	movs	r3, #0
   24d0a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   24d0e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24d10:	f013 0f1f 	tst.w	r3, #31
   24d14:	d108      	bne.n	24d28 <signal_poller+0x4c>
   24d16:	69a3      	ldr	r3, [r4, #24]
   24d18:	b123      	cbz	r3, 24d24 <signal_poller+0x48>
   24d1a:	2300      	movs	r3, #0
   24d1c:	e005      	b.n	24d2a <signal_poller+0x4e>
   24d1e:	f06f 0303 	mvn.w	r3, #3
   24d22:	e7f2      	b.n	24d0a <signal_poller+0x2e>
   24d24:	2301      	movs	r3, #1
   24d26:	e000      	b.n	24d2a <signal_poller+0x4e>
   24d28:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   24d2a:	b90b      	cbnz	r3, 24d30 <signal_poller+0x54>
		return 0;
   24d2c:	2000      	movs	r0, #0
   24d2e:	e005      	b.n	24d3c <signal_poller+0x60>
	z_ready_thread(thread);
   24d30:	4620      	mov	r0, r4
   24d32:	f7ff fddc 	bl	248ee <z_ready_thread>
	return 0;
   24d36:	2000      	movs	r0, #0
   24d38:	e000      	b.n	24d3c <signal_poller+0x60>
		return 0;
   24d3a:	2000      	movs	r0, #0
}
   24d3c:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   24d3e:	f06f 000a 	mvn.w	r0, #10
   24d42:	e7fb      	b.n	24d3c <signal_poller+0x60>

00024d44 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   24d44:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   24d46:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   24d48:	7823      	ldrb	r3, [r4, #0]
   24d4a:	b173      	cbz	r3, 24d6a <signal_triggered_work+0x26>
   24d4c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   24d50:	b15d      	cbz	r5, 24d6a <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   24d52:	f1a4 0614 	sub.w	r6, r4, #20
   24d56:	f104 0014 	add.w	r0, r4, #20
   24d5a:	f7ff ff2c 	bl	24bb6 <z_abort_timeout>
		twork->poll_result = 0;
   24d5e:	2300      	movs	r3, #0
   24d60:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   24d62:	4631      	mov	r1, r6
   24d64:	4628      	mov	r0, r5
   24d66:	f7ff fd00 	bl	2476a <z_work_submit_to_queue>
	}

	return 0;
}
   24d6a:	2000      	movs	r0, #0
   24d6c:	bd70      	pop	{r4, r5, r6, pc}

00024d6e <signal_poll_event>:
{
   24d6e:	b570      	push	{r4, r5, r6, lr}
   24d70:	4604      	mov	r4, r0
   24d72:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   24d74:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   24d76:	b1d6      	cbz	r6, 24dae <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   24d78:	7873      	ldrb	r3, [r6, #1]
   24d7a:	2b01      	cmp	r3, #1
   24d7c:	d00d      	beq.n	24d9a <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   24d7e:	2b02      	cmp	r3, #2
   24d80:	d012      	beq.n	24da8 <signal_poll_event+0x3a>
		poller->is_polling = false;
   24d82:	2000      	movs	r0, #0
   24d84:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   24d86:	2300      	movs	r3, #0
   24d88:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   24d8a:	68e3      	ldr	r3, [r4, #12]
   24d8c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   24d90:	432a      	orrs	r2, r5
   24d92:	f362 3394 	bfi	r3, r2, #14, #7
   24d96:	60e3      	str	r3, [r4, #12]
}
   24d98:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   24d9a:	f7ff ff9f 	bl	24cdc <signal_poller>
		poller->is_polling = false;
   24d9e:	2300      	movs	r3, #0
   24da0:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   24da2:	4298      	cmp	r0, r3
   24da4:	daef      	bge.n	24d86 <signal_poll_event+0x18>
   24da6:	e7f7      	b.n	24d98 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   24da8:	f7ff ffcc 	bl	24d44 <signal_triggered_work>
   24dac:	e7f7      	b.n	24d9e <signal_poll_event+0x30>
	int retcode = 0;
   24dae:	2000      	movs	r0, #0
   24db0:	e7e9      	b.n	24d86 <signal_poll_event+0x18>

00024db2 <z_handle_obj_poll_events>:
{
   24db2:	b508      	push	{r3, lr}
   24db4:	4603      	mov	r3, r0
	return list->head == list;
   24db6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   24db8:	4283      	cmp	r3, r0
   24dba:	d008      	beq.n	24dce <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   24dbc:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   24dbe:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   24dc0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24dc2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24dc4:	2300      	movs	r3, #0
   24dc6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   24dc8:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   24dca:	f7ff ffd0 	bl	24d6e <signal_poll_event>
}
   24dce:	bd08      	pop	{r3, pc}

00024dd0 <k_free>:
	if (ptr != NULL) {
   24dd0:	b130      	cbz	r0, 24de0 <k_free+0x10>
{
   24dd2:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   24dd4:	1f01      	subs	r1, r0, #4
   24dd6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   24dda:	f7ff faa5 	bl	24328 <k_heap_free>
}
   24dde:	bd08      	pop	{r3, pc}
   24de0:	4770      	bx	lr

00024de2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   24de2:	4770      	bx	lr

00024de4 <__ieee754_sqrtf>:
   24de4:	eeb1 0ac0 	vsqrt.f32	s0, s0
   24de8:	4770      	bx	lr

00024dea <memcmp>:
   24dea:	b510      	push	{r4, lr}
   24dec:	3901      	subs	r1, #1
   24dee:	4402      	add	r2, r0
   24df0:	4290      	cmp	r0, r2
   24df2:	d101      	bne.n	24df8 <memcmp+0xe>
   24df4:	2000      	movs	r0, #0
   24df6:	e005      	b.n	24e04 <memcmp+0x1a>
   24df8:	7803      	ldrb	r3, [r0, #0]
   24dfa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   24dfe:	42a3      	cmp	r3, r4
   24e00:	d001      	beq.n	24e06 <memcmp+0x1c>
   24e02:	1b18      	subs	r0, r3, r4
   24e04:	bd10      	pop	{r4, pc}
   24e06:	3001      	adds	r0, #1
   24e08:	e7f2      	b.n	24df0 <memcmp+0x6>

00024e0a <memcpy>:
   24e0a:	440a      	add	r2, r1
   24e0c:	4291      	cmp	r1, r2
   24e0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   24e12:	d100      	bne.n	24e16 <memcpy+0xc>
   24e14:	4770      	bx	lr
   24e16:	b510      	push	{r4, lr}
   24e18:	f811 4b01 	ldrb.w	r4, [r1], #1
   24e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
   24e20:	4291      	cmp	r1, r2
   24e22:	d1f9      	bne.n	24e18 <memcpy+0xe>
   24e24:	bd10      	pop	{r4, pc}

00024e26 <__memcpy_chk>:
   24e26:	429a      	cmp	r2, r3
   24e28:	b508      	push	{r3, lr}
   24e2a:	d901      	bls.n	24e30 <__memcpy_chk+0xa>
   24e2c:	f7ee fd58 	bl	138e0 <__chk_fail>
   24e30:	4281      	cmp	r1, r0
   24e32:	d804      	bhi.n	24e3e <__memcpy_chk+0x18>
   24e34:	188b      	adds	r3, r1, r2
   24e36:	4298      	cmp	r0, r3
   24e38:	d3f8      	bcc.n	24e2c <__memcpy_chk+0x6>
   24e3a:	4281      	cmp	r1, r0
   24e3c:	d102      	bne.n	24e44 <__memcpy_chk+0x1e>
   24e3e:	1883      	adds	r3, r0, r2
   24e40:	4299      	cmp	r1, r3
   24e42:	d3f3      	bcc.n	24e2c <__memcpy_chk+0x6>
   24e44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24e48:	f7ff bfdf 	b.w	24e0a <memcpy>

00024e4c <memset>:
   24e4c:	4402      	add	r2, r0
   24e4e:	4603      	mov	r3, r0
   24e50:	4293      	cmp	r3, r2
   24e52:	d100      	bne.n	24e56 <memset+0xa>
   24e54:	4770      	bx	lr
   24e56:	f803 1b01 	strb.w	r1, [r3], #1
   24e5a:	e7f9      	b.n	24e50 <memset+0x4>

00024e5c <__memset_chk>:
   24e5c:	429a      	cmp	r2, r3
   24e5e:	b508      	push	{r3, lr}
   24e60:	d901      	bls.n	24e66 <__memset_chk+0xa>
   24e62:	f7ee fd3d 	bl	138e0 <__chk_fail>
   24e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24e6a:	f7ff bfef 	b.w	24e4c <memset>

00024e6e <__cvt>:
   24e6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e72:	b085      	sub	sp, #20
   24e74:	ec57 6b10 	vmov	r6, r7, d0
   24e78:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   24e7c:	2f00      	cmp	r7, #0
   24e7e:	460c      	mov	r4, r1
   24e80:	4690      	mov	r8, r2
   24e82:	4619      	mov	r1, r3
   24e84:	bfb8      	it	lt
   24e86:	4632      	movlt	r2, r6
   24e88:	463b      	mov	r3, r7
   24e8a:	f02b 0a20 	bic.w	sl, fp, #32
   24e8e:	bfbb      	ittet	lt
   24e90:	f107 4300 	addlt.w	r3, r7, #2147483648	; 0x80000000
   24e94:	461f      	movlt	r7, r3
   24e96:	2300      	movge	r3, #0
   24e98:	232d      	movlt	r3, #45	; 0x2d
   24e9a:	bfb8      	it	lt
   24e9c:	4616      	movlt	r6, r2
   24e9e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   24ea2:	700b      	strb	r3, [r1, #0]
   24ea4:	d005      	beq.n	24eb2 <__cvt+0x44>
   24ea6:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   24eaa:	d100      	bne.n	24eae <__cvt+0x40>
   24eac:	3401      	adds	r4, #1
   24eae:	2102      	movs	r1, #2
   24eb0:	e000      	b.n	24eb4 <__cvt+0x46>
   24eb2:	2103      	movs	r1, #3
   24eb4:	ab03      	add	r3, sp, #12
   24eb6:	9301      	str	r3, [sp, #4]
   24eb8:	ab02      	add	r3, sp, #8
   24eba:	9300      	str	r3, [sp, #0]
   24ebc:	ec47 6b10 	vmov	d0, r6, r7
   24ec0:	464b      	mov	r3, r9
   24ec2:	4622      	mov	r2, r4
   24ec4:	f7e9 f9d8 	bl	e278 <_dtoa_r>
   24ec8:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   24ecc:	4605      	mov	r5, r0
   24ece:	d119      	bne.n	24f04 <__cvt+0x96>
   24ed0:	f018 0f01 	tst.w	r8, #1
   24ed4:	d00e      	beq.n	24ef4 <__cvt+0x86>
   24ed6:	eb05 0804 	add.w	r8, r5, r4
   24eda:	2200      	movs	r2, #0
   24edc:	2300      	movs	r3, #0
   24ede:	4630      	mov	r0, r6
   24ee0:	4639      	mov	r1, r7
   24ee2:	f7dc fd81 	bl	19e8 <__aeabi_dcmpeq>
   24ee6:	b108      	cbz	r0, 24eec <__cvt+0x7e>
   24ee8:	f8cd 800c 	str.w	r8, [sp, #12]
   24eec:	2230      	movs	r2, #48	; 0x30
   24eee:	9b03      	ldr	r3, [sp, #12]
   24ef0:	4543      	cmp	r3, r8
   24ef2:	d321      	bcc.n	24f38 <__cvt+0xca>
   24ef4:	9b03      	ldr	r3, [sp, #12]
   24ef6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   24ef8:	1b5b      	subs	r3, r3, r5
   24efa:	4628      	mov	r0, r5
   24efc:	6013      	str	r3, [r2, #0]
   24efe:	b005      	add	sp, #20
   24f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   24f08:	d0e2      	beq.n	24ed0 <__cvt+0x62>
   24f0a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   24f0e:	eb00 0804 	add.w	r8, r0, r4
   24f12:	d1e2      	bne.n	24eda <__cvt+0x6c>
   24f14:	7803      	ldrb	r3, [r0, #0]
   24f16:	2b30      	cmp	r3, #48	; 0x30
   24f18:	d10a      	bne.n	24f30 <__cvt+0xc2>
   24f1a:	2200      	movs	r2, #0
   24f1c:	2300      	movs	r3, #0
   24f1e:	4630      	mov	r0, r6
   24f20:	4639      	mov	r1, r7
   24f22:	f7dc fd61 	bl	19e8 <__aeabi_dcmpeq>
   24f26:	b918      	cbnz	r0, 24f30 <__cvt+0xc2>
   24f28:	f1c4 0401 	rsb	r4, r4, #1
   24f2c:	f8c9 4000 	str.w	r4, [r9]
   24f30:	f8d9 3000 	ldr.w	r3, [r9]
   24f34:	4498      	add	r8, r3
   24f36:	e7d0      	b.n	24eda <__cvt+0x6c>
   24f38:	1c59      	adds	r1, r3, #1
   24f3a:	9103      	str	r1, [sp, #12]
   24f3c:	701a      	strb	r2, [r3, #0]
   24f3e:	e7d6      	b.n	24eee <__cvt+0x80>

00024f40 <__exponent>:
   24f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24f42:	2900      	cmp	r1, #0
   24f44:	bfba      	itte	lt
   24f46:	4249      	neglt	r1, r1
   24f48:	232d      	movlt	r3, #45	; 0x2d
   24f4a:	232b      	movge	r3, #43	; 0x2b
   24f4c:	2909      	cmp	r1, #9
   24f4e:	7002      	strb	r2, [r0, #0]
   24f50:	7043      	strb	r3, [r0, #1]
   24f52:	dd29      	ble.n	24fa8 <__exponent+0x68>
   24f54:	f10d 0307 	add.w	r3, sp, #7
   24f58:	461d      	mov	r5, r3
   24f5a:	270a      	movs	r7, #10
   24f5c:	461a      	mov	r2, r3
   24f5e:	fbb1 f6f7 	udiv	r6, r1, r7
   24f62:	fb07 1416 	mls	r4, r7, r6, r1
   24f66:	3430      	adds	r4, #48	; 0x30
   24f68:	f802 4c01 	strb.w	r4, [r2, #-1]
   24f6c:	460c      	mov	r4, r1
   24f6e:	2c63      	cmp	r4, #99	; 0x63
   24f70:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   24f74:	4631      	mov	r1, r6
   24f76:	dcf1      	bgt.n	24f5c <__exponent+0x1c>
   24f78:	3130      	adds	r1, #48	; 0x30
   24f7a:	1e94      	subs	r4, r2, #2
   24f7c:	f803 1c01 	strb.w	r1, [r3, #-1]
   24f80:	1c41      	adds	r1, r0, #1
   24f82:	4623      	mov	r3, r4
   24f84:	42ab      	cmp	r3, r5
   24f86:	d30a      	bcc.n	24f9e <__exponent+0x5e>
   24f88:	f10d 0309 	add.w	r3, sp, #9
   24f8c:	1a9b      	subs	r3, r3, r2
   24f8e:	42ac      	cmp	r4, r5
   24f90:	bf88      	it	hi
   24f92:	2300      	movhi	r3, #0
   24f94:	3302      	adds	r3, #2
   24f96:	4403      	add	r3, r0
   24f98:	1a18      	subs	r0, r3, r0
   24f9a:	b003      	add	sp, #12
   24f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24f9e:	f813 6b01 	ldrb.w	r6, [r3], #1
   24fa2:	f801 6f01 	strb.w	r6, [r1, #1]!
   24fa6:	e7ed      	b.n	24f84 <__exponent+0x44>
   24fa8:	2330      	movs	r3, #48	; 0x30
   24faa:	3130      	adds	r1, #48	; 0x30
   24fac:	7083      	strb	r3, [r0, #2]
   24fae:	70c1      	strb	r1, [r0, #3]
   24fb0:	1d03      	adds	r3, r0, #4
   24fb2:	e7f1      	b.n	24f98 <__exponent+0x58>

00024fb4 <_printf_common>:
   24fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24fb8:	4616      	mov	r6, r2
   24fba:	4698      	mov	r8, r3
   24fbc:	688a      	ldr	r2, [r1, #8]
   24fbe:	690b      	ldr	r3, [r1, #16]
   24fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
   24fc4:	4293      	cmp	r3, r2
   24fc6:	bfb8      	it	lt
   24fc8:	4613      	movlt	r3, r2
   24fca:	6033      	str	r3, [r6, #0]
   24fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   24fd0:	4607      	mov	r7, r0
   24fd2:	460c      	mov	r4, r1
   24fd4:	b10a      	cbz	r2, 24fda <_printf_common+0x26>
   24fd6:	3301      	adds	r3, #1
   24fd8:	6033      	str	r3, [r6, #0]
   24fda:	6823      	ldr	r3, [r4, #0]
   24fdc:	0699      	lsls	r1, r3, #26
   24fde:	bf42      	ittt	mi
   24fe0:	6833      	ldrmi	r3, [r6, #0]
   24fe2:	3302      	addmi	r3, #2
   24fe4:	6033      	strmi	r3, [r6, #0]
   24fe6:	6825      	ldr	r5, [r4, #0]
   24fe8:	f015 0506 	ands.w	r5, r5, #6
   24fec:	d106      	bne.n	24ffc <_printf_common+0x48>
   24fee:	f104 0a19 	add.w	sl, r4, #25
   24ff2:	68e3      	ldr	r3, [r4, #12]
   24ff4:	6832      	ldr	r2, [r6, #0]
   24ff6:	1a9b      	subs	r3, r3, r2
   24ff8:	42ab      	cmp	r3, r5
   24ffa:	dc26      	bgt.n	2504a <_printf_common+0x96>
   24ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   25000:	6822      	ldr	r2, [r4, #0]
   25002:	3b00      	subs	r3, #0
   25004:	bf18      	it	ne
   25006:	2301      	movne	r3, #1
   25008:	0692      	lsls	r2, r2, #26
   2500a:	d42b      	bmi.n	25064 <_printf_common+0xb0>
   2500c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   25010:	4641      	mov	r1, r8
   25012:	4638      	mov	r0, r7
   25014:	47c8      	blx	r9
   25016:	3001      	adds	r0, #1
   25018:	d01e      	beq.n	25058 <_printf_common+0xa4>
   2501a:	6823      	ldr	r3, [r4, #0]
   2501c:	6922      	ldr	r2, [r4, #16]
   2501e:	f003 0306 	and.w	r3, r3, #6
   25022:	2b04      	cmp	r3, #4
   25024:	bf02      	ittt	eq
   25026:	68e5      	ldreq	r5, [r4, #12]
   25028:	6833      	ldreq	r3, [r6, #0]
   2502a:	1aed      	subeq	r5, r5, r3
   2502c:	68a3      	ldr	r3, [r4, #8]
   2502e:	bf0c      	ite	eq
   25030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   25034:	2500      	movne	r5, #0
   25036:	4293      	cmp	r3, r2
   25038:	bfc4      	itt	gt
   2503a:	1a9b      	subgt	r3, r3, r2
   2503c:	18ed      	addgt	r5, r5, r3
   2503e:	2600      	movs	r6, #0
   25040:	341a      	adds	r4, #26
   25042:	42b5      	cmp	r5, r6
   25044:	d11a      	bne.n	2507c <_printf_common+0xc8>
   25046:	2000      	movs	r0, #0
   25048:	e008      	b.n	2505c <_printf_common+0xa8>
   2504a:	2301      	movs	r3, #1
   2504c:	4652      	mov	r2, sl
   2504e:	4641      	mov	r1, r8
   25050:	4638      	mov	r0, r7
   25052:	47c8      	blx	r9
   25054:	3001      	adds	r0, #1
   25056:	d103      	bne.n	25060 <_printf_common+0xac>
   25058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2505c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25060:	3501      	adds	r5, #1
   25062:	e7c6      	b.n	24ff2 <_printf_common+0x3e>
   25064:	18e1      	adds	r1, r4, r3
   25066:	1c5a      	adds	r2, r3, #1
   25068:	2030      	movs	r0, #48	; 0x30
   2506a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2506e:	4422      	add	r2, r4
   25070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   25074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   25078:	3302      	adds	r3, #2
   2507a:	e7c7      	b.n	2500c <_printf_common+0x58>
   2507c:	2301      	movs	r3, #1
   2507e:	4622      	mov	r2, r4
   25080:	4641      	mov	r1, r8
   25082:	4638      	mov	r0, r7
   25084:	47c8      	blx	r9
   25086:	3001      	adds	r0, #1
   25088:	d0e6      	beq.n	25058 <_printf_common+0xa4>
   2508a:	3601      	adds	r6, #1
   2508c:	e7d9      	b.n	25042 <_printf_common+0x8e>

0002508e <strncpy>:
   2508e:	b510      	push	{r4, lr}
   25090:	3901      	subs	r1, #1
   25092:	4603      	mov	r3, r0
   25094:	b132      	cbz	r2, 250a4 <strncpy+0x16>
   25096:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2509a:	f803 4b01 	strb.w	r4, [r3], #1
   2509e:	3a01      	subs	r2, #1
   250a0:	2c00      	cmp	r4, #0
   250a2:	d1f7      	bne.n	25094 <strncpy+0x6>
   250a4:	441a      	add	r2, r3
   250a6:	2100      	movs	r1, #0
   250a8:	4293      	cmp	r3, r2
   250aa:	d100      	bne.n	250ae <strncpy+0x20>
   250ac:	bd10      	pop	{r4, pc}
   250ae:	f803 1b01 	strb.w	r1, [r3], #1
   250b2:	e7f9      	b.n	250a8 <strncpy+0x1a>

000250b4 <strnlen>:
   250b4:	b510      	push	{r4, lr}
   250b6:	4602      	mov	r2, r0
   250b8:	4401      	add	r1, r0
   250ba:	428a      	cmp	r2, r1
   250bc:	4613      	mov	r3, r2
   250be:	d003      	beq.n	250c8 <strnlen+0x14>
   250c0:	781c      	ldrb	r4, [r3, #0]
   250c2:	3201      	adds	r2, #1
   250c4:	2c00      	cmp	r4, #0
   250c6:	d1f8      	bne.n	250ba <strnlen+0x6>
   250c8:	1a18      	subs	r0, r3, r0
   250ca:	bd10      	pop	{r4, pc}

000250cc <sulp>:
   250cc:	b570      	push	{r4, r5, r6, lr}
   250ce:	4604      	mov	r4, r0
   250d0:	460d      	mov	r5, r1
   250d2:	ec45 4b10 	vmov	d0, r4, r5
   250d6:	4616      	mov	r6, r2
   250d8:	f7f6 ff00 	bl	1bedc <__ulp>
   250dc:	ec51 0b10 	vmov	r0, r1, d0
   250e0:	b17e      	cbz	r6, 25102 <sulp+0x36>
   250e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   250e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   250ea:	2b00      	cmp	r3, #0
   250ec:	dd09      	ble.n	25102 <sulp+0x36>
   250ee:	051b      	lsls	r3, r3, #20
   250f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   250f4:	2400      	movs	r4, #0
   250f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   250fa:	4622      	mov	r2, r4
   250fc:	462b      	mov	r3, r5
   250fe:	f7dc fa0b 	bl	1518 <__aeabi_dmul>
   25102:	ec41 0b10 	vmov	d0, r0, r1
   25106:	bd70      	pop	{r4, r5, r6, pc}

00025108 <_strtol_r>:
   25108:	f7f6 b91e 	b.w	1b348 <_strtol_l.constprop.0>

0002510c <quorem>:
   2510c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25110:	6903      	ldr	r3, [r0, #16]
   25112:	690c      	ldr	r4, [r1, #16]
   25114:	42a3      	cmp	r3, r4
   25116:	4607      	mov	r7, r0
   25118:	db7e      	blt.n	25218 <quorem+0x10c>
   2511a:	3c01      	subs	r4, #1
   2511c:	f101 0814 	add.w	r8, r1, #20
   25120:	00a3      	lsls	r3, r4, #2
   25122:	f100 0514 	add.w	r5, r0, #20
   25126:	9300      	str	r3, [sp, #0]
   25128:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2512c:	9301      	str	r3, [sp, #4]
   2512e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   25132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   25136:	3301      	adds	r3, #1
   25138:	429a      	cmp	r2, r3
   2513a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2513e:	fbb2 f6f3 	udiv	r6, r2, r3
   25142:	d32e      	bcc.n	251a2 <quorem+0x96>
   25144:	f04f 0a00 	mov.w	sl, #0
   25148:	46c4      	mov	ip, r8
   2514a:	46ae      	mov	lr, r5
   2514c:	46d3      	mov	fp, sl
   2514e:	f85c 3b04 	ldr.w	r3, [ip], #4
   25152:	b298      	uxth	r0, r3
   25154:	fb06 a000 	mla	r0, r6, r0, sl
   25158:	0c02      	lsrs	r2, r0, #16
   2515a:	0c1b      	lsrs	r3, r3, #16
   2515c:	fb06 2303 	mla	r3, r6, r3, r2
   25160:	f8de 2000 	ldr.w	r2, [lr]
   25164:	b280      	uxth	r0, r0
   25166:	b292      	uxth	r2, r2
   25168:	1a12      	subs	r2, r2, r0
   2516a:	445a      	add	r2, fp
   2516c:	f8de 0000 	ldr.w	r0, [lr]
   25170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   25174:	b29b      	uxth	r3, r3
   25176:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   2517a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   2517e:	b292      	uxth	r2, r2
   25180:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   25184:	45e1      	cmp	r9, ip
   25186:	f84e 2b04 	str.w	r2, [lr], #4
   2518a:	ea4f 4b23 	mov.w	fp, r3, asr #16
   2518e:	d2de      	bcs.n	2514e <quorem+0x42>
   25190:	9b00      	ldr	r3, [sp, #0]
   25192:	58eb      	ldr	r3, [r5, r3]
   25194:	b92b      	cbnz	r3, 251a2 <quorem+0x96>
   25196:	9b01      	ldr	r3, [sp, #4]
   25198:	3b04      	subs	r3, #4
   2519a:	429d      	cmp	r5, r3
   2519c:	461a      	mov	r2, r3
   2519e:	d32f      	bcc.n	25200 <quorem+0xf4>
   251a0:	613c      	str	r4, [r7, #16]
   251a2:	4638      	mov	r0, r7
   251a4:	f000 f9c2 	bl	2552c <__mcmp>
   251a8:	2800      	cmp	r0, #0
   251aa:	db25      	blt.n	251f8 <quorem+0xec>
   251ac:	4629      	mov	r1, r5
   251ae:	2000      	movs	r0, #0
   251b0:	f858 2b04 	ldr.w	r2, [r8], #4
   251b4:	f8d1 c000 	ldr.w	ip, [r1]
   251b8:	fa1f fe82 	uxth.w	lr, r2
   251bc:	fa1f f38c 	uxth.w	r3, ip
   251c0:	eba3 030e 	sub.w	r3, r3, lr
   251c4:	4403      	add	r3, r0
   251c6:	0c12      	lsrs	r2, r2, #16
   251c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   251cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   251d0:	b29b      	uxth	r3, r3
   251d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   251d6:	45c1      	cmp	r9, r8
   251d8:	f841 3b04 	str.w	r3, [r1], #4
   251dc:	ea4f 4022 	mov.w	r0, r2, asr #16
   251e0:	d2e6      	bcs.n	251b0 <quorem+0xa4>
   251e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   251e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   251ea:	b922      	cbnz	r2, 251f6 <quorem+0xea>
   251ec:	3b04      	subs	r3, #4
   251ee:	429d      	cmp	r5, r3
   251f0:	461a      	mov	r2, r3
   251f2:	d30b      	bcc.n	2520c <quorem+0x100>
   251f4:	613c      	str	r4, [r7, #16]
   251f6:	3601      	adds	r6, #1
   251f8:	4630      	mov	r0, r6
   251fa:	b003      	add	sp, #12
   251fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25200:	6812      	ldr	r2, [r2, #0]
   25202:	3b04      	subs	r3, #4
   25204:	2a00      	cmp	r2, #0
   25206:	d1cb      	bne.n	251a0 <quorem+0x94>
   25208:	3c01      	subs	r4, #1
   2520a:	e7c6      	b.n	2519a <quorem+0x8e>
   2520c:	6812      	ldr	r2, [r2, #0]
   2520e:	3b04      	subs	r3, #4
   25210:	2a00      	cmp	r2, #0
   25212:	d1ef      	bne.n	251f4 <quorem+0xe8>
   25214:	3c01      	subs	r4, #1
   25216:	e7ea      	b.n	251ee <quorem+0xe2>
   25218:	2000      	movs	r0, #0
   2521a:	e7ee      	b.n	251fa <quorem+0xee>

0002521c <rshift>:
   2521c:	6903      	ldr	r3, [r0, #16]
   2521e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   25222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25226:	ea4f 1261 	mov.w	r2, r1, asr #5
   2522a:	dc04      	bgt.n	25236 <rshift+0x1a>
   2522c:	2300      	movs	r3, #0
   2522e:	6103      	str	r3, [r0, #16]
   25230:	2300      	movs	r3, #0
   25232:	6143      	str	r3, [r0, #20]
   25234:	e030      	b.n	25298 <rshift+0x7c>
   25236:	f100 0414 	add.w	r4, r0, #20
   2523a:	f011 011f 	ands.w	r1, r1, #31
   2523e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   25242:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   25246:	d10c      	bne.n	25262 <rshift+0x46>
   25248:	f100 0710 	add.w	r7, r0, #16
   2524c:	4629      	mov	r1, r5
   2524e:	42b1      	cmp	r1, r6
   25250:	d330      	bcc.n	252b4 <rshift+0x98>
   25252:	1a9b      	subs	r3, r3, r2
   25254:	009b      	lsls	r3, r3, #2
   25256:	1eea      	subs	r2, r5, #3
   25258:	4296      	cmp	r6, r2
   2525a:	bf38      	it	cc
   2525c:	2300      	movcc	r3, #0
   2525e:	4423      	add	r3, r4
   25260:	e015      	b.n	2528e <rshift+0x72>
   25262:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   25266:	f1c1 0820 	rsb	r8, r1, #32
   2526a:	40cf      	lsrs	r7, r1
   2526c:	f105 0e04 	add.w	lr, r5, #4
   25270:	46a1      	mov	r9, r4
   25272:	4576      	cmp	r6, lr
   25274:	46f4      	mov	ip, lr
   25276:	d811      	bhi.n	2529c <rshift+0x80>
   25278:	1a9a      	subs	r2, r3, r2
   2527a:	0092      	lsls	r2, r2, #2
   2527c:	3a04      	subs	r2, #4
   2527e:	3501      	adds	r5, #1
   25280:	42ae      	cmp	r6, r5
   25282:	bf38      	it	cc
   25284:	2200      	movcc	r2, #0
   25286:	18a3      	adds	r3, r4, r2
   25288:	50a7      	str	r7, [r4, r2]
   2528a:	b107      	cbz	r7, 2528e <rshift+0x72>
   2528c:	3304      	adds	r3, #4
   2528e:	1b1a      	subs	r2, r3, r4
   25290:	1092      	asrs	r2, r2, #2
   25292:	42a3      	cmp	r3, r4
   25294:	6102      	str	r2, [r0, #16]
   25296:	d0cb      	beq.n	25230 <rshift+0x14>
   25298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2529c:	f8dc c000 	ldr.w	ip, [ip]
   252a0:	fa0c fc08 	lsl.w	ip, ip, r8
   252a4:	ea4c 0707 	orr.w	r7, ip, r7
   252a8:	f849 7b04 	str.w	r7, [r9], #4
   252ac:	f85e 7b04 	ldr.w	r7, [lr], #4
   252b0:	40cf      	lsrs	r7, r1
   252b2:	e7de      	b.n	25272 <rshift+0x56>
   252b4:	f851 cb04 	ldr.w	ip, [r1], #4
   252b8:	f847 cf04 	str.w	ip, [r7, #4]!
   252bc:	e7c7      	b.n	2524e <rshift+0x32>

000252be <__hexdig_fun>:
   252be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   252c2:	2b09      	cmp	r3, #9
   252c4:	d802      	bhi.n	252cc <__hexdig_fun+0xe>
   252c6:	3820      	subs	r0, #32
   252c8:	b2c0      	uxtb	r0, r0
   252ca:	4770      	bx	lr
   252cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   252d0:	2b05      	cmp	r3, #5
   252d2:	d801      	bhi.n	252d8 <__hexdig_fun+0x1a>
   252d4:	3847      	subs	r0, #71	; 0x47
   252d6:	e7f7      	b.n	252c8 <__hexdig_fun+0xa>
   252d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   252dc:	2b05      	cmp	r3, #5
   252de:	d801      	bhi.n	252e4 <__hexdig_fun+0x26>
   252e0:	3827      	subs	r0, #39	; 0x27
   252e2:	e7f1      	b.n	252c8 <__hexdig_fun+0xa>
   252e4:	2000      	movs	r0, #0
   252e6:	4770      	bx	lr

000252e8 <L_shift>:
   252e8:	f1c2 0208 	rsb	r2, r2, #8
   252ec:	0092      	lsls	r2, r2, #2
   252ee:	b570      	push	{r4, r5, r6, lr}
   252f0:	f1c2 0620 	rsb	r6, r2, #32
   252f4:	6843      	ldr	r3, [r0, #4]
   252f6:	6804      	ldr	r4, [r0, #0]
   252f8:	fa03 f506 	lsl.w	r5, r3, r6
   252fc:	432c      	orrs	r4, r5
   252fe:	40d3      	lsrs	r3, r2
   25300:	6004      	str	r4, [r0, #0]
   25302:	f840 3f04 	str.w	r3, [r0, #4]!
   25306:	4288      	cmp	r0, r1
   25308:	d3f4      	bcc.n	252f4 <L_shift+0xc>
   2530a:	bd70      	pop	{r4, r5, r6, pc}

0002530c <__match>:
   2530c:	b530      	push	{r4, r5, lr}
   2530e:	6803      	ldr	r3, [r0, #0]
   25310:	3301      	adds	r3, #1
   25312:	f811 4b01 	ldrb.w	r4, [r1], #1
   25316:	b914      	cbnz	r4, 2531e <__match+0x12>
   25318:	6003      	str	r3, [r0, #0]
   2531a:	2001      	movs	r0, #1
   2531c:	bd30      	pop	{r4, r5, pc}
   2531e:	f813 2b01 	ldrb.w	r2, [r3], #1
   25322:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   25326:	2d19      	cmp	r5, #25
   25328:	bf98      	it	ls
   2532a:	3220      	addls	r2, #32
   2532c:	42a2      	cmp	r2, r4
   2532e:	d0f0      	beq.n	25312 <__match+0x6>
   25330:	2000      	movs	r0, #0
   25332:	e7f3      	b.n	2531c <__match+0x10>

00025334 <__hexnan>:
   25334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25338:	680b      	ldr	r3, [r1, #0]
   2533a:	6801      	ldr	r1, [r0, #0]
   2533c:	115e      	asrs	r6, r3, #5
   2533e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   25342:	f013 031f 	ands.w	r3, r3, #31
   25346:	b087      	sub	sp, #28
   25348:	bf18      	it	ne
   2534a:	3604      	addne	r6, #4
   2534c:	2500      	movs	r5, #0
   2534e:	1f37      	subs	r7, r6, #4
   25350:	4682      	mov	sl, r0
   25352:	4690      	mov	r8, r2
   25354:	9301      	str	r3, [sp, #4]
   25356:	f846 5c04 	str.w	r5, [r6, #-4]
   2535a:	46b9      	mov	r9, r7
   2535c:	463c      	mov	r4, r7
   2535e:	9502      	str	r5, [sp, #8]
   25360:	46ab      	mov	fp, r5
   25362:	784a      	ldrb	r2, [r1, #1]
   25364:	1c4b      	adds	r3, r1, #1
   25366:	9303      	str	r3, [sp, #12]
   25368:	b342      	cbz	r2, 253bc <__hexnan+0x88>
   2536a:	4610      	mov	r0, r2
   2536c:	9105      	str	r1, [sp, #20]
   2536e:	9204      	str	r2, [sp, #16]
   25370:	f7ff ffa5 	bl	252be <__hexdig_fun>
   25374:	2800      	cmp	r0, #0
   25376:	d151      	bne.n	2541c <__hexnan+0xe8>
   25378:	9a04      	ldr	r2, [sp, #16]
   2537a:	9905      	ldr	r1, [sp, #20]
   2537c:	2a20      	cmp	r2, #32
   2537e:	d818      	bhi.n	253b2 <__hexnan+0x7e>
   25380:	9b02      	ldr	r3, [sp, #8]
   25382:	459b      	cmp	fp, r3
   25384:	dd13      	ble.n	253ae <__hexnan+0x7a>
   25386:	454c      	cmp	r4, r9
   25388:	d206      	bcs.n	25398 <__hexnan+0x64>
   2538a:	2d07      	cmp	r5, #7
   2538c:	dc04      	bgt.n	25398 <__hexnan+0x64>
   2538e:	462a      	mov	r2, r5
   25390:	4649      	mov	r1, r9
   25392:	4620      	mov	r0, r4
   25394:	f7ff ffa8 	bl	252e8 <L_shift>
   25398:	4544      	cmp	r4, r8
   2539a:	d952      	bls.n	25442 <__hexnan+0x10e>
   2539c:	2300      	movs	r3, #0
   2539e:	f1a4 0904 	sub.w	r9, r4, #4
   253a2:	f844 3c04 	str.w	r3, [r4, #-4]
   253a6:	f8cd b008 	str.w	fp, [sp, #8]
   253aa:	464c      	mov	r4, r9
   253ac:	461d      	mov	r5, r3
   253ae:	9903      	ldr	r1, [sp, #12]
   253b0:	e7d7      	b.n	25362 <__hexnan+0x2e>
   253b2:	2a29      	cmp	r2, #41	; 0x29
   253b4:	d157      	bne.n	25466 <__hexnan+0x132>
   253b6:	3102      	adds	r1, #2
   253b8:	f8ca 1000 	str.w	r1, [sl]
   253bc:	f1bb 0f00 	cmp.w	fp, #0
   253c0:	d051      	beq.n	25466 <__hexnan+0x132>
   253c2:	454c      	cmp	r4, r9
   253c4:	d206      	bcs.n	253d4 <__hexnan+0xa0>
   253c6:	2d07      	cmp	r5, #7
   253c8:	dc04      	bgt.n	253d4 <__hexnan+0xa0>
   253ca:	462a      	mov	r2, r5
   253cc:	4649      	mov	r1, r9
   253ce:	4620      	mov	r0, r4
   253d0:	f7ff ff8a 	bl	252e8 <L_shift>
   253d4:	4544      	cmp	r4, r8
   253d6:	d936      	bls.n	25446 <__hexnan+0x112>
   253d8:	f1a8 0204 	sub.w	r2, r8, #4
   253dc:	4623      	mov	r3, r4
   253de:	f853 1b04 	ldr.w	r1, [r3], #4
   253e2:	f842 1f04 	str.w	r1, [r2, #4]!
   253e6:	429f      	cmp	r7, r3
   253e8:	d2f9      	bcs.n	253de <__hexnan+0xaa>
   253ea:	1b3b      	subs	r3, r7, r4
   253ec:	f023 0303 	bic.w	r3, r3, #3
   253f0:	3304      	adds	r3, #4
   253f2:	3401      	adds	r4, #1
   253f4:	3e03      	subs	r6, #3
   253f6:	42b4      	cmp	r4, r6
   253f8:	bf88      	it	hi
   253fa:	2304      	movhi	r3, #4
   253fc:	4443      	add	r3, r8
   253fe:	2200      	movs	r2, #0
   25400:	f843 2b04 	str.w	r2, [r3], #4
   25404:	429f      	cmp	r7, r3
   25406:	d2fb      	bcs.n	25400 <__hexnan+0xcc>
   25408:	683b      	ldr	r3, [r7, #0]
   2540a:	b91b      	cbnz	r3, 25414 <__hexnan+0xe0>
   2540c:	4547      	cmp	r7, r8
   2540e:	d128      	bne.n	25462 <__hexnan+0x12e>
   25410:	2301      	movs	r3, #1
   25412:	603b      	str	r3, [r7, #0]
   25414:	2005      	movs	r0, #5
   25416:	b007      	add	sp, #28
   25418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2541c:	3501      	adds	r5, #1
   2541e:	2d08      	cmp	r5, #8
   25420:	f10b 0b01 	add.w	fp, fp, #1
   25424:	dd06      	ble.n	25434 <__hexnan+0x100>
   25426:	4544      	cmp	r4, r8
   25428:	d9c1      	bls.n	253ae <__hexnan+0x7a>
   2542a:	2300      	movs	r3, #0
   2542c:	f844 3c04 	str.w	r3, [r4, #-4]
   25430:	2501      	movs	r5, #1
   25432:	3c04      	subs	r4, #4
   25434:	6822      	ldr	r2, [r4, #0]
   25436:	f000 000f 	and.w	r0, r0, #15
   2543a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   2543e:	6020      	str	r0, [r4, #0]
   25440:	e7b5      	b.n	253ae <__hexnan+0x7a>
   25442:	2508      	movs	r5, #8
   25444:	e7b3      	b.n	253ae <__hexnan+0x7a>
   25446:	9b01      	ldr	r3, [sp, #4]
   25448:	2b00      	cmp	r3, #0
   2544a:	d0dd      	beq.n	25408 <__hexnan+0xd4>
   2544c:	f1c3 0320 	rsb	r3, r3, #32
   25450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25454:	40da      	lsrs	r2, r3
   25456:	f856 3c04 	ldr.w	r3, [r6, #-4]
   2545a:	4013      	ands	r3, r2
   2545c:	f846 3c04 	str.w	r3, [r6, #-4]
   25460:	e7d2      	b.n	25408 <__hexnan+0xd4>
   25462:	3f04      	subs	r7, #4
   25464:	e7d0      	b.n	25408 <__hexnan+0xd4>
   25466:	2004      	movs	r0, #4
   25468:	e7d5      	b.n	25416 <__hexnan+0xe2>

0002546a <__ascii_mbtowc>:
   2546a:	b082      	sub	sp, #8
   2546c:	b901      	cbnz	r1, 25470 <__ascii_mbtowc+0x6>
   2546e:	a901      	add	r1, sp, #4
   25470:	b142      	cbz	r2, 25484 <__ascii_mbtowc+0x1a>
   25472:	b14b      	cbz	r3, 25488 <__ascii_mbtowc+0x1e>
   25474:	7813      	ldrb	r3, [r2, #0]
   25476:	600b      	str	r3, [r1, #0]
   25478:	7812      	ldrb	r2, [r2, #0]
   2547a:	1e10      	subs	r0, r2, #0
   2547c:	bf18      	it	ne
   2547e:	2001      	movne	r0, #1
   25480:	b002      	add	sp, #8
   25482:	4770      	bx	lr
   25484:	4610      	mov	r0, r2
   25486:	e7fb      	b.n	25480 <__ascii_mbtowc+0x16>
   25488:	f06f 0001 	mvn.w	r0, #1
   2548c:	e7f8      	b.n	25480 <__ascii_mbtowc+0x16>

0002548e <__hi0bits>:
   2548e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   25492:	4603      	mov	r3, r0
   25494:	bf36      	itet	cc
   25496:	0403      	lslcc	r3, r0, #16
   25498:	2000      	movcs	r0, #0
   2549a:	2010      	movcc	r0, #16
   2549c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   254a0:	bf3c      	itt	cc
   254a2:	021b      	lslcc	r3, r3, #8
   254a4:	3008      	addcc	r0, #8
   254a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   254aa:	bf3c      	itt	cc
   254ac:	011b      	lslcc	r3, r3, #4
   254ae:	3004      	addcc	r0, #4
   254b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   254b4:	d303      	bcc.n	254be <__hi0bits+0x30>
   254b6:	2b00      	cmp	r3, #0
   254b8:	db0a      	blt.n	254d0 <__hi0bits+0x42>
   254ba:	3001      	adds	r0, #1
   254bc:	4770      	bx	lr
   254be:	009b      	lsls	r3, r3, #2
   254c0:	d501      	bpl.n	254c6 <__hi0bits+0x38>
   254c2:	3002      	adds	r0, #2
   254c4:	4770      	bx	lr
   254c6:	005b      	lsls	r3, r3, #1
   254c8:	d501      	bpl.n	254ce <__hi0bits+0x40>
   254ca:	3003      	adds	r0, #3
   254cc:	4770      	bx	lr
   254ce:	2020      	movs	r0, #32
   254d0:	4770      	bx	lr

000254d2 <__lo0bits>:
   254d2:	6803      	ldr	r3, [r0, #0]
   254d4:	4602      	mov	r2, r0
   254d6:	f013 0007 	ands.w	r0, r3, #7
   254da:	d00b      	beq.n	254f4 <__lo0bits+0x22>
   254dc:	07d9      	lsls	r1, r3, #31
   254de:	d421      	bmi.n	25524 <__lo0bits+0x52>
   254e0:	0798      	lsls	r0, r3, #30
   254e2:	bf49      	itett	mi
   254e4:	085b      	lsrmi	r3, r3, #1
   254e6:	089b      	lsrpl	r3, r3, #2
   254e8:	2001      	movmi	r0, #1
   254ea:	6013      	strmi	r3, [r2, #0]
   254ec:	bf5c      	itt	pl
   254ee:	6013      	strpl	r3, [r2, #0]
   254f0:	2002      	movpl	r0, #2
   254f2:	4770      	bx	lr
   254f4:	b299      	uxth	r1, r3
   254f6:	b909      	cbnz	r1, 254fc <__lo0bits+0x2a>
   254f8:	0c1b      	lsrs	r3, r3, #16
   254fa:	2010      	movs	r0, #16
   254fc:	b2d9      	uxtb	r1, r3
   254fe:	b909      	cbnz	r1, 25504 <__lo0bits+0x32>
   25500:	3008      	adds	r0, #8
   25502:	0a1b      	lsrs	r3, r3, #8
   25504:	0719      	lsls	r1, r3, #28
   25506:	bf04      	itt	eq
   25508:	091b      	lsreq	r3, r3, #4
   2550a:	3004      	addeq	r0, #4
   2550c:	0799      	lsls	r1, r3, #30
   2550e:	bf04      	itt	eq
   25510:	089b      	lsreq	r3, r3, #2
   25512:	3002      	addeq	r0, #2
   25514:	07d9      	lsls	r1, r3, #31
   25516:	d403      	bmi.n	25520 <__lo0bits+0x4e>
   25518:	085b      	lsrs	r3, r3, #1
   2551a:	f100 0001 	add.w	r0, r0, #1
   2551e:	d003      	beq.n	25528 <__lo0bits+0x56>
   25520:	6013      	str	r3, [r2, #0]
   25522:	4770      	bx	lr
   25524:	2000      	movs	r0, #0
   25526:	4770      	bx	lr
   25528:	2020      	movs	r0, #32
   2552a:	4770      	bx	lr

0002552c <__mcmp>:
   2552c:	690a      	ldr	r2, [r1, #16]
   2552e:	4603      	mov	r3, r0
   25530:	6900      	ldr	r0, [r0, #16]
   25532:	1a80      	subs	r0, r0, r2
   25534:	b530      	push	{r4, r5, lr}
   25536:	d10e      	bne.n	25556 <__mcmp+0x2a>
   25538:	3314      	adds	r3, #20
   2553a:	3114      	adds	r1, #20
   2553c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   25540:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   25544:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   25548:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2554c:	4295      	cmp	r5, r2
   2554e:	d003      	beq.n	25558 <__mcmp+0x2c>
   25550:	d205      	bcs.n	2555e <__mcmp+0x32>
   25552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25556:	bd30      	pop	{r4, r5, pc}
   25558:	42a3      	cmp	r3, r4
   2555a:	d3f3      	bcc.n	25544 <__mcmp+0x18>
   2555c:	e7fb      	b.n	25556 <__mcmp+0x2a>
   2555e:	2001      	movs	r0, #1
   25560:	e7f9      	b.n	25556 <__mcmp+0x2a>

00025562 <__ratio>:
   25562:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25566:	b085      	sub	sp, #20
   25568:	e9cd 1000 	strd	r1, r0, [sp]
   2556c:	a902      	add	r1, sp, #8
   2556e:	f7f6 fcdb 	bl	1bf28 <__b2d>
   25572:	9800      	ldr	r0, [sp, #0]
   25574:	a903      	add	r1, sp, #12
   25576:	ec55 4b10 	vmov	r4, r5, d0
   2557a:	f7f6 fcd5 	bl	1bf28 <__b2d>
   2557e:	9b01      	ldr	r3, [sp, #4]
   25580:	6919      	ldr	r1, [r3, #16]
   25582:	9b00      	ldr	r3, [sp, #0]
   25584:	691b      	ldr	r3, [r3, #16]
   25586:	1ac9      	subs	r1, r1, r3
   25588:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2558c:	1a9b      	subs	r3, r3, r2
   2558e:	ec5b ab10 	vmov	sl, fp, d0
   25592:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   25596:	2b00      	cmp	r3, #0
   25598:	bfce      	itee	gt
   2559a:	462a      	movgt	r2, r5
   2559c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   255a0:	465a      	movle	r2, fp
   255a2:	462f      	mov	r7, r5
   255a4:	46d9      	mov	r9, fp
   255a6:	bfcc      	ite	gt
   255a8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   255ac:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   255b0:	464b      	mov	r3, r9
   255b2:	4652      	mov	r2, sl
   255b4:	4620      	mov	r0, r4
   255b6:	4639      	mov	r1, r7
   255b8:	f7dc f8d8 	bl	176c <__aeabi_ddiv>
   255bc:	ec41 0b10 	vmov	d0, r0, r1
   255c0:	b005      	add	sp, #20
   255c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000255c6 <__copybits>:
   255c6:	3901      	subs	r1, #1
   255c8:	b570      	push	{r4, r5, r6, lr}
   255ca:	1149      	asrs	r1, r1, #5
   255cc:	6914      	ldr	r4, [r2, #16]
   255ce:	3101      	adds	r1, #1
   255d0:	f102 0314 	add.w	r3, r2, #20
   255d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   255d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   255dc:	1f05      	subs	r5, r0, #4
   255de:	42a3      	cmp	r3, r4
   255e0:	d30c      	bcc.n	255fc <__copybits+0x36>
   255e2:	1aa3      	subs	r3, r4, r2
   255e4:	3b11      	subs	r3, #17
   255e6:	f023 0303 	bic.w	r3, r3, #3
   255ea:	3211      	adds	r2, #17
   255ec:	42a2      	cmp	r2, r4
   255ee:	bf88      	it	hi
   255f0:	2300      	movhi	r3, #0
   255f2:	4418      	add	r0, r3
   255f4:	2300      	movs	r3, #0
   255f6:	4288      	cmp	r0, r1
   255f8:	d305      	bcc.n	25606 <__copybits+0x40>
   255fa:	bd70      	pop	{r4, r5, r6, pc}
   255fc:	f853 6b04 	ldr.w	r6, [r3], #4
   25600:	f845 6f04 	str.w	r6, [r5, #4]!
   25604:	e7eb      	b.n	255de <__copybits+0x18>
   25606:	f840 3b04 	str.w	r3, [r0], #4
   2560a:	e7f4      	b.n	255f6 <__copybits+0x30>

0002560c <__any_on>:
   2560c:	f100 0214 	add.w	r2, r0, #20
   25610:	6900      	ldr	r0, [r0, #16]
   25612:	114b      	asrs	r3, r1, #5
   25614:	4298      	cmp	r0, r3
   25616:	b510      	push	{r4, lr}
   25618:	db11      	blt.n	2563e <__any_on+0x32>
   2561a:	dd0a      	ble.n	25632 <__any_on+0x26>
   2561c:	f011 011f 	ands.w	r1, r1, #31
   25620:	d007      	beq.n	25632 <__any_on+0x26>
   25622:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   25626:	fa24 f001 	lsr.w	r0, r4, r1
   2562a:	fa00 f101 	lsl.w	r1, r0, r1
   2562e:	428c      	cmp	r4, r1
   25630:	d10b      	bne.n	2564a <__any_on+0x3e>
   25632:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   25636:	4293      	cmp	r3, r2
   25638:	d803      	bhi.n	25642 <__any_on+0x36>
   2563a:	2000      	movs	r0, #0
   2563c:	bd10      	pop	{r4, pc}
   2563e:	4603      	mov	r3, r0
   25640:	e7f7      	b.n	25632 <__any_on+0x26>
   25642:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   25646:	2900      	cmp	r1, #0
   25648:	d0f5      	beq.n	25636 <__any_on+0x2a>
   2564a:	2001      	movs	r0, #1
   2564c:	e7f6      	b.n	2563c <__any_on+0x30>

0002564e <_calloc_r>:
   2564e:	b538      	push	{r3, r4, r5, lr}
   25650:	fb02 f501 	mul.w	r5, r2, r1
   25654:	4629      	mov	r1, r5
   25656:	f7f5 f879 	bl	1a74c <_malloc_r>
   2565a:	4604      	mov	r4, r0
   2565c:	b118      	cbz	r0, 25666 <_calloc_r+0x18>
   2565e:	462a      	mov	r2, r5
   25660:	2100      	movs	r1, #0
   25662:	f7ff fbf3 	bl	24e4c <memset>
   25666:	4620      	mov	r0, r4
   25668:	bd38      	pop	{r3, r4, r5, pc}

0002566a <__ssputs_r>:
   2566a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2566e:	688e      	ldr	r6, [r1, #8]
   25670:	461f      	mov	r7, r3
   25672:	42be      	cmp	r6, r7
   25674:	680b      	ldr	r3, [r1, #0]
   25676:	4682      	mov	sl, r0
   25678:	460c      	mov	r4, r1
   2567a:	4690      	mov	r8, r2
   2567c:	d82d      	bhi.n	256da <__ssputs_r+0x70>
   2567e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   25682:	f412 6f90 	tst.w	r2, #1152	; 0x480
   25686:	d026      	beq.n	256d6 <__ssputs_r+0x6c>
   25688:	6965      	ldr	r5, [r4, #20]
   2568a:	6909      	ldr	r1, [r1, #16]
   2568c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   25690:	eba3 0901 	sub.w	r9, r3, r1
   25694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   25698:	1c7b      	adds	r3, r7, #1
   2569a:	444b      	add	r3, r9
   2569c:	106d      	asrs	r5, r5, #1
   2569e:	429d      	cmp	r5, r3
   256a0:	bf38      	it	cc
   256a2:	461d      	movcc	r5, r3
   256a4:	0553      	lsls	r3, r2, #21
   256a6:	d527      	bpl.n	256f8 <__ssputs_r+0x8e>
   256a8:	4629      	mov	r1, r5
   256aa:	f7f5 f84f 	bl	1a74c <_malloc_r>
   256ae:	4606      	mov	r6, r0
   256b0:	b360      	cbz	r0, 2570c <__ssputs_r+0xa2>
   256b2:	6921      	ldr	r1, [r4, #16]
   256b4:	464a      	mov	r2, r9
   256b6:	f7ff fba8 	bl	24e0a <memcpy>
   256ba:	89a3      	ldrh	r3, [r4, #12]
   256bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   256c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   256c4:	81a3      	strh	r3, [r4, #12]
   256c6:	6126      	str	r6, [r4, #16]
   256c8:	6165      	str	r5, [r4, #20]
   256ca:	444e      	add	r6, r9
   256cc:	eba5 0509 	sub.w	r5, r5, r9
   256d0:	6026      	str	r6, [r4, #0]
   256d2:	60a5      	str	r5, [r4, #8]
   256d4:	463e      	mov	r6, r7
   256d6:	42be      	cmp	r6, r7
   256d8:	d900      	bls.n	256dc <__ssputs_r+0x72>
   256da:	463e      	mov	r6, r7
   256dc:	6820      	ldr	r0, [r4, #0]
   256de:	4632      	mov	r2, r6
   256e0:	4641      	mov	r1, r8
   256e2:	f000 f83c 	bl	2575e <memmove>
   256e6:	68a3      	ldr	r3, [r4, #8]
   256e8:	1b9b      	subs	r3, r3, r6
   256ea:	60a3      	str	r3, [r4, #8]
   256ec:	6823      	ldr	r3, [r4, #0]
   256ee:	4433      	add	r3, r6
   256f0:	6023      	str	r3, [r4, #0]
   256f2:	2000      	movs	r0, #0
   256f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   256f8:	462a      	mov	r2, r5
   256fa:	f000 f84a 	bl	25792 <_realloc_r>
   256fe:	4606      	mov	r6, r0
   25700:	2800      	cmp	r0, #0
   25702:	d1e0      	bne.n	256c6 <__ssputs_r+0x5c>
   25704:	6921      	ldr	r1, [r4, #16]
   25706:	4650      	mov	r0, sl
   25708:	f7f4 ffd6 	bl	1a6b8 <_free_r>
   2570c:	230c      	movs	r3, #12
   2570e:	f8ca 3000 	str.w	r3, [sl]
   25712:	89a3      	ldrh	r3, [r4, #12]
   25714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25718:	81a3      	strh	r3, [r4, #12]
   2571a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2571e:	e7e9      	b.n	256f4 <__ssputs_r+0x8a>

00025720 <strncmp>:
   25720:	b510      	push	{r4, lr}
   25722:	b16a      	cbz	r2, 25740 <strncmp+0x20>
   25724:	3901      	subs	r1, #1
   25726:	1884      	adds	r4, r0, r2
   25728:	f810 2b01 	ldrb.w	r2, [r0], #1
   2572c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   25730:	429a      	cmp	r2, r3
   25732:	d103      	bne.n	2573c <strncmp+0x1c>
   25734:	42a0      	cmp	r0, r4
   25736:	d001      	beq.n	2573c <strncmp+0x1c>
   25738:	2a00      	cmp	r2, #0
   2573a:	d1f5      	bne.n	25728 <strncmp+0x8>
   2573c:	1ad0      	subs	r0, r2, r3
   2573e:	bd10      	pop	{r4, pc}
   25740:	4610      	mov	r0, r2
   25742:	e7fc      	b.n	2573e <strncmp+0x1e>

00025744 <__ascii_wctomb>:
   25744:	4603      	mov	r3, r0
   25746:	4608      	mov	r0, r1
   25748:	b141      	cbz	r1, 2575c <__ascii_wctomb+0x18>
   2574a:	2aff      	cmp	r2, #255	; 0xff
   2574c:	d904      	bls.n	25758 <__ascii_wctomb+0x14>
   2574e:	228a      	movs	r2, #138	; 0x8a
   25750:	601a      	str	r2, [r3, #0]
   25752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25756:	4770      	bx	lr
   25758:	700a      	strb	r2, [r1, #0]
   2575a:	2001      	movs	r0, #1
   2575c:	4770      	bx	lr

0002575e <memmove>:
   2575e:	4288      	cmp	r0, r1
   25760:	b510      	push	{r4, lr}
   25762:	eb01 0402 	add.w	r4, r1, r2
   25766:	d902      	bls.n	2576e <memmove+0x10>
   25768:	4284      	cmp	r4, r0
   2576a:	4623      	mov	r3, r4
   2576c:	d807      	bhi.n	2577e <memmove+0x20>
   2576e:	1e43      	subs	r3, r0, #1
   25770:	42a1      	cmp	r1, r4
   25772:	d008      	beq.n	25786 <memmove+0x28>
   25774:	f811 2b01 	ldrb.w	r2, [r1], #1
   25778:	f803 2f01 	strb.w	r2, [r3, #1]!
   2577c:	e7f8      	b.n	25770 <memmove+0x12>
   2577e:	4402      	add	r2, r0
   25780:	4601      	mov	r1, r0
   25782:	428a      	cmp	r2, r1
   25784:	d100      	bne.n	25788 <memmove+0x2a>
   25786:	bd10      	pop	{r4, pc}
   25788:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2578c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   25790:	e7f7      	b.n	25782 <memmove+0x24>

00025792 <_realloc_r>:
   25792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25794:	4607      	mov	r7, r0
   25796:	4615      	mov	r5, r2
   25798:	460c      	mov	r4, r1
   2579a:	b921      	cbnz	r1, 257a6 <_realloc_r+0x14>
   2579c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   257a0:	4611      	mov	r1, r2
   257a2:	f7f4 bfd3 	b.w	1a74c <_malloc_r>
   257a6:	b922      	cbnz	r2, 257b2 <_realloc_r+0x20>
   257a8:	f7f4 ff86 	bl	1a6b8 <_free_r>
   257ac:	2400      	movs	r4, #0
   257ae:	4620      	mov	r0, r4
   257b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   257b2:	f000 f922 	bl	259fa <_malloc_usable_size_r>
   257b6:	42a8      	cmp	r0, r5
   257b8:	d2f9      	bcs.n	257ae <_realloc_r+0x1c>
   257ba:	4629      	mov	r1, r5
   257bc:	4638      	mov	r0, r7
   257be:	f7f4 ffc5 	bl	1a74c <_malloc_r>
   257c2:	4606      	mov	r6, r0
   257c4:	2800      	cmp	r0, #0
   257c6:	d0f1      	beq.n	257ac <_realloc_r+0x1a>
   257c8:	4621      	mov	r1, r4
   257ca:	462a      	mov	r2, r5
   257cc:	f7ff fb1d 	bl	24e0a <memcpy>
   257d0:	4621      	mov	r1, r4
   257d2:	4638      	mov	r0, r7
   257d4:	f7f4 ff70 	bl	1a6b8 <_free_r>
   257d8:	4634      	mov	r4, r6
   257da:	e7e8      	b.n	257ae <_realloc_r+0x1c>

000257dc <__sfputc_r>:
   257dc:	6893      	ldr	r3, [r2, #8]
   257de:	3b01      	subs	r3, #1
   257e0:	2b00      	cmp	r3, #0
   257e2:	b410      	push	{r4}
   257e4:	6093      	str	r3, [r2, #8]
   257e6:	da08      	bge.n	257fa <__sfputc_r+0x1e>
   257e8:	6994      	ldr	r4, [r2, #24]
   257ea:	42a3      	cmp	r3, r4
   257ec:	db01      	blt.n	257f2 <__sfputc_r+0x16>
   257ee:	290a      	cmp	r1, #10
   257f0:	d103      	bne.n	257fa <__sfputc_r+0x1e>
   257f2:	f85d 4b04 	ldr.w	r4, [sp], #4
   257f6:	f7f6 be91 	b.w	1c51c <__swbuf_r>
   257fa:	6813      	ldr	r3, [r2, #0]
   257fc:	1c58      	adds	r0, r3, #1
   257fe:	6010      	str	r0, [r2, #0]
   25800:	7019      	strb	r1, [r3, #0]
   25802:	4608      	mov	r0, r1
   25804:	f85d 4b04 	ldr.w	r4, [sp], #4
   25808:	4770      	bx	lr

0002580a <__sfputs_r>:
   2580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2580c:	4606      	mov	r6, r0
   2580e:	460f      	mov	r7, r1
   25810:	4614      	mov	r4, r2
   25812:	18d5      	adds	r5, r2, r3
   25814:	42ac      	cmp	r4, r5
   25816:	d101      	bne.n	2581c <__sfputs_r+0x12>
   25818:	2000      	movs	r0, #0
   2581a:	e007      	b.n	2582c <__sfputs_r+0x22>
   2581c:	f814 1b01 	ldrb.w	r1, [r4], #1
   25820:	463a      	mov	r2, r7
   25822:	4630      	mov	r0, r6
   25824:	f7ff ffda 	bl	257dc <__sfputc_r>
   25828:	1c43      	adds	r3, r0, #1
   2582a:	d1f3      	bne.n	25814 <__sfputs_r+0xa>
   2582c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002582e <abort>:
   2582e:	b508      	push	{r3, lr}
   25830:	2006      	movs	r0, #6
   25832:	f7f7 f86d 	bl	1c910 <raise>
   25836:	2001      	movs	r0, #1
   25838:	f7ee f832 	bl	138a0 <_exit>

0002583c <__sflush_r>:
   2583c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   25840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25844:	0717      	lsls	r7, r2, #28
   25846:	4605      	mov	r5, r0
   25848:	460c      	mov	r4, r1
   2584a:	d456      	bmi.n	258fa <__sflush_r+0xbe>
   2584c:	684b      	ldr	r3, [r1, #4]
   2584e:	2b00      	cmp	r3, #0
   25850:	dc02      	bgt.n	25858 <__sflush_r+0x1c>
   25852:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   25854:	2b00      	cmp	r3, #0
   25856:	dd3d      	ble.n	258d4 <__sflush_r+0x98>
   25858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2585a:	2e00      	cmp	r6, #0
   2585c:	d03a      	beq.n	258d4 <__sflush_r+0x98>
   2585e:	2300      	movs	r3, #0
   25860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   25864:	682f      	ldr	r7, [r5, #0]
   25866:	6a21      	ldr	r1, [r4, #32]
   25868:	602b      	str	r3, [r5, #0]
   2586a:	d025      	beq.n	258b8 <__sflush_r+0x7c>
   2586c:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2586e:	89a3      	ldrh	r3, [r4, #12]
   25870:	0758      	lsls	r0, r3, #29
   25872:	d505      	bpl.n	25880 <__sflush_r+0x44>
   25874:	6863      	ldr	r3, [r4, #4]
   25876:	1ad2      	subs	r2, r2, r3
   25878:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2587a:	b10b      	cbz	r3, 25880 <__sflush_r+0x44>
   2587c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2587e:	1ad2      	subs	r2, r2, r3
   25880:	6a21      	ldr	r1, [r4, #32]
   25882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   25884:	2300      	movs	r3, #0
   25886:	4628      	mov	r0, r5
   25888:	47b0      	blx	r6
   2588a:	1c41      	adds	r1, r0, #1
   2588c:	d024      	beq.n	258d8 <__sflush_r+0x9c>
   2588e:	2300      	movs	r3, #0
   25890:	6063      	str	r3, [r4, #4]
   25892:	6923      	ldr	r3, [r4, #16]
   25894:	6023      	str	r3, [r4, #0]
   25896:	89a3      	ldrh	r3, [r4, #12]
   25898:	04da      	lsls	r2, r3, #19
   2589a:	d500      	bpl.n	2589e <__sflush_r+0x62>
   2589c:	6560      	str	r0, [r4, #84]	; 0x54
   2589e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   258a0:	602f      	str	r7, [r5, #0]
   258a2:	b1b9      	cbz	r1, 258d4 <__sflush_r+0x98>
   258a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   258a8:	4299      	cmp	r1, r3
   258aa:	d002      	beq.n	258b2 <__sflush_r+0x76>
   258ac:	4628      	mov	r0, r5
   258ae:	f7f4 ff03 	bl	1a6b8 <_free_r>
   258b2:	2300      	movs	r3, #0
   258b4:	6363      	str	r3, [r4, #52]	; 0x34
   258b6:	e00d      	b.n	258d4 <__sflush_r+0x98>
   258b8:	2301      	movs	r3, #1
   258ba:	4628      	mov	r0, r5
   258bc:	47b0      	blx	r6
   258be:	1c46      	adds	r6, r0, #1
   258c0:	4602      	mov	r2, r0
   258c2:	d1d4      	bne.n	2586e <__sflush_r+0x32>
   258c4:	682b      	ldr	r3, [r5, #0]
   258c6:	2b00      	cmp	r3, #0
   258c8:	d0d1      	beq.n	2586e <__sflush_r+0x32>
   258ca:	2b1d      	cmp	r3, #29
   258cc:	d001      	beq.n	258d2 <__sflush_r+0x96>
   258ce:	2b16      	cmp	r3, #22
   258d0:	d12b      	bne.n	2592a <__sflush_r+0xee>
   258d2:	602f      	str	r7, [r5, #0]
   258d4:	2000      	movs	r0, #0
   258d6:	e02f      	b.n	25938 <__sflush_r+0xfc>
   258d8:	682a      	ldr	r2, [r5, #0]
   258da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   258de:	b142      	cbz	r2, 258f2 <__sflush_r+0xb6>
   258e0:	2a1d      	cmp	r2, #29
   258e2:	d001      	beq.n	258e8 <__sflush_r+0xac>
   258e4:	2a16      	cmp	r2, #22
   258e6:	d122      	bne.n	2592e <__sflush_r+0xf2>
   258e8:	2300      	movs	r3, #0
   258ea:	6063      	str	r3, [r4, #4]
   258ec:	6923      	ldr	r3, [r4, #16]
   258ee:	6023      	str	r3, [r4, #0]
   258f0:	e7d5      	b.n	2589e <__sflush_r+0x62>
   258f2:	6062      	str	r2, [r4, #4]
   258f4:	6922      	ldr	r2, [r4, #16]
   258f6:	6022      	str	r2, [r4, #0]
   258f8:	e7ce      	b.n	25898 <__sflush_r+0x5c>
   258fa:	690f      	ldr	r7, [r1, #16]
   258fc:	2f00      	cmp	r7, #0
   258fe:	d0e9      	beq.n	258d4 <__sflush_r+0x98>
   25900:	0793      	lsls	r3, r2, #30
   25902:	680e      	ldr	r6, [r1, #0]
   25904:	bf08      	it	eq
   25906:	694b      	ldreq	r3, [r1, #20]
   25908:	600f      	str	r7, [r1, #0]
   2590a:	bf18      	it	ne
   2590c:	2300      	movne	r3, #0
   2590e:	eba6 0807 	sub.w	r8, r6, r7
   25912:	608b      	str	r3, [r1, #8]
   25914:	f1b8 0f00 	cmp.w	r8, #0
   25918:	dddc      	ble.n	258d4 <__sflush_r+0x98>
   2591a:	6a21      	ldr	r1, [r4, #32]
   2591c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2591e:	4643      	mov	r3, r8
   25920:	463a      	mov	r2, r7
   25922:	4628      	mov	r0, r5
   25924:	47b0      	blx	r6
   25926:	2800      	cmp	r0, #0
   25928:	dc08      	bgt.n	2593c <__sflush_r+0x100>
   2592a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2592e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25932:	81a3      	strh	r3, [r4, #12]
   25934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2593c:	4407      	add	r7, r0
   2593e:	eba8 0800 	sub.w	r8, r8, r0
   25942:	e7e7      	b.n	25914 <__sflush_r+0xd8>

00025944 <__sfmoreglue>:
   25944:	b570      	push	{r4, r5, r6, lr}
   25946:	2368      	movs	r3, #104	; 0x68
   25948:	1e4d      	subs	r5, r1, #1
   2594a:	435d      	muls	r5, r3
   2594c:	460e      	mov	r6, r1
   2594e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   25952:	f7f4 fefb 	bl	1a74c <_malloc_r>
   25956:	4604      	mov	r4, r0
   25958:	b140      	cbz	r0, 2596c <__sfmoreglue+0x28>
   2595a:	2100      	movs	r1, #0
   2595c:	e9c0 1600 	strd	r1, r6, [r0]
   25960:	300c      	adds	r0, #12
   25962:	60a0      	str	r0, [r4, #8]
   25964:	f105 0268 	add.w	r2, r5, #104	; 0x68
   25968:	f7ff fa70 	bl	24e4c <memset>
   2596c:	4620      	mov	r0, r4
   2596e:	bd70      	pop	{r4, r5, r6, pc}

00025970 <_fwalk_reent>:
   25970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25974:	4606      	mov	r6, r0
   25976:	4688      	mov	r8, r1
   25978:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2597c:	2700      	movs	r7, #0
   2597e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   25982:	f1b9 0901 	subs.w	r9, r9, #1
   25986:	d505      	bpl.n	25994 <_fwalk_reent+0x24>
   25988:	6824      	ldr	r4, [r4, #0]
   2598a:	2c00      	cmp	r4, #0
   2598c:	d1f7      	bne.n	2597e <_fwalk_reent+0xe>
   2598e:	4638      	mov	r0, r7
   25990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25994:	89ab      	ldrh	r3, [r5, #12]
   25996:	2b01      	cmp	r3, #1
   25998:	d907      	bls.n	259aa <_fwalk_reent+0x3a>
   2599a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2599e:	3301      	adds	r3, #1
   259a0:	d003      	beq.n	259aa <_fwalk_reent+0x3a>
   259a2:	4629      	mov	r1, r5
   259a4:	4630      	mov	r0, r6
   259a6:	47c0      	blx	r8
   259a8:	4307      	orrs	r7, r0
   259aa:	3568      	adds	r5, #104	; 0x68
   259ac:	e7e9      	b.n	25982 <_fwalk_reent+0x12>

000259ae <__swhatbuf_r>:
   259ae:	b570      	push	{r4, r5, r6, lr}
   259b0:	460c      	mov	r4, r1
   259b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   259b6:	2900      	cmp	r1, #0
   259b8:	b096      	sub	sp, #88	; 0x58
   259ba:	4615      	mov	r5, r2
   259bc:	461e      	mov	r6, r3
   259be:	da0d      	bge.n	259dc <__swhatbuf_r+0x2e>
   259c0:	89a3      	ldrh	r3, [r4, #12]
   259c2:	f013 0f80 	tst.w	r3, #128	; 0x80
   259c6:	f04f 0100 	mov.w	r1, #0
   259ca:	bf14      	ite	ne
   259cc:	2340      	movne	r3, #64	; 0x40
   259ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   259d2:	2000      	movs	r0, #0
   259d4:	6031      	str	r1, [r6, #0]
   259d6:	602b      	str	r3, [r5, #0]
   259d8:	b016      	add	sp, #88	; 0x58
   259da:	bd70      	pop	{r4, r5, r6, pc}
   259dc:	466a      	mov	r2, sp
   259de:	f7f6 ffd3 	bl	1c988 <_fstat_r>
   259e2:	2800      	cmp	r0, #0
   259e4:	dbec      	blt.n	259c0 <__swhatbuf_r+0x12>
   259e6:	9901      	ldr	r1, [sp, #4]
   259e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   259ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   259f0:	4259      	negs	r1, r3
   259f2:	4159      	adcs	r1, r3
   259f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   259f8:	e7eb      	b.n	259d2 <__swhatbuf_r+0x24>

000259fa <_malloc_usable_size_r>:
   259fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
   259fe:	1f18      	subs	r0, r3, #4
   25a00:	2b00      	cmp	r3, #0
   25a02:	bfbc      	itt	lt
   25a04:	580b      	ldrlt	r3, [r1, r0]
   25a06:	18c0      	addlt	r0, r0, r3
   25a08:	4770      	bx	lr

00025a0a <_raise_r>:
   25a0a:	291f      	cmp	r1, #31
   25a0c:	b538      	push	{r3, r4, r5, lr}
   25a0e:	4605      	mov	r5, r0
   25a10:	460c      	mov	r4, r1
   25a12:	d904      	bls.n	25a1e <_raise_r+0x14>
   25a14:	2316      	movs	r3, #22
   25a16:	6003      	str	r3, [r0, #0]
   25a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a1c:	bd38      	pop	{r3, r4, r5, pc}
   25a1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   25a20:	b112      	cbz	r2, 25a28 <_raise_r+0x1e>
   25a22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   25a26:	b94b      	cbnz	r3, 25a3c <_raise_r+0x32>
   25a28:	4628      	mov	r0, r5
   25a2a:	f000 f816 	bl	25a5a <_getpid_r>
   25a2e:	4622      	mov	r2, r4
   25a30:	4601      	mov	r1, r0
   25a32:	4628      	mov	r0, r5
   25a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25a38:	f7f6 bf72 	b.w	1c920 <_kill_r>
   25a3c:	2b01      	cmp	r3, #1
   25a3e:	d00a      	beq.n	25a56 <_raise_r+0x4c>
   25a40:	1c59      	adds	r1, r3, #1
   25a42:	d103      	bne.n	25a4c <_raise_r+0x42>
   25a44:	2316      	movs	r3, #22
   25a46:	6003      	str	r3, [r0, #0]
   25a48:	2001      	movs	r0, #1
   25a4a:	e7e7      	b.n	25a1c <_raise_r+0x12>
   25a4c:	2100      	movs	r1, #0
   25a4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   25a52:	4620      	mov	r0, r4
   25a54:	4798      	blx	r3
   25a56:	2000      	movs	r0, #0
   25a58:	e7e0      	b.n	25a1c <_raise_r+0x12>

00025a5a <_getpid_r>:
   25a5a:	f7fc b999 	b.w	21d90 <_getpid>

00025a5e <__sread>:
   25a5e:	b510      	push	{r4, lr}
   25a60:	460c      	mov	r4, r1
   25a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25a66:	f7f6 ffc3 	bl	1c9f0 <_read_r>
   25a6a:	2800      	cmp	r0, #0
   25a6c:	bfab      	itete	ge
   25a6e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   25a70:	89a3      	ldrhlt	r3, [r4, #12]
   25a72:	181b      	addge	r3, r3, r0
   25a74:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   25a78:	bfac      	ite	ge
   25a7a:	6563      	strge	r3, [r4, #84]	; 0x54
   25a7c:	81a3      	strhlt	r3, [r4, #12]
   25a7e:	bd10      	pop	{r4, pc}

00025a80 <__swrite>:
   25a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25a84:	461f      	mov	r7, r3
   25a86:	898b      	ldrh	r3, [r1, #12]
   25a88:	05db      	lsls	r3, r3, #23
   25a8a:	4605      	mov	r5, r0
   25a8c:	460c      	mov	r4, r1
   25a8e:	4616      	mov	r6, r2
   25a90:	d505      	bpl.n	25a9e <__swrite+0x1e>
   25a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25a96:	2302      	movs	r3, #2
   25a98:	2200      	movs	r2, #0
   25a9a:	f7f6 ff97 	bl	1c9cc <_lseek_r>
   25a9e:	89a3      	ldrh	r3, [r4, #12]
   25aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   25aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   25aa8:	81a3      	strh	r3, [r4, #12]
   25aaa:	4632      	mov	r2, r6
   25aac:	463b      	mov	r3, r7
   25aae:	4628      	mov	r0, r5
   25ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25ab4:	f7f6 bf46 	b.w	1c944 <_write_r>

00025ab8 <__sseek>:
   25ab8:	b510      	push	{r4, lr}
   25aba:	460c      	mov	r4, r1
   25abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25ac0:	f7f6 ff84 	bl	1c9cc <_lseek_r>
   25ac4:	1c43      	adds	r3, r0, #1
   25ac6:	89a3      	ldrh	r3, [r4, #12]
   25ac8:	bf15      	itete	ne
   25aca:	6560      	strne	r0, [r4, #84]	; 0x54
   25acc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   25ad0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   25ad4:	81a3      	strheq	r3, [r4, #12]
   25ad6:	bf18      	it	ne
   25ad8:	81a3      	strhne	r3, [r4, #12]
   25ada:	bd10      	pop	{r4, pc}

00025adc <__sclose>:
   25adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25ae0:	f7f6 bf42 	b.w	1c968 <_close_r>
